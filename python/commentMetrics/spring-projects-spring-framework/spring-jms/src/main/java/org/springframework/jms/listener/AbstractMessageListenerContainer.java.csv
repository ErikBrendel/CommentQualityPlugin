# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1405345771;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1405696881;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1406040641;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1425072498;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1425330316;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1426624897;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1429198188;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1432289819;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1432331447;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1434018810;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1438003938;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1492514138;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1495868221;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1496837955;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1498780456;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1500448076;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1500495740;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1519732288;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public abstract void setConcurrency(String concurrency)_;1530174524;Specify concurrency limits.;public abstract void setConcurrency(String concurrency)_;specify,concurrency,limits;public,abstract,void,set,concurrency,string,concurrency
AbstractMessageListenerContainer -> public void setSubscriptionName(String subscriptionName);1405696881;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setSubscriptionName(String subscriptionName);1406040641;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setSubscriptionName(String subscriptionName);1425072498;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setSubscriptionName(String subscriptionName);1425330316;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setSubscriptionName(String subscriptionName);1426624897;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@since 4.1_@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,since,4,1,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setSubscriptionName(String subscriptionName);1429198188;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@since 4.1_@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,since,4,1,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setSubscriptionName(String subscriptionName);1432289819;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@since 4.1_@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,since,4,1,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setSubscriptionName(String subscriptionName);1432331447;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@since 4.1_@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,since,4,1,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setSubscriptionName(String subscriptionName);1434018810;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@since 4.1_@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,since,4,1,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setSubscriptionName(String subscriptionName);1438003938;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@since 4.1_@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,since,4,1,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setSubscriptionName(String subscriptionName);1492514138;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@since 4.1_@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,since,4,1,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setSubscriptionName(String subscriptionName);1495868221;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@since 4.1_@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,since,4,1,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setSubscriptionName(String subscriptionName);1496837955;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@since 4.1_@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,since,4,1,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setSubscriptionName(String subscriptionName);1498780456;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@since 4.1_@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,since,4,1,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> @Nullable 	public ExceptionListener getExceptionListener();1495868221;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;@Nullable_	public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;nullable,public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> @Nullable 	public ExceptionListener getExceptionListener();1496837955;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;@Nullable_	public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;nullable,public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> @Nullable 	public ExceptionListener getExceptionListener();1498780456;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;@Nullable_	public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;nullable,public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> @Nullable 	public ExceptionListener getExceptionListener();1500448076;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;@Nullable_	public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;nullable,public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> @Nullable 	public ExceptionListener getExceptionListener();1500495740;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;@Nullable_	public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;nullable,public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> @Nullable 	public ExceptionListener getExceptionListener();1519732288;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;@Nullable_	public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;nullable,public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> @Nullable 	public ExceptionListener getExceptionListener();1530174524;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;@Nullable_	public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;nullable,public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1328020251;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted() && isSessionLocallyTransacted(session)) {_			_			JmsUtils.rollbackIfNecessary(session)__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1356735495;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted() && isSessionLocallyTransacted(session)) {_			_			JmsUtils.rollbackIfNecessary(session)__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1397718966;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted() && isSessionLocallyTransacted(session)) {_			_			JmsUtils.rollbackIfNecessary(session)__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1401724323;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted() && isSessionLocallyTransacted(session)) {_			_			JmsUtils.rollbackIfNecessary(session)__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1405345771;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted() && isSessionLocallyTransacted(session)) {_			_			JmsUtils.rollbackIfNecessary(session)__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1405696881;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted() && isSessionLocallyTransacted(session)) {_			_			JmsUtils.rollbackIfNecessary(session)__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1406040641;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,session,recover
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1425072498;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,session,recover
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1425330316;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,session,recover
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1426624897;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,session,recover
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1429198188;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,session,recover
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1432289819;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else if (isClientAcknowledge(session)) {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1432331447;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else if (isClientAcknowledge(session)) {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1434018810;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else if (isClientAcknowledge(session)) {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1438003938;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else if (isClientAcknowledge(session)) {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1492514138;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else if (isClientAcknowledge(session)) {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1495868221;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else if (isClientAcknowledge(session)) {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1496837955;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else if (isClientAcknowledge(session)) {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1498780456;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else if (isClientAcknowledge(session)) {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1500448076;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else if (isClientAcknowledge(session)) {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1500495740;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else if (isClientAcknowledge(session)) {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1519732288;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else if (isClientAcknowledge(session)) {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover
AbstractMessageListenerContainer -> protected void rollbackIfNecessary(Session session) throws JMSException;1530174524;Perform a rollback, if appropriate._@param session the JMS Session to rollback_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackIfNecessary(Session session) throws JMSException {_		if (session.getTransacted()) {_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		else if (isClientAcknowledge(session)) {_			session.recover()__		}_	};perform,a,rollback,if,appropriate,param,session,the,jms,session,to,rollback,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,if,necessary,session,session,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1328020251;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		if (this.errorHandler != null) {_			this.errorHandler.handleError(ex)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,if,this,error,handler,null,this,error,handler,handle,error,ex,else,if,logger,is,warn,enabled,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1356735495;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		if (this.errorHandler != null) {_			this.errorHandler.handleError(ex)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,if,this,error,handler,null,this,error,handler,handle,error,ex,else,if,logger,is,warn,enabled,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1397718966;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		if (this.errorHandler != null) {_			this.errorHandler.handleError(ex)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,if,this,error,handler,null,this,error,handler,handle,error,ex,else,if,logger,is,warn,enabled,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1401724323;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		if (this.errorHandler != null) {_			this.errorHandler.handleError(ex)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,if,this,error,handler,null,this,error,handler,handle,error,ex,else,if,logger,is,warn,enabled,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1405345771;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		if (this.errorHandler != null) {_			this.errorHandler.handleError(ex)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,if,this,error,handler,null,this,error,handler,handle,error,ex,else,if,logger,is,warn,enabled,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1405696881;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,if,logger,is,warn,enabled,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1406040641;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,if,logger,is,warn,enabled,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1425072498;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,if,logger,is,warn,enabled,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1425330316;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,if,logger,is,warn,enabled,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1426624897;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,if,logger,is,warn,enabled,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1429198188;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,if,logger,is,warn,enabled,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1432289819;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,if,logger,is,warn,enabled,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1432331447;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,if,logger,is,warn,enabled,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1434018810;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else if (logger.isWarnEnabled()) {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,if,logger,is,warn,enabled,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1438003938;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1492514138;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1495868221;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1496837955;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1498780456;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1500448076;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1500495740;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1519732288;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> protected void invokeErrorHandler(Throwable ex);1530174524;Invoke the registered ErrorHandler, if any. Log at warn level otherwise._@param ex the uncaught error that arose during JMS processing._@see #setErrorHandler;protected void invokeErrorHandler(Throwable ex) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			errorHandler.handleError(ex)__		}_		else {_			logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex)__		}_	};invoke,the,registered,error,handler,if,any,log,at,warn,level,otherwise,param,ex,the,uncaught,error,that,arose,during,jms,processing,see,set,error,handler;protected,void,invoke,error,handler,throwable,ex,error,handler,error,handler,get,error,handler,if,error,handler,null,error,handler,handle,error,ex,else,logger,warn,execution,of,jms,message,listener,failed,and,no,error,handler,has,been,set,ex
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1328020251;Set the name of a durable subscription to create. To be applied in case_of a topic (pub-sub domain) with subscription durability activated._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription._@see #setSubscriptionDurable_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.durableSubscriptionName = durableSubscriptionName__	};set,the,name,of,a,durable,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,subscription,durability,activated,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,see,set,subscription,durable,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,durable,subscription,name,durable,subscription,name
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1356735495;Set the name of a durable subscription to create. To be applied in case_of a topic (pub-sub domain) with subscription durability activated._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription._@see #setSubscriptionDurable_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.durableSubscriptionName = durableSubscriptionName__	};set,the,name,of,a,durable,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,subscription,durability,activated,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,see,set,subscription,durable,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,durable,subscription,name,durable,subscription,name
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1397718966;Set the name of a durable subscription to create. To be applied in case_of a topic (pub-sub domain) with subscription durability activated._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription._@see #setSubscriptionDurable_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.durableSubscriptionName = durableSubscriptionName__	};set,the,name,of,a,durable,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,subscription,durability,activated,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,see,set,subscription,durable,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,durable,subscription,name,durable,subscription,name
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1401724323;Set the name of a durable subscription to create. To be applied in case_of a topic (pub-sub domain) with subscription durability activated._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription._@see #setSubscriptionDurable_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.durableSubscriptionName = durableSubscriptionName__	};set,the,name,of,a,durable,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,subscription,durability,activated,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,see,set,subscription,durable,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,durable,subscription,name,durable,subscription,name
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1405345771;Set the name of a durable subscription to create. To be applied in case_of a topic (pub-sub domain) with subscription durability activated._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription._@see #setSubscriptionDurable_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.durableSubscriptionName = durableSubscriptionName__	};set,the,name,of,a,durable,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,subscription,durability,activated,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,see,set,subscription,durable,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,durable,subscription,name,durable,subscription,name
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1405696881;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = true__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,true
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1406040641;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = true__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,true
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1425072498;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = true__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,true
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1425330316;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = true__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,true
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1426624897;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = true__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,true
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1429198188;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = true__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,true
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1432289819;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = true__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,true
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1432331447;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = true__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,true
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1434018810;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = true__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,true
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1438003938;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = true__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,true
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1492514138;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = true__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,true
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1495868221;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = true__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,true
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1496837955;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = true__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,true
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(String durableSubscriptionName);1498780456;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = true__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,true
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(@Nullable String durableSubscriptionName);1500448076;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(@Nullable String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = (durableSubscriptionName != null)__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,nullable,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,durable,subscription,name,null
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(@Nullable String durableSubscriptionName);1500495740;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(@Nullable String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = (durableSubscriptionName != null)__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,nullable,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,durable,subscription,name,null
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(@Nullable String durableSubscriptionName);1519732288;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(@Nullable String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = (durableSubscriptionName != null)__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,nullable,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,durable,subscription,name,null
AbstractMessageListenerContainer -> public void setDurableSubscriptionName(@Nullable String durableSubscriptionName);1530174524;Set the name of a durable subscription to create. This method switches_to pub-sub domain mode and activates subscription durability as well._<p>The durable subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each durable subscription,_except for a shared durable subscription (which requires JMS 2.0)._@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setDurableSubscriptionName(@Nullable String durableSubscriptionName) {_		this.subscriptionName = durableSubscriptionName__		this.subscriptionDurable = (durableSubscriptionName != null)__	};set,the,name,of,a,durable,subscription,to,create,this,method,switches,to,pub,sub,domain,mode,and,activates,subscription,durability,as,well,p,the,durable,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,durable,subscription,except,for,a,shared,durable,subscription,which,requires,jms,2,0,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,durable,subscription,name,nullable,string,durable,subscription,name,this,subscription,name,durable,subscription,name,this,subscription,durable,durable,subscription,name,null
AbstractMessageListenerContainer -> protected String getDestinationDescription();1328020251;Return a descriptive String for this container's JMS destination_(never <code>null</code>).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null,code;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1356735495;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1397718966;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1401724323;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1405345771;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1405696881;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1406040641;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1425072498;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1425330316;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1426624897;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1429198188;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1432289819;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1432331447;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1434018810;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1438003938;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1492514138;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1495868221;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1496837955;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		return this.destination.toString()__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,return,this,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1498780456;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		Object destination = this.destination__		return (destination != null ? destination.toString() : "")__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,object,destination,this,destination,return,destination,null,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1500448076;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		Object destination = this.destination__		return (destination != null ? destination.toString() : "")__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,object,destination,this,destination,return,destination,null,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1500495740;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		Object destination = this.destination__		return (destination != null ? destination.toString() : "")__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,object,destination,this,destination,return,destination,null,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1519732288;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		Object destination = this.destination__		return (destination != null ? destination.toString() : "")__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,object,destination,this,destination,return,destination,null,destination,to,string
AbstractMessageListenerContainer -> protected String getDestinationDescription();1530174524;Return a descriptive String for this container's JMS destination_(never {@code null}).;protected String getDestinationDescription() {_		Object destination = this.destination__		return (destination != null ? destination.toString() : "")__	};return,a,descriptive,string,for,this,container,s,jms,destination,never,code,null;protected,string,get,destination,description,object,destination,this,destination,return,destination,null,destination,to,string
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1328020251;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1356735495;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1397718966;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1401724323;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1405345771;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1405696881;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1406040641;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1425072498;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1425330316;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1426624897;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1429198188;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1432289819;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1432331447;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1434018810;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1438003938;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1492514138;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1495868221;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1496837955;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1498780456;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1500448076;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1500495740;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1519732288;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> public void setExposeListenerSession(boolean exposeListenerSession);1530174524;Set whether to expose the listener JMS Session to a registered_{@link SessionAwareMessageListener} as well as to_{@link org.springframework.jms.core.JmsTemplate} calls._<p>Default is "true", reusing the listener's {@link Session}._Turn this off to expose a fresh JMS Session fetched from the same_underlying JMS {@link Connection} instead, which might be necessary_on some JMS providers._<p>Note that Sessions managed by an external transaction manager will_always get exposed to {@link org.springframework.jms.core.JmsTemplate}_calls. So in terms of JmsTemplate exposure, this setting only affects_locally transacted Sessions._@see SessionAwareMessageListener;public void setExposeListenerSession(boolean exposeListenerSession) {_		this.exposeListenerSession = exposeListenerSession__	};set,whether,to,expose,the,listener,jms,session,to,a,registered,link,session,aware,message,listener,as,well,as,to,link,org,springframework,jms,core,jms,template,calls,p,default,is,true,reusing,the,listener,s,link,session,turn,this,off,to,expose,a,fresh,jms,session,fetched,from,the,same,underlying,jms,link,connection,instead,which,might,be,necessary,on,some,jms,providers,p,note,that,sessions,managed,by,an,external,transaction,manager,will,always,get,exposed,to,link,org,springframework,jms,core,jms,template,calls,so,in,terms,of,jms,template,exposure,this,setting,only,affects,locally,transacted,sessions,see,session,aware,message,listener;public,void,set,expose,listener,session,boolean,expose,listener,session,this,expose,listener,session,expose,listener,session
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1328020251;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1356735495;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1397718966;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1401724323;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1405345771;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1405696881;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1406040641;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1425072498;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1425330316;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1426624897;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1429198188;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1432289819;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1432331447;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1434018810;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1438003938;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1492514138;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1495868221;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1496837955;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1498780456;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1500448076;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1500495740;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1519732288;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> protected String getDefaultSubscriptionName(Object messageListener);1530174524;Determine the default subscription name for the given message listener._@param messageListener the message listener object to check_@return the default subscription name_@see SubscriptionNameProvider;protected String getDefaultSubscriptionName(Object messageListener) {_		if (messageListener instanceof SubscriptionNameProvider) {_			return ((SubscriptionNameProvider) messageListener).getSubscriptionName()__		}_		else {_			return messageListener.getClass().getName()__		}_	};determine,the,default,subscription,name,for,the,given,message,listener,param,message,listener,the,message,listener,object,to,check,return,the,default,subscription,name,see,subscription,name,provider;protected,string,get,default,subscription,name,object,message,listener,if,message,listener,instanceof,subscription,name,provider,return,subscription,name,provider,message,listener,get,subscription,name,else,return,message,listener,get,class,get,name
AbstractMessageListenerContainer -> public void setExceptionListener(@Nullable ExceptionListener exceptionListener);1500448076;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(@Nullable ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,nullable,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(@Nullable ExceptionListener exceptionListener);1500495740;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(@Nullable ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,nullable,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(@Nullable ExceptionListener exceptionListener);1519732288;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(@Nullable ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,nullable,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(@Nullable ExceptionListener exceptionListener);1530174524;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(@Nullable ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,nullable,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1328020251;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1356735495;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1397718966;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1401724323;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1405345771;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1405696881;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1406040641;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1425072498;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1425330316;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1426624897;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1429198188;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1432289819;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1432331447;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1434018810;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1438003938;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1492514138;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1495868221;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1496837955;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1498780456;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1500448076;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1500495740;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1519732288;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public boolean isAcceptMessagesWhileStopping();1530174524;Return whether to accept received messages while the listener container_in the process of stopping.;public boolean isAcceptMessagesWhileStopping() {_		return this.acceptMessagesWhileStopping__	};return,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping;public,boolean,is,accept,messages,while,stopping,return,this,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1328020251;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "durableSubscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "durableSubscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain)._@see #setDurableSubscriptionName;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,durable,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,durable,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,see,set,durable,subscription,name;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1356735495;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "durableSubscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "durableSubscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain)._@see #setDurableSubscriptionName;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,durable,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,durable,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,see,set,durable,subscription,name;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1397718966;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "durableSubscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "durableSubscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain)._@see #setDurableSubscriptionName;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,durable,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,durable,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,see,set,durable,subscription,name;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1401724323;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "durableSubscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "durableSubscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain)._@see #setDurableSubscriptionName;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,durable,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,durable,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,see,set,durable,subscription,name;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1405345771;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "durableSubscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "durableSubscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain)._@see #setDurableSubscriptionName;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,durable,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,durable,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,see,set,durable,subscription,name;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1405696881;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1406040641;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1425072498;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1425330316;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1426624897;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1429198188;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1432289819;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1432331447;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1434018810;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1438003938;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1492514138;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1495868221;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1496837955;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1498780456;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1500448076;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1500495740;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1519732288;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionDurable(boolean subscriptionDurable);1530174524;Set whether to make the subscription durable. The durable subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a durable subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._@see #setSubscriptionName_@see #setPubSubDomain;public void setSubscriptionDurable(boolean subscriptionDurable) {_		this.subscriptionDurable = subscriptionDurable__		if (subscriptionDurable) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,durable,the,durable,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,durable,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,see,set,subscription,name,see,set,pub,sub,domain;public,void,set,subscription,durable,boolean,subscription,durable,this,subscription,durable,subscription,durable,if,subscription,durable,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setMessageListener(@Nullable Object messageListener);1500448076;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(@Nullable Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (messageListener != null && this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,nullable,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,message,listener,null,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(@Nullable Object messageListener);1500495740;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(@Nullable Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (messageListener != null && this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,nullable,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,message,listener,null,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(@Nullable Object messageListener);1519732288;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(@Nullable Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (messageListener != null && this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,nullable,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,message,listener,null,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(@Nullable Object messageListener);1530174524;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(@Nullable Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (messageListener != null && this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,nullable,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,message,listener,null,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageConverter(@Nullable MessageConverter messageConverter);1500495740;Set the {@link MessageConverter} strategy for converting JMS Messages._@since 4.1;public void setMessageConverter(@Nullable MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,since,4,1;public,void,set,message,converter,nullable,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(@Nullable MessageConverter messageConverter);1519732288;Set the {@link MessageConverter} strategy for converting JMS Messages._@since 4.1;public void setMessageConverter(@Nullable MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,since,4,1;public,void,set,message,converter,nullable,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(@Nullable MessageConverter messageConverter);1530174524;Set the {@link MessageConverter} strategy for converting JMS Messages._@since 4.1;public void setMessageConverter(@Nullable MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,since,4,1;public,void,set,message,converter,nullable,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1328020251;Set an ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message. By default there will be <b>no</b> ErrorHandler_so that error-level logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,an,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1356735495;Set an ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message. By default there will be <b>no</b> ErrorHandler_so that error-level logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,an,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1397718966;Set an ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message. By default there will be <b>no</b> ErrorHandler_so that error-level logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,an,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1401724323;Set an ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message. By default there will be <b>no</b> ErrorHandler_so that error-level logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,an,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1405345771;Set an ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message. By default there will be <b>no</b> ErrorHandler_so that error-level logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,an,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1405696881;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1406040641;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1425072498;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1425330316;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1426624897;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1429198188;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1432289819;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1432331447;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1434018810;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1438003938;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1492514138;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1495868221;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1496837955;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(ErrorHandler errorHandler);1498780456;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> protected void checkMessageListener(@Nullable Object messageListener);1500448076;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(@Nullable Object messageListener) {_		if (messageListener != null && !(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,nullable,object,message,listener,if,message,listener,null,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(@Nullable Object messageListener);1500495740;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(@Nullable Object messageListener) {_		if (messageListener != null && !(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,nullable,object,message,listener,if,message,listener,null,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(@Nullable Object messageListener);1519732288;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(@Nullable Object messageListener) {_		if (messageListener != null && !(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,nullable,object,message,listener,if,message,listener,null,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(@Nullable Object messageListener);1530174524;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(@Nullable Object messageListener) {_		if (messageListener != null && !(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,nullable,object,message,listener,if,message,listener,null,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> public void setMessageSelector(@Nullable String messageSelector);1495868221;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(@Nullable String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,nullable,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(@Nullable String messageSelector);1496837955;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(@Nullable String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,nullable,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(@Nullable String messageSelector);1498780456;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(@Nullable String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,nullable,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(@Nullable String messageSelector);1500448076;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(@Nullable String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,nullable,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(@Nullable String messageSelector);1500495740;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(@Nullable String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,nullable,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(@Nullable String messageSelector);1519732288;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(@Nullable String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,nullable,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(@Nullable String messageSelector);1530174524;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(@Nullable String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,nullable,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1405696881;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				_				_				Method method = (isSubscriptionDurable() ?_						createSharedDurableConsumerMethod : createSharedConsumerMethod)__				try {_					return (MessageConsumer) method.invoke(session, destination, getSubscriptionName(), getMessageSelector())__				}_				catch (InvocationTargetException ex) {_					if (ex.getTargetException() instanceof JMSException) {_						throw (JMSException) ex.getTargetException()__					}_					ReflectionUtils.handleInvocationTargetException(ex)__					return null__				}_				catch (IllegalAccessException ex) {_					throw new IllegalStateException("Could not access JMS 2.0 API method: " + ex.getMessage())__				}_			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,method,method,is,subscription,durable,create,shared,durable,consumer,method,create,shared,consumer,method,try,return,message,consumer,method,invoke,session,destination,get,subscription,name,get,message,selector,catch,invocation,target,exception,ex,if,ex,get,target,exception,instanceof,jmsexception,throw,jmsexception,ex,get,target,exception,reflection,utils,handle,invocation,target,exception,ex,return,null,catch,illegal,access,exception,ex,throw,new,illegal,state,exception,could,not,access,jms,2,0,api,method,ex,get,message,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1406040641;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				_				_				Method method = (isSubscriptionDurable() ?_						createSharedDurableConsumerMethod : createSharedConsumerMethod)__				try {_					return (MessageConsumer) method.invoke(session, destination, getSubscriptionName(), getMessageSelector())__				}_				catch (InvocationTargetException ex) {_					if (ex.getTargetException() instanceof JMSException) {_						throw (JMSException) ex.getTargetException()__					}_					ReflectionUtils.handleInvocationTargetException(ex)__					return null__				}_				catch (IllegalAccessException ex) {_					throw new IllegalStateException("Could not access JMS 2.0 API method: " + ex.getMessage())__				}_			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,method,method,is,subscription,durable,create,shared,durable,consumer,method,create,shared,consumer,method,try,return,message,consumer,method,invoke,session,destination,get,subscription,name,get,message,selector,catch,invocation,target,exception,ex,if,ex,get,target,exception,instanceof,jmsexception,throw,jmsexception,ex,get,target,exception,reflection,utils,handle,invocation,target,exception,ex,return,null,catch,illegal,access,exception,ex,throw,new,illegal,state,exception,could,not,access,jms,2,0,api,method,ex,get,message,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1425072498;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				_				_				Method method = (isSubscriptionDurable() ?_						createSharedDurableConsumerMethod : createSharedConsumerMethod)__				try {_					return (MessageConsumer) method.invoke(session, destination, getSubscriptionName(), getMessageSelector())__				}_				catch (InvocationTargetException ex) {_					if (ex.getTargetException() instanceof JMSException) {_						throw (JMSException) ex.getTargetException()__					}_					ReflectionUtils.handleInvocationTargetException(ex)__					return null__				}_				catch (IllegalAccessException ex) {_					throw new IllegalStateException("Could not access JMS 2.0 API method: " + ex.getMessage())__				}_			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,method,method,is,subscription,durable,create,shared,durable,consumer,method,create,shared,consumer,method,try,return,message,consumer,method,invoke,session,destination,get,subscription,name,get,message,selector,catch,invocation,target,exception,ex,if,ex,get,target,exception,instanceof,jmsexception,throw,jmsexception,ex,get,target,exception,reflection,utils,handle,invocation,target,exception,ex,return,null,catch,illegal,access,exception,ex,throw,new,illegal,state,exception,could,not,access,jms,2,0,api,method,ex,get,message,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1425330316;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				_				_				Method method = (isSubscriptionDurable() ?_						createSharedDurableConsumerMethod : createSharedConsumerMethod)__				try {_					return (MessageConsumer) method.invoke(session, destination, getSubscriptionName(), getMessageSelector())__				}_				catch (InvocationTargetException ex) {_					if (ex.getTargetException() instanceof JMSException) {_						throw (JMSException) ex.getTargetException()__					}_					ReflectionUtils.handleInvocationTargetException(ex)__					return null__				}_				catch (IllegalAccessException ex) {_					throw new IllegalStateException("Could not access JMS 2.0 API method: " + ex.getMessage())__				}_			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,method,method,is,subscription,durable,create,shared,durable,consumer,method,create,shared,consumer,method,try,return,message,consumer,method,invoke,session,destination,get,subscription,name,get,message,selector,catch,invocation,target,exception,ex,if,ex,get,target,exception,instanceof,jmsexception,throw,jmsexception,ex,get,target,exception,reflection,utils,handle,invocation,target,exception,ex,return,null,catch,illegal,access,exception,ex,throw,new,illegal,state,exception,could,not,access,jms,2,0,api,method,ex,get,message,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1426624897;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				_				_				Method method = (isSubscriptionDurable() ?_						createSharedDurableConsumerMethod : createSharedConsumerMethod)__				try {_					return (MessageConsumer) method.invoke(session, destination, getSubscriptionName(), getMessageSelector())__				}_				catch (InvocationTargetException ex) {_					if (ex.getTargetException() instanceof JMSException) {_						throw (JMSException) ex.getTargetException()__					}_					ReflectionUtils.handleInvocationTargetException(ex)__					return null__				}_				catch (IllegalAccessException ex) {_					throw new IllegalStateException("Could not access JMS 2.0 API method: " + ex.getMessage())__				}_			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,method,method,is,subscription,durable,create,shared,durable,consumer,method,create,shared,consumer,method,try,return,message,consumer,method,invoke,session,destination,get,subscription,name,get,message,selector,catch,invocation,target,exception,ex,if,ex,get,target,exception,instanceof,jmsexception,throw,jmsexception,ex,get,target,exception,reflection,utils,handle,invocation,target,exception,ex,return,null,catch,illegal,access,exception,ex,throw,new,illegal,state,exception,could,not,access,jms,2,0,api,method,ex,get,message,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1429198188;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				_				_				Method method = (isSubscriptionDurable() ?_						createSharedDurableConsumerMethod : createSharedConsumerMethod)__				try {_					return (MessageConsumer) method.invoke(session, destination, getSubscriptionName(), getMessageSelector())__				}_				catch (InvocationTargetException ex) {_					if (ex.getTargetException() instanceof JMSException) {_						throw (JMSException) ex.getTargetException()__					}_					ReflectionUtils.handleInvocationTargetException(ex)__					return null__				}_				catch (IllegalAccessException ex) {_					throw new IllegalStateException("Could not access JMS 2.0 API method: " + ex.getMessage())__				}_			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,method,method,is,subscription,durable,create,shared,durable,consumer,method,create,shared,consumer,method,try,return,message,consumer,method,invoke,session,destination,get,subscription,name,get,message,selector,catch,invocation,target,exception,ex,if,ex,get,target,exception,instanceof,jmsexception,throw,jmsexception,ex,get,target,exception,reflection,utils,handle,invocation,target,exception,ex,return,null,catch,illegal,access,exception,ex,throw,new,illegal,state,exception,could,not,access,jms,2,0,api,method,ex,get,message,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1432289819;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				_				_				Method method = (isSubscriptionDurable() ?_						createSharedDurableConsumerMethod : createSharedConsumerMethod)__				try {_					return (MessageConsumer) method.invoke(session, destination, getSubscriptionName(), getMessageSelector())__				}_				catch (InvocationTargetException ex) {_					if (ex.getTargetException() instanceof JMSException) {_						throw (JMSException) ex.getTargetException()__					}_					ReflectionUtils.handleInvocationTargetException(ex)__					return null__				}_				catch (IllegalAccessException ex) {_					throw new IllegalStateException("Could not access JMS 2.0 API method: " + ex.getMessage())__				}_			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,method,method,is,subscription,durable,create,shared,durable,consumer,method,create,shared,consumer,method,try,return,message,consumer,method,invoke,session,destination,get,subscription,name,get,message,selector,catch,invocation,target,exception,ex,if,ex,get,target,exception,instanceof,jmsexception,throw,jmsexception,ex,get,target,exception,reflection,utils,handle,invocation,target,exception,ex,return,null,catch,illegal,access,exception,ex,throw,new,illegal,state,exception,could,not,access,jms,2,0,api,method,ex,get,message,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1432331447;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				_				_				Method method = (isSubscriptionDurable() ?_						createSharedDurableConsumerMethod : createSharedConsumerMethod)__				try {_					return (MessageConsumer) method.invoke(session, destination, getSubscriptionName(), getMessageSelector())__				}_				catch (InvocationTargetException ex) {_					if (ex.getTargetException() instanceof JMSException) {_						throw (JMSException) ex.getTargetException()__					}_					ReflectionUtils.handleInvocationTargetException(ex)__					return null__				}_				catch (IllegalAccessException ex) {_					throw new IllegalStateException("Could not access JMS 2.0 API method: " + ex.getMessage())__				}_			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,method,method,is,subscription,durable,create,shared,durable,consumer,method,create,shared,consumer,method,try,return,message,consumer,method,invoke,session,destination,get,subscription,name,get,message,selector,catch,invocation,target,exception,ex,if,ex,get,target,exception,instanceof,jmsexception,throw,jmsexception,ex,get,target,exception,reflection,utils,handle,invocation,target,exception,ex,return,null,catch,illegal,access,exception,ex,throw,new,illegal,state,exception,could,not,access,jms,2,0,api,method,ex,get,message,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1434018810;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				_				_				Method method = (isSubscriptionDurable() ?_						createSharedDurableConsumerMethod : createSharedConsumerMethod)__				try {_					return (MessageConsumer) method.invoke(session, destination, getSubscriptionName(), getMessageSelector())__				}_				catch (InvocationTargetException ex) {_					if (ex.getTargetException() instanceof JMSException) {_						throw (JMSException) ex.getTargetException()__					}_					ReflectionUtils.handleInvocationTargetException(ex)__					return null__				}_				catch (IllegalAccessException ex) {_					throw new IllegalStateException("Could not access JMS 2.0 API method: " + ex.getMessage())__				}_			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,method,method,is,subscription,durable,create,shared,durable,consumer,method,create,shared,consumer,method,try,return,message,consumer,method,invoke,session,destination,get,subscription,name,get,message,selector,catch,invocation,target,exception,ex,if,ex,get,target,exception,instanceof,jmsexception,throw,jmsexception,ex,get,target,exception,reflection,utils,handle,invocation,target,exception,ex,return,null,catch,illegal,access,exception,ex,throw,new,illegal,state,exception,could,not,access,jms,2,0,api,method,ex,get,message,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1438003938;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				_				_				Method method = (isSubscriptionDurable() ?_						createSharedDurableConsumerMethod : createSharedConsumerMethod)__				try {_					return (MessageConsumer) method.invoke(session, destination, getSubscriptionName(), getMessageSelector())__				}_				catch (InvocationTargetException ex) {_					if (ex.getTargetException() instanceof JMSException) {_						throw (JMSException) ex.getTargetException()__					}_					ReflectionUtils.handleInvocationTargetException(ex)__					return null__				}_				catch (IllegalAccessException ex) {_					throw new IllegalStateException("Could not access JMS 2.0 API method: " + ex.getMessage())__				}_			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,method,method,is,subscription,durable,create,shared,durable,consumer,method,create,shared,consumer,method,try,return,message,consumer,method,invoke,session,destination,get,subscription,name,get,message,selector,catch,invocation,target,exception,ex,if,ex,get,target,exception,instanceof,jmsexception,throw,jmsexception,ex,get,target,exception,reflection,utils,handle,invocation,target,exception,ex,return,null,catch,illegal,access,exception,ex,throw,new,illegal,state,exception,could,not,access,jms,2,0,api,method,ex,get,message,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1492514138;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				_				_				Method method = (isSubscriptionDurable() ?_						createSharedDurableConsumerMethod : createSharedConsumerMethod)__				try {_					return (MessageConsumer) method.invoke(session, destination, getSubscriptionName(), getMessageSelector())__				}_				catch (InvocationTargetException ex) {_					if (ex.getTargetException() instanceof JMSException) {_						throw (JMSException) ex.getTargetException()__					}_					ReflectionUtils.handleInvocationTargetException(ex)__					return null__				}_				catch (IllegalAccessException ex) {_					throw new IllegalStateException("Could not access JMS 2.0 API method: " + ex.getMessage())__				}_			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,method,method,is,subscription,durable,create,shared,durable,consumer,method,create,shared,consumer,method,try,return,message,consumer,method,invoke,session,destination,get,subscription,name,get,message,selector,catch,invocation,target,exception,ex,if,ex,get,target,exception,instanceof,jmsexception,throw,jmsexception,ex,get,target,exception,reflection,utils,handle,invocation,target,exception,ex,return,null,catch,illegal,access,exception,ex,throw,new,illegal,state,exception,could,not,access,jms,2,0,api,method,ex,get,message,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1496837955;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				return (isSubscriptionDurable() ?_						session.createSharedDurableConsumer((Topic) destination, getSubscriptionName(), getMessageSelector()) :_						session.createSharedConsumer((Topic) destination, getSubscriptionName(), getMessageSelector()))__			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,return,is,subscription,durable,session,create,shared,durable,consumer,topic,destination,get,subscription,name,get,message,selector,session,create,shared,consumer,topic,destination,get,subscription,name,get,message,selector,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1498780456;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				return (isSubscriptionDurable() ?_						session.createSharedDurableConsumer((Topic) destination, getSubscriptionName(), getMessageSelector()) :_						session.createSharedConsumer((Topic) destination, getSubscriptionName(), getMessageSelector()))__			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,return,is,subscription,durable,session,create,shared,durable,consumer,topic,destination,get,subscription,name,get,message,selector,session,create,shared,consumer,topic,destination,get,subscription,name,get,message,selector,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1500448076;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				return (isSubscriptionDurable() ?_						session.createSharedDurableConsumer((Topic) destination, getSubscriptionName(), getMessageSelector()) :_						session.createSharedConsumer((Topic) destination, getSubscriptionName(), getMessageSelector()))__			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,return,is,subscription,durable,session,create,shared,durable,consumer,topic,destination,get,subscription,name,get,message,selector,session,create,shared,consumer,topic,destination,get,subscription,name,get,message,selector,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1500495740;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				return (isSubscriptionDurable() ?_						session.createSharedDurableConsumer((Topic) destination, getSubscriptionName(), getMessageSelector()) :_						session.createSharedConsumer((Topic) destination, getSubscriptionName(), getMessageSelector()))__			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,return,is,subscription,durable,session,create,shared,durable,consumer,topic,destination,get,subscription,name,get,message,selector,session,create,shared,consumer,topic,destination,get,subscription,name,get,message,selector,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1519732288;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				return (isSubscriptionDurable() ?_						session.createSharedDurableConsumer((Topic) destination, getSubscriptionName(), getMessageSelector()) :_						session.createSharedConsumer((Topic) destination, getSubscriptionName(), getMessageSelector()))__			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,return,is,subscription,durable,session,create,shared,durable,consumer,topic,destination,get,subscription,name,get,message,selector,session,create,shared,consumer,topic,destination,get,subscription,name,get,message,selector,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1530174524;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		if (isPubSubDomain() && destination instanceof Topic) {_			if (isSubscriptionShared()) {_				return (isSubscriptionDurable() ?_						session.createSharedDurableConsumer((Topic) destination, getSubscriptionName(), getMessageSelector()) :_						session.createSharedConsumer((Topic) destination, getSubscriptionName(), getMessageSelector()))__			}_			else if (isSubscriptionDurable()) {_				return session.createDurableSubscriber(_						(Topic) destination, getSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				_				_				_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,destination,instanceof,topic,if,is,subscription,shared,return,is,subscription,durable,session,create,shared,durable,consumer,topic,destination,get,subscription,name,get,message,selector,session,create,shared,consumer,topic,destination,get,subscription,name,get,message,selector,else,if,is,subscription,durable,return,session,create,durable,subscriber,topic,destination,get,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractMessageListenerContainer -> public void setReplyPubSubDomain(boolean replyPubSubDomain);1429198188;Configure the reply destination type. By default, the configured {@code pubSubDomain}_value is used (see {@link #isPubSubDomain()}._<p>This setting primarily indicates what type of destination to resolve_if dynamic destinations are enabled._@param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link javax.jms.Topic Topics}),_"false" for the Point-to-Point domain ({@link javax.jms.Queue Queues})_@see #setDestinationResolver;public void setReplyPubSubDomain(boolean replyPubSubDomain) {_		this.replyPubSubDomain = replyPubSubDomain__	};configure,the,reply,destination,type,by,default,the,configured,code,pub,sub,domain,value,is,used,see,link,is,pub,sub,domain,p,this,setting,primarily,indicates,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,reply,pub,sub,domain,true,for,the,publish,subscribe,domain,link,javax,jms,topic,topics,false,for,the,point,to,point,domain,link,javax,jms,queue,queues,see,set,destination,resolver;public,void,set,reply,pub,sub,domain,boolean,reply,pub,sub,domain,this,reply,pub,sub,domain,reply,pub,sub,domain
AbstractMessageListenerContainer -> public void setReplyPubSubDomain(boolean replyPubSubDomain);1432289819;Configure the reply destination type. By default, the configured {@code pubSubDomain}_value is used (see {@link #isPubSubDomain()}._<p>This setting primarily indicates what type of destination to resolve_if dynamic destinations are enabled._@param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link javax.jms.Topic Topics}),_"false" for the Point-to-Point domain ({@link javax.jms.Queue Queues})_@see #setDestinationResolver;public void setReplyPubSubDomain(boolean replyPubSubDomain) {_		this.replyPubSubDomain = replyPubSubDomain__	};configure,the,reply,destination,type,by,default,the,configured,code,pub,sub,domain,value,is,used,see,link,is,pub,sub,domain,p,this,setting,primarily,indicates,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,reply,pub,sub,domain,true,for,the,publish,subscribe,domain,link,javax,jms,topic,topics,false,for,the,point,to,point,domain,link,javax,jms,queue,queues,see,set,destination,resolver;public,void,set,reply,pub,sub,domain,boolean,reply,pub,sub,domain,this,reply,pub,sub,domain,reply,pub,sub,domain
AbstractMessageListenerContainer -> public void setReplyPubSubDomain(boolean replyPubSubDomain);1432331447;Configure the reply destination type. By default, the configured {@code pubSubDomain}_value is used (see {@link #isPubSubDomain()}._<p>This setting primarily indicates what type of destination to resolve if dynamic_destinations are enabled._@param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link Topic Topics}),_"false" for the Point-to-Point domain ({@link Queue Queues})_@since 4.2_@see #setDestinationResolver;public void setReplyPubSubDomain(boolean replyPubSubDomain) {_		this.replyPubSubDomain = replyPubSubDomain__	};configure,the,reply,destination,type,by,default,the,configured,code,pub,sub,domain,value,is,used,see,link,is,pub,sub,domain,p,this,setting,primarily,indicates,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,reply,pub,sub,domain,true,for,the,publish,subscribe,domain,link,topic,topics,false,for,the,point,to,point,domain,link,queue,queues,since,4,2,see,set,destination,resolver;public,void,set,reply,pub,sub,domain,boolean,reply,pub,sub,domain,this,reply,pub,sub,domain,reply,pub,sub,domain
AbstractMessageListenerContainer -> public void setReplyPubSubDomain(boolean replyPubSubDomain);1434018810;Configure the reply destination type. By default, the configured {@code pubSubDomain}_value is used (see {@link #isPubSubDomain()}._<p>This setting primarily indicates what type of destination to resolve if dynamic_destinations are enabled._@param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link Topic Topics}),_"false" for the Point-to-Point domain ({@link Queue Queues})_@since 4.2_@see #setDestinationResolver;public void setReplyPubSubDomain(boolean replyPubSubDomain) {_		this.replyPubSubDomain = replyPubSubDomain__	};configure,the,reply,destination,type,by,default,the,configured,code,pub,sub,domain,value,is,used,see,link,is,pub,sub,domain,p,this,setting,primarily,indicates,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,reply,pub,sub,domain,true,for,the,publish,subscribe,domain,link,topic,topics,false,for,the,point,to,point,domain,link,queue,queues,since,4,2,see,set,destination,resolver;public,void,set,reply,pub,sub,domain,boolean,reply,pub,sub,domain,this,reply,pub,sub,domain,reply,pub,sub,domain
AbstractMessageListenerContainer -> public void setReplyPubSubDomain(boolean replyPubSubDomain);1438003938;Configure the reply destination type. By default, the configured {@code pubSubDomain}_value is used (see {@link #isPubSubDomain()}._<p>This setting primarily indicates what type of destination to resolve if dynamic_destinations are enabled._@param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link Topic Topics}),_"false" for the Point-to-Point domain ({@link Queue Queues})_@since 4.2_@see #setDestinationResolver;public void setReplyPubSubDomain(boolean replyPubSubDomain) {_		this.replyPubSubDomain = replyPubSubDomain__	};configure,the,reply,destination,type,by,default,the,configured,code,pub,sub,domain,value,is,used,see,link,is,pub,sub,domain,p,this,setting,primarily,indicates,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,reply,pub,sub,domain,true,for,the,publish,subscribe,domain,link,topic,topics,false,for,the,point,to,point,domain,link,queue,queues,since,4,2,see,set,destination,resolver;public,void,set,reply,pub,sub,domain,boolean,reply,pub,sub,domain,this,reply,pub,sub,domain,reply,pub,sub,domain
AbstractMessageListenerContainer -> public void setReplyPubSubDomain(boolean replyPubSubDomain);1492514138;Configure the reply destination type. By default, the configured {@code pubSubDomain}_value is used (see {@link #isPubSubDomain()}._<p>This setting primarily indicates what type of destination to resolve if dynamic_destinations are enabled._@param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link Topic Topics}),_"false" for the Point-to-Point domain ({@link Queue Queues})_@since 4.2_@see #setDestinationResolver;public void setReplyPubSubDomain(boolean replyPubSubDomain) {_		this.replyPubSubDomain = replyPubSubDomain__	};configure,the,reply,destination,type,by,default,the,configured,code,pub,sub,domain,value,is,used,see,link,is,pub,sub,domain,p,this,setting,primarily,indicates,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,reply,pub,sub,domain,true,for,the,publish,subscribe,domain,link,topic,topics,false,for,the,point,to,point,domain,link,queue,queues,since,4,2,see,set,destination,resolver;public,void,set,reply,pub,sub,domain,boolean,reply,pub,sub,domain,this,reply,pub,sub,domain,reply,pub,sub,domain
AbstractMessageListenerContainer -> public void setReplyPubSubDomain(boolean replyPubSubDomain);1495868221;Configure the reply destination type. By default, the configured {@code pubSubDomain}_value is used (see {@link #isPubSubDomain()}._<p>This setting primarily indicates what type of destination to resolve if dynamic_destinations are enabled._@param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link Topic Topics}),_"false" for the Point-to-Point domain ({@link Queue Queues})_@since 4.2_@see #setDestinationResolver;public void setReplyPubSubDomain(boolean replyPubSubDomain) {_		this.replyPubSubDomain = replyPubSubDomain__	};configure,the,reply,destination,type,by,default,the,configured,code,pub,sub,domain,value,is,used,see,link,is,pub,sub,domain,p,this,setting,primarily,indicates,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,reply,pub,sub,domain,true,for,the,publish,subscribe,domain,link,topic,topics,false,for,the,point,to,point,domain,link,queue,queues,since,4,2,see,set,destination,resolver;public,void,set,reply,pub,sub,domain,boolean,reply,pub,sub,domain,this,reply,pub,sub,domain,reply,pub,sub,domain
AbstractMessageListenerContainer -> public void setReplyPubSubDomain(boolean replyPubSubDomain);1496837955;Configure the reply destination type. By default, the configured {@code pubSubDomain}_value is used (see {@link #isPubSubDomain()}._<p>This setting primarily indicates what type of destination to resolve if dynamic_destinations are enabled._@param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link Topic Topics}),_"false" for the Point-to-Point domain ({@link Queue Queues})_@since 4.2_@see #setDestinationResolver;public void setReplyPubSubDomain(boolean replyPubSubDomain) {_		this.replyPubSubDomain = replyPubSubDomain__	};configure,the,reply,destination,type,by,default,the,configured,code,pub,sub,domain,value,is,used,see,link,is,pub,sub,domain,p,this,setting,primarily,indicates,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,reply,pub,sub,domain,true,for,the,publish,subscribe,domain,link,topic,topics,false,for,the,point,to,point,domain,link,queue,queues,since,4,2,see,set,destination,resolver;public,void,set,reply,pub,sub,domain,boolean,reply,pub,sub,domain,this,reply,pub,sub,domain,reply,pub,sub,domain
AbstractMessageListenerContainer -> public void setReplyPubSubDomain(boolean replyPubSubDomain);1498780456;Configure the reply destination type. By default, the configured {@code pubSubDomain}_value is used (see {@link #isPubSubDomain()}._<p>This setting primarily indicates what type of destination to resolve if dynamic_destinations are enabled._@param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link Topic Topics}),_"false" for the Point-to-Point domain ({@link Queue Queues})_@since 4.2_@see #setDestinationResolver;public void setReplyPubSubDomain(boolean replyPubSubDomain) {_		this.replyPubSubDomain = replyPubSubDomain__	};configure,the,reply,destination,type,by,default,the,configured,code,pub,sub,domain,value,is,used,see,link,is,pub,sub,domain,p,this,setting,primarily,indicates,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,reply,pub,sub,domain,true,for,the,publish,subscribe,domain,link,topic,topics,false,for,the,point,to,point,domain,link,queue,queues,since,4,2,see,set,destination,resolver;public,void,set,reply,pub,sub,domain,boolean,reply,pub,sub,domain,this,reply,pub,sub,domain,reply,pub,sub,domain
AbstractMessageListenerContainer -> public void setReplyPubSubDomain(boolean replyPubSubDomain);1500448076;Configure the reply destination type. By default, the configured {@code pubSubDomain}_value is used (see {@link #isPubSubDomain()}._<p>This setting primarily indicates what type of destination to resolve if dynamic_destinations are enabled._@param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link Topic Topics}),_"false" for the Point-to-Point domain ({@link Queue Queues})_@since 4.2_@see #setDestinationResolver;public void setReplyPubSubDomain(boolean replyPubSubDomain) {_		this.replyPubSubDomain = replyPubSubDomain__	};configure,the,reply,destination,type,by,default,the,configured,code,pub,sub,domain,value,is,used,see,link,is,pub,sub,domain,p,this,setting,primarily,indicates,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,reply,pub,sub,domain,true,for,the,publish,subscribe,domain,link,topic,topics,false,for,the,point,to,point,domain,link,queue,queues,since,4,2,see,set,destination,resolver;public,void,set,reply,pub,sub,domain,boolean,reply,pub,sub,domain,this,reply,pub,sub,domain,reply,pub,sub,domain
AbstractMessageListenerContainer -> public void setReplyPubSubDomain(boolean replyPubSubDomain);1500495740;Configure the reply destination type. By default, the configured {@code pubSubDomain}_value is used (see {@link #isPubSubDomain()}._<p>This setting primarily indicates what type of destination to resolve if dynamic_destinations are enabled._@param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link Topic Topics}),_"false" for the Point-to-Point domain ({@link Queue Queues})_@since 4.2_@see #setDestinationResolver;public void setReplyPubSubDomain(boolean replyPubSubDomain) {_		this.replyPubSubDomain = replyPubSubDomain__	};configure,the,reply,destination,type,by,default,the,configured,code,pub,sub,domain,value,is,used,see,link,is,pub,sub,domain,p,this,setting,primarily,indicates,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,reply,pub,sub,domain,true,for,the,publish,subscribe,domain,link,topic,topics,false,for,the,point,to,point,domain,link,queue,queues,since,4,2,see,set,destination,resolver;public,void,set,reply,pub,sub,domain,boolean,reply,pub,sub,domain,this,reply,pub,sub,domain,reply,pub,sub,domain
AbstractMessageListenerContainer -> public void setReplyPubSubDomain(boolean replyPubSubDomain);1519732288;Configure the reply destination type. By default, the configured {@code pubSubDomain}_value is used (see {@link #isPubSubDomain()}._<p>This setting primarily indicates what type of destination to resolve if dynamic_destinations are enabled._@param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link Topic Topics}),_"false" for the Point-to-Point domain ({@link Queue Queues})_@since 4.2_@see #setDestinationResolver;public void setReplyPubSubDomain(boolean replyPubSubDomain) {_		this.replyPubSubDomain = replyPubSubDomain__	};configure,the,reply,destination,type,by,default,the,configured,code,pub,sub,domain,value,is,used,see,link,is,pub,sub,domain,p,this,setting,primarily,indicates,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,reply,pub,sub,domain,true,for,the,publish,subscribe,domain,link,topic,topics,false,for,the,point,to,point,domain,link,queue,queues,since,4,2,see,set,destination,resolver;public,void,set,reply,pub,sub,domain,boolean,reply,pub,sub,domain,this,reply,pub,sub,domain,reply,pub,sub,domain
AbstractMessageListenerContainer -> public void setReplyPubSubDomain(boolean replyPubSubDomain);1530174524;Configure the reply destination type. By default, the configured {@code pubSubDomain}_value is used (see {@link #isPubSubDomain()}._<p>This setting primarily indicates what type of destination to resolve if dynamic_destinations are enabled._@param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link Topic Topics}),_"false" for the Point-to-Point domain ({@link Queue Queues})_@since 4.2_@see #setDestinationResolver;public void setReplyPubSubDomain(boolean replyPubSubDomain) {_		this.replyPubSubDomain = replyPubSubDomain__	};configure,the,reply,destination,type,by,default,the,configured,code,pub,sub,domain,value,is,used,see,link,is,pub,sub,domain,p,this,setting,primarily,indicates,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,reply,pub,sub,domain,true,for,the,publish,subscribe,domain,link,topic,topics,false,for,the,point,to,point,domain,link,queue,queues,since,4,2,see,set,destination,resolver;public,void,set,reply,pub,sub,domain,boolean,reply,pub,sub,domain,this,reply,pub,sub,domain,reply,pub,sub,domain
AbstractMessageListenerContainer -> public void setSubscriptionName(@Nullable String subscriptionName);1500448076;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@since 4.1_@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(@Nullable String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,since,4,1,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,nullable,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setSubscriptionName(@Nullable String subscriptionName);1500495740;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@since 4.1_@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(@Nullable String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,since,4,1,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,nullable,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setSubscriptionName(@Nullable String subscriptionName);1519732288;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@since 4.1_@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(@Nullable String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,since,4,1,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,nullable,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setSubscriptionName(@Nullable String subscriptionName);1530174524;Set the name of a subscription to create. To be applied in case_of a topic (pub-sub domain) with a shared or durable subscription._<p>The subscription name needs to be unique within this client's_JMS client id. Default is the class name of the specified message listener._<p>Note: Only 1 concurrent consumer (which is the default of this_message listener container) is allowed for each subscription,_except for a shared subscription (which requires JMS 2.0)._@since 4.1_@see #setPubSubDomain_@see #setSubscriptionDurable_@see #setSubscriptionShared_@see #setClientId_@see #setMessageListener;public void setSubscriptionName(@Nullable String subscriptionName) {_		this.subscriptionName = subscriptionName__	};set,the,name,of,a,subscription,to,create,to,be,applied,in,case,of,a,topic,pub,sub,domain,with,a,shared,or,durable,subscription,p,the,subscription,name,needs,to,be,unique,within,this,client,s,jms,client,id,default,is,the,class,name,of,the,specified,message,listener,p,note,only,1,concurrent,consumer,which,is,the,default,of,this,message,listener,container,is,allowed,for,each,subscription,except,for,a,shared,subscription,which,requires,jms,2,0,since,4,1,see,set,pub,sub,domain,see,set,subscription,durable,see,set,subscription,shared,see,set,client,id,see,set,message,listener;public,void,set,subscription,name,nullable,string,subscription,name,this,subscription,name,subscription,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1328020251;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be <code>null</code>)_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,code,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1356735495;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be {@code null})_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1397718966;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be {@code null})_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1401724323;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be {@code null})_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1405345771;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be {@code null})_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1405696881;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be {@code null})_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1406040641;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be {@code null})_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1425072498;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be {@code null})_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1425330316;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be {@code null})_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1426624897;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be {@code null})_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1429198188;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be {@code null})_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1432289819;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be {@code null})_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1432331447;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be {@code null})_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1434018810;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be {@code null})_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1438003938;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be {@code null})_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1492514138;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be {@code null})_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1496837955;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(String destinationName);1498780456;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestination(javax.jms.Destination);public void setDestinationName(String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,javax,jms,destination;public,void,set,destination,name,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> @Nullable 	public String getDestinationName();1495868221;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;@Nullable_	public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;nullable,public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> @Nullable 	public String getDestinationName();1496837955;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;@Nullable_	public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;nullable,public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> @Nullable 	public String getDestinationName();1498780456;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;@Nullable_	public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;nullable,public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> @Nullable 	public String getDestinationName();1500448076;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;@Nullable_	public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;nullable,public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> @Nullable 	public String getDestinationName();1500495740;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;@Nullable_	public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;nullable,public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> @Nullable 	public String getDestinationName();1519732288;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;@Nullable_	public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;nullable,public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> @Nullable 	public String getDestinationName();1530174524;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;@Nullable_	public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;nullable,public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public void setErrorHandler(@Nullable ErrorHandler errorHandler);1500448076;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(@Nullable ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,nullable,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(@Nullable ErrorHandler errorHandler);1500495740;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(@Nullable ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,nullable,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(@Nullable ErrorHandler errorHandler);1519732288;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(@Nullable ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,nullable,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public void setErrorHandler(@Nullable ErrorHandler errorHandler);1530174524;Set the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._<p>By default, there will be <b>no</b> ErrorHandler so that error-level_logging is the only result.;public void setErrorHandler(@Nullable ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,p,by,default,there,will,be,b,no,b,error,handler,so,that,error,level,logging,is,the,only,result;public,void,set,error,handler,nullable,error,handler,error,handler,this,error,handler,error,handler
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1328020251;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1356735495;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1397718966;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1401724323;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1405345771;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1405696881;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1406040641;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1425072498;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1425330316;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1426624897;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1429198188;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1432289819;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1432331447;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1434018810;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1438003938;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1492514138;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1495868221;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1496837955;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1498780456;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1500448076;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1500495740;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1519732288;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> public boolean isSubscriptionDurable();1530174524;Return whether to make the subscription durable.;public boolean isSubscriptionDurable() {_		return this.subscriptionDurable__	};return,whether,to,make,the,subscription,durable;public,boolean,is,subscription,durable,return,this,subscription,durable
AbstractMessageListenerContainer -> @Override 	public boolean isReplyPubSubDomain();1429198188;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used_for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues}) is_used.;@Override_	public boolean isReplyPubSubDomain() {_		if (this.replyPubSubDomain != null) {_			return replyPubSubDomain__		}_		else {_			return isPubSubDomain()__		}_	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,for,replies,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used;override,public,boolean,is,reply,pub,sub,domain,if,this,reply,pub,sub,domain,null,return,reply,pub,sub,domain,else,return,is,pub,sub,domain
AbstractMessageListenerContainer -> @Override 	public boolean isReplyPubSubDomain();1432289819;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used_for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues}) is_used.;@Override_	public boolean isReplyPubSubDomain() {_		if (this.replyPubSubDomain != null) {_			return replyPubSubDomain__		}_		else {_			return isPubSubDomain()__		}_	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,for,replies,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used;override,public,boolean,is,reply,pub,sub,domain,if,this,reply,pub,sub,domain,null,return,reply,pub,sub,domain,else,return,is,pub,sub,domain
AbstractMessageListenerContainer -> @Override 	public boolean isReplyPubSubDomain();1432331447;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used_for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues})_is used._@since 4.2;@Override_	public boolean isReplyPubSubDomain() {_		if (this.replyPubSubDomain != null) {_			return replyPubSubDomain__		}_		else {_			return isPubSubDomain()__		}_	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,for,replies,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used,since,4,2;override,public,boolean,is,reply,pub,sub,domain,if,this,reply,pub,sub,domain,null,return,reply,pub,sub,domain,else,return,is,pub,sub,domain
AbstractMessageListenerContainer -> @Override 	public boolean isReplyPubSubDomain();1434018810;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used_for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues})_is used._@since 4.2;@Override_	public boolean isReplyPubSubDomain() {_		if (this.replyPubSubDomain != null) {_			return replyPubSubDomain__		}_		else {_			return isPubSubDomain()__		}_	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,for,replies,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used,since,4,2;override,public,boolean,is,reply,pub,sub,domain,if,this,reply,pub,sub,domain,null,return,reply,pub,sub,domain,else,return,is,pub,sub,domain
AbstractMessageListenerContainer -> @Override 	public boolean isReplyPubSubDomain();1438003938;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used_for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues})_is used._@since 4.2;@Override_	public boolean isReplyPubSubDomain() {_		if (this.replyPubSubDomain != null) {_			return replyPubSubDomain__		}_		else {_			return isPubSubDomain()__		}_	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,for,replies,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used,since,4,2;override,public,boolean,is,reply,pub,sub,domain,if,this,reply,pub,sub,domain,null,return,reply,pub,sub,domain,else,return,is,pub,sub,domain
AbstractMessageListenerContainer -> @Override 	public boolean isReplyPubSubDomain();1492514138;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used_for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues})_is used._@since 4.2;@Override_	public boolean isReplyPubSubDomain() {_		if (this.replyPubSubDomain != null) {_			return replyPubSubDomain__		}_		else {_			return isPubSubDomain()__		}_	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,for,replies,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used,since,4,2;override,public,boolean,is,reply,pub,sub,domain,if,this,reply,pub,sub,domain,null,return,reply,pub,sub,domain,else,return,is,pub,sub,domain
AbstractMessageListenerContainer -> @Override 	public boolean isReplyPubSubDomain();1495868221;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used_for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues})_is used._@since 4.2;@Override_	public boolean isReplyPubSubDomain() {_		if (this.replyPubSubDomain != null) {_			return replyPubSubDomain__		}_		else {_			return isPubSubDomain()__		}_	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,for,replies,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used,since,4,2;override,public,boolean,is,reply,pub,sub,domain,if,this,reply,pub,sub,domain,null,return,reply,pub,sub,domain,else,return,is,pub,sub,domain
AbstractMessageListenerContainer -> @Override 	public boolean isReplyPubSubDomain();1496837955;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used_for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues})_is used._@since 4.2;@Override_	public boolean isReplyPubSubDomain() {_		if (this.replyPubSubDomain != null) {_			return replyPubSubDomain__		}_		else {_			return isPubSubDomain()__		}_	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,for,replies,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used,since,4,2;override,public,boolean,is,reply,pub,sub,domain,if,this,reply,pub,sub,domain,null,return,reply,pub,sub,domain,else,return,is,pub,sub,domain
AbstractMessageListenerContainer -> @Override 	public boolean isReplyPubSubDomain();1498780456;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used_for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues})_is used._@since 4.2;@Override_	public boolean isReplyPubSubDomain() {_		if (this.replyPubSubDomain != null) {_			return replyPubSubDomain__		}_		else {_			return isPubSubDomain()__		}_	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,for,replies,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used,since,4,2;override,public,boolean,is,reply,pub,sub,domain,if,this,reply,pub,sub,domain,null,return,reply,pub,sub,domain,else,return,is,pub,sub,domain
AbstractMessageListenerContainer -> @Override 	public boolean isReplyPubSubDomain();1500448076;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used_for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues})_is used._@since 4.2;@Override_	public boolean isReplyPubSubDomain() {_		if (this.replyPubSubDomain != null) {_			return replyPubSubDomain__		}_		else {_			return isPubSubDomain()__		}_	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,for,replies,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used,since,4,2;override,public,boolean,is,reply,pub,sub,domain,if,this,reply,pub,sub,domain,null,return,reply,pub,sub,domain,else,return,is,pub,sub,domain
AbstractMessageListenerContainer -> @Override 	public boolean isReplyPubSubDomain();1500495740;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used_for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues})_is used._@since 4.2;@Override_	public boolean isReplyPubSubDomain() {_		if (this.replyPubSubDomain != null) {_			return replyPubSubDomain__		}_		else {_			return isPubSubDomain()__		}_	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,for,replies,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used,since,4,2;override,public,boolean,is,reply,pub,sub,domain,if,this,reply,pub,sub,domain,null,return,reply,pub,sub,domain,else,return,is,pub,sub,domain
AbstractMessageListenerContainer -> @Override 	public boolean isReplyPubSubDomain();1519732288;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used_for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues})_is used._@since 4.2;@Override_	public boolean isReplyPubSubDomain() {_		if (this.replyPubSubDomain != null) {_			return replyPubSubDomain__		}_		else {_			return isPubSubDomain()__		}_	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,for,replies,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used,since,4,2;override,public,boolean,is,reply,pub,sub,domain,if,this,reply,pub,sub,domain,null,return,reply,pub,sub,domain,else,return,is,pub,sub,domain
AbstractMessageListenerContainer -> @Override 	public boolean isReplyPubSubDomain();1530174524;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used_for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues})_is used._@since 4.2;@Override_	public boolean isReplyPubSubDomain() {_		if (this.replyPubSubDomain != null) {_			return this.replyPubSubDomain__		}_		else {_			return isPubSubDomain()__		}_	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,for,replies,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used,since,4,2;override,public,boolean,is,reply,pub,sub,domain,if,this,reply,pub,sub,domain,null,return,this,reply,pub,sub,domain,else,return,is,pub,sub,domain
AbstractMessageListenerContainer -> public Object getMessageListener();1328020251;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public Object getMessageListener();1356735495;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public Object getMessageListener();1397718966;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public Object getMessageListener();1401724323;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public Object getMessageListener();1405345771;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public Object getMessageListener();1405696881;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public Object getMessageListener();1406040641;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public Object getMessageListener();1425072498;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public Object getMessageListener();1425330316;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public Object getMessageListener();1426624897;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public Object getMessageListener();1429198188;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public Object getMessageListener();1432289819;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public Object getMessageListener();1432331447;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public Object getMessageListener();1434018810;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public Object getMessageListener();1438003938;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public Object getMessageListener();1492514138;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public Object getMessageListener();1495868221;Return the message listener object to register.;public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1328020251;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1356735495;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1397718966;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1401724323;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1405345771;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1405696881;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1406040641;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1425072498;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1425330316;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1426624897;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1429198188;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1432289819;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1432331447;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1434018810;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1438003938;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1492514138;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1495868221;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1496837955;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void checkMessageListener(Object messageListener);1498780456;Check the given message listener, throwing an exception_if it does not correspond to a supported listener type._<p>By default, only a standard JMS {@link MessageListener} object or a_Spring {@link SessionAwareMessageListener} object will be accepted._@param messageListener the message listener object to check_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;protected void checkMessageListener(Object messageListener) {_		if (!(messageListener instanceof MessageListener ||_				messageListener instanceof SessionAwareMessageListener)) {_			throw new IllegalArgumentException(_					"Message listener needs to be of type [" + MessageListener.class.getName() +_					"] or [" + SessionAwareMessageListener.class.getName() + "]")__		}_	};check,the,given,message,listener,throwing,an,exception,if,it,does,not,correspond,to,a,supported,listener,type,p,by,default,only,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,will,be,accepted,param,message,listener,the,message,listener,object,to,check,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;protected,void,check,message,listener,object,message,listener,if,message,listener,instanceof,message,listener,message,listener,instanceof,session,aware,message,listener,throw,new,illegal,argument,exception,message,listener,needs,to,be,of,type,message,listener,class,get,name,or,session,aware,message,listener,class,get,name
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1328020251;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_<code>onMessage</code> method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,code,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1356735495;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1397718966;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1401724323;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1405345771;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1405696881;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1406040641;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1425072498;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1425330316;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1426624897;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1429198188;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1432289819;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1432331447;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1434018810;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1438003938;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1492514138;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1495868221;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1496837955;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1498780456;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1500448076;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1500495740;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1519732288;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> protected void doInvokeListener(MessageListener listener, Message message) throws JMSException;1530174524;Invoke the specified listener as standard JMS MessageListener._<p>Default implementation performs a plain invocation of the_{@code onMessage} method._@param listener the JMS MessageListener to invoke_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see javax.jms.MessageListener#onMessage;protected void doInvokeListener(MessageListener listener, Message message) throws JMSException {_		listener.onMessage(message)__	};invoke,the,specified,listener,as,standard,jms,message,listener,p,default,implementation,performs,a,plain,invocation,of,the,code,on,message,method,param,listener,the,jms,message,listener,to,invoke,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,listener,on,message;protected,void,do,invoke,listener,message,listener,listener,message,message,throws,jmsexception,listener,on,message,message
AbstractMessageListenerContainer -> public void setReplyQosSettings(@Nullable QosSettings replyQosSettings);1495868221;Configure the {@link QosSettings} to use when sending a reply. Can be set to_{@code null} to indicate that the broker's defaults should be used._@param replyQosSettings the QoS settings to use when sending a reply or {@code null}_to use the default vas._@since 5.0;public void setReplyQosSettings(@Nullable QosSettings replyQosSettings) {_		this.replyQosSettings = replyQosSettings__	};configure,the,link,qos,settings,to,use,when,sending,a,reply,can,be,set,to,code,null,to,indicate,that,the,broker,s,defaults,should,be,used,param,reply,qos,settings,the,qo,s,settings,to,use,when,sending,a,reply,or,code,null,to,use,the,default,vas,since,5,0;public,void,set,reply,qos,settings,nullable,qos,settings,reply,qos,settings,this,reply,qos,settings,reply,qos,settings
AbstractMessageListenerContainer -> public void setReplyQosSettings(@Nullable QosSettings replyQosSettings);1496837955;Configure the {@link QosSettings} to use when sending a reply. Can be set to_{@code null} to indicate that the broker's defaults should be used._@param replyQosSettings the QoS settings to use when sending a reply or {@code null}_to use the default vas._@since 5.0;public void setReplyQosSettings(@Nullable QosSettings replyQosSettings) {_		this.replyQosSettings = replyQosSettings__	};configure,the,link,qos,settings,to,use,when,sending,a,reply,can,be,set,to,code,null,to,indicate,that,the,broker,s,defaults,should,be,used,param,reply,qos,settings,the,qo,s,settings,to,use,when,sending,a,reply,or,code,null,to,use,the,default,vas,since,5,0;public,void,set,reply,qos,settings,nullable,qos,settings,reply,qos,settings,this,reply,qos,settings,reply,qos,settings
AbstractMessageListenerContainer -> public void setReplyQosSettings(@Nullable QosSettings replyQosSettings);1498780456;Configure the {@link QosSettings} to use when sending a reply. Can be set to_{@code null} to indicate that the broker's defaults should be used._@param replyQosSettings the QoS settings to use when sending a reply or {@code null}_to use the default vas._@since 5.0;public void setReplyQosSettings(@Nullable QosSettings replyQosSettings) {_		this.replyQosSettings = replyQosSettings__	};configure,the,link,qos,settings,to,use,when,sending,a,reply,can,be,set,to,code,null,to,indicate,that,the,broker,s,defaults,should,be,used,param,reply,qos,settings,the,qo,s,settings,to,use,when,sending,a,reply,or,code,null,to,use,the,default,vas,since,5,0;public,void,set,reply,qos,settings,nullable,qos,settings,reply,qos,settings,this,reply,qos,settings,reply,qos,settings
AbstractMessageListenerContainer -> public void setReplyQosSettings(@Nullable QosSettings replyQosSettings);1500448076;Configure the {@link QosSettings} to use when sending a reply. Can be set to_{@code null} to indicate that the broker's defaults should be used._@param replyQosSettings the QoS settings to use when sending a reply or {@code null}_to use the default vas._@since 5.0;public void setReplyQosSettings(@Nullable QosSettings replyQosSettings) {_		this.replyQosSettings = replyQosSettings__	};configure,the,link,qos,settings,to,use,when,sending,a,reply,can,be,set,to,code,null,to,indicate,that,the,broker,s,defaults,should,be,used,param,reply,qos,settings,the,qo,s,settings,to,use,when,sending,a,reply,or,code,null,to,use,the,default,vas,since,5,0;public,void,set,reply,qos,settings,nullable,qos,settings,reply,qos,settings,this,reply,qos,settings,reply,qos,settings
AbstractMessageListenerContainer -> public void setReplyQosSettings(@Nullable QosSettings replyQosSettings);1500495740;Configure the {@link QosSettings} to use when sending a reply. Can be set to_{@code null} to indicate that the broker's defaults should be used._@param replyQosSettings the QoS settings to use when sending a reply or {@code null}_to use the default vas._@since 5.0;public void setReplyQosSettings(@Nullable QosSettings replyQosSettings) {_		this.replyQosSettings = replyQosSettings__	};configure,the,link,qos,settings,to,use,when,sending,a,reply,can,be,set,to,code,null,to,indicate,that,the,broker,s,defaults,should,be,used,param,reply,qos,settings,the,qo,s,settings,to,use,when,sending,a,reply,or,code,null,to,use,the,default,vas,since,5,0;public,void,set,reply,qos,settings,nullable,qos,settings,reply,qos,settings,this,reply,qos,settings,reply,qos,settings
AbstractMessageListenerContainer -> public void setReplyQosSettings(@Nullable QosSettings replyQosSettings);1519732288;Configure the {@link QosSettings} to use when sending a reply. Can be set to_{@code null} to indicate that the broker's defaults should be used._@param replyQosSettings the QoS settings to use when sending a reply or {@code null}_to use the default vas._@since 5.0;public void setReplyQosSettings(@Nullable QosSettings replyQosSettings) {_		this.replyQosSettings = replyQosSettings__	};configure,the,link,qos,settings,to,use,when,sending,a,reply,can,be,set,to,code,null,to,indicate,that,the,broker,s,defaults,should,be,used,param,reply,qos,settings,the,qo,s,settings,to,use,when,sending,a,reply,or,code,null,to,use,the,default,vas,since,5,0;public,void,set,reply,qos,settings,nullable,qos,settings,reply,qos,settings,this,reply,qos,settings,reply,qos,settings
AbstractMessageListenerContainer -> public void setReplyQosSettings(@Nullable QosSettings replyQosSettings);1530174524;Configure the {@link QosSettings} to use when sending a reply. Can be set to_{@code null} to indicate that the broker's defaults should be used._@param replyQosSettings the QoS settings to use when sending a reply or {@code null}_to use the default vas._@since 5.0;public void setReplyQosSettings(@Nullable QosSettings replyQosSettings) {_		this.replyQosSettings = replyQosSettings__	};configure,the,link,qos,settings,to,use,when,sending,a,reply,can,be,set,to,code,null,to,indicate,that,the,broker,s,defaults,should,be,used,param,reply,qos,settings,the,qo,s,settings,to,use,when,sending,a,reply,or,code,null,to,use,the,default,vas,since,5,0;public,void,set,reply,qos,settings,nullable,qos,settings,reply,qos,settings,this,reply,qos,settings,reply,qos,settings
AbstractMessageListenerContainer -> public String getDurableSubscriptionName();1328020251;Return the name of a durable subscription to create, if any.;public String getDurableSubscriptionName() {_		return this.durableSubscriptionName__	};return,the,name,of,a,durable,subscription,to,create,if,any;public,string,get,durable,subscription,name,return,this,durable,subscription,name
AbstractMessageListenerContainer -> public String getDurableSubscriptionName();1356735495;Return the name of a durable subscription to create, if any.;public String getDurableSubscriptionName() {_		return this.durableSubscriptionName__	};return,the,name,of,a,durable,subscription,to,create,if,any;public,string,get,durable,subscription,name,return,this,durable,subscription,name
AbstractMessageListenerContainer -> public String getDurableSubscriptionName();1397718966;Return the name of a durable subscription to create, if any.;public String getDurableSubscriptionName() {_		return this.durableSubscriptionName__	};return,the,name,of,a,durable,subscription,to,create,if,any;public,string,get,durable,subscription,name,return,this,durable,subscription,name
AbstractMessageListenerContainer -> public String getDurableSubscriptionName();1401724323;Return the name of a durable subscription to create, if any.;public String getDurableSubscriptionName() {_		return this.durableSubscriptionName__	};return,the,name,of,a,durable,subscription,to,create,if,any;public,string,get,durable,subscription,name,return,this,durable,subscription,name
AbstractMessageListenerContainer -> public String getDurableSubscriptionName();1405345771;Return the name of a durable subscription to create, if any.;public String getDurableSubscriptionName() {_		return this.durableSubscriptionName__	};return,the,name,of,a,durable,subscription,to,create,if,any;public,string,get,durable,subscription,name,return,this,durable,subscription,name
AbstractMessageListenerContainer -> public String getDurableSubscriptionName();1405696881;Return the name of a durable subscription to create, if any.;public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> public String getDurableSubscriptionName();1406040641;Return the name of a durable subscription to create, if any.;public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> public String getDurableSubscriptionName();1425072498;Return the name of a durable subscription to create, if any.;public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> public String getDurableSubscriptionName();1425330316;Return the name of a durable subscription to create, if any.;public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> public String getDurableSubscriptionName();1426624897;Return the name of a durable subscription to create, if any.;public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> public String getDurableSubscriptionName();1429198188;Return the name of a durable subscription to create, if any.;public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> public String getDurableSubscriptionName();1432289819;Return the name of a durable subscription to create, if any.;public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> public String getDurableSubscriptionName();1432331447;Return the name of a durable subscription to create, if any.;public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> public String getDurableSubscriptionName();1434018810;Return the name of a durable subscription to create, if any.;public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> public String getDurableSubscriptionName();1438003938;Return the name of a durable subscription to create, if any.;public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> public String getDurableSubscriptionName();1492514138;Return the name of a durable subscription to create, if any.;public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1328020251;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()__		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1356735495;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()__		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1397718966;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()__		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1401724323;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()__		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1405345771;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()__		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1405696881;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()__		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1406040641;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()__		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1425072498;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()__		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1425330316;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()__		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1426624897;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()__		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1429198188;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()__		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1432289819;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()___		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1432331447;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()___		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1434018810;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()___		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1438003938;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()___		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1492514138;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()___		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1495868221;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()___		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1496837955;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()___		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1498780456;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()___		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1500448076;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()___		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1500495740;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()___		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1519732288;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()___		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> @SuppressWarnings("rawtypes") 	protected void invokeListener(Session session, Message message) throws JMSException;1530174524;Invoke the specified listener: either as standard JMS MessageListener_or (preferably) as Spring SessionAwareMessageListener._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #setMessageListener;@SuppressWarnings("rawtypes")_	protected void invokeListener(Session session, Message message) throws JMSException {_		Object listener = getMessageListener()___		if (listener instanceof SessionAwareMessageListener) {_			doInvokeListener((SessionAwareMessageListener) listener, session, message)__		}_		else if (listener instanceof MessageListener) {_			doInvokeListener((MessageListener) listener, message)__		}_		else if (listener != null) {_			throw new IllegalArgumentException(_					"Only MessageListener and SessionAwareMessageListener supported: " + listener)__		}_		else {_			throw new IllegalStateException("No message listener specified - see property 'messageListener'")__		}_	};invoke,the,specified,listener,either,as,standard,jms,message,listener,or,preferably,as,spring,session,aware,message,listener,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,listener;suppress,warnings,rawtypes,protected,void,invoke,listener,session,session,message,message,throws,jmsexception,object,listener,get,message,listener,if,listener,instanceof,session,aware,message,listener,do,invoke,listener,session,aware,message,listener,listener,session,message,else,if,listener,instanceof,message,listener,do,invoke,listener,message,listener,listener,message,else,if,listener,null,throw,new,illegal,argument,exception,only,message,listener,and,session,aware,message,listener,supported,listener,else,throw,new,illegal,state,exception,no,message,listener,specified,see,property,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1328020251;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.durableSubscriptionName == null) {_			this.durableSubscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,durable,subscription,name,null,this,durable,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1356735495;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.durableSubscriptionName == null) {_			this.durableSubscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,durable,subscription,name,null,this,durable,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1397718966;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.durableSubscriptionName == null) {_			this.durableSubscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,durable,subscription,name,null,this,durable,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1401724323;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.durableSubscriptionName == null) {_			this.durableSubscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,durable,subscription,name,null,this,durable,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1405345771;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.durableSubscriptionName == null) {_			this.durableSubscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,durable,subscription,name,null,this,durable,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1405696881;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1406040641;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1425072498;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1425330316;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1426624897;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1429198188;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1432289819;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1432331447;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1434018810;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1438003938;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1492514138;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1495868221;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1496837955;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> public void setMessageListener(Object messageListener);1498780456;Set the message listener implementation to register._This can be either a standard JMS {@link MessageListener} object_or a Spring {@link SessionAwareMessageListener} object._<p>Note: The message listener may be replaced at runtime, with the listener_container picking up the new listener object immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@throws IllegalArgumentException if the supplied listener is not a_{@link MessageListener} or a {@link SessionAwareMessageListener}_@see javax.jms.MessageListener_@see SessionAwareMessageListener;public void setMessageListener(Object messageListener) {_		checkMessageListener(messageListener)__		this.messageListener = messageListener__		if (this.subscriptionName == null) {_			this.subscriptionName = getDefaultSubscriptionName(messageListener)__		}_	};set,the,message,listener,implementation,to,register,this,can,be,either,a,standard,jms,link,message,listener,object,or,a,spring,link,session,aware,message,listener,object,p,note,the,message,listener,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,listener,object,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,throws,illegal,argument,exception,if,the,supplied,listener,is,not,a,link,message,listener,or,a,link,session,aware,message,listener,see,javax,jms,message,listener,see,session,aware,message,listener;public,void,set,message,listener,object,message,listener,check,message,listener,message,listener,this,message,listener,message,listener,if,this,subscription,name,null,this,subscription,name,get,default,subscription,name,message,listener
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1328020251;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}_		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1356735495;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}_		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1397718966;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}_		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1401724323;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}_		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1405345771;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}_		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1405696881;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}_		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1406040641;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}_		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1425072498;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}_		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1425330316;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}_		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1426624897;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}_		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1429198188;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}_		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1432289819;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}__		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1432331447;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}__		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1434018810;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}__		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1438003938;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}__		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1492514138;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}__		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1495868221;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}__		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1496837955;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}__		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1498780456;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}__		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1500448076;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}__		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1500495740;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}__		try {_			invokeListener(session, message)__		}_		catch (JMSException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (RuntimeException ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		catch (Error err) {_			rollbackOnExceptionIfNecessary(session, err)__			throw err__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,catch,error,err,rollback,on,exception,if,necessary,session,err,throw,err,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1519732288;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}__		try {_			invokeListener(session, message)__		}_		catch (JMSException | RuntimeException | Error ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,runtime,exception,error,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,commit,if,necessary,session,message
AbstractMessageListenerContainer -> protected void doExecuteListener(Session session, Message message) throws JMSException;1530174524;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #convertJmsAccessException;protected void doExecuteListener(Session session, Message message) throws JMSException {_		if (!isAcceptMessagesWhileStopping() && !isRunning()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Rejecting received message because of the listener container " +_						"having been stopped in the meantime: " + message)__			}_			rollbackIfNecessary(session)__			throw new MessageRejectedWhileStoppingException()__		}__		try {_			invokeListener(session, message)__		}_		catch (JMSException | RuntimeException | Error ex) {_			rollbackOnExceptionIfNecessary(session, ex)__			throw ex__		}_		commitIfNecessary(session, message)__	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,convert,jms,access,exception;protected,void,do,execute,listener,session,session,message,message,throws,jmsexception,if,is,accept,messages,while,stopping,is,running,if,logger,is,warn,enabled,logger,warn,rejecting,received,message,because,of,the,listener,container,having,been,stopped,in,the,meantime,message,rollback,if,necessary,session,throw,new,message,rejected,while,stopping,exception,try,invoke,listener,session,message,catch,jmsexception,runtime,exception,error,ex,rollback,on,exception,if,necessary,session,ex,throw,ex,commit,if,necessary,session,message
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1328020251;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1356735495;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1397718966;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1401724323;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1405345771;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1405696881;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1406040641;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1425072498;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1425330316;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1426624897;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1429198188;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1432289819;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1432331447;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1434018810;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1438003938;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1492514138;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1495868221;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1496837955;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1498780456;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1500448076;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1500495740;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1519732288;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message) 			throws JMSException;1530174524;Invoke the specified listener as Spring SessionAwareMessageListener,_exposing a new JMS Session (potentially with its own transaction)_to the listener if demanded._@param listener the Spring SessionAwareMessageListener to invoke_@param session the JMS Session to operate on_@param message the received JMS Message_@throws JMSException if thrown by JMS API methods_@see SessionAwareMessageListener_@see #setExposeListenerSession;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected void doInvokeListener(SessionAwareMessageListener listener, Session session, Message message)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		try {_			Session sessionToUse = session__			if (!isExposeListenerSession()) {_				_				conToClose = createConnection()__				sessionToClose = createSession(conToClose)__				sessionToUse = sessionToClose__			}_			_			listener.onMessage(message, sessionToUse)__			_			if (sessionToUse != session) {_				if (sessionToUse.getTransacted() && isSessionLocallyTransacted(sessionToUse)) {_					_					JmsUtils.commitIfNecessary(sessionToUse)__				}_			}_		}_		finally {_			JmsUtils.closeSession(sessionToClose)__			JmsUtils.closeConnection(conToClose)__		}_	};invoke,the,specified,listener,as,spring,session,aware,message,listener,exposing,a,new,jms,session,potentially,with,its,own,transaction,to,the,listener,if,demanded,param,listener,the,spring,session,aware,message,listener,to,invoke,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,throws,jmsexception,if,thrown,by,jms,api,methods,see,session,aware,message,listener,see,set,expose,listener,session;suppress,warnings,unchecked,rawtypes,protected,void,do,invoke,listener,session,aware,message,listener,listener,session,session,message,message,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,try,session,session,to,use,session,if,is,expose,listener,session,con,to,close,create,connection,session,to,close,create,session,con,to,close,session,to,use,session,to,close,listener,on,message,message,session,to,use,if,session,to,use,session,if,session,to,use,get,transacted,is,session,locally,transacted,session,to,use,jms,utils,commit,if,necessary,session,to,use,finally,jms,utils,close,session,session,to,close,jms,utils,close,connection,con,to,close
AbstractMessageListenerContainer -> @Nullable 	public String getDurableSubscriptionName();1495868221;Return the name of a durable subscription to create, if any.;@Nullable_	public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;nullable,public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> @Nullable 	public String getDurableSubscriptionName();1496837955;Return the name of a durable subscription to create, if any.;@Nullable_	public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;nullable,public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> @Nullable 	public String getDurableSubscriptionName();1498780456;Return the name of a durable subscription to create, if any.;@Nullable_	public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;nullable,public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> @Nullable 	public String getDurableSubscriptionName();1500448076;Return the name of a durable subscription to create, if any.;@Nullable_	public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;nullable,public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> @Nullable 	public String getDurableSubscriptionName();1500495740;Return the name of a durable subscription to create, if any.;@Nullable_	public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;nullable,public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> @Nullable 	public String getDurableSubscriptionName();1519732288;Return the name of a durable subscription to create, if any.;@Nullable_	public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;nullable,public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> @Nullable 	public String getDurableSubscriptionName();1530174524;Return the name of a durable subscription to create, if any.;@Nullable_	public String getDurableSubscriptionName() {_		return (this.subscriptionDurable ? this.subscriptionName : null)__	};return,the,name,of,a,durable,subscription,to,create,if,any;nullable,public,string,get,durable,subscription,name,return,this,subscription,durable,this,subscription,name,null
AbstractMessageListenerContainer -> public String getMessageSelector();1328020251;Return the JMS message selector expression (or <code>null</code> if none).;public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,code,if,none;public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> public String getMessageSelector();1356735495;Return the JMS message selector expression (or {@code null} if none).;public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> public String getMessageSelector();1397718966;Return the JMS message selector expression (or {@code null} if none).;public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> public String getMessageSelector();1401724323;Return the JMS message selector expression (or {@code null} if none).;public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> public String getMessageSelector();1405345771;Return the JMS message selector expression (or {@code null} if none).;public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> public String getMessageSelector();1405696881;Return the JMS message selector expression (or {@code null} if none).;public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> public String getMessageSelector();1406040641;Return the JMS message selector expression (or {@code null} if none).;public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> public String getMessageSelector();1425072498;Return the JMS message selector expression (or {@code null} if none).;public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> public String getMessageSelector();1425330316;Return the JMS message selector expression (or {@code null} if none).;public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> public String getMessageSelector();1426624897;Return the JMS message selector expression (or {@code null} if none).;public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> public String getMessageSelector();1429198188;Return the JMS message selector expression (or {@code null} if none).;public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> public String getMessageSelector();1432289819;Return the JMS message selector expression (or {@code null} if none).;public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> public String getMessageSelector();1432331447;Return the JMS message selector expression (or {@code null} if none).;public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> public String getMessageSelector();1434018810;Return the JMS message selector expression (or {@code null} if none).;public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> public String getMessageSelector();1438003938;Return the JMS message selector expression (or {@code null} if none).;public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> public String getMessageSelector();1492514138;Return the JMS message selector expression (or {@code null} if none).;public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> @Nullable 	public ErrorHandler getErrorHandler();1495868221;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._@since 4.1;@Nullable_	public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,since,4,1;nullable,public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> @Nullable 	public ErrorHandler getErrorHandler();1496837955;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._@since 4.1;@Nullable_	public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,since,4,1;nullable,public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> @Nullable 	public ErrorHandler getErrorHandler();1498780456;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._@since 4.1;@Nullable_	public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,since,4,1;nullable,public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> @Nullable 	public ErrorHandler getErrorHandler();1500448076;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._@since 4.1;@Nullable_	public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,since,4,1;nullable,public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> @Nullable 	public ErrorHandler getErrorHandler();1500495740;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._@since 4.1;@Nullable_	public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,since,4,1;nullable,public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> @Nullable 	public ErrorHandler getErrorHandler();1519732288;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._@since 4.1;@Nullable_	public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,since,4,1;nullable,public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> @Nullable 	public ErrorHandler getErrorHandler();1530174524;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._@since 4.1;@Nullable_	public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,since,4,1;nullable,public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1328020251;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1356735495;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1397718966;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1401724323;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1405345771;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1405696881;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1406040641;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1425072498;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1425330316;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1426624897;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1429198188;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1432289819;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1432331447;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1434018810;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1438003938;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1492514138;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1495868221;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1496837955;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(Destination destination);1498780456;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(Destination destination) {_		Assert.notNull(destination, "'destination' must not be null")__		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,destination,destination,assert,not,null,destination,destination,must,not,be,null,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> @Nullable 	public Destination getDestination();1495868221;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;@Nullable_	public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;nullable,public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> @Nullable 	public Destination getDestination();1496837955;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;@Nullable_	public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;nullable,public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> @Nullable 	public Destination getDestination();1498780456;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;@Nullable_	public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;nullable,public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> @Nullable 	public Destination getDestination();1500448076;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;@Nullable_	public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;nullable,public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> @Nullable 	public Destination getDestination();1500495740;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;@Nullable_	public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;nullable,public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> @Nullable 	public Destination getDestination();1519732288;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;@Nullable_	public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;nullable,public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> @Nullable 	public Destination getDestination();1530174524;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;@Nullable_	public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;nullable,public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public String getSubscriptionName();1426624897;Return the name of a subscription to create, if any._@since 4.1;public String getSubscriptionName() {_		return this.subscriptionName__	};return,the,name,of,a,subscription,to,create,if,any,since,4,1;public,string,get,subscription,name,return,this,subscription,name
AbstractMessageListenerContainer -> public String getSubscriptionName();1429198188;Return the name of a subscription to create, if any._@since 4.1;public String getSubscriptionName() {_		return this.subscriptionName__	};return,the,name,of,a,subscription,to,create,if,any,since,4,1;public,string,get,subscription,name,return,this,subscription,name
AbstractMessageListenerContainer -> public String getSubscriptionName();1432289819;Return the name of a subscription to create, if any._@since 4.1;public String getSubscriptionName() {_		return this.subscriptionName__	};return,the,name,of,a,subscription,to,create,if,any,since,4,1;public,string,get,subscription,name,return,this,subscription,name
AbstractMessageListenerContainer -> public String getSubscriptionName();1432331447;Return the name of a subscription to create, if any._@since 4.1;public String getSubscriptionName() {_		return this.subscriptionName__	};return,the,name,of,a,subscription,to,create,if,any,since,4,1;public,string,get,subscription,name,return,this,subscription,name
AbstractMessageListenerContainer -> public String getSubscriptionName();1434018810;Return the name of a subscription to create, if any._@since 4.1;public String getSubscriptionName() {_		return this.subscriptionName__	};return,the,name,of,a,subscription,to,create,if,any,since,4,1;public,string,get,subscription,name,return,this,subscription,name
AbstractMessageListenerContainer -> public String getSubscriptionName();1438003938;Return the name of a subscription to create, if any._@since 4.1;public String getSubscriptionName() {_		return this.subscriptionName__	};return,the,name,of,a,subscription,to,create,if,any,since,4,1;public,string,get,subscription,name,return,this,subscription,name
AbstractMessageListenerContainer -> public String getSubscriptionName();1492514138;Return the name of a subscription to create, if any._@since 4.1;public String getSubscriptionName() {_		return this.subscriptionName__	};return,the,name,of,a,subscription,to,create,if,any,since,4,1;public,string,get,subscription,name,return,this,subscription,name
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1328020251;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted() && isSessionLocallyTransacted(session)) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Initiating transaction rollback on application exception", ex)__				}_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1356735495;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted() && isSessionLocallyTransacted(session)) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Initiating transaction rollback on application exception", ex)__				}_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1397718966;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted() && isSessionLocallyTransacted(session)) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Initiating transaction rollback on application exception", ex)__				}_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1401724323;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted() && isSessionLocallyTransacted(session)) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Initiating transaction rollback on application exception", ex)__				}_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1405345771;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted() && isSessionLocallyTransacted(session)) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Initiating transaction rollback on application exception", ex)__				}_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1405696881;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted() && isSessionLocallyTransacted(session)) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Initiating transaction rollback on application exception", ex)__				}_				JmsUtils.rollbackIfNecessary(session)__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1406040641;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1425072498;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1425330316;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1426624897;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1429198188;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1432289819;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else if (isClientAcknowledge(session)) {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1432331447;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else if (isClientAcknowledge(session)) {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1434018810;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else if (isClientAcknowledge(session)) {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1438003938;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else if (isClientAcknowledge(session)) {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1492514138;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else if (isClientAcknowledge(session)) {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1495868221;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else if (isClientAcknowledge(session)) {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1496837955;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else if (isClientAcknowledge(session)) {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException | RuntimeException | Error ex2) {_			logger.error("Application exception overridden by rollback error", ex)__			throw ex2__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,rollback,error,ex,throw,ex2
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1498780456;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else if (isClientAcknowledge(session)) {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException | RuntimeException | Error ex2) {_			logger.error("Application exception overridden by rollback error", ex)__			throw ex2__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,rollback,error,ex,throw,ex2
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1500448076;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else if (isClientAcknowledge(session)) {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException | RuntimeException | Error ex2) {_			logger.error("Application exception overridden by rollback error", ex)__			throw ex2__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,rollback,error,ex,throw,ex2
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1500495740;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else if (isClientAcknowledge(session)) {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException | RuntimeException | Error ex2) {_			logger.error("Application exception overridden by rollback error", ex)__			throw ex2__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,rollback,error,ex,throw,ex2
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1519732288;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else if (isClientAcknowledge(session)) {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException | RuntimeException | Error ex2) {_			logger.error("Application exception overridden by rollback error", ex)__			throw ex2__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,rollback,error,ex,throw,ex2
AbstractMessageListenerContainer -> protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException;1530174524;Perform a rollback, handling rollback exceptions properly._@param session the JMS Session to rollback_@param ex the thrown application exception or error_@throws javax.jms.JMSException in case of a rollback error;protected void rollbackOnExceptionIfNecessary(Session session, Throwable ex) throws JMSException {_		try {_			if (session.getTransacted()) {_				if (isSessionLocallyTransacted(session)) {_					_					if (logger.isDebugEnabled()) {_						logger.debug("Initiating transaction rollback on application exception", ex)__					}_					JmsUtils.rollbackIfNecessary(session)__				}_			}_			else if (isClientAcknowledge(session)) {_				session.recover()__			}_		}_		catch (IllegalStateException ex2) {_			logger.debug("Could not roll back because Session already closed", ex2)__		}_		catch (JMSException | RuntimeException | Error ex2) {_			logger.error("Application exception overridden by rollback error", ex)__			throw ex2__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,session,the,jms,session,to,rollback,param,ex,the,thrown,application,exception,or,error,throws,javax,jms,jmsexception,in,case,of,a,rollback,error;protected,void,rollback,on,exception,if,necessary,session,session,throwable,ex,throws,jmsexception,try,if,session,get,transacted,if,is,session,locally,transacted,session,if,logger,is,debug,enabled,logger,debug,initiating,transaction,rollback,on,application,exception,ex,jms,utils,rollback,if,necessary,session,else,if,is,client,acknowledge,session,session,recover,catch,illegal,state,exception,ex2,logger,debug,could,not,roll,back,because,session,already,closed,ex2,catch,jmsexception,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,rollback,error,ex,throw,ex2
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1405696881;Return whether to make the subscription shared.;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1406040641;Return whether to make the subscription shared.;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1425072498;Return whether to make the subscription shared.;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1425330316;Return whether to make the subscription shared.;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1426624897;Return whether to make the subscription shared._@since 4.1;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared,since,4,1;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1429198188;Return whether to make the subscription shared._@since 4.1;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared,since,4,1;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1432289819;Return whether to make the subscription shared._@since 4.1;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared,since,4,1;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1432331447;Return whether to make the subscription shared._@since 4.1;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared,since,4,1;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1434018810;Return whether to make the subscription shared._@since 4.1;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared,since,4,1;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1438003938;Return whether to make the subscription shared._@since 4.1;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared,since,4,1;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1492514138;Return whether to make the subscription shared._@since 4.1;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared,since,4,1;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1495868221;Return whether to make the subscription shared._@since 4.1;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared,since,4,1;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1496837955;Return whether to make the subscription shared._@since 4.1;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared,since,4,1;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1498780456;Return whether to make the subscription shared._@since 4.1;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared,since,4,1;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1500448076;Return whether to make the subscription shared._@since 4.1;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared,since,4,1;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1500495740;Return whether to make the subscription shared._@since 4.1;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared,since,4,1;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1519732288;Return whether to make the subscription shared._@since 4.1;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared,since,4,1;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public boolean isSubscriptionShared();1530174524;Return whether to make the subscription shared._@since 4.1;public boolean isSubscriptionShared() {_		return this.subscriptionShared__	};return,whether,to,make,the,subscription,shared,since,4,1;public,boolean,is,subscription,shared,return,this,subscription,shared
AbstractMessageListenerContainer -> public ErrorHandler getErrorHandler();1405696881;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message.;public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message;public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> public ErrorHandler getErrorHandler();1406040641;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message.;public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message;public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> public ErrorHandler getErrorHandler();1425072498;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message.;public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message;public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> public ErrorHandler getErrorHandler();1425330316;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message.;public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message;public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> public ErrorHandler getErrorHandler();1426624897;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._@since 4.1;public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,since,4,1;public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> public ErrorHandler getErrorHandler();1429198188;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._@since 4.1;public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,since,4,1;public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> public ErrorHandler getErrorHandler();1432289819;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._@since 4.1;public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,since,4,1;public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> public ErrorHandler getErrorHandler();1432331447;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._@since 4.1;public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,since,4,1;public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> public ErrorHandler getErrorHandler();1434018810;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._@since 4.1;public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,since,4,1;public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> public ErrorHandler getErrorHandler();1438003938;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._@since 4.1;public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,since,4,1;public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> public ErrorHandler getErrorHandler();1492514138;Return the ErrorHandler to be invoked in case of any uncaught exceptions thrown_while processing a Message._@since 4.1;public ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,error,handler,to,be,invoked,in,case,of,any,uncaught,exceptions,thrown,while,processing,a,message,since,4,1;public,error,handler,get,error,handler,return,this,error,handler
AbstractMessageListenerContainer -> public ExceptionListener getExceptionListener();1328020251;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> public ExceptionListener getExceptionListener();1356735495;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> public ExceptionListener getExceptionListener();1397718966;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> public ExceptionListener getExceptionListener();1401724323;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> public ExceptionListener getExceptionListener();1405345771;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> public ExceptionListener getExceptionListener();1405696881;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> public ExceptionListener getExceptionListener();1406040641;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> public ExceptionListener getExceptionListener();1425072498;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> public ExceptionListener getExceptionListener();1425330316;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> public ExceptionListener getExceptionListener();1426624897;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> public ExceptionListener getExceptionListener();1429198188;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> public ExceptionListener getExceptionListener();1432289819;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> public ExceptionListener getExceptionListener();1432331447;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> public ExceptionListener getExceptionListener();1434018810;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> public ExceptionListener getExceptionListener();1438003938;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> public ExceptionListener getExceptionListener();1492514138;Return the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure, if any.;public ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure,if,any;public,exception,listener,get,exception,listener,return,this,exception,listener
AbstractMessageListenerContainer -> public String getDestinationName();1328020251;Return the name of the destination to receive messages from._Will be <code>null</code> if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,code,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public String getDestinationName();1356735495;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public String getDestinationName();1397718966;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public String getDestinationName();1401724323;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public String getDestinationName();1405345771;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public String getDestinationName();1405696881;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public String getDestinationName();1406040641;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public String getDestinationName();1425072498;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public String getDestinationName();1425330316;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public String getDestinationName();1426624897;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public String getDestinationName();1429198188;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public String getDestinationName();1432289819;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public String getDestinationName();1432331447;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public String getDestinationName();1434018810;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public String getDestinationName();1438003938;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public String getDestinationName();1492514138;Return the name of the destination to receive messages from._Will be {@code null} if the configured destination is not a_{@link String} type_ c.f. {@link #setDestination(Destination) when_it is an actual Destination}.;public String getDestinationName() {_		return (this.destination instanceof String ? (String) this.destination : null)__	};return,the,name,of,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,a,link,string,type,c,f,link,set,destination,destination,when,it,is,an,actual,destination;public,string,get,destination,name,return,this,destination,instanceof,string,string,this,destination,null
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1397718966;Set the {@link MessageConverter} strategy for converting JMS Messages._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1401724323;Set the {@link MessageConverter} strategy for converting JMS Messages._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1405345771;Set the {@link MessageConverter} strategy for converting JMS Messages._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1405696881;Set the {@link MessageConverter} strategy for converting JMS Messages.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1406040641;Set the {@link MessageConverter} strategy for converting JMS Messages.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1425072498;Set the {@link MessageConverter} strategy for converting JMS Messages.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1425330316;Set the {@link MessageConverter} strategy for converting JMS Messages.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1426624897;Set the {@link MessageConverter} strategy for converting JMS Messages._@since 4.1;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,since,4,1;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1429198188;Set the {@link MessageConverter} strategy for converting JMS Messages._@since 4.1;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,since,4,1;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1432289819;Set the {@link MessageConverter} strategy for converting JMS Messages._@since 4.1;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,since,4,1;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1432331447;Set the {@link MessageConverter} strategy for converting JMS Messages._@since 4.1;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,since,4,1;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1434018810;Set the {@link MessageConverter} strategy for converting JMS Messages._@since 4.1;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,since,4,1;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1438003938;Set the {@link MessageConverter} strategy for converting JMS Messages._@since 4.1;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,since,4,1;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1492514138;Set the {@link MessageConverter} strategy for converting JMS Messages._@since 4.1;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,since,4,1;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1495868221;Set the {@link MessageConverter} strategy for converting JMS Messages._@since 4.1;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,since,4,1;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1496837955;Set the {@link MessageConverter} strategy for converting JMS Messages._@since 4.1;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,since,4,1;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1498780456;Set the {@link MessageConverter} strategy for converting JMS Messages._@since 4.1;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,since,4,1;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageConverter(MessageConverter messageConverter);1500448076;Set the {@link MessageConverter} strategy for converting JMS Messages._@since 4.1;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,since,4,1;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
AbstractMessageListenerContainer -> public void setMessageSelector(String messageSelector);1328020251;Set the JMS message selector expression (or <code>null</code> if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,code,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(String messageSelector);1356735495;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(String messageSelector);1397718966;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(String messageSelector);1401724323;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(String messageSelector);1405345771;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(String messageSelector);1405696881;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(String messageSelector);1406040641;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(String messageSelector);1425072498;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(String messageSelector);1425330316;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(String messageSelector);1426624897;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(String messageSelector);1429198188;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(String messageSelector);1432289819;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(String messageSelector);1432331447;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(String messageSelector);1434018810;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(String messageSelector);1438003938;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> public void setMessageSelector(String messageSelector);1492514138;Set the JMS message selector expression (or {@code null} if none)._Default is none._<p>See the JMS specification for a detailed definition of selector expressions._<p>Note: The message selector may be replaced at runtime, with the listener_container picking up the new selector value immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!;public void setMessageSelector(String messageSelector) {_		this.messageSelector = messageSelector__	};set,the,jms,message,selector,expression,or,code,null,if,none,default,is,none,p,see,the,jms,specification,for,a,detailed,definition,of,selector,expressions,p,note,the,message,selector,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,selector,value,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care;public,void,set,message,selector,string,message,selector,this,message,selector,message,selector
AbstractMessageListenerContainer -> @Nullable 	public Object getMessageListener();1496837955;Return the message listener object to register.;@Nullable_	public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;nullable,public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> @Nullable 	public Object getMessageListener();1498780456;Return the message listener object to register.;@Nullable_	public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;nullable,public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> @Nullable 	public Object getMessageListener();1500448076;Return the message listener object to register.;@Nullable_	public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;nullable,public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> @Nullable 	public Object getMessageListener();1500495740;Return the message listener object to register.;@Nullable_	public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;nullable,public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> @Nullable 	public Object getMessageListener();1519732288;Return the message listener object to register.;@Nullable_	public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;nullable,public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> @Nullable 	public Object getMessageListener();1530174524;Return the message listener object to register.;@Nullable_	public Object getMessageListener() {_		return this.messageListener__	};return,the,message,listener,object,to,register;nullable,public,object,get,message,listener,return,this,message,listener
AbstractMessageListenerContainer -> public void setDestination(@Nullable Destination destination);1500448076;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(@Nullable Destination destination) {_		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,nullable,destination,destination,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(@Nullable Destination destination);1500495740;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(@Nullable Destination destination) {_		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,nullable,destination,destination,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(@Nullable Destination destination);1519732288;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(@Nullable Destination destination) {_		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,nullable,destination,destination,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setDestination(@Nullable Destination destination);1530174524;Set the destination to receive messages from._<p>Alternatively, specify a "destinationName", to be dynamically_resolved via the {@link org.springframework.jms.support.destination.DestinationResolver}._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestinationName(String);public void setDestination(@Nullable Destination destination) {_		this.destination = destination__		if (destination instanceof Topic && !(destination instanceof Queue)) {_			_			setPubSubDomain(true)__		}_	};set,the,destination,to,receive,messages,from,p,alternatively,specify,a,destination,name,to,be,dynamically,resolved,via,the,link,org,springframework,jms,support,destination,destination,resolver,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,name,string;public,void,set,destination,nullable,destination,destination,this,destination,destination,if,destination,instanceof,topic,destination,instanceof,queue,set,pub,sub,domain,true
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, @Nullable Message message) throws JMSException;1496837955;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, @Nullable Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,nullable,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, @Nullable Message message) throws JMSException;1498780456;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, @Nullable Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,nullable,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, @Nullable Message message) throws JMSException;1500448076;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, @Nullable Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,nullable,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, @Nullable Message message) throws JMSException;1500495740;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, @Nullable Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,nullable,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, @Nullable Message message) throws JMSException;1519732288;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, @Nullable Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,nullable,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, @Nullable Message message) throws JMSException;1530174524;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, @Nullable Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,nullable,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> @Nullable 	public String getMessageSelector();1495868221;Return the JMS message selector expression (or {@code null} if none).;@Nullable_	public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;nullable,public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> @Nullable 	public String getMessageSelector();1496837955;Return the JMS message selector expression (or {@code null} if none).;@Nullable_	public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;nullable,public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> @Nullable 	public String getMessageSelector();1498780456;Return the JMS message selector expression (or {@code null} if none).;@Nullable_	public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;nullable,public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> @Nullable 	public String getMessageSelector();1500448076;Return the JMS message selector expression (or {@code null} if none).;@Nullable_	public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;nullable,public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> @Nullable 	public String getMessageSelector();1500495740;Return the JMS message selector expression (or {@code null} if none).;@Nullable_	public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;nullable,public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> @Nullable 	public String getMessageSelector();1519732288;Return the JMS message selector expression (or {@code null} if none).;@Nullable_	public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;nullable,public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> @Nullable 	public String getMessageSelector();1530174524;Return the JMS message selector expression (or {@code null} if none).;@Nullable_	public String getMessageSelector() {_		return this.messageSelector__	};return,the,jms,message,selector,expression,or,code,null,if,none;nullable,public,string,get,message,selector,return,this,message,selector
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1328020251;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1356735495;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1397718966;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1401724323;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1405345771;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1405696881;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1406040641;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1425072498;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1425330316;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1426624897;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1429198188;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1432289819;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1432331447;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1434018810;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1438003938;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1492514138;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1495868221;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1496837955;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1498780456;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1500448076;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1500495740;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1519732288;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);1530174524;Set whether to accept received messages while the listener container_in the process of stopping._<p>Default is "false", rejecting such messages through aborting the_receive attempt. Switch this flag on to fully process such messages_even in the stopping phase, with the drawback that even newly sent_messages might still get processed (if coming in before all receive_timeouts have expired)._<p><b>NOTE:</b> Aborting receive attempts for such incoming messages_might lead to the provider's retry count decreasing for the affected_messages. If you have a high number of concurrent consumers, make sure_that the number of retries is higher than the number of consumers,_to be on the safe side for all potential stopping scenarios.;public void setAcceptMessagesWhileStopping(boolean acceptMessagesWhileStopping) {_		this.acceptMessagesWhileStopping = acceptMessagesWhileStopping__	};set,whether,to,accept,received,messages,while,the,listener,container,in,the,process,of,stopping,p,default,is,false,rejecting,such,messages,through,aborting,the,receive,attempt,switch,this,flag,on,to,fully,process,such,messages,even,in,the,stopping,phase,with,the,drawback,that,even,newly,sent,messages,might,still,get,processed,if,coming,in,before,all,receive,timeouts,have,expired,p,b,note,b,aborting,receive,attempts,for,such,incoming,messages,might,lead,to,the,provider,s,retry,count,decreasing,for,the,affected,messages,if,you,have,a,high,number,of,concurrent,consumers,make,sure,that,the,number,of,retries,is,higher,than,the,number,of,consumers,to,be,on,the,safe,side,for,all,potential,stopping,scenarios;public,void,set,accept,messages,while,stopping,boolean,accept,messages,while,stopping,this,accept,messages,while,stopping,accept,messages,while,stopping
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1328020251;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1356735495;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1397718966;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1401724323;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1405345771;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1405696881;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1406040641;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1425072498;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1425330316;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1426624897;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1429198188;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1432289819;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1432331447;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1434018810;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1438003938;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1492514138;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1495868221;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1496837955;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1498780456;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1500448076;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1500495740;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1519732288;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void invokeExceptionListener(JMSException ex);1530174524;Invoke the registered JMS ExceptionListener, if any._@param ex the exception that arose during JMS processing_@see #setExceptionListener;protected void invokeExceptionListener(JMSException ex) {_		ExceptionListener exceptionListener = getExceptionListener()__		if (exceptionListener != null) {_			exceptionListener.onException(ex)__		}_	};invoke,the,registered,jms,exception,listener,if,any,param,ex,the,exception,that,arose,during,jms,processing,see,set,exception,listener;protected,void,invoke,exception,listener,jmsexception,ex,exception,listener,exception,listener,get,exception,listener,if,exception,listener,null,exception,listener,on,exception,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1328020251;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1356735495;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1397718966;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1401724323;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1405345771;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1405696881;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1406040641;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1425072498;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1425330316;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1426624897;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1429198188;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1432289819;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1432331447;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1434018810;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1438003938;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1492514138;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1495868221;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1496837955;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1498780456;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1500448076;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1500495740;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1519732288;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> protected void handleListenerException(Throwable ex);1530174524;Handle the given exception that arose during listener execution._<p>The default implementation logs the exception at warn level,_not propagating it to the JMS provider &mdash_ assuming that all handling of_acknowledgement and/or transactions is done by this listener container._This can be overridden in subclasses._@param ex the exception to handle;protected void handleListenerException(Throwable ex) {_		if (ex instanceof MessageRejectedWhileStoppingException) {_			_			return__		}_		if (ex instanceof JMSException) {_			invokeExceptionListener((JMSException) ex)__		}_		if (isActive()) {_			_			_			invokeErrorHandler(ex)__		}_		else {_			_			_			logger.debug("Listener exception after container shutdown", ex)__		}_	};handle,the,given,exception,that,arose,during,listener,execution,p,the,default,implementation,logs,the,exception,at,warn,level,not,propagating,it,to,the,jms,provider,mdash,assuming,that,all,handling,of,acknowledgement,and,or,transactions,is,done,by,this,listener,container,this,can,be,overridden,in,subclasses,param,ex,the,exception,to,handle;protected,void,handle,listener,exception,throwable,ex,if,ex,instanceof,message,rejected,while,stopping,exception,return,if,ex,instanceof,jmsexception,invoke,exception,listener,jmsexception,ex,if,is,active,invoke,error,handler,ex,else,logger,debug,listener,exception,after,container,shutdown,ex
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1328020251;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1356735495;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1397718966;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1401724323;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1405345771;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1405696881;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1406040641;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1425072498;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1425330316;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1426624897;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1429198188;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1432289819;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1432331447;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1434018810;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1438003938;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1492514138;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1495868221;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1496837955;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> public void setExceptionListener(ExceptionListener exceptionListener);1498780456;Set the JMS ExceptionListener to notify in case of a JMSException thrown_by the registered message listener or the invocation infrastructure.;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};set,the,jms,exception,listener,to,notify,in,case,of,a,jmsexception,thrown,by,the,registered,message,listener,or,the,invocation,infrastructure;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1328020251;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1356735495;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1397718966;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1401724323;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1405345771;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1405696881;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1406040641;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1425072498;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1425330316;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1426624897;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1429198188;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1432289819;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1432331447;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1434018810;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1438003938;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1492514138;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> protected void commitIfNecessary(Session session, Message message) throws JMSException;1495868221;Perform a commit or message acknowledgement, as appropriate._@param session the JMS Session to commit_@param message the Message to acknowledge_@throws javax.jms.JMSException in case of commit failure;protected void commitIfNecessary(Session session, Message message) throws JMSException {_		_		if (session.getTransacted()) {_			_			if (isSessionLocallyTransacted(session)) {_				_				JmsUtils.commitIfNecessary(session)__			}_		}_		else if (message != null && isClientAcknowledge(session)) {_			message.acknowledge()__		}_	};perform,a,commit,or,message,acknowledgement,as,appropriate,param,session,the,jms,session,to,commit,param,message,the,message,to,acknowledge,throws,javax,jms,jmsexception,in,case,of,commit,failure;protected,void,commit,if,necessary,session,session,message,message,throws,jmsexception,if,session,get,transacted,if,is,session,locally,transacted,session,jms,utils,commit,if,necessary,session,else,if,message,null,is,client,acknowledge,session,message,acknowledge
AbstractMessageListenerContainer -> @Nullable 	public String getSubscriptionName();1495868221;Return the name of a subscription to create, if any._@since 4.1;@Nullable_	public String getSubscriptionName() {_		return this.subscriptionName__	};return,the,name,of,a,subscription,to,create,if,any,since,4,1;nullable,public,string,get,subscription,name,return,this,subscription,name
AbstractMessageListenerContainer -> @Nullable 	public String getSubscriptionName();1496837955;Return the name of a subscription to create, if any._@since 4.1;@Nullable_	public String getSubscriptionName() {_		return this.subscriptionName__	};return,the,name,of,a,subscription,to,create,if,any,since,4,1;nullable,public,string,get,subscription,name,return,this,subscription,name
AbstractMessageListenerContainer -> @Nullable 	public String getSubscriptionName();1498780456;Return the name of a subscription to create, if any._@since 4.1;@Nullable_	public String getSubscriptionName() {_		return this.subscriptionName__	};return,the,name,of,a,subscription,to,create,if,any,since,4,1;nullable,public,string,get,subscription,name,return,this,subscription,name
AbstractMessageListenerContainer -> @Nullable 	public String getSubscriptionName();1500448076;Return the name of a subscription to create, if any._@since 4.1;@Nullable_	public String getSubscriptionName() {_		return this.subscriptionName__	};return,the,name,of,a,subscription,to,create,if,any,since,4,1;nullable,public,string,get,subscription,name,return,this,subscription,name
AbstractMessageListenerContainer -> @Nullable 	public String getSubscriptionName();1500495740;Return the name of a subscription to create, if any._@since 4.1;@Nullable_	public String getSubscriptionName() {_		return this.subscriptionName__	};return,the,name,of,a,subscription,to,create,if,any,since,4,1;nullable,public,string,get,subscription,name,return,this,subscription,name
AbstractMessageListenerContainer -> @Nullable 	public String getSubscriptionName();1519732288;Return the name of a subscription to create, if any._@since 4.1;@Nullable_	public String getSubscriptionName() {_		return this.subscriptionName__	};return,the,name,of,a,subscription,to,create,if,any,since,4,1;nullable,public,string,get,subscription,name,return,this,subscription,name
AbstractMessageListenerContainer -> @Nullable 	public String getSubscriptionName();1530174524;Return the name of a subscription to create, if any._@since 4.1;@Nullable_	public String getSubscriptionName() {_		return this.subscriptionName__	};return,the,name,of,a,subscription,to,create,if,any,since,4,1;nullable,public,string,get,subscription,name,return,this,subscription,name
AbstractMessageListenerContainer -> public Destination getDestination();1328020251;Return the destination to receive messages from. Will be <code>null</code>_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,code,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public Destination getDestination();1356735495;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public Destination getDestination();1397718966;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public Destination getDestination();1401724323;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public Destination getDestination();1405345771;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public Destination getDestination();1405696881;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public Destination getDestination();1406040641;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public Destination getDestination();1425072498;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public Destination getDestination();1425330316;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public Destination getDestination();1426624897;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public Destination getDestination();1429198188;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public Destination getDestination();1432289819;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public Destination getDestination();1432331447;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public Destination getDestination();1434018810;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public Destination getDestination();1438003938;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public Destination getDestination();1492514138;Return the destination to receive messages from. Will be {@code null}_if the configured destination is not an actual {@link Destination} type__c.f. {@link #setDestinationName(String) when the destination is a String}.;public Destination getDestination() {_		return (this.destination instanceof Destination ? (Destination) this.destination : null)__	};return,the,destination,to,receive,messages,from,will,be,code,null,if,the,configured,destination,is,not,an,actual,link,destination,type,c,f,link,set,destination,name,string,when,the,destination,is,a,string;public,destination,get,destination,return,this,destination,instanceof,destination,destination,this,destination,null
AbstractMessageListenerContainer -> public void setDestinationName(@Nullable String destinationName);1495868221;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@param destinationName the desired destination (can be {@code null})_@see #setDestination(javax.jms.Destination);public void setDestinationName(@Nullable String destinationName) {_		Assert.notNull(destinationName, "'destinationName' must not be null")__		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,param,destination,name,the,desired,destination,can,be,code,null,see,set,destination,javax,jms,destination;public,void,set,destination,name,nullable,string,destination,name,assert,not,null,destination,name,destination,name,must,not,be,null,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(@Nullable String destinationName);1500448076;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestination(javax.jms.Destination);public void setDestinationName(@Nullable String destinationName) {_		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,javax,jms,destination;public,void,set,destination,name,nullable,string,destination,name,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(@Nullable String destinationName);1500495740;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestination(javax.jms.Destination);public void setDestinationName(@Nullable String destinationName) {_		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,javax,jms,destination;public,void,set,destination,name,nullable,string,destination,name,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(@Nullable String destinationName);1519732288;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestination(javax.jms.Destination);public void setDestinationName(@Nullable String destinationName) {_		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,javax,jms,destination;public,void,set,destination,name,nullable,string,destination,name,this,destination,destination,name
AbstractMessageListenerContainer -> public void setDestinationName(@Nullable String destinationName);1530174524;Set the name of the destination to receive messages from._<p>The specified name will be dynamically resolved via the configured_{@link #setDestinationResolver destination resolver}._<p>Alternatively, specify a JMS {@link Destination} object as "destination"._<p>Note: The destination may be replaced at runtime, with the listener_container picking up the new destination immediately (works e.g. with_DefaultMessageListenerContainer, as long as the cache level is less than_CACHE_CONSUMER). However, this is considered advanced usage_ use it with care!_@see #setDestination(javax.jms.Destination);public void setDestinationName(@Nullable String destinationName) {_		this.destination = destinationName__	};set,the,name,of,the,destination,to,receive,messages,from,p,the,specified,name,will,be,dynamically,resolved,via,the,configured,link,set,destination,resolver,destination,resolver,p,alternatively,specify,a,jms,link,destination,object,as,destination,p,note,the,destination,may,be,replaced,at,runtime,with,the,listener,container,picking,up,the,new,destination,immediately,works,e,g,with,default,message,listener,container,as,long,as,the,cache,level,is,less,than,however,this,is,considered,advanced,usage,use,it,with,care,see,set,destination,javax,jms,destination;public,void,set,destination,name,nullable,string,destination,name,this,destination,destination,name
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1328020251;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1356735495;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1397718966;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1401724323;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1405345771;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1405696881;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1406040641;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1425072498;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1425330316;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1426624897;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1429198188;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1432289819;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1432331447;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1434018810;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1438003938;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1492514138;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1495868221;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1496837955;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1498780456;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1500448076;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1500495740;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1519732288;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> protected boolean isSessionLocallyTransacted(Session session);1530174524;Check whether the given Session is locally transacted, that is, whether_its transaction is managed by this listener container's Session handling_and not by an external transaction coordinator._<p>Note: The Session's own transacted flag will already have been checked_before. This method is about finding out whether the Session's transaction_is local or externally coordinated._@param session the Session to check_@return whether the given Session is locally transacted_@see #isSessionTransacted()_@see org.springframework.jms.connection.ConnectionFactoryUtils#isSessionTransactional;protected boolean isSessionLocallyTransacted(Session session) {_		return isSessionTransacted()__	};check,whether,the,given,session,is,locally,transacted,that,is,whether,its,transaction,is,managed,by,this,listener,container,s,session,handling,and,not,by,an,external,transaction,coordinator,p,note,the,session,s,own,transacted,flag,will,already,have,been,checked,before,this,method,is,about,finding,out,whether,the,session,s,transaction,is,local,or,externally,coordinated,param,session,the,session,to,check,return,whether,the,given,session,is,locally,transacted,see,is,session,transacted,see,org,springframework,jms,connection,connection,factory,utils,is,session,transactional;protected,boolean,is,session,locally,transacted,session,session,return,is,session,transacted
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1328020251;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1356735495;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1397718966;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1401724323;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1405345771;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1405696881;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1406040641;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1425072498;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1425330316;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1426624897;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1429198188;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1432289819;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1432331447;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1434018810;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1438003938;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1492514138;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1495868221;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1496837955;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1498780456;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1500448076;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1500495740;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1519732288;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> public boolean isExposeListenerSession();1530174524;Return whether to expose the listener JMS {@link Session} to a_registered {@link SessionAwareMessageListener}.;public boolean isExposeListenerSession() {_		return this.exposeListenerSession__	};return,whether,to,expose,the,listener,jms,link,session,to,a,registered,link,session,aware,message,listener;public,boolean,is,expose,listener,session,return,this,expose,listener,session
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1328020251;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1356735495;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1397718966;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1401724323;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1405345771;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1405696881;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1406040641;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1425072498;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1425330316;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1426624897;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1429198188;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1432289819;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1432331447;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1434018810;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1438003938;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1492514138;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1495868221;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1496837955;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1498780456;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1500448076;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1500495740;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1519732288;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> protected void executeListener(Session session, Message message);1530174524;Execute the specified listener,_committing or rolling back the transaction afterwards (if necessary)._@param session the JMS Session to operate on_@param message the received JMS Message_@see #invokeListener_@see #commitIfNecessary_@see #rollbackOnExceptionIfNecessary_@see #handleListenerException;protected void executeListener(Session session, Message message) {_		try {_			doExecuteListener(session, message)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};execute,the,specified,listener,committing,or,rolling,back,the,transaction,afterwards,if,necessary,param,session,the,jms,session,to,operate,on,param,message,the,received,jms,message,see,invoke,listener,see,commit,if,necessary,see,rollback,on,exception,if,necessary,see,handle,listener,exception;protected,void,execute,listener,session,session,message,message,try,do,execute,listener,session,message,catch,throwable,ex,handle,listener,exception,ex
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1405696881;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1406040641;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1425072498;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1425330316;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1426624897;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@since 4.1_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,since,4,1,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1429198188;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@since 4.1_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,since,4,1,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1432289819;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@since 4.1_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,since,4,1,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1432331447;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@since 4.1_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,since,4,1,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1434018810;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@since 4.1_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,since,4,1,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1438003938;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@since 4.1_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,since,4,1,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1492514138;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@since 4.1_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,since,4,1,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1495868221;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@since 4.1_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,since,4,1,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1496837955;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@since 4.1_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,since,4,1,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1498780456;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@since 4.1_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,since,4,1,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1500448076;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@since 4.1_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,since,4,1,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1500495740;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@since 4.1_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,since,4,1,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1519732288;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@since 4.1_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,since,4,1,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public void setSubscriptionShared(boolean subscriptionShared);1530174524;Set whether to make the subscription shared. The shared subscription name_to be used can be specified through the "subscriptionName" property._<p>Default is "false". Set this to "true" to register a shared subscription,_typically in combination with a "subscriptionName" value (unless_your message listener class name is good enough as subscription name)._Note that shared subscriptions may also be durable, so this flag can_(and often will) be combined with "subscriptionDurable" as well._<p>Only makes sense when listening to a topic (pub-sub domain),_therefore this method switches the "pubSubDomain" flag as well._<p><b>Requires a JMS 2.0 compatible message broker.</b>_@since 4.1_@see #setSubscriptionName_@see #setSubscriptionDurable_@see #setPubSubDomain;public void setSubscriptionShared(boolean subscriptionShared) {_		this.subscriptionShared = subscriptionShared__		if (subscriptionShared) {_			setPubSubDomain(true)__		}_	};set,whether,to,make,the,subscription,shared,the,shared,subscription,name,to,be,used,can,be,specified,through,the,subscription,name,property,p,default,is,false,set,this,to,true,to,register,a,shared,subscription,typically,in,combination,with,a,subscription,name,value,unless,your,message,listener,class,name,is,good,enough,as,subscription,name,note,that,shared,subscriptions,may,also,be,durable,so,this,flag,can,and,often,will,be,combined,with,subscription,durable,as,well,p,only,makes,sense,when,listening,to,a,topic,pub,sub,domain,therefore,this,method,switches,the,pub,sub,domain,flag,as,well,p,b,requires,a,jms,2,0,compatible,message,broker,b,since,4,1,see,set,subscription,name,see,set,subscription,durable,see,set,pub,sub,domain;public,void,set,subscription,shared,boolean,subscription,shared,this,subscription,shared,subscription,shared,if,subscription,shared,set,pub,sub,domain,true
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1405696881;Return whether to inhibit the delivery of messages published by its own connection.;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1406040641;Return whether to inhibit the delivery of messages published by its own connection.;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1425072498;Return whether to inhibit the delivery of messages published by its own connection.;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1425330316;Return whether to inhibit the delivery of messages published by its own connection.;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1426624897;Return whether to inhibit the delivery of messages published by its own connection._@since 4.1;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,since,4,1;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1429198188;Return whether to inhibit the delivery of messages published by its own connection._@since 4.1;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,since,4,1;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1432289819;Return whether to inhibit the delivery of messages published by its own connection._@since 4.1;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,since,4,1;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1432331447;Return whether to inhibit the delivery of messages published by its own connection._@since 4.1;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,since,4,1;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1434018810;Return whether to inhibit the delivery of messages published by its own connection._@since 4.1;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,since,4,1;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1438003938;Return whether to inhibit the delivery of messages published by its own connection._@since 4.1;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,since,4,1;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1492514138;Return whether to inhibit the delivery of messages published by its own connection._@since 4.1;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,since,4,1;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1495868221;Return whether to inhibit the delivery of messages published by its own connection._@since 4.1;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,since,4,1;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1496837955;Return whether to inhibit the delivery of messages published by its own connection._@since 4.1;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,since,4,1;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1498780456;Return whether to inhibit the delivery of messages published by its own connection._@since 4.1;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,since,4,1;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1500448076;Return whether to inhibit the delivery of messages published by its own connection._@since 4.1;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,since,4,1;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1500495740;Return whether to inhibit the delivery of messages published by its own connection._@since 4.1;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,since,4,1;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1519732288;Return whether to inhibit the delivery of messages published by its own connection._@since 4.1;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,since,4,1;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public boolean isPubSubNoLocal();1530174524;Return whether to inhibit the delivery of messages published by its own connection._@since 4.1;public boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,since,4,1;public,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1405696881;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1406040641;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1425072498;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1425330316;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1426624897;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@since 4.1_@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,since,4,1,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1429198188;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@since 4.1_@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,since,4,1,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1432289819;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@since 4.1_@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,since,4,1,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1432331447;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@since 4.1_@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,since,4,1,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1434018810;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@since 4.1_@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,since,4,1,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1438003938;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@since 4.1_@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,since,4,1,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1492514138;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@since 4.1_@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,since,4,1,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1495868221;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@since 4.1_@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,since,4,1,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1496837955;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@since 4.1_@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,since,4,1,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1498780456;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@since 4.1_@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,since,4,1,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1500448076;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@since 4.1_@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,since,4,1,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1500495740;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@since 4.1_@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,since,4,1,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1519732288;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@since 4.1_@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,since,4,1,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1530174524;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@since 4.1_@see javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,since,4,1,see,javax,jms,session,create,consumer,javax,jms,destination,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
