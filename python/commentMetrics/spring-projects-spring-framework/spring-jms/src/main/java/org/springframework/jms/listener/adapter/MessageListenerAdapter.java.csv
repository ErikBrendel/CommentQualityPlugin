# id;timestamp;commentText;codeText;commentWords;codeWords
MessageListenerAdapter -> public void setDefaultResponseDestination(Destination destination);1328020251;Set the default destination to send response messages to. This will be applied_in case of a request message that does not carry a "JMSReplyTo" field._<p>Response destinations are only relevant for listener methods that return_result objects, which will be wrapped in a response message and sent to a_response destination._<p>Alternatively, specify a "defaultResponseQueueName" or "defaultResponseTopicName",_to be dynamically resolved via the DestinationResolver._@see #setDefaultResponseQueueName(String)_@see #setDefaultResponseTopicName(String)_@see #getResponseDestination;public void setDefaultResponseDestination(Destination destination) {_		this.defaultResponseDestination = destination__	};set,the,default,destination,to,send,response,messages,to,this,will,be,applied,in,case,of,a,request,message,that,does,not,carry,a,jmsreply,to,field,p,response,destinations,are,only,relevant,for,listener,methods,that,return,result,objects,which,will,be,wrapped,in,a,response,message,and,sent,to,a,response,destination,p,alternatively,specify,a,default,response,queue,name,or,default,response,topic,name,to,be,dynamically,resolved,via,the,destination,resolver,see,set,default,response,queue,name,string,see,set,default,response,topic,name,string,see,get,response,destination;public,void,set,default,response,destination,destination,destination,this,default,response,destination,destination
MessageListenerAdapter -> public void setDefaultResponseDestination(Destination destination);1356735495;Set the default destination to send response messages to. This will be applied_in case of a request message that does not carry a "JMSReplyTo" field._<p>Response destinations are only relevant for listener methods that return_result objects, which will be wrapped in a response message and sent to a_response destination._<p>Alternatively, specify a "defaultResponseQueueName" or "defaultResponseTopicName",_to be dynamically resolved via the DestinationResolver._@see #setDefaultResponseQueueName(String)_@see #setDefaultResponseTopicName(String)_@see #getResponseDestination;public void setDefaultResponseDestination(Destination destination) {_		this.defaultResponseDestination = destination__	};set,the,default,destination,to,send,response,messages,to,this,will,be,applied,in,case,of,a,request,message,that,does,not,carry,a,jmsreply,to,field,p,response,destinations,are,only,relevant,for,listener,methods,that,return,result,objects,which,will,be,wrapped,in,a,response,message,and,sent,to,a,response,destination,p,alternatively,specify,a,default,response,queue,name,or,default,response,topic,name,to,be,dynamically,resolved,via,the,destination,resolver,see,set,default,response,queue,name,string,see,set,default,response,topic,name,string,see,get,response,destination;public,void,set,default,response,destination,destination,destination,this,default,response,destination,destination
MessageListenerAdapter -> public void setDefaultResponseDestination(Destination destination);1357119239;Set the default destination to send response messages to. This will be applied_in case of a request message that does not carry a "JMSReplyTo" field._<p>Response destinations are only relevant for listener methods that return_result objects, which will be wrapped in a response message and sent to a_response destination._<p>Alternatively, specify a "defaultResponseQueueName" or "defaultResponseTopicName",_to be dynamically resolved via the DestinationResolver._@see #setDefaultResponseQueueName(String)_@see #setDefaultResponseTopicName(String)_@see #getResponseDestination;public void setDefaultResponseDestination(Destination destination) {_		this.defaultResponseDestination = destination__	};set,the,default,destination,to,send,response,messages,to,this,will,be,applied,in,case,of,a,request,message,that,does,not,carry,a,jmsreply,to,field,p,response,destinations,are,only,relevant,for,listener,methods,that,return,result,objects,which,will,be,wrapped,in,a,response,message,and,sent,to,a,response,destination,p,alternatively,specify,a,default,response,queue,name,or,default,response,topic,name,to,be,dynamically,resolved,via,the,destination,resolver,see,set,default,response,queue,name,string,see,set,default,response,topic,name,string,see,get,response,destination;public,void,set,default,response,destination,destination,destination,this,default,response,destination,destination
MessageListenerAdapter -> public void setDefaultResponseDestination(Destination destination);1368482696;Set the default destination to send response messages to. This will be applied_in case of a request message that does not carry a "JMSReplyTo" field._<p>Response destinations are only relevant for listener methods that return_result objects, which will be wrapped in a response message and sent to a_response destination._<p>Alternatively, specify a "defaultResponseQueueName" or "defaultResponseTopicName",_to be dynamically resolved via the DestinationResolver._@see #setDefaultResponseQueueName(String)_@see #setDefaultResponseTopicName(String)_@see #getResponseDestination;public void setDefaultResponseDestination(Destination destination) {_		this.defaultResponseDestination = destination__	};set,the,default,destination,to,send,response,messages,to,this,will,be,applied,in,case,of,a,request,message,that,does,not,carry,a,jmsreply,to,field,p,response,destinations,are,only,relevant,for,listener,methods,that,return,result,objects,which,will,be,wrapped,in,a,response,message,and,sent,to,a,response,destination,p,alternatively,specify,a,default,response,queue,name,or,default,response,topic,name,to,be,dynamically,resolved,via,the,destination,resolver,see,set,default,response,queue,name,string,see,set,default,response,topic,name,string,see,get,response,destination;public,void,set,default,response,destination,destination,destination,this,default,response,destination,destination
MessageListenerAdapter -> public void setDefaultResponseDestination(Destination destination);1385412762;Set the default destination to send response messages to. This will be applied_in case of a request message that does not carry a "JMSReplyTo" field._<p>Response destinations are only relevant for listener methods that return_result objects, which will be wrapped in a response message and sent to a_response destination._<p>Alternatively, specify a "defaultResponseQueueName" or "defaultResponseTopicName",_to be dynamically resolved via the DestinationResolver._@see #setDefaultResponseQueueName(String)_@see #setDefaultResponseTopicName(String)_@see #getResponseDestination;public void setDefaultResponseDestination(Destination destination) {_		this.defaultResponseDestination = destination__	};set,the,default,destination,to,send,response,messages,to,this,will,be,applied,in,case,of,a,request,message,that,does,not,carry,a,jmsreply,to,field,p,response,destinations,are,only,relevant,for,listener,methods,that,return,result,objects,which,will,be,wrapped,in,a,response,message,and,sent,to,a,response,destination,p,alternatively,specify,a,default,response,queue,name,or,default,response,topic,name,to,be,dynamically,resolved,via,the,destination,resolver,see,set,default,response,queue,name,string,see,set,default,response,topic,name,string,see,get,response,destination;public,void,set,default,response,destination,destination,destination,this,default,response,destination,destination
MessageListenerAdapter -> protected MessageConverter getMessageConverter();1328020251;Return the converter that will convert incoming JMS messages to_listener method arguments, and objects returned from listener_methods back to JMS messages.;protected MessageConverter getMessageConverter() {_		return this.messageConverter__	};return,the,converter,that,will,convert,incoming,jms,messages,to,listener,method,arguments,and,objects,returned,from,listener,methods,back,to,jms,messages;protected,message,converter,get,message,converter,return,this,message,converter
MessageListenerAdapter -> protected MessageConverter getMessageConverter();1356735495;Return the converter that will convert incoming JMS messages to_listener method arguments, and objects returned from listener_methods back to JMS messages.;protected MessageConverter getMessageConverter() {_		return this.messageConverter__	};return,the,converter,that,will,convert,incoming,jms,messages,to,listener,method,arguments,and,objects,returned,from,listener,methods,back,to,jms,messages;protected,message,converter,get,message,converter,return,this,message,converter
MessageListenerAdapter -> protected MessageConverter getMessageConverter();1357119239;Return the converter that will convert incoming JMS messages to_listener method arguments, and objects returned from listener_methods back to JMS messages.;protected MessageConverter getMessageConverter() {_		return this.messageConverter__	};return,the,converter,that,will,convert,incoming,jms,messages,to,listener,method,arguments,and,objects,returned,from,listener,methods,back,to,jms,messages;protected,message,converter,get,message,converter,return,this,message,converter
MessageListenerAdapter -> protected MessageConverter getMessageConverter();1368482696;Return the converter that will convert incoming JMS messages to_listener method arguments, and objects returned from listener_methods back to JMS messages.;protected MessageConverter getMessageConverter() {_		return this.messageConverter__	};return,the,converter,that,will,convert,incoming,jms,messages,to,listener,method,arguments,and,objects,returned,from,listener,methods,back,to,jms,messages;protected,message,converter,get,message,converter,return,this,message,converter
MessageListenerAdapter -> protected MessageConverter getMessageConverter();1385412762;Return the converter that will convert incoming JMS messages to_listener method arguments, and objects returned from listener_methods back to JMS messages.;protected MessageConverter getMessageConverter() {_		return this.messageConverter__	};return,the,converter,that,will,convert,incoming,jms,messages,to,listener,method,arguments,and,objects,returned,from,listener,methods,back,to,jms,messages;protected,message,converter,get,message,converter,return,this,message,converter
MessageListenerAdapter -> public void setDestinationResolver(DestinationResolver destinationResolver);1328020251;Set the DestinationResolver that should be used to resolve response_destination names for this adapter._<p>The default resolver is a DynamicDestinationResolver. Specify a_JndiDestinationResolver for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		Assert.notNull(destinationResolver, "DestinationResolver must not be null")__		this.destinationResolver = destinationResolver__	};set,the,destination,resolver,that,should,be,used,to,resolve,response,destination,names,for,this,adapter,p,the,default,resolver,is,a,dynamic,destination,resolver,specify,a,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,assert,not,null,destination,resolver,destination,resolver,must,not,be,null,this,destination,resolver,destination,resolver
MessageListenerAdapter -> public void setDestinationResolver(DestinationResolver destinationResolver);1356735495;Set the DestinationResolver that should be used to resolve response_destination names for this adapter._<p>The default resolver is a DynamicDestinationResolver. Specify a_JndiDestinationResolver for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		Assert.notNull(destinationResolver, "DestinationResolver must not be null")__		this.destinationResolver = destinationResolver__	};set,the,destination,resolver,that,should,be,used,to,resolve,response,destination,names,for,this,adapter,p,the,default,resolver,is,a,dynamic,destination,resolver,specify,a,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,assert,not,null,destination,resolver,destination,resolver,must,not,be,null,this,destination,resolver,destination,resolver
MessageListenerAdapter -> public void setDestinationResolver(DestinationResolver destinationResolver);1357119239;Set the DestinationResolver that should be used to resolve response_destination names for this adapter._<p>The default resolver is a DynamicDestinationResolver. Specify a_JndiDestinationResolver for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		Assert.notNull(destinationResolver, "DestinationResolver must not be null")__		this.destinationResolver = destinationResolver__	};set,the,destination,resolver,that,should,be,used,to,resolve,response,destination,names,for,this,adapter,p,the,default,resolver,is,a,dynamic,destination,resolver,specify,a,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,assert,not,null,destination,resolver,destination,resolver,must,not,be,null,this,destination,resolver,destination,resolver
MessageListenerAdapter -> public void setDestinationResolver(DestinationResolver destinationResolver);1368482696;Set the DestinationResolver that should be used to resolve response_destination names for this adapter._<p>The default resolver is a DynamicDestinationResolver. Specify a_JndiDestinationResolver for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		Assert.notNull(destinationResolver, "DestinationResolver must not be null")__		this.destinationResolver = destinationResolver__	};set,the,destination,resolver,that,should,be,used,to,resolve,response,destination,names,for,this,adapter,p,the,default,resolver,is,a,dynamic,destination,resolver,specify,a,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,assert,not,null,destination,resolver,destination,resolver,must,not,be,null,this,destination,resolver,destination,resolver
MessageListenerAdapter -> public void setDestinationResolver(DestinationResolver destinationResolver);1385412762;Set the DestinationResolver that should be used to resolve response_destination names for this adapter._<p>The default resolver is a DynamicDestinationResolver. Specify a_JndiDestinationResolver for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		Assert.notNull(destinationResolver, "DestinationResolver must not be null")__		this.destinationResolver = destinationResolver__	};set,the,destination,resolver,that,should,be,used,to,resolve,response,destination,names,for,this,adapter,p,the,default,resolver,is,a,dynamic,destination,resolver,specify,a,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,assert,not,null,destination,resolver,destination,resolver,must,not,be,null,this,destination,resolver,destination,resolver
MessageListenerAdapter -> protected DestinationResolver getDestinationResolver();1328020251;Return the DestinationResolver for this adapter.;protected DestinationResolver getDestinationResolver() {_		return this.destinationResolver__	};return,the,destination,resolver,for,this,adapter;protected,destination,resolver,get,destination,resolver,return,this,destination,resolver
MessageListenerAdapter -> protected DestinationResolver getDestinationResolver();1356735495;Return the DestinationResolver for this adapter.;protected DestinationResolver getDestinationResolver() {_		return this.destinationResolver__	};return,the,destination,resolver,for,this,adapter;protected,destination,resolver,get,destination,resolver,return,this,destination,resolver
MessageListenerAdapter -> protected DestinationResolver getDestinationResolver();1357119239;Return the DestinationResolver for this adapter.;protected DestinationResolver getDestinationResolver() {_		return this.destinationResolver__	};return,the,destination,resolver,for,this,adapter;protected,destination,resolver,get,destination,resolver,return,this,destination,resolver
MessageListenerAdapter -> protected DestinationResolver getDestinationResolver();1368482696;Return the DestinationResolver for this adapter.;protected DestinationResolver getDestinationResolver() {_		return this.destinationResolver__	};return,the,destination,resolver,for,this,adapter;protected,destination,resolver,get,destination,resolver,return,this,destination,resolver
MessageListenerAdapter -> protected DestinationResolver getDestinationResolver();1385412762;Return the DestinationResolver for this adapter.;protected DestinationResolver getDestinationResolver() {_		return this.destinationResolver__	};return,the,destination,resolver,for,this,adapter;protected,destination,resolver,get,destination,resolver,return,this,destination,resolver
MessageListenerAdapter -> protected void handleListenerException(Throwable ex);1328020251;Handle the given exception that arose during listener execution._The default implementation logs the exception at error level._<p>This method only applies when used as standard JMS {@link MessageListener}._In case of the Spring {@link SessionAwareMessageListener} mechanism,_exceptions get handled by the caller instead._@param ex the exception to handle_@see #onMessage(javax.jms.Message);protected void handleListenerException(Throwable ex) {_		logger.error("Listener execution failed", ex)__	};handle,the,given,exception,that,arose,during,listener,execution,the,default,implementation,logs,the,exception,at,error,level,p,this,method,only,applies,when,used,as,standard,jms,link,message,listener,in,case,of,the,spring,link,session,aware,message,listener,mechanism,exceptions,get,handled,by,the,caller,instead,param,ex,the,exception,to,handle,see,on,message,javax,jms,message;protected,void,handle,listener,exception,throwable,ex,logger,error,listener,execution,failed,ex
MessageListenerAdapter -> protected void handleListenerException(Throwable ex);1356735495;Handle the given exception that arose during listener execution._The default implementation logs the exception at error level._<p>This method only applies when used as standard JMS {@link MessageListener}._In case of the Spring {@link SessionAwareMessageListener} mechanism,_exceptions get handled by the caller instead._@param ex the exception to handle_@see #onMessage(javax.jms.Message);protected void handleListenerException(Throwable ex) {_		logger.error("Listener execution failed", ex)__	};handle,the,given,exception,that,arose,during,listener,execution,the,default,implementation,logs,the,exception,at,error,level,p,this,method,only,applies,when,used,as,standard,jms,link,message,listener,in,case,of,the,spring,link,session,aware,message,listener,mechanism,exceptions,get,handled,by,the,caller,instead,param,ex,the,exception,to,handle,see,on,message,javax,jms,message;protected,void,handle,listener,exception,throwable,ex,logger,error,listener,execution,failed,ex
MessageListenerAdapter -> protected void handleListenerException(Throwable ex);1357119239;Handle the given exception that arose during listener execution._The default implementation logs the exception at error level._<p>This method only applies when used as standard JMS {@link MessageListener}._In case of the Spring {@link SessionAwareMessageListener} mechanism,_exceptions get handled by the caller instead._@param ex the exception to handle_@see #onMessage(javax.jms.Message);protected void handleListenerException(Throwable ex) {_		logger.error("Listener execution failed", ex)__	};handle,the,given,exception,that,arose,during,listener,execution,the,default,implementation,logs,the,exception,at,error,level,p,this,method,only,applies,when,used,as,standard,jms,link,message,listener,in,case,of,the,spring,link,session,aware,message,listener,mechanism,exceptions,get,handled,by,the,caller,instead,param,ex,the,exception,to,handle,see,on,message,javax,jms,message;protected,void,handle,listener,exception,throwable,ex,logger,error,listener,execution,failed,ex
MessageListenerAdapter -> protected void handleListenerException(Throwable ex);1368482696;Handle the given exception that arose during listener execution._The default implementation logs the exception at error level._<p>This method only applies when used as standard JMS {@link MessageListener}._In case of the Spring {@link SessionAwareMessageListener} mechanism,_exceptions get handled by the caller instead._@param ex the exception to handle_@see #onMessage(javax.jms.Message);protected void handleListenerException(Throwable ex) {_		logger.error("Listener execution failed", ex)__	};handle,the,given,exception,that,arose,during,listener,execution,the,default,implementation,logs,the,exception,at,error,level,p,this,method,only,applies,when,used,as,standard,jms,link,message,listener,in,case,of,the,spring,link,session,aware,message,listener,mechanism,exceptions,get,handled,by,the,caller,instead,param,ex,the,exception,to,handle,see,on,message,javax,jms,message;protected,void,handle,listener,exception,throwable,ex,logger,error,listener,execution,failed,ex
MessageListenerAdapter -> protected void handleListenerException(Throwable ex);1385412762;Handle the given exception that arose during listener execution._The default implementation logs the exception at error level._<p>This method only applies when used as standard JMS {@link MessageListener}._In case of the Spring {@link SessionAwareMessageListener} mechanism,_exceptions get handled by the caller instead._@param ex the exception to handle_@see #onMessage(javax.jms.Message);protected void handleListenerException(Throwable ex) {_		logger.error("Listener execution failed", ex)__	};handle,the,given,exception,that,arose,during,listener,execution,the,default,implementation,logs,the,exception,at,error,level,p,this,method,only,applies,when,used,as,standard,jms,link,message,listener,in,case,of,the,spring,link,session,aware,message,listener,mechanism,exceptions,get,handled,by,the,caller,instead,param,ex,the,exception,to,handle,see,on,message,javax,jms,message;protected,void,handle,listener,exception,throwable,ex,logger,error,listener,execution,failed,ex
MessageListenerAdapter -> protected Destination resolveDefaultResponseDestination(Session session) throws JMSException;1328020251;Resolve the default response destination into a JMS {@link Destination}, using this_accessor's {@link DestinationResolver} in case of a destination name._@return the located {@link Destination}_@throws javax.jms.JMSException if resolution failed_@see #setDefaultResponseDestination_@see #setDefaultResponseQueueName_@see #setDefaultResponseTopicName_@see #setDestinationResolver;protected Destination resolveDefaultResponseDestination(Session session) throws JMSException {_		if (this.defaultResponseDestination instanceof Destination) {_			return (Destination) this.defaultResponseDestination__		}_		if (this.defaultResponseDestination instanceof DestinationNameHolder) {_			DestinationNameHolder nameHolder = (DestinationNameHolder) this.defaultResponseDestination__			return getDestinationResolver().resolveDestinationName(session, nameHolder.name, nameHolder.isTopic)__		}_		return null__	};resolve,the,default,response,destination,into,a,jms,link,destination,using,this,accessor,s,link,destination,resolver,in,case,of,a,destination,name,return,the,located,link,destination,throws,javax,jms,jmsexception,if,resolution,failed,see,set,default,response,destination,see,set,default,response,queue,name,see,set,default,response,topic,name,see,set,destination,resolver;protected,destination,resolve,default,response,destination,session,session,throws,jmsexception,if,this,default,response,destination,instanceof,destination,return,destination,this,default,response,destination,if,this,default,response,destination,instanceof,destination,name,holder,destination,name,holder,name,holder,destination,name,holder,this,default,response,destination,return,get,destination,resolver,resolve,destination,name,session,name,holder,name,name,holder,is,topic,return,null
MessageListenerAdapter -> protected Destination resolveDefaultResponseDestination(Session session) throws JMSException;1356735495;Resolve the default response destination into a JMS {@link Destination}, using this_accessor's {@link DestinationResolver} in case of a destination name._@return the located {@link Destination}_@throws javax.jms.JMSException if resolution failed_@see #setDefaultResponseDestination_@see #setDefaultResponseQueueName_@see #setDefaultResponseTopicName_@see #setDestinationResolver;protected Destination resolveDefaultResponseDestination(Session session) throws JMSException {_		if (this.defaultResponseDestination instanceof Destination) {_			return (Destination) this.defaultResponseDestination__		}_		if (this.defaultResponseDestination instanceof DestinationNameHolder) {_			DestinationNameHolder nameHolder = (DestinationNameHolder) this.defaultResponseDestination__			return getDestinationResolver().resolveDestinationName(session, nameHolder.name, nameHolder.isTopic)__		}_		return null__	};resolve,the,default,response,destination,into,a,jms,link,destination,using,this,accessor,s,link,destination,resolver,in,case,of,a,destination,name,return,the,located,link,destination,throws,javax,jms,jmsexception,if,resolution,failed,see,set,default,response,destination,see,set,default,response,queue,name,see,set,default,response,topic,name,see,set,destination,resolver;protected,destination,resolve,default,response,destination,session,session,throws,jmsexception,if,this,default,response,destination,instanceof,destination,return,destination,this,default,response,destination,if,this,default,response,destination,instanceof,destination,name,holder,destination,name,holder,name,holder,destination,name,holder,this,default,response,destination,return,get,destination,resolver,resolve,destination,name,session,name,holder,name,name,holder,is,topic,return,null
MessageListenerAdapter -> protected Destination resolveDefaultResponseDestination(Session session) throws JMSException;1357119239;Resolve the default response destination into a JMS {@link Destination}, using this_accessor's {@link DestinationResolver} in case of a destination name._@return the located {@link Destination}_@throws javax.jms.JMSException if resolution failed_@see #setDefaultResponseDestination_@see #setDefaultResponseQueueName_@see #setDefaultResponseTopicName_@see #setDestinationResolver;protected Destination resolveDefaultResponseDestination(Session session) throws JMSException {_		if (this.defaultResponseDestination instanceof Destination) {_			return (Destination) this.defaultResponseDestination__		}_		if (this.defaultResponseDestination instanceof DestinationNameHolder) {_			DestinationNameHolder nameHolder = (DestinationNameHolder) this.defaultResponseDestination__			return getDestinationResolver().resolveDestinationName(session, nameHolder.name, nameHolder.isTopic)__		}_		return null__	};resolve,the,default,response,destination,into,a,jms,link,destination,using,this,accessor,s,link,destination,resolver,in,case,of,a,destination,name,return,the,located,link,destination,throws,javax,jms,jmsexception,if,resolution,failed,see,set,default,response,destination,see,set,default,response,queue,name,see,set,default,response,topic,name,see,set,destination,resolver;protected,destination,resolve,default,response,destination,session,session,throws,jmsexception,if,this,default,response,destination,instanceof,destination,return,destination,this,default,response,destination,if,this,default,response,destination,instanceof,destination,name,holder,destination,name,holder,name,holder,destination,name,holder,this,default,response,destination,return,get,destination,resolver,resolve,destination,name,session,name,holder,name,name,holder,is,topic,return,null
MessageListenerAdapter -> protected Destination resolveDefaultResponseDestination(Session session) throws JMSException;1368482696;Resolve the default response destination into a JMS {@link Destination}, using this_accessor's {@link DestinationResolver} in case of a destination name._@return the located {@link Destination}_@throws javax.jms.JMSException if resolution failed_@see #setDefaultResponseDestination_@see #setDefaultResponseQueueName_@see #setDefaultResponseTopicName_@see #setDestinationResolver;protected Destination resolveDefaultResponseDestination(Session session) throws JMSException {_		if (this.defaultResponseDestination instanceof Destination) {_			return (Destination) this.defaultResponseDestination__		}_		if (this.defaultResponseDestination instanceof DestinationNameHolder) {_			DestinationNameHolder nameHolder = (DestinationNameHolder) this.defaultResponseDestination__			return getDestinationResolver().resolveDestinationName(session, nameHolder.name, nameHolder.isTopic)__		}_		return null__	};resolve,the,default,response,destination,into,a,jms,link,destination,using,this,accessor,s,link,destination,resolver,in,case,of,a,destination,name,return,the,located,link,destination,throws,javax,jms,jmsexception,if,resolution,failed,see,set,default,response,destination,see,set,default,response,queue,name,see,set,default,response,topic,name,see,set,destination,resolver;protected,destination,resolve,default,response,destination,session,session,throws,jmsexception,if,this,default,response,destination,instanceof,destination,return,destination,this,default,response,destination,if,this,default,response,destination,instanceof,destination,name,holder,destination,name,holder,name,holder,destination,name,holder,this,default,response,destination,return,get,destination,resolver,resolve,destination,name,session,name,holder,name,name,holder,is,topic,return,null
MessageListenerAdapter -> protected Destination resolveDefaultResponseDestination(Session session) throws JMSException;1385412762;Resolve the default response destination into a JMS {@link Destination}, using this_accessor's {@link DestinationResolver} in case of a destination name._@return the located {@link Destination}_@throws javax.jms.JMSException if resolution failed_@see #setDefaultResponseDestination_@see #setDefaultResponseQueueName_@see #setDefaultResponseTopicName_@see #setDestinationResolver;protected Destination resolveDefaultResponseDestination(Session session) throws JMSException {_		if (this.defaultResponseDestination instanceof Destination) {_			return (Destination) this.defaultResponseDestination__		}_		if (this.defaultResponseDestination instanceof DestinationNameHolder) {_			DestinationNameHolder nameHolder = (DestinationNameHolder) this.defaultResponseDestination__			return getDestinationResolver().resolveDestinationName(session, nameHolder.name, nameHolder.isTopic)__		}_		return null__	};resolve,the,default,response,destination,into,a,jms,link,destination,using,this,accessor,s,link,destination,resolver,in,case,of,a,destination,name,return,the,located,link,destination,throws,javax,jms,jmsexception,if,resolution,failed,see,set,default,response,destination,see,set,default,response,queue,name,see,set,default,response,topic,name,see,set,destination,resolver;protected,destination,resolve,default,response,destination,session,session,throws,jmsexception,if,this,default,response,destination,instanceof,destination,return,destination,this,default,response,destination,if,this,default,response,destination,instanceof,destination,name,holder,destination,name,holder,name,holder,destination,name,holder,this,default,response,destination,return,get,destination,resolver,resolve,destination,name,session,name,holder,name,name,holder,is,topic,return,null
MessageListenerAdapter -> protected Message buildMessage(Session session, Object result) throws JMSException;1328020251;Build a JMS message to be sent as response based on the given result object._@param session the JMS Session to operate on_@param result the content of the message, as returned from the listener method_@return the JMS <code>Message</code> (never <code>null</code>)_@throws JMSException if thrown by JMS API methods_@see #setMessageConverter;protected Message buildMessage(Session session, Object result) throws JMSException {_		MessageConverter converter = getMessageConverter()__		if (converter != null) {_			return converter.toMessage(result, session)__		}_		else {_			if (!(result instanceof Message)) {_				throw new MessageConversionException(_						"No MessageConverter specified - cannot handle message [" + result + "]")__			}_			return (Message) result__		}_	};build,a,jms,message,to,be,sent,as,response,based,on,the,given,result,object,param,session,the,jms,session,to,operate,on,param,result,the,content,of,the,message,as,returned,from,the,listener,method,return,the,jms,code,message,code,never,code,null,code,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,converter;protected,message,build,message,session,session,object,result,throws,jmsexception,message,converter,converter,get,message,converter,if,converter,null,return,converter,to,message,result,session,else,if,result,instanceof,message,throw,new,message,conversion,exception,no,message,converter,specified,cannot,handle,message,result,return,message,result
MessageListenerAdapter -> protected Message buildMessage(Session session, Object result) throws JMSException;1356735495;Build a JMS message to be sent as response based on the given result object._@param session the JMS Session to operate on_@param result the content of the message, as returned from the listener method_@return the JMS {@code Message} (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setMessageConverter;protected Message buildMessage(Session session, Object result) throws JMSException {_		MessageConverter converter = getMessageConverter()__		if (converter != null) {_			return converter.toMessage(result, session)__		}_		else {_			if (!(result instanceof Message)) {_				throw new MessageConversionException(_						"No MessageConverter specified - cannot handle message [" + result + "]")__			}_			return (Message) result__		}_	};build,a,jms,message,to,be,sent,as,response,based,on,the,given,result,object,param,session,the,jms,session,to,operate,on,param,result,the,content,of,the,message,as,returned,from,the,listener,method,return,the,jms,code,message,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,converter;protected,message,build,message,session,session,object,result,throws,jmsexception,message,converter,converter,get,message,converter,if,converter,null,return,converter,to,message,result,session,else,if,result,instanceof,message,throw,new,message,conversion,exception,no,message,converter,specified,cannot,handle,message,result,return,message,result
MessageListenerAdapter -> protected Message buildMessage(Session session, Object result) throws JMSException;1357119239;Build a JMS message to be sent as response based on the given result object._@param session the JMS Session to operate on_@param result the content of the message, as returned from the listener method_@return the JMS {@code Message} (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setMessageConverter;protected Message buildMessage(Session session, Object result) throws JMSException {_		MessageConverter converter = getMessageConverter()__		if (converter != null) {_			return converter.toMessage(result, session)__		}_		else {_			if (!(result instanceof Message)) {_				throw new MessageConversionException(_						"No MessageConverter specified - cannot handle message [" + result + "]")__			}_			return (Message) result__		}_	};build,a,jms,message,to,be,sent,as,response,based,on,the,given,result,object,param,session,the,jms,session,to,operate,on,param,result,the,content,of,the,message,as,returned,from,the,listener,method,return,the,jms,code,message,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,converter;protected,message,build,message,session,session,object,result,throws,jmsexception,message,converter,converter,get,message,converter,if,converter,null,return,converter,to,message,result,session,else,if,result,instanceof,message,throw,new,message,conversion,exception,no,message,converter,specified,cannot,handle,message,result,return,message,result
MessageListenerAdapter -> protected Message buildMessage(Session session, Object result) throws JMSException;1368482696;Build a JMS message to be sent as response based on the given result object._@param session the JMS Session to operate on_@param result the content of the message, as returned from the listener method_@return the JMS {@code Message} (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setMessageConverter;protected Message buildMessage(Session session, Object result) throws JMSException {_		MessageConverter converter = getMessageConverter()__		if (converter != null) {_			return converter.toMessage(result, session)__		}_		else {_			if (!(result instanceof Message)) {_				throw new MessageConversionException(_						"No MessageConverter specified - cannot handle message [" + result + "]")__			}_			return (Message) result__		}_	};build,a,jms,message,to,be,sent,as,response,based,on,the,given,result,object,param,session,the,jms,session,to,operate,on,param,result,the,content,of,the,message,as,returned,from,the,listener,method,return,the,jms,code,message,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,converter;protected,message,build,message,session,session,object,result,throws,jmsexception,message,converter,converter,get,message,converter,if,converter,null,return,converter,to,message,result,session,else,if,result,instanceof,message,throw,new,message,conversion,exception,no,message,converter,specified,cannot,handle,message,result,return,message,result
MessageListenerAdapter -> protected Message buildMessage(Session session, Object result) throws JMSException;1385412762;Build a JMS message to be sent as response based on the given result object._@param session the JMS Session to operate on_@param result the content of the message, as returned from the listener method_@return the JMS {@code Message} (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setMessageConverter;protected Message buildMessage(Session session, Object result) throws JMSException {_		MessageConverter converter = getMessageConverter()__		if (converter != null) {_			return converter.toMessage(result, session)__		}_		else {_			if (!(result instanceof Message)) {_				throw new MessageConversionException(_						"No MessageConverter specified - cannot handle message [" + result + "]")__			}_			return (Message) result__		}_	};build,a,jms,message,to,be,sent,as,response,based,on,the,given,result,object,param,session,the,jms,session,to,operate,on,param,result,the,content,of,the,message,as,returned,from,the,listener,method,return,the,jms,code,message,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,message,converter;protected,message,build,message,session,session,object,result,throws,jmsexception,message,converter,converter,get,message,converter,if,converter,null,return,converter,to,message,result,session,else,if,result,instanceof,message,throw,new,message,conversion,exception,no,message,converter,specified,cannot,handle,message,result,return,message,result
MessageListenerAdapter -> protected void postProcessResponse(Message request, Message response) throws JMSException;1328020251;Post-process the given response message before it will be sent._<p>The default implementation sets the response's correlation id_to the request message's correlation id, if any_ otherwise to the_request message id._@param request the original incoming JMS message_@param response the outgoing JMS message about to be sent_@throws JMSException if thrown by JMS API methods_@see javax.jms.Message#setJMSCorrelationID;protected void postProcessResponse(Message request, Message response) throws JMSException {_		String correlation = request.getJMSCorrelationID()__		if (correlation == null) {_			correlation = request.getJMSMessageID()__		}_		response.setJMSCorrelationID(correlation)__	};post,process,the,given,response,message,before,it,will,be,sent,p,the,default,implementation,sets,the,response,s,correlation,id,to,the,request,message,s,correlation,id,if,any,otherwise,to,the,request,message,id,param,request,the,original,incoming,jms,message,param,response,the,outgoing,jms,message,about,to,be,sent,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,set,jmscorrelation,id;protected,void,post,process,response,message,request,message,response,throws,jmsexception,string,correlation,request,get,jmscorrelation,id,if,correlation,null,correlation,request,get,jmsmessage,id,response,set,jmscorrelation,id,correlation
MessageListenerAdapter -> protected void postProcessResponse(Message request, Message response) throws JMSException;1356735495;Post-process the given response message before it will be sent._<p>The default implementation sets the response's correlation id_to the request message's correlation id, if any_ otherwise to the_request message id._@param request the original incoming JMS message_@param response the outgoing JMS message about to be sent_@throws JMSException if thrown by JMS API methods_@see javax.jms.Message#setJMSCorrelationID;protected void postProcessResponse(Message request, Message response) throws JMSException {_		String correlation = request.getJMSCorrelationID()__		if (correlation == null) {_			correlation = request.getJMSMessageID()__		}_		response.setJMSCorrelationID(correlation)__	};post,process,the,given,response,message,before,it,will,be,sent,p,the,default,implementation,sets,the,response,s,correlation,id,to,the,request,message,s,correlation,id,if,any,otherwise,to,the,request,message,id,param,request,the,original,incoming,jms,message,param,response,the,outgoing,jms,message,about,to,be,sent,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,set,jmscorrelation,id;protected,void,post,process,response,message,request,message,response,throws,jmsexception,string,correlation,request,get,jmscorrelation,id,if,correlation,null,correlation,request,get,jmsmessage,id,response,set,jmscorrelation,id,correlation
MessageListenerAdapter -> protected void postProcessResponse(Message request, Message response) throws JMSException;1357119239;Post-process the given response message before it will be sent._<p>The default implementation sets the response's correlation id_to the request message's correlation id, if any_ otherwise to the_request message id._@param request the original incoming JMS message_@param response the outgoing JMS message about to be sent_@throws JMSException if thrown by JMS API methods_@see javax.jms.Message#setJMSCorrelationID;protected void postProcessResponse(Message request, Message response) throws JMSException {_		String correlation = request.getJMSCorrelationID()__		if (correlation == null) {_			correlation = request.getJMSMessageID()__		}_		response.setJMSCorrelationID(correlation)__	};post,process,the,given,response,message,before,it,will,be,sent,p,the,default,implementation,sets,the,response,s,correlation,id,to,the,request,message,s,correlation,id,if,any,otherwise,to,the,request,message,id,param,request,the,original,incoming,jms,message,param,response,the,outgoing,jms,message,about,to,be,sent,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,set,jmscorrelation,id;protected,void,post,process,response,message,request,message,response,throws,jmsexception,string,correlation,request,get,jmscorrelation,id,if,correlation,null,correlation,request,get,jmsmessage,id,response,set,jmscorrelation,id,correlation
MessageListenerAdapter -> protected void postProcessResponse(Message request, Message response) throws JMSException;1368482696;Post-process the given response message before it will be sent._<p>The default implementation sets the response's correlation id_to the request message's correlation id, if any_ otherwise to the_request message id._@param request the original incoming JMS message_@param response the outgoing JMS message about to be sent_@throws JMSException if thrown by JMS API methods_@see javax.jms.Message#setJMSCorrelationID;protected void postProcessResponse(Message request, Message response) throws JMSException {_		String correlation = request.getJMSCorrelationID()__		if (correlation == null) {_			correlation = request.getJMSMessageID()__		}_		response.setJMSCorrelationID(correlation)__	};post,process,the,given,response,message,before,it,will,be,sent,p,the,default,implementation,sets,the,response,s,correlation,id,to,the,request,message,s,correlation,id,if,any,otherwise,to,the,request,message,id,param,request,the,original,incoming,jms,message,param,response,the,outgoing,jms,message,about,to,be,sent,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,set,jmscorrelation,id;protected,void,post,process,response,message,request,message,response,throws,jmsexception,string,correlation,request,get,jmscorrelation,id,if,correlation,null,correlation,request,get,jmsmessage,id,response,set,jmscorrelation,id,correlation
MessageListenerAdapter -> protected void postProcessResponse(Message request, Message response) throws JMSException;1385412762;Post-process the given response message before it will be sent._<p>The default implementation sets the response's correlation id_to the request message's correlation id, if any_ otherwise to the_request message id._@param request the original incoming JMS message_@param response the outgoing JMS message about to be sent_@throws JMSException if thrown by JMS API methods_@see javax.jms.Message#setJMSCorrelationID;protected void postProcessResponse(Message request, Message response) throws JMSException {_		String correlation = request.getJMSCorrelationID()__		if (correlation == null) {_			correlation = request.getJMSMessageID()__		}_		response.setJMSCorrelationID(correlation)__	};post,process,the,given,response,message,before,it,will,be,sent,p,the,default,implementation,sets,the,response,s,correlation,id,to,the,request,message,s,correlation,id,if,any,otherwise,to,the,request,message,id,param,request,the,original,incoming,jms,message,param,response,the,outgoing,jms,message,about,to,be,sent,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,message,set,jmscorrelation,id;protected,void,post,process,response,message,request,message,response,throws,jmsexception,string,correlation,request,get,jmscorrelation,id,if,correlation,null,correlation,request,get,jmsmessage,id,response,set,jmscorrelation,id,correlation
MessageListenerAdapter -> protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException;1328020251;Invoke the specified listener method._@param methodName the name of the listener method_@param arguments the message arguments to be passed in_@return the result returned from the listener method_@throws JMSException if thrown by JMS API methods_@see #getListenerMethodName_@see #buildListenerArguments;protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException {_		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(getDelegate())__			methodInvoker.setTargetMethod(methodName)__			methodInvoker.setArguments(arguments)__			methodInvoker.prepare()__			return methodInvoker.invoke()__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof JMSException) {_				throw (JMSException) targetEx__			}_			else {_				throw new ListenerExecutionFailedException(_						"Listener method '" + methodName + "' threw exception", targetEx)__			}_		}_		catch (Throwable ex) {_			throw new ListenerExecutionFailedException("Failed to invoke target method '" + methodName +_					"' with arguments " + ObjectUtils.nullSafeToString(arguments), ex)__		}_	};invoke,the,specified,listener,method,param,method,name,the,name,of,the,listener,method,param,arguments,the,message,arguments,to,be,passed,in,return,the,result,returned,from,the,listener,method,throws,jmsexception,if,thrown,by,jms,api,methods,see,get,listener,method,name,see,build,listener,arguments;protected,object,invoke,listener,method,string,method,name,object,arguments,throws,jmsexception,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,get,delegate,method,invoker,set,target,method,method,name,method,invoker,set,arguments,arguments,method,invoker,prepare,return,method,invoker,invoke,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,jmsexception,throw,jmsexception,target,ex,else,throw,new,listener,execution,failed,exception,listener,method,method,name,threw,exception,target,ex,catch,throwable,ex,throw,new,listener,execution,failed,exception,failed,to,invoke,target,method,method,name,with,arguments,object,utils,null,safe,to,string,arguments,ex
MessageListenerAdapter -> protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException;1356735495;Invoke the specified listener method._@param methodName the name of the listener method_@param arguments the message arguments to be passed in_@return the result returned from the listener method_@throws JMSException if thrown by JMS API methods_@see #getListenerMethodName_@see #buildListenerArguments;protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException {_		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(getDelegate())__			methodInvoker.setTargetMethod(methodName)__			methodInvoker.setArguments(arguments)__			methodInvoker.prepare()__			return methodInvoker.invoke()__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof JMSException) {_				throw (JMSException) targetEx__			}_			else {_				throw new ListenerExecutionFailedException(_						"Listener method '" + methodName + "' threw exception", targetEx)__			}_		}_		catch (Throwable ex) {_			throw new ListenerExecutionFailedException("Failed to invoke target method '" + methodName +_					"' with arguments " + ObjectUtils.nullSafeToString(arguments), ex)__		}_	};invoke,the,specified,listener,method,param,method,name,the,name,of,the,listener,method,param,arguments,the,message,arguments,to,be,passed,in,return,the,result,returned,from,the,listener,method,throws,jmsexception,if,thrown,by,jms,api,methods,see,get,listener,method,name,see,build,listener,arguments;protected,object,invoke,listener,method,string,method,name,object,arguments,throws,jmsexception,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,get,delegate,method,invoker,set,target,method,method,name,method,invoker,set,arguments,arguments,method,invoker,prepare,return,method,invoker,invoke,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,jmsexception,throw,jmsexception,target,ex,else,throw,new,listener,execution,failed,exception,listener,method,method,name,threw,exception,target,ex,catch,throwable,ex,throw,new,listener,execution,failed,exception,failed,to,invoke,target,method,method,name,with,arguments,object,utils,null,safe,to,string,arguments,ex
MessageListenerAdapter -> protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException;1357119239;Invoke the specified listener method._@param methodName the name of the listener method_@param arguments the message arguments to be passed in_@return the result returned from the listener method_@throws JMSException if thrown by JMS API methods_@see #getListenerMethodName_@see #buildListenerArguments;protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException {_		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(getDelegate())__			methodInvoker.setTargetMethod(methodName)__			methodInvoker.setArguments(arguments)__			methodInvoker.prepare()__			return methodInvoker.invoke()__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof JMSException) {_				throw (JMSException) targetEx__			}_			else {_				throw new ListenerExecutionFailedException(_						"Listener method '" + methodName + "' threw exception", targetEx)__			}_		}_		catch (Throwable ex) {_			throw new ListenerExecutionFailedException("Failed to invoke target method '" + methodName +_					"' with arguments " + ObjectUtils.nullSafeToString(arguments), ex)__		}_	};invoke,the,specified,listener,method,param,method,name,the,name,of,the,listener,method,param,arguments,the,message,arguments,to,be,passed,in,return,the,result,returned,from,the,listener,method,throws,jmsexception,if,thrown,by,jms,api,methods,see,get,listener,method,name,see,build,listener,arguments;protected,object,invoke,listener,method,string,method,name,object,arguments,throws,jmsexception,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,get,delegate,method,invoker,set,target,method,method,name,method,invoker,set,arguments,arguments,method,invoker,prepare,return,method,invoker,invoke,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,jmsexception,throw,jmsexception,target,ex,else,throw,new,listener,execution,failed,exception,listener,method,method,name,threw,exception,target,ex,catch,throwable,ex,throw,new,listener,execution,failed,exception,failed,to,invoke,target,method,method,name,with,arguments,object,utils,null,safe,to,string,arguments,ex
MessageListenerAdapter -> protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException;1368482696;Invoke the specified listener method._@param methodName the name of the listener method_@param arguments the message arguments to be passed in_@return the result returned from the listener method_@throws JMSException if thrown by JMS API methods_@see #getListenerMethodName_@see #buildListenerArguments;protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException {_		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(getDelegate())__			methodInvoker.setTargetMethod(methodName)__			methodInvoker.setArguments(arguments)__			methodInvoker.prepare()__			return methodInvoker.invoke()__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof JMSException) {_				throw (JMSException) targetEx__			}_			else {_				throw new ListenerExecutionFailedException(_						"Listener method '" + methodName + "' threw exception", targetEx)__			}_		}_		catch (Throwable ex) {_			throw new ListenerExecutionFailedException("Failed to invoke target method '" + methodName +_					"' with arguments " + ObjectUtils.nullSafeToString(arguments), ex)__		}_	};invoke,the,specified,listener,method,param,method,name,the,name,of,the,listener,method,param,arguments,the,message,arguments,to,be,passed,in,return,the,result,returned,from,the,listener,method,throws,jmsexception,if,thrown,by,jms,api,methods,see,get,listener,method,name,see,build,listener,arguments;protected,object,invoke,listener,method,string,method,name,object,arguments,throws,jmsexception,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,get,delegate,method,invoker,set,target,method,method,name,method,invoker,set,arguments,arguments,method,invoker,prepare,return,method,invoker,invoke,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,jmsexception,throw,jmsexception,target,ex,else,throw,new,listener,execution,failed,exception,listener,method,method,name,threw,exception,target,ex,catch,throwable,ex,throw,new,listener,execution,failed,exception,failed,to,invoke,target,method,method,name,with,arguments,object,utils,null,safe,to,string,arguments,ex
MessageListenerAdapter -> protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException;1385412762;Invoke the specified listener method._@param methodName the name of the listener method_@param arguments the message arguments to be passed in_@return the result returned from the listener method_@throws JMSException if thrown by JMS API methods_@see #getListenerMethodName_@see #buildListenerArguments;protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException {_		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(getDelegate())__			methodInvoker.setTargetMethod(methodName)__			methodInvoker.setArguments(arguments)__			methodInvoker.prepare()__			return methodInvoker.invoke()__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof JMSException) {_				throw (JMSException) targetEx__			}_			else {_				throw new ListenerExecutionFailedException(_						"Listener method '" + methodName + "' threw exception", targetEx)__			}_		}_		catch (Throwable ex) {_			throw new ListenerExecutionFailedException("Failed to invoke target method '" + methodName +_					"' with arguments " + ObjectUtils.nullSafeToString(arguments), ex)__		}_	};invoke,the,specified,listener,method,param,method,name,the,name,of,the,listener,method,param,arguments,the,message,arguments,to,be,passed,in,return,the,result,returned,from,the,listener,method,throws,jmsexception,if,thrown,by,jms,api,methods,see,get,listener,method,name,see,build,listener,arguments;protected,object,invoke,listener,method,string,method,name,object,arguments,throws,jmsexception,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,get,delegate,method,invoker,set,target,method,method,name,method,invoker,set,arguments,arguments,method,invoker,prepare,return,method,invoker,invoke,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,jmsexception,throw,jmsexception,target,ex,else,throw,new,listener,execution,failed,exception,listener,method,method,name,threw,exception,target,ex,catch,throwable,ex,throw,new,listener,execution,failed,exception,failed,to,invoke,target,method,method,name,with,arguments,object,utils,null,safe,to,string,arguments,ex
MessageListenerAdapter -> protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException;1397718966;Invoke the specified listener method._@param methodName the name of the listener method_@param arguments the message arguments to be passed in_@return the result returned from the listener method_@throws JMSException if thrown by JMS API methods_@see #getListenerMethodName_@see #buildListenerArguments;protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException {_		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(getDelegate())__			methodInvoker.setTargetMethod(methodName)__			methodInvoker.setArguments(arguments)__			methodInvoker.prepare()__			return methodInvoker.invoke()__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof JMSException) {_				throw (JMSException) targetEx__			}_			else {_				throw new ListenerExecutionFailedException(_						"Listener method '" + methodName + "' threw exception", targetEx)__			}_		}_		catch (Throwable ex) {_			throw new ListenerExecutionFailedException("Failed to invoke target method '" + methodName +_					"' with arguments " + ObjectUtils.nullSafeToString(arguments), ex)__		}_	};invoke,the,specified,listener,method,param,method,name,the,name,of,the,listener,method,param,arguments,the,message,arguments,to,be,passed,in,return,the,result,returned,from,the,listener,method,throws,jmsexception,if,thrown,by,jms,api,methods,see,get,listener,method,name,see,build,listener,arguments;protected,object,invoke,listener,method,string,method,name,object,arguments,throws,jmsexception,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,get,delegate,method,invoker,set,target,method,method,name,method,invoker,set,arguments,arguments,method,invoker,prepare,return,method,invoker,invoke,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,jmsexception,throw,jmsexception,target,ex,else,throw,new,listener,execution,failed,exception,listener,method,method,name,threw,exception,target,ex,catch,throwable,ex,throw,new,listener,execution,failed,exception,failed,to,invoke,target,method,method,name,with,arguments,object,utils,null,safe,to,string,arguments,ex
MessageListenerAdapter -> protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException;1404937154;Invoke the specified listener method._@param methodName the name of the listener method_@param arguments the message arguments to be passed in_@return the result returned from the listener method_@throws JMSException if thrown by JMS API methods_@see #getListenerMethodName_@see #buildListenerArguments;protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException {_		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(getDelegate())__			methodInvoker.setTargetMethod(methodName)__			methodInvoker.setArguments(arguments)__			methodInvoker.prepare()__			return methodInvoker.invoke()__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof JMSException) {_				throw (JMSException) targetEx__			}_			else {_				throw new ListenerExecutionFailedException(_						"Listener method '" + methodName + "' threw exception", targetEx)__			}_		}_		catch (Throwable ex) {_			throw new ListenerExecutionFailedException("Failed to invoke target method '" + methodName +_					"' with arguments " + ObjectUtils.nullSafeToString(arguments), ex)__		}_	};invoke,the,specified,listener,method,param,method,name,the,name,of,the,listener,method,param,arguments,the,message,arguments,to,be,passed,in,return,the,result,returned,from,the,listener,method,throws,jmsexception,if,thrown,by,jms,api,methods,see,get,listener,method,name,see,build,listener,arguments;protected,object,invoke,listener,method,string,method,name,object,arguments,throws,jmsexception,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,get,delegate,method,invoker,set,target,method,method,name,method,invoker,set,arguments,arguments,method,invoker,prepare,return,method,invoker,invoke,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,jmsexception,throw,jmsexception,target,ex,else,throw,new,listener,execution,failed,exception,listener,method,method,name,threw,exception,target,ex,catch,throwable,ex,throw,new,listener,execution,failed,exception,failed,to,invoke,target,method,method,name,with,arguments,object,utils,null,safe,to,string,arguments,ex
MessageListenerAdapter -> protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException;1482442567;Invoke the specified listener method._@param methodName the name of the listener method_@param arguments the message arguments to be passed in_@return the result returned from the listener method_@throws JMSException if thrown by JMS API methods_@see #getListenerMethodName_@see #buildListenerArguments;protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException {_		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(getDelegate())__			methodInvoker.setTargetMethod(methodName)__			methodInvoker.setArguments(arguments)__			methodInvoker.prepare()__			return methodInvoker.invoke()__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof JMSException) {_				throw (JMSException) targetEx__			}_			else {_				throw new ListenerExecutionFailedException(_						"Listener method '" + methodName + "' threw exception", targetEx)__			}_		}_		catch (Throwable ex) {_			throw new ListenerExecutionFailedException("Failed to invoke target method '" + methodName +_					"' with arguments " + ObjectUtils.nullSafeToString(arguments), ex)__		}_	};invoke,the,specified,listener,method,param,method,name,the,name,of,the,listener,method,param,arguments,the,message,arguments,to,be,passed,in,return,the,result,returned,from,the,listener,method,throws,jmsexception,if,thrown,by,jms,api,methods,see,get,listener,method,name,see,build,listener,arguments;protected,object,invoke,listener,method,string,method,name,object,arguments,throws,jmsexception,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,get,delegate,method,invoker,set,target,method,method,name,method,invoker,set,arguments,arguments,method,invoker,prepare,return,method,invoker,invoke,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,jmsexception,throw,jmsexception,target,ex,else,throw,new,listener,execution,failed,exception,listener,method,method,name,threw,exception,target,ex,catch,throwable,ex,throw,new,listener,execution,failed,exception,failed,to,invoke,target,method,method,name,with,arguments,object,utils,null,safe,to,string,arguments,ex
MessageListenerAdapter -> protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException;1496259743;Invoke the specified listener method._@param methodName the name of the listener method_@param arguments the message arguments to be passed in_@return the result returned from the listener method_@throws JMSException if thrown by JMS API methods_@see #getListenerMethodName_@see #buildListenerArguments;protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException {_		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(getDelegate())__			methodInvoker.setTargetMethod(methodName)__			methodInvoker.setArguments(arguments)__			methodInvoker.prepare()__			return methodInvoker.invoke()__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof JMSException) {_				throw (JMSException) targetEx__			}_			else {_				throw new ListenerExecutionFailedException(_						"Listener method '" + methodName + "' threw exception", targetEx)__			}_		}_		catch (Throwable ex) {_			throw new ListenerExecutionFailedException("Failed to invoke target method '" + methodName +_					"' with arguments " + ObjectUtils.nullSafeToString(arguments), ex)__		}_	};invoke,the,specified,listener,method,param,method,name,the,name,of,the,listener,method,param,arguments,the,message,arguments,to,be,passed,in,return,the,result,returned,from,the,listener,method,throws,jmsexception,if,thrown,by,jms,api,methods,see,get,listener,method,name,see,build,listener,arguments;protected,object,invoke,listener,method,string,method,name,object,arguments,throws,jmsexception,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,get,delegate,method,invoker,set,target,method,method,name,method,invoker,set,arguments,arguments,method,invoker,prepare,return,method,invoker,invoke,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,jmsexception,throw,jmsexception,target,ex,else,throw,new,listener,execution,failed,exception,listener,method,method,name,threw,exception,target,ex,catch,throwable,ex,throw,new,listener,execution,failed,exception,failed,to,invoke,target,method,method,name,with,arguments,object,utils,null,safe,to,string,arguments,ex
MessageListenerAdapter -> protected void sendResponse(Session session, Destination destination, Message response) throws JMSException;1328020251;Send the given response message to the given destination._@param response the JMS message to send_@param destination the JMS destination to send to_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods_@see #postProcessProducer_@see javax.jms.Session#createProducer_@see javax.jms.MessageProducer#send;protected void sendResponse(Session session, Destination destination, Message response) throws JMSException {_		MessageProducer producer = session.createProducer(destination)__		try {_			postProcessProducer(producer, response)__			producer.send(response)__		}_		finally {_			JmsUtils.closeMessageProducer(producer)__		}_	};send,the,given,response,message,to,the,given,destination,param,response,the,jms,message,to,send,param,destination,the,jms,destination,to,send,to,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods,see,post,process,producer,see,javax,jms,session,create,producer,see,javax,jms,message,producer,send;protected,void,send,response,session,session,destination,destination,message,response,throws,jmsexception,message,producer,producer,session,create,producer,destination,try,post,process,producer,producer,response,producer,send,response,finally,jms,utils,close,message,producer,producer
MessageListenerAdapter -> protected void sendResponse(Session session, Destination destination, Message response) throws JMSException;1356735495;Send the given response message to the given destination._@param response the JMS message to send_@param destination the JMS destination to send to_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods_@see #postProcessProducer_@see javax.jms.Session#createProducer_@see javax.jms.MessageProducer#send;protected void sendResponse(Session session, Destination destination, Message response) throws JMSException {_		MessageProducer producer = session.createProducer(destination)__		try {_			postProcessProducer(producer, response)__			producer.send(response)__		}_		finally {_			JmsUtils.closeMessageProducer(producer)__		}_	};send,the,given,response,message,to,the,given,destination,param,response,the,jms,message,to,send,param,destination,the,jms,destination,to,send,to,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods,see,post,process,producer,see,javax,jms,session,create,producer,see,javax,jms,message,producer,send;protected,void,send,response,session,session,destination,destination,message,response,throws,jmsexception,message,producer,producer,session,create,producer,destination,try,post,process,producer,producer,response,producer,send,response,finally,jms,utils,close,message,producer,producer
MessageListenerAdapter -> protected void sendResponse(Session session, Destination destination, Message response) throws JMSException;1357119239;Send the given response message to the given destination._@param response the JMS message to send_@param destination the JMS destination to send to_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods_@see #postProcessProducer_@see javax.jms.Session#createProducer_@see javax.jms.MessageProducer#send;protected void sendResponse(Session session, Destination destination, Message response) throws JMSException {_		MessageProducer producer = session.createProducer(destination)__		try {_			postProcessProducer(producer, response)__			producer.send(response)__		}_		finally {_			JmsUtils.closeMessageProducer(producer)__		}_	};send,the,given,response,message,to,the,given,destination,param,response,the,jms,message,to,send,param,destination,the,jms,destination,to,send,to,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods,see,post,process,producer,see,javax,jms,session,create,producer,see,javax,jms,message,producer,send;protected,void,send,response,session,session,destination,destination,message,response,throws,jmsexception,message,producer,producer,session,create,producer,destination,try,post,process,producer,producer,response,producer,send,response,finally,jms,utils,close,message,producer,producer
MessageListenerAdapter -> protected void sendResponse(Session session, Destination destination, Message response) throws JMSException;1368482696;Send the given response message to the given destination._@param response the JMS message to send_@param destination the JMS destination to send to_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods_@see #postProcessProducer_@see javax.jms.Session#createProducer_@see javax.jms.MessageProducer#send;protected void sendResponse(Session session, Destination destination, Message response) throws JMSException {_		MessageProducer producer = session.createProducer(destination)__		try {_			postProcessProducer(producer, response)__			producer.send(response)__		}_		finally {_			JmsUtils.closeMessageProducer(producer)__		}_	};send,the,given,response,message,to,the,given,destination,param,response,the,jms,message,to,send,param,destination,the,jms,destination,to,send,to,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods,see,post,process,producer,see,javax,jms,session,create,producer,see,javax,jms,message,producer,send;protected,void,send,response,session,session,destination,destination,message,response,throws,jmsexception,message,producer,producer,session,create,producer,destination,try,post,process,producer,producer,response,producer,send,response,finally,jms,utils,close,message,producer,producer
MessageListenerAdapter -> protected void sendResponse(Session session, Destination destination, Message response) throws JMSException;1385412762;Send the given response message to the given destination._@param response the JMS message to send_@param destination the JMS destination to send to_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods_@see #postProcessProducer_@see javax.jms.Session#createProducer_@see javax.jms.MessageProducer#send;protected void sendResponse(Session session, Destination destination, Message response) throws JMSException {_		MessageProducer producer = session.createProducer(destination)__		try {_			postProcessProducer(producer, response)__			producer.send(response)__		}_		finally {_			JmsUtils.closeMessageProducer(producer)__		}_	};send,the,given,response,message,to,the,given,destination,param,response,the,jms,message,to,send,param,destination,the,jms,destination,to,send,to,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods,see,post,process,producer,see,javax,jms,session,create,producer,see,javax,jms,message,producer,send;protected,void,send,response,session,session,destination,destination,message,response,throws,jmsexception,message,producer,producer,session,create,producer,destination,try,post,process,producer,producer,response,producer,send,response,finally,jms,utils,close,message,producer,producer
MessageListenerAdapter -> protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException;1328020251;Determine the name of the listener method that is supposed to_handle the given message._<p>The default implementation simply returns the configured_default listener method, if any._@param originalMessage the JMS request message_@param extractedMessage the converted JMS request message,_to be passed into the listener method as argument_@return the name of the listener method (never <code>null</code>)_@throws JMSException if thrown by JMS API methods_@see #setDefaultListenerMethod;protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException {_		return getDefaultListenerMethod()__	};determine,the,name,of,the,listener,method,that,is,supposed,to,handle,the,given,message,p,the,default,implementation,simply,returns,the,configured,default,listener,method,if,any,param,original,message,the,jms,request,message,param,extracted,message,the,converted,jms,request,message,to,be,passed,into,the,listener,method,as,argument,return,the,name,of,the,listener,method,never,code,null,code,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,default,listener,method;protected,string,get,listener,method,name,message,original,message,object,extracted,message,throws,jmsexception,return,get,default,listener,method
MessageListenerAdapter -> protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException;1356735495;Determine the name of the listener method that is supposed to_handle the given message._<p>The default implementation simply returns the configured_default listener method, if any._@param originalMessage the JMS request message_@param extractedMessage the converted JMS request message,_to be passed into the listener method as argument_@return the name of the listener method (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setDefaultListenerMethod;protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException {_		return getDefaultListenerMethod()__	};determine,the,name,of,the,listener,method,that,is,supposed,to,handle,the,given,message,p,the,default,implementation,simply,returns,the,configured,default,listener,method,if,any,param,original,message,the,jms,request,message,param,extracted,message,the,converted,jms,request,message,to,be,passed,into,the,listener,method,as,argument,return,the,name,of,the,listener,method,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,default,listener,method;protected,string,get,listener,method,name,message,original,message,object,extracted,message,throws,jmsexception,return,get,default,listener,method
MessageListenerAdapter -> protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException;1357119239;Determine the name of the listener method that is supposed to_handle the given message._<p>The default implementation simply returns the configured_default listener method, if any._@param originalMessage the JMS request message_@param extractedMessage the converted JMS request message,_to be passed into the listener method as argument_@return the name of the listener method (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setDefaultListenerMethod;protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException {_		return getDefaultListenerMethod()__	};determine,the,name,of,the,listener,method,that,is,supposed,to,handle,the,given,message,p,the,default,implementation,simply,returns,the,configured,default,listener,method,if,any,param,original,message,the,jms,request,message,param,extracted,message,the,converted,jms,request,message,to,be,passed,into,the,listener,method,as,argument,return,the,name,of,the,listener,method,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,default,listener,method;protected,string,get,listener,method,name,message,original,message,object,extracted,message,throws,jmsexception,return,get,default,listener,method
MessageListenerAdapter -> protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException;1368482696;Determine the name of the listener method that is supposed to_handle the given message._<p>The default implementation simply returns the configured_default listener method, if any._@param originalMessage the JMS request message_@param extractedMessage the converted JMS request message,_to be passed into the listener method as argument_@return the name of the listener method (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setDefaultListenerMethod;protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException {_		return getDefaultListenerMethod()__	};determine,the,name,of,the,listener,method,that,is,supposed,to,handle,the,given,message,p,the,default,implementation,simply,returns,the,configured,default,listener,method,if,any,param,original,message,the,jms,request,message,param,extracted,message,the,converted,jms,request,message,to,be,passed,into,the,listener,method,as,argument,return,the,name,of,the,listener,method,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,default,listener,method;protected,string,get,listener,method,name,message,original,message,object,extracted,message,throws,jmsexception,return,get,default,listener,method
MessageListenerAdapter -> protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException;1385412762;Determine the name of the listener method that is supposed to_handle the given message._<p>The default implementation simply returns the configured_default listener method, if any._@param originalMessage the JMS request message_@param extractedMessage the converted JMS request message,_to be passed into the listener method as argument_@return the name of the listener method (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setDefaultListenerMethod;protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException {_		return getDefaultListenerMethod()__	};determine,the,name,of,the,listener,method,that,is,supposed,to,handle,the,given,message,p,the,default,implementation,simply,returns,the,configured,default,listener,method,if,any,param,original,message,the,jms,request,message,param,extracted,message,the,converted,jms,request,message,to,be,passed,into,the,listener,method,as,argument,return,the,name,of,the,listener,method,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,default,listener,method;protected,string,get,listener,method,name,message,original,message,object,extracted,message,throws,jmsexception,return,get,default,listener,method
MessageListenerAdapter -> protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException;1397718966;Determine the name of the listener method that is supposed to_handle the given message._<p>The default implementation simply returns the configured_default listener method, if any._@param originalMessage the JMS request message_@param extractedMessage the converted JMS request message,_to be passed into the listener method as argument_@return the name of the listener method (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setDefaultListenerMethod;protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException {_		return getDefaultListenerMethod()__	};determine,the,name,of,the,listener,method,that,is,supposed,to,handle,the,given,message,p,the,default,implementation,simply,returns,the,configured,default,listener,method,if,any,param,original,message,the,jms,request,message,param,extracted,message,the,converted,jms,request,message,to,be,passed,into,the,listener,method,as,argument,return,the,name,of,the,listener,method,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,default,listener,method;protected,string,get,listener,method,name,message,original,message,object,extracted,message,throws,jmsexception,return,get,default,listener,method
MessageListenerAdapter -> protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException;1404937154;Determine the name of the listener method that is supposed to_handle the given message._<p>The default implementation simply returns the configured_default listener method, if any._@param originalMessage the JMS request message_@param extractedMessage the converted JMS request message,_to be passed into the listener method as argument_@return the name of the listener method (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setDefaultListenerMethod;protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException {_		return getDefaultListenerMethod()__	};determine,the,name,of,the,listener,method,that,is,supposed,to,handle,the,given,message,p,the,default,implementation,simply,returns,the,configured,default,listener,method,if,any,param,original,message,the,jms,request,message,param,extracted,message,the,converted,jms,request,message,to,be,passed,into,the,listener,method,as,argument,return,the,name,of,the,listener,method,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,default,listener,method;protected,string,get,listener,method,name,message,original,message,object,extracted,message,throws,jmsexception,return,get,default,listener,method
MessageListenerAdapter -> protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException;1482442567;Determine the name of the listener method that is supposed to_handle the given message._<p>The default implementation simply returns the configured_default listener method, if any._@param originalMessage the JMS request message_@param extractedMessage the converted JMS request message,_to be passed into the listener method as argument_@return the name of the listener method (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setDefaultListenerMethod;protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException {_		return getDefaultListenerMethod()__	};determine,the,name,of,the,listener,method,that,is,supposed,to,handle,the,given,message,p,the,default,implementation,simply,returns,the,configured,default,listener,method,if,any,param,original,message,the,jms,request,message,param,extracted,message,the,converted,jms,request,message,to,be,passed,into,the,listener,method,as,argument,return,the,name,of,the,listener,method,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,default,listener,method;protected,string,get,listener,method,name,message,original,message,object,extracted,message,throws,jmsexception,return,get,default,listener,method
MessageListenerAdapter -> protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException;1496259743;Determine the name of the listener method that is supposed to_handle the given message._<p>The default implementation simply returns the configured_default listener method, if any._@param originalMessage the JMS request message_@param extractedMessage the converted JMS request message,_to be passed into the listener method as argument_@return the name of the listener method (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setDefaultListenerMethod;protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException {_		return getDefaultListenerMethod()__	};determine,the,name,of,the,listener,method,that,is,supposed,to,handle,the,given,message,p,the,default,implementation,simply,returns,the,configured,default,listener,method,if,any,param,original,message,the,jms,request,message,param,extracted,message,the,converted,jms,request,message,to,be,passed,into,the,listener,method,as,argument,return,the,name,of,the,listener,method,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,default,listener,method;protected,string,get,listener,method,name,message,original,message,object,extracted,message,throws,jmsexception,return,get,default,listener,method
MessageListenerAdapter -> protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException;1502974979;Determine the name of the listener method that is supposed to_handle the given message._<p>The default implementation simply returns the configured_default listener method, if any._@param originalMessage the JMS request message_@param extractedMessage the converted JMS request message,_to be passed into the listener method as argument_@return the name of the listener method (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setDefaultListenerMethod;protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException {_		return getDefaultListenerMethod()__	};determine,the,name,of,the,listener,method,that,is,supposed,to,handle,the,given,message,p,the,default,implementation,simply,returns,the,configured,default,listener,method,if,any,param,original,message,the,jms,request,message,param,extracted,message,the,converted,jms,request,message,to,be,passed,into,the,listener,method,as,argument,return,the,name,of,the,listener,method,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,default,listener,method;protected,string,get,listener,method,name,message,original,message,object,extracted,message,throws,jmsexception,return,get,default,listener,method
MessageListenerAdapter -> protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException;1503008146;Determine the name of the listener method that is supposed to_handle the given message._<p>The default implementation simply returns the configured_default listener method, if any._@param originalMessage the JMS request message_@param extractedMessage the converted JMS request message,_to be passed into the listener method as argument_@return the name of the listener method (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setDefaultListenerMethod;protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException {_		return getDefaultListenerMethod()__	};determine,the,name,of,the,listener,method,that,is,supposed,to,handle,the,given,message,p,the,default,implementation,simply,returns,the,configured,default,listener,method,if,any,param,original,message,the,jms,request,message,param,extracted,message,the,converted,jms,request,message,to,be,passed,into,the,listener,method,as,argument,return,the,name,of,the,listener,method,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,default,listener,method;protected,string,get,listener,method,name,message,original,message,object,extracted,message,throws,jmsexception,return,get,default,listener,method
MessageListenerAdapter -> protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException;1542613849;Determine the name of the listener method that is supposed to_handle the given message._<p>The default implementation simply returns the configured_default listener method, if any._@param originalMessage the JMS request message_@param extractedMessage the converted JMS request message,_to be passed into the listener method as argument_@return the name of the listener method (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setDefaultListenerMethod;protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException {_		return getDefaultListenerMethod()__	};determine,the,name,of,the,listener,method,that,is,supposed,to,handle,the,given,message,p,the,default,implementation,simply,returns,the,configured,default,listener,method,if,any,param,original,message,the,jms,request,message,param,extracted,message,the,converted,jms,request,message,to,be,passed,into,the,listener,method,as,argument,return,the,name,of,the,listener,method,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,default,listener,method;protected,string,get,listener,method,name,message,original,message,object,extracted,message,throws,jmsexception,return,get,default,listener,method
MessageListenerAdapter -> public void setDefaultListenerMethod(String defaultListenerMethod);1328020251;Specify the name of the default listener method to delegate to,_for the case where no specific listener method has been determined._Out-of-the-box value is {@link #ORIGINAL_DEFAULT_LISTENER_METHOD "handleMessage"}._@see #getListenerMethodName;public void setDefaultListenerMethod(String defaultListenerMethod) {_		this.defaultListenerMethod = defaultListenerMethod__	};specify,the,name,of,the,default,listener,method,to,delegate,to,for,the,case,where,no,specific,listener,method,has,been,determined,out,of,the,box,value,is,link,handle,message,see,get,listener,method,name;public,void,set,default,listener,method,string,default,listener,method,this,default,listener,method,default,listener,method
MessageListenerAdapter -> public void setDefaultListenerMethod(String defaultListenerMethod);1356735495;Specify the name of the default listener method to delegate to,_for the case where no specific listener method has been determined._Out-of-the-box value is {@link #ORIGINAL_DEFAULT_LISTENER_METHOD "handleMessage"}._@see #getListenerMethodName;public void setDefaultListenerMethod(String defaultListenerMethod) {_		this.defaultListenerMethod = defaultListenerMethod__	};specify,the,name,of,the,default,listener,method,to,delegate,to,for,the,case,where,no,specific,listener,method,has,been,determined,out,of,the,box,value,is,link,handle,message,see,get,listener,method,name;public,void,set,default,listener,method,string,default,listener,method,this,default,listener,method,default,listener,method
MessageListenerAdapter -> public void setDefaultListenerMethod(String defaultListenerMethod);1357119239;Specify the name of the default listener method to delegate to,_for the case where no specific listener method has been determined._Out-of-the-box value is {@link #ORIGINAL_DEFAULT_LISTENER_METHOD "handleMessage"}._@see #getListenerMethodName;public void setDefaultListenerMethod(String defaultListenerMethod) {_		this.defaultListenerMethod = defaultListenerMethod__	};specify,the,name,of,the,default,listener,method,to,delegate,to,for,the,case,where,no,specific,listener,method,has,been,determined,out,of,the,box,value,is,link,handle,message,see,get,listener,method,name;public,void,set,default,listener,method,string,default,listener,method,this,default,listener,method,default,listener,method
MessageListenerAdapter -> public void setDefaultListenerMethod(String defaultListenerMethod);1368482696;Specify the name of the default listener method to delegate to,_for the case where no specific listener method has been determined._Out-of-the-box value is {@link #ORIGINAL_DEFAULT_LISTENER_METHOD "handleMessage"}._@see #getListenerMethodName;public void setDefaultListenerMethod(String defaultListenerMethod) {_		this.defaultListenerMethod = defaultListenerMethod__	};specify,the,name,of,the,default,listener,method,to,delegate,to,for,the,case,where,no,specific,listener,method,has,been,determined,out,of,the,box,value,is,link,handle,message,see,get,listener,method,name;public,void,set,default,listener,method,string,default,listener,method,this,default,listener,method,default,listener,method
MessageListenerAdapter -> public void setDefaultListenerMethod(String defaultListenerMethod);1385412762;Specify the name of the default listener method to delegate to,_for the case where no specific listener method has been determined._Out-of-the-box value is {@link #ORIGINAL_DEFAULT_LISTENER_METHOD "handleMessage"}._@see #getListenerMethodName;public void setDefaultListenerMethod(String defaultListenerMethod) {_		this.defaultListenerMethod = defaultListenerMethod__	};specify,the,name,of,the,default,listener,method,to,delegate,to,for,the,case,where,no,specific,listener,method,has,been,determined,out,of,the,box,value,is,link,handle,message,see,get,listener,method,name;public,void,set,default,listener,method,string,default,listener,method,this,default,listener,method,default,listener,method
MessageListenerAdapter -> public void setDefaultListenerMethod(String defaultListenerMethod);1397718966;Specify the name of the default listener method to delegate to,_for the case where no specific listener method has been determined._Out-of-the-box value is {@link #ORIGINAL_DEFAULT_LISTENER_METHOD "handleMessage"}._@see #getListenerMethodName;public void setDefaultListenerMethod(String defaultListenerMethod) {_		this.defaultListenerMethod = defaultListenerMethod__	};specify,the,name,of,the,default,listener,method,to,delegate,to,for,the,case,where,no,specific,listener,method,has,been,determined,out,of,the,box,value,is,link,handle,message,see,get,listener,method,name;public,void,set,default,listener,method,string,default,listener,method,this,default,listener,method,default,listener,method
MessageListenerAdapter -> public void setDefaultListenerMethod(String defaultListenerMethod);1404937154;Specify the name of the default listener method to delegate to,_for the case where no specific listener method has been determined._Out-of-the-box value is {@link #ORIGINAL_DEFAULT_LISTENER_METHOD "handleMessage"}._@see #getListenerMethodName;public void setDefaultListenerMethod(String defaultListenerMethod) {_		this.defaultListenerMethod = defaultListenerMethod__	};specify,the,name,of,the,default,listener,method,to,delegate,to,for,the,case,where,no,specific,listener,method,has,been,determined,out,of,the,box,value,is,link,handle,message,see,get,listener,method,name;public,void,set,default,listener,method,string,default,listener,method,this,default,listener,method,default,listener,method
MessageListenerAdapter -> public void setDefaultListenerMethod(String defaultListenerMethod);1482442567;Specify the name of the default listener method to delegate to,_for the case where no specific listener method has been determined._Out-of-the-box value is {@link #ORIGINAL_DEFAULT_LISTENER_METHOD "handleMessage"}._@see #getListenerMethodName;public void setDefaultListenerMethod(String defaultListenerMethod) {_		this.defaultListenerMethod = defaultListenerMethod__	};specify,the,name,of,the,default,listener,method,to,delegate,to,for,the,case,where,no,specific,listener,method,has,been,determined,out,of,the,box,value,is,link,handle,message,see,get,listener,method,name;public,void,set,default,listener,method,string,default,listener,method,this,default,listener,method,default,listener,method
MessageListenerAdapter -> public void setDefaultListenerMethod(String defaultListenerMethod);1496259743;Specify the name of the default listener method to delegate to,_for the case where no specific listener method has been determined._Out-of-the-box value is {@link #ORIGINAL_DEFAULT_LISTENER_METHOD "handleMessage"}._@see #getListenerMethodName;public void setDefaultListenerMethod(String defaultListenerMethod) {_		this.defaultListenerMethod = defaultListenerMethod__	};specify,the,name,of,the,default,listener,method,to,delegate,to,for,the,case,where,no,specific,listener,method,has,been,determined,out,of,the,box,value,is,link,handle,message,see,get,listener,method,name;public,void,set,default,listener,method,string,default,listener,method,this,default,listener,method,default,listener,method
MessageListenerAdapter -> public void setDefaultListenerMethod(String defaultListenerMethod);1496837955;Specify the name of the default listener method to delegate to,_for the case where no specific listener method has been determined._Out-of-the-box value is {@link #ORIGINAL_DEFAULT_LISTENER_METHOD "handleMessage"}._@see #getListenerMethodName;public void setDefaultListenerMethod(String defaultListenerMethod) {_		this.defaultListenerMethod = defaultListenerMethod__	};specify,the,name,of,the,default,listener,method,to,delegate,to,for,the,case,where,no,specific,listener,method,has,been,determined,out,of,the,box,value,is,link,handle,message,see,get,listener,method,name;public,void,set,default,listener,method,string,default,listener,method,this,default,listener,method,default,listener,method
MessageListenerAdapter -> public void setDefaultListenerMethod(String defaultListenerMethod);1500495740;Specify the name of the default listener method to delegate to,_for the case where no specific listener method has been determined._Out-of-the-box value is {@link #ORIGINAL_DEFAULT_LISTENER_METHOD "handleMessage"}._@see #getListenerMethodName;public void setDefaultListenerMethod(String defaultListenerMethod) {_		this.defaultListenerMethod = defaultListenerMethod__	};specify,the,name,of,the,default,listener,method,to,delegate,to,for,the,case,where,no,specific,listener,method,has,been,determined,out,of,the,box,value,is,link,handle,message,see,get,listener,method,name;public,void,set,default,listener,method,string,default,listener,method,this,default,listener,method,default,listener,method
MessageListenerAdapter -> public void setDefaultListenerMethod(String defaultListenerMethod);1502974979;Specify the name of the default listener method to delegate to,_for the case where no specific listener method has been determined._Out-of-the-box value is {@link #ORIGINAL_DEFAULT_LISTENER_METHOD "handleMessage"}._@see #getListenerMethodName;public void setDefaultListenerMethod(String defaultListenerMethod) {_		this.defaultListenerMethod = defaultListenerMethod__	};specify,the,name,of,the,default,listener,method,to,delegate,to,for,the,case,where,no,specific,listener,method,has,been,determined,out,of,the,box,value,is,link,handle,message,see,get,listener,method,name;public,void,set,default,listener,method,string,default,listener,method,this,default,listener,method,default,listener,method
MessageListenerAdapter -> public void setDefaultListenerMethod(String defaultListenerMethod);1503008146;Specify the name of the default listener method to delegate to,_for the case where no specific listener method has been determined._Out-of-the-box value is {@link #ORIGINAL_DEFAULT_LISTENER_METHOD "handleMessage"}._@see #getListenerMethodName;public void setDefaultListenerMethod(String defaultListenerMethod) {_		this.defaultListenerMethod = defaultListenerMethod__	};specify,the,name,of,the,default,listener,method,to,delegate,to,for,the,case,where,no,specific,listener,method,has,been,determined,out,of,the,box,value,is,link,handle,message,see,get,listener,method,name;public,void,set,default,listener,method,string,default,listener,method,this,default,listener,method,default,listener,method
MessageListenerAdapter -> public void setDefaultListenerMethod(String defaultListenerMethod);1542613849;Specify the name of the default listener method to delegate to,_for the case where no specific listener method has been determined._Out-of-the-box value is {@link #ORIGINAL_DEFAULT_LISTENER_METHOD "handleMessage"}._@see #getListenerMethodName;public void setDefaultListenerMethod(String defaultListenerMethod) {_		this.defaultListenerMethod = defaultListenerMethod__	};specify,the,name,of,the,default,listener,method,to,delegate,to,for,the,case,where,no,specific,listener,method,has,been,determined,out,of,the,box,value,is,link,handle,message,see,get,listener,method,name;public,void,set,default,listener,method,string,default,listener,method,this,default,listener,method,default,listener,method
MessageListenerAdapter -> public MessageListenerAdapter(Object delegate);1328020251;Create a new {@link MessageListenerAdapter} for the given delegate._@param delegate the delegate object;public MessageListenerAdapter(Object delegate) {_		initDefaultStrategies()__		setDelegate(delegate)__	};create,a,new,link,message,listener,adapter,for,the,given,delegate,param,delegate,the,delegate,object;public,message,listener,adapter,object,delegate,init,default,strategies,set,delegate,delegate
MessageListenerAdapter -> public MessageListenerAdapter(Object delegate);1356735495;Create a new {@link MessageListenerAdapter} for the given delegate._@param delegate the delegate object;public MessageListenerAdapter(Object delegate) {_		initDefaultStrategies()__		setDelegate(delegate)__	};create,a,new,link,message,listener,adapter,for,the,given,delegate,param,delegate,the,delegate,object;public,message,listener,adapter,object,delegate,init,default,strategies,set,delegate,delegate
MessageListenerAdapter -> public MessageListenerAdapter(Object delegate);1357119239;Create a new {@link MessageListenerAdapter} for the given delegate._@param delegate the delegate object;public MessageListenerAdapter(Object delegate) {_		initDefaultStrategies()__		setDelegate(delegate)__	};create,a,new,link,message,listener,adapter,for,the,given,delegate,param,delegate,the,delegate,object;public,message,listener,adapter,object,delegate,init,default,strategies,set,delegate,delegate
MessageListenerAdapter -> public MessageListenerAdapter(Object delegate);1368482696;Create a new {@link MessageListenerAdapter} for the given delegate._@param delegate the delegate object;public MessageListenerAdapter(Object delegate) {_		initDefaultStrategies()__		setDelegate(delegate)__	};create,a,new,link,message,listener,adapter,for,the,given,delegate,param,delegate,the,delegate,object;public,message,listener,adapter,object,delegate,init,default,strategies,set,delegate,delegate
MessageListenerAdapter -> public MessageListenerAdapter(Object delegate);1385412762;Create a new {@link MessageListenerAdapter} for the given delegate._@param delegate the delegate object;public MessageListenerAdapter(Object delegate) {_		initDefaultStrategies()__		setDelegate(delegate)__	};create,a,new,link,message,listener,adapter,for,the,given,delegate,param,delegate,the,delegate,object;public,message,listener,adapter,object,delegate,init,default,strategies,set,delegate,delegate
MessageListenerAdapter -> public MessageListenerAdapter(Object delegate);1397718966;Create a new {@link MessageListenerAdapter} for the given delegate._@param delegate the delegate object;public MessageListenerAdapter(Object delegate) {_		initDefaultStrategies()__		setDelegate(delegate)__	};create,a,new,link,message,listener,adapter,for,the,given,delegate,param,delegate,the,delegate,object;public,message,listener,adapter,object,delegate,init,default,strategies,set,delegate,delegate
MessageListenerAdapter -> public MessageListenerAdapter(Object delegate);1404937154;Create a new {@link MessageListenerAdapter} for the given delegate._@param delegate the delegate object;public MessageListenerAdapter(Object delegate) {_		setDelegate(delegate)__	};create,a,new,link,message,listener,adapter,for,the,given,delegate,param,delegate,the,delegate,object;public,message,listener,adapter,object,delegate,set,delegate,delegate
MessageListenerAdapter -> public MessageListenerAdapter(Object delegate);1482442567;Create a new {@link MessageListenerAdapter} for the given delegate._@param delegate the delegate object;public MessageListenerAdapter(Object delegate) {_		setDelegate(delegate)__	};create,a,new,link,message,listener,adapter,for,the,given,delegate,param,delegate,the,delegate,object;public,message,listener,adapter,object,delegate,set,delegate,delegate
MessageListenerAdapter -> public MessageListenerAdapter(Object delegate);1496259743;Create a new {@link MessageListenerAdapter} for the given delegate._@param delegate the delegate object;public MessageListenerAdapter(Object delegate) {_		setDelegate(delegate)__	};create,a,new,link,message,listener,adapter,for,the,given,delegate,param,delegate,the,delegate,object;public,message,listener,adapter,object,delegate,set,delegate,delegate
MessageListenerAdapter -> public MessageListenerAdapter(Object delegate);1496837955;Create a new {@link MessageListenerAdapter} for the given delegate._@param delegate the delegate object;public MessageListenerAdapter(Object delegate) {_		setDelegate(delegate)__	};create,a,new,link,message,listener,adapter,for,the,given,delegate,param,delegate,the,delegate,object;public,message,listener,adapter,object,delegate,set,delegate,delegate
MessageListenerAdapter -> public MessageListenerAdapter(Object delegate);1500495740;Create a new {@link MessageListenerAdapter} for the given delegate._@param delegate the delegate object;public MessageListenerAdapter(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};create,a,new,link,message,listener,adapter,for,the,given,delegate,param,delegate,the,delegate,object;public,message,listener,adapter,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public MessageListenerAdapter(Object delegate);1502974979;Create a new {@link MessageListenerAdapter} for the given delegate._@param delegate the delegate object;public MessageListenerAdapter(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};create,a,new,link,message,listener,adapter,for,the,given,delegate,param,delegate,the,delegate,object;public,message,listener,adapter,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public MessageListenerAdapter(Object delegate);1503008146;Create a new {@link MessageListenerAdapter} for the given delegate._@param delegate the delegate object;public MessageListenerAdapter(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};create,a,new,link,message,listener,adapter,for,the,given,delegate,param,delegate,the,delegate,object;public,message,listener,adapter,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public MessageListenerAdapter(Object delegate);1542613849;Create a new {@link MessageListenerAdapter} for the given delegate._@param delegate the delegate object;public MessageListenerAdapter(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};create,a,new,link,message,listener,adapter,for,the,given,delegate,param,delegate,the,delegate,object;public,message,listener,adapter,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public void setDefaultResponseTopicName(String destinationName);1328020251;Set the name of the default response topic to send response messages to._This will be applied in case of a request message that does not carry a_"JMSReplyTo" field._<p>Alternatively, specify a JMS Destination object as "defaultResponseDestination"._@see #setDestinationResolver_@see #setDefaultResponseDestination(javax.jms.Destination);public void setDefaultResponseTopicName(String destinationName) {_		this.defaultResponseDestination = new DestinationNameHolder(destinationName, true)__	};set,the,name,of,the,default,response,topic,to,send,response,messages,to,this,will,be,applied,in,case,of,a,request,message,that,does,not,carry,a,jmsreply,to,field,p,alternatively,specify,a,jms,destination,object,as,default,response,destination,see,set,destination,resolver,see,set,default,response,destination,javax,jms,destination;public,void,set,default,response,topic,name,string,destination,name,this,default,response,destination,new,destination,name,holder,destination,name,true
MessageListenerAdapter -> public void setDefaultResponseTopicName(String destinationName);1356735495;Set the name of the default response topic to send response messages to._This will be applied in case of a request message that does not carry a_"JMSReplyTo" field._<p>Alternatively, specify a JMS Destination object as "defaultResponseDestination"._@see #setDestinationResolver_@see #setDefaultResponseDestination(javax.jms.Destination);public void setDefaultResponseTopicName(String destinationName) {_		this.defaultResponseDestination = new DestinationNameHolder(destinationName, true)__	};set,the,name,of,the,default,response,topic,to,send,response,messages,to,this,will,be,applied,in,case,of,a,request,message,that,does,not,carry,a,jmsreply,to,field,p,alternatively,specify,a,jms,destination,object,as,default,response,destination,see,set,destination,resolver,see,set,default,response,destination,javax,jms,destination;public,void,set,default,response,topic,name,string,destination,name,this,default,response,destination,new,destination,name,holder,destination,name,true
MessageListenerAdapter -> public void setDefaultResponseTopicName(String destinationName);1357119239;Set the name of the default response topic to send response messages to._This will be applied in case of a request message that does not carry a_"JMSReplyTo" field._<p>Alternatively, specify a JMS Destination object as "defaultResponseDestination"._@see #setDestinationResolver_@see #setDefaultResponseDestination(javax.jms.Destination);public void setDefaultResponseTopicName(String destinationName) {_		this.defaultResponseDestination = new DestinationNameHolder(destinationName, true)__	};set,the,name,of,the,default,response,topic,to,send,response,messages,to,this,will,be,applied,in,case,of,a,request,message,that,does,not,carry,a,jmsreply,to,field,p,alternatively,specify,a,jms,destination,object,as,default,response,destination,see,set,destination,resolver,see,set,default,response,destination,javax,jms,destination;public,void,set,default,response,topic,name,string,destination,name,this,default,response,destination,new,destination,name,holder,destination,name,true
MessageListenerAdapter -> public void setDefaultResponseTopicName(String destinationName);1368482696;Set the name of the default response topic to send response messages to._This will be applied in case of a request message that does not carry a_"JMSReplyTo" field._<p>Alternatively, specify a JMS Destination object as "defaultResponseDestination"._@see #setDestinationResolver_@see #setDefaultResponseDestination(javax.jms.Destination);public void setDefaultResponseTopicName(String destinationName) {_		this.defaultResponseDestination = new DestinationNameHolder(destinationName, true)__	};set,the,name,of,the,default,response,topic,to,send,response,messages,to,this,will,be,applied,in,case,of,a,request,message,that,does,not,carry,a,jmsreply,to,field,p,alternatively,specify,a,jms,destination,object,as,default,response,destination,see,set,destination,resolver,see,set,default,response,destination,javax,jms,destination;public,void,set,default,response,topic,name,string,destination,name,this,default,response,destination,new,destination,name,holder,destination,name,true
MessageListenerAdapter -> public void setDefaultResponseTopicName(String destinationName);1385412762;Set the name of the default response topic to send response messages to._This will be applied in case of a request message that does not carry a_"JMSReplyTo" field._<p>Alternatively, specify a JMS Destination object as "defaultResponseDestination"._@see #setDestinationResolver_@see #setDefaultResponseDestination(javax.jms.Destination);public void setDefaultResponseTopicName(String destinationName) {_		this.defaultResponseDestination = new DestinationNameHolder(destinationName, true)__	};set,the,name,of,the,default,response,topic,to,send,response,messages,to,this,will,be,applied,in,case,of,a,request,message,that,does,not,carry,a,jmsreply,to,field,p,alternatively,specify,a,jms,destination,object,as,default,response,destination,see,set,destination,resolver,see,set,default,response,destination,javax,jms,destination;public,void,set,default,response,topic,name,string,destination,name,this,default,response,destination,new,destination,name,holder,destination,name,true
MessageListenerAdapter -> public void setMessageConverter(MessageConverter messageConverter);1328020251;Set the converter that will convert incoming JMS messages to_listener method arguments, and objects returned from listener_methods back to JMS messages._<p>The default converter is a {@link SimpleMessageConverter}, which is able_to handle {@link javax.jms.BytesMessage BytesMessages},_{@link javax.jms.TextMessage TextMessages} and_{@link javax.jms.ObjectMessage ObjectMessages}.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,converter,that,will,convert,incoming,jms,messages,to,listener,method,arguments,and,objects,returned,from,listener,methods,back,to,jms,messages,p,the,default,converter,is,a,link,simple,message,converter,which,is,able,to,handle,link,javax,jms,bytes,message,bytes,messages,link,javax,jms,text,message,text,messages,and,link,javax,jms,object,message,object,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
MessageListenerAdapter -> public void setMessageConverter(MessageConverter messageConverter);1356735495;Set the converter that will convert incoming JMS messages to_listener method arguments, and objects returned from listener_methods back to JMS messages._<p>The default converter is a {@link SimpleMessageConverter}, which is able_to handle {@link javax.jms.BytesMessage BytesMessages},_{@link javax.jms.TextMessage TextMessages} and_{@link javax.jms.ObjectMessage ObjectMessages}.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,converter,that,will,convert,incoming,jms,messages,to,listener,method,arguments,and,objects,returned,from,listener,methods,back,to,jms,messages,p,the,default,converter,is,a,link,simple,message,converter,which,is,able,to,handle,link,javax,jms,bytes,message,bytes,messages,link,javax,jms,text,message,text,messages,and,link,javax,jms,object,message,object,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
MessageListenerAdapter -> public void setMessageConverter(MessageConverter messageConverter);1357119239;Set the converter that will convert incoming JMS messages to_listener method arguments, and objects returned from listener_methods back to JMS messages._<p>The default converter is a {@link SimpleMessageConverter}, which is able_to handle {@link javax.jms.BytesMessage BytesMessages},_{@link javax.jms.TextMessage TextMessages} and_{@link javax.jms.ObjectMessage ObjectMessages}.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,converter,that,will,convert,incoming,jms,messages,to,listener,method,arguments,and,objects,returned,from,listener,methods,back,to,jms,messages,p,the,default,converter,is,a,link,simple,message,converter,which,is,able,to,handle,link,javax,jms,bytes,message,bytes,messages,link,javax,jms,text,message,text,messages,and,link,javax,jms,object,message,object,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
MessageListenerAdapter -> public void setMessageConverter(MessageConverter messageConverter);1368482696;Set the converter that will convert incoming JMS messages to_listener method arguments, and objects returned from listener_methods back to JMS messages._<p>The default converter is a {@link SimpleMessageConverter}, which is able_to handle {@link javax.jms.BytesMessage BytesMessages},_{@link javax.jms.TextMessage TextMessages} and_{@link javax.jms.ObjectMessage ObjectMessages}.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,converter,that,will,convert,incoming,jms,messages,to,listener,method,arguments,and,objects,returned,from,listener,methods,back,to,jms,messages,p,the,default,converter,is,a,link,simple,message,converter,which,is,able,to,handle,link,javax,jms,bytes,message,bytes,messages,link,javax,jms,text,message,text,messages,and,link,javax,jms,object,message,object,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
MessageListenerAdapter -> public void setMessageConverter(MessageConverter messageConverter);1385412762;Set the converter that will convert incoming JMS messages to_listener method arguments, and objects returned from listener_methods back to JMS messages._<p>The default converter is a {@link SimpleMessageConverter}, which is able_to handle {@link javax.jms.BytesMessage BytesMessages},_{@link javax.jms.TextMessage TextMessages} and_{@link javax.jms.ObjectMessage ObjectMessages}.;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,converter,that,will,convert,incoming,jms,messages,to,listener,method,arguments,and,objects,returned,from,listener,methods,back,to,jms,messages,p,the,default,converter,is,a,link,simple,message,converter,which,is,able,to,handle,link,javax,jms,bytes,message,bytes,messages,link,javax,jms,text,message,text,messages,and,link,javax,jms,object,message,object,messages;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
MessageListenerAdapter -> protected void postProcessProducer(MessageProducer producer, Message response) throws JMSException;1328020251;Post-process the given message producer before using it to send the response._<p>The default implementation is empty._@param producer the JMS message producer that will be used to send the message_@param response the outgoing JMS message about to be sent_@throws JMSException if thrown by JMS API methods;protected void postProcessProducer(MessageProducer producer, Message response) throws JMSException {_	};post,process,the,given,message,producer,before,using,it,to,send,the,response,p,the,default,implementation,is,empty,param,producer,the,jms,message,producer,that,will,be,used,to,send,the,message,param,response,the,outgoing,jms,message,about,to,be,sent,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,post,process,producer,message,producer,producer,message,response,throws,jmsexception
MessageListenerAdapter -> protected void postProcessProducer(MessageProducer producer, Message response) throws JMSException;1356735495;Post-process the given message producer before using it to send the response._<p>The default implementation is empty._@param producer the JMS message producer that will be used to send the message_@param response the outgoing JMS message about to be sent_@throws JMSException if thrown by JMS API methods;protected void postProcessProducer(MessageProducer producer, Message response) throws JMSException {_	};post,process,the,given,message,producer,before,using,it,to,send,the,response,p,the,default,implementation,is,empty,param,producer,the,jms,message,producer,that,will,be,used,to,send,the,message,param,response,the,outgoing,jms,message,about,to,be,sent,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,post,process,producer,message,producer,producer,message,response,throws,jmsexception
MessageListenerAdapter -> protected void postProcessProducer(MessageProducer producer, Message response) throws JMSException;1357119239;Post-process the given message producer before using it to send the response._<p>The default implementation is empty._@param producer the JMS message producer that will be used to send the message_@param response the outgoing JMS message about to be sent_@throws JMSException if thrown by JMS API methods;protected void postProcessProducer(MessageProducer producer, Message response) throws JMSException {_	};post,process,the,given,message,producer,before,using,it,to,send,the,response,p,the,default,implementation,is,empty,param,producer,the,jms,message,producer,that,will,be,used,to,send,the,message,param,response,the,outgoing,jms,message,about,to,be,sent,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,post,process,producer,message,producer,producer,message,response,throws,jmsexception
MessageListenerAdapter -> protected void postProcessProducer(MessageProducer producer, Message response) throws JMSException;1368482696;Post-process the given message producer before using it to send the response._<p>The default implementation is empty._@param producer the JMS message producer that will be used to send the message_@param response the outgoing JMS message about to be sent_@throws JMSException if thrown by JMS API methods;protected void postProcessProducer(MessageProducer producer, Message response) throws JMSException {_	};post,process,the,given,message,producer,before,using,it,to,send,the,response,p,the,default,implementation,is,empty,param,producer,the,jms,message,producer,that,will,be,used,to,send,the,message,param,response,the,outgoing,jms,message,about,to,be,sent,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,post,process,producer,message,producer,producer,message,response,throws,jmsexception
MessageListenerAdapter -> protected void postProcessProducer(MessageProducer producer, Message response) throws JMSException;1385412762;Post-process the given message producer before using it to send the response._<p>The default implementation is empty._@param producer the JMS message producer that will be used to send the message_@param response the outgoing JMS message about to be sent_@throws JMSException if thrown by JMS API methods;protected void postProcessProducer(MessageProducer producer, Message response) throws JMSException {_	};post,process,the,given,message,producer,before,using,it,to,send,the,response,p,the,default,implementation,is,empty,param,producer,the,jms,message,producer,that,will,be,used,to,send,the,message,param,response,the,outgoing,jms,message,about,to,be,sent,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,post,process,producer,message,producer,producer,message,response,throws,jmsexception
MessageListenerAdapter -> public void setDelegate(Object delegate);1328020251;Set a target object to delegate message listening to._Specified listener methods have to be present on this target object._<p>If no explicit delegate object has been specified, listener_methods are expected to present on this adapter instance, that is,_on a custom subclass of this adapter, defining listener methods.;public void setDelegate(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};set,a,target,object,to,delegate,message,listening,to,specified,listener,methods,have,to,be,present,on,this,target,object,p,if,no,explicit,delegate,object,has,been,specified,listener,methods,are,expected,to,present,on,this,adapter,instance,that,is,on,a,custom,subclass,of,this,adapter,defining,listener,methods;public,void,set,delegate,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public void setDelegate(Object delegate);1356735495;Set a target object to delegate message listening to._Specified listener methods have to be present on this target object._<p>If no explicit delegate object has been specified, listener_methods are expected to present on this adapter instance, that is,_on a custom subclass of this adapter, defining listener methods.;public void setDelegate(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};set,a,target,object,to,delegate,message,listening,to,specified,listener,methods,have,to,be,present,on,this,target,object,p,if,no,explicit,delegate,object,has,been,specified,listener,methods,are,expected,to,present,on,this,adapter,instance,that,is,on,a,custom,subclass,of,this,adapter,defining,listener,methods;public,void,set,delegate,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public void setDelegate(Object delegate);1357119239;Set a target object to delegate message listening to._Specified listener methods have to be present on this target object._<p>If no explicit delegate object has been specified, listener_methods are expected to present on this adapter instance, that is,_on a custom subclass of this adapter, defining listener methods.;public void setDelegate(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};set,a,target,object,to,delegate,message,listening,to,specified,listener,methods,have,to,be,present,on,this,target,object,p,if,no,explicit,delegate,object,has,been,specified,listener,methods,are,expected,to,present,on,this,adapter,instance,that,is,on,a,custom,subclass,of,this,adapter,defining,listener,methods;public,void,set,delegate,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public void setDelegate(Object delegate);1368482696;Set a target object to delegate message listening to._Specified listener methods have to be present on this target object._<p>If no explicit delegate object has been specified, listener_methods are expected to present on this adapter instance, that is,_on a custom subclass of this adapter, defining listener methods.;public void setDelegate(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};set,a,target,object,to,delegate,message,listening,to,specified,listener,methods,have,to,be,present,on,this,target,object,p,if,no,explicit,delegate,object,has,been,specified,listener,methods,are,expected,to,present,on,this,adapter,instance,that,is,on,a,custom,subclass,of,this,adapter,defining,listener,methods;public,void,set,delegate,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public void setDelegate(Object delegate);1385412762;Set a target object to delegate message listening to._Specified listener methods have to be present on this target object._<p>If no explicit delegate object has been specified, listener_methods are expected to present on this adapter instance, that is,_on a custom subclass of this adapter, defining listener methods.;public void setDelegate(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};set,a,target,object,to,delegate,message,listening,to,specified,listener,methods,have,to,be,present,on,this,target,object,p,if,no,explicit,delegate,object,has,been,specified,listener,methods,are,expected,to,present,on,this,adapter,instance,that,is,on,a,custom,subclass,of,this,adapter,defining,listener,methods;public,void,set,delegate,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public void setDelegate(Object delegate);1397718966;Set a target object to delegate message listening to._Specified listener methods have to be present on this target object._<p>If no explicit delegate object has been specified, listener_methods are expected to present on this adapter instance, that is,_on a custom subclass of this adapter, defining listener methods.;public void setDelegate(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};set,a,target,object,to,delegate,message,listening,to,specified,listener,methods,have,to,be,present,on,this,target,object,p,if,no,explicit,delegate,object,has,been,specified,listener,methods,are,expected,to,present,on,this,adapter,instance,that,is,on,a,custom,subclass,of,this,adapter,defining,listener,methods;public,void,set,delegate,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public void setDelegate(Object delegate);1404937154;Set a target object to delegate message listening to._Specified listener methods have to be present on this target object._<p>If no explicit delegate object has been specified, listener_methods are expected to present on this adapter instance, that is,_on a custom subclass of this adapter, defining listener methods.;public void setDelegate(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};set,a,target,object,to,delegate,message,listening,to,specified,listener,methods,have,to,be,present,on,this,target,object,p,if,no,explicit,delegate,object,has,been,specified,listener,methods,are,expected,to,present,on,this,adapter,instance,that,is,on,a,custom,subclass,of,this,adapter,defining,listener,methods;public,void,set,delegate,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public void setDelegate(Object delegate);1482442567;Set a target object to delegate message listening to._Specified listener methods have to be present on this target object._<p>If no explicit delegate object has been specified, listener_methods are expected to present on this adapter instance, that is,_on a custom subclass of this adapter, defining listener methods.;public void setDelegate(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};set,a,target,object,to,delegate,message,listening,to,specified,listener,methods,have,to,be,present,on,this,target,object,p,if,no,explicit,delegate,object,has,been,specified,listener,methods,are,expected,to,present,on,this,adapter,instance,that,is,on,a,custom,subclass,of,this,adapter,defining,listener,methods;public,void,set,delegate,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public void setDelegate(Object delegate);1496259743;Set a target object to delegate message listening to._Specified listener methods have to be present on this target object._<p>If no explicit delegate object has been specified, listener_methods are expected to present on this adapter instance, that is,_on a custom subclass of this adapter, defining listener methods.;public void setDelegate(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};set,a,target,object,to,delegate,message,listening,to,specified,listener,methods,have,to,be,present,on,this,target,object,p,if,no,explicit,delegate,object,has,been,specified,listener,methods,are,expected,to,present,on,this,adapter,instance,that,is,on,a,custom,subclass,of,this,adapter,defining,listener,methods;public,void,set,delegate,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public void setDelegate(Object delegate);1496837955;Set a target object to delegate message listening to._Specified listener methods have to be present on this target object._<p>If no explicit delegate object has been specified, listener_methods are expected to present on this adapter instance, that is,_on a custom subclass of this adapter, defining listener methods.;public void setDelegate(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};set,a,target,object,to,delegate,message,listening,to,specified,listener,methods,have,to,be,present,on,this,target,object,p,if,no,explicit,delegate,object,has,been,specified,listener,methods,are,expected,to,present,on,this,adapter,instance,that,is,on,a,custom,subclass,of,this,adapter,defining,listener,methods;public,void,set,delegate,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public void setDelegate(Object delegate);1500495740;Set a target object to delegate message listening to._Specified listener methods have to be present on this target object._<p>If no explicit delegate object has been specified, listener_methods are expected to present on this adapter instance, that is,_on a custom subclass of this adapter, defining listener methods.;public void setDelegate(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};set,a,target,object,to,delegate,message,listening,to,specified,listener,methods,have,to,be,present,on,this,target,object,p,if,no,explicit,delegate,object,has,been,specified,listener,methods,are,expected,to,present,on,this,adapter,instance,that,is,on,a,custom,subclass,of,this,adapter,defining,listener,methods;public,void,set,delegate,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public void setDelegate(Object delegate);1502974979;Set a target object to delegate message listening to._Specified listener methods have to be present on this target object._<p>If no explicit delegate object has been specified, listener_methods are expected to present on this adapter instance, that is,_on a custom subclass of this adapter, defining listener methods.;public void setDelegate(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};set,a,target,object,to,delegate,message,listening,to,specified,listener,methods,have,to,be,present,on,this,target,object,p,if,no,explicit,delegate,object,has,been,specified,listener,methods,are,expected,to,present,on,this,adapter,instance,that,is,on,a,custom,subclass,of,this,adapter,defining,listener,methods;public,void,set,delegate,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public void setDelegate(Object delegate);1503008146;Set a target object to delegate message listening to._Specified listener methods have to be present on this target object._<p>If no explicit delegate object has been specified, listener_methods are expected to present on this adapter instance, that is,_on a custom subclass of this adapter, defining listener methods.;public void setDelegate(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};set,a,target,object,to,delegate,message,listening,to,specified,listener,methods,have,to,be,present,on,this,target,object,p,if,no,explicit,delegate,object,has,been,specified,listener,methods,are,expected,to,present,on,this,adapter,instance,that,is,on,a,custom,subclass,of,this,adapter,defining,listener,methods;public,void,set,delegate,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> public void setDelegate(Object delegate);1542613849;Set a target object to delegate message listening to._Specified listener methods have to be present on this target object._<p>If no explicit delegate object has been specified, listener_methods are expected to present on this adapter instance, that is,_on a custom subclass of this adapter, defining listener methods.;public void setDelegate(Object delegate) {_		Assert.notNull(delegate, "Delegate must not be null")__		this.delegate = delegate__	};set,a,target,object,to,delegate,message,listening,to,specified,listener,methods,have,to,be,present,on,this,target,object,p,if,no,explicit,delegate,object,has,been,specified,listener,methods,are,expected,to,present,on,this,adapter,instance,that,is,on,a,custom,subclass,of,this,adapter,defining,listener,methods;public,void,set,delegate,object,delegate,assert,not,null,delegate,delegate,must,not,be,null,this,delegate,delegate
MessageListenerAdapter -> protected String getDefaultListenerMethod();1328020251;Return the name of the default listener method to delegate to.;protected String getDefaultListenerMethod() {_		return this.defaultListenerMethod__	};return,the,name,of,the,default,listener,method,to,delegate,to;protected,string,get,default,listener,method,return,this,default,listener,method
MessageListenerAdapter -> protected String getDefaultListenerMethod();1356735495;Return the name of the default listener method to delegate to.;protected String getDefaultListenerMethod() {_		return this.defaultListenerMethod__	};return,the,name,of,the,default,listener,method,to,delegate,to;protected,string,get,default,listener,method,return,this,default,listener,method
MessageListenerAdapter -> protected String getDefaultListenerMethod();1357119239;Return the name of the default listener method to delegate to.;protected String getDefaultListenerMethod() {_		return this.defaultListenerMethod__	};return,the,name,of,the,default,listener,method,to,delegate,to;protected,string,get,default,listener,method,return,this,default,listener,method
MessageListenerAdapter -> protected String getDefaultListenerMethod();1368482696;Return the name of the default listener method to delegate to.;protected String getDefaultListenerMethod() {_		return this.defaultListenerMethod__	};return,the,name,of,the,default,listener,method,to,delegate,to;protected,string,get,default,listener,method,return,this,default,listener,method
MessageListenerAdapter -> protected String getDefaultListenerMethod();1385412762;Return the name of the default listener method to delegate to.;protected String getDefaultListenerMethod() {_		return this.defaultListenerMethod__	};return,the,name,of,the,default,listener,method,to,delegate,to;protected,string,get,default,listener,method,return,this,default,listener,method
MessageListenerAdapter -> protected String getDefaultListenerMethod();1397718966;Return the name of the default listener method to delegate to.;protected String getDefaultListenerMethod() {_		return this.defaultListenerMethod__	};return,the,name,of,the,default,listener,method,to,delegate,to;protected,string,get,default,listener,method,return,this,default,listener,method
MessageListenerAdapter -> protected String getDefaultListenerMethod();1404937154;Return the name of the default listener method to delegate to.;protected String getDefaultListenerMethod() {_		return this.defaultListenerMethod__	};return,the,name,of,the,default,listener,method,to,delegate,to;protected,string,get,default,listener,method,return,this,default,listener,method
MessageListenerAdapter -> protected String getDefaultListenerMethod();1482442567;Return the name of the default listener method to delegate to.;protected String getDefaultListenerMethod() {_		return this.defaultListenerMethod__	};return,the,name,of,the,default,listener,method,to,delegate,to;protected,string,get,default,listener,method,return,this,default,listener,method
MessageListenerAdapter -> protected String getDefaultListenerMethod();1496259743;Return the name of the default listener method to delegate to.;protected String getDefaultListenerMethod() {_		return this.defaultListenerMethod__	};return,the,name,of,the,default,listener,method,to,delegate,to;protected,string,get,default,listener,method,return,this,default,listener,method
MessageListenerAdapter -> protected String getDefaultListenerMethod();1496837955;Return the name of the default listener method to delegate to.;protected String getDefaultListenerMethod() {_		return this.defaultListenerMethod__	};return,the,name,of,the,default,listener,method,to,delegate,to;protected,string,get,default,listener,method,return,this,default,listener,method
MessageListenerAdapter -> protected String getDefaultListenerMethod();1500495740;Return the name of the default listener method to delegate to.;protected String getDefaultListenerMethod() {_		return this.defaultListenerMethod__	};return,the,name,of,the,default,listener,method,to,delegate,to;protected,string,get,default,listener,method,return,this,default,listener,method
MessageListenerAdapter -> protected String getDefaultListenerMethod();1502974979;Return the name of the default listener method to delegate to.;protected String getDefaultListenerMethod() {_		return this.defaultListenerMethod__	};return,the,name,of,the,default,listener,method,to,delegate,to;protected,string,get,default,listener,method,return,this,default,listener,method
MessageListenerAdapter -> protected String getDefaultListenerMethod();1503008146;Return the name of the default listener method to delegate to.;protected String getDefaultListenerMethod() {_		return this.defaultListenerMethod__	};return,the,name,of,the,default,listener,method,to,delegate,to;protected,string,get,default,listener,method,return,this,default,listener,method
MessageListenerAdapter -> protected String getDefaultListenerMethod();1542613849;Return the name of the default listener method to delegate to.;protected String getDefaultListenerMethod() {_		return this.defaultListenerMethod__	};return,the,name,of,the,default,listener,method,to,delegate,to;protected,string,get,default,listener,method,return,this,default,listener,method
MessageListenerAdapter -> @Override 	@SuppressWarnings("unchecked") 	public void onMessage(Message message, Session session) throws JMSException;1356735495;Spring {@link SessionAwareMessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. If the target method returns a_non-null object, wrap in a JMS message and send it back._@param message the incoming JMS message_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods;@Override_	@SuppressWarnings("unchecked")_	public void onMessage(Message message, Session session) throws JMSException {_		_		_		Object delegate = getDelegate()__		if (delegate != this) {_			if (delegate instanceof SessionAwareMessageListener) {_				if (session != null) {_					((SessionAwareMessageListener) delegate).onMessage(message, session)__					return__				}_				else if (!(delegate instanceof MessageListener)) {_					throw new javax.jms.IllegalStateException("MessageListenerAdapter cannot handle a " +_							"SessionAwareMessageListener delegate if it hasn't been invoked with a Session itself")__				}_			}_			if (delegate instanceof MessageListener) {_				((MessageListener) delegate).onMessage(message)__				return__			}_		}__		_		Object convertedMessage = extractMessage(message)__		String methodName = getListenerMethodName(message, convertedMessage)__		if (methodName == null) {_			throw new javax.jms.IllegalStateException("No default listener method specified: " +_					"Either specify a non-null value for the 'defaultListenerMethod' property or " +_					"override the 'getListenerMethodName' method.")__		}__		_		Object[] listenerArguments = buildListenerArguments(convertedMessage)__		Object result = invokeListenerMethod(methodName, listenerArguments)__		if (result != null) {_			handleResult(result, message, session)__		}_		else {_			logger.trace("No result object given - no result to handle")__		}_	};spring,link,session,aware,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,if,the,target,method,returns,a,non,null,object,wrap,in,a,jms,message,and,send,it,back,param,message,the,incoming,jms,message,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods;override,suppress,warnings,unchecked,public,void,on,message,message,message,session,session,throws,jmsexception,object,delegate,get,delegate,if,delegate,this,if,delegate,instanceof,session,aware,message,listener,if,session,null,session,aware,message,listener,delegate,on,message,message,session,return,else,if,delegate,instanceof,message,listener,throw,new,javax,jms,illegal,state,exception,message,listener,adapter,cannot,handle,a,session,aware,message,listener,delegate,if,it,hasn,t,been,invoked,with,a,session,itself,if,delegate,instanceof,message,listener,message,listener,delegate,on,message,message,return,object,converted,message,extract,message,message,string,method,name,get,listener,method,name,message,converted,message,if,method,name,null,throw,new,javax,jms,illegal,state,exception,no,default,listener,method,specified,either,specify,a,non,null,value,for,the,default,listener,method,property,or,override,the,get,listener,method,name,method,object,listener,arguments,build,listener,arguments,converted,message,object,result,invoke,listener,method,method,name,listener,arguments,if,result,null,handle,result,result,message,session,else,logger,trace,no,result,object,given,no,result,to,handle
MessageListenerAdapter -> @Override 	@SuppressWarnings("unchecked") 	public void onMessage(Message message, Session session) throws JMSException;1368482696;Spring {@link SessionAwareMessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. If the target method returns a_non-null object, wrap in a JMS message and send it back._@param message the incoming JMS message_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods;@Override_	@SuppressWarnings("unchecked")_	public void onMessage(Message message, Session session) throws JMSException {_		_		_		Object delegate = getDelegate()__		if (delegate != this) {_			if (delegate instanceof SessionAwareMessageListener) {_				if (session != null) {_					((SessionAwareMessageListener) delegate).onMessage(message, session)__					return__				}_				else if (!(delegate instanceof MessageListener)) {_					throw new javax.jms.IllegalStateException("MessageListenerAdapter cannot handle a " +_							"SessionAwareMessageListener delegate if it hasn't been invoked with a Session itself")__				}_			}_			if (delegate instanceof MessageListener) {_				((MessageListener) delegate).onMessage(message)__				return__			}_		}__		_		Object convertedMessage = extractMessage(message)__		String methodName = getListenerMethodName(message, convertedMessage)__		if (methodName == null) {_			throw new javax.jms.IllegalStateException("No default listener method specified: " +_					"Either specify a non-null value for the 'defaultListenerMethod' property or " +_					"override the 'getListenerMethodName' method.")__		}__		_		Object[] listenerArguments = buildListenerArguments(convertedMessage)__		Object result = invokeListenerMethod(methodName, listenerArguments)__		if (result != null) {_			handleResult(result, message, session)__		}_		else {_			logger.trace("No result object given - no result to handle")__		}_	};spring,link,session,aware,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,if,the,target,method,returns,a,non,null,object,wrap,in,a,jms,message,and,send,it,back,param,message,the,incoming,jms,message,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods;override,suppress,warnings,unchecked,public,void,on,message,message,message,session,session,throws,jmsexception,object,delegate,get,delegate,if,delegate,this,if,delegate,instanceof,session,aware,message,listener,if,session,null,session,aware,message,listener,delegate,on,message,message,session,return,else,if,delegate,instanceof,message,listener,throw,new,javax,jms,illegal,state,exception,message,listener,adapter,cannot,handle,a,session,aware,message,listener,delegate,if,it,hasn,t,been,invoked,with,a,session,itself,if,delegate,instanceof,message,listener,message,listener,delegate,on,message,message,return,object,converted,message,extract,message,message,string,method,name,get,listener,method,name,message,converted,message,if,method,name,null,throw,new,javax,jms,illegal,state,exception,no,default,listener,method,specified,either,specify,a,non,null,value,for,the,default,listener,method,property,or,override,the,get,listener,method,name,method,object,listener,arguments,build,listener,arguments,converted,message,object,result,invoke,listener,method,method,name,listener,arguments,if,result,null,handle,result,result,message,session,else,logger,trace,no,result,object,given,no,result,to,handle
MessageListenerAdapter -> @Override 	@SuppressWarnings("unchecked") 	public void onMessage(Message message, Session session) throws JMSException;1385412762;Spring {@link SessionAwareMessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. If the target method returns a_non-null object, wrap in a JMS message and send it back._@param message the incoming JMS message_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods;@Override_	@SuppressWarnings("unchecked")_	public void onMessage(Message message, Session session) throws JMSException {_		_		_		Object delegate = getDelegate()__		if (delegate != this) {_			if (delegate instanceof SessionAwareMessageListener) {_				if (session != null) {_					((SessionAwareMessageListener<Message>) delegate).onMessage(message, session)__					return__				}_				else if (!(delegate instanceof MessageListener)) {_					throw new javax.jms.IllegalStateException("MessageListenerAdapter cannot handle a " +_							"SessionAwareMessageListener delegate if it hasn't been invoked with a Session itself")__				}_			}_			if (delegate instanceof MessageListener) {_				((MessageListener) delegate).onMessage(message)__				return__			}_		}__		_		Object convertedMessage = extractMessage(message)__		String methodName = getListenerMethodName(message, convertedMessage)__		if (methodName == null) {_			throw new javax.jms.IllegalStateException("No default listener method specified: " +_					"Either specify a non-null value for the 'defaultListenerMethod' property or " +_					"override the 'getListenerMethodName' method.")__		}__		_		Object[] listenerArguments = buildListenerArguments(convertedMessage)__		Object result = invokeListenerMethod(methodName, listenerArguments)__		if (result != null) {_			handleResult(result, message, session)__		}_		else {_			logger.trace("No result object given - no result to handle")__		}_	};spring,link,session,aware,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,if,the,target,method,returns,a,non,null,object,wrap,in,a,jms,message,and,send,it,back,param,message,the,incoming,jms,message,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods;override,suppress,warnings,unchecked,public,void,on,message,message,message,session,session,throws,jmsexception,object,delegate,get,delegate,if,delegate,this,if,delegate,instanceof,session,aware,message,listener,if,session,null,session,aware,message,listener,message,delegate,on,message,message,session,return,else,if,delegate,instanceof,message,listener,throw,new,javax,jms,illegal,state,exception,message,listener,adapter,cannot,handle,a,session,aware,message,listener,delegate,if,it,hasn,t,been,invoked,with,a,session,itself,if,delegate,instanceof,message,listener,message,listener,delegate,on,message,message,return,object,converted,message,extract,message,message,string,method,name,get,listener,method,name,message,converted,message,if,method,name,null,throw,new,javax,jms,illegal,state,exception,no,default,listener,method,specified,either,specify,a,non,null,value,for,the,default,listener,method,property,or,override,the,get,listener,method,name,method,object,listener,arguments,build,listener,arguments,converted,message,object,result,invoke,listener,method,method,name,listener,arguments,if,result,null,handle,result,result,message,session,else,logger,trace,no,result,object,given,no,result,to,handle
MessageListenerAdapter -> @Override 	@SuppressWarnings("unchecked") 	public void onMessage(Message message, Session session) throws JMSException;1397718966;Spring {@link SessionAwareMessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. If the target method returns a_non-null object, wrap in a JMS message and send it back._@param message the incoming JMS message_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods;@Override_	@SuppressWarnings("unchecked")_	public void onMessage(Message message, Session session) throws JMSException {_		_		_		Object delegate = getDelegate()__		if (delegate != this) {_			if (delegate instanceof SessionAwareMessageListener) {_				if (session != null) {_					((SessionAwareMessageListener<Message>) delegate).onMessage(message, session)__					return__				}_				else if (!(delegate instanceof MessageListener)) {_					throw new javax.jms.IllegalStateException("MessageListenerAdapter cannot handle a " +_							"SessionAwareMessageListener delegate if it hasn't been invoked with a Session itself")__				}_			}_			if (delegate instanceof MessageListener) {_				((MessageListener) delegate).onMessage(message)__				return__			}_		}__		_		Object convertedMessage = extractMessage(message)__		String methodName = getListenerMethodName(message, convertedMessage)__		if (methodName == null) {_			throw new javax.jms.IllegalStateException("No default listener method specified: " +_					"Either specify a non-null value for the 'defaultListenerMethod' property or " +_					"override the 'getListenerMethodName' method.")__		}__		_		Object[] listenerArguments = buildListenerArguments(convertedMessage)__		Object result = invokeListenerMethod(methodName, listenerArguments)__		if (result != null) {_			handleResult(result, message, session)__		}_		else {_			logger.trace("No result object given - no result to handle")__		}_	};spring,link,session,aware,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,if,the,target,method,returns,a,non,null,object,wrap,in,a,jms,message,and,send,it,back,param,message,the,incoming,jms,message,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods;override,suppress,warnings,unchecked,public,void,on,message,message,message,session,session,throws,jmsexception,object,delegate,get,delegate,if,delegate,this,if,delegate,instanceof,session,aware,message,listener,if,session,null,session,aware,message,listener,message,delegate,on,message,message,session,return,else,if,delegate,instanceof,message,listener,throw,new,javax,jms,illegal,state,exception,message,listener,adapter,cannot,handle,a,session,aware,message,listener,delegate,if,it,hasn,t,been,invoked,with,a,session,itself,if,delegate,instanceof,message,listener,message,listener,delegate,on,message,message,return,object,converted,message,extract,message,message,string,method,name,get,listener,method,name,message,converted,message,if,method,name,null,throw,new,javax,jms,illegal,state,exception,no,default,listener,method,specified,either,specify,a,non,null,value,for,the,default,listener,method,property,or,override,the,get,listener,method,name,method,object,listener,arguments,build,listener,arguments,converted,message,object,result,invoke,listener,method,method,name,listener,arguments,if,result,null,handle,result,result,message,session,else,logger,trace,no,result,object,given,no,result,to,handle
MessageListenerAdapter -> @Override 	@SuppressWarnings("unchecked") 	public void onMessage(Message message, Session session) throws JMSException;1404937154;Spring {@link SessionAwareMessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. If the target method returns a_non-null object, wrap in a JMS message and send it back._@param message the incoming JMS message_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods;@Override_	@SuppressWarnings("unchecked")_	public void onMessage(Message message, Session session) throws JMSException {_		_		_		Object delegate = getDelegate()__		if (delegate != this) {_			if (delegate instanceof SessionAwareMessageListener) {_				if (session != null) {_					((SessionAwareMessageListener<Message>) delegate).onMessage(message, session)__					return__				}_				else if (!(delegate instanceof MessageListener)) {_					throw new javax.jms.IllegalStateException("MessageListenerAdapter cannot handle a " +_							"SessionAwareMessageListener delegate if it hasn't been invoked with a Session itself")__				}_			}_			if (delegate instanceof MessageListener) {_				((MessageListener) delegate).onMessage(message)__				return__			}_		}__		_		Object convertedMessage = extractMessage(message)__		String methodName = getListenerMethodName(message, convertedMessage)__		if (methodName == null) {_			throw new javax.jms.IllegalStateException("No default listener method specified: " +_					"Either specify a non-null value for the 'defaultListenerMethod' property or " +_					"override the 'getListenerMethodName' method.")__		}__		_		Object[] listenerArguments = buildListenerArguments(convertedMessage)__		Object result = invokeListenerMethod(methodName, listenerArguments)__		if (result != null) {_			handleResult(result, message, session)__		}_		else {_			logger.trace("No result object given - no result to handle")__		}_	};spring,link,session,aware,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,if,the,target,method,returns,a,non,null,object,wrap,in,a,jms,message,and,send,it,back,param,message,the,incoming,jms,message,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods;override,suppress,warnings,unchecked,public,void,on,message,message,message,session,session,throws,jmsexception,object,delegate,get,delegate,if,delegate,this,if,delegate,instanceof,session,aware,message,listener,if,session,null,session,aware,message,listener,message,delegate,on,message,message,session,return,else,if,delegate,instanceof,message,listener,throw,new,javax,jms,illegal,state,exception,message,listener,adapter,cannot,handle,a,session,aware,message,listener,delegate,if,it,hasn,t,been,invoked,with,a,session,itself,if,delegate,instanceof,message,listener,message,listener,delegate,on,message,message,return,object,converted,message,extract,message,message,string,method,name,get,listener,method,name,message,converted,message,if,method,name,null,throw,new,javax,jms,illegal,state,exception,no,default,listener,method,specified,either,specify,a,non,null,value,for,the,default,listener,method,property,or,override,the,get,listener,method,name,method,object,listener,arguments,build,listener,arguments,converted,message,object,result,invoke,listener,method,method,name,listener,arguments,if,result,null,handle,result,result,message,session,else,logger,trace,no,result,object,given,no,result,to,handle
MessageListenerAdapter -> @Override 	@SuppressWarnings("unchecked") 	public void onMessage(Message message, Session session) throws JMSException;1482442567;Spring {@link SessionAwareMessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. If the target method returns a_non-null object, wrap in a JMS message and send it back._@param message the incoming JMS message_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods;@Override_	@SuppressWarnings("unchecked")_	public void onMessage(Message message, Session session) throws JMSException {_		_		_		Object delegate = getDelegate()__		if (delegate != this) {_			if (delegate instanceof SessionAwareMessageListener) {_				if (session != null) {_					((SessionAwareMessageListener<Message>) delegate).onMessage(message, session)__					return__				}_				else if (!(delegate instanceof MessageListener)) {_					throw new javax.jms.IllegalStateException("MessageListenerAdapter cannot handle a " +_							"SessionAwareMessageListener delegate if it hasn't been invoked with a Session itself")__				}_			}_			if (delegate instanceof MessageListener) {_				((MessageListener) delegate).onMessage(message)__				return__			}_		}__		_		Object convertedMessage = extractMessage(message)__		String methodName = getListenerMethodName(message, convertedMessage)__		if (methodName == null) {_			throw new javax.jms.IllegalStateException("No default listener method specified: " +_					"Either specify a non-null value for the 'defaultListenerMethod' property or " +_					"override the 'getListenerMethodName' method.")__		}__		_		Object[] listenerArguments = buildListenerArguments(convertedMessage)__		Object result = invokeListenerMethod(methodName, listenerArguments)__		if (result != null) {_			handleResult(result, message, session)__		}_		else {_			logger.trace("No result object given - no result to handle")__		}_	};spring,link,session,aware,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,if,the,target,method,returns,a,non,null,object,wrap,in,a,jms,message,and,send,it,back,param,message,the,incoming,jms,message,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods;override,suppress,warnings,unchecked,public,void,on,message,message,message,session,session,throws,jmsexception,object,delegate,get,delegate,if,delegate,this,if,delegate,instanceof,session,aware,message,listener,if,session,null,session,aware,message,listener,message,delegate,on,message,message,session,return,else,if,delegate,instanceof,message,listener,throw,new,javax,jms,illegal,state,exception,message,listener,adapter,cannot,handle,a,session,aware,message,listener,delegate,if,it,hasn,t,been,invoked,with,a,session,itself,if,delegate,instanceof,message,listener,message,listener,delegate,on,message,message,return,object,converted,message,extract,message,message,string,method,name,get,listener,method,name,message,converted,message,if,method,name,null,throw,new,javax,jms,illegal,state,exception,no,default,listener,method,specified,either,specify,a,non,null,value,for,the,default,listener,method,property,or,override,the,get,listener,method,name,method,object,listener,arguments,build,listener,arguments,converted,message,object,result,invoke,listener,method,method,name,listener,arguments,if,result,null,handle,result,result,message,session,else,logger,trace,no,result,object,given,no,result,to,handle
MessageListenerAdapter -> @Override 	@SuppressWarnings("unchecked") 	public void onMessage(Message message, Session session) throws JMSException;1496837955;Spring {@link SessionAwareMessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. If the target method returns a_non-null object, wrap in a JMS message and send it back._@param message the incoming JMS message_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods;@Override_	@SuppressWarnings("unchecked")_	public void onMessage(Message message, Session session) throws JMSException {_		_		_		Object delegate = getDelegate()__		if (delegate != this) {_			if (delegate instanceof SessionAwareMessageListener) {_				((SessionAwareMessageListener<Message>) delegate).onMessage(message, session)__				return__			}_			if (delegate instanceof MessageListener) {_				((MessageListener) delegate).onMessage(message)__				return__			}_		}__		_		Object convertedMessage = extractMessage(message)__		String methodName = getListenerMethodName(message, convertedMessage)__		if (methodName == null) {_			throw new javax.jms.IllegalStateException("No default listener method specified: " +_					"Either specify a non-null value for the 'defaultListenerMethod' property or " +_					"override the 'getListenerMethodName' method.")__		}__		_		Object[] listenerArguments = buildListenerArguments(convertedMessage)__		Object result = invokeListenerMethod(methodName, listenerArguments)__		if (result != null) {_			handleResult(result, message, session)__		}_		else {_			logger.trace("No result object given - no result to handle")__		}_	};spring,link,session,aware,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,if,the,target,method,returns,a,non,null,object,wrap,in,a,jms,message,and,send,it,back,param,message,the,incoming,jms,message,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods;override,suppress,warnings,unchecked,public,void,on,message,message,message,session,session,throws,jmsexception,object,delegate,get,delegate,if,delegate,this,if,delegate,instanceof,session,aware,message,listener,session,aware,message,listener,message,delegate,on,message,message,session,return,if,delegate,instanceof,message,listener,message,listener,delegate,on,message,message,return,object,converted,message,extract,message,message,string,method,name,get,listener,method,name,message,converted,message,if,method,name,null,throw,new,javax,jms,illegal,state,exception,no,default,listener,method,specified,either,specify,a,non,null,value,for,the,default,listener,method,property,or,override,the,get,listener,method,name,method,object,listener,arguments,build,listener,arguments,converted,message,object,result,invoke,listener,method,method,name,listener,arguments,if,result,null,handle,result,result,message,session,else,logger,trace,no,result,object,given,no,result,to,handle
MessageListenerAdapter -> @Override 	@SuppressWarnings("unchecked") 	public void onMessage(Message message, @Nullable Session session) throws JMSException;1496259743;Spring {@link SessionAwareMessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. If the target method returns a_non-null object, wrap in a JMS message and send it back._@param message the incoming JMS message_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods;@Override_	@SuppressWarnings("unchecked")_	public void onMessage(Message message, @Nullable Session session) throws JMSException {_		_		_		Object delegate = getDelegate()__		if (delegate != this) {_			if (delegate instanceof SessionAwareMessageListener) {_				if (session != null) {_					((SessionAwareMessageListener<Message>) delegate).onMessage(message, session)__					return__				}_				else if (!(delegate instanceof MessageListener)) {_					throw new javax.jms.IllegalStateException("MessageListenerAdapter cannot handle a " +_							"SessionAwareMessageListener delegate if it hasn't been invoked with a Session itself")__				}_			}_			if (delegate instanceof MessageListener) {_				((MessageListener) delegate).onMessage(message)__				return__			}_		}__		_		Object convertedMessage = extractMessage(message)__		String methodName = getListenerMethodName(message, convertedMessage)__		if (methodName == null) {_			throw new javax.jms.IllegalStateException("No default listener method specified: " +_					"Either specify a non-null value for the 'defaultListenerMethod' property or " +_					"override the 'getListenerMethodName' method.")__		}__		_		Object[] listenerArguments = buildListenerArguments(convertedMessage)__		Object result = invokeListenerMethod(methodName, listenerArguments)__		if (result != null) {_			handleResult(result, message, session)__		}_		else {_			logger.trace("No result object given - no result to handle")__		}_	};spring,link,session,aware,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,if,the,target,method,returns,a,non,null,object,wrap,in,a,jms,message,and,send,it,back,param,message,the,incoming,jms,message,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods;override,suppress,warnings,unchecked,public,void,on,message,message,message,nullable,session,session,throws,jmsexception,object,delegate,get,delegate,if,delegate,this,if,delegate,instanceof,session,aware,message,listener,if,session,null,session,aware,message,listener,message,delegate,on,message,message,session,return,else,if,delegate,instanceof,message,listener,throw,new,javax,jms,illegal,state,exception,message,listener,adapter,cannot,handle,a,session,aware,message,listener,delegate,if,it,hasn,t,been,invoked,with,a,session,itself,if,delegate,instanceof,message,listener,message,listener,delegate,on,message,message,return,object,converted,message,extract,message,message,string,method,name,get,listener,method,name,message,converted,message,if,method,name,null,throw,new,javax,jms,illegal,state,exception,no,default,listener,method,specified,either,specify,a,non,null,value,for,the,default,listener,method,property,or,override,the,get,listener,method,name,method,object,listener,arguments,build,listener,arguments,converted,message,object,result,invoke,listener,method,method,name,listener,arguments,if,result,null,handle,result,result,message,session,else,logger,trace,no,result,object,given,no,result,to,handle
MessageListenerAdapter -> @Override 	@SuppressWarnings("unchecked") 	public void onMessage(Message message, @Nullable Session session) throws JMSException;1500495740;Spring {@link SessionAwareMessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. If the target method returns a_non-null object, wrap in a JMS message and send it back._@param message the incoming JMS message_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods;@Override_	@SuppressWarnings("unchecked")_	public void onMessage(Message message, @Nullable Session session) throws JMSException {_		_		_		Object delegate = getDelegate()__		if (delegate != this) {_			if (delegate instanceof SessionAwareMessageListener) {_				Assert.state(session != null, "Session is required for SessionAwareMessageListener")__				((SessionAwareMessageListener<Message>) delegate).onMessage(message, session)__				return__			}_			if (delegate instanceof MessageListener) {_				((MessageListener) delegate).onMessage(message)__				return__			}_		}__		_		Object convertedMessage = extractMessage(message)__		String methodName = getListenerMethodName(message, convertedMessage)__		if (methodName == null) {_			throw new javax.jms.IllegalStateException("No default listener method specified: " +_					"Either specify a non-null value for the 'defaultListenerMethod' property or " +_					"override the 'getListenerMethodName' method.")__		}__		_		Object[] listenerArguments = buildListenerArguments(convertedMessage)__		Object result = invokeListenerMethod(methodName, listenerArguments)__		if (result != null) {_			handleResult(result, message, session)__		}_		else {_			logger.trace("No result object given - no result to handle")__		}_	};spring,link,session,aware,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,if,the,target,method,returns,a,non,null,object,wrap,in,a,jms,message,and,send,it,back,param,message,the,incoming,jms,message,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods;override,suppress,warnings,unchecked,public,void,on,message,message,message,nullable,session,session,throws,jmsexception,object,delegate,get,delegate,if,delegate,this,if,delegate,instanceof,session,aware,message,listener,assert,state,session,null,session,is,required,for,session,aware,message,listener,session,aware,message,listener,message,delegate,on,message,message,session,return,if,delegate,instanceof,message,listener,message,listener,delegate,on,message,message,return,object,converted,message,extract,message,message,string,method,name,get,listener,method,name,message,converted,message,if,method,name,null,throw,new,javax,jms,illegal,state,exception,no,default,listener,method,specified,either,specify,a,non,null,value,for,the,default,listener,method,property,or,override,the,get,listener,method,name,method,object,listener,arguments,build,listener,arguments,converted,message,object,result,invoke,listener,method,method,name,listener,arguments,if,result,null,handle,result,result,message,session,else,logger,trace,no,result,object,given,no,result,to,handle
MessageListenerAdapter -> @Override 	@SuppressWarnings("unchecked") 	public void onMessage(Message message, @Nullable Session session) throws JMSException;1502974979;Spring {@link SessionAwareMessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. If the target method returns a_non-null object, wrap in a JMS message and send it back._@param message the incoming JMS message_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods;@Override_	@SuppressWarnings("unchecked")_	public void onMessage(Message message, @Nullable Session session) throws JMSException {_		_		_		Object delegate = getDelegate()__		if (delegate != this) {_			if (delegate instanceof SessionAwareMessageListener) {_				Assert.state(session != null, "Session is required for SessionAwareMessageListener")__				((SessionAwareMessageListener<Message>) delegate).onMessage(message, session)__				return__			}_			if (delegate instanceof MessageListener) {_				((MessageListener) delegate).onMessage(message)__				return__			}_		}__		_		Object convertedMessage = extractMessage(message)__		String methodName = getListenerMethodName(message, convertedMessage)__		if (methodName == null) {_			throw new javax.jms.IllegalStateException("No default listener method specified: " +_					"Either specify a non-null value for the 'defaultListenerMethod' property or " +_					"override the 'getListenerMethodName' method.")__		}__		_		Object[] listenerArguments = buildListenerArguments(convertedMessage)__		Object result = invokeListenerMethod(methodName, listenerArguments)__		if (result != null) {_			handleResult(result, message, session)__		}_		else {_			logger.trace("No result object given - no result to handle")__		}_	};spring,link,session,aware,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,if,the,target,method,returns,a,non,null,object,wrap,in,a,jms,message,and,send,it,back,param,message,the,incoming,jms,message,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods;override,suppress,warnings,unchecked,public,void,on,message,message,message,nullable,session,session,throws,jmsexception,object,delegate,get,delegate,if,delegate,this,if,delegate,instanceof,session,aware,message,listener,assert,state,session,null,session,is,required,for,session,aware,message,listener,session,aware,message,listener,message,delegate,on,message,message,session,return,if,delegate,instanceof,message,listener,message,listener,delegate,on,message,message,return,object,converted,message,extract,message,message,string,method,name,get,listener,method,name,message,converted,message,if,method,name,null,throw,new,javax,jms,illegal,state,exception,no,default,listener,method,specified,either,specify,a,non,null,value,for,the,default,listener,method,property,or,override,the,get,listener,method,name,method,object,listener,arguments,build,listener,arguments,converted,message,object,result,invoke,listener,method,method,name,listener,arguments,if,result,null,handle,result,result,message,session,else,logger,trace,no,result,object,given,no,result,to,handle
MessageListenerAdapter -> @Override 	@SuppressWarnings("unchecked") 	public void onMessage(Message message, @Nullable Session session) throws JMSException;1503008146;Spring {@link SessionAwareMessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. If the target method returns a_non-null object, wrap in a JMS message and send it back._@param message the incoming JMS message_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods;@Override_	@SuppressWarnings("unchecked")_	public void onMessage(Message message, @Nullable Session session) throws JMSException {_		_		_		Object delegate = getDelegate()__		if (delegate != this) {_			if (delegate instanceof SessionAwareMessageListener) {_				Assert.state(session != null, "Session is required for SessionAwareMessageListener")__				((SessionAwareMessageListener<Message>) delegate).onMessage(message, session)__				return__			}_			if (delegate instanceof MessageListener) {_				((MessageListener) delegate).onMessage(message)__				return__			}_		}__		_		Object convertedMessage = extractMessage(message)__		String methodName = getListenerMethodName(message, convertedMessage)___		_		Object[] listenerArguments = buildListenerArguments(convertedMessage)__		Object result = invokeListenerMethod(methodName, listenerArguments)__		if (result != null) {_			handleResult(result, message, session)__		}_		else {_			logger.trace("No result object given - no result to handle")__		}_	};spring,link,session,aware,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,if,the,target,method,returns,a,non,null,object,wrap,in,a,jms,message,and,send,it,back,param,message,the,incoming,jms,message,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods;override,suppress,warnings,unchecked,public,void,on,message,message,message,nullable,session,session,throws,jmsexception,object,delegate,get,delegate,if,delegate,this,if,delegate,instanceof,session,aware,message,listener,assert,state,session,null,session,is,required,for,session,aware,message,listener,session,aware,message,listener,message,delegate,on,message,message,session,return,if,delegate,instanceof,message,listener,message,listener,delegate,on,message,message,return,object,converted,message,extract,message,message,string,method,name,get,listener,method,name,message,converted,message,object,listener,arguments,build,listener,arguments,converted,message,object,result,invoke,listener,method,method,name,listener,arguments,if,result,null,handle,result,result,message,session,else,logger,trace,no,result,object,given,no,result,to,handle
MessageListenerAdapter -> @Override 	@SuppressWarnings("unchecked") 	public void onMessage(Message message, @Nullable Session session) throws JMSException;1542613849;Spring {@link SessionAwareMessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. If the target method returns a_non-null object, wrap in a JMS message and send it back._@param message the incoming JMS message_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods;@Override_	@SuppressWarnings("unchecked")_	public void onMessage(Message message, @Nullable Session session) throws JMSException {_		_		_		Object delegate = getDelegate()__		if (delegate != this) {_			if (delegate instanceof SessionAwareMessageListener) {_				Assert.state(session != null, "Session is required for SessionAwareMessageListener")__				((SessionAwareMessageListener<Message>) delegate).onMessage(message, session)__				return__			}_			if (delegate instanceof MessageListener) {_				((MessageListener) delegate).onMessage(message)__				return__			}_		}__		_		Object convertedMessage = extractMessage(message)__		String methodName = getListenerMethodName(message, convertedMessage)___		_		Object[] listenerArguments = buildListenerArguments(convertedMessage)__		Object result = invokeListenerMethod(methodName, listenerArguments)__		if (result != null) {_			handleResult(result, message, session)__		}_		else {_			logger.trace("No result object given - no result to handle")__		}_	};spring,link,session,aware,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,if,the,target,method,returns,a,non,null,object,wrap,in,a,jms,message,and,send,it,back,param,message,the,incoming,jms,message,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods;override,suppress,warnings,unchecked,public,void,on,message,message,message,nullable,session,session,throws,jmsexception,object,delegate,get,delegate,if,delegate,this,if,delegate,instanceof,session,aware,message,listener,assert,state,session,null,session,is,required,for,session,aware,message,listener,session,aware,message,listener,message,delegate,on,message,message,session,return,if,delegate,instanceof,message,listener,message,listener,delegate,on,message,message,return,object,converted,message,extract,message,message,string,method,name,get,listener,method,name,message,converted,message,object,listener,arguments,build,listener,arguments,converted,message,object,result,invoke,listener,method,method,name,listener,arguments,if,result,null,handle,result,result,message,session,else,logger,trace,no,result,object,given,no,result,to,handle
MessageListenerAdapter -> protected void initDefaultStrategies();1328020251;Initialize the default implementations for the adapter's strategies._@see #setMessageConverter_@see org.springframework.jms.support.converter.SimpleMessageConverter;protected void initDefaultStrategies() {_		setMessageConverter(new SimpleMessageConverter())__	};initialize,the,default,implementations,for,the,adapter,s,strategies,see,set,message,converter,see,org,springframework,jms,support,converter,simple,message,converter;protected,void,init,default,strategies,set,message,converter,new,simple,message,converter
MessageListenerAdapter -> protected void initDefaultStrategies();1356735495;Initialize the default implementations for the adapter's strategies._@see #setMessageConverter_@see org.springframework.jms.support.converter.SimpleMessageConverter;protected void initDefaultStrategies() {_		setMessageConverter(new SimpleMessageConverter())__	};initialize,the,default,implementations,for,the,adapter,s,strategies,see,set,message,converter,see,org,springframework,jms,support,converter,simple,message,converter;protected,void,init,default,strategies,set,message,converter,new,simple,message,converter
MessageListenerAdapter -> protected void initDefaultStrategies();1357119239;Initialize the default implementations for the adapter's strategies._@see #setMessageConverter_@see org.springframework.jms.support.converter.SimpleMessageConverter;protected void initDefaultStrategies() {_		setMessageConverter(new SimpleMessageConverter())__	};initialize,the,default,implementations,for,the,adapter,s,strategies,see,set,message,converter,see,org,springframework,jms,support,converter,simple,message,converter;protected,void,init,default,strategies,set,message,converter,new,simple,message,converter
MessageListenerAdapter -> protected void initDefaultStrategies();1368482696;Initialize the default implementations for the adapter's strategies._@see #setMessageConverter_@see org.springframework.jms.support.converter.SimpleMessageConverter;protected void initDefaultStrategies() {_		setMessageConverter(new SimpleMessageConverter())__	};initialize,the,default,implementations,for,the,adapter,s,strategies,see,set,message,converter,see,org,springframework,jms,support,converter,simple,message,converter;protected,void,init,default,strategies,set,message,converter,new,simple,message,converter
MessageListenerAdapter -> protected void initDefaultStrategies();1385412762;Initialize the default implementations for the adapter's strategies._@see #setMessageConverter_@see org.springframework.jms.support.converter.SimpleMessageConverter;protected void initDefaultStrategies() {_		setMessageConverter(new SimpleMessageConverter())__	};initialize,the,default,implementations,for,the,adapter,s,strategies,see,set,message,converter,see,org,springframework,jms,support,converter,simple,message,converter;protected,void,init,default,strategies,set,message,converter,new,simple,message,converter
MessageListenerAdapter -> @Nullable 	protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException;1496837955;Invoke the specified listener method._@param methodName the name of the listener method_@param arguments the message arguments to be passed in_@return the result returned from the listener method_@throws JMSException if thrown by JMS API methods_@see #getListenerMethodName_@see #buildListenerArguments;@Nullable_	protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException {_		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(getDelegate())__			methodInvoker.setTargetMethod(methodName)__			methodInvoker.setArguments(arguments)__			methodInvoker.prepare()__			return methodInvoker.invoke()__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof JMSException) {_				throw (JMSException) targetEx__			}_			else {_				throw new ListenerExecutionFailedException(_						"Listener method '" + methodName + "' threw exception", targetEx)__			}_		}_		catch (Throwable ex) {_			throw new ListenerExecutionFailedException("Failed to invoke target method '" + methodName +_					"' with arguments " + ObjectUtils.nullSafeToString(arguments), ex)__		}_	};invoke,the,specified,listener,method,param,method,name,the,name,of,the,listener,method,param,arguments,the,message,arguments,to,be,passed,in,return,the,result,returned,from,the,listener,method,throws,jmsexception,if,thrown,by,jms,api,methods,see,get,listener,method,name,see,build,listener,arguments;nullable,protected,object,invoke,listener,method,string,method,name,object,arguments,throws,jmsexception,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,get,delegate,method,invoker,set,target,method,method,name,method,invoker,set,arguments,arguments,method,invoker,prepare,return,method,invoker,invoke,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,jmsexception,throw,jmsexception,target,ex,else,throw,new,listener,execution,failed,exception,listener,method,method,name,threw,exception,target,ex,catch,throwable,ex,throw,new,listener,execution,failed,exception,failed,to,invoke,target,method,method,name,with,arguments,object,utils,null,safe,to,string,arguments,ex
MessageListenerAdapter -> @Nullable 	protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException;1500495740;Invoke the specified listener method._@param methodName the name of the listener method_@param arguments the message arguments to be passed in_@return the result returned from the listener method_@throws JMSException if thrown by JMS API methods_@see #getListenerMethodName_@see #buildListenerArguments;@Nullable_	protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException {_		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(getDelegate())__			methodInvoker.setTargetMethod(methodName)__			methodInvoker.setArguments(arguments)__			methodInvoker.prepare()__			return methodInvoker.invoke()__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof JMSException) {_				throw (JMSException) targetEx__			}_			else {_				throw new ListenerExecutionFailedException(_						"Listener method '" + methodName + "' threw exception", targetEx)__			}_		}_		catch (Throwable ex) {_			throw new ListenerExecutionFailedException("Failed to invoke target method '" + methodName +_					"' with arguments " + ObjectUtils.nullSafeToString(arguments), ex)__		}_	};invoke,the,specified,listener,method,param,method,name,the,name,of,the,listener,method,param,arguments,the,message,arguments,to,be,passed,in,return,the,result,returned,from,the,listener,method,throws,jmsexception,if,thrown,by,jms,api,methods,see,get,listener,method,name,see,build,listener,arguments;nullable,protected,object,invoke,listener,method,string,method,name,object,arguments,throws,jmsexception,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,get,delegate,method,invoker,set,target,method,method,name,method,invoker,set,arguments,arguments,method,invoker,prepare,return,method,invoker,invoke,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,jmsexception,throw,jmsexception,target,ex,else,throw,new,listener,execution,failed,exception,listener,method,method,name,threw,exception,target,ex,catch,throwable,ex,throw,new,listener,execution,failed,exception,failed,to,invoke,target,method,method,name,with,arguments,object,utils,null,safe,to,string,arguments,ex
MessageListenerAdapter -> @Nullable 	protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException;1502974979;Invoke the specified listener method._@param methodName the name of the listener method_@param arguments the message arguments to be passed in_@return the result returned from the listener method_@throws JMSException if thrown by JMS API methods_@see #getListenerMethodName_@see #buildListenerArguments;@Nullable_	protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException {_		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(getDelegate())__			methodInvoker.setTargetMethod(methodName)__			methodInvoker.setArguments(arguments)__			methodInvoker.prepare()__			return methodInvoker.invoke()__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof JMSException) {_				throw (JMSException) targetEx__			}_			else {_				throw new ListenerExecutionFailedException(_						"Listener method '" + methodName + "' threw exception", targetEx)__			}_		}_		catch (Throwable ex) {_			throw new ListenerExecutionFailedException("Failed to invoke target method '" + methodName +_					"' with arguments " + ObjectUtils.nullSafeToString(arguments), ex)__		}_	};invoke,the,specified,listener,method,param,method,name,the,name,of,the,listener,method,param,arguments,the,message,arguments,to,be,passed,in,return,the,result,returned,from,the,listener,method,throws,jmsexception,if,thrown,by,jms,api,methods,see,get,listener,method,name,see,build,listener,arguments;nullable,protected,object,invoke,listener,method,string,method,name,object,arguments,throws,jmsexception,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,get,delegate,method,invoker,set,target,method,method,name,method,invoker,set,arguments,arguments,method,invoker,prepare,return,method,invoker,invoke,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,jmsexception,throw,jmsexception,target,ex,else,throw,new,listener,execution,failed,exception,listener,method,method,name,threw,exception,target,ex,catch,throwable,ex,throw,new,listener,execution,failed,exception,failed,to,invoke,target,method,method,name,with,arguments,object,utils,null,safe,to,string,arguments,ex
MessageListenerAdapter -> @Nullable 	protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException;1503008146;Invoke the specified listener method._@param methodName the name of the listener method_@param arguments the message arguments to be passed in_@return the result returned from the listener method_@throws JMSException if thrown by JMS API methods_@see #getListenerMethodName_@see #buildListenerArguments;@Nullable_	protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException {_		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(getDelegate())__			methodInvoker.setTargetMethod(methodName)__			methodInvoker.setArguments(arguments)__			methodInvoker.prepare()__			return methodInvoker.invoke()__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof JMSException) {_				throw (JMSException) targetEx__			}_			else {_				throw new ListenerExecutionFailedException(_						"Listener method '" + methodName + "' threw exception", targetEx)__			}_		}_		catch (Throwable ex) {_			throw new ListenerExecutionFailedException("Failed to invoke target method '" + methodName +_					"' with arguments " + ObjectUtils.nullSafeToString(arguments), ex)__		}_	};invoke,the,specified,listener,method,param,method,name,the,name,of,the,listener,method,param,arguments,the,message,arguments,to,be,passed,in,return,the,result,returned,from,the,listener,method,throws,jmsexception,if,thrown,by,jms,api,methods,see,get,listener,method,name,see,build,listener,arguments;nullable,protected,object,invoke,listener,method,string,method,name,object,arguments,throws,jmsexception,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,get,delegate,method,invoker,set,target,method,method,name,method,invoker,set,arguments,arguments,method,invoker,prepare,return,method,invoker,invoke,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,jmsexception,throw,jmsexception,target,ex,else,throw,new,listener,execution,failed,exception,listener,method,method,name,threw,exception,target,ex,catch,throwable,ex,throw,new,listener,execution,failed,exception,failed,to,invoke,target,method,method,name,with,arguments,object,utils,null,safe,to,string,arguments,ex
MessageListenerAdapter -> @Nullable 	protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException;1542613849;Invoke the specified listener method._@param methodName the name of the listener method_@param arguments the message arguments to be passed in_@return the result returned from the listener method_@throws JMSException if thrown by JMS API methods_@see #getListenerMethodName_@see #buildListenerArguments;@Nullable_	protected Object invokeListenerMethod(String methodName, Object[] arguments) throws JMSException {_		try {_			MethodInvoker methodInvoker = new MethodInvoker()__			methodInvoker.setTargetObject(getDelegate())__			methodInvoker.setTargetMethod(methodName)__			methodInvoker.setArguments(arguments)__			methodInvoker.prepare()__			return methodInvoker.invoke()__		}_		catch (InvocationTargetException ex) {_			Throwable targetEx = ex.getTargetException()__			if (targetEx instanceof JMSException) {_				throw (JMSException) targetEx__			}_			else {_				throw new ListenerExecutionFailedException(_						"Listener method '" + methodName + "' threw exception", targetEx)__			}_		}_		catch (Throwable ex) {_			throw new ListenerExecutionFailedException("Failed to invoke target method '" + methodName +_					"' with arguments " + ObjectUtils.nullSafeToString(arguments), ex)__		}_	};invoke,the,specified,listener,method,param,method,name,the,name,of,the,listener,method,param,arguments,the,message,arguments,to,be,passed,in,return,the,result,returned,from,the,listener,method,throws,jmsexception,if,thrown,by,jms,api,methods,see,get,listener,method,name,see,build,listener,arguments;nullable,protected,object,invoke,listener,method,string,method,name,object,arguments,throws,jmsexception,try,method,invoker,method,invoker,new,method,invoker,method,invoker,set,target,object,get,delegate,method,invoker,set,target,method,method,name,method,invoker,set,arguments,arguments,method,invoker,prepare,return,method,invoker,invoke,catch,invocation,target,exception,ex,throwable,target,ex,ex,get,target,exception,if,target,ex,instanceof,jmsexception,throw,jmsexception,target,ex,else,throw,new,listener,execution,failed,exception,listener,method,method,name,threw,exception,target,ex,catch,throwable,ex,throw,new,listener,execution,failed,exception,failed,to,invoke,target,method,method,name,with,arguments,object,utils,null,safe,to,string,arguments,ex
MessageListenerAdapter -> public void setDefaultResponseQueueName(String destinationName);1328020251;Set the name of the default response queue to send response messages to._This will be applied in case of a request message that does not carry a_"JMSReplyTo" field._<p>Alternatively, specify a JMS Destination object as "defaultResponseDestination"._@see #setDestinationResolver_@see #setDefaultResponseDestination(javax.jms.Destination);public void setDefaultResponseQueueName(String destinationName) {_		this.defaultResponseDestination = new DestinationNameHolder(destinationName, false)__	};set,the,name,of,the,default,response,queue,to,send,response,messages,to,this,will,be,applied,in,case,of,a,request,message,that,does,not,carry,a,jmsreply,to,field,p,alternatively,specify,a,jms,destination,object,as,default,response,destination,see,set,destination,resolver,see,set,default,response,destination,javax,jms,destination;public,void,set,default,response,queue,name,string,destination,name,this,default,response,destination,new,destination,name,holder,destination,name,false
MessageListenerAdapter -> public void setDefaultResponseQueueName(String destinationName);1356735495;Set the name of the default response queue to send response messages to._This will be applied in case of a request message that does not carry a_"JMSReplyTo" field._<p>Alternatively, specify a JMS Destination object as "defaultResponseDestination"._@see #setDestinationResolver_@see #setDefaultResponseDestination(javax.jms.Destination);public void setDefaultResponseQueueName(String destinationName) {_		this.defaultResponseDestination = new DestinationNameHolder(destinationName, false)__	};set,the,name,of,the,default,response,queue,to,send,response,messages,to,this,will,be,applied,in,case,of,a,request,message,that,does,not,carry,a,jmsreply,to,field,p,alternatively,specify,a,jms,destination,object,as,default,response,destination,see,set,destination,resolver,see,set,default,response,destination,javax,jms,destination;public,void,set,default,response,queue,name,string,destination,name,this,default,response,destination,new,destination,name,holder,destination,name,false
MessageListenerAdapter -> public void setDefaultResponseQueueName(String destinationName);1357119239;Set the name of the default response queue to send response messages to._This will be applied in case of a request message that does not carry a_"JMSReplyTo" field._<p>Alternatively, specify a JMS Destination object as "defaultResponseDestination"._@see #setDestinationResolver_@see #setDefaultResponseDestination(javax.jms.Destination);public void setDefaultResponseQueueName(String destinationName) {_		this.defaultResponseDestination = new DestinationNameHolder(destinationName, false)__	};set,the,name,of,the,default,response,queue,to,send,response,messages,to,this,will,be,applied,in,case,of,a,request,message,that,does,not,carry,a,jmsreply,to,field,p,alternatively,specify,a,jms,destination,object,as,default,response,destination,see,set,destination,resolver,see,set,default,response,destination,javax,jms,destination;public,void,set,default,response,queue,name,string,destination,name,this,default,response,destination,new,destination,name,holder,destination,name,false
MessageListenerAdapter -> public void setDefaultResponseQueueName(String destinationName);1368482696;Set the name of the default response queue to send response messages to._This will be applied in case of a request message that does not carry a_"JMSReplyTo" field._<p>Alternatively, specify a JMS Destination object as "defaultResponseDestination"._@see #setDestinationResolver_@see #setDefaultResponseDestination(javax.jms.Destination);public void setDefaultResponseQueueName(String destinationName) {_		this.defaultResponseDestination = new DestinationNameHolder(destinationName, false)__	};set,the,name,of,the,default,response,queue,to,send,response,messages,to,this,will,be,applied,in,case,of,a,request,message,that,does,not,carry,a,jmsreply,to,field,p,alternatively,specify,a,jms,destination,object,as,default,response,destination,see,set,destination,resolver,see,set,default,response,destination,javax,jms,destination;public,void,set,default,response,queue,name,string,destination,name,this,default,response,destination,new,destination,name,holder,destination,name,false
MessageListenerAdapter -> public void setDefaultResponseQueueName(String destinationName);1385412762;Set the name of the default response queue to send response messages to._This will be applied in case of a request message that does not carry a_"JMSReplyTo" field._<p>Alternatively, specify a JMS Destination object as "defaultResponseDestination"._@see #setDestinationResolver_@see #setDefaultResponseDestination(javax.jms.Destination);public void setDefaultResponseQueueName(String destinationName) {_		this.defaultResponseDestination = new DestinationNameHolder(destinationName, false)__	};set,the,name,of,the,default,response,queue,to,send,response,messages,to,this,will,be,applied,in,case,of,a,request,message,that,does,not,carry,a,jmsreply,to,field,p,alternatively,specify,a,jms,destination,object,as,default,response,destination,see,set,destination,resolver,see,set,default,response,destination,javax,jms,destination;public,void,set,default,response,queue,name,string,destination,name,this,default,response,destination,new,destination,name,holder,destination,name,false
MessageListenerAdapter -> protected Destination getResponseDestination(Message request, Message response, Session session) 			throws JMSException;1328020251;Determine a response destination for the given message._<p>The default implementation first checks the JMS Reply-To_{@link Destination} of the supplied request_ if that is not <code>null</code>_it is returned_ if it is <code>null</code>, then the configured_{@link #resolveDefaultResponseDestination default response destination}_is returned_ if this too is <code>null</code>, then an_{@link InvalidDestinationException} is thrown._@param request the original incoming JMS message_@param response the outgoing JMS message about to be sent_@param session the JMS Session to operate on_@return the response destination (never <code>null</code>)_@throws JMSException if thrown by JMS API methods_@throws InvalidDestinationException if no {@link Destination} can be determined_@see #setDefaultResponseDestination_@see javax.jms.Message#getJMSReplyTo();protected Destination getResponseDestination(Message request, Message response, Session session)_			throws JMSException {__		Destination replyTo = request.getJMSReplyTo()__		if (replyTo == null) {_			replyTo = resolveDefaultResponseDestination(session)__			if (replyTo == null) {_				throw new InvalidDestinationException("Cannot determine response destination: " +_						"Request message does not contain reply-to destination, and no default response destination set.")__			}_		}_		return replyTo__	};determine,a,response,destination,for,the,given,message,p,the,default,implementation,first,checks,the,jms,reply,to,link,destination,of,the,supplied,request,if,that,is,not,code,null,code,it,is,returned,if,it,is,code,null,code,then,the,configured,link,resolve,default,response,destination,default,response,destination,is,returned,if,this,too,is,code,null,code,then,an,link,invalid,destination,exception,is,thrown,param,request,the,original,incoming,jms,message,param,response,the,outgoing,jms,message,about,to,be,sent,param,session,the,jms,session,to,operate,on,return,the,response,destination,never,code,null,code,throws,jmsexception,if,thrown,by,jms,api,methods,throws,invalid,destination,exception,if,no,link,destination,can,be,determined,see,set,default,response,destination,see,javax,jms,message,get,jmsreply,to;protected,destination,get,response,destination,message,request,message,response,session,session,throws,jmsexception,destination,reply,to,request,get,jmsreply,to,if,reply,to,null,reply,to,resolve,default,response,destination,session,if,reply,to,null,throw,new,invalid,destination,exception,cannot,determine,response,destination,request,message,does,not,contain,reply,to,destination,and,no,default,response,destination,set,return,reply,to
MessageListenerAdapter -> protected Destination getResponseDestination(Message request, Message response, Session session) 			throws JMSException;1356735495;Determine a response destination for the given message._<p>The default implementation first checks the JMS Reply-To_{@link Destination} of the supplied request_ if that is not {@code null}_it is returned_ if it is {@code null}, then the configured_{@link #resolveDefaultResponseDestination default response destination}_is returned_ if this too is {@code null}, then an_{@link InvalidDestinationException} is thrown._@param request the original incoming JMS message_@param response the outgoing JMS message about to be sent_@param session the JMS Session to operate on_@return the response destination (never {@code null})_@throws JMSException if thrown by JMS API methods_@throws InvalidDestinationException if no {@link Destination} can be determined_@see #setDefaultResponseDestination_@see javax.jms.Message#getJMSReplyTo();protected Destination getResponseDestination(Message request, Message response, Session session)_			throws JMSException {__		Destination replyTo = request.getJMSReplyTo()__		if (replyTo == null) {_			replyTo = resolveDefaultResponseDestination(session)__			if (replyTo == null) {_				throw new InvalidDestinationException("Cannot determine response destination: " +_						"Request message does not contain reply-to destination, and no default response destination set.")__			}_		}_		return replyTo__	};determine,a,response,destination,for,the,given,message,p,the,default,implementation,first,checks,the,jms,reply,to,link,destination,of,the,supplied,request,if,that,is,not,code,null,it,is,returned,if,it,is,code,null,then,the,configured,link,resolve,default,response,destination,default,response,destination,is,returned,if,this,too,is,code,null,then,an,link,invalid,destination,exception,is,thrown,param,request,the,original,incoming,jms,message,param,response,the,outgoing,jms,message,about,to,be,sent,param,session,the,jms,session,to,operate,on,return,the,response,destination,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,throws,invalid,destination,exception,if,no,link,destination,can,be,determined,see,set,default,response,destination,see,javax,jms,message,get,jmsreply,to;protected,destination,get,response,destination,message,request,message,response,session,session,throws,jmsexception,destination,reply,to,request,get,jmsreply,to,if,reply,to,null,reply,to,resolve,default,response,destination,session,if,reply,to,null,throw,new,invalid,destination,exception,cannot,determine,response,destination,request,message,does,not,contain,reply,to,destination,and,no,default,response,destination,set,return,reply,to
MessageListenerAdapter -> protected Destination getResponseDestination(Message request, Message response, Session session) 			throws JMSException;1357119239;Determine a response destination for the given message._<p>The default implementation first checks the JMS Reply-To_{@link Destination} of the supplied request_ if that is not {@code null}_it is returned_ if it is {@code null}, then the configured_{@link #resolveDefaultResponseDestination default response destination}_is returned_ if this too is {@code null}, then an_{@link InvalidDestinationException} is thrown._@param request the original incoming JMS message_@param response the outgoing JMS message about to be sent_@param session the JMS Session to operate on_@return the response destination (never {@code null})_@throws JMSException if thrown by JMS API methods_@throws InvalidDestinationException if no {@link Destination} can be determined_@see #setDefaultResponseDestination_@see javax.jms.Message#getJMSReplyTo();protected Destination getResponseDestination(Message request, Message response, Session session)_			throws JMSException {__		Destination replyTo = request.getJMSReplyTo()__		if (replyTo == null) {_			replyTo = resolveDefaultResponseDestination(session)__			if (replyTo == null) {_				throw new InvalidDestinationException("Cannot determine response destination: " +_						"Request message does not contain reply-to destination, and no default response destination set.")__			}_		}_		return replyTo__	};determine,a,response,destination,for,the,given,message,p,the,default,implementation,first,checks,the,jms,reply,to,link,destination,of,the,supplied,request,if,that,is,not,code,null,it,is,returned,if,it,is,code,null,then,the,configured,link,resolve,default,response,destination,default,response,destination,is,returned,if,this,too,is,code,null,then,an,link,invalid,destination,exception,is,thrown,param,request,the,original,incoming,jms,message,param,response,the,outgoing,jms,message,about,to,be,sent,param,session,the,jms,session,to,operate,on,return,the,response,destination,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,throws,invalid,destination,exception,if,no,link,destination,can,be,determined,see,set,default,response,destination,see,javax,jms,message,get,jmsreply,to;protected,destination,get,response,destination,message,request,message,response,session,session,throws,jmsexception,destination,reply,to,request,get,jmsreply,to,if,reply,to,null,reply,to,resolve,default,response,destination,session,if,reply,to,null,throw,new,invalid,destination,exception,cannot,determine,response,destination,request,message,does,not,contain,reply,to,destination,and,no,default,response,destination,set,return,reply,to
MessageListenerAdapter -> protected Destination getResponseDestination(Message request, Message response, Session session) 			throws JMSException;1368482696;Determine a response destination for the given message._<p>The default implementation first checks the JMS Reply-To_{@link Destination} of the supplied request_ if that is not {@code null}_it is returned_ if it is {@code null}, then the configured_{@link #resolveDefaultResponseDestination default response destination}_is returned_ if this too is {@code null}, then an_{@link InvalidDestinationException} is thrown._@param request the original incoming JMS message_@param response the outgoing JMS message about to be sent_@param session the JMS Session to operate on_@return the response destination (never {@code null})_@throws JMSException if thrown by JMS API methods_@throws InvalidDestinationException if no {@link Destination} can be determined_@see #setDefaultResponseDestination_@see javax.jms.Message#getJMSReplyTo();protected Destination getResponseDestination(Message request, Message response, Session session)_			throws JMSException {__		Destination replyTo = request.getJMSReplyTo()__		if (replyTo == null) {_			replyTo = resolveDefaultResponseDestination(session)__			if (replyTo == null) {_				throw new InvalidDestinationException("Cannot determine response destination: " +_						"Request message does not contain reply-to destination, and no default response destination set.")__			}_		}_		return replyTo__	};determine,a,response,destination,for,the,given,message,p,the,default,implementation,first,checks,the,jms,reply,to,link,destination,of,the,supplied,request,if,that,is,not,code,null,it,is,returned,if,it,is,code,null,then,the,configured,link,resolve,default,response,destination,default,response,destination,is,returned,if,this,too,is,code,null,then,an,link,invalid,destination,exception,is,thrown,param,request,the,original,incoming,jms,message,param,response,the,outgoing,jms,message,about,to,be,sent,param,session,the,jms,session,to,operate,on,return,the,response,destination,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,throws,invalid,destination,exception,if,no,link,destination,can,be,determined,see,set,default,response,destination,see,javax,jms,message,get,jmsreply,to;protected,destination,get,response,destination,message,request,message,response,session,session,throws,jmsexception,destination,reply,to,request,get,jmsreply,to,if,reply,to,null,reply,to,resolve,default,response,destination,session,if,reply,to,null,throw,new,invalid,destination,exception,cannot,determine,response,destination,request,message,does,not,contain,reply,to,destination,and,no,default,response,destination,set,return,reply,to
MessageListenerAdapter -> protected Destination getResponseDestination(Message request, Message response, Session session) 			throws JMSException;1385412762;Determine a response destination for the given message._<p>The default implementation first checks the JMS Reply-To_{@link Destination} of the supplied request_ if that is not {@code null}_it is returned_ if it is {@code null}, then the configured_{@link #resolveDefaultResponseDestination default response destination}_is returned_ if this too is {@code null}, then an_{@link InvalidDestinationException} is thrown._@param request the original incoming JMS message_@param response the outgoing JMS message about to be sent_@param session the JMS Session to operate on_@return the response destination (never {@code null})_@throws JMSException if thrown by JMS API methods_@throws InvalidDestinationException if no {@link Destination} can be determined_@see #setDefaultResponseDestination_@see javax.jms.Message#getJMSReplyTo();protected Destination getResponseDestination(Message request, Message response, Session session)_			throws JMSException {__		Destination replyTo = request.getJMSReplyTo()__		if (replyTo == null) {_			replyTo = resolveDefaultResponseDestination(session)__			if (replyTo == null) {_				throw new InvalidDestinationException("Cannot determine response destination: " +_						"Request message does not contain reply-to destination, and no default response destination set.")__			}_		}_		return replyTo__	};determine,a,response,destination,for,the,given,message,p,the,default,implementation,first,checks,the,jms,reply,to,link,destination,of,the,supplied,request,if,that,is,not,code,null,it,is,returned,if,it,is,code,null,then,the,configured,link,resolve,default,response,destination,default,response,destination,is,returned,if,this,too,is,code,null,then,an,link,invalid,destination,exception,is,thrown,param,request,the,original,incoming,jms,message,param,response,the,outgoing,jms,message,about,to,be,sent,param,session,the,jms,session,to,operate,on,return,the,response,destination,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,throws,invalid,destination,exception,if,no,link,destination,can,be,determined,see,set,default,response,destination,see,javax,jms,message,get,jmsreply,to;protected,destination,get,response,destination,message,request,message,response,session,session,throws,jmsexception,destination,reply,to,request,get,jmsreply,to,if,reply,to,null,reply,to,resolve,default,response,destination,session,if,reply,to,null,throw,new,invalid,destination,exception,cannot,determine,response,destination,request,message,does,not,contain,reply,to,destination,and,no,default,response,destination,set,return,reply,to
MessageListenerAdapter -> protected Object[] buildListenerArguments(Object extractedMessage);1328020251;Build an array of arguments to be passed into the target listener method._Allows for multiple method arguments to be built from a single message object._<p>The default implementation builds an array with the given message object_as sole element. This means that the extracted message will always be passed_into a <i>single</i> method argument, even if it is an array, with the target_method having a corresponding single argument of the array's type declared._<p>This can be overridden to treat special message content such as arrays_differently, for example passing in each element of the message array_as distinct method argument._@param extractedMessage the content of the message_@return the array of arguments to be passed into the_listener method (each element of the array corresponding_to a distinct method argument);protected Object[] buildListenerArguments(Object extractedMessage) {_		return new Object[] {extractedMessage}__	};build,an,array,of,arguments,to,be,passed,into,the,target,listener,method,allows,for,multiple,method,arguments,to,be,built,from,a,single,message,object,p,the,default,implementation,builds,an,array,with,the,given,message,object,as,sole,element,this,means,that,the,extracted,message,will,always,be,passed,into,a,i,single,i,method,argument,even,if,it,is,an,array,with,the,target,method,having,a,corresponding,single,argument,of,the,array,s,type,declared,p,this,can,be,overridden,to,treat,special,message,content,such,as,arrays,differently,for,example,passing,in,each,element,of,the,message,array,as,distinct,method,argument,param,extracted,message,the,content,of,the,message,return,the,array,of,arguments,to,be,passed,into,the,listener,method,each,element,of,the,array,corresponding,to,a,distinct,method,argument;protected,object,build,listener,arguments,object,extracted,message,return,new,object,extracted,message
MessageListenerAdapter -> protected Object[] buildListenerArguments(Object extractedMessage);1356735495;Build an array of arguments to be passed into the target listener method._Allows for multiple method arguments to be built from a single message object._<p>The default implementation builds an array with the given message object_as sole element. This means that the extracted message will always be passed_into a <i>single</i> method argument, even if it is an array, with the target_method having a corresponding single argument of the array's type declared._<p>This can be overridden to treat special message content such as arrays_differently, for example passing in each element of the message array_as distinct method argument._@param extractedMessage the content of the message_@return the array of arguments to be passed into the_listener method (each element of the array corresponding_to a distinct method argument);protected Object[] buildListenerArguments(Object extractedMessage) {_		return new Object[] {extractedMessage}__	};build,an,array,of,arguments,to,be,passed,into,the,target,listener,method,allows,for,multiple,method,arguments,to,be,built,from,a,single,message,object,p,the,default,implementation,builds,an,array,with,the,given,message,object,as,sole,element,this,means,that,the,extracted,message,will,always,be,passed,into,a,i,single,i,method,argument,even,if,it,is,an,array,with,the,target,method,having,a,corresponding,single,argument,of,the,array,s,type,declared,p,this,can,be,overridden,to,treat,special,message,content,such,as,arrays,differently,for,example,passing,in,each,element,of,the,message,array,as,distinct,method,argument,param,extracted,message,the,content,of,the,message,return,the,array,of,arguments,to,be,passed,into,the,listener,method,each,element,of,the,array,corresponding,to,a,distinct,method,argument;protected,object,build,listener,arguments,object,extracted,message,return,new,object,extracted,message
MessageListenerAdapter -> protected Object[] buildListenerArguments(Object extractedMessage);1357119239;Build an array of arguments to be passed into the target listener method._Allows for multiple method arguments to be built from a single message object._<p>The default implementation builds an array with the given message object_as sole element. This means that the extracted message will always be passed_into a <i>single</i> method argument, even if it is an array, with the target_method having a corresponding single argument of the array's type declared._<p>This can be overridden to treat special message content such as arrays_differently, for example passing in each element of the message array_as distinct method argument._@param extractedMessage the content of the message_@return the array of arguments to be passed into the_listener method (each element of the array corresponding_to a distinct method argument);protected Object[] buildListenerArguments(Object extractedMessage) {_		return new Object[] {extractedMessage}__	};build,an,array,of,arguments,to,be,passed,into,the,target,listener,method,allows,for,multiple,method,arguments,to,be,built,from,a,single,message,object,p,the,default,implementation,builds,an,array,with,the,given,message,object,as,sole,element,this,means,that,the,extracted,message,will,always,be,passed,into,a,i,single,i,method,argument,even,if,it,is,an,array,with,the,target,method,having,a,corresponding,single,argument,of,the,array,s,type,declared,p,this,can,be,overridden,to,treat,special,message,content,such,as,arrays,differently,for,example,passing,in,each,element,of,the,message,array,as,distinct,method,argument,param,extracted,message,the,content,of,the,message,return,the,array,of,arguments,to,be,passed,into,the,listener,method,each,element,of,the,array,corresponding,to,a,distinct,method,argument;protected,object,build,listener,arguments,object,extracted,message,return,new,object,extracted,message
MessageListenerAdapter -> protected Object[] buildListenerArguments(Object extractedMessage);1368482696;Build an array of arguments to be passed into the target listener method._Allows for multiple method arguments to be built from a single message object._<p>The default implementation builds an array with the given message object_as sole element. This means that the extracted message will always be passed_into a <i>single</i> method argument, even if it is an array, with the target_method having a corresponding single argument of the array's type declared._<p>This can be overridden to treat special message content such as arrays_differently, for example passing in each element of the message array_as distinct method argument._@param extractedMessage the content of the message_@return the array of arguments to be passed into the_listener method (each element of the array corresponding_to a distinct method argument);protected Object[] buildListenerArguments(Object extractedMessage) {_		return new Object[] {extractedMessage}__	};build,an,array,of,arguments,to,be,passed,into,the,target,listener,method,allows,for,multiple,method,arguments,to,be,built,from,a,single,message,object,p,the,default,implementation,builds,an,array,with,the,given,message,object,as,sole,element,this,means,that,the,extracted,message,will,always,be,passed,into,a,i,single,i,method,argument,even,if,it,is,an,array,with,the,target,method,having,a,corresponding,single,argument,of,the,array,s,type,declared,p,this,can,be,overridden,to,treat,special,message,content,such,as,arrays,differently,for,example,passing,in,each,element,of,the,message,array,as,distinct,method,argument,param,extracted,message,the,content,of,the,message,return,the,array,of,arguments,to,be,passed,into,the,listener,method,each,element,of,the,array,corresponding,to,a,distinct,method,argument;protected,object,build,listener,arguments,object,extracted,message,return,new,object,extracted,message
MessageListenerAdapter -> protected Object[] buildListenerArguments(Object extractedMessage);1385412762;Build an array of arguments to be passed into the target listener method._Allows for multiple method arguments to be built from a single message object._<p>The default implementation builds an array with the given message object_as sole element. This means that the extracted message will always be passed_into a <i>single</i> method argument, even if it is an array, with the target_method having a corresponding single argument of the array's type declared._<p>This can be overridden to treat special message content such as arrays_differently, for example passing in each element of the message array_as distinct method argument._@param extractedMessage the content of the message_@return the array of arguments to be passed into the_listener method (each element of the array corresponding_to a distinct method argument);protected Object[] buildListenerArguments(Object extractedMessage) {_		return new Object[] {extractedMessage}__	};build,an,array,of,arguments,to,be,passed,into,the,target,listener,method,allows,for,multiple,method,arguments,to,be,built,from,a,single,message,object,p,the,default,implementation,builds,an,array,with,the,given,message,object,as,sole,element,this,means,that,the,extracted,message,will,always,be,passed,into,a,i,single,i,method,argument,even,if,it,is,an,array,with,the,target,method,having,a,corresponding,single,argument,of,the,array,s,type,declared,p,this,can,be,overridden,to,treat,special,message,content,such,as,arrays,differently,for,example,passing,in,each,element,of,the,message,array,as,distinct,method,argument,param,extracted,message,the,content,of,the,message,return,the,array,of,arguments,to,be,passed,into,the,listener,method,each,element,of,the,array,corresponding,to,a,distinct,method,argument;protected,object,build,listener,arguments,object,extracted,message,return,new,object,extracted,message
MessageListenerAdapter -> protected Object[] buildListenerArguments(Object extractedMessage);1397718966;Build an array of arguments to be passed into the target listener method._Allows for multiple method arguments to be built from a single message object._<p>The default implementation builds an array with the given message object_as sole element. This means that the extracted message will always be passed_into a <i>single</i> method argument, even if it is an array, with the target_method having a corresponding single argument of the array's type declared._<p>This can be overridden to treat special message content such as arrays_differently, for example passing in each element of the message array_as distinct method argument._@param extractedMessage the content of the message_@return the array of arguments to be passed into the_listener method (each element of the array corresponding_to a distinct method argument);protected Object[] buildListenerArguments(Object extractedMessage) {_		return new Object[] {extractedMessage}__	};build,an,array,of,arguments,to,be,passed,into,the,target,listener,method,allows,for,multiple,method,arguments,to,be,built,from,a,single,message,object,p,the,default,implementation,builds,an,array,with,the,given,message,object,as,sole,element,this,means,that,the,extracted,message,will,always,be,passed,into,a,i,single,i,method,argument,even,if,it,is,an,array,with,the,target,method,having,a,corresponding,single,argument,of,the,array,s,type,declared,p,this,can,be,overridden,to,treat,special,message,content,such,as,arrays,differently,for,example,passing,in,each,element,of,the,message,array,as,distinct,method,argument,param,extracted,message,the,content,of,the,message,return,the,array,of,arguments,to,be,passed,into,the,listener,method,each,element,of,the,array,corresponding,to,a,distinct,method,argument;protected,object,build,listener,arguments,object,extracted,message,return,new,object,extracted,message
MessageListenerAdapter -> protected Object[] buildListenerArguments(Object extractedMessage);1404937154;Build an array of arguments to be passed into the target listener method._Allows for multiple method arguments to be built from a single message object._<p>The default implementation builds an array with the given message object_as sole element. This means that the extracted message will always be passed_into a <i>single</i> method argument, even if it is an array, with the target_method having a corresponding single argument of the array's type declared._<p>This can be overridden to treat special message content such as arrays_differently, for example passing in each element of the message array_as distinct method argument._@param extractedMessage the content of the message_@return the array of arguments to be passed into the_listener method (each element of the array corresponding_to a distinct method argument);protected Object[] buildListenerArguments(Object extractedMessage) {_		return new Object[] {extractedMessage}__	};build,an,array,of,arguments,to,be,passed,into,the,target,listener,method,allows,for,multiple,method,arguments,to,be,built,from,a,single,message,object,p,the,default,implementation,builds,an,array,with,the,given,message,object,as,sole,element,this,means,that,the,extracted,message,will,always,be,passed,into,a,i,single,i,method,argument,even,if,it,is,an,array,with,the,target,method,having,a,corresponding,single,argument,of,the,array,s,type,declared,p,this,can,be,overridden,to,treat,special,message,content,such,as,arrays,differently,for,example,passing,in,each,element,of,the,message,array,as,distinct,method,argument,param,extracted,message,the,content,of,the,message,return,the,array,of,arguments,to,be,passed,into,the,listener,method,each,element,of,the,array,corresponding,to,a,distinct,method,argument;protected,object,build,listener,arguments,object,extracted,message,return,new,object,extracted,message
MessageListenerAdapter -> protected Object[] buildListenerArguments(Object extractedMessage);1482442567;Build an array of arguments to be passed into the target listener method._Allows for multiple method arguments to be built from a single message object._<p>The default implementation builds an array with the given message object_as sole element. This means that the extracted message will always be passed_into a <i>single</i> method argument, even if it is an array, with the target_method having a corresponding single argument of the array's type declared._<p>This can be overridden to treat special message content such as arrays_differently, for example passing in each element of the message array_as distinct method argument._@param extractedMessage the content of the message_@return the array of arguments to be passed into the_listener method (each element of the array corresponding_to a distinct method argument);protected Object[] buildListenerArguments(Object extractedMessage) {_		return new Object[] {extractedMessage}__	};build,an,array,of,arguments,to,be,passed,into,the,target,listener,method,allows,for,multiple,method,arguments,to,be,built,from,a,single,message,object,p,the,default,implementation,builds,an,array,with,the,given,message,object,as,sole,element,this,means,that,the,extracted,message,will,always,be,passed,into,a,i,single,i,method,argument,even,if,it,is,an,array,with,the,target,method,having,a,corresponding,single,argument,of,the,array,s,type,declared,p,this,can,be,overridden,to,treat,special,message,content,such,as,arrays,differently,for,example,passing,in,each,element,of,the,message,array,as,distinct,method,argument,param,extracted,message,the,content,of,the,message,return,the,array,of,arguments,to,be,passed,into,the,listener,method,each,element,of,the,array,corresponding,to,a,distinct,method,argument;protected,object,build,listener,arguments,object,extracted,message,return,new,object,extracted,message
MessageListenerAdapter -> protected Object[] buildListenerArguments(Object extractedMessage);1496259743;Build an array of arguments to be passed into the target listener method._Allows for multiple method arguments to be built from a single message object._<p>The default implementation builds an array with the given message object_as sole element. This means that the extracted message will always be passed_into a <i>single</i> method argument, even if it is an array, with the target_method having a corresponding single argument of the array's type declared._<p>This can be overridden to treat special message content such as arrays_differently, for example passing in each element of the message array_as distinct method argument._@param extractedMessage the content of the message_@return the array of arguments to be passed into the_listener method (each element of the array corresponding_to a distinct method argument);protected Object[] buildListenerArguments(Object extractedMessage) {_		return new Object[] {extractedMessage}__	};build,an,array,of,arguments,to,be,passed,into,the,target,listener,method,allows,for,multiple,method,arguments,to,be,built,from,a,single,message,object,p,the,default,implementation,builds,an,array,with,the,given,message,object,as,sole,element,this,means,that,the,extracted,message,will,always,be,passed,into,a,i,single,i,method,argument,even,if,it,is,an,array,with,the,target,method,having,a,corresponding,single,argument,of,the,array,s,type,declared,p,this,can,be,overridden,to,treat,special,message,content,such,as,arrays,differently,for,example,passing,in,each,element,of,the,message,array,as,distinct,method,argument,param,extracted,message,the,content,of,the,message,return,the,array,of,arguments,to,be,passed,into,the,listener,method,each,element,of,the,array,corresponding,to,a,distinct,method,argument;protected,object,build,listener,arguments,object,extracted,message,return,new,object,extracted,message
MessageListenerAdapter -> protected Object[] buildListenerArguments(Object extractedMessage);1496837955;Build an array of arguments to be passed into the target listener method._Allows for multiple method arguments to be built from a single message object._<p>The default implementation builds an array with the given message object_as sole element. This means that the extracted message will always be passed_into a <i>single</i> method argument, even if it is an array, with the target_method having a corresponding single argument of the array's type declared._<p>This can be overridden to treat special message content such as arrays_differently, for example passing in each element of the message array_as distinct method argument._@param extractedMessage the content of the message_@return the array of arguments to be passed into the_listener method (each element of the array corresponding_to a distinct method argument);protected Object[] buildListenerArguments(Object extractedMessage) {_		return new Object[] {extractedMessage}__	};build,an,array,of,arguments,to,be,passed,into,the,target,listener,method,allows,for,multiple,method,arguments,to,be,built,from,a,single,message,object,p,the,default,implementation,builds,an,array,with,the,given,message,object,as,sole,element,this,means,that,the,extracted,message,will,always,be,passed,into,a,i,single,i,method,argument,even,if,it,is,an,array,with,the,target,method,having,a,corresponding,single,argument,of,the,array,s,type,declared,p,this,can,be,overridden,to,treat,special,message,content,such,as,arrays,differently,for,example,passing,in,each,element,of,the,message,array,as,distinct,method,argument,param,extracted,message,the,content,of,the,message,return,the,array,of,arguments,to,be,passed,into,the,listener,method,each,element,of,the,array,corresponding,to,a,distinct,method,argument;protected,object,build,listener,arguments,object,extracted,message,return,new,object,extracted,message
MessageListenerAdapter -> protected Object[] buildListenerArguments(Object extractedMessage);1500495740;Build an array of arguments to be passed into the target listener method._Allows for multiple method arguments to be built from a single message object._<p>The default implementation builds an array with the given message object_as sole element. This means that the extracted message will always be passed_into a <i>single</i> method argument, even if it is an array, with the target_method having a corresponding single argument of the array's type declared._<p>This can be overridden to treat special message content such as arrays_differently, for example passing in each element of the message array_as distinct method argument._@param extractedMessage the content of the message_@return the array of arguments to be passed into the_listener method (each element of the array corresponding_to a distinct method argument);protected Object[] buildListenerArguments(Object extractedMessage) {_		return new Object[] {extractedMessage}__	};build,an,array,of,arguments,to,be,passed,into,the,target,listener,method,allows,for,multiple,method,arguments,to,be,built,from,a,single,message,object,p,the,default,implementation,builds,an,array,with,the,given,message,object,as,sole,element,this,means,that,the,extracted,message,will,always,be,passed,into,a,i,single,i,method,argument,even,if,it,is,an,array,with,the,target,method,having,a,corresponding,single,argument,of,the,array,s,type,declared,p,this,can,be,overridden,to,treat,special,message,content,such,as,arrays,differently,for,example,passing,in,each,element,of,the,message,array,as,distinct,method,argument,param,extracted,message,the,content,of,the,message,return,the,array,of,arguments,to,be,passed,into,the,listener,method,each,element,of,the,array,corresponding,to,a,distinct,method,argument;protected,object,build,listener,arguments,object,extracted,message,return,new,object,extracted,message
MessageListenerAdapter -> protected Object[] buildListenerArguments(Object extractedMessage);1502974979;Build an array of arguments to be passed into the target listener method._Allows for multiple method arguments to be built from a single message object._<p>The default implementation builds an array with the given message object_as sole element. This means that the extracted message will always be passed_into a <i>single</i> method argument, even if it is an array, with the target_method having a corresponding single argument of the array's type declared._<p>This can be overridden to treat special message content such as arrays_differently, for example passing in each element of the message array_as distinct method argument._@param extractedMessage the content of the message_@return the array of arguments to be passed into the_listener method (each element of the array corresponding_to a distinct method argument);protected Object[] buildListenerArguments(Object extractedMessage) {_		return new Object[] {extractedMessage}__	};build,an,array,of,arguments,to,be,passed,into,the,target,listener,method,allows,for,multiple,method,arguments,to,be,built,from,a,single,message,object,p,the,default,implementation,builds,an,array,with,the,given,message,object,as,sole,element,this,means,that,the,extracted,message,will,always,be,passed,into,a,i,single,i,method,argument,even,if,it,is,an,array,with,the,target,method,having,a,corresponding,single,argument,of,the,array,s,type,declared,p,this,can,be,overridden,to,treat,special,message,content,such,as,arrays,differently,for,example,passing,in,each,element,of,the,message,array,as,distinct,method,argument,param,extracted,message,the,content,of,the,message,return,the,array,of,arguments,to,be,passed,into,the,listener,method,each,element,of,the,array,corresponding,to,a,distinct,method,argument;protected,object,build,listener,arguments,object,extracted,message,return,new,object,extracted,message
MessageListenerAdapter -> protected Object[] buildListenerArguments(Object extractedMessage);1503008146;Build an array of arguments to be passed into the target listener method._Allows for multiple method arguments to be built from a single message object._<p>The default implementation builds an array with the given message object_as sole element. This means that the extracted message will always be passed_into a <i>single</i> method argument, even if it is an array, with the target_method having a corresponding single argument of the array's type declared._<p>This can be overridden to treat special message content such as arrays_differently, for example passing in each element of the message array_as distinct method argument._@param extractedMessage the content of the message_@return the array of arguments to be passed into the_listener method (each element of the array corresponding_to a distinct method argument);protected Object[] buildListenerArguments(Object extractedMessage) {_		return new Object[] {extractedMessage}__	};build,an,array,of,arguments,to,be,passed,into,the,target,listener,method,allows,for,multiple,method,arguments,to,be,built,from,a,single,message,object,p,the,default,implementation,builds,an,array,with,the,given,message,object,as,sole,element,this,means,that,the,extracted,message,will,always,be,passed,into,a,i,single,i,method,argument,even,if,it,is,an,array,with,the,target,method,having,a,corresponding,single,argument,of,the,array,s,type,declared,p,this,can,be,overridden,to,treat,special,message,content,such,as,arrays,differently,for,example,passing,in,each,element,of,the,message,array,as,distinct,method,argument,param,extracted,message,the,content,of,the,message,return,the,array,of,arguments,to,be,passed,into,the,listener,method,each,element,of,the,array,corresponding,to,a,distinct,method,argument;protected,object,build,listener,arguments,object,extracted,message,return,new,object,extracted,message
MessageListenerAdapter -> protected Object[] buildListenerArguments(Object extractedMessage);1542613849;Build an array of arguments to be passed into the target listener method._Allows for multiple method arguments to be built from a single message object._<p>The default implementation builds an array with the given message object_as sole element. This means that the extracted message will always be passed_into a <i>single</i> method argument, even if it is an array, with the target_method having a corresponding single argument of the array's type declared._<p>This can be overridden to treat special message content such as arrays_differently, for example passing in each element of the message array_as distinct method argument._@param extractedMessage the content of the message_@return the array of arguments to be passed into the_listener method (each element of the array corresponding_to a distinct method argument);protected Object[] buildListenerArguments(Object extractedMessage) {_		return new Object[] {extractedMessage}__	};build,an,array,of,arguments,to,be,passed,into,the,target,listener,method,allows,for,multiple,method,arguments,to,be,built,from,a,single,message,object,p,the,default,implementation,builds,an,array,with,the,given,message,object,as,sole,element,this,means,that,the,extracted,message,will,always,be,passed,into,a,i,single,i,method,argument,even,if,it,is,an,array,with,the,target,method,having,a,corresponding,single,argument,of,the,array,s,type,declared,p,this,can,be,overridden,to,treat,special,message,content,such,as,arrays,differently,for,example,passing,in,each,element,of,the,message,array,as,distinct,method,argument,param,extracted,message,the,content,of,the,message,return,the,array,of,arguments,to,be,passed,into,the,listener,method,each,element,of,the,array,corresponding,to,a,distinct,method,argument;protected,object,build,listener,arguments,object,extracted,message,return,new,object,extracted,message
MessageListenerAdapter -> public void onMessage(Message message);1328020251;Standard JMS {@link MessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. In case of an exception, the_{@link #handleListenerException(Throwable)} method will be invoked._<p><b>Note:</b> Does not support sending response messages based on_result objects returned from listener methods. Use the_{@link SessionAwareMessageListener} entry point (typically through a Spring_message listener container) for handling result objects as well._@param message the incoming JMS message_@see #handleListenerException_@see #onMessage(javax.jms.Message, javax.jms.Session);public void onMessage(Message message) {_		try {_			onMessage(message, null)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};standard,jms,link,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,in,case,of,an,exception,the,link,handle,listener,exception,throwable,method,will,be,invoked,p,b,note,b,does,not,support,sending,response,messages,based,on,result,objects,returned,from,listener,methods,use,the,link,session,aware,message,listener,entry,point,typically,through,a,spring,message,listener,container,for,handling,result,objects,as,well,param,message,the,incoming,jms,message,see,handle,listener,exception,see,on,message,javax,jms,message,javax,jms,session;public,void,on,message,message,message,try,on,message,message,null,catch,throwable,ex,handle,listener,exception,ex
MessageListenerAdapter -> public void onMessage(Message message);1357119239;Standard JMS {@link MessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. In case of an exception, the_{@link #handleListenerException(Throwable)} method will be invoked._<p><b>Note:</b> Does not support sending response messages based on_result objects returned from listener methods. Use the_{@link SessionAwareMessageListener} entry point (typically through a Spring_message listener container) for handling result objects as well._@param message the incoming JMS message_@see #handleListenerException_@see #onMessage(javax.jms.Message, javax.jms.Session);public void onMessage(Message message) {_		try {_			onMessage(message, null)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};standard,jms,link,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,in,case,of,an,exception,the,link,handle,listener,exception,throwable,method,will,be,invoked,p,b,note,b,does,not,support,sending,response,messages,based,on,result,objects,returned,from,listener,methods,use,the,link,session,aware,message,listener,entry,point,typically,through,a,spring,message,listener,container,for,handling,result,objects,as,well,param,message,the,incoming,jms,message,see,handle,listener,exception,see,on,message,javax,jms,message,javax,jms,session;public,void,on,message,message,message,try,on,message,message,null,catch,throwable,ex,handle,listener,exception,ex
MessageListenerAdapter -> @Override 	public void onMessage(Message message);1356735495;Standard JMS {@link MessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. In case of an exception, the_{@link #handleListenerException(Throwable)} method will be invoked._<p><b>Note:</b> Does not support sending response messages based on_result objects returned from listener methods. Use the_{@link SessionAwareMessageListener} entry point (typically through a Spring_message listener container) for handling result objects as well._@param message the incoming JMS message_@see #handleListenerException_@see #onMessage(javax.jms.Message, javax.jms.Session);@Override_	public void onMessage(Message message) {_		try {_			onMessage(message, null)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};standard,jms,link,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,in,case,of,an,exception,the,link,handle,listener,exception,throwable,method,will,be,invoked,p,b,note,b,does,not,support,sending,response,messages,based,on,result,objects,returned,from,listener,methods,use,the,link,session,aware,message,listener,entry,point,typically,through,a,spring,message,listener,container,for,handling,result,objects,as,well,param,message,the,incoming,jms,message,see,handle,listener,exception,see,on,message,javax,jms,message,javax,jms,session;override,public,void,on,message,message,message,try,on,message,message,null,catch,throwable,ex,handle,listener,exception,ex
MessageListenerAdapter -> @Override 	public void onMessage(Message message);1368482696;Standard JMS {@link MessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. In case of an exception, the_{@link #handleListenerException(Throwable)} method will be invoked._<p><b>Note:</b> Does not support sending response messages based on_result objects returned from listener methods. Use the_{@link SessionAwareMessageListener} entry point (typically through a Spring_message listener container) for handling result objects as well._@param message the incoming JMS message_@see #handleListenerException_@see #onMessage(javax.jms.Message, javax.jms.Session);@Override_	public void onMessage(Message message) {_		try {_			onMessage(message, null)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};standard,jms,link,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,in,case,of,an,exception,the,link,handle,listener,exception,throwable,method,will,be,invoked,p,b,note,b,does,not,support,sending,response,messages,based,on,result,objects,returned,from,listener,methods,use,the,link,session,aware,message,listener,entry,point,typically,through,a,spring,message,listener,container,for,handling,result,objects,as,well,param,message,the,incoming,jms,message,see,handle,listener,exception,see,on,message,javax,jms,message,javax,jms,session;override,public,void,on,message,message,message,try,on,message,message,null,catch,throwable,ex,handle,listener,exception,ex
MessageListenerAdapter -> @Override 	public void onMessage(Message message);1385412762;Standard JMS {@link MessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. In case of an exception, the_{@link #handleListenerException(Throwable)} method will be invoked._<p><b>Note:</b> Does not support sending response messages based on_result objects returned from listener methods. Use the_{@link SessionAwareMessageListener} entry point (typically through a Spring_message listener container) for handling result objects as well._@param message the incoming JMS message_@see #handleListenerException_@see #onMessage(javax.jms.Message, javax.jms.Session);@Override_	public void onMessage(Message message) {_		try {_			onMessage(message, null)__		}_		catch (Throwable ex) {_			handleListenerException(ex)__		}_	};standard,jms,link,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,in,case,of,an,exception,the,link,handle,listener,exception,throwable,method,will,be,invoked,p,b,note,b,does,not,support,sending,response,messages,based,on,result,objects,returned,from,listener,methods,use,the,link,session,aware,message,listener,entry,point,typically,through,a,spring,message,listener,container,for,handling,result,objects,as,well,param,message,the,incoming,jms,message,see,handle,listener,exception,see,on,message,javax,jms,message,javax,jms,session;override,public,void,on,message,message,message,try,on,message,message,null,catch,throwable,ex,handle,listener,exception,ex
MessageListenerAdapter -> @SuppressWarnings("unchecked") 	public void onMessage(Message message, Session session) throws JMSException;1328020251;Spring {@link SessionAwareMessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. If the target method returns a_non-null object, wrap in a JMS message and send it back._@param message the incoming JMS message_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods;@SuppressWarnings("unchecked")_	public void onMessage(Message message, Session session) throws JMSException {_		_		_		Object delegate = getDelegate()__		if (delegate != this) {_			if (delegate instanceof SessionAwareMessageListener) {_				if (session != null) {_					((SessionAwareMessageListener) delegate).onMessage(message, session)__					return__				}_				else if (!(delegate instanceof MessageListener)) {_					throw new javax.jms.IllegalStateException("MessageListenerAdapter cannot handle a " +_							"SessionAwareMessageListener delegate if it hasn't been invoked with a Session itself")__				}_			}_			if (delegate instanceof MessageListener) {_				((MessageListener) delegate).onMessage(message)__				return__			}_		}__		_		Object convertedMessage = extractMessage(message)__		String methodName = getListenerMethodName(message, convertedMessage)__		if (methodName == null) {_			throw new javax.jms.IllegalStateException("No default listener method specified: " +_					"Either specify a non-null value for the 'defaultListenerMethod' property or " +_					"override the 'getListenerMethodName' method.")__		}__		_		Object[] listenerArguments = buildListenerArguments(convertedMessage)__		Object result = invokeListenerMethod(methodName, listenerArguments)__		if (result != null) {_			handleResult(result, message, session)__		}_		else {_			logger.trace("No result object given - no result to handle")__		}_	};spring,link,session,aware,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,if,the,target,method,returns,a,non,null,object,wrap,in,a,jms,message,and,send,it,back,param,message,the,incoming,jms,message,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods;suppress,warnings,unchecked,public,void,on,message,message,message,session,session,throws,jmsexception,object,delegate,get,delegate,if,delegate,this,if,delegate,instanceof,session,aware,message,listener,if,session,null,session,aware,message,listener,delegate,on,message,message,session,return,else,if,delegate,instanceof,message,listener,throw,new,javax,jms,illegal,state,exception,message,listener,adapter,cannot,handle,a,session,aware,message,listener,delegate,if,it,hasn,t,been,invoked,with,a,session,itself,if,delegate,instanceof,message,listener,message,listener,delegate,on,message,message,return,object,converted,message,extract,message,message,string,method,name,get,listener,method,name,message,converted,message,if,method,name,null,throw,new,javax,jms,illegal,state,exception,no,default,listener,method,specified,either,specify,a,non,null,value,for,the,default,listener,method,property,or,override,the,get,listener,method,name,method,object,listener,arguments,build,listener,arguments,converted,message,object,result,invoke,listener,method,method,name,listener,arguments,if,result,null,handle,result,result,message,session,else,logger,trace,no,result,object,given,no,result,to,handle
MessageListenerAdapter -> @SuppressWarnings("unchecked") 	public void onMessage(Message message, Session session) throws JMSException;1357119239;Spring {@link SessionAwareMessageListener} entry point._<p>Delegates the message to the target listener method, with appropriate_conversion of the message argument. If the target method returns a_non-null object, wrap in a JMS message and send it back._@param message the incoming JMS message_@param session the JMS session to operate on_@throws JMSException if thrown by JMS API methods;@SuppressWarnings("unchecked")_	public void onMessage(Message message, Session session) throws JMSException {_		_		_		Object delegate = getDelegate()__		if (delegate != this) {_			if (delegate instanceof SessionAwareMessageListener) {_				if (session != null) {_					((SessionAwareMessageListener) delegate).onMessage(message, session)__					return__				}_				else if (!(delegate instanceof MessageListener)) {_					throw new javax.jms.IllegalStateException("MessageListenerAdapter cannot handle a " +_							"SessionAwareMessageListener delegate if it hasn't been invoked with a Session itself")__				}_			}_			if (delegate instanceof MessageListener) {_				((MessageListener) delegate).onMessage(message)__				return__			}_		}__		_		Object convertedMessage = extractMessage(message)__		String methodName = getListenerMethodName(message, convertedMessage)__		if (methodName == null) {_			throw new javax.jms.IllegalStateException("No default listener method specified: " +_					"Either specify a non-null value for the 'defaultListenerMethod' property or " +_					"override the 'getListenerMethodName' method.")__		}__		_		Object[] listenerArguments = buildListenerArguments(convertedMessage)__		Object result = invokeListenerMethod(methodName, listenerArguments)__		if (result != null) {_			handleResult(result, message, session)__		}_		else {_			logger.trace("No result object given - no result to handle")__		}_	};spring,link,session,aware,message,listener,entry,point,p,delegates,the,message,to,the,target,listener,method,with,appropriate,conversion,of,the,message,argument,if,the,target,method,returns,a,non,null,object,wrap,in,a,jms,message,and,send,it,back,param,message,the,incoming,jms,message,param,session,the,jms,session,to,operate,on,throws,jmsexception,if,thrown,by,jms,api,methods;suppress,warnings,unchecked,public,void,on,message,message,message,session,session,throws,jmsexception,object,delegate,get,delegate,if,delegate,this,if,delegate,instanceof,session,aware,message,listener,if,session,null,session,aware,message,listener,delegate,on,message,message,session,return,else,if,delegate,instanceof,message,listener,throw,new,javax,jms,illegal,state,exception,message,listener,adapter,cannot,handle,a,session,aware,message,listener,delegate,if,it,hasn,t,been,invoked,with,a,session,itself,if,delegate,instanceof,message,listener,message,listener,delegate,on,message,message,return,object,converted,message,extract,message,message,string,method,name,get,listener,method,name,message,converted,message,if,method,name,null,throw,new,javax,jms,illegal,state,exception,no,default,listener,method,specified,either,specify,a,non,null,value,for,the,default,listener,method,property,or,override,the,get,listener,method,name,method,object,listener,arguments,build,listener,arguments,converted,message,object,result,invoke,listener,method,method,name,listener,arguments,if,result,null,handle,result,result,message,session,else,logger,trace,no,result,object,given,no,result,to,handle
MessageListenerAdapter -> public MessageListenerAdapter();1328020251;Create a new {@link MessageListenerAdapter} with default settings.;public MessageListenerAdapter() {_		initDefaultStrategies()__		this.delegate = this__	};create,a,new,link,message,listener,adapter,with,default,settings;public,message,listener,adapter,init,default,strategies,this,delegate,this
MessageListenerAdapter -> public MessageListenerAdapter();1356735495;Create a new {@link MessageListenerAdapter} with default settings.;public MessageListenerAdapter() {_		initDefaultStrategies()__		this.delegate = this__	};create,a,new,link,message,listener,adapter,with,default,settings;public,message,listener,adapter,init,default,strategies,this,delegate,this
MessageListenerAdapter -> public MessageListenerAdapter();1357119239;Create a new {@link MessageListenerAdapter} with default settings.;public MessageListenerAdapter() {_		initDefaultStrategies()__		this.delegate = this__	};create,a,new,link,message,listener,adapter,with,default,settings;public,message,listener,adapter,init,default,strategies,this,delegate,this
MessageListenerAdapter -> public MessageListenerAdapter();1368482696;Create a new {@link MessageListenerAdapter} with default settings.;public MessageListenerAdapter() {_		initDefaultStrategies()__		this.delegate = this__	};create,a,new,link,message,listener,adapter,with,default,settings;public,message,listener,adapter,init,default,strategies,this,delegate,this
MessageListenerAdapter -> public MessageListenerAdapter();1385412762;Create a new {@link MessageListenerAdapter} with default settings.;public MessageListenerAdapter() {_		initDefaultStrategies()__		this.delegate = this__	};create,a,new,link,message,listener,adapter,with,default,settings;public,message,listener,adapter,init,default,strategies,this,delegate,this
MessageListenerAdapter -> public MessageListenerAdapter();1397718966;Create a new {@link MessageListenerAdapter} with default settings.;public MessageListenerAdapter() {_		initDefaultStrategies()__		this.delegate = this__	};create,a,new,link,message,listener,adapter,with,default,settings;public,message,listener,adapter,init,default,strategies,this,delegate,this
MessageListenerAdapter -> public MessageListenerAdapter();1404937154;Create a new {@link MessageListenerAdapter} with default settings.;public MessageListenerAdapter() {_		this.delegate = this__	};create,a,new,link,message,listener,adapter,with,default,settings;public,message,listener,adapter,this,delegate,this
MessageListenerAdapter -> public MessageListenerAdapter();1482442567;Create a new {@link MessageListenerAdapter} with default settings.;public MessageListenerAdapter() {_		this.delegate = this__	};create,a,new,link,message,listener,adapter,with,default,settings;public,message,listener,adapter,this,delegate,this
MessageListenerAdapter -> public MessageListenerAdapter();1496259743;Create a new {@link MessageListenerAdapter} with default settings.;public MessageListenerAdapter() {_		this.delegate = this__	};create,a,new,link,message,listener,adapter,with,default,settings;public,message,listener,adapter,this,delegate,this
MessageListenerAdapter -> public MessageListenerAdapter();1496837955;Create a new {@link MessageListenerAdapter} with default settings.;public MessageListenerAdapter() {_		this.delegate = this__	};create,a,new,link,message,listener,adapter,with,default,settings;public,message,listener,adapter,this,delegate,this
MessageListenerAdapter -> public MessageListenerAdapter();1500495740;Create a new {@link MessageListenerAdapter} with default settings.;public MessageListenerAdapter() {_		this.delegate = this__	};create,a,new,link,message,listener,adapter,with,default,settings;public,message,listener,adapter,this,delegate,this
MessageListenerAdapter -> public MessageListenerAdapter();1502974979;Create a new {@link MessageListenerAdapter} with default settings.;public MessageListenerAdapter() {_		this.delegate = this__	};create,a,new,link,message,listener,adapter,with,default,settings;public,message,listener,adapter,this,delegate,this
MessageListenerAdapter -> public MessageListenerAdapter();1503008146;Create a new {@link MessageListenerAdapter} with default settings.;public MessageListenerAdapter() {_		this.delegate = this__	};create,a,new,link,message,listener,adapter,with,default,settings;public,message,listener,adapter,this,delegate,this
MessageListenerAdapter -> public MessageListenerAdapter();1542613849;Create a new {@link MessageListenerAdapter} with default settings.;public MessageListenerAdapter() {_		this.delegate = this__	};create,a,new,link,message,listener,adapter,with,default,settings;public,message,listener,adapter,this,delegate,this
MessageListenerAdapter -> protected Object extractMessage(Message message) throws JMSException;1328020251;Extract the message body from the given JMS message._@param message the JMS <code>Message</code>_@return the content of the message, to be passed into the_listener method as argument_@throws JMSException if thrown by JMS API methods;protected Object extractMessage(Message message) throws JMSException {_		MessageConverter converter = getMessageConverter()__		if (converter != null) {_			return converter.fromMessage(message)__		}_		return message__	};extract,the,message,body,from,the,given,jms,message,param,message,the,jms,code,message,code,return,the,content,of,the,message,to,be,passed,into,the,listener,method,as,argument,throws,jmsexception,if,thrown,by,jms,api,methods;protected,object,extract,message,message,message,throws,jmsexception,message,converter,converter,get,message,converter,if,converter,null,return,converter,from,message,message,return,message
MessageListenerAdapter -> protected Object extractMessage(Message message) throws JMSException;1356735495;Extract the message body from the given JMS message._@param message the JMS {@code Message}_@return the content of the message, to be passed into the_listener method as argument_@throws JMSException if thrown by JMS API methods;protected Object extractMessage(Message message) throws JMSException {_		MessageConverter converter = getMessageConverter()__		if (converter != null) {_			return converter.fromMessage(message)__		}_		return message__	};extract,the,message,body,from,the,given,jms,message,param,message,the,jms,code,message,return,the,content,of,the,message,to,be,passed,into,the,listener,method,as,argument,throws,jmsexception,if,thrown,by,jms,api,methods;protected,object,extract,message,message,message,throws,jmsexception,message,converter,converter,get,message,converter,if,converter,null,return,converter,from,message,message,return,message
MessageListenerAdapter -> protected Object extractMessage(Message message) throws JMSException;1357119239;Extract the message body from the given JMS message._@param message the JMS {@code Message}_@return the content of the message, to be passed into the_listener method as argument_@throws JMSException if thrown by JMS API methods;protected Object extractMessage(Message message) throws JMSException {_		MessageConverter converter = getMessageConverter()__		if (converter != null) {_			return converter.fromMessage(message)__		}_		return message__	};extract,the,message,body,from,the,given,jms,message,param,message,the,jms,code,message,return,the,content,of,the,message,to,be,passed,into,the,listener,method,as,argument,throws,jmsexception,if,thrown,by,jms,api,methods;protected,object,extract,message,message,message,throws,jmsexception,message,converter,converter,get,message,converter,if,converter,null,return,converter,from,message,message,return,message
MessageListenerAdapter -> protected Object extractMessage(Message message) throws JMSException;1368482696;Extract the message body from the given JMS message._@param message the JMS {@code Message}_@return the content of the message, to be passed into the_listener method as argument_@throws JMSException if thrown by JMS API methods;protected Object extractMessage(Message message) throws JMSException {_		MessageConverter converter = getMessageConverter()__		if (converter != null) {_			return converter.fromMessage(message)__		}_		return message__	};extract,the,message,body,from,the,given,jms,message,param,message,the,jms,code,message,return,the,content,of,the,message,to,be,passed,into,the,listener,method,as,argument,throws,jmsexception,if,thrown,by,jms,api,methods;protected,object,extract,message,message,message,throws,jmsexception,message,converter,converter,get,message,converter,if,converter,null,return,converter,from,message,message,return,message
MessageListenerAdapter -> protected Object extractMessage(Message message) throws JMSException;1385412762;Extract the message body from the given JMS message._@param message the JMS {@code Message}_@return the content of the message, to be passed into the_listener method as argument_@throws JMSException if thrown by JMS API methods;protected Object extractMessage(Message message) throws JMSException {_		MessageConverter converter = getMessageConverter()__		if (converter != null) {_			return converter.fromMessage(message)__		}_		return message__	};extract,the,message,body,from,the,given,jms,message,param,message,the,jms,code,message,return,the,content,of,the,message,to,be,passed,into,the,listener,method,as,argument,throws,jmsexception,if,thrown,by,jms,api,methods;protected,object,extract,message,message,message,throws,jmsexception,message,converter,converter,get,message,converter,if,converter,null,return,converter,from,message,message,return,message
MessageListenerAdapter -> protected Object getDelegate();1328020251;Return the target object to delegate message listening to.;protected Object getDelegate() {_		return this.delegate__	};return,the,target,object,to,delegate,message,listening,to;protected,object,get,delegate,return,this,delegate
MessageListenerAdapter -> protected Object getDelegate();1356735495;Return the target object to delegate message listening to.;protected Object getDelegate() {_		return this.delegate__	};return,the,target,object,to,delegate,message,listening,to;protected,object,get,delegate,return,this,delegate
MessageListenerAdapter -> protected Object getDelegate();1357119239;Return the target object to delegate message listening to.;protected Object getDelegate() {_		return this.delegate__	};return,the,target,object,to,delegate,message,listening,to;protected,object,get,delegate,return,this,delegate
MessageListenerAdapter -> protected Object getDelegate();1368482696;Return the target object to delegate message listening to.;protected Object getDelegate() {_		return this.delegate__	};return,the,target,object,to,delegate,message,listening,to;protected,object,get,delegate,return,this,delegate
MessageListenerAdapter -> protected Object getDelegate();1385412762;Return the target object to delegate message listening to.;protected Object getDelegate() {_		return this.delegate__	};return,the,target,object,to,delegate,message,listening,to;protected,object,get,delegate,return,this,delegate
MessageListenerAdapter -> protected Object getDelegate();1397718966;Return the target object to delegate message listening to.;protected Object getDelegate() {_		return this.delegate__	};return,the,target,object,to,delegate,message,listening,to;protected,object,get,delegate,return,this,delegate
MessageListenerAdapter -> protected Object getDelegate();1404937154;Return the target object to delegate message listening to.;protected Object getDelegate() {_		return this.delegate__	};return,the,target,object,to,delegate,message,listening,to;protected,object,get,delegate,return,this,delegate
MessageListenerAdapter -> protected Object getDelegate();1482442567;Return the target object to delegate message listening to.;protected Object getDelegate() {_		return this.delegate__	};return,the,target,object,to,delegate,message,listening,to;protected,object,get,delegate,return,this,delegate
MessageListenerAdapter -> protected Object getDelegate();1496259743;Return the target object to delegate message listening to.;protected Object getDelegate() {_		return this.delegate__	};return,the,target,object,to,delegate,message,listening,to;protected,object,get,delegate,return,this,delegate
MessageListenerAdapter -> protected Object getDelegate();1496837955;Return the target object to delegate message listening to.;protected Object getDelegate() {_		return this.delegate__	};return,the,target,object,to,delegate,message,listening,to;protected,object,get,delegate,return,this,delegate
MessageListenerAdapter -> protected Object getDelegate();1500495740;Return the target object to delegate message listening to.;protected Object getDelegate() {_		return this.delegate__	};return,the,target,object,to,delegate,message,listening,to;protected,object,get,delegate,return,this,delegate
MessageListenerAdapter -> protected Object getDelegate();1502974979;Return the target object to delegate message listening to.;protected Object getDelegate() {_		return this.delegate__	};return,the,target,object,to,delegate,message,listening,to;protected,object,get,delegate,return,this,delegate
MessageListenerAdapter -> protected Object getDelegate();1503008146;Return the target object to delegate message listening to.;protected Object getDelegate() {_		return this.delegate__	};return,the,target,object,to,delegate,message,listening,to;protected,object,get,delegate,return,this,delegate
MessageListenerAdapter -> protected Object getDelegate();1542613849;Return the target object to delegate message listening to.;protected Object getDelegate() {_		return this.delegate__	};return,the,target,object,to,delegate,message,listening,to;protected,object,get,delegate,return,this,delegate
MessageListenerAdapter -> protected void handleResult(Object result, Message request, Session session) throws JMSException;1328020251;Handle the given result object returned from the listener method,_sending a response message back._@param result the result object to handle (never <code>null</code>)_@param request the original request message_@param session the JMS Session to operate on (may be <code>null</code>)_@throws JMSException if thrown by JMS API methods_@see #buildMessage_@see #postProcessResponse_@see #getResponseDestination_@see #sendResponse;protected void handleResult(Object result, Message request, Session session) throws JMSException {_		if (session != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Listener method returned result [" + result +_						"] - generating response message for it")__			}_			Message response = buildMessage(session, result)__			postProcessResponse(request, response)__			Destination destination = getResponseDestination(request, response, session)__			sendResponse(session, destination,  response)__		}_		else {_			if (logger.isWarnEnabled()) {_				logger.warn("Listener method returned result [" + result +_						"]: not generating response message for it because of no JMS Session given")__			}_		}_	};handle,the,given,result,object,returned,from,the,listener,method,sending,a,response,message,back,param,result,the,result,object,to,handle,never,code,null,code,param,request,the,original,request,message,param,session,the,jms,session,to,operate,on,may,be,code,null,code,throws,jmsexception,if,thrown,by,jms,api,methods,see,build,message,see,post,process,response,see,get,response,destination,see,send,response;protected,void,handle,result,object,result,message,request,session,session,throws,jmsexception,if,session,null,if,logger,is,debug,enabled,logger,debug,listener,method,returned,result,result,generating,response,message,for,it,message,response,build,message,session,result,post,process,response,request,response,destination,destination,get,response,destination,request,response,session,send,response,session,destination,response,else,if,logger,is,warn,enabled,logger,warn,listener,method,returned,result,result,not,generating,response,message,for,it,because,of,no,jms,session,given
MessageListenerAdapter -> protected void handleResult(Object result, Message request, Session session) throws JMSException;1356735495;Handle the given result object returned from the listener method,_sending a response message back._@param result the result object to handle (never {@code null})_@param request the original request message_@param session the JMS Session to operate on (may be {@code null})_@throws JMSException if thrown by JMS API methods_@see #buildMessage_@see #postProcessResponse_@see #getResponseDestination_@see #sendResponse;protected void handleResult(Object result, Message request, Session session) throws JMSException {_		if (session != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Listener method returned result [" + result +_						"] - generating response message for it")__			}_			Message response = buildMessage(session, result)__			postProcessResponse(request, response)__			Destination destination = getResponseDestination(request, response, session)__			sendResponse(session, destination,  response)__		}_		else {_			if (logger.isWarnEnabled()) {_				logger.warn("Listener method returned result [" + result +_						"]: not generating response message for it because of no JMS Session given")__			}_		}_	};handle,the,given,result,object,returned,from,the,listener,method,sending,a,response,message,back,param,result,the,result,object,to,handle,never,code,null,param,request,the,original,request,message,param,session,the,jms,session,to,operate,on,may,be,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,build,message,see,post,process,response,see,get,response,destination,see,send,response;protected,void,handle,result,object,result,message,request,session,session,throws,jmsexception,if,session,null,if,logger,is,debug,enabled,logger,debug,listener,method,returned,result,result,generating,response,message,for,it,message,response,build,message,session,result,post,process,response,request,response,destination,destination,get,response,destination,request,response,session,send,response,session,destination,response,else,if,logger,is,warn,enabled,logger,warn,listener,method,returned,result,result,not,generating,response,message,for,it,because,of,no,jms,session,given
MessageListenerAdapter -> protected void handleResult(Object result, Message request, Session session) throws JMSException;1357119239;Handle the given result object returned from the listener method,_sending a response message back._@param result the result object to handle (never {@code null})_@param request the original request message_@param session the JMS Session to operate on (may be {@code null})_@throws JMSException if thrown by JMS API methods_@see #buildMessage_@see #postProcessResponse_@see #getResponseDestination_@see #sendResponse;protected void handleResult(Object result, Message request, Session session) throws JMSException {_		if (session != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Listener method returned result [" + result +_						"] - generating response message for it")__			}_			Message response = buildMessage(session, result)__			postProcessResponse(request, response)__			Destination destination = getResponseDestination(request, response, session)__			sendResponse(session, destination,  response)__		}_		else {_			if (logger.isWarnEnabled()) {_				logger.warn("Listener method returned result [" + result +_						"]: not generating response message for it because of no JMS Session given")__			}_		}_	};handle,the,given,result,object,returned,from,the,listener,method,sending,a,response,message,back,param,result,the,result,object,to,handle,never,code,null,param,request,the,original,request,message,param,session,the,jms,session,to,operate,on,may,be,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,build,message,see,post,process,response,see,get,response,destination,see,send,response;protected,void,handle,result,object,result,message,request,session,session,throws,jmsexception,if,session,null,if,logger,is,debug,enabled,logger,debug,listener,method,returned,result,result,generating,response,message,for,it,message,response,build,message,session,result,post,process,response,request,response,destination,destination,get,response,destination,request,response,session,send,response,session,destination,response,else,if,logger,is,warn,enabled,logger,warn,listener,method,returned,result,result,not,generating,response,message,for,it,because,of,no,jms,session,given
MessageListenerAdapter -> protected void handleResult(Object result, Message request, Session session) throws JMSException;1368482696;Handle the given result object returned from the listener method,_sending a response message back._@param result the result object to handle (never {@code null})_@param request the original request message_@param session the JMS Session to operate on (may be {@code null})_@throws JMSException if thrown by JMS API methods_@see #buildMessage_@see #postProcessResponse_@see #getResponseDestination_@see #sendResponse;protected void handleResult(Object result, Message request, Session session) throws JMSException {_		if (session != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Listener method returned result [" + result +_						"] - generating response message for it")__			}_			Message response = buildMessage(session, result)__			postProcessResponse(request, response)__			Destination destination = getResponseDestination(request, response, session)__			sendResponse(session, destination,  response)__		}_		else {_			if (logger.isWarnEnabled()) {_				logger.warn("Listener method returned result [" + result +_						"]: not generating response message for it because of no JMS Session given")__			}_		}_	};handle,the,given,result,object,returned,from,the,listener,method,sending,a,response,message,back,param,result,the,result,object,to,handle,never,code,null,param,request,the,original,request,message,param,session,the,jms,session,to,operate,on,may,be,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,build,message,see,post,process,response,see,get,response,destination,see,send,response;protected,void,handle,result,object,result,message,request,session,session,throws,jmsexception,if,session,null,if,logger,is,debug,enabled,logger,debug,listener,method,returned,result,result,generating,response,message,for,it,message,response,build,message,session,result,post,process,response,request,response,destination,destination,get,response,destination,request,response,session,send,response,session,destination,response,else,if,logger,is,warn,enabled,logger,warn,listener,method,returned,result,result,not,generating,response,message,for,it,because,of,no,jms,session,given
MessageListenerAdapter -> protected void handleResult(Object result, Message request, Session session) throws JMSException;1385412762;Handle the given result object returned from the listener method,_sending a response message back._@param result the result object to handle (never {@code null})_@param request the original request message_@param session the JMS Session to operate on (may be {@code null})_@throws JMSException if thrown by JMS API methods_@see #buildMessage_@see #postProcessResponse_@see #getResponseDestination_@see #sendResponse;protected void handleResult(Object result, Message request, Session session) throws JMSException {_		if (session != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Listener method returned result [" + result +_						"] - generating response message for it")__			}_			Message response = buildMessage(session, result)__			postProcessResponse(request, response)__			Destination destination = getResponseDestination(request, response, session)__			sendResponse(session, destination,  response)__		}_		else {_			if (logger.isWarnEnabled()) {_				logger.warn("Listener method returned result [" + result +_						"]: not generating response message for it because of no JMS Session given")__			}_		}_	};handle,the,given,result,object,returned,from,the,listener,method,sending,a,response,message,back,param,result,the,result,object,to,handle,never,code,null,param,request,the,original,request,message,param,session,the,jms,session,to,operate,on,may,be,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,build,message,see,post,process,response,see,get,response,destination,see,send,response;protected,void,handle,result,object,result,message,request,session,session,throws,jmsexception,if,session,null,if,logger,is,debug,enabled,logger,debug,listener,method,returned,result,result,generating,response,message,for,it,message,response,build,message,session,result,post,process,response,request,response,destination,destination,get,response,destination,request,response,session,send,response,session,destination,response,else,if,logger,is,warn,enabled,logger,warn,listener,method,returned,result,result,not,generating,response,message,for,it,because,of,no,jms,session,given
MessageListenerAdapter -> @Nullable 	protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException;1496837955;Determine the name of the listener method that is supposed to_handle the given message._<p>The default implementation simply returns the configured_default listener method, if any._@param originalMessage the JMS request message_@param extractedMessage the converted JMS request message,_to be passed into the listener method as argument_@return the name of the listener method (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setDefaultListenerMethod;@Nullable_	protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException {_		return getDefaultListenerMethod()__	};determine,the,name,of,the,listener,method,that,is,supposed,to,handle,the,given,message,p,the,default,implementation,simply,returns,the,configured,default,listener,method,if,any,param,original,message,the,jms,request,message,param,extracted,message,the,converted,jms,request,message,to,be,passed,into,the,listener,method,as,argument,return,the,name,of,the,listener,method,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,default,listener,method;nullable,protected,string,get,listener,method,name,message,original,message,object,extracted,message,throws,jmsexception,return,get,default,listener,method
MessageListenerAdapter -> @Nullable 	protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException;1500495740;Determine the name of the listener method that is supposed to_handle the given message._<p>The default implementation simply returns the configured_default listener method, if any._@param originalMessage the JMS request message_@param extractedMessage the converted JMS request message,_to be passed into the listener method as argument_@return the name of the listener method (never {@code null})_@throws JMSException if thrown by JMS API methods_@see #setDefaultListenerMethod;@Nullable_	protected String getListenerMethodName(Message originalMessage, Object extractedMessage) throws JMSException {_		return getDefaultListenerMethod()__	};determine,the,name,of,the,listener,method,that,is,supposed,to,handle,the,given,message,p,the,default,implementation,simply,returns,the,configured,default,listener,method,if,any,param,original,message,the,jms,request,message,param,extracted,message,the,converted,jms,request,message,to,be,passed,into,the,listener,method,as,argument,return,the,name,of,the,listener,method,never,code,null,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,default,listener,method;nullable,protected,string,get,listener,method,name,message,original,message,object,extracted,message,throws,jmsexception,return,get,default,listener,method
