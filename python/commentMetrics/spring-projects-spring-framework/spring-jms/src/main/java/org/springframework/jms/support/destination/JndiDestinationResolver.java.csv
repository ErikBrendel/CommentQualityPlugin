# id;timestamp;commentText;codeText;commentWords;codeWords
JndiDestinationResolver -> public void setCache(boolean cache);1328020251;Set whether to cache resolved destinations. Default is "true"._<p>This flag can be turned off to re-lookup a destination for each operation,_which allows for hot restarting of destinations. This is mainly useful_during development._<p>Note that dynamic queues and topics get cached by destination name._As a consequence, you need to use unique destination names across both_queues and topics.;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,resolved,destinations,default,is,true,p,this,flag,can,be,turned,off,to,re,lookup,a,destination,for,each,operation,which,allows,for,hot,restarting,of,destinations,this,is,mainly,useful,during,development,p,note,that,dynamic,queues,and,topics,get,cached,by,destination,name,as,a,consequence,you,need,to,use,unique,destination,names,across,both,queues,and,topics;public,void,set,cache,boolean,cache,this,cache,cache
JndiDestinationResolver -> public void setCache(boolean cache);1355352386;Set whether to cache resolved destinations. Default is "true"._<p>This flag can be turned off to re-lookup a destination for each operation,_which allows for hot restarting of destinations. This is mainly useful_during development._<p>Note that dynamic queues and topics get cached by destination name._As a consequence, you need to use unique destination names across both_queues and topics.;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,resolved,destinations,default,is,true,p,this,flag,can,be,turned,off,to,re,lookup,a,destination,for,each,operation,which,allows,for,hot,restarting,of,destinations,this,is,mainly,useful,during,development,p,note,that,dynamic,queues,and,topics,get,cached,by,destination,name,as,a,consequence,you,need,to,use,unique,destination,names,across,both,queues,and,topics;public,void,set,cache,boolean,cache,this,cache,cache
JndiDestinationResolver -> public void setCache(boolean cache);1356735495;Set whether to cache resolved destinations. Default is "true"._<p>This flag can be turned off to re-lookup a destination for each operation,_which allows for hot restarting of destinations. This is mainly useful_during development._<p>Note that dynamic queues and topics get cached by destination name._As a consequence, you need to use unique destination names across both_queues and topics.;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,resolved,destinations,default,is,true,p,this,flag,can,be,turned,off,to,re,lookup,a,destination,for,each,operation,which,allows,for,hot,restarting,of,destinations,this,is,mainly,useful,during,development,p,note,that,dynamic,queues,and,topics,get,cached,by,destination,name,as,a,consequence,you,need,to,use,unique,destination,names,across,both,queues,and,topics;public,void,set,cache,boolean,cache,this,cache,cache
JndiDestinationResolver -> public void setCache(boolean cache);1357119239;Set whether to cache resolved destinations. Default is "true"._<p>This flag can be turned off to re-lookup a destination for each operation,_which allows for hot restarting of destinations. This is mainly useful_during development._<p>Note that dynamic queues and topics get cached by destination name._As a consequence, you need to use unique destination names across both_queues and topics.;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,resolved,destinations,default,is,true,p,this,flag,can,be,turned,off,to,re,lookup,a,destination,for,each,operation,which,allows,for,hot,restarting,of,destinations,this,is,mainly,useful,during,development,p,note,that,dynamic,queues,and,topics,get,cached,by,destination,name,as,a,consequence,you,need,to,use,unique,destination,names,across,both,queues,and,topics;public,void,set,cache,boolean,cache,this,cache,cache
JndiDestinationResolver -> public void setCache(boolean cache);1368482696;Set whether to cache resolved destinations. Default is "true"._<p>This flag can be turned off to re-lookup a destination for each operation,_which allows for hot restarting of destinations. This is mainly useful_during development._<p>Note that dynamic queues and topics get cached by destination name._As a consequence, you need to use unique destination names across both_queues and topics.;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,resolved,destinations,default,is,true,p,this,flag,can,be,turned,off,to,re,lookup,a,destination,for,each,operation,which,allows,for,hot,restarting,of,destinations,this,is,mainly,useful,during,development,p,note,that,dynamic,queues,and,topics,get,cached,by,destination,name,as,a,consequence,you,need,to,use,unique,destination,names,across,both,queues,and,topics;public,void,set,cache,boolean,cache,this,cache,cache
JndiDestinationResolver -> public void setCache(boolean cache);1385412762;Set whether to cache resolved destinations. Default is "true"._<p>This flag can be turned off to re-lookup a destination for each operation,_which allows for hot restarting of destinations. This is mainly useful_during development._<p>Note that dynamic queues and topics get cached by destination name._As a consequence, you need to use unique destination names across both_queues and topics.;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,resolved,destinations,default,is,true,p,this,flag,can,be,turned,off,to,re,lookup,a,destination,for,each,operation,which,allows,for,hot,restarting,of,destinations,this,is,mainly,useful,during,development,p,note,that,dynamic,queues,and,topics,get,cached,by,destination,name,as,a,consequence,you,need,to,use,unique,destination,names,across,both,queues,and,topics;public,void,set,cache,boolean,cache,this,cache,cache
JndiDestinationResolver -> public void setCache(boolean cache);1467730834;Set whether to cache resolved destinations. Default is "true"._<p>This flag can be turned off to re-lookup a destination for each operation,_which allows for hot restarting of destinations. This is mainly useful_during development._<p>Note that dynamic queues and topics get cached by destination name._As a consequence, you need to use unique destination names across both_queues and topics.;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,resolved,destinations,default,is,true,p,this,flag,can,be,turned,off,to,re,lookup,a,destination,for,each,operation,which,allows,for,hot,restarting,of,destinations,this,is,mainly,useful,during,development,p,note,that,dynamic,queues,and,topics,get,cached,by,destination,name,as,a,consequence,you,need,to,use,unique,destination,names,across,both,queues,and,topics;public,void,set,cache,boolean,cache,this,cache,cache
JndiDestinationResolver -> public void setCache(boolean cache);1496242568;Set whether to cache resolved destinations. Default is "true"._<p>This flag can be turned off to re-lookup a destination for each operation,_which allows for hot restarting of destinations. This is mainly useful_during development._<p>Note that dynamic queues and topics get cached by destination name._As a consequence, you need to use unique destination names across both_queues and topics.;public void setCache(boolean cache) {_		this.cache = cache__	};set,whether,to,cache,resolved,destinations,default,is,true,p,this,flag,can,be,turned,off,to,re,lookup,a,destination,for,each,operation,which,allows,for,hot,restarting,of,destinations,this,is,mainly,useful,during,development,p,note,that,dynamic,queues,and,topics,get,cached,by,destination,name,as,a,consequence,you,need,to,use,unique,destination,names,across,both,queues,and,topics;public,void,set,cache,boolean,cache,this,cache,cache
JndiDestinationResolver -> protected void validateDestination(Destination destination, String destinationName, boolean pubSubDomain);1328020251;Validate the given Destination object, checking whether it matches_the expected type._@param destination the Destination object to validate_@param destinationName the name of the destination_@param pubSubDomain <code>true</code> if a Topic is expected,_<code>false</code> in case of a Queue;protected void validateDestination(Destination destination, String destinationName, boolean pubSubDomain) {_		Class targetClass = Queue.class__		if (pubSubDomain) {_			targetClass = Topic.class__		}_		if (!targetClass.isInstance(destination)) {_			throw new DestinationResolutionException(_					"Destination [" + destinationName + "] is not of expected type [" + targetClass.getName() + "]")__		}_	};validate,the,given,destination,object,checking,whether,it,matches,the,expected,type,param,destination,the,destination,object,to,validate,param,destination,name,the,name,of,the,destination,param,pub,sub,domain,code,true,code,if,a,topic,is,expected,code,false,code,in,case,of,a,queue;protected,void,validate,destination,destination,destination,string,destination,name,boolean,pub,sub,domain,class,target,class,queue,class,if,pub,sub,domain,target,class,topic,class,if,target,class,is,instance,destination,throw,new,destination,resolution,exception,destination,destination,name,is,not,of,expected,type,target,class,get,name
JndiDestinationResolver -> protected void validateDestination(Destination destination, String destinationName, boolean pubSubDomain);1355352386;Validate the given Destination object, checking whether it matches_the expected type._@param destination the Destination object to validate_@param destinationName the name of the destination_@param pubSubDomain <code>true</code> if a Topic is expected,_<code>false</code> in case of a Queue;protected void validateDestination(Destination destination, String destinationName, boolean pubSubDomain) {_		Class targetClass = Queue.class__		if (pubSubDomain) {_			targetClass = Topic.class__		}_		if (!targetClass.isInstance(destination)) {_			throw new DestinationResolutionException(_					"Destination [" + destinationName + "] is not of expected type [" + targetClass.getName() + "]")__		}_	};validate,the,given,destination,object,checking,whether,it,matches,the,expected,type,param,destination,the,destination,object,to,validate,param,destination,name,the,name,of,the,destination,param,pub,sub,domain,code,true,code,if,a,topic,is,expected,code,false,code,in,case,of,a,queue;protected,void,validate,destination,destination,destination,string,destination,name,boolean,pub,sub,domain,class,target,class,queue,class,if,pub,sub,domain,target,class,topic,class,if,target,class,is,instance,destination,throw,new,destination,resolution,exception,destination,destination,name,is,not,of,expected,type,target,class,get,name
JndiDestinationResolver -> protected void validateDestination(Destination destination, String destinationName, boolean pubSubDomain);1356735495;Validate the given Destination object, checking whether it matches_the expected type._@param destination the Destination object to validate_@param destinationName the name of the destination_@param pubSubDomain {@code true} if a Topic is expected,_{@code false} in case of a Queue;protected void validateDestination(Destination destination, String destinationName, boolean pubSubDomain) {_		Class targetClass = Queue.class__		if (pubSubDomain) {_			targetClass = Topic.class__		}_		if (!targetClass.isInstance(destination)) {_			throw new DestinationResolutionException(_					"Destination [" + destinationName + "] is not of expected type [" + targetClass.getName() + "]")__		}_	};validate,the,given,destination,object,checking,whether,it,matches,the,expected,type,param,destination,the,destination,object,to,validate,param,destination,name,the,name,of,the,destination,param,pub,sub,domain,code,true,if,a,topic,is,expected,code,false,in,case,of,a,queue;protected,void,validate,destination,destination,destination,string,destination,name,boolean,pub,sub,domain,class,target,class,queue,class,if,pub,sub,domain,target,class,topic,class,if,target,class,is,instance,destination,throw,new,destination,resolution,exception,destination,destination,name,is,not,of,expected,type,target,class,get,name
JndiDestinationResolver -> protected void validateDestination(Destination destination, String destinationName, boolean pubSubDomain);1357119239;Validate the given Destination object, checking whether it matches_the expected type._@param destination the Destination object to validate_@param destinationName the name of the destination_@param pubSubDomain {@code true} if a Topic is expected,_{@code false} in case of a Queue;protected void validateDestination(Destination destination, String destinationName, boolean pubSubDomain) {_		Class targetClass = Queue.class__		if (pubSubDomain) {_			targetClass = Topic.class__		}_		if (!targetClass.isInstance(destination)) {_			throw new DestinationResolutionException(_					"Destination [" + destinationName + "] is not of expected type [" + targetClass.getName() + "]")__		}_	};validate,the,given,destination,object,checking,whether,it,matches,the,expected,type,param,destination,the,destination,object,to,validate,param,destination,name,the,name,of,the,destination,param,pub,sub,domain,code,true,if,a,topic,is,expected,code,false,in,case,of,a,queue;protected,void,validate,destination,destination,destination,string,destination,name,boolean,pub,sub,domain,class,target,class,queue,class,if,pub,sub,domain,target,class,topic,class,if,target,class,is,instance,destination,throw,new,destination,resolution,exception,destination,destination,name,is,not,of,expected,type,target,class,get,name
JndiDestinationResolver -> protected void validateDestination(Destination destination, String destinationName, boolean pubSubDomain);1368482696;Validate the given Destination object, checking whether it matches_the expected type._@param destination the Destination object to validate_@param destinationName the name of the destination_@param pubSubDomain {@code true} if a Topic is expected,_{@code false} in case of a Queue;protected void validateDestination(Destination destination, String destinationName, boolean pubSubDomain) {_		Class targetClass = Queue.class__		if (pubSubDomain) {_			targetClass = Topic.class__		}_		if (!targetClass.isInstance(destination)) {_			throw new DestinationResolutionException(_					"Destination [" + destinationName + "] is not of expected type [" + targetClass.getName() + "]")__		}_	};validate,the,given,destination,object,checking,whether,it,matches,the,expected,type,param,destination,the,destination,object,to,validate,param,destination,name,the,name,of,the,destination,param,pub,sub,domain,code,true,if,a,topic,is,expected,code,false,in,case,of,a,queue;protected,void,validate,destination,destination,destination,string,destination,name,boolean,pub,sub,domain,class,target,class,queue,class,if,pub,sub,domain,target,class,topic,class,if,target,class,is,instance,destination,throw,new,destination,resolution,exception,destination,destination,name,is,not,of,expected,type,target,class,get,name
JndiDestinationResolver -> protected void validateDestination(Destination destination, String destinationName, boolean pubSubDomain);1385412762;Validate the given Destination object, checking whether it matches_the expected type._@param destination the Destination object to validate_@param destinationName the name of the destination_@param pubSubDomain {@code true} if a Topic is expected,_{@code false} in case of a Queue;protected void validateDestination(Destination destination, String destinationName, boolean pubSubDomain) {_		Class<?> targetClass = Queue.class__		if (pubSubDomain) {_			targetClass = Topic.class__		}_		if (!targetClass.isInstance(destination)) {_			throw new DestinationResolutionException(_					"Destination [" + destinationName + "] is not of expected type [" + targetClass.getName() + "]")__		}_	};validate,the,given,destination,object,checking,whether,it,matches,the,expected,type,param,destination,the,destination,object,to,validate,param,destination,name,the,name,of,the,destination,param,pub,sub,domain,code,true,if,a,topic,is,expected,code,false,in,case,of,a,queue;protected,void,validate,destination,destination,destination,string,destination,name,boolean,pub,sub,domain,class,target,class,queue,class,if,pub,sub,domain,target,class,topic,class,if,target,class,is,instance,destination,throw,new,destination,resolution,exception,destination,destination,name,is,not,of,expected,type,target,class,get,name
JndiDestinationResolver -> protected void validateDestination(Destination destination, String destinationName, boolean pubSubDomain);1467730834;Validate the given Destination object, checking whether it matches_the expected type._@param destination the Destination object to validate_@param destinationName the name of the destination_@param pubSubDomain {@code true} if a Topic is expected,_{@code false} in case of a Queue;protected void validateDestination(Destination destination, String destinationName, boolean pubSubDomain) {_		Class<?> targetClass = Queue.class__		if (pubSubDomain) {_			targetClass = Topic.class__		}_		if (!targetClass.isInstance(destination)) {_			throw new DestinationResolutionException(_					"Destination [" + destinationName + "] is not of expected type [" + targetClass.getName() + "]")__		}_	};validate,the,given,destination,object,checking,whether,it,matches,the,expected,type,param,destination,the,destination,object,to,validate,param,destination,name,the,name,of,the,destination,param,pub,sub,domain,code,true,if,a,topic,is,expected,code,false,in,case,of,a,queue;protected,void,validate,destination,destination,destination,string,destination,name,boolean,pub,sub,domain,class,target,class,queue,class,if,pub,sub,domain,target,class,topic,class,if,target,class,is,instance,destination,throw,new,destination,resolution,exception,destination,destination,name,is,not,of,expected,type,target,class,get,name
JndiDestinationResolver -> protected void validateDestination(Destination destination, String destinationName, boolean pubSubDomain);1496242568;Validate the given Destination object, checking whether it matches_the expected type._@param destination the Destination object to validate_@param destinationName the name of the destination_@param pubSubDomain {@code true} if a Topic is expected,_{@code false} in case of a Queue;protected void validateDestination(Destination destination, String destinationName, boolean pubSubDomain) {_		Class<?> targetClass = Queue.class__		if (pubSubDomain) {_			targetClass = Topic.class__		}_		if (!targetClass.isInstance(destination)) {_			throw new DestinationResolutionException(_					"Destination [" + destinationName + "] is not of expected type [" + targetClass.getName() + "]")__		}_	};validate,the,given,destination,object,checking,whether,it,matches,the,expected,type,param,destination,the,destination,object,to,validate,param,destination,name,the,name,of,the,destination,param,pub,sub,domain,code,true,if,a,topic,is,expected,code,false,in,case,of,a,queue;protected,void,validate,destination,destination,destination,string,destination,name,boolean,pub,sub,domain,class,target,class,queue,class,if,pub,sub,domain,target,class,topic,class,if,target,class,is,instance,destination,throw,new,destination,resolution,exception,destination,destination,name,is,not,of,expected,type,target,class,get,name
JndiDestinationResolver -> public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination);1328020251;Set whether this resolver is supposed to create dynamic destinations_if the destination name is not found in JNDI. Default is "false"._<p>Turn this flag on to enable transparent fallback to dynamic destinations._@see #setDynamicDestinationResolver;public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination) {_		this.fallbackToDynamicDestination = fallbackToDynamicDestination__	};set,whether,this,resolver,is,supposed,to,create,dynamic,destinations,if,the,destination,name,is,not,found,in,jndi,default,is,false,p,turn,this,flag,on,to,enable,transparent,fallback,to,dynamic,destinations,see,set,dynamic,destination,resolver;public,void,set,fallback,to,dynamic,destination,boolean,fallback,to,dynamic,destination,this,fallback,to,dynamic,destination,fallback,to,dynamic,destination
JndiDestinationResolver -> public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination);1355352386;Set whether this resolver is supposed to create dynamic destinations_if the destination name is not found in JNDI. Default is "false"._<p>Turn this flag on to enable transparent fallback to dynamic destinations._@see #setDynamicDestinationResolver;public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination) {_		this.fallbackToDynamicDestination = fallbackToDynamicDestination__	};set,whether,this,resolver,is,supposed,to,create,dynamic,destinations,if,the,destination,name,is,not,found,in,jndi,default,is,false,p,turn,this,flag,on,to,enable,transparent,fallback,to,dynamic,destinations,see,set,dynamic,destination,resolver;public,void,set,fallback,to,dynamic,destination,boolean,fallback,to,dynamic,destination,this,fallback,to,dynamic,destination,fallback,to,dynamic,destination
JndiDestinationResolver -> public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination);1356735495;Set whether this resolver is supposed to create dynamic destinations_if the destination name is not found in JNDI. Default is "false"._<p>Turn this flag on to enable transparent fallback to dynamic destinations._@see #setDynamicDestinationResolver;public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination) {_		this.fallbackToDynamicDestination = fallbackToDynamicDestination__	};set,whether,this,resolver,is,supposed,to,create,dynamic,destinations,if,the,destination,name,is,not,found,in,jndi,default,is,false,p,turn,this,flag,on,to,enable,transparent,fallback,to,dynamic,destinations,see,set,dynamic,destination,resolver;public,void,set,fallback,to,dynamic,destination,boolean,fallback,to,dynamic,destination,this,fallback,to,dynamic,destination,fallback,to,dynamic,destination
JndiDestinationResolver -> public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination);1357119239;Set whether this resolver is supposed to create dynamic destinations_if the destination name is not found in JNDI. Default is "false"._<p>Turn this flag on to enable transparent fallback to dynamic destinations._@see #setDynamicDestinationResolver;public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination) {_		this.fallbackToDynamicDestination = fallbackToDynamicDestination__	};set,whether,this,resolver,is,supposed,to,create,dynamic,destinations,if,the,destination,name,is,not,found,in,jndi,default,is,false,p,turn,this,flag,on,to,enable,transparent,fallback,to,dynamic,destinations,see,set,dynamic,destination,resolver;public,void,set,fallback,to,dynamic,destination,boolean,fallback,to,dynamic,destination,this,fallback,to,dynamic,destination,fallback,to,dynamic,destination
JndiDestinationResolver -> public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination);1368482696;Set whether this resolver is supposed to create dynamic destinations_if the destination name is not found in JNDI. Default is "false"._<p>Turn this flag on to enable transparent fallback to dynamic destinations._@see #setDynamicDestinationResolver;public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination) {_		this.fallbackToDynamicDestination = fallbackToDynamicDestination__	};set,whether,this,resolver,is,supposed,to,create,dynamic,destinations,if,the,destination,name,is,not,found,in,jndi,default,is,false,p,turn,this,flag,on,to,enable,transparent,fallback,to,dynamic,destinations,see,set,dynamic,destination,resolver;public,void,set,fallback,to,dynamic,destination,boolean,fallback,to,dynamic,destination,this,fallback,to,dynamic,destination,fallback,to,dynamic,destination
JndiDestinationResolver -> public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination);1385412762;Set whether this resolver is supposed to create dynamic destinations_if the destination name is not found in JNDI. Default is "false"._<p>Turn this flag on to enable transparent fallback to dynamic destinations._@see #setDynamicDestinationResolver;public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination) {_		this.fallbackToDynamicDestination = fallbackToDynamicDestination__	};set,whether,this,resolver,is,supposed,to,create,dynamic,destinations,if,the,destination,name,is,not,found,in,jndi,default,is,false,p,turn,this,flag,on,to,enable,transparent,fallback,to,dynamic,destinations,see,set,dynamic,destination,resolver;public,void,set,fallback,to,dynamic,destination,boolean,fallback,to,dynamic,destination,this,fallback,to,dynamic,destination,fallback,to,dynamic,destination
JndiDestinationResolver -> public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination);1467730834;Set whether this resolver is supposed to create dynamic destinations_if the destination name is not found in JNDI. Default is "false"._<p>Turn this flag on to enable transparent fallback to dynamic destinations._@see #setDynamicDestinationResolver;public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination) {_		this.fallbackToDynamicDestination = fallbackToDynamicDestination__	};set,whether,this,resolver,is,supposed,to,create,dynamic,destinations,if,the,destination,name,is,not,found,in,jndi,default,is,false,p,turn,this,flag,on,to,enable,transparent,fallback,to,dynamic,destinations,see,set,dynamic,destination,resolver;public,void,set,fallback,to,dynamic,destination,boolean,fallback,to,dynamic,destination,this,fallback,to,dynamic,destination,fallback,to,dynamic,destination
JndiDestinationResolver -> public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination);1496242568;Set whether this resolver is supposed to create dynamic destinations_if the destination name is not found in JNDI. Default is "false"._<p>Turn this flag on to enable transparent fallback to dynamic destinations._@see #setDynamicDestinationResolver;public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination) {_		this.fallbackToDynamicDestination = fallbackToDynamicDestination__	};set,whether,this,resolver,is,supposed,to,create,dynamic,destinations,if,the,destination,name,is,not,found,in,jndi,default,is,false,p,turn,this,flag,on,to,enable,transparent,fallback,to,dynamic,destinations,see,set,dynamic,destination,resolver;public,void,set,fallback,to,dynamic,destination,boolean,fallback,to,dynamic,destination,this,fallback,to,dynamic,destination,fallback,to,dynamic,destination
JndiDestinationResolver -> public void setDynamicDestinationResolver(DestinationResolver dynamicDestinationResolver);1328020251;Set the {@link DestinationResolver} to use when falling back to dynamic_destinations._<p>The default is Spring's standard {@link DynamicDestinationResolver}._@see #setFallbackToDynamicDestination_@see DynamicDestinationResolver;public void setDynamicDestinationResolver(DestinationResolver dynamicDestinationResolver) {_		this.dynamicDestinationResolver = dynamicDestinationResolver__	};set,the,link,destination,resolver,to,use,when,falling,back,to,dynamic,destinations,p,the,default,is,spring,s,standard,link,dynamic,destination,resolver,see,set,fallback,to,dynamic,destination,see,dynamic,destination,resolver;public,void,set,dynamic,destination,resolver,destination,resolver,dynamic,destination,resolver,this,dynamic,destination,resolver,dynamic,destination,resolver
JndiDestinationResolver -> public void setDynamicDestinationResolver(DestinationResolver dynamicDestinationResolver);1355352386;Set the {@link DestinationResolver} to use when falling back to dynamic_destinations._<p>The default is Spring's standard {@link DynamicDestinationResolver}._@see #setFallbackToDynamicDestination_@see DynamicDestinationResolver;public void setDynamicDestinationResolver(DestinationResolver dynamicDestinationResolver) {_		this.dynamicDestinationResolver = dynamicDestinationResolver__	};set,the,link,destination,resolver,to,use,when,falling,back,to,dynamic,destinations,p,the,default,is,spring,s,standard,link,dynamic,destination,resolver,see,set,fallback,to,dynamic,destination,see,dynamic,destination,resolver;public,void,set,dynamic,destination,resolver,destination,resolver,dynamic,destination,resolver,this,dynamic,destination,resolver,dynamic,destination,resolver
JndiDestinationResolver -> public void setDynamicDestinationResolver(DestinationResolver dynamicDestinationResolver);1356735495;Set the {@link DestinationResolver} to use when falling back to dynamic_destinations._<p>The default is Spring's standard {@link DynamicDestinationResolver}._@see #setFallbackToDynamicDestination_@see DynamicDestinationResolver;public void setDynamicDestinationResolver(DestinationResolver dynamicDestinationResolver) {_		this.dynamicDestinationResolver = dynamicDestinationResolver__	};set,the,link,destination,resolver,to,use,when,falling,back,to,dynamic,destinations,p,the,default,is,spring,s,standard,link,dynamic,destination,resolver,see,set,fallback,to,dynamic,destination,see,dynamic,destination,resolver;public,void,set,dynamic,destination,resolver,destination,resolver,dynamic,destination,resolver,this,dynamic,destination,resolver,dynamic,destination,resolver
JndiDestinationResolver -> public void setDynamicDestinationResolver(DestinationResolver dynamicDestinationResolver);1357119239;Set the {@link DestinationResolver} to use when falling back to dynamic_destinations._<p>The default is Spring's standard {@link DynamicDestinationResolver}._@see #setFallbackToDynamicDestination_@see DynamicDestinationResolver;public void setDynamicDestinationResolver(DestinationResolver dynamicDestinationResolver) {_		this.dynamicDestinationResolver = dynamicDestinationResolver__	};set,the,link,destination,resolver,to,use,when,falling,back,to,dynamic,destinations,p,the,default,is,spring,s,standard,link,dynamic,destination,resolver,see,set,fallback,to,dynamic,destination,see,dynamic,destination,resolver;public,void,set,dynamic,destination,resolver,destination,resolver,dynamic,destination,resolver,this,dynamic,destination,resolver,dynamic,destination,resolver
JndiDestinationResolver -> public void setDynamicDestinationResolver(DestinationResolver dynamicDestinationResolver);1368482696;Set the {@link DestinationResolver} to use when falling back to dynamic_destinations._<p>The default is Spring's standard {@link DynamicDestinationResolver}._@see #setFallbackToDynamicDestination_@see DynamicDestinationResolver;public void setDynamicDestinationResolver(DestinationResolver dynamicDestinationResolver) {_		this.dynamicDestinationResolver = dynamicDestinationResolver__	};set,the,link,destination,resolver,to,use,when,falling,back,to,dynamic,destinations,p,the,default,is,spring,s,standard,link,dynamic,destination,resolver,see,set,fallback,to,dynamic,destination,see,dynamic,destination,resolver;public,void,set,dynamic,destination,resolver,destination,resolver,dynamic,destination,resolver,this,dynamic,destination,resolver,dynamic,destination,resolver
JndiDestinationResolver -> public void setDynamicDestinationResolver(DestinationResolver dynamicDestinationResolver);1385412762;Set the {@link DestinationResolver} to use when falling back to dynamic_destinations._<p>The default is Spring's standard {@link DynamicDestinationResolver}._@see #setFallbackToDynamicDestination_@see DynamicDestinationResolver;public void setDynamicDestinationResolver(DestinationResolver dynamicDestinationResolver) {_		this.dynamicDestinationResolver = dynamicDestinationResolver__	};set,the,link,destination,resolver,to,use,when,falling,back,to,dynamic,destinations,p,the,default,is,spring,s,standard,link,dynamic,destination,resolver,see,set,fallback,to,dynamic,destination,see,dynamic,destination,resolver;public,void,set,dynamic,destination,resolver,destination,resolver,dynamic,destination,resolver,this,dynamic,destination,resolver,dynamic,destination,resolver
JndiDestinationResolver -> public void setDynamicDestinationResolver(DestinationResolver dynamicDestinationResolver);1467730834;Set the {@link DestinationResolver} to use when falling back to dynamic_destinations._<p>The default is Spring's standard {@link DynamicDestinationResolver}._@see #setFallbackToDynamicDestination_@see DynamicDestinationResolver;public void setDynamicDestinationResolver(DestinationResolver dynamicDestinationResolver) {_		this.dynamicDestinationResolver = dynamicDestinationResolver__	};set,the,link,destination,resolver,to,use,when,falling,back,to,dynamic,destinations,p,the,default,is,spring,s,standard,link,dynamic,destination,resolver,see,set,fallback,to,dynamic,destination,see,dynamic,destination,resolver;public,void,set,dynamic,destination,resolver,destination,resolver,dynamic,destination,resolver,this,dynamic,destination,resolver,dynamic,destination,resolver
JndiDestinationResolver -> public void setDynamicDestinationResolver(DestinationResolver dynamicDestinationResolver);1496242568;Set the {@link DestinationResolver} to use when falling back to dynamic_destinations._<p>The default is Spring's standard {@link DynamicDestinationResolver}._@see #setFallbackToDynamicDestination_@see DynamicDestinationResolver;public void setDynamicDestinationResolver(DestinationResolver dynamicDestinationResolver) {_		this.dynamicDestinationResolver = dynamicDestinationResolver__	};set,the,link,destination,resolver,to,use,when,falling,back,to,dynamic,destinations,p,the,default,is,spring,s,standard,link,dynamic,destination,resolver,see,set,fallback,to,dynamic,destination,see,dynamic,destination,resolver;public,void,set,dynamic,destination,resolver,destination,resolver,dynamic,destination,resolver,this,dynamic,destination,resolver,dynamic,destination,resolver
