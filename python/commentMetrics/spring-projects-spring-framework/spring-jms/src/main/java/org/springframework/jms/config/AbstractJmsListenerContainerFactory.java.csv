commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * @see AbstractMessageListenerContainer#setConnectionFactory(ConnectionFactory)  */ ;/**  * @see AbstractMessageListenerContainer#setConnectionFactory(ConnectionFactory)  */ public void setConnectionFactory(ConnectionFactory connectionFactory) {     this.connectionFactory = connectionFactory. }
true;public;1;3;/**  * @see AbstractMessageListenerContainer#setDestinationResolver(DestinationResolver)  */ ;/**  * @see AbstractMessageListenerContainer#setDestinationResolver(DestinationResolver)  */ public void setDestinationResolver(DestinationResolver destinationResolver) {     this.destinationResolver = destinationResolver. }
true;public;1;3;/**  * @see AbstractMessageListenerContainer#setErrorHandler(ErrorHandler)  */ ;/**  * @see AbstractMessageListenerContainer#setErrorHandler(ErrorHandler)  */ public void setErrorHandler(ErrorHandler errorHandler) {     this.errorHandler = errorHandler. }
true;public;1;3;/**  * @see AbstractMessageListenerContainer#setMessageConverter(MessageConverter)  */ ;/**  * @see AbstractMessageListenerContainer#setMessageConverter(MessageConverter)  */ public void setMessageConverter(MessageConverter messageConverter) {     this.messageConverter = messageConverter. }
true;public;1;3;/**  * @see AbstractMessageListenerContainer#setSessionTransacted(boolean)  */ ;/**  * @see AbstractMessageListenerContainer#setSessionTransacted(boolean)  */ public void setSessionTransacted(Boolean sessionTransacted) {     this.sessionTransacted = sessionTransacted. }
true;public;1;3;/**  * @see AbstractMessageListenerContainer#setSessionAcknowledgeMode(int)  */ ;/**  * @see AbstractMessageListenerContainer#setSessionAcknowledgeMode(int)  */ public void setSessionAcknowledgeMode(Integer sessionAcknowledgeMode) {     this.sessionAcknowledgeMode = sessionAcknowledgeMode. }
true;public;1;3;/**  * @see AbstractMessageListenerContainer#setPubSubDomain(boolean)  */ ;/**  * @see AbstractMessageListenerContainer#setPubSubDomain(boolean)  */ public void setPubSubDomain(Boolean pubSubDomain) {     this.pubSubDomain = pubSubDomain. }
true;public;1;3;/**  * @see AbstractMessageListenerContainer#setReplyPubSubDomain(boolean)  */ ;/**  * @see AbstractMessageListenerContainer#setReplyPubSubDomain(boolean)  */ public void setReplyPubSubDomain(Boolean replyPubSubDomain) {     this.replyPubSubDomain = replyPubSubDomain. }
true;public;1;3;/**  * @see AbstractMessageListenerContainer#setReplyQosSettings(QosSettings)  */ ;/**  * @see AbstractMessageListenerContainer#setReplyQosSettings(QosSettings)  */ public void setReplyQosSettings(QosSettings replyQosSettings) {     this.replyQosSettings = replyQosSettings. }
true;public;1;3;/**  * @see AbstractMessageListenerContainer#setSubscriptionDurable(boolean)  */ ;/**  * @see AbstractMessageListenerContainer#setSubscriptionDurable(boolean)  */ public void setSubscriptionDurable(Boolean subscriptionDurable) {     this.subscriptionDurable = subscriptionDurable. }
true;public;1;3;/**  * @see AbstractMessageListenerContainer#setSubscriptionShared(boolean)  */ ;/**  * @see AbstractMessageListenerContainer#setSubscriptionShared(boolean)  */ public void setSubscriptionShared(Boolean subscriptionShared) {     this.subscriptionShared = subscriptionShared. }
true;public;1;3;/**  * @see AbstractMessageListenerContainer#setClientId(String)  */ ;/**  * @see AbstractMessageListenerContainer#setClientId(String)  */ public void setClientId(String clientId) {     this.clientId = clientId. }
true;public;1;3;/**  * @see AbstractMessageListenerContainer#setPhase(int)  */ ;/**  * @see AbstractMessageListenerContainer#setPhase(int)  */ public void setPhase(int phase) {     this.phase = phase. }
true;public;1;3;/**  * @see AbstractMessageListenerContainer#setAutoStartup(boolean)  */ ;/**  * @see AbstractMessageListenerContainer#setAutoStartup(boolean)  */ public void setAutoStartup(boolean autoStartup) {     this.autoStartup = autoStartup. }
false;public;1;52;;@Override public C createListenerContainer(JmsListenerEndpoint endpoint) {     C instance = createContainerInstance().     if (this.connectionFactory != null) {         instance.setConnectionFactory(this.connectionFactory).     }     if (this.destinationResolver != null) {         instance.setDestinationResolver(this.destinationResolver).     }     if (this.errorHandler != null) {         instance.setErrorHandler(this.errorHandler).     }     if (this.messageConverter != null) {         instance.setMessageConverter(this.messageConverter).     }     if (this.sessionTransacted != null) {         instance.setSessionTransacted(this.sessionTransacted).     }     if (this.sessionAcknowledgeMode != null) {         instance.setSessionAcknowledgeMode(this.sessionAcknowledgeMode).     }     if (this.pubSubDomain != null) {         instance.setPubSubDomain(this.pubSubDomain).     }     if (this.replyPubSubDomain != null) {         instance.setReplyPubSubDomain(this.replyPubSubDomain).     }     if (this.replyQosSettings != null) {         instance.setReplyQosSettings(this.replyQosSettings).     }     if (this.subscriptionDurable != null) {         instance.setSubscriptionDurable(this.subscriptionDurable).     }     if (this.subscriptionShared != null) {         instance.setSubscriptionShared(this.subscriptionShared).     }     if (this.clientId != null) {         instance.setClientId(this.clientId).     }     if (this.phase != null) {         instance.setPhase(this.phase).     }     if (this.autoStartup != null) {         instance.setAutoStartup(this.autoStartup).     }     initializeContainer(instance).     endpoint.setupListenerContainer(instance).     return instance. }
true;protected,abstract;0;1;/**  * Create an empty container instance.  */ ;/**  * Create an empty container instance.  */ protected abstract C createContainerInstance().
true;protected;1;2;/**  * Further initialize the specified container.  * <p>Subclasses can inherit from this method to apply extra  * configuration if necessary.  */ ;/**  * Further initialize the specified container.  * <p>Subclasses can inherit from this method to apply extra  * configuration if necessary.  */ protected void initializeContainer(C instance) { }
