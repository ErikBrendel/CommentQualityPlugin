# id;timestamp;commentText;codeText;commentWords;codeWords
StandardJmsActivationSpecFactory -> protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1328020251;Populate the given ApplicationSpec object with the settings_defined in the given configuration object._<p>This implementation applies all standard JMS settings, but ignores_"maxConcurrency" and "prefetchSize" - not supported in standard JCA 1.5._@param bw the BeanWrapper wrapping the ActivationSpec object_@param config the configured object holding common JMS settings;protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		String destinationName = config.getDestinationName()__		boolean pubSubDomain = config.isPubSubDomain()__		Object destination = destinationName__		if (this.destinationResolver != null) {_			try {_				destination = this.destinationResolver.resolveDestinationName(null, destinationName, pubSubDomain)__			}_			catch (JMSException ex) {_				throw new DestinationResolutionException("Cannot resolve destination name [" + destinationName + "]", ex)__			}_		}_		bw.setPropertyValue("destination", destination)__		bw.setPropertyValue("destinationType", pubSubDomain ? Topic.class.getName() : Queue.class.getName())___		if (bw.isWritableProperty("subscriptionDurability")) {_			bw.setPropertyValue("subscriptionDurability", config.isSubscriptionDurable() ? "Durable" : "NonDurable")__		}_		else if (config.isSubscriptionDurable()) {_			_			throw new IllegalArgumentException(_					"Durable subscriptions not supported by underlying provider: " + this.activationSpecClass.getName())__		}_		if (config.getDurableSubscriptionName() != null) {_			bw.setPropertyValue("subscriptionName", config.getDurableSubscriptionName())__		}_		if (config.getClientId() != null) {_			bw.setPropertyValue("clientId", config.getClientId())__		}__		if (config.getMessageSelector() != null) {_			bw.setPropertyValue("messageSelector", config.getMessageSelector())__		}__		applyAcknowledgeMode(bw, config.getAcknowledgeMode())__	};populate,the,given,application,spec,object,with,the,settings,defined,in,the,given,configuration,object,p,this,implementation,applies,all,standard,jms,settings,but,ignores,max,concurrency,and,prefetch,size,not,supported,in,standard,jca,1,5,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,config,the,configured,object,holding,common,jms,settings;protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,string,destination,name,config,get,destination,name,boolean,pub,sub,domain,config,is,pub,sub,domain,object,destination,destination,name,if,this,destination,resolver,null,try,destination,this,destination,resolver,resolve,destination,name,null,destination,name,pub,sub,domain,catch,jmsexception,ex,throw,new,destination,resolution,exception,cannot,resolve,destination,name,destination,name,ex,bw,set,property,value,destination,destination,bw,set,property,value,destination,type,pub,sub,domain,topic,class,get,name,queue,class,get,name,if,bw,is,writable,property,subscription,durability,bw,set,property,value,subscription,durability,config,is,subscription,durable,durable,non,durable,else,if,config,is,subscription,durable,throw,new,illegal,argument,exception,durable,subscriptions,not,supported,by,underlying,provider,this,activation,spec,class,get,name,if,config,get,durable,subscription,name,null,bw,set,property,value,subscription,name,config,get,durable,subscription,name,if,config,get,client,id,null,bw,set,property,value,client,id,config,get,client,id,if,config,get,message,selector,null,bw,set,property,value,message,selector,config,get,message,selector,apply,acknowledge,mode,bw,config,get,acknowledge,mode
StandardJmsActivationSpecFactory -> protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1356735495;Populate the given ApplicationSpec object with the settings_defined in the given configuration object._<p>This implementation applies all standard JMS settings, but ignores_"maxConcurrency" and "prefetchSize" - not supported in standard JCA 1.5._@param bw the BeanWrapper wrapping the ActivationSpec object_@param config the configured object holding common JMS settings;protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		String destinationName = config.getDestinationName()__		boolean pubSubDomain = config.isPubSubDomain()__		Object destination = destinationName__		if (this.destinationResolver != null) {_			try {_				destination = this.destinationResolver.resolveDestinationName(null, destinationName, pubSubDomain)__			}_			catch (JMSException ex) {_				throw new DestinationResolutionException("Cannot resolve destination name [" + destinationName + "]", ex)__			}_		}_		bw.setPropertyValue("destination", destination)__		bw.setPropertyValue("destinationType", pubSubDomain ? Topic.class.getName() : Queue.class.getName())___		if (bw.isWritableProperty("subscriptionDurability")) {_			bw.setPropertyValue("subscriptionDurability", config.isSubscriptionDurable() ? "Durable" : "NonDurable")__		}_		else if (config.isSubscriptionDurable()) {_			_			throw new IllegalArgumentException(_					"Durable subscriptions not supported by underlying provider: " + this.activationSpecClass.getName())__		}_		if (config.getDurableSubscriptionName() != null) {_			bw.setPropertyValue("subscriptionName", config.getDurableSubscriptionName())__		}_		if (config.getClientId() != null) {_			bw.setPropertyValue("clientId", config.getClientId())__		}__		if (config.getMessageSelector() != null) {_			bw.setPropertyValue("messageSelector", config.getMessageSelector())__		}__		applyAcknowledgeMode(bw, config.getAcknowledgeMode())__	};populate,the,given,application,spec,object,with,the,settings,defined,in,the,given,configuration,object,p,this,implementation,applies,all,standard,jms,settings,but,ignores,max,concurrency,and,prefetch,size,not,supported,in,standard,jca,1,5,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,config,the,configured,object,holding,common,jms,settings;protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,string,destination,name,config,get,destination,name,boolean,pub,sub,domain,config,is,pub,sub,domain,object,destination,destination,name,if,this,destination,resolver,null,try,destination,this,destination,resolver,resolve,destination,name,null,destination,name,pub,sub,domain,catch,jmsexception,ex,throw,new,destination,resolution,exception,cannot,resolve,destination,name,destination,name,ex,bw,set,property,value,destination,destination,bw,set,property,value,destination,type,pub,sub,domain,topic,class,get,name,queue,class,get,name,if,bw,is,writable,property,subscription,durability,bw,set,property,value,subscription,durability,config,is,subscription,durable,durable,non,durable,else,if,config,is,subscription,durable,throw,new,illegal,argument,exception,durable,subscriptions,not,supported,by,underlying,provider,this,activation,spec,class,get,name,if,config,get,durable,subscription,name,null,bw,set,property,value,subscription,name,config,get,durable,subscription,name,if,config,get,client,id,null,bw,set,property,value,client,id,config,get,client,id,if,config,get,message,selector,null,bw,set,property,value,message,selector,config,get,message,selector,apply,acknowledge,mode,bw,config,get,acknowledge,mode
StandardJmsActivationSpecFactory -> protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1357119239;Populate the given ApplicationSpec object with the settings_defined in the given configuration object._<p>This implementation applies all standard JMS settings, but ignores_"maxConcurrency" and "prefetchSize" - not supported in standard JCA 1.5._@param bw the BeanWrapper wrapping the ActivationSpec object_@param config the configured object holding common JMS settings;protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		String destinationName = config.getDestinationName()__		boolean pubSubDomain = config.isPubSubDomain()__		Object destination = destinationName__		if (this.destinationResolver != null) {_			try {_				destination = this.destinationResolver.resolveDestinationName(null, destinationName, pubSubDomain)__			}_			catch (JMSException ex) {_				throw new DestinationResolutionException("Cannot resolve destination name [" + destinationName + "]", ex)__			}_		}_		bw.setPropertyValue("destination", destination)__		bw.setPropertyValue("destinationType", pubSubDomain ? Topic.class.getName() : Queue.class.getName())___		if (bw.isWritableProperty("subscriptionDurability")) {_			bw.setPropertyValue("subscriptionDurability", config.isSubscriptionDurable() ? "Durable" : "NonDurable")__		}_		else if (config.isSubscriptionDurable()) {_			_			throw new IllegalArgumentException(_					"Durable subscriptions not supported by underlying provider: " + this.activationSpecClass.getName())__		}_		if (config.getDurableSubscriptionName() != null) {_			bw.setPropertyValue("subscriptionName", config.getDurableSubscriptionName())__		}_		if (config.getClientId() != null) {_			bw.setPropertyValue("clientId", config.getClientId())__		}__		if (config.getMessageSelector() != null) {_			bw.setPropertyValue("messageSelector", config.getMessageSelector())__		}__		applyAcknowledgeMode(bw, config.getAcknowledgeMode())__	};populate,the,given,application,spec,object,with,the,settings,defined,in,the,given,configuration,object,p,this,implementation,applies,all,standard,jms,settings,but,ignores,max,concurrency,and,prefetch,size,not,supported,in,standard,jca,1,5,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,config,the,configured,object,holding,common,jms,settings;protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,string,destination,name,config,get,destination,name,boolean,pub,sub,domain,config,is,pub,sub,domain,object,destination,destination,name,if,this,destination,resolver,null,try,destination,this,destination,resolver,resolve,destination,name,null,destination,name,pub,sub,domain,catch,jmsexception,ex,throw,new,destination,resolution,exception,cannot,resolve,destination,name,destination,name,ex,bw,set,property,value,destination,destination,bw,set,property,value,destination,type,pub,sub,domain,topic,class,get,name,queue,class,get,name,if,bw,is,writable,property,subscription,durability,bw,set,property,value,subscription,durability,config,is,subscription,durable,durable,non,durable,else,if,config,is,subscription,durable,throw,new,illegal,argument,exception,durable,subscriptions,not,supported,by,underlying,provider,this,activation,spec,class,get,name,if,config,get,durable,subscription,name,null,bw,set,property,value,subscription,name,config,get,durable,subscription,name,if,config,get,client,id,null,bw,set,property,value,client,id,config,get,client,id,if,config,get,message,selector,null,bw,set,property,value,message,selector,config,get,message,selector,apply,acknowledge,mode,bw,config,get,acknowledge,mode
StandardJmsActivationSpecFactory -> protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1368482696;Populate the given ApplicationSpec object with the settings_defined in the given configuration object._<p>This implementation applies all standard JMS settings, but ignores_"maxConcurrency" and "prefetchSize" - not supported in standard JCA 1.5._@param bw the BeanWrapper wrapping the ActivationSpec object_@param config the configured object holding common JMS settings;protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		String destinationName = config.getDestinationName()__		boolean pubSubDomain = config.isPubSubDomain()__		Object destination = destinationName__		if (this.destinationResolver != null) {_			try {_				destination = this.destinationResolver.resolveDestinationName(null, destinationName, pubSubDomain)__			}_			catch (JMSException ex) {_				throw new DestinationResolutionException("Cannot resolve destination name [" + destinationName + "]", ex)__			}_		}_		bw.setPropertyValue("destination", destination)__		bw.setPropertyValue("destinationType", pubSubDomain ? Topic.class.getName() : Queue.class.getName())___		if (bw.isWritableProperty("subscriptionDurability")) {_			bw.setPropertyValue("subscriptionDurability", config.isSubscriptionDurable() ? "Durable" : "NonDurable")__		}_		else if (config.isSubscriptionDurable()) {_			_			throw new IllegalArgumentException(_					"Durable subscriptions not supported by underlying provider: " + this.activationSpecClass.getName())__		}_		if (config.getDurableSubscriptionName() != null) {_			bw.setPropertyValue("subscriptionName", config.getDurableSubscriptionName())__		}_		if (config.getClientId() != null) {_			bw.setPropertyValue("clientId", config.getClientId())__		}__		if (config.getMessageSelector() != null) {_			bw.setPropertyValue("messageSelector", config.getMessageSelector())__		}__		applyAcknowledgeMode(bw, config.getAcknowledgeMode())__	};populate,the,given,application,spec,object,with,the,settings,defined,in,the,given,configuration,object,p,this,implementation,applies,all,standard,jms,settings,but,ignores,max,concurrency,and,prefetch,size,not,supported,in,standard,jca,1,5,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,config,the,configured,object,holding,common,jms,settings;protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,string,destination,name,config,get,destination,name,boolean,pub,sub,domain,config,is,pub,sub,domain,object,destination,destination,name,if,this,destination,resolver,null,try,destination,this,destination,resolver,resolve,destination,name,null,destination,name,pub,sub,domain,catch,jmsexception,ex,throw,new,destination,resolution,exception,cannot,resolve,destination,name,destination,name,ex,bw,set,property,value,destination,destination,bw,set,property,value,destination,type,pub,sub,domain,topic,class,get,name,queue,class,get,name,if,bw,is,writable,property,subscription,durability,bw,set,property,value,subscription,durability,config,is,subscription,durable,durable,non,durable,else,if,config,is,subscription,durable,throw,new,illegal,argument,exception,durable,subscriptions,not,supported,by,underlying,provider,this,activation,spec,class,get,name,if,config,get,durable,subscription,name,null,bw,set,property,value,subscription,name,config,get,durable,subscription,name,if,config,get,client,id,null,bw,set,property,value,client,id,config,get,client,id,if,config,get,message,selector,null,bw,set,property,value,message,selector,config,get,message,selector,apply,acknowledge,mode,bw,config,get,acknowledge,mode
StandardJmsActivationSpecFactory -> protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1385412762;Populate the given ApplicationSpec object with the settings_defined in the given configuration object._<p>This implementation applies all standard JMS settings, but ignores_"maxConcurrency" and "prefetchSize" - not supported in standard JCA 1.5._@param bw the BeanWrapper wrapping the ActivationSpec object_@param config the configured object holding common JMS settings;protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		String destinationName = config.getDestinationName()__		boolean pubSubDomain = config.isPubSubDomain()__		Object destination = destinationName__		if (this.destinationResolver != null) {_			try {_				destination = this.destinationResolver.resolveDestinationName(null, destinationName, pubSubDomain)__			}_			catch (JMSException ex) {_				throw new DestinationResolutionException("Cannot resolve destination name [" + destinationName + "]", ex)__			}_		}_		bw.setPropertyValue("destination", destination)__		bw.setPropertyValue("destinationType", pubSubDomain ? Topic.class.getName() : Queue.class.getName())___		if (bw.isWritableProperty("subscriptionDurability")) {_			bw.setPropertyValue("subscriptionDurability", config.isSubscriptionDurable() ? "Durable" : "NonDurable")__		}_		else if (config.isSubscriptionDurable()) {_			_			throw new IllegalArgumentException(_					"Durable subscriptions not supported by underlying provider: " + this.activationSpecClass.getName())__		}_		if (config.getDurableSubscriptionName() != null) {_			bw.setPropertyValue("subscriptionName", config.getDurableSubscriptionName())__		}_		if (config.getClientId() != null) {_			bw.setPropertyValue("clientId", config.getClientId())__		}__		if (config.getMessageSelector() != null) {_			bw.setPropertyValue("messageSelector", config.getMessageSelector())__		}__		applyAcknowledgeMode(bw, config.getAcknowledgeMode())__	};populate,the,given,application,spec,object,with,the,settings,defined,in,the,given,configuration,object,p,this,implementation,applies,all,standard,jms,settings,but,ignores,max,concurrency,and,prefetch,size,not,supported,in,standard,jca,1,5,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,config,the,configured,object,holding,common,jms,settings;protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,string,destination,name,config,get,destination,name,boolean,pub,sub,domain,config,is,pub,sub,domain,object,destination,destination,name,if,this,destination,resolver,null,try,destination,this,destination,resolver,resolve,destination,name,null,destination,name,pub,sub,domain,catch,jmsexception,ex,throw,new,destination,resolution,exception,cannot,resolve,destination,name,destination,name,ex,bw,set,property,value,destination,destination,bw,set,property,value,destination,type,pub,sub,domain,topic,class,get,name,queue,class,get,name,if,bw,is,writable,property,subscription,durability,bw,set,property,value,subscription,durability,config,is,subscription,durable,durable,non,durable,else,if,config,is,subscription,durable,throw,new,illegal,argument,exception,durable,subscriptions,not,supported,by,underlying,provider,this,activation,spec,class,get,name,if,config,get,durable,subscription,name,null,bw,set,property,value,subscription,name,config,get,durable,subscription,name,if,config,get,client,id,null,bw,set,property,value,client,id,config,get,client,id,if,config,get,message,selector,null,bw,set,property,value,message,selector,config,get,message,selector,apply,acknowledge,mode,bw,config,get,acknowledge,mode
StandardJmsActivationSpecFactory -> protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1405696881;Populate the given ApplicationSpec object with the settings_defined in the given configuration object._<p>This implementation applies all standard JMS settings, but ignores_"maxConcurrency" and "prefetchSize" - not supported in standard JCA 1.5._@param bw the BeanWrapper wrapping the ActivationSpec object_@param config the configured object holding common JMS settings;protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		String destinationName = config.getDestinationName()__		boolean pubSubDomain = config.isPubSubDomain()__		Object destination = destinationName__		if (this.destinationResolver != null) {_			try {_				destination = this.destinationResolver.resolveDestinationName(null, destinationName, pubSubDomain)__			}_			catch (JMSException ex) {_				throw new DestinationResolutionException("Cannot resolve destination name [" + destinationName + "]", ex)__			}_		}_		bw.setPropertyValue("destination", destination)__		bw.setPropertyValue("destinationType", pubSubDomain ? Topic.class.getName() : Queue.class.getName())___		if (bw.isWritableProperty("subscriptionDurability")) {_			bw.setPropertyValue("subscriptionDurability", config.isSubscriptionDurable() ? "Durable" : "NonDurable")__		}_		else if (config.isSubscriptionDurable()) {_			_			throw new IllegalArgumentException(_					"Durable subscriptions not supported by underlying provider: " + this.activationSpecClass.getName())__		}_		if (config.isSubscriptionShared()) {_			throw new IllegalArgumentException("Shared subscriptions not supported for JCA-driven endpoints")__		}__		if (config.getSubscriptionName() != null) {_			bw.setPropertyValue("subscriptionName", config.getSubscriptionName())__		}_		if (config.getClientId() != null) {_			bw.setPropertyValue("clientId", config.getClientId())__		}_		if (config.getMessageSelector() != null) {_			bw.setPropertyValue("messageSelector", config.getMessageSelector())__		}_		applyAcknowledgeMode(bw, config.getAcknowledgeMode())__	};populate,the,given,application,spec,object,with,the,settings,defined,in,the,given,configuration,object,p,this,implementation,applies,all,standard,jms,settings,but,ignores,max,concurrency,and,prefetch,size,not,supported,in,standard,jca,1,5,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,config,the,configured,object,holding,common,jms,settings;protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,string,destination,name,config,get,destination,name,boolean,pub,sub,domain,config,is,pub,sub,domain,object,destination,destination,name,if,this,destination,resolver,null,try,destination,this,destination,resolver,resolve,destination,name,null,destination,name,pub,sub,domain,catch,jmsexception,ex,throw,new,destination,resolution,exception,cannot,resolve,destination,name,destination,name,ex,bw,set,property,value,destination,destination,bw,set,property,value,destination,type,pub,sub,domain,topic,class,get,name,queue,class,get,name,if,bw,is,writable,property,subscription,durability,bw,set,property,value,subscription,durability,config,is,subscription,durable,durable,non,durable,else,if,config,is,subscription,durable,throw,new,illegal,argument,exception,durable,subscriptions,not,supported,by,underlying,provider,this,activation,spec,class,get,name,if,config,is,subscription,shared,throw,new,illegal,argument,exception,shared,subscriptions,not,supported,for,jca,driven,endpoints,if,config,get,subscription,name,null,bw,set,property,value,subscription,name,config,get,subscription,name,if,config,get,client,id,null,bw,set,property,value,client,id,config,get,client,id,if,config,get,message,selector,null,bw,set,property,value,message,selector,config,get,message,selector,apply,acknowledge,mode,bw,config,get,acknowledge,mode
StandardJmsActivationSpecFactory -> protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1429516293;Populate the given ApplicationSpec object with the settings_defined in the given configuration object._<p>This implementation applies all standard JMS settings, but ignores_"maxConcurrency" and "prefetchSize" - not supported in standard JCA 1.5._@param bw the BeanWrapper wrapping the ActivationSpec object_@param config the configured object holding common JMS settings;protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		String destinationName = config.getDestinationName()__		boolean pubSubDomain = config.isPubSubDomain()__		Object destination = destinationName__		if (this.destinationResolver != null) {_			try {_				destination = this.destinationResolver.resolveDestinationName(null, destinationName, pubSubDomain)__			}_			catch (JMSException ex) {_				throw new DestinationResolutionException("Cannot resolve destination name [" + destinationName + "]", ex)__			}_		}_		bw.setPropertyValue("destination", destination)__		bw.setPropertyValue("destinationType", pubSubDomain ? Topic.class.getName() : Queue.class.getName())___		if (bw.isWritableProperty("subscriptionDurability")) {_			bw.setPropertyValue("subscriptionDurability", config.isSubscriptionDurable() ? "Durable" : "NonDurable")__		}_		else if (config.isSubscriptionDurable()) {_			_			throw new IllegalArgumentException(_					"Durable subscriptions not supported by underlying provider: " + this.activationSpecClass.getName())__		}_		if (config.isSubscriptionShared()) {_			throw new IllegalArgumentException("Shared subscriptions not supported for JCA-driven endpoints")__		}__		if (config.getSubscriptionName() != null) {_			bw.setPropertyValue("subscriptionName", config.getSubscriptionName())__		}_		if (config.getClientId() != null) {_			bw.setPropertyValue("clientId", config.getClientId())__		}_		if (config.getMessageSelector() != null) {_			bw.setPropertyValue("messageSelector", config.getMessageSelector())__		}_		applyAcknowledgeMode(bw, config.getAcknowledgeMode())__	};populate,the,given,application,spec,object,with,the,settings,defined,in,the,given,configuration,object,p,this,implementation,applies,all,standard,jms,settings,but,ignores,max,concurrency,and,prefetch,size,not,supported,in,standard,jca,1,5,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,config,the,configured,object,holding,common,jms,settings;protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,string,destination,name,config,get,destination,name,boolean,pub,sub,domain,config,is,pub,sub,domain,object,destination,destination,name,if,this,destination,resolver,null,try,destination,this,destination,resolver,resolve,destination,name,null,destination,name,pub,sub,domain,catch,jmsexception,ex,throw,new,destination,resolution,exception,cannot,resolve,destination,name,destination,name,ex,bw,set,property,value,destination,destination,bw,set,property,value,destination,type,pub,sub,domain,topic,class,get,name,queue,class,get,name,if,bw,is,writable,property,subscription,durability,bw,set,property,value,subscription,durability,config,is,subscription,durable,durable,non,durable,else,if,config,is,subscription,durable,throw,new,illegal,argument,exception,durable,subscriptions,not,supported,by,underlying,provider,this,activation,spec,class,get,name,if,config,is,subscription,shared,throw,new,illegal,argument,exception,shared,subscriptions,not,supported,for,jca,driven,endpoints,if,config,get,subscription,name,null,bw,set,property,value,subscription,name,config,get,subscription,name,if,config,get,client,id,null,bw,set,property,value,client,id,config,get,client,id,if,config,get,message,selector,null,bw,set,property,value,message,selector,config,get,message,selector,apply,acknowledge,mode,bw,config,get,acknowledge,mode
StandardJmsActivationSpecFactory -> protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1495868221;Populate the given ApplicationSpec object with the settings_defined in the given configuration object._<p>This implementation applies all standard JMS settings, but ignores_"maxConcurrency" and "prefetchSize" - not supported in standard JCA 1.5._@param bw the BeanWrapper wrapping the ActivationSpec object_@param config the configured object holding common JMS settings;protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		String destinationName = config.getDestinationName()__		boolean pubSubDomain = config.isPubSubDomain()__		Object destination = destinationName__		if (this.destinationResolver != null) {_			try {_				destination = this.destinationResolver.resolveDestinationName(null, destinationName, pubSubDomain)__			}_			catch (JMSException ex) {_				throw new DestinationResolutionException("Cannot resolve destination name [" + destinationName + "]", ex)__			}_		}_		bw.setPropertyValue("destination", destination)__		bw.setPropertyValue("destinationType", pubSubDomain ? Topic.class.getName() : Queue.class.getName())___		if (bw.isWritableProperty("subscriptionDurability")) {_			bw.setPropertyValue("subscriptionDurability", config.isSubscriptionDurable() ? "Durable" : "NonDurable")__		}_		else if (config.isSubscriptionDurable()) {_			_			throw new IllegalArgumentException(_					"Durable subscriptions not supported by underlying provider: " + this.activationSpecClass.getName())__		}_		if (config.isSubscriptionShared()) {_			throw new IllegalArgumentException("Shared subscriptions not supported for JCA-driven endpoints")__		}__		if (config.getSubscriptionName() != null) {_			bw.setPropertyValue("subscriptionName", config.getSubscriptionName())__		}_		if (config.getClientId() != null) {_			bw.setPropertyValue("clientId", config.getClientId())__		}_		if (config.getMessageSelector() != null) {_			bw.setPropertyValue("messageSelector", config.getMessageSelector())__		}_		applyAcknowledgeMode(bw, config.getAcknowledgeMode())__	};populate,the,given,application,spec,object,with,the,settings,defined,in,the,given,configuration,object,p,this,implementation,applies,all,standard,jms,settings,but,ignores,max,concurrency,and,prefetch,size,not,supported,in,standard,jca,1,5,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,config,the,configured,object,holding,common,jms,settings;protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,string,destination,name,config,get,destination,name,boolean,pub,sub,domain,config,is,pub,sub,domain,object,destination,destination,name,if,this,destination,resolver,null,try,destination,this,destination,resolver,resolve,destination,name,null,destination,name,pub,sub,domain,catch,jmsexception,ex,throw,new,destination,resolution,exception,cannot,resolve,destination,name,destination,name,ex,bw,set,property,value,destination,destination,bw,set,property,value,destination,type,pub,sub,domain,topic,class,get,name,queue,class,get,name,if,bw,is,writable,property,subscription,durability,bw,set,property,value,subscription,durability,config,is,subscription,durable,durable,non,durable,else,if,config,is,subscription,durable,throw,new,illegal,argument,exception,durable,subscriptions,not,supported,by,underlying,provider,this,activation,spec,class,get,name,if,config,is,subscription,shared,throw,new,illegal,argument,exception,shared,subscriptions,not,supported,for,jca,driven,endpoints,if,config,get,subscription,name,null,bw,set,property,value,subscription,name,config,get,subscription,name,if,config,get,client,id,null,bw,set,property,value,client,id,config,get,client,id,if,config,get,message,selector,null,bw,set,property,value,message,selector,config,get,message,selector,apply,acknowledge,mode,bw,config,get,acknowledge,mode
StandardJmsActivationSpecFactory -> protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1496837955;Populate the given ApplicationSpec object with the settings_defined in the given configuration object._<p>This implementation applies all standard JMS settings, but ignores_"maxConcurrency" and "prefetchSize" - not supported in standard JCA 1.5._@param bw the BeanWrapper wrapping the ActivationSpec object_@param config the configured object holding common JMS settings;protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		String destinationName = config.getDestinationName()__		boolean pubSubDomain = config.isPubSubDomain()__		Object destination = destinationName__		if (this.destinationResolver != null) {_			try {_				destination = this.destinationResolver.resolveDestinationName(null, destinationName, pubSubDomain)__			}_			catch (JMSException ex) {_				throw new DestinationResolutionException("Cannot resolve destination name [" + destinationName + "]", ex)__			}_		}_		bw.setPropertyValue("destination", destination)__		bw.setPropertyValue("destinationType", pubSubDomain ? Topic.class.getName() : Queue.class.getName())___		if (bw.isWritableProperty("subscriptionDurability")) {_			bw.setPropertyValue("subscriptionDurability", config.isSubscriptionDurable() ? "Durable" : "NonDurable")__		}_		else if (config.isSubscriptionDurable()) {_			_			throw new IllegalArgumentException(_					"Durable subscriptions not supported by underlying provider: " + this.activationSpecClass.getName())__		}_		if (config.isSubscriptionShared()) {_			throw new IllegalArgumentException("Shared subscriptions not supported for JCA-driven endpoints")__		}__		if (config.getSubscriptionName() != null) {_			bw.setPropertyValue("subscriptionName", config.getSubscriptionName())__		}_		if (config.getClientId() != null) {_			bw.setPropertyValue("clientId", config.getClientId())__		}_		if (config.getMessageSelector() != null) {_			bw.setPropertyValue("messageSelector", config.getMessageSelector())__		}_		applyAcknowledgeMode(bw, config.getAcknowledgeMode())__	};populate,the,given,application,spec,object,with,the,settings,defined,in,the,given,configuration,object,p,this,implementation,applies,all,standard,jms,settings,but,ignores,max,concurrency,and,prefetch,size,not,supported,in,standard,jca,1,5,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,config,the,configured,object,holding,common,jms,settings;protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,string,destination,name,config,get,destination,name,boolean,pub,sub,domain,config,is,pub,sub,domain,object,destination,destination,name,if,this,destination,resolver,null,try,destination,this,destination,resolver,resolve,destination,name,null,destination,name,pub,sub,domain,catch,jmsexception,ex,throw,new,destination,resolution,exception,cannot,resolve,destination,name,destination,name,ex,bw,set,property,value,destination,destination,bw,set,property,value,destination,type,pub,sub,domain,topic,class,get,name,queue,class,get,name,if,bw,is,writable,property,subscription,durability,bw,set,property,value,subscription,durability,config,is,subscription,durable,durable,non,durable,else,if,config,is,subscription,durable,throw,new,illegal,argument,exception,durable,subscriptions,not,supported,by,underlying,provider,this,activation,spec,class,get,name,if,config,is,subscription,shared,throw,new,illegal,argument,exception,shared,subscriptions,not,supported,for,jca,driven,endpoints,if,config,get,subscription,name,null,bw,set,property,value,subscription,name,config,get,subscription,name,if,config,get,client,id,null,bw,set,property,value,client,id,config,get,client,id,if,config,get,message,selector,null,bw,set,property,value,message,selector,config,get,message,selector,apply,acknowledge,mode,bw,config,get,acknowledge,mode
StandardJmsActivationSpecFactory -> protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1498780456;Populate the given ApplicationSpec object with the settings_defined in the given configuration object._<p>This implementation applies all standard JMS settings, but ignores_"maxConcurrency" and "prefetchSize" - not supported in standard JCA 1.5._@param bw the BeanWrapper wrapping the ActivationSpec object_@param config the configured object holding common JMS settings;protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		String destinationName = config.getDestinationName()__		if (destinationName != null) {_			boolean pubSubDomain = config.isPubSubDomain()__			Object destination = destinationName__			if (this.destinationResolver != null) {_				try {_					destination = this.destinationResolver.resolveDestinationName(null, destinationName, pubSubDomain)__				}_				catch (JMSException ex) {_					throw new DestinationResolutionException(_							"Cannot resolve destination name [" + destinationName + "]", ex)__				}_			}_			bw.setPropertyValue("destination", destination)__			bw.setPropertyValue("destinationType", pubSubDomain ? Topic.class.getName() : Queue.class.getName())__		}__		if (bw.isWritableProperty("subscriptionDurability")) {_			bw.setPropertyValue("subscriptionDurability", config.isSubscriptionDurable() ? "Durable" : "NonDurable")__		}_		else if (config.isSubscriptionDurable()) {_			_			throw new IllegalArgumentException("Durable subscriptions not supported by underlying provider")__		}_		if (config.isSubscriptionShared()) {_			throw new IllegalArgumentException("Shared subscriptions not supported for JCA-driven endpoints")__		}__		if (config.getSubscriptionName() != null) {_			bw.setPropertyValue("subscriptionName", config.getSubscriptionName())__		}_		if (config.getClientId() != null) {_			bw.setPropertyValue("clientId", config.getClientId())__		}_		if (config.getMessageSelector() != null) {_			bw.setPropertyValue("messageSelector", config.getMessageSelector())__		}_		applyAcknowledgeMode(bw, config.getAcknowledgeMode())__	};populate,the,given,application,spec,object,with,the,settings,defined,in,the,given,configuration,object,p,this,implementation,applies,all,standard,jms,settings,but,ignores,max,concurrency,and,prefetch,size,not,supported,in,standard,jca,1,5,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,config,the,configured,object,holding,common,jms,settings;protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,string,destination,name,config,get,destination,name,if,destination,name,null,boolean,pub,sub,domain,config,is,pub,sub,domain,object,destination,destination,name,if,this,destination,resolver,null,try,destination,this,destination,resolver,resolve,destination,name,null,destination,name,pub,sub,domain,catch,jmsexception,ex,throw,new,destination,resolution,exception,cannot,resolve,destination,name,destination,name,ex,bw,set,property,value,destination,destination,bw,set,property,value,destination,type,pub,sub,domain,topic,class,get,name,queue,class,get,name,if,bw,is,writable,property,subscription,durability,bw,set,property,value,subscription,durability,config,is,subscription,durable,durable,non,durable,else,if,config,is,subscription,durable,throw,new,illegal,argument,exception,durable,subscriptions,not,supported,by,underlying,provider,if,config,is,subscription,shared,throw,new,illegal,argument,exception,shared,subscriptions,not,supported,for,jca,driven,endpoints,if,config,get,subscription,name,null,bw,set,property,value,subscription,name,config,get,subscription,name,if,config,get,client,id,null,bw,set,property,value,client,id,config,get,client,id,if,config,get,message,selector,null,bw,set,property,value,message,selector,config,get,message,selector,apply,acknowledge,mode,bw,config,get,acknowledge,mode
StandardJmsActivationSpecFactory -> protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1500448076;Populate the given ApplicationSpec object with the settings_defined in the given configuration object._<p>This implementation applies all standard JMS settings, but ignores_"maxConcurrency" and "prefetchSize" - not supported in standard JCA 1.5._@param bw the BeanWrapper wrapping the ActivationSpec object_@param config the configured object holding common JMS settings;protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		String destinationName = config.getDestinationName()__		if (destinationName != null) {_			boolean pubSubDomain = config.isPubSubDomain()__			Object destination = destinationName__			if (this.destinationResolver != null) {_				try {_					destination = this.destinationResolver.resolveDestinationName(null, destinationName, pubSubDomain)__				}_				catch (JMSException ex) {_					throw new DestinationResolutionException(_							"Cannot resolve destination name [" + destinationName + "]", ex)__				}_			}_			bw.setPropertyValue("destination", destination)__			bw.setPropertyValue("destinationType", pubSubDomain ? Topic.class.getName() : Queue.class.getName())__		}__		if (bw.isWritableProperty("subscriptionDurability")) {_			bw.setPropertyValue("subscriptionDurability", config.isSubscriptionDurable() ? "Durable" : "NonDurable")__		}_		else if (config.isSubscriptionDurable()) {_			_			throw new IllegalArgumentException("Durable subscriptions not supported by underlying provider")__		}_		if (config.isSubscriptionShared()) {_			throw new IllegalArgumentException("Shared subscriptions not supported for JCA-driven endpoints")__		}__		if (config.getSubscriptionName() != null) {_			bw.setPropertyValue("subscriptionName", config.getSubscriptionName())__		}_		if (config.getClientId() != null) {_			bw.setPropertyValue("clientId", config.getClientId())__		}_		if (config.getMessageSelector() != null) {_			bw.setPropertyValue("messageSelector", config.getMessageSelector())__		}_		applyAcknowledgeMode(bw, config.getAcknowledgeMode())__	};populate,the,given,application,spec,object,with,the,settings,defined,in,the,given,configuration,object,p,this,implementation,applies,all,standard,jms,settings,but,ignores,max,concurrency,and,prefetch,size,not,supported,in,standard,jca,1,5,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,config,the,configured,object,holding,common,jms,settings;protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,string,destination,name,config,get,destination,name,if,destination,name,null,boolean,pub,sub,domain,config,is,pub,sub,domain,object,destination,destination,name,if,this,destination,resolver,null,try,destination,this,destination,resolver,resolve,destination,name,null,destination,name,pub,sub,domain,catch,jmsexception,ex,throw,new,destination,resolution,exception,cannot,resolve,destination,name,destination,name,ex,bw,set,property,value,destination,destination,bw,set,property,value,destination,type,pub,sub,domain,topic,class,get,name,queue,class,get,name,if,bw,is,writable,property,subscription,durability,bw,set,property,value,subscription,durability,config,is,subscription,durable,durable,non,durable,else,if,config,is,subscription,durable,throw,new,illegal,argument,exception,durable,subscriptions,not,supported,by,underlying,provider,if,config,is,subscription,shared,throw,new,illegal,argument,exception,shared,subscriptions,not,supported,for,jca,driven,endpoints,if,config,get,subscription,name,null,bw,set,property,value,subscription,name,config,get,subscription,name,if,config,get,client,id,null,bw,set,property,value,client,id,config,get,client,id,if,config,get,message,selector,null,bw,set,property,value,message,selector,config,get,message,selector,apply,acknowledge,mode,bw,config,get,acknowledge,mode
StandardJmsActivationSpecFactory -> protected Class determineActivationSpecClass(ResourceAdapter adapter);1328020251;Determine the ActivationSpec class for the given ResourceAdapter,_if possible. Called if no 'activationSpecClass' has been set explicitly_@param adapter the ResourceAdapter to check_@return the corresponding ActivationSpec class, or <code>null</code>_if not determinable_@see #setActivationSpecClass;protected Class determineActivationSpecClass(ResourceAdapter adapter) {_		return null__	};determine,the,activation,spec,class,for,the,given,resource,adapter,if,possible,called,if,no,activation,spec,class,has,been,set,explicitly,param,adapter,the,resource,adapter,to,check,return,the,corresponding,activation,spec,class,or,code,null,code,if,not,determinable,see,set,activation,spec,class;protected,class,determine,activation,spec,class,resource,adapter,adapter,return,null
StandardJmsActivationSpecFactory -> protected Class determineActivationSpecClass(ResourceAdapter adapter);1356735495;Determine the ActivationSpec class for the given ResourceAdapter,_if possible. Called if no 'activationSpecClass' has been set explicitly_@param adapter the ResourceAdapter to check_@return the corresponding ActivationSpec class, or {@code null}_if not determinable_@see #setActivationSpecClass;protected Class determineActivationSpecClass(ResourceAdapter adapter) {_		return null__	};determine,the,activation,spec,class,for,the,given,resource,adapter,if,possible,called,if,no,activation,spec,class,has,been,set,explicitly,param,adapter,the,resource,adapter,to,check,return,the,corresponding,activation,spec,class,or,code,null,if,not,determinable,see,set,activation,spec,class;protected,class,determine,activation,spec,class,resource,adapter,adapter,return,null
StandardJmsActivationSpecFactory -> protected Class determineActivationSpecClass(ResourceAdapter adapter);1357119239;Determine the ActivationSpec class for the given ResourceAdapter,_if possible. Called if no 'activationSpecClass' has been set explicitly_@param adapter the ResourceAdapter to check_@return the corresponding ActivationSpec class, or {@code null}_if not determinable_@see #setActivationSpecClass;protected Class determineActivationSpecClass(ResourceAdapter adapter) {_		return null__	};determine,the,activation,spec,class,for,the,given,resource,adapter,if,possible,called,if,no,activation,spec,class,has,been,set,explicitly,param,adapter,the,resource,adapter,to,check,return,the,corresponding,activation,spec,class,or,code,null,if,not,determinable,see,set,activation,spec,class;protected,class,determine,activation,spec,class,resource,adapter,adapter,return,null
StandardJmsActivationSpecFactory -> protected Class determineActivationSpecClass(ResourceAdapter adapter);1368482696;Determine the ActivationSpec class for the given ResourceAdapter,_if possible. Called if no 'activationSpecClass' has been set explicitly_@param adapter the ResourceAdapter to check_@return the corresponding ActivationSpec class, or {@code null}_if not determinable_@see #setActivationSpecClass;protected Class determineActivationSpecClass(ResourceAdapter adapter) {_		return null__	};determine,the,activation,spec,class,for,the,given,resource,adapter,if,possible,called,if,no,activation,spec,class,has,been,set,explicitly,param,adapter,the,resource,adapter,to,check,return,the,corresponding,activation,spec,class,or,code,null,if,not,determinable,see,set,activation,spec,class;protected,class,determine,activation,spec,class,resource,adapter,adapter,return,null
StandardJmsActivationSpecFactory -> public void setActivationSpecClass(Class<?> activationSpecClass);1385412762;Specify the fully-qualified ActivationSpec class name for the target_provider (e.g. "org.apache.activemq.ra.ActiveMQActivationSpec").;public void setActivationSpecClass(Class<?> activationSpecClass) {_		this.activationSpecClass = activationSpecClass__	};specify,the,fully,qualified,activation,spec,class,name,for,the,target,provider,e,g,org,apache,activemq,ra,active,mqactivation,spec;public,void,set,activation,spec,class,class,activation,spec,class,this,activation,spec,class,activation,spec,class
StandardJmsActivationSpecFactory -> public void setActivationSpecClass(Class<?> activationSpecClass);1405696881;Specify the fully-qualified ActivationSpec class name for the target_provider (e.g. "org.apache.activemq.ra.ActiveMQActivationSpec").;public void setActivationSpecClass(Class<?> activationSpecClass) {_		this.activationSpecClass = activationSpecClass__	};specify,the,fully,qualified,activation,spec,class,name,for,the,target,provider,e,g,org,apache,activemq,ra,active,mqactivation,spec;public,void,set,activation,spec,class,class,activation,spec,class,this,activation,spec,class,activation,spec,class
StandardJmsActivationSpecFactory -> public void setActivationSpecClass(Class<?> activationSpecClass);1429516293;Specify the fully-qualified ActivationSpec class name for the target_provider (e.g. "org.apache.activemq.ra.ActiveMQActivationSpec").;public void setActivationSpecClass(Class<?> activationSpecClass) {_		this.activationSpecClass = activationSpecClass__	};specify,the,fully,qualified,activation,spec,class,name,for,the,target,provider,e,g,org,apache,activemq,ra,active,mqactivation,spec;public,void,set,activation,spec,class,class,activation,spec,class,this,activation,spec,class,activation,spec,class
StandardJmsActivationSpecFactory -> public void setActivationSpecClass(Class<?> activationSpecClass);1495868221;Specify the fully-qualified ActivationSpec class name for the target_provider (e.g. "org.apache.activemq.ra.ActiveMQActivationSpec").;public void setActivationSpecClass(Class<?> activationSpecClass) {_		this.activationSpecClass = activationSpecClass__	};specify,the,fully,qualified,activation,spec,class,name,for,the,target,provider,e,g,org,apache,activemq,ra,active,mqactivation,spec;public,void,set,activation,spec,class,class,activation,spec,class,this,activation,spec,class,activation,spec,class
StandardJmsActivationSpecFactory -> public void setActivationSpecClass(Class<?> activationSpecClass);1496837955;Specify the fully-qualified ActivationSpec class name for the target_provider (e.g. "org.apache.activemq.ra.ActiveMQActivationSpec").;public void setActivationSpecClass(Class<?> activationSpecClass) {_		this.activationSpecClass = activationSpecClass__	};specify,the,fully,qualified,activation,spec,class,name,for,the,target,provider,e,g,org,apache,activemq,ra,active,mqactivation,spec;public,void,set,activation,spec,class,class,activation,spec,class,this,activation,spec,class,activation,spec,class
StandardJmsActivationSpecFactory -> public void setActivationSpecClass(Class<?> activationSpecClass);1498780456;Specify the fully-qualified ActivationSpec class name for the target_provider (e.g. "org.apache.activemq.ra.ActiveMQActivationSpec").;public void setActivationSpecClass(Class<?> activationSpecClass) {_		this.activationSpecClass = activationSpecClass__	};specify,the,fully,qualified,activation,spec,class,name,for,the,target,provider,e,g,org,apache,activemq,ra,active,mqactivation,spec;public,void,set,activation,spec,class,class,activation,spec,class,this,activation,spec,class,activation,spec,class
StandardJmsActivationSpecFactory -> public void setActivationSpecClass(Class<?> activationSpecClass);1500448076;Specify the fully-qualified ActivationSpec class name for the target_provider (e.g. "org.apache.activemq.ra.ActiveMQActivationSpec").;public void setActivationSpecClass(Class<?> activationSpecClass) {_		this.activationSpecClass = activationSpecClass__	};specify,the,fully,qualified,activation,spec,class,name,for,the,target,provider,e,g,org,apache,activemq,ra,active,mqactivation,spec;public,void,set,activation,spec,class,class,activation,spec,class,this,activation,spec,class,activation,spec,class
StandardJmsActivationSpecFactory -> @Nullable 	protected Class<?> determineActivationSpecClass(ResourceAdapter adapter);1495868221;Determine the ActivationSpec class for the given ResourceAdapter,_if possible. Called if no 'activationSpecClass' has been set explicitly_@param adapter the ResourceAdapter to check_@return the corresponding ActivationSpec class, or {@code null}_if not determinable_@see #setActivationSpecClass;@Nullable_	protected Class<?> determineActivationSpecClass(ResourceAdapter adapter) {_		return null__	};determine,the,activation,spec,class,for,the,given,resource,adapter,if,possible,called,if,no,activation,spec,class,has,been,set,explicitly,param,adapter,the,resource,adapter,to,check,return,the,corresponding,activation,spec,class,or,code,null,if,not,determinable,see,set,activation,spec,class;nullable,protected,class,determine,activation,spec,class,resource,adapter,adapter,return,null
StandardJmsActivationSpecFactory -> @Nullable 	protected Class<?> determineActivationSpecClass(ResourceAdapter adapter);1496837955;Determine the ActivationSpec class for the given ResourceAdapter,_if possible. Called if no 'activationSpecClass' has been set explicitly_@param adapter the ResourceAdapter to check_@return the corresponding ActivationSpec class, or {@code null}_if not determinable_@see #setActivationSpecClass;@Nullable_	protected Class<?> determineActivationSpecClass(ResourceAdapter adapter) {_		return null__	};determine,the,activation,spec,class,for,the,given,resource,adapter,if,possible,called,if,no,activation,spec,class,has,been,set,explicitly,param,adapter,the,resource,adapter,to,check,return,the,corresponding,activation,spec,class,or,code,null,if,not,determinable,see,set,activation,spec,class;nullable,protected,class,determine,activation,spec,class,resource,adapter,adapter,return,null
StandardJmsActivationSpecFactory -> @Nullable 	protected Class<?> determineActivationSpecClass(ResourceAdapter adapter);1498780456;Determine the ActivationSpec class for the given ResourceAdapter,_if possible. Called if no 'activationSpecClass' has been set explicitly_@param adapter the ResourceAdapter to check_@return the corresponding ActivationSpec class, or {@code null}_if not determinable_@see #setActivationSpecClass;@Nullable_	protected Class<?> determineActivationSpecClass(ResourceAdapter adapter) {_		return null__	};determine,the,activation,spec,class,for,the,given,resource,adapter,if,possible,called,if,no,activation,spec,class,has,been,set,explicitly,param,adapter,the,resource,adapter,to,check,return,the,corresponding,activation,spec,class,or,code,null,if,not,determinable,see,set,activation,spec,class;nullable,protected,class,determine,activation,spec,class,resource,adapter,adapter,return,null
StandardJmsActivationSpecFactory -> @Nullable 	protected Class<?> determineActivationSpecClass(ResourceAdapter adapter);1500448076;Determine the ActivationSpec class for the given ResourceAdapter,_if possible. Called if no 'activationSpecClass' has been set explicitly_@param adapter the ResourceAdapter to check_@return the corresponding ActivationSpec class, or {@code null}_if not determinable_@see #setActivationSpecClass;@Nullable_	protected Class<?> determineActivationSpecClass(ResourceAdapter adapter) {_		return null__	};determine,the,activation,spec,class,for,the,given,resource,adapter,if,possible,called,if,no,activation,spec,class,has,been,set,explicitly,param,adapter,the,resource,adapter,to,check,return,the,corresponding,activation,spec,class,or,code,null,if,not,determinable,see,set,activation,spec,class;nullable,protected,class,determine,activation,spec,class,resource,adapter,adapter,return,null
StandardJmsActivationSpecFactory -> public void setDefaultProperties(Map<String, String> defaultProperties);1328020251;Specify custom default properties, with String keys and String values._<p>Applied to each ActivationSpec object before it gets populated with_listener-specific settings. Allows for configuring vendor-specific properties_beyond the Spring-defined settings in {@link JmsActivationSpecConfig}.;public void setDefaultProperties(Map<String, String> defaultProperties) {_		this.defaultProperties = defaultProperties__	};specify,custom,default,properties,with,string,keys,and,string,values,p,applied,to,each,activation,spec,object,before,it,gets,populated,with,listener,specific,settings,allows,for,configuring,vendor,specific,properties,beyond,the,spring,defined,settings,in,link,jms,activation,spec,config;public,void,set,default,properties,map,string,string,default,properties,this,default,properties,default,properties
StandardJmsActivationSpecFactory -> public void setDefaultProperties(Map<String, String> defaultProperties);1356735495;Specify custom default properties, with String keys and String values._<p>Applied to each ActivationSpec object before it gets populated with_listener-specific settings. Allows for configuring vendor-specific properties_beyond the Spring-defined settings in {@link JmsActivationSpecConfig}.;public void setDefaultProperties(Map<String, String> defaultProperties) {_		this.defaultProperties = defaultProperties__	};specify,custom,default,properties,with,string,keys,and,string,values,p,applied,to,each,activation,spec,object,before,it,gets,populated,with,listener,specific,settings,allows,for,configuring,vendor,specific,properties,beyond,the,spring,defined,settings,in,link,jms,activation,spec,config;public,void,set,default,properties,map,string,string,default,properties,this,default,properties,default,properties
StandardJmsActivationSpecFactory -> public void setDefaultProperties(Map<String, String> defaultProperties);1357119239;Specify custom default properties, with String keys and String values._<p>Applied to each ActivationSpec object before it gets populated with_listener-specific settings. Allows for configuring vendor-specific properties_beyond the Spring-defined settings in {@link JmsActivationSpecConfig}.;public void setDefaultProperties(Map<String, String> defaultProperties) {_		this.defaultProperties = defaultProperties__	};specify,custom,default,properties,with,string,keys,and,string,values,p,applied,to,each,activation,spec,object,before,it,gets,populated,with,listener,specific,settings,allows,for,configuring,vendor,specific,properties,beyond,the,spring,defined,settings,in,link,jms,activation,spec,config;public,void,set,default,properties,map,string,string,default,properties,this,default,properties,default,properties
StandardJmsActivationSpecFactory -> public void setDefaultProperties(Map<String, String> defaultProperties);1368482696;Specify custom default properties, with String keys and String values._<p>Applied to each ActivationSpec object before it gets populated with_listener-specific settings. Allows for configuring vendor-specific properties_beyond the Spring-defined settings in {@link JmsActivationSpecConfig}.;public void setDefaultProperties(Map<String, String> defaultProperties) {_		this.defaultProperties = defaultProperties__	};specify,custom,default,properties,with,string,keys,and,string,values,p,applied,to,each,activation,spec,object,before,it,gets,populated,with,listener,specific,settings,allows,for,configuring,vendor,specific,properties,beyond,the,spring,defined,settings,in,link,jms,activation,spec,config;public,void,set,default,properties,map,string,string,default,properties,this,default,properties,default,properties
StandardJmsActivationSpecFactory -> public void setDefaultProperties(Map<String, String> defaultProperties);1385412762;Specify custom default properties, with String keys and String values._<p>Applied to each ActivationSpec object before it gets populated with_listener-specific settings. Allows for configuring vendor-specific properties_beyond the Spring-defined settings in {@link JmsActivationSpecConfig}.;public void setDefaultProperties(Map<String, String> defaultProperties) {_		this.defaultProperties = defaultProperties__	};specify,custom,default,properties,with,string,keys,and,string,values,p,applied,to,each,activation,spec,object,before,it,gets,populated,with,listener,specific,settings,allows,for,configuring,vendor,specific,properties,beyond,the,spring,defined,settings,in,link,jms,activation,spec,config;public,void,set,default,properties,map,string,string,default,properties,this,default,properties,default,properties
StandardJmsActivationSpecFactory -> public void setDefaultProperties(Map<String, String> defaultProperties);1405696881;Specify custom default properties, with String keys and String values._<p>Applied to each ActivationSpec object before it gets populated with_listener-specific settings. Allows for configuring vendor-specific properties_beyond the Spring-defined settings in {@link JmsActivationSpecConfig}.;public void setDefaultProperties(Map<String, String> defaultProperties) {_		this.defaultProperties = defaultProperties__	};specify,custom,default,properties,with,string,keys,and,string,values,p,applied,to,each,activation,spec,object,before,it,gets,populated,with,listener,specific,settings,allows,for,configuring,vendor,specific,properties,beyond,the,spring,defined,settings,in,link,jms,activation,spec,config;public,void,set,default,properties,map,string,string,default,properties,this,default,properties,default,properties
StandardJmsActivationSpecFactory -> public void setDefaultProperties(Map<String, String> defaultProperties);1429516293;Specify custom default properties, with String keys and String values._<p>Applied to each ActivationSpec object before it gets populated with_listener-specific settings. Allows for configuring vendor-specific properties_beyond the Spring-defined settings in {@link JmsActivationSpecConfig}.;public void setDefaultProperties(Map<String, String> defaultProperties) {_		this.defaultProperties = defaultProperties__	};specify,custom,default,properties,with,string,keys,and,string,values,p,applied,to,each,activation,spec,object,before,it,gets,populated,with,listener,specific,settings,allows,for,configuring,vendor,specific,properties,beyond,the,spring,defined,settings,in,link,jms,activation,spec,config;public,void,set,default,properties,map,string,string,default,properties,this,default,properties,default,properties
StandardJmsActivationSpecFactory -> public void setDefaultProperties(Map<String, String> defaultProperties);1495868221;Specify custom default properties, with String keys and String values._<p>Applied to each ActivationSpec object before it gets populated with_listener-specific settings. Allows for configuring vendor-specific properties_beyond the Spring-defined settings in {@link JmsActivationSpecConfig}.;public void setDefaultProperties(Map<String, String> defaultProperties) {_		this.defaultProperties = defaultProperties__	};specify,custom,default,properties,with,string,keys,and,string,values,p,applied,to,each,activation,spec,object,before,it,gets,populated,with,listener,specific,settings,allows,for,configuring,vendor,specific,properties,beyond,the,spring,defined,settings,in,link,jms,activation,spec,config;public,void,set,default,properties,map,string,string,default,properties,this,default,properties,default,properties
StandardJmsActivationSpecFactory -> public void setDefaultProperties(Map<String, String> defaultProperties);1496837955;Specify custom default properties, with String keys and String values._<p>Applied to each ActivationSpec object before it gets populated with_listener-specific settings. Allows for configuring vendor-specific properties_beyond the Spring-defined settings in {@link JmsActivationSpecConfig}.;public void setDefaultProperties(Map<String, String> defaultProperties) {_		this.defaultProperties = defaultProperties__	};specify,custom,default,properties,with,string,keys,and,string,values,p,applied,to,each,activation,spec,object,before,it,gets,populated,with,listener,specific,settings,allows,for,configuring,vendor,specific,properties,beyond,the,spring,defined,settings,in,link,jms,activation,spec,config;public,void,set,default,properties,map,string,string,default,properties,this,default,properties,default,properties
StandardJmsActivationSpecFactory -> public void setDefaultProperties(Map<String, String> defaultProperties);1498780456;Specify custom default properties, with String keys and String values._<p>Applied to each ActivationSpec object before it gets populated with_listener-specific settings. Allows for configuring vendor-specific properties_beyond the Spring-defined settings in {@link JmsActivationSpecConfig}.;public void setDefaultProperties(Map<String, String> defaultProperties) {_		this.defaultProperties = defaultProperties__	};specify,custom,default,properties,with,string,keys,and,string,values,p,applied,to,each,activation,spec,object,before,it,gets,populated,with,listener,specific,settings,allows,for,configuring,vendor,specific,properties,beyond,the,spring,defined,settings,in,link,jms,activation,spec,config;public,void,set,default,properties,map,string,string,default,properties,this,default,properties,default,properties
StandardJmsActivationSpecFactory -> public void setDefaultProperties(Map<String, String> defaultProperties);1500448076;Specify custom default properties, with String keys and String values._<p>Applied to each ActivationSpec object before it gets populated with_listener-specific settings. Allows for configuring vendor-specific properties_beyond the Spring-defined settings in {@link JmsActivationSpecConfig}.;public void setDefaultProperties(Map<String, String> defaultProperties) {_		this.defaultProperties = defaultProperties__	};specify,custom,default,properties,with,string,keys,and,string,values,p,applied,to,each,activation,spec,object,before,it,gets,populated,with,listener,specific,settings,allows,for,configuring,vendor,specific,properties,beyond,the,spring,defined,settings,in,link,jms,activation,spec,config;public,void,set,default,properties,map,string,string,default,properties,this,default,properties,default,properties
StandardJmsActivationSpecFactory -> public void setDestinationResolver(@Nullable DestinationResolver destinationResolver);1496837955;Set the DestinationResolver to use for resolving destination names_into the JCA 1.5 ActivationSpec "destination" property._<p>If not specified, destination names will simply be passed in as Strings._If specified, destination names will be resolved into Destination objects first._<p>Note that a DestinationResolver for use with this factory must be_able to work <i>without</i> an active JMS Session: e.g._{@link org.springframework.jms.support.destination.JndiDestinationResolver}_or {@link org.springframework.jms.support.destination.BeanFactoryDestinationResolver}_but not {@link org.springframework.jms.support.destination.DynamicDestinationResolver}.;public void setDestinationResolver(@Nullable DestinationResolver destinationResolver) {_		this.destinationResolver = destinationResolver__	};set,the,destination,resolver,to,use,for,resolving,destination,names,into,the,jca,1,5,activation,spec,destination,property,p,if,not,specified,destination,names,will,simply,be,passed,in,as,strings,if,specified,destination,names,will,be,resolved,into,destination,objects,first,p,note,that,a,destination,resolver,for,use,with,this,factory,must,be,able,to,work,i,without,i,an,active,jms,session,e,g,link,org,springframework,jms,support,destination,jndi,destination,resolver,or,link,org,springframework,jms,support,destination,bean,factory,destination,resolver,but,not,link,org,springframework,jms,support,destination,dynamic,destination,resolver;public,void,set,destination,resolver,nullable,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver
StandardJmsActivationSpecFactory -> public void setDestinationResolver(@Nullable DestinationResolver destinationResolver);1500448076;Set the DestinationResolver to use for resolving destination names_into the JCA 1.5 ActivationSpec "destination" property._<p>If not specified, destination names will simply be passed in as Strings._If specified, destination names will be resolved into Destination objects first._<p>Note that a DestinationResolver for use with this factory must be_able to work <i>without</i> an active JMS Session: e.g._{@link org.springframework.jms.support.destination.JndiDestinationResolver}_or {@link org.springframework.jms.support.destination.BeanFactoryDestinationResolver}_but not {@link org.springframework.jms.support.destination.DynamicDestinationResolver}.;public void setDestinationResolver(@Nullable DestinationResolver destinationResolver) {_		this.destinationResolver = destinationResolver__	};set,the,destination,resolver,to,use,for,resolving,destination,names,into,the,jca,1,5,activation,spec,destination,property,p,if,not,specified,destination,names,will,simply,be,passed,in,as,strings,if,specified,destination,names,will,be,resolved,into,destination,objects,first,p,note,that,a,destination,resolver,for,use,with,this,factory,must,be,able,to,work,i,without,i,an,active,jms,session,e,g,link,org,springframework,jms,support,destination,jndi,destination,resolver,or,link,org,springframework,jms,support,destination,bean,factory,destination,resolver,but,not,link,org,springframework,jms,support,destination,dynamic,destination,resolver;public,void,set,destination,resolver,nullable,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver
StandardJmsActivationSpecFactory -> protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1328020251;Apply the specified acknowledge mode to the ActivationSpec object._<p>This implementation applies the standard JCA 1.5 acknowledge modes_"Auto-acknowledge" and "Dups-ok-acknowledge". It throws an exception in_case of <code>CLIENT_ACKNOWLEDGE</code> or <code>SESSION_TRANSACTED</code>_having been requested._@param bw the BeanWrapper wrapping the ActivationSpec object_@param ackMode the configured acknowledge mode_(according to the constants in {@link javax.jms.Session}_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED) {_			throw new IllegalArgumentException("No support for SESSION_TRANSACTED: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (ackMode == Session.CLIENT_ACKNOWLEDGE) {_			throw new IllegalArgumentException("No support for CLIENT_ACKNOWLEDGE: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (bw.isWritableProperty("acknowledgeMode")) {_			bw.setPropertyValue("acknowledgeMode",_					ackMode == Session.DUPS_OK_ACKNOWLEDGE ? "Dups-ok-acknowledge" : "Auto-acknowledge")__		}_		else if (ackMode == Session.DUPS_OK_ACKNOWLEDGE) {_			_			throw new IllegalArgumentException(_					"Dups-ok-acknowledge not supported by underlying provider: " + this.activationSpecClass.getName())__		}_	};apply,the,specified,acknowledge,mode,to,the,activation,spec,object,p,this,implementation,applies,the,standard,jca,1,5,acknowledge,modes,auto,acknowledge,and,dups,ok,acknowledge,it,throws,an,exception,in,case,of,code,code,or,code,code,having,been,requested,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,ack,mode,the,configured,acknowledge,mode,according,to,the,constants,in,link,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,bw,is,writable,property,acknowledge,mode,bw,set,property,value,acknowledge,mode,ack,mode,session,dups,ok,acknowledge,auto,acknowledge,else,if,ack,mode,session,throw,new,illegal,argument,exception,dups,ok,acknowledge,not,supported,by,underlying,provider,this,activation,spec,class,get,name
StandardJmsActivationSpecFactory -> protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1356735495;Apply the specified acknowledge mode to the ActivationSpec object._<p>This implementation applies the standard JCA 1.5 acknowledge modes_"Auto-acknowledge" and "Dups-ok-acknowledge". It throws an exception in_case of {@code CLIENT_ACKNOWLEDGE} or {@code SESSION_TRANSACTED}_having been requested._@param bw the BeanWrapper wrapping the ActivationSpec object_@param ackMode the configured acknowledge mode_(according to the constants in {@link javax.jms.Session}_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED) {_			throw new IllegalArgumentException("No support for SESSION_TRANSACTED: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (ackMode == Session.CLIENT_ACKNOWLEDGE) {_			throw new IllegalArgumentException("No support for CLIENT_ACKNOWLEDGE: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (bw.isWritableProperty("acknowledgeMode")) {_			bw.setPropertyValue("acknowledgeMode",_					ackMode == Session.DUPS_OK_ACKNOWLEDGE ? "Dups-ok-acknowledge" : "Auto-acknowledge")__		}_		else if (ackMode == Session.DUPS_OK_ACKNOWLEDGE) {_			_			throw new IllegalArgumentException(_					"Dups-ok-acknowledge not supported by underlying provider: " + this.activationSpecClass.getName())__		}_	};apply,the,specified,acknowledge,mode,to,the,activation,spec,object,p,this,implementation,applies,the,standard,jca,1,5,acknowledge,modes,auto,acknowledge,and,dups,ok,acknowledge,it,throws,an,exception,in,case,of,code,or,code,having,been,requested,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,ack,mode,the,configured,acknowledge,mode,according,to,the,constants,in,link,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,bw,is,writable,property,acknowledge,mode,bw,set,property,value,acknowledge,mode,ack,mode,session,dups,ok,acknowledge,auto,acknowledge,else,if,ack,mode,session,throw,new,illegal,argument,exception,dups,ok,acknowledge,not,supported,by,underlying,provider,this,activation,spec,class,get,name
StandardJmsActivationSpecFactory -> protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1357119239;Apply the specified acknowledge mode to the ActivationSpec object._<p>This implementation applies the standard JCA 1.5 acknowledge modes_"Auto-acknowledge" and "Dups-ok-acknowledge". It throws an exception in_case of {@code CLIENT_ACKNOWLEDGE} or {@code SESSION_TRANSACTED}_having been requested._@param bw the BeanWrapper wrapping the ActivationSpec object_@param ackMode the configured acknowledge mode_(according to the constants in {@link javax.jms.Session}_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED) {_			throw new IllegalArgumentException("No support for SESSION_TRANSACTED: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (ackMode == Session.CLIENT_ACKNOWLEDGE) {_			throw new IllegalArgumentException("No support for CLIENT_ACKNOWLEDGE: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (bw.isWritableProperty("acknowledgeMode")) {_			bw.setPropertyValue("acknowledgeMode",_					ackMode == Session.DUPS_OK_ACKNOWLEDGE ? "Dups-ok-acknowledge" : "Auto-acknowledge")__		}_		else if (ackMode == Session.DUPS_OK_ACKNOWLEDGE) {_			_			throw new IllegalArgumentException(_					"Dups-ok-acknowledge not supported by underlying provider: " + this.activationSpecClass.getName())__		}_	};apply,the,specified,acknowledge,mode,to,the,activation,spec,object,p,this,implementation,applies,the,standard,jca,1,5,acknowledge,modes,auto,acknowledge,and,dups,ok,acknowledge,it,throws,an,exception,in,case,of,code,or,code,having,been,requested,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,ack,mode,the,configured,acknowledge,mode,according,to,the,constants,in,link,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,bw,is,writable,property,acknowledge,mode,bw,set,property,value,acknowledge,mode,ack,mode,session,dups,ok,acknowledge,auto,acknowledge,else,if,ack,mode,session,throw,new,illegal,argument,exception,dups,ok,acknowledge,not,supported,by,underlying,provider,this,activation,spec,class,get,name
StandardJmsActivationSpecFactory -> protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1368482696;Apply the specified acknowledge mode to the ActivationSpec object._<p>This implementation applies the standard JCA 1.5 acknowledge modes_"Auto-acknowledge" and "Dups-ok-acknowledge". It throws an exception in_case of {@code CLIENT_ACKNOWLEDGE} or {@code SESSION_TRANSACTED}_having been requested._@param bw the BeanWrapper wrapping the ActivationSpec object_@param ackMode the configured acknowledge mode_(according to the constants in {@link javax.jms.Session}_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED) {_			throw new IllegalArgumentException("No support for SESSION_TRANSACTED: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (ackMode == Session.CLIENT_ACKNOWLEDGE) {_			throw new IllegalArgumentException("No support for CLIENT_ACKNOWLEDGE: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (bw.isWritableProperty("acknowledgeMode")) {_			bw.setPropertyValue("acknowledgeMode",_					ackMode == Session.DUPS_OK_ACKNOWLEDGE ? "Dups-ok-acknowledge" : "Auto-acknowledge")__		}_		else if (ackMode == Session.DUPS_OK_ACKNOWLEDGE) {_			_			throw new IllegalArgumentException(_					"Dups-ok-acknowledge not supported by underlying provider: " + this.activationSpecClass.getName())__		}_	};apply,the,specified,acknowledge,mode,to,the,activation,spec,object,p,this,implementation,applies,the,standard,jca,1,5,acknowledge,modes,auto,acknowledge,and,dups,ok,acknowledge,it,throws,an,exception,in,case,of,code,or,code,having,been,requested,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,ack,mode,the,configured,acknowledge,mode,according,to,the,constants,in,link,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,bw,is,writable,property,acknowledge,mode,bw,set,property,value,acknowledge,mode,ack,mode,session,dups,ok,acknowledge,auto,acknowledge,else,if,ack,mode,session,throw,new,illegal,argument,exception,dups,ok,acknowledge,not,supported,by,underlying,provider,this,activation,spec,class,get,name
StandardJmsActivationSpecFactory -> protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1385412762;Apply the specified acknowledge mode to the ActivationSpec object._<p>This implementation applies the standard JCA 1.5 acknowledge modes_"Auto-acknowledge" and "Dups-ok-acknowledge". It throws an exception in_case of {@code CLIENT_ACKNOWLEDGE} or {@code SESSION_TRANSACTED}_having been requested._@param bw the BeanWrapper wrapping the ActivationSpec object_@param ackMode the configured acknowledge mode_(according to the constants in {@link javax.jms.Session}_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED) {_			throw new IllegalArgumentException("No support for SESSION_TRANSACTED: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (ackMode == Session.CLIENT_ACKNOWLEDGE) {_			throw new IllegalArgumentException("No support for CLIENT_ACKNOWLEDGE: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (bw.isWritableProperty("acknowledgeMode")) {_			bw.setPropertyValue("acknowledgeMode",_					ackMode == Session.DUPS_OK_ACKNOWLEDGE ? "Dups-ok-acknowledge" : "Auto-acknowledge")__		}_		else if (ackMode == Session.DUPS_OK_ACKNOWLEDGE) {_			_			throw new IllegalArgumentException(_					"Dups-ok-acknowledge not supported by underlying provider: " + this.activationSpecClass.getName())__		}_	};apply,the,specified,acknowledge,mode,to,the,activation,spec,object,p,this,implementation,applies,the,standard,jca,1,5,acknowledge,modes,auto,acknowledge,and,dups,ok,acknowledge,it,throws,an,exception,in,case,of,code,or,code,having,been,requested,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,ack,mode,the,configured,acknowledge,mode,according,to,the,constants,in,link,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,bw,is,writable,property,acknowledge,mode,bw,set,property,value,acknowledge,mode,ack,mode,session,dups,ok,acknowledge,auto,acknowledge,else,if,ack,mode,session,throw,new,illegal,argument,exception,dups,ok,acknowledge,not,supported,by,underlying,provider,this,activation,spec,class,get,name
StandardJmsActivationSpecFactory -> protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1405696881;Apply the specified acknowledge mode to the ActivationSpec object._<p>This implementation applies the standard JCA 1.5 acknowledge modes_"Auto-acknowledge" and "Dups-ok-acknowledge". It throws an exception in_case of {@code CLIENT_ACKNOWLEDGE} or {@code SESSION_TRANSACTED}_having been requested._@param bw the BeanWrapper wrapping the ActivationSpec object_@param ackMode the configured acknowledge mode_(according to the constants in {@link javax.jms.Session}_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED) {_			throw new IllegalArgumentException("No support for SESSION_TRANSACTED: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (ackMode == Session.CLIENT_ACKNOWLEDGE) {_			throw new IllegalArgumentException("No support for CLIENT_ACKNOWLEDGE: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (bw.isWritableProperty("acknowledgeMode")) {_			bw.setPropertyValue("acknowledgeMode",_					ackMode == Session.DUPS_OK_ACKNOWLEDGE ? "Dups-ok-acknowledge" : "Auto-acknowledge")__		}_		else if (ackMode == Session.DUPS_OK_ACKNOWLEDGE) {_			_			throw new IllegalArgumentException(_					"Dups-ok-acknowledge not supported by underlying provider: " + this.activationSpecClass.getName())__		}_	};apply,the,specified,acknowledge,mode,to,the,activation,spec,object,p,this,implementation,applies,the,standard,jca,1,5,acknowledge,modes,auto,acknowledge,and,dups,ok,acknowledge,it,throws,an,exception,in,case,of,code,or,code,having,been,requested,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,ack,mode,the,configured,acknowledge,mode,according,to,the,constants,in,link,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,bw,is,writable,property,acknowledge,mode,bw,set,property,value,acknowledge,mode,ack,mode,session,dups,ok,acknowledge,auto,acknowledge,else,if,ack,mode,session,throw,new,illegal,argument,exception,dups,ok,acknowledge,not,supported,by,underlying,provider,this,activation,spec,class,get,name
StandardJmsActivationSpecFactory -> protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1429516293;Apply the specified acknowledge mode to the ActivationSpec object._<p>This implementation applies the standard JCA 1.5 acknowledge modes_"Auto-acknowledge" and "Dups-ok-acknowledge". It throws an exception in_case of {@code CLIENT_ACKNOWLEDGE} or {@code SESSION_TRANSACTED}_having been requested._@param bw the BeanWrapper wrapping the ActivationSpec object_@param ackMode the configured acknowledge mode_(according to the constants in {@link javax.jms.Session}_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED) {_			throw new IllegalArgumentException("No support for SESSION_TRANSACTED: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (ackMode == Session.CLIENT_ACKNOWLEDGE) {_			throw new IllegalArgumentException("No support for CLIENT_ACKNOWLEDGE: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (bw.isWritableProperty("acknowledgeMode")) {_			bw.setPropertyValue("acknowledgeMode",_					ackMode == Session.DUPS_OK_ACKNOWLEDGE ? "Dups-ok-acknowledge" : "Auto-acknowledge")__		}_		else if (ackMode == Session.DUPS_OK_ACKNOWLEDGE) {_			_			throw new IllegalArgumentException(_					"Dups-ok-acknowledge not supported by underlying provider: " + this.activationSpecClass.getName())__		}_	};apply,the,specified,acknowledge,mode,to,the,activation,spec,object,p,this,implementation,applies,the,standard,jca,1,5,acknowledge,modes,auto,acknowledge,and,dups,ok,acknowledge,it,throws,an,exception,in,case,of,code,or,code,having,been,requested,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,ack,mode,the,configured,acknowledge,mode,according,to,the,constants,in,link,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,bw,is,writable,property,acknowledge,mode,bw,set,property,value,acknowledge,mode,ack,mode,session,dups,ok,acknowledge,auto,acknowledge,else,if,ack,mode,session,throw,new,illegal,argument,exception,dups,ok,acknowledge,not,supported,by,underlying,provider,this,activation,spec,class,get,name
StandardJmsActivationSpecFactory -> protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1495868221;Apply the specified acknowledge mode to the ActivationSpec object._<p>This implementation applies the standard JCA 1.5 acknowledge modes_"Auto-acknowledge" and "Dups-ok-acknowledge". It throws an exception in_case of {@code CLIENT_ACKNOWLEDGE} or {@code SESSION_TRANSACTED}_having been requested._@param bw the BeanWrapper wrapping the ActivationSpec object_@param ackMode the configured acknowledge mode_(according to the constants in {@link javax.jms.Session}_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED) {_			throw new IllegalArgumentException("No support for SESSION_TRANSACTED: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (ackMode == Session.CLIENT_ACKNOWLEDGE) {_			throw new IllegalArgumentException("No support for CLIENT_ACKNOWLEDGE: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (bw.isWritableProperty("acknowledgeMode")) {_			bw.setPropertyValue("acknowledgeMode",_					ackMode == Session.DUPS_OK_ACKNOWLEDGE ? "Dups-ok-acknowledge" : "Auto-acknowledge")__		}_		else if (ackMode == Session.DUPS_OK_ACKNOWLEDGE) {_			_			throw new IllegalArgumentException(_					"Dups-ok-acknowledge not supported by underlying provider: " + this.activationSpecClass.getName())__		}_	};apply,the,specified,acknowledge,mode,to,the,activation,spec,object,p,this,implementation,applies,the,standard,jca,1,5,acknowledge,modes,auto,acknowledge,and,dups,ok,acknowledge,it,throws,an,exception,in,case,of,code,or,code,having,been,requested,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,ack,mode,the,configured,acknowledge,mode,according,to,the,constants,in,link,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,bw,is,writable,property,acknowledge,mode,bw,set,property,value,acknowledge,mode,ack,mode,session,dups,ok,acknowledge,auto,acknowledge,else,if,ack,mode,session,throw,new,illegal,argument,exception,dups,ok,acknowledge,not,supported,by,underlying,provider,this,activation,spec,class,get,name
StandardJmsActivationSpecFactory -> protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1496837955;Apply the specified acknowledge mode to the ActivationSpec object._<p>This implementation applies the standard JCA 1.5 acknowledge modes_"Auto-acknowledge" and "Dups-ok-acknowledge". It throws an exception in_case of {@code CLIENT_ACKNOWLEDGE} or {@code SESSION_TRANSACTED}_having been requested._@param bw the BeanWrapper wrapping the ActivationSpec object_@param ackMode the configured acknowledge mode_(according to the constants in {@link javax.jms.Session}_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED) {_			throw new IllegalArgumentException("No support for SESSION_TRANSACTED: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (ackMode == Session.CLIENT_ACKNOWLEDGE) {_			throw new IllegalArgumentException("No support for CLIENT_ACKNOWLEDGE: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (bw.isWritableProperty("acknowledgeMode")) {_			bw.setPropertyValue("acknowledgeMode",_					ackMode == Session.DUPS_OK_ACKNOWLEDGE ? "Dups-ok-acknowledge" : "Auto-acknowledge")__		}_		else if (ackMode == Session.DUPS_OK_ACKNOWLEDGE) {_			_			throw new IllegalArgumentException(_					"Dups-ok-acknowledge not supported by underlying provider: " + this.activationSpecClass.getName())__		}_	};apply,the,specified,acknowledge,mode,to,the,activation,spec,object,p,this,implementation,applies,the,standard,jca,1,5,acknowledge,modes,auto,acknowledge,and,dups,ok,acknowledge,it,throws,an,exception,in,case,of,code,or,code,having,been,requested,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,ack,mode,the,configured,acknowledge,mode,according,to,the,constants,in,link,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,bw,is,writable,property,acknowledge,mode,bw,set,property,value,acknowledge,mode,ack,mode,session,dups,ok,acknowledge,auto,acknowledge,else,if,ack,mode,session,throw,new,illegal,argument,exception,dups,ok,acknowledge,not,supported,by,underlying,provider,this,activation,spec,class,get,name
StandardJmsActivationSpecFactory -> protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1498780456;Apply the specified acknowledge mode to the ActivationSpec object._<p>This implementation applies the standard JCA 1.5 acknowledge modes_"Auto-acknowledge" and "Dups-ok-acknowledge". It throws an exception in_case of {@code CLIENT_ACKNOWLEDGE} or {@code SESSION_TRANSACTED}_having been requested._@param bw the BeanWrapper wrapping the ActivationSpec object_@param ackMode the configured acknowledge mode_(according to the constants in {@link javax.jms.Session}_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED) {_			throw new IllegalArgumentException("No support for SESSION_TRANSACTED: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (ackMode == Session.CLIENT_ACKNOWLEDGE) {_			throw new IllegalArgumentException("No support for CLIENT_ACKNOWLEDGE: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (bw.isWritableProperty("acknowledgeMode")) {_			bw.setPropertyValue("acknowledgeMode",_					ackMode == Session.DUPS_OK_ACKNOWLEDGE ? "Dups-ok-acknowledge" : "Auto-acknowledge")__		}_		else if (ackMode == Session.DUPS_OK_ACKNOWLEDGE) {_			_			throw new IllegalArgumentException("Dups-ok-acknowledge not supported by underlying provider")__		}_	};apply,the,specified,acknowledge,mode,to,the,activation,spec,object,p,this,implementation,applies,the,standard,jca,1,5,acknowledge,modes,auto,acknowledge,and,dups,ok,acknowledge,it,throws,an,exception,in,case,of,code,or,code,having,been,requested,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,ack,mode,the,configured,acknowledge,mode,according,to,the,constants,in,link,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,bw,is,writable,property,acknowledge,mode,bw,set,property,value,acknowledge,mode,ack,mode,session,dups,ok,acknowledge,auto,acknowledge,else,if,ack,mode,session,throw,new,illegal,argument,exception,dups,ok,acknowledge,not,supported,by,underlying,provider
StandardJmsActivationSpecFactory -> protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1500448076;Apply the specified acknowledge mode to the ActivationSpec object._<p>This implementation applies the standard JCA 1.5 acknowledge modes_"Auto-acknowledge" and "Dups-ok-acknowledge". It throws an exception in_case of {@code CLIENT_ACKNOWLEDGE} or {@code SESSION_TRANSACTED}_having been requested._@param bw the BeanWrapper wrapping the ActivationSpec object_@param ackMode the configured acknowledge mode_(according to the constants in {@link javax.jms.Session}_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED) {_			throw new IllegalArgumentException("No support for SESSION_TRANSACTED: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (ackMode == Session.CLIENT_ACKNOWLEDGE) {_			throw new IllegalArgumentException("No support for CLIENT_ACKNOWLEDGE: Only \"Auto-acknowledge\" " +_					"and \"Dups-ok-acknowledge\" supported in standard JCA 1.5")__		}_		else if (bw.isWritableProperty("acknowledgeMode")) {_			bw.setPropertyValue("acknowledgeMode",_					ackMode == Session.DUPS_OK_ACKNOWLEDGE ? "Dups-ok-acknowledge" : "Auto-acknowledge")__		}_		else if (ackMode == Session.DUPS_OK_ACKNOWLEDGE) {_			_			throw new IllegalArgumentException("Dups-ok-acknowledge not supported by underlying provider")__		}_	};apply,the,specified,acknowledge,mode,to,the,activation,spec,object,p,this,implementation,applies,the,standard,jca,1,5,acknowledge,modes,auto,acknowledge,and,dups,ok,acknowledge,it,throws,an,exception,in,case,of,code,or,code,having,been,requested,param,bw,the,bean,wrapper,wrapping,the,activation,spec,object,param,ack,mode,the,configured,acknowledge,mode,according,to,the,constants,in,link,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,ack,mode,session,throw,new,illegal,argument,exception,no,support,for,only,auto,acknowledge,and,dups,ok,acknowledge,supported,in,standard,jca,1,5,else,if,bw,is,writable,property,acknowledge,mode,bw,set,property,value,acknowledge,mode,ack,mode,session,dups,ok,acknowledge,auto,acknowledge,else,if,ack,mode,session,throw,new,illegal,argument,exception,dups,ok,acknowledge,not,supported,by,underlying,provider
StandardJmsActivationSpecFactory -> protected Class<?> determineActivationSpecClass(ResourceAdapter adapter);1385412762;Determine the ActivationSpec class for the given ResourceAdapter,_if possible. Called if no 'activationSpecClass' has been set explicitly_@param adapter the ResourceAdapter to check_@return the corresponding ActivationSpec class, or {@code null}_if not determinable_@see #setActivationSpecClass;protected Class<?> determineActivationSpecClass(ResourceAdapter adapter) {_		return null__	};determine,the,activation,spec,class,for,the,given,resource,adapter,if,possible,called,if,no,activation,spec,class,has,been,set,explicitly,param,adapter,the,resource,adapter,to,check,return,the,corresponding,activation,spec,class,or,code,null,if,not,determinable,see,set,activation,spec,class;protected,class,determine,activation,spec,class,resource,adapter,adapter,return,null
StandardJmsActivationSpecFactory -> protected Class<?> determineActivationSpecClass(ResourceAdapter adapter);1405696881;Determine the ActivationSpec class for the given ResourceAdapter,_if possible. Called if no 'activationSpecClass' has been set explicitly_@param adapter the ResourceAdapter to check_@return the corresponding ActivationSpec class, or {@code null}_if not determinable_@see #setActivationSpecClass;protected Class<?> determineActivationSpecClass(ResourceAdapter adapter) {_		return null__	};determine,the,activation,spec,class,for,the,given,resource,adapter,if,possible,called,if,no,activation,spec,class,has,been,set,explicitly,param,adapter,the,resource,adapter,to,check,return,the,corresponding,activation,spec,class,or,code,null,if,not,determinable,see,set,activation,spec,class;protected,class,determine,activation,spec,class,resource,adapter,adapter,return,null
StandardJmsActivationSpecFactory -> protected Class<?> determineActivationSpecClass(ResourceAdapter adapter);1429516293;Determine the ActivationSpec class for the given ResourceAdapter,_if possible. Called if no 'activationSpecClass' has been set explicitly_@param adapter the ResourceAdapter to check_@return the corresponding ActivationSpec class, or {@code null}_if not determinable_@see #setActivationSpecClass;protected Class<?> determineActivationSpecClass(ResourceAdapter adapter) {_		return null__	};determine,the,activation,spec,class,for,the,given,resource,adapter,if,possible,called,if,no,activation,spec,class,has,been,set,explicitly,param,adapter,the,resource,adapter,to,check,return,the,corresponding,activation,spec,class,or,code,null,if,not,determinable,see,set,activation,spec,class;protected,class,determine,activation,spec,class,resource,adapter,adapter,return,null
StandardJmsActivationSpecFactory -> public void setDestinationResolver(DestinationResolver destinationResolver);1328020251;Set the DestinationResolver to use for resolving destination names_into the JCA 1.5 ActivationSpec "destination" property._<p>If not specified, destination names will simply be passed in as Strings._If specified, destination names will be resolved into Destination objects first._<p>Note that a DestinationResolver for use with this factory must be_able to work <i>without</i> an active JMS Session: e.g._{@link org.springframework.jms.support.destination.JndiDestinationResolver}_or {@link org.springframework.jms.support.destination.BeanFactoryDestinationResolver}_but not {@link org.springframework.jms.support.destination.DynamicDestinationResolver}.;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver = destinationResolver__	};set,the,destination,resolver,to,use,for,resolving,destination,names,into,the,jca,1,5,activation,spec,destination,property,p,if,not,specified,destination,names,will,simply,be,passed,in,as,strings,if,specified,destination,names,will,be,resolved,into,destination,objects,first,p,note,that,a,destination,resolver,for,use,with,this,factory,must,be,able,to,work,i,without,i,an,active,jms,session,e,g,link,org,springframework,jms,support,destination,jndi,destination,resolver,or,link,org,springframework,jms,support,destination,bean,factory,destination,resolver,but,not,link,org,springframework,jms,support,destination,dynamic,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver
StandardJmsActivationSpecFactory -> public void setDestinationResolver(DestinationResolver destinationResolver);1356735495;Set the DestinationResolver to use for resolving destination names_into the JCA 1.5 ActivationSpec "destination" property._<p>If not specified, destination names will simply be passed in as Strings._If specified, destination names will be resolved into Destination objects first._<p>Note that a DestinationResolver for use with this factory must be_able to work <i>without</i> an active JMS Session: e.g._{@link org.springframework.jms.support.destination.JndiDestinationResolver}_or {@link org.springframework.jms.support.destination.BeanFactoryDestinationResolver}_but not {@link org.springframework.jms.support.destination.DynamicDestinationResolver}.;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver = destinationResolver__	};set,the,destination,resolver,to,use,for,resolving,destination,names,into,the,jca,1,5,activation,spec,destination,property,p,if,not,specified,destination,names,will,simply,be,passed,in,as,strings,if,specified,destination,names,will,be,resolved,into,destination,objects,first,p,note,that,a,destination,resolver,for,use,with,this,factory,must,be,able,to,work,i,without,i,an,active,jms,session,e,g,link,org,springframework,jms,support,destination,jndi,destination,resolver,or,link,org,springframework,jms,support,destination,bean,factory,destination,resolver,but,not,link,org,springframework,jms,support,destination,dynamic,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver
StandardJmsActivationSpecFactory -> public void setDestinationResolver(DestinationResolver destinationResolver);1357119239;Set the DestinationResolver to use for resolving destination names_into the JCA 1.5 ActivationSpec "destination" property._<p>If not specified, destination names will simply be passed in as Strings._If specified, destination names will be resolved into Destination objects first._<p>Note that a DestinationResolver for use with this factory must be_able to work <i>without</i> an active JMS Session: e.g._{@link org.springframework.jms.support.destination.JndiDestinationResolver}_or {@link org.springframework.jms.support.destination.BeanFactoryDestinationResolver}_but not {@link org.springframework.jms.support.destination.DynamicDestinationResolver}.;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver = destinationResolver__	};set,the,destination,resolver,to,use,for,resolving,destination,names,into,the,jca,1,5,activation,spec,destination,property,p,if,not,specified,destination,names,will,simply,be,passed,in,as,strings,if,specified,destination,names,will,be,resolved,into,destination,objects,first,p,note,that,a,destination,resolver,for,use,with,this,factory,must,be,able,to,work,i,without,i,an,active,jms,session,e,g,link,org,springframework,jms,support,destination,jndi,destination,resolver,or,link,org,springframework,jms,support,destination,bean,factory,destination,resolver,but,not,link,org,springframework,jms,support,destination,dynamic,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver
StandardJmsActivationSpecFactory -> public void setDestinationResolver(DestinationResolver destinationResolver);1368482696;Set the DestinationResolver to use for resolving destination names_into the JCA 1.5 ActivationSpec "destination" property._<p>If not specified, destination names will simply be passed in as Strings._If specified, destination names will be resolved into Destination objects first._<p>Note that a DestinationResolver for use with this factory must be_able to work <i>without</i> an active JMS Session: e.g._{@link org.springframework.jms.support.destination.JndiDestinationResolver}_or {@link org.springframework.jms.support.destination.BeanFactoryDestinationResolver}_but not {@link org.springframework.jms.support.destination.DynamicDestinationResolver}.;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver = destinationResolver__	};set,the,destination,resolver,to,use,for,resolving,destination,names,into,the,jca,1,5,activation,spec,destination,property,p,if,not,specified,destination,names,will,simply,be,passed,in,as,strings,if,specified,destination,names,will,be,resolved,into,destination,objects,first,p,note,that,a,destination,resolver,for,use,with,this,factory,must,be,able,to,work,i,without,i,an,active,jms,session,e,g,link,org,springframework,jms,support,destination,jndi,destination,resolver,or,link,org,springframework,jms,support,destination,bean,factory,destination,resolver,but,not,link,org,springframework,jms,support,destination,dynamic,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver
StandardJmsActivationSpecFactory -> public void setDestinationResolver(DestinationResolver destinationResolver);1385412762;Set the DestinationResolver to use for resolving destination names_into the JCA 1.5 ActivationSpec "destination" property._<p>If not specified, destination names will simply be passed in as Strings._If specified, destination names will be resolved into Destination objects first._<p>Note that a DestinationResolver for use with this factory must be_able to work <i>without</i> an active JMS Session: e.g._{@link org.springframework.jms.support.destination.JndiDestinationResolver}_or {@link org.springframework.jms.support.destination.BeanFactoryDestinationResolver}_but not {@link org.springframework.jms.support.destination.DynamicDestinationResolver}.;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver = destinationResolver__	};set,the,destination,resolver,to,use,for,resolving,destination,names,into,the,jca,1,5,activation,spec,destination,property,p,if,not,specified,destination,names,will,simply,be,passed,in,as,strings,if,specified,destination,names,will,be,resolved,into,destination,objects,first,p,note,that,a,destination,resolver,for,use,with,this,factory,must,be,able,to,work,i,without,i,an,active,jms,session,e,g,link,org,springframework,jms,support,destination,jndi,destination,resolver,or,link,org,springframework,jms,support,destination,bean,factory,destination,resolver,but,not,link,org,springframework,jms,support,destination,dynamic,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver
StandardJmsActivationSpecFactory -> public void setDestinationResolver(DestinationResolver destinationResolver);1405696881;Set the DestinationResolver to use for resolving destination names_into the JCA 1.5 ActivationSpec "destination" property._<p>If not specified, destination names will simply be passed in as Strings._If specified, destination names will be resolved into Destination objects first._<p>Note that a DestinationResolver for use with this factory must be_able to work <i>without</i> an active JMS Session: e.g._{@link org.springframework.jms.support.destination.JndiDestinationResolver}_or {@link org.springframework.jms.support.destination.BeanFactoryDestinationResolver}_but not {@link org.springframework.jms.support.destination.DynamicDestinationResolver}.;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver = destinationResolver__	};set,the,destination,resolver,to,use,for,resolving,destination,names,into,the,jca,1,5,activation,spec,destination,property,p,if,not,specified,destination,names,will,simply,be,passed,in,as,strings,if,specified,destination,names,will,be,resolved,into,destination,objects,first,p,note,that,a,destination,resolver,for,use,with,this,factory,must,be,able,to,work,i,without,i,an,active,jms,session,e,g,link,org,springframework,jms,support,destination,jndi,destination,resolver,or,link,org,springframework,jms,support,destination,bean,factory,destination,resolver,but,not,link,org,springframework,jms,support,destination,dynamic,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver
StandardJmsActivationSpecFactory -> public void setDestinationResolver(DestinationResolver destinationResolver);1429516293;Set the DestinationResolver to use for resolving destination names_into the JCA 1.5 ActivationSpec "destination" property._<p>If not specified, destination names will simply be passed in as Strings._If specified, destination names will be resolved into Destination objects first._<p>Note that a DestinationResolver for use with this factory must be_able to work <i>without</i> an active JMS Session: e.g._{@link org.springframework.jms.support.destination.JndiDestinationResolver}_or {@link org.springframework.jms.support.destination.BeanFactoryDestinationResolver}_but not {@link org.springframework.jms.support.destination.DynamicDestinationResolver}.;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver = destinationResolver__	};set,the,destination,resolver,to,use,for,resolving,destination,names,into,the,jca,1,5,activation,spec,destination,property,p,if,not,specified,destination,names,will,simply,be,passed,in,as,strings,if,specified,destination,names,will,be,resolved,into,destination,objects,first,p,note,that,a,destination,resolver,for,use,with,this,factory,must,be,able,to,work,i,without,i,an,active,jms,session,e,g,link,org,springframework,jms,support,destination,jndi,destination,resolver,or,link,org,springframework,jms,support,destination,bean,factory,destination,resolver,but,not,link,org,springframework,jms,support,destination,dynamic,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver
StandardJmsActivationSpecFactory -> public void setDestinationResolver(DestinationResolver destinationResolver);1495868221;Set the DestinationResolver to use for resolving destination names_into the JCA 1.5 ActivationSpec "destination" property._<p>If not specified, destination names will simply be passed in as Strings._If specified, destination names will be resolved into Destination objects first._<p>Note that a DestinationResolver for use with this factory must be_able to work <i>without</i> an active JMS Session: e.g._{@link org.springframework.jms.support.destination.JndiDestinationResolver}_or {@link org.springframework.jms.support.destination.BeanFactoryDestinationResolver}_but not {@link org.springframework.jms.support.destination.DynamicDestinationResolver}.;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver = destinationResolver__	};set,the,destination,resolver,to,use,for,resolving,destination,names,into,the,jca,1,5,activation,spec,destination,property,p,if,not,specified,destination,names,will,simply,be,passed,in,as,strings,if,specified,destination,names,will,be,resolved,into,destination,objects,first,p,note,that,a,destination,resolver,for,use,with,this,factory,must,be,able,to,work,i,without,i,an,active,jms,session,e,g,link,org,springframework,jms,support,destination,jndi,destination,resolver,or,link,org,springframework,jms,support,destination,bean,factory,destination,resolver,but,not,link,org,springframework,jms,support,destination,dynamic,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver
StandardJmsActivationSpecFactory -> public void setDestinationResolver(DestinationResolver destinationResolver);1498780456;Set the DestinationResolver to use for resolving destination names_into the JCA 1.5 ActivationSpec "destination" property._<p>If not specified, destination names will simply be passed in as Strings._If specified, destination names will be resolved into Destination objects first._<p>Note that a DestinationResolver for use with this factory must be_able to work <i>without</i> an active JMS Session: e.g._{@link org.springframework.jms.support.destination.JndiDestinationResolver}_or {@link org.springframework.jms.support.destination.BeanFactoryDestinationResolver}_but not {@link org.springframework.jms.support.destination.DynamicDestinationResolver}.;public void setDestinationResolver(DestinationResolver destinationResolver) {_		this.destinationResolver = destinationResolver__	};set,the,destination,resolver,to,use,for,resolving,destination,names,into,the,jca,1,5,activation,spec,destination,property,p,if,not,specified,destination,names,will,simply,be,passed,in,as,strings,if,specified,destination,names,will,be,resolved,into,destination,objects,first,p,note,that,a,destination,resolver,for,use,with,this,factory,must,be,able,to,work,i,without,i,an,active,jms,session,e,g,link,org,springframework,jms,support,destination,jndi,destination,resolver,or,link,org,springframework,jms,support,destination,bean,factory,destination,resolver,but,not,link,org,springframework,jms,support,destination,dynamic,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,this,destination,resolver,destination,resolver
StandardJmsActivationSpecFactory -> public DestinationResolver getDestinationResolver();1429516293;Return the {@link DestinationResolver} to use for resolving destinations names.;public DestinationResolver getDestinationResolver() {_		return destinationResolver__	};return,the,link,destination,resolver,to,use,for,resolving,destinations,names;public,destination,resolver,get,destination,resolver,return,destination,resolver
StandardJmsActivationSpecFactory -> public DestinationResolver getDestinationResolver();1495868221;Return the {@link DestinationResolver} to use for resolving destinations names.;public DestinationResolver getDestinationResolver() {_		return destinationResolver__	};return,the,link,destination,resolver,to,use,for,resolving,destinations,names;public,destination,resolver,get,destination,resolver,return,destination,resolver
StandardJmsActivationSpecFactory -> @Nullable 	public DestinationResolver getDestinationResolver();1496837955;Return the {@link DestinationResolver} to use for resolving destinations names.;@Nullable_	public DestinationResolver getDestinationResolver() {_		return this.destinationResolver__	};return,the,link,destination,resolver,to,use,for,resolving,destinations,names;nullable,public,destination,resolver,get,destination,resolver,return,this,destination,resolver
StandardJmsActivationSpecFactory -> @Nullable 	public DestinationResolver getDestinationResolver();1498780456;Return the {@link DestinationResolver} to use for resolving destinations names.;@Nullable_	public DestinationResolver getDestinationResolver() {_		return this.destinationResolver__	};return,the,link,destination,resolver,to,use,for,resolving,destinations,names;nullable,public,destination,resolver,get,destination,resolver,return,this,destination,resolver
StandardJmsActivationSpecFactory -> @Nullable 	public DestinationResolver getDestinationResolver();1500448076;Return the {@link DestinationResolver} to use for resolving destinations names.;@Nullable_	public DestinationResolver getDestinationResolver() {_		return this.destinationResolver__	};return,the,link,destination,resolver,to,use,for,resolving,destinations,names;nullable,public,destination,resolver,get,destination,resolver,return,this,destination,resolver
StandardJmsActivationSpecFactory -> public void setActivationSpecClass(Class activationSpecClass);1328020251;Specify the fully-qualified ActivationSpec class name for the target_provider (e.g. "org.apache.activemq.ra.ActiveMQActivationSpec").;public void setActivationSpecClass(Class activationSpecClass) {_		this.activationSpecClass = activationSpecClass__	};specify,the,fully,qualified,activation,spec,class,name,for,the,target,provider,e,g,org,apache,activemq,ra,active,mqactivation,spec;public,void,set,activation,spec,class,class,activation,spec,class,this,activation,spec,class,activation,spec,class
StandardJmsActivationSpecFactory -> public void setActivationSpecClass(Class activationSpecClass);1356735495;Specify the fully-qualified ActivationSpec class name for the target_provider (e.g. "org.apache.activemq.ra.ActiveMQActivationSpec").;public void setActivationSpecClass(Class activationSpecClass) {_		this.activationSpecClass = activationSpecClass__	};specify,the,fully,qualified,activation,spec,class,name,for,the,target,provider,e,g,org,apache,activemq,ra,active,mqactivation,spec;public,void,set,activation,spec,class,class,activation,spec,class,this,activation,spec,class,activation,spec,class
StandardJmsActivationSpecFactory -> public void setActivationSpecClass(Class activationSpecClass);1357119239;Specify the fully-qualified ActivationSpec class name for the target_provider (e.g. "org.apache.activemq.ra.ActiveMQActivationSpec").;public void setActivationSpecClass(Class activationSpecClass) {_		this.activationSpecClass = activationSpecClass__	};specify,the,fully,qualified,activation,spec,class,name,for,the,target,provider,e,g,org,apache,activemq,ra,active,mqactivation,spec;public,void,set,activation,spec,class,class,activation,spec,class,this,activation,spec,class,activation,spec,class
StandardJmsActivationSpecFactory -> public void setActivationSpecClass(Class activationSpecClass);1368482696;Specify the fully-qualified ActivationSpec class name for the target_provider (e.g. "org.apache.activemq.ra.ActiveMQActivationSpec").;public void setActivationSpecClass(Class activationSpecClass) {_		this.activationSpecClass = activationSpecClass__	};specify,the,fully,qualified,activation,spec,class,name,for,the,target,provider,e,g,org,apache,activemq,ra,active,mqactivation,spec;public,void,set,activation,spec,class,class,activation,spec,class,this,activation,spec,class,activation,spec,class
