commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setId(String id) {     this.id = id. }
false;public;0;4;;@Override public String getId() {     return this.id. }
true;public;1;3;/**  * Set the name of the destination for this endpoint.  */ ;/**  * Set the name of the destination for this endpoint.  */ public void setDestination(@Nullable String destination) {     this.destination = destination. }
true;public;0;4;/**  * Return the name of the destination for this endpoint.  */ ;/**  * Return the name of the destination for this endpoint.  */ @Nullable public String getDestination() {     return this.destination. }
true;public;1;3;/**  * Set the name for the durable subscription.  */ ;/**  * Set the name for the durable subscription.  */ public void setSubscription(@Nullable String subscription) {     this.subscription = subscription. }
true;public;0;4;/**  * Return the name for the durable subscription, if any.  */ ;/**  * Return the name for the durable subscription, if any.  */ @Nullable public String getSubscription() {     return this.subscription. }
true;public;1;3;/**  * Set the JMS message selector expression.  * <p>See the JMS specification for a detailed definition of selector expressions.  */ ;/**  * Set the JMS message selector expression.  * <p>See the JMS specification for a detailed definition of selector expressions.  */ public void setSelector(@Nullable String selector) {     this.selector = selector. }
true;public;0;4;/**  * Return the JMS message selector expression, if any.  */ ;/**  * Return the JMS message selector expression, if any.  */ @Nullable public String getSelector() {     return this.selector. }
true;public;1;3;/**  * Set a concurrency for the listener, if any.  * <p>The concurrency limits can be a "lower-upper" String, e.g. "5-10", or a simple  * upper limit String, e.g. "10" (the lower limit will be 1 in this case).  * <p>The underlying container may or may not support all features. For instance, it  * may not be able to scale: in that case only the upper value is used.  */ ;/**  * Set a concurrency for the listener, if any.  * <p>The concurrency limits can be a "lower-upper" String, e.g. "5-10", or a simple  * upper limit String, e.g. "10" (the lower limit will be 1 in this case).  * <p>The underlying container may or may not support all features. For instance, it  * may not be able to scale: in that case only the upper value is used.  */ public void setConcurrency(@Nullable String concurrency) {     this.concurrency = concurrency. }
true;public;0;4;/**  * Return the concurrency for the listener, if any.  */ ;/**  * Return the concurrency for the listener, if any.  */ @Nullable public String getConcurrency() {     return this.concurrency. }
false;public;1;9;;@Override public void setupListenerContainer(MessageListenerContainer listenerContainer) {     if (listenerContainer instanceof AbstractMessageListenerContainer) {         setupJmsListenerContainer((AbstractMessageListenerContainer) listenerContainer).     } else {         new JcaEndpointConfigurer().configureEndpoint(listenerContainer).     } }
false;private;1;15;;private void setupJmsListenerContainer(AbstractMessageListenerContainer listenerContainer) {     if (getDestination() != null) {         listenerContainer.setDestinationName(getDestination()).     }     if (getSubscription() != null) {         listenerContainer.setSubscriptionName(getSubscription()).     }     if (getSelector() != null) {         listenerContainer.setMessageSelector(getSelector()).     }     if (getConcurrency() != null) {         listenerContainer.setConcurrency(getConcurrency()).     }     setupMessageListener(listenerContainer). }
true;protected,abstract;1;1;/**  * Create a {@link MessageListener} that is able to serve this endpoint for the  * specified container.  */ ;/**  * Create a {@link MessageListener} that is able to serve this endpoint for the  * specified container.  */ protected abstract MessageListener createMessageListener(MessageListenerContainer container).
false;private;1;3;;private void setupMessageListener(MessageListenerContainer container) {     container.setupMessageListener(createMessageListener(container)). }
true;protected;0;6;/**  * Return a description for this endpoint.  * <p>Available to subclasses, for inclusion in their {@code toString()} result.  */ ;/**  * Return a description for this endpoint.  * <p>Available to subclasses, for inclusion in their {@code toString()} result.  */ protected StringBuilder getEndpointDescription() {     StringBuilder result = new StringBuilder().     return result.append(getClass().getSimpleName()).append("[").append(this.id).append("] destination=").append(this.destination).append("' | subscription='").append(this.subscription).append(" | selector='").append(this.selector).append("'"). }
false;public;0;4;;@Override public String toString() {     return getEndpointDescription().toString(). }
false;public;1;10;;public void configureEndpoint(Object listenerContainer) {     if (listenerContainer instanceof JmsMessageEndpointManager) {         setupJcaMessageContainer((JmsMessageEndpointManager) listenerContainer).     } else {         throw new IllegalArgumentException("Could not configure endpoint with the specified container '" + listenerContainer + "' Only JMS (" + AbstractMessageListenerContainer.class.getName() + " subclass) or JCA (" + JmsMessageEndpointManager.class.getName() + ") are supported.").     } }
false;private;1;20;;private void setupJcaMessageContainer(JmsMessageEndpointManager container) {     JmsActivationSpecConfig activationSpecConfig = container.getActivationSpecConfig().     if (activationSpecConfig == null) {         activationSpecConfig = new JmsActivationSpecConfig().         container.setActivationSpecConfig(activationSpecConfig).     }     if (getDestination() != null) {         activationSpecConfig.setDestinationName(getDestination()).     }     if (getSubscription() != null) {         activationSpecConfig.setSubscriptionName(getSubscription()).     }     if (getSelector() != null) {         activationSpecConfig.setMessageSelector(getSelector()).     }     if (getConcurrency() != null) {         activationSpecConfig.setConcurrency(getConcurrency()).     }     setupMessageListener(container). }
