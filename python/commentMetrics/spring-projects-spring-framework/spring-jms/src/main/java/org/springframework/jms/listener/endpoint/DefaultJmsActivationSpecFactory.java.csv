# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultJmsActivationSpecFactory -> @Override 	protected Class determineActivationSpecClass(ResourceAdapter adapter);1356735495;This implementation guesses the ActivationSpec class name from the_provider's class name: e.g. "ActiveMQResourceAdapter" ->_"ActiveMQActivationSpec" in the same package, or a class named_"ActivationSpecImpl" in the same package as the ResourceAdapter class.;@Override_	protected Class determineActivationSpecClass(ResourceAdapter adapter) {_		String adapterClassName = adapter.getClass().getName()___		if (adapterClassName.endsWith(RESOURCE_ADAPTER_SUFFIX)) {_			_			String providerName =_					adapterClassName.substring(0, adapterClassName.length() - RESOURCE_ADAPTER_SUFFIX.length())__			String specClassName = providerName + ACTIVATION_SPEC_SUFFIX__			try {_				return adapter.getClass().getClassLoader().loadClass(specClassName)__			}_			catch (ClassNotFoundException ex) {_				logger.debug("No default <Provider>ActivationSpec class found: " + specClassName)__			}_		}__		else if (adapterClassName.endsWith(RESOURCE_ADAPTER_IMPL_SUFFIX)){_			_			String providerName =_					adapterClassName.substring(0, adapterClassName.length() - RESOURCE_ADAPTER_IMPL_SUFFIX.length())__			String specClassName = providerName + ACTIVATION_SPEC_IMPL_SUFFIX__			try {_				return adapter.getClass().getClassLoader().loadClass(specClassName)__			}_			catch (ClassNotFoundException ex) {_				logger.debug("No default <Provider>ActivationSpecImpl class found: " + specClassName)__			}_		}__		_		String providerPackage = adapterClassName.substring(0, adapterClassName.lastIndexOf('.') + 1)__		String specClassName = providerPackage + ACTIVATION_SPEC_IMPL_SUFFIX__		try {_			return adapter.getClass().getClassLoader().loadClass(specClassName)__		}_		catch (ClassNotFoundException ex) {_			logger.debug("No default ActivationSpecImpl class found in provider package: " + specClassName)__		}__		_		specClassName = providerPackage + "inbound." + ACTIVATION_SPEC_IMPL_SUFFIX__		try {_			return adapter.getClass().getClassLoader().loadClass(specClassName)__		}_		catch (ClassNotFoundException ex) {_			logger.debug("No default ActivationSpecImpl class found in inbound subpackage: " + specClassName)__		}__		throw new IllegalStateException("No ActivationSpec class defined - " +_				"specify the 'activationSpecClass' property or override the 'determineActivationSpecClass' method")__	};this,implementation,guesses,the,activation,spec,class,name,from,the,provider,s,class,name,e,g,active,mqresource,adapter,active,mqactivation,spec,in,the,same,package,or,a,class,named,activation,spec,impl,in,the,same,package,as,the,resource,adapter,class;override,protected,class,determine,activation,spec,class,resource,adapter,adapter,string,adapter,class,name,adapter,get,class,get,name,if,adapter,class,name,ends,with,string,provider,name,adapter,class,name,substring,0,adapter,class,name,length,length,string,spec,class,name,provider,name,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,provider,activation,spec,class,found,spec,class,name,else,if,adapter,class,name,ends,with,string,provider,name,adapter,class,name,substring,0,adapter,class,name,length,length,string,spec,class,name,provider,name,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,provider,activation,spec,impl,class,found,spec,class,name,string,provider,package,adapter,class,name,substring,0,adapter,class,name,last,index,of,1,string,spec,class,name,provider,package,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,activation,spec,impl,class,found,in,provider,package,spec,class,name,spec,class,name,provider,package,inbound,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,activation,spec,impl,class,found,in,inbound,subpackage,spec,class,name,throw,new,illegal,state,exception,no,activation,spec,class,defined,specify,the,activation,spec,class,property,or,override,the,determine,activation,spec,class,method
DefaultJmsActivationSpecFactory -> @Override 	protected Class determineActivationSpecClass(ResourceAdapter adapter);1368482696;This implementation guesses the ActivationSpec class name from the_provider's class name: e.g. "ActiveMQResourceAdapter" ->_"ActiveMQActivationSpec" in the same package, or a class named_"ActivationSpecImpl" in the same package as the ResourceAdapter class.;@Override_	protected Class determineActivationSpecClass(ResourceAdapter adapter) {_		String adapterClassName = adapter.getClass().getName()___		if (adapterClassName.endsWith(RESOURCE_ADAPTER_SUFFIX)) {_			_			String providerName =_					adapterClassName.substring(0, adapterClassName.length() - RESOURCE_ADAPTER_SUFFIX.length())__			String specClassName = providerName + ACTIVATION_SPEC_SUFFIX__			try {_				return adapter.getClass().getClassLoader().loadClass(specClassName)__			}_			catch (ClassNotFoundException ex) {_				logger.debug("No default <Provider>ActivationSpec class found: " + specClassName)__			}_		}__		else if (adapterClassName.endsWith(RESOURCE_ADAPTER_IMPL_SUFFIX)){_			_			String providerName =_					adapterClassName.substring(0, adapterClassName.length() - RESOURCE_ADAPTER_IMPL_SUFFIX.length())__			String specClassName = providerName + ACTIVATION_SPEC_IMPL_SUFFIX__			try {_				return adapter.getClass().getClassLoader().loadClass(specClassName)__			}_			catch (ClassNotFoundException ex) {_				logger.debug("No default <Provider>ActivationSpecImpl class found: " + specClassName)__			}_		}__		_		String providerPackage = adapterClassName.substring(0, adapterClassName.lastIndexOf('.') + 1)__		String specClassName = providerPackage + ACTIVATION_SPEC_IMPL_SUFFIX__		try {_			return adapter.getClass().getClassLoader().loadClass(specClassName)__		}_		catch (ClassNotFoundException ex) {_			logger.debug("No default ActivationSpecImpl class found in provider package: " + specClassName)__		}__		_		specClassName = providerPackage + "inbound." + ACTIVATION_SPEC_IMPL_SUFFIX__		try {_			return adapter.getClass().getClassLoader().loadClass(specClassName)__		}_		catch (ClassNotFoundException ex) {_			logger.debug("No default ActivationSpecImpl class found in inbound subpackage: " + specClassName)__		}__		throw new IllegalStateException("No ActivationSpec class defined - " +_				"specify the 'activationSpecClass' property or override the 'determineActivationSpecClass' method")__	};this,implementation,guesses,the,activation,spec,class,name,from,the,provider,s,class,name,e,g,active,mqresource,adapter,active,mqactivation,spec,in,the,same,package,or,a,class,named,activation,spec,impl,in,the,same,package,as,the,resource,adapter,class;override,protected,class,determine,activation,spec,class,resource,adapter,adapter,string,adapter,class,name,adapter,get,class,get,name,if,adapter,class,name,ends,with,string,provider,name,adapter,class,name,substring,0,adapter,class,name,length,length,string,spec,class,name,provider,name,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,provider,activation,spec,class,found,spec,class,name,else,if,adapter,class,name,ends,with,string,provider,name,adapter,class,name,substring,0,adapter,class,name,length,length,string,spec,class,name,provider,name,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,provider,activation,spec,impl,class,found,spec,class,name,string,provider,package,adapter,class,name,substring,0,adapter,class,name,last,index,of,1,string,spec,class,name,provider,package,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,activation,spec,impl,class,found,in,provider,package,spec,class,name,spec,class,name,provider,package,inbound,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,activation,spec,impl,class,found,in,inbound,subpackage,spec,class,name,throw,new,illegal,state,exception,no,activation,spec,class,defined,specify,the,activation,spec,class,property,or,override,the,determine,activation,spec,class,method
DefaultJmsActivationSpecFactory -> @Override 	protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1356735495;This implementation supports Spring's extended "maxConcurrency"_and "prefetchSize" settings through detecting corresponding_ActivationSpec properties: "maxSessions"/"maxNumberOfWorks" and_"maxMessagesPerSessions"/"maxMessages", respectively_(following ActiveMQ's and JORAM's naming conventions).;@Override_	protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		super.populateActivationSpecProperties(bw, config)__		if (config.getMaxConcurrency() > 0) {_			if (bw.isWritableProperty("maxSessions")) {_				_				bw.setPropertyValue("maxSessions", Integer.toString(config.getMaxConcurrency()))__			}_			else if (bw.isWritableProperty("maxNumberOfWorks")) {_				_				bw.setPropertyValue("maxNumberOfWorks", Integer.toString(config.getMaxConcurrency()))__			}_			else if (bw.isWritableProperty("maxConcurrency")){_				_				bw.setPropertyValue("maxConcurrency", Integer.toString(config.getMaxConcurrency()))__			}_		}_		if (config.getPrefetchSize() > 0) {_			if (bw.isWritableProperty("maxMessagesPerSessions")) {_				_				bw.setPropertyValue("maxMessagesPerSessions", Integer.toString(config.getPrefetchSize()))__			}_			else if (bw.isWritableProperty("maxMessages")) {_				_				bw.setPropertyValue("maxMessages", Integer.toString(config.getPrefetchSize()))__			}_			else if(bw.isWritableProperty("maxBatchSize")){_				_				bw.setPropertyValue("maxBatchSize", Integer.toString(config.getPrefetchSize()))__			}_		}_	};this,implementation,supports,spring,s,extended,max,concurrency,and,prefetch,size,settings,through,detecting,corresponding,activation,spec,properties,max,sessions,max,number,of,works,and,max,messages,per,sessions,max,messages,respectively,following,active,mq,s,and,joram,s,naming,conventions;override,protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,super,populate,activation,spec,properties,bw,config,if,config,get,max,concurrency,0,if,bw,is,writable,property,max,sessions,bw,set,property,value,max,sessions,integer,to,string,config,get,max,concurrency,else,if,bw,is,writable,property,max,number,of,works,bw,set,property,value,max,number,of,works,integer,to,string,config,get,max,concurrency,else,if,bw,is,writable,property,max,concurrency,bw,set,property,value,max,concurrency,integer,to,string,config,get,max,concurrency,if,config,get,prefetch,size,0,if,bw,is,writable,property,max,messages,per,sessions,bw,set,property,value,max,messages,per,sessions,integer,to,string,config,get,prefetch,size,else,if,bw,is,writable,property,max,messages,bw,set,property,value,max,messages,integer,to,string,config,get,prefetch,size,else,if,bw,is,writable,property,max,batch,size,bw,set,property,value,max,batch,size,integer,to,string,config,get,prefetch,size
DefaultJmsActivationSpecFactory -> @Override 	protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1368482696;This implementation supports Spring's extended "maxConcurrency"_and "prefetchSize" settings through detecting corresponding_ActivationSpec properties: "maxSessions"/"maxNumberOfWorks" and_"maxMessagesPerSessions"/"maxMessages", respectively_(following ActiveMQ's and JORAM's naming conventions).;@Override_	protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		super.populateActivationSpecProperties(bw, config)__		if (config.getMaxConcurrency() > 0) {_			if (bw.isWritableProperty("maxSessions")) {_				_				bw.setPropertyValue("maxSessions", Integer.toString(config.getMaxConcurrency()))__			}_			else if (bw.isWritableProperty("maxNumberOfWorks")) {_				_				bw.setPropertyValue("maxNumberOfWorks", Integer.toString(config.getMaxConcurrency()))__			}_			else if (bw.isWritableProperty("maxConcurrency")){_				_				bw.setPropertyValue("maxConcurrency", Integer.toString(config.getMaxConcurrency()))__			}_		}_		if (config.getPrefetchSize() > 0) {_			if (bw.isWritableProperty("maxMessagesPerSessions")) {_				_				bw.setPropertyValue("maxMessagesPerSessions", Integer.toString(config.getPrefetchSize()))__			}_			else if (bw.isWritableProperty("maxMessages")) {_				_				bw.setPropertyValue("maxMessages", Integer.toString(config.getPrefetchSize()))__			}_			else if(bw.isWritableProperty("maxBatchSize")){_				_				bw.setPropertyValue("maxBatchSize", Integer.toString(config.getPrefetchSize()))__			}_		}_	};this,implementation,supports,spring,s,extended,max,concurrency,and,prefetch,size,settings,through,detecting,corresponding,activation,spec,properties,max,sessions,max,number,of,works,and,max,messages,per,sessions,max,messages,respectively,following,active,mq,s,and,joram,s,naming,conventions;override,protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,super,populate,activation,spec,properties,bw,config,if,config,get,max,concurrency,0,if,bw,is,writable,property,max,sessions,bw,set,property,value,max,sessions,integer,to,string,config,get,max,concurrency,else,if,bw,is,writable,property,max,number,of,works,bw,set,property,value,max,number,of,works,integer,to,string,config,get,max,concurrency,else,if,bw,is,writable,property,max,concurrency,bw,set,property,value,max,concurrency,integer,to,string,config,get,max,concurrency,if,config,get,prefetch,size,0,if,bw,is,writable,property,max,messages,per,sessions,bw,set,property,value,max,messages,per,sessions,integer,to,string,config,get,prefetch,size,else,if,bw,is,writable,property,max,messages,bw,set,property,value,max,messages,integer,to,string,config,get,prefetch,size,else,if,bw,is,writable,property,max,batch,size,bw,set,property,value,max,batch,size,integer,to,string,config,get,prefetch,size
DefaultJmsActivationSpecFactory -> @Override 	protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1385412762;This implementation supports Spring's extended "maxConcurrency"_and "prefetchSize" settings through detecting corresponding_ActivationSpec properties: "maxSessions"/"maxNumberOfWorks" and_"maxMessagesPerSessions"/"maxMessages", respectively_(following ActiveMQ's and JORAM's naming conventions).;@Override_	protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		super.populateActivationSpecProperties(bw, config)__		if (config.getMaxConcurrency() > 0) {_			if (bw.isWritableProperty("maxSessions")) {_				_				bw.setPropertyValue("maxSessions", Integer.toString(config.getMaxConcurrency()))__			}_			else if (bw.isWritableProperty("maxNumberOfWorks")) {_				_				bw.setPropertyValue("maxNumberOfWorks", Integer.toString(config.getMaxConcurrency()))__			}_			else if (bw.isWritableProperty("maxConcurrency")){_				_				bw.setPropertyValue("maxConcurrency", Integer.toString(config.getMaxConcurrency()))__			}_		}_		if (config.getPrefetchSize() > 0) {_			if (bw.isWritableProperty("maxMessagesPerSessions")) {_				_				bw.setPropertyValue("maxMessagesPerSessions", Integer.toString(config.getPrefetchSize()))__			}_			else if (bw.isWritableProperty("maxMessages")) {_				_				bw.setPropertyValue("maxMessages", Integer.toString(config.getPrefetchSize()))__			}_			else if(bw.isWritableProperty("maxBatchSize")){_				_				bw.setPropertyValue("maxBatchSize", Integer.toString(config.getPrefetchSize()))__			}_		}_	};this,implementation,supports,spring,s,extended,max,concurrency,and,prefetch,size,settings,through,detecting,corresponding,activation,spec,properties,max,sessions,max,number,of,works,and,max,messages,per,sessions,max,messages,respectively,following,active,mq,s,and,joram,s,naming,conventions;override,protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,super,populate,activation,spec,properties,bw,config,if,config,get,max,concurrency,0,if,bw,is,writable,property,max,sessions,bw,set,property,value,max,sessions,integer,to,string,config,get,max,concurrency,else,if,bw,is,writable,property,max,number,of,works,bw,set,property,value,max,number,of,works,integer,to,string,config,get,max,concurrency,else,if,bw,is,writable,property,max,concurrency,bw,set,property,value,max,concurrency,integer,to,string,config,get,max,concurrency,if,config,get,prefetch,size,0,if,bw,is,writable,property,max,messages,per,sessions,bw,set,property,value,max,messages,per,sessions,integer,to,string,config,get,prefetch,size,else,if,bw,is,writable,property,max,messages,bw,set,property,value,max,messages,integer,to,string,config,get,prefetch,size,else,if,bw,is,writable,property,max,batch,size,bw,set,property,value,max,batch,size,integer,to,string,config,get,prefetch,size
DefaultJmsActivationSpecFactory -> @Override 	protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1405696881;This implementation supports Spring's extended "maxConcurrency"_and "prefetchSize" settings through detecting corresponding_ActivationSpec properties: "maxSessions"/"maxNumberOfWorks" and_"maxMessagesPerSessions"/"maxMessages", respectively_(following ActiveMQ's and JORAM's naming conventions).;@Override_	protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		super.populateActivationSpecProperties(bw, config)__		if (config.getMaxConcurrency() > 0) {_			if (bw.isWritableProperty("maxSessions")) {_				_				bw.setPropertyValue("maxSessions", Integer.toString(config.getMaxConcurrency()))__			}_			else if (bw.isWritableProperty("maxNumberOfWorks")) {_				_				bw.setPropertyValue("maxNumberOfWorks", Integer.toString(config.getMaxConcurrency()))__			}_			else if (bw.isWritableProperty("maxConcurrency")){_				_				bw.setPropertyValue("maxConcurrency", Integer.toString(config.getMaxConcurrency()))__			}_		}_		if (config.getPrefetchSize() > 0) {_			if (bw.isWritableProperty("maxMessagesPerSessions")) {_				_				bw.setPropertyValue("maxMessagesPerSessions", Integer.toString(config.getPrefetchSize()))__			}_			else if (bw.isWritableProperty("maxMessages")) {_				_				bw.setPropertyValue("maxMessages", Integer.toString(config.getPrefetchSize()))__			}_			else if (bw.isWritableProperty("maxBatchSize")){_				_				bw.setPropertyValue("maxBatchSize", Integer.toString(config.getPrefetchSize()))__			}_		}_	};this,implementation,supports,spring,s,extended,max,concurrency,and,prefetch,size,settings,through,detecting,corresponding,activation,spec,properties,max,sessions,max,number,of,works,and,max,messages,per,sessions,max,messages,respectively,following,active,mq,s,and,joram,s,naming,conventions;override,protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,super,populate,activation,spec,properties,bw,config,if,config,get,max,concurrency,0,if,bw,is,writable,property,max,sessions,bw,set,property,value,max,sessions,integer,to,string,config,get,max,concurrency,else,if,bw,is,writable,property,max,number,of,works,bw,set,property,value,max,number,of,works,integer,to,string,config,get,max,concurrency,else,if,bw,is,writable,property,max,concurrency,bw,set,property,value,max,concurrency,integer,to,string,config,get,max,concurrency,if,config,get,prefetch,size,0,if,bw,is,writable,property,max,messages,per,sessions,bw,set,property,value,max,messages,per,sessions,integer,to,string,config,get,prefetch,size,else,if,bw,is,writable,property,max,messages,bw,set,property,value,max,messages,integer,to,string,config,get,prefetch,size,else,if,bw,is,writable,property,max,batch,size,bw,set,property,value,max,batch,size,integer,to,string,config,get,prefetch,size
DefaultJmsActivationSpecFactory -> @Override 	protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1530174524;This implementation supports Spring's extended "maxConcurrency"_and "prefetchSize" settings through detecting corresponding_ActivationSpec properties: "maxSessions"/"maxNumberOfWorks" and_"maxMessagesPerSessions"/"maxMessages", respectively_(following ActiveMQ's and JORAM's naming conventions).;@Override_	protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		super.populateActivationSpecProperties(bw, config)__		if (config.getMaxConcurrency() > 0) {_			if (bw.isWritableProperty("maxSessions")) {_				_				bw.setPropertyValue("maxSessions", Integer.toString(config.getMaxConcurrency()))__			}_			else if (bw.isWritableProperty("maxNumberOfWorks")) {_				_				bw.setPropertyValue("maxNumberOfWorks", Integer.toString(config.getMaxConcurrency()))__			}_			else if (bw.isWritableProperty("maxConcurrency")){_				_				bw.setPropertyValue("maxConcurrency", Integer.toString(config.getMaxConcurrency()))__			}_		}_		if (config.getPrefetchSize() > 0) {_			if (bw.isWritableProperty("maxMessagesPerSessions")) {_				_				bw.setPropertyValue("maxMessagesPerSessions", Integer.toString(config.getPrefetchSize()))__			}_			else if (bw.isWritableProperty("maxMessages")) {_				_				bw.setPropertyValue("maxMessages", Integer.toString(config.getPrefetchSize()))__			}_			else if (bw.isWritableProperty("maxBatchSize")){_				_				bw.setPropertyValue("maxBatchSize", Integer.toString(config.getPrefetchSize()))__			}_		}_	};this,implementation,supports,spring,s,extended,max,concurrency,and,prefetch,size,settings,through,detecting,corresponding,activation,spec,properties,max,sessions,max,number,of,works,and,max,messages,per,sessions,max,messages,respectively,following,active,mq,s,and,joram,s,naming,conventions;override,protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,super,populate,activation,spec,properties,bw,config,if,config,get,max,concurrency,0,if,bw,is,writable,property,max,sessions,bw,set,property,value,max,sessions,integer,to,string,config,get,max,concurrency,else,if,bw,is,writable,property,max,number,of,works,bw,set,property,value,max,number,of,works,integer,to,string,config,get,max,concurrency,else,if,bw,is,writable,property,max,concurrency,bw,set,property,value,max,concurrency,integer,to,string,config,get,max,concurrency,if,config,get,prefetch,size,0,if,bw,is,writable,property,max,messages,per,sessions,bw,set,property,value,max,messages,per,sessions,integer,to,string,config,get,prefetch,size,else,if,bw,is,writable,property,max,messages,bw,set,property,value,max,messages,integer,to,string,config,get,prefetch,size,else,if,bw,is,writable,property,max,batch,size,bw,set,property,value,max,batch,size,integer,to,string,config,get,prefetch,size
DefaultJmsActivationSpecFactory -> @Override 	protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1356735495;This implementation maps {@code SESSION_TRANSACTED} onto an_ActivationSpec property named "useRAManagedTransaction", if available_(following ActiveMQ's naming conventions).;@Override_	protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED && bw.isWritableProperty("useRAManagedTransaction")) {_			_			bw.setPropertyValue("useRAManagedTransaction", "true")__		}_		else {_			super.applyAcknowledgeMode(bw, ackMode)__		}_	};this,implementation,maps,code,onto,an,activation,spec,property,named,use,ramanaged,transaction,if,available,following,active,mq,s,naming,conventions;override,protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,bw,is,writable,property,use,ramanaged,transaction,bw,set,property,value,use,ramanaged,transaction,true,else,super,apply,acknowledge,mode,bw,ack,mode
DefaultJmsActivationSpecFactory -> @Override 	protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1368482696;This implementation maps {@code SESSION_TRANSACTED} onto an_ActivationSpec property named "useRAManagedTransaction", if available_(following ActiveMQ's naming conventions).;@Override_	protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED && bw.isWritableProperty("useRAManagedTransaction")) {_			_			bw.setPropertyValue("useRAManagedTransaction", "true")__		}_		else {_			super.applyAcknowledgeMode(bw, ackMode)__		}_	};this,implementation,maps,code,onto,an,activation,spec,property,named,use,ramanaged,transaction,if,available,following,active,mq,s,naming,conventions;override,protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,bw,is,writable,property,use,ramanaged,transaction,bw,set,property,value,use,ramanaged,transaction,true,else,super,apply,acknowledge,mode,bw,ack,mode
DefaultJmsActivationSpecFactory -> @Override 	protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1385412762;This implementation maps {@code SESSION_TRANSACTED} onto an_ActivationSpec property named "useRAManagedTransaction", if available_(following ActiveMQ's naming conventions).;@Override_	protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED && bw.isWritableProperty("useRAManagedTransaction")) {_			_			bw.setPropertyValue("useRAManagedTransaction", "true")__		}_		else {_			super.applyAcknowledgeMode(bw, ackMode)__		}_	};this,implementation,maps,code,onto,an,activation,spec,property,named,use,ramanaged,transaction,if,available,following,active,mq,s,naming,conventions;override,protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,bw,is,writable,property,use,ramanaged,transaction,bw,set,property,value,use,ramanaged,transaction,true,else,super,apply,acknowledge,mode,bw,ack,mode
DefaultJmsActivationSpecFactory -> @Override 	protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1405696881;This implementation maps {@code SESSION_TRANSACTED} onto an_ActivationSpec property named "useRAManagedTransaction", if available_(following ActiveMQ's naming conventions).;@Override_	protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED && bw.isWritableProperty("useRAManagedTransaction")) {_			_			bw.setPropertyValue("useRAManagedTransaction", "true")__		}_		else {_			super.applyAcknowledgeMode(bw, ackMode)__		}_	};this,implementation,maps,code,onto,an,activation,spec,property,named,use,ramanaged,transaction,if,available,following,active,mq,s,naming,conventions;override,protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,bw,is,writable,property,use,ramanaged,transaction,bw,set,property,value,use,ramanaged,transaction,true,else,super,apply,acknowledge,mode,bw,ack,mode
DefaultJmsActivationSpecFactory -> @Override 	protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1530174524;This implementation maps {@code SESSION_TRANSACTED} onto an_ActivationSpec property named "useRAManagedTransaction", if available_(following ActiveMQ's naming conventions).;@Override_	protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED && bw.isWritableProperty("useRAManagedTransaction")) {_			_			bw.setPropertyValue("useRAManagedTransaction", "true")__		}_		else {_			super.applyAcknowledgeMode(bw, ackMode)__		}_	};this,implementation,maps,code,onto,an,activation,spec,property,named,use,ramanaged,transaction,if,available,following,active,mq,s,naming,conventions;override,protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,bw,is,writable,property,use,ramanaged,transaction,bw,set,property,value,use,ramanaged,transaction,true,else,super,apply,acknowledge,mode,bw,ack,mode
DefaultJmsActivationSpecFactory -> protected Class determineActivationSpecClass(ResourceAdapter adapter);1328020251;This implementation guesses the ActivationSpec class name from the_provider's class name: e.g. "ActiveMQResourceAdapter" ->_"ActiveMQActivationSpec" in the same package, or a class named_"ActivationSpecImpl" in the same package as the ResourceAdapter class.;protected Class determineActivationSpecClass(ResourceAdapter adapter) {_		String adapterClassName = adapter.getClass().getName()___		if (adapterClassName.endsWith(RESOURCE_ADAPTER_SUFFIX)) {_			_			String providerName =_					adapterClassName.substring(0, adapterClassName.length() - RESOURCE_ADAPTER_SUFFIX.length())__			String specClassName = providerName + ACTIVATION_SPEC_SUFFIX__			try {_				return adapter.getClass().getClassLoader().loadClass(specClassName)__			}_			catch (ClassNotFoundException ex) {_				logger.debug("No default <Provider>ActivationSpec class found: " + specClassName)__			}_		}__		else if (adapterClassName.endsWith(RESOURCE_ADAPTER_IMPL_SUFFIX)){_			_			String providerName =_					adapterClassName.substring(0, adapterClassName.length() - RESOURCE_ADAPTER_IMPL_SUFFIX.length())__			String specClassName = providerName + ACTIVATION_SPEC_IMPL_SUFFIX__			try {_				return adapter.getClass().getClassLoader().loadClass(specClassName)__			}_			catch (ClassNotFoundException ex) {_				logger.debug("No default <Provider>ActivationSpecImpl class found: " + specClassName)__			}_		}__		_		String providerPackage = adapterClassName.substring(0, adapterClassName.lastIndexOf('.') + 1)__		String specClassName = providerPackage + ACTIVATION_SPEC_IMPL_SUFFIX__		try {_			return adapter.getClass().getClassLoader().loadClass(specClassName)__		}_		catch (ClassNotFoundException ex) {_			logger.debug("No default ActivationSpecImpl class found in provider package: " + specClassName)__		}__		_		specClassName = providerPackage + "inbound." + ACTIVATION_SPEC_IMPL_SUFFIX__		try {_			return adapter.getClass().getClassLoader().loadClass(specClassName)__		}_		catch (ClassNotFoundException ex) {_			logger.debug("No default ActivationSpecImpl class found in inbound subpackage: " + specClassName)__		}__		throw new IllegalStateException("No ActivationSpec class defined - " +_				"specify the 'activationSpecClass' property or override the 'determineActivationSpecClass' method")__	};this,implementation,guesses,the,activation,spec,class,name,from,the,provider,s,class,name,e,g,active,mqresource,adapter,active,mqactivation,spec,in,the,same,package,or,a,class,named,activation,spec,impl,in,the,same,package,as,the,resource,adapter,class;protected,class,determine,activation,spec,class,resource,adapter,adapter,string,adapter,class,name,adapter,get,class,get,name,if,adapter,class,name,ends,with,string,provider,name,adapter,class,name,substring,0,adapter,class,name,length,length,string,spec,class,name,provider,name,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,provider,activation,spec,class,found,spec,class,name,else,if,adapter,class,name,ends,with,string,provider,name,adapter,class,name,substring,0,adapter,class,name,length,length,string,spec,class,name,provider,name,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,provider,activation,spec,impl,class,found,spec,class,name,string,provider,package,adapter,class,name,substring,0,adapter,class,name,last,index,of,1,string,spec,class,name,provider,package,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,activation,spec,impl,class,found,in,provider,package,spec,class,name,spec,class,name,provider,package,inbound,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,activation,spec,impl,class,found,in,inbound,subpackage,spec,class,name,throw,new,illegal,state,exception,no,activation,spec,class,defined,specify,the,activation,spec,class,property,or,override,the,determine,activation,spec,class,method
DefaultJmsActivationSpecFactory -> protected Class determineActivationSpecClass(ResourceAdapter adapter);1357119239;This implementation guesses the ActivationSpec class name from the_provider's class name: e.g. "ActiveMQResourceAdapter" ->_"ActiveMQActivationSpec" in the same package, or a class named_"ActivationSpecImpl" in the same package as the ResourceAdapter class.;protected Class determineActivationSpecClass(ResourceAdapter adapter) {_		String adapterClassName = adapter.getClass().getName()___		if (adapterClassName.endsWith(RESOURCE_ADAPTER_SUFFIX)) {_			_			String providerName =_					adapterClassName.substring(0, adapterClassName.length() - RESOURCE_ADAPTER_SUFFIX.length())__			String specClassName = providerName + ACTIVATION_SPEC_SUFFIX__			try {_				return adapter.getClass().getClassLoader().loadClass(specClassName)__			}_			catch (ClassNotFoundException ex) {_				logger.debug("No default <Provider>ActivationSpec class found: " + specClassName)__			}_		}__		else if (adapterClassName.endsWith(RESOURCE_ADAPTER_IMPL_SUFFIX)){_			_			String providerName =_					adapterClassName.substring(0, adapterClassName.length() - RESOURCE_ADAPTER_IMPL_SUFFIX.length())__			String specClassName = providerName + ACTIVATION_SPEC_IMPL_SUFFIX__			try {_				return adapter.getClass().getClassLoader().loadClass(specClassName)__			}_			catch (ClassNotFoundException ex) {_				logger.debug("No default <Provider>ActivationSpecImpl class found: " + specClassName)__			}_		}__		_		String providerPackage = adapterClassName.substring(0, adapterClassName.lastIndexOf('.') + 1)__		String specClassName = providerPackage + ACTIVATION_SPEC_IMPL_SUFFIX__		try {_			return adapter.getClass().getClassLoader().loadClass(specClassName)__		}_		catch (ClassNotFoundException ex) {_			logger.debug("No default ActivationSpecImpl class found in provider package: " + specClassName)__		}__		_		specClassName = providerPackage + "inbound." + ACTIVATION_SPEC_IMPL_SUFFIX__		try {_			return adapter.getClass().getClassLoader().loadClass(specClassName)__		}_		catch (ClassNotFoundException ex) {_			logger.debug("No default ActivationSpecImpl class found in inbound subpackage: " + specClassName)__		}__		throw new IllegalStateException("No ActivationSpec class defined - " +_				"specify the 'activationSpecClass' property or override the 'determineActivationSpecClass' method")__	};this,implementation,guesses,the,activation,spec,class,name,from,the,provider,s,class,name,e,g,active,mqresource,adapter,active,mqactivation,spec,in,the,same,package,or,a,class,named,activation,spec,impl,in,the,same,package,as,the,resource,adapter,class;protected,class,determine,activation,spec,class,resource,adapter,adapter,string,adapter,class,name,adapter,get,class,get,name,if,adapter,class,name,ends,with,string,provider,name,adapter,class,name,substring,0,adapter,class,name,length,length,string,spec,class,name,provider,name,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,provider,activation,spec,class,found,spec,class,name,else,if,adapter,class,name,ends,with,string,provider,name,adapter,class,name,substring,0,adapter,class,name,length,length,string,spec,class,name,provider,name,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,provider,activation,spec,impl,class,found,spec,class,name,string,provider,package,adapter,class,name,substring,0,adapter,class,name,last,index,of,1,string,spec,class,name,provider,package,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,activation,spec,impl,class,found,in,provider,package,spec,class,name,spec,class,name,provider,package,inbound,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,activation,spec,impl,class,found,in,inbound,subpackage,spec,class,name,throw,new,illegal,state,exception,no,activation,spec,class,defined,specify,the,activation,spec,class,property,or,override,the,determine,activation,spec,class,method
DefaultJmsActivationSpecFactory -> protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1328020251;This implementation supports Spring's extended "maxConcurrency"_and "prefetchSize" settings through detecting corresponding_ActivationSpec properties: "maxSessions"/"maxNumberOfWorks" and_"maxMessagesPerSessions"/"maxMessages", respectively_(following ActiveMQ's and JORAM's naming conventions).;protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		super.populateActivationSpecProperties(bw, config)__		if (config.getMaxConcurrency() > 0) {_			if (bw.isWritableProperty("maxSessions")) {_				_				bw.setPropertyValue("maxSessions", Integer.toString(config.getMaxConcurrency()))__			}_			else if (bw.isWritableProperty("maxNumberOfWorks")) {_				_				bw.setPropertyValue("maxNumberOfWorks", Integer.toString(config.getMaxConcurrency()))__			}_			else if (bw.isWritableProperty("maxConcurrency")){_				_				bw.setPropertyValue("maxConcurrency", Integer.toString(config.getMaxConcurrency()))__			}_		}_		if (config.getPrefetchSize() > 0) {_			if (bw.isWritableProperty("maxMessagesPerSessions")) {_				_				bw.setPropertyValue("maxMessagesPerSessions", Integer.toString(config.getPrefetchSize()))__			}_			else if (bw.isWritableProperty("maxMessages")) {_				_				bw.setPropertyValue("maxMessages", Integer.toString(config.getPrefetchSize()))__			}_			else if(bw.isWritableProperty("maxBatchSize")){_				_				bw.setPropertyValue("maxBatchSize", Integer.toString(config.getPrefetchSize()))__			}_		}_	};this,implementation,supports,spring,s,extended,max,concurrency,and,prefetch,size,settings,through,detecting,corresponding,activation,spec,properties,max,sessions,max,number,of,works,and,max,messages,per,sessions,max,messages,respectively,following,active,mq,s,and,joram,s,naming,conventions;protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,super,populate,activation,spec,properties,bw,config,if,config,get,max,concurrency,0,if,bw,is,writable,property,max,sessions,bw,set,property,value,max,sessions,integer,to,string,config,get,max,concurrency,else,if,bw,is,writable,property,max,number,of,works,bw,set,property,value,max,number,of,works,integer,to,string,config,get,max,concurrency,else,if,bw,is,writable,property,max,concurrency,bw,set,property,value,max,concurrency,integer,to,string,config,get,max,concurrency,if,config,get,prefetch,size,0,if,bw,is,writable,property,max,messages,per,sessions,bw,set,property,value,max,messages,per,sessions,integer,to,string,config,get,prefetch,size,else,if,bw,is,writable,property,max,messages,bw,set,property,value,max,messages,integer,to,string,config,get,prefetch,size,else,if,bw,is,writable,property,max,batch,size,bw,set,property,value,max,batch,size,integer,to,string,config,get,prefetch,size
DefaultJmsActivationSpecFactory -> protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config);1357119239;This implementation supports Spring's extended "maxConcurrency"_and "prefetchSize" settings through detecting corresponding_ActivationSpec properties: "maxSessions"/"maxNumberOfWorks" and_"maxMessagesPerSessions"/"maxMessages", respectively_(following ActiveMQ's and JORAM's naming conventions).;protected void populateActivationSpecProperties(BeanWrapper bw, JmsActivationSpecConfig config) {_		super.populateActivationSpecProperties(bw, config)__		if (config.getMaxConcurrency() > 0) {_			if (bw.isWritableProperty("maxSessions")) {_				_				bw.setPropertyValue("maxSessions", Integer.toString(config.getMaxConcurrency()))__			}_			else if (bw.isWritableProperty("maxNumberOfWorks")) {_				_				bw.setPropertyValue("maxNumberOfWorks", Integer.toString(config.getMaxConcurrency()))__			}_			else if (bw.isWritableProperty("maxConcurrency")){_				_				bw.setPropertyValue("maxConcurrency", Integer.toString(config.getMaxConcurrency()))__			}_		}_		if (config.getPrefetchSize() > 0) {_			if (bw.isWritableProperty("maxMessagesPerSessions")) {_				_				bw.setPropertyValue("maxMessagesPerSessions", Integer.toString(config.getPrefetchSize()))__			}_			else if (bw.isWritableProperty("maxMessages")) {_				_				bw.setPropertyValue("maxMessages", Integer.toString(config.getPrefetchSize()))__			}_			else if(bw.isWritableProperty("maxBatchSize")){_				_				bw.setPropertyValue("maxBatchSize", Integer.toString(config.getPrefetchSize()))__			}_		}_	};this,implementation,supports,spring,s,extended,max,concurrency,and,prefetch,size,settings,through,detecting,corresponding,activation,spec,properties,max,sessions,max,number,of,works,and,max,messages,per,sessions,max,messages,respectively,following,active,mq,s,and,joram,s,naming,conventions;protected,void,populate,activation,spec,properties,bean,wrapper,bw,jms,activation,spec,config,config,super,populate,activation,spec,properties,bw,config,if,config,get,max,concurrency,0,if,bw,is,writable,property,max,sessions,bw,set,property,value,max,sessions,integer,to,string,config,get,max,concurrency,else,if,bw,is,writable,property,max,number,of,works,bw,set,property,value,max,number,of,works,integer,to,string,config,get,max,concurrency,else,if,bw,is,writable,property,max,concurrency,bw,set,property,value,max,concurrency,integer,to,string,config,get,max,concurrency,if,config,get,prefetch,size,0,if,bw,is,writable,property,max,messages,per,sessions,bw,set,property,value,max,messages,per,sessions,integer,to,string,config,get,prefetch,size,else,if,bw,is,writable,property,max,messages,bw,set,property,value,max,messages,integer,to,string,config,get,prefetch,size,else,if,bw,is,writable,property,max,batch,size,bw,set,property,value,max,batch,size,integer,to,string,config,get,prefetch,size
DefaultJmsActivationSpecFactory -> protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1328020251;This implementation maps <code>SESSION_TRANSACTED</code> onto an_ActivationSpec property named "useRAManagedTransaction", if available_(following ActiveMQ's naming conventions).;protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED && bw.isWritableProperty("useRAManagedTransaction")) {_			_			bw.setPropertyValue("useRAManagedTransaction", "true")__		}_		else {_			super.applyAcknowledgeMode(bw, ackMode)__		}_	};this,implementation,maps,code,code,onto,an,activation,spec,property,named,use,ramanaged,transaction,if,available,following,active,mq,s,naming,conventions;protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,bw,is,writable,property,use,ramanaged,transaction,bw,set,property,value,use,ramanaged,transaction,true,else,super,apply,acknowledge,mode,bw,ack,mode
DefaultJmsActivationSpecFactory -> protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode);1357119239;This implementation maps {@code SESSION_TRANSACTED} onto an_ActivationSpec property named "useRAManagedTransaction", if available_(following ActiveMQ's naming conventions).;protected void applyAcknowledgeMode(BeanWrapper bw, int ackMode) {_		if (ackMode == Session.SESSION_TRANSACTED && bw.isWritableProperty("useRAManagedTransaction")) {_			_			bw.setPropertyValue("useRAManagedTransaction", "true")__		}_		else {_			super.applyAcknowledgeMode(bw, ackMode)__		}_	};this,implementation,maps,code,onto,an,activation,spec,property,named,use,ramanaged,transaction,if,available,following,active,mq,s,naming,conventions;protected,void,apply,acknowledge,mode,bean,wrapper,bw,int,ack,mode,if,ack,mode,session,bw,is,writable,property,use,ramanaged,transaction,bw,set,property,value,use,ramanaged,transaction,true,else,super,apply,acknowledge,mode,bw,ack,mode
DefaultJmsActivationSpecFactory -> @Override 	protected Class<?> determineActivationSpecClass(ResourceAdapter adapter);1385412762;This implementation guesses the ActivationSpec class name from the_provider's class name: e.g. "ActiveMQResourceAdapter" ->_"ActiveMQActivationSpec" in the same package, or a class named_"ActivationSpecImpl" in the same package as the ResourceAdapter class.;@Override_	protected Class<?> determineActivationSpecClass(ResourceAdapter adapter) {_		String adapterClassName = adapter.getClass().getName()___		if (adapterClassName.endsWith(RESOURCE_ADAPTER_SUFFIX)) {_			_			String providerName =_					adapterClassName.substring(0, adapterClassName.length() - RESOURCE_ADAPTER_SUFFIX.length())__			String specClassName = providerName + ACTIVATION_SPEC_SUFFIX__			try {_				return adapter.getClass().getClassLoader().loadClass(specClassName)__			}_			catch (ClassNotFoundException ex) {_				logger.debug("No default <Provider>ActivationSpec class found: " + specClassName)__			}_		}__		else if (adapterClassName.endsWith(RESOURCE_ADAPTER_IMPL_SUFFIX)){_			_			String providerName =_					adapterClassName.substring(0, adapterClassName.length() - RESOURCE_ADAPTER_IMPL_SUFFIX.length())__			String specClassName = providerName + ACTIVATION_SPEC_IMPL_SUFFIX__			try {_				return adapter.getClass().getClassLoader().loadClass(specClassName)__			}_			catch (ClassNotFoundException ex) {_				logger.debug("No default <Provider>ActivationSpecImpl class found: " + specClassName)__			}_		}__		_		String providerPackage = adapterClassName.substring(0, adapterClassName.lastIndexOf('.') + 1)__		String specClassName = providerPackage + ACTIVATION_SPEC_IMPL_SUFFIX__		try {_			return adapter.getClass().getClassLoader().loadClass(specClassName)__		}_		catch (ClassNotFoundException ex) {_			logger.debug("No default ActivationSpecImpl class found in provider package: " + specClassName)__		}__		_		specClassName = providerPackage + "inbound." + ACTIVATION_SPEC_IMPL_SUFFIX__		try {_			return adapter.getClass().getClassLoader().loadClass(specClassName)__		}_		catch (ClassNotFoundException ex) {_			logger.debug("No default ActivationSpecImpl class found in inbound subpackage: " + specClassName)__		}__		throw new IllegalStateException("No ActivationSpec class defined - " +_				"specify the 'activationSpecClass' property or override the 'determineActivationSpecClass' method")__	};this,implementation,guesses,the,activation,spec,class,name,from,the,provider,s,class,name,e,g,active,mqresource,adapter,active,mqactivation,spec,in,the,same,package,or,a,class,named,activation,spec,impl,in,the,same,package,as,the,resource,adapter,class;override,protected,class,determine,activation,spec,class,resource,adapter,adapter,string,adapter,class,name,adapter,get,class,get,name,if,adapter,class,name,ends,with,string,provider,name,adapter,class,name,substring,0,adapter,class,name,length,length,string,spec,class,name,provider,name,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,provider,activation,spec,class,found,spec,class,name,else,if,adapter,class,name,ends,with,string,provider,name,adapter,class,name,substring,0,adapter,class,name,length,length,string,spec,class,name,provider,name,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,provider,activation,spec,impl,class,found,spec,class,name,string,provider,package,adapter,class,name,substring,0,adapter,class,name,last,index,of,1,string,spec,class,name,provider,package,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,activation,spec,impl,class,found,in,provider,package,spec,class,name,spec,class,name,provider,package,inbound,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,activation,spec,impl,class,found,in,inbound,subpackage,spec,class,name,throw,new,illegal,state,exception,no,activation,spec,class,defined,specify,the,activation,spec,class,property,or,override,the,determine,activation,spec,class,method
DefaultJmsActivationSpecFactory -> @Override 	protected Class<?> determineActivationSpecClass(ResourceAdapter adapter);1405696881;This implementation guesses the ActivationSpec class name from the_provider's class name: e.g. "ActiveMQResourceAdapter" ->_"ActiveMQActivationSpec" in the same package, or a class named_"ActivationSpecImpl" in the same package as the ResourceAdapter class.;@Override_	protected Class<?> determineActivationSpecClass(ResourceAdapter adapter) {_		String adapterClassName = adapter.getClass().getName()___		if (adapterClassName.endsWith(RESOURCE_ADAPTER_SUFFIX)) {_			_			String providerName =_					adapterClassName.substring(0, adapterClassName.length() - RESOURCE_ADAPTER_SUFFIX.length())__			String specClassName = providerName + ACTIVATION_SPEC_SUFFIX__			try {_				return adapter.getClass().getClassLoader().loadClass(specClassName)__			}_			catch (ClassNotFoundException ex) {_				logger.debug("No default <Provider>ActivationSpec class found: " + specClassName)__			}_		}__		else if (adapterClassName.endsWith(RESOURCE_ADAPTER_IMPL_SUFFIX)){_			_			String providerName =_					adapterClassName.substring(0, adapterClassName.length() - RESOURCE_ADAPTER_IMPL_SUFFIX.length())__			String specClassName = providerName + ACTIVATION_SPEC_IMPL_SUFFIX__			try {_				return adapter.getClass().getClassLoader().loadClass(specClassName)__			}_			catch (ClassNotFoundException ex) {_				logger.debug("No default <Provider>ActivationSpecImpl class found: " + specClassName)__			}_		}__		_		String providerPackage = adapterClassName.substring(0, adapterClassName.lastIndexOf('.') + 1)__		String specClassName = providerPackage + ACTIVATION_SPEC_IMPL_SUFFIX__		try {_			return adapter.getClass().getClassLoader().loadClass(specClassName)__		}_		catch (ClassNotFoundException ex) {_			logger.debug("No default ActivationSpecImpl class found in provider package: " + specClassName)__		}__		_		specClassName = providerPackage + "inbound." + ACTIVATION_SPEC_IMPL_SUFFIX__		try {_			return adapter.getClass().getClassLoader().loadClass(specClassName)__		}_		catch (ClassNotFoundException ex) {_			logger.debug("No default ActivationSpecImpl class found in inbound subpackage: " + specClassName)__		}__		throw new IllegalStateException("No ActivationSpec class defined - " +_				"specify the 'activationSpecClass' property or override the 'determineActivationSpecClass' method")__	};this,implementation,guesses,the,activation,spec,class,name,from,the,provider,s,class,name,e,g,active,mqresource,adapter,active,mqactivation,spec,in,the,same,package,or,a,class,named,activation,spec,impl,in,the,same,package,as,the,resource,adapter,class;override,protected,class,determine,activation,spec,class,resource,adapter,adapter,string,adapter,class,name,adapter,get,class,get,name,if,adapter,class,name,ends,with,string,provider,name,adapter,class,name,substring,0,adapter,class,name,length,length,string,spec,class,name,provider,name,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,provider,activation,spec,class,found,spec,class,name,else,if,adapter,class,name,ends,with,string,provider,name,adapter,class,name,substring,0,adapter,class,name,length,length,string,spec,class,name,provider,name,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,provider,activation,spec,impl,class,found,spec,class,name,string,provider,package,adapter,class,name,substring,0,adapter,class,name,last,index,of,1,string,spec,class,name,provider,package,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,activation,spec,impl,class,found,in,provider,package,spec,class,name,spec,class,name,provider,package,inbound,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,activation,spec,impl,class,found,in,inbound,subpackage,spec,class,name,throw,new,illegal,state,exception,no,activation,spec,class,defined,specify,the,activation,spec,class,property,or,override,the,determine,activation,spec,class,method
DefaultJmsActivationSpecFactory -> @Override 	protected Class<?> determineActivationSpecClass(ResourceAdapter adapter);1530174524;This implementation guesses the ActivationSpec class name from the_provider's class name: e.g. "ActiveMQResourceAdapter" ->_"ActiveMQActivationSpec" in the same package, or a class named_"ActivationSpecImpl" in the same package as the ResourceAdapter class.;@Override_	protected Class<?> determineActivationSpecClass(ResourceAdapter adapter) {_		String adapterClassName = adapter.getClass().getName()___		if (adapterClassName.endsWith(RESOURCE_ADAPTER_SUFFIX)) {_			_			String providerName =_					adapterClassName.substring(0, adapterClassName.length() - RESOURCE_ADAPTER_SUFFIX.length())__			String specClassName = providerName + ACTIVATION_SPEC_SUFFIX__			try {_				return adapter.getClass().getClassLoader().loadClass(specClassName)__			}_			catch (ClassNotFoundException ex) {_				logger.debug("No default <Provider>ActivationSpec class found: " + specClassName)__			}_		}__		else if (adapterClassName.endsWith(RESOURCE_ADAPTER_IMPL_SUFFIX)){_			_			String providerName =_					adapterClassName.substring(0, adapterClassName.length() - RESOURCE_ADAPTER_IMPL_SUFFIX.length())__			String specClassName = providerName + ACTIVATION_SPEC_IMPL_SUFFIX__			try {_				return adapter.getClass().getClassLoader().loadClass(specClassName)__			}_			catch (ClassNotFoundException ex) {_				logger.debug("No default <Provider>ActivationSpecImpl class found: " + specClassName)__			}_		}__		_		String providerPackage = adapterClassName.substring(0, adapterClassName.lastIndexOf('.') + 1)__		String specClassName = providerPackage + ACTIVATION_SPEC_IMPL_SUFFIX__		try {_			return adapter.getClass().getClassLoader().loadClass(specClassName)__		}_		catch (ClassNotFoundException ex) {_			logger.debug("No default ActivationSpecImpl class found in provider package: " + specClassName)__		}__		_		specClassName = providerPackage + "inbound." + ACTIVATION_SPEC_IMPL_SUFFIX__		try {_			return adapter.getClass().getClassLoader().loadClass(specClassName)__		}_		catch (ClassNotFoundException ex) {_			logger.debug("No default ActivationSpecImpl class found in inbound subpackage: " + specClassName)__		}__		throw new IllegalStateException("No ActivationSpec class defined - " +_				"specify the 'activationSpecClass' property or override the 'determineActivationSpecClass' method")__	};this,implementation,guesses,the,activation,spec,class,name,from,the,provider,s,class,name,e,g,active,mqresource,adapter,active,mqactivation,spec,in,the,same,package,or,a,class,named,activation,spec,impl,in,the,same,package,as,the,resource,adapter,class;override,protected,class,determine,activation,spec,class,resource,adapter,adapter,string,adapter,class,name,adapter,get,class,get,name,if,adapter,class,name,ends,with,string,provider,name,adapter,class,name,substring,0,adapter,class,name,length,length,string,spec,class,name,provider,name,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,provider,activation,spec,class,found,spec,class,name,else,if,adapter,class,name,ends,with,string,provider,name,adapter,class,name,substring,0,adapter,class,name,length,length,string,spec,class,name,provider,name,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,provider,activation,spec,impl,class,found,spec,class,name,string,provider,package,adapter,class,name,substring,0,adapter,class,name,last,index,of,1,string,spec,class,name,provider,package,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,activation,spec,impl,class,found,in,provider,package,spec,class,name,spec,class,name,provider,package,inbound,try,return,adapter,get,class,get,class,loader,load,class,spec,class,name,catch,class,not,found,exception,ex,logger,debug,no,default,activation,spec,impl,class,found,in,inbound,subpackage,spec,class,name,throw,new,illegal,state,exception,no,activation,spec,class,defined,specify,the,activation,spec,class,property,or,override,the,determine,activation,spec,class,method
