commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the target ConnectionFactory that this ConnectionFactory should delegate to.  */ ;/**  * Set the target ConnectionFactory that this ConnectionFactory should delegate to.  */ public void setTargetConnectionFactory(@Nullable ConnectionFactory targetConnectionFactory) {     this.targetConnectionFactory = targetConnectionFactory. }
true;public;0;4;/**  * Return the target ConnectionFactory that this ConnectionFactory delegates to.  */ ;/**  * Return the target ConnectionFactory that this ConnectionFactory delegates to.  */ @Nullable public ConnectionFactory getTargetConnectionFactory() {     return this.targetConnectionFactory. }
false;private;0;5;;private ConnectionFactory obtainTargetConnectionFactory() {     ConnectionFactory target = getTargetConnectionFactory().     Assert.state(target != null, "No 'targetConnectionFactory' set").     return target. }
true;public;1;3;/**  * Indicate whether Connections obtained from the target factory are supposed  * to be stopped before closed ("true") or simply closed ("false").  * An extra stop call may be necessary for some connection pools that simply return  * released connections to the pool, not stopping them while they sit in the pool.  * <p>Default is "false", simply closing Connections.  * @see ConnectionFactoryUtils#releaseConnection  */ ;/**  * Indicate whether Connections obtained from the target factory are supposed  * to be stopped before closed ("true") or simply closed ("false").  * An extra stop call may be necessary for some connection pools that simply return  * released connections to the pool, not stopping them while they sit in the pool.  * <p>Default is "false", simply closing Connections.  * @see ConnectionFactoryUtils#releaseConnection  */ public void setShouldStopConnections(boolean shouldStopConnections) {     this.shouldStopConnections = shouldStopConnections. }
false;public;0;6;;@Override public void afterPropertiesSet() {     if (getTargetConnectionFactory() == null) {         throw new IllegalArgumentException("'targetConnectionFactory' is required").     } }
false;public;0;4;;@Override public Connection createConnection() throws JMSException {     return obtainTargetConnectionFactory().createConnection(). }
false;public;2;4;;@Override public Connection createConnection(String username, String password) throws JMSException {     return obtainTargetConnectionFactory().createConnection(username, password). }
false;public;0;14;;@Override public QueueConnection createQueueConnection() throws JMSException {     ConnectionFactory target = obtainTargetConnectionFactory().     if (target instanceof QueueConnectionFactory) {         return ((QueueConnectionFactory) target).createQueueConnection().     } else {         Connection con = target.createConnection().         if (!(con instanceof QueueConnection)) {             throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a QueueConnectionFactory").         }         return (QueueConnection) con.     } }
false;public;2;14;;@Override public QueueConnection createQueueConnection(String username, String password) throws JMSException {     ConnectionFactory target = obtainTargetConnectionFactory().     if (target instanceof QueueConnectionFactory) {         return ((QueueConnectionFactory) target).createQueueConnection(username, password).     } else {         Connection con = target.createConnection(username, password).         if (!(con instanceof QueueConnection)) {             throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a QueueConnectionFactory").         }         return (QueueConnection) con.     } }
false;public;0;14;;@Override public TopicConnection createTopicConnection() throws JMSException {     ConnectionFactory target = obtainTargetConnectionFactory().     if (target instanceof TopicConnectionFactory) {         return ((TopicConnectionFactory) target).createTopicConnection().     } else {         Connection con = target.createConnection().         if (!(con instanceof TopicConnection)) {             throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a TopicConnectionFactory").         }         return (TopicConnection) con.     } }
false;public;2;14;;@Override public TopicConnection createTopicConnection(String username, String password) throws JMSException {     ConnectionFactory target = obtainTargetConnectionFactory().     if (target instanceof TopicConnectionFactory) {         return ((TopicConnectionFactory) target).createTopicConnection(username, password).     } else {         Connection con = target.createConnection(username, password).         if (!(con instanceof TopicConnection)) {             throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a TopicConnectionFactory").         }         return (TopicConnection) con.     } }
false;public;0;4;;@Override public JMSContext createContext() {     return obtainTargetConnectionFactory().createContext(). }
false;public;2;4;;@Override public JMSContext createContext(String userName, String password) {     return obtainTargetConnectionFactory().createContext(userName, password). }
false;public;3;4;;@Override public JMSContext createContext(String userName, String password, int sessionMode) {     return obtainTargetConnectionFactory().createContext(userName, password, sessionMode). }
false;public;1;4;;@Override public JMSContext createContext(int sessionMode) {     return obtainTargetConnectionFactory().createContext(sessionMode). }
false;public;1;4;;@Override public boolean shouldStop(Connection con) {     return this.shouldStopConnections. }
