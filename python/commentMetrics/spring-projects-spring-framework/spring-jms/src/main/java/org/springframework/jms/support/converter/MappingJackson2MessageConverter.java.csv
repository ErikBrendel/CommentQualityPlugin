# id;timestamp;commentText;codeText;commentWords;codeWords
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1356735495;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1367943114;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1368482696;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1395698258;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1417596581;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1450368890;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1452874694;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1458945978;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1467726769;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1467730834;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1473503875;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1477860027;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1495868221;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1496242568;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1496837955;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1497362807;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1498780456;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1530174524;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException;1551113869;Convenience method to dispatch to converters for individual message types.;private Object convertToObject(Message message, JavaType targetJavaType) throws JMSException, IOException {_		if (message instanceof TextMessage) {_			return convertFromTextMessage((TextMessage) message, targetJavaType)__		}_		else if (message instanceof BytesMessage) {_			return convertFromBytesMessage((BytesMessage) message, targetJavaType)__		}_		else {_			return convertFromMessage(message, targetJavaType)__		}_	};convenience,method,to,dispatch,to,converters,for,individual,message,types;private,object,convert,to,object,message,message,java,type,target,java,type,throws,jmsexception,ioexception,if,message,instanceof,text,message,return,convert,from,text,message,text,message,message,target,java,type,else,if,message,instanceof,bytes,message,return,convert,from,bytes,message,bytes,message,message,target,java,type,else,return,convert,from,message,message,target,java,type
MappingJackson2MessageConverter -> @Deprecated 	protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectMapper objectMapper) 			throws JMSException, IOException;1452874694;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectMapper the mapper to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@deprecated as of 4.3, use {@link #mapToBytesMessage(Object, Session, ObjectWriter)};@Deprecated_	protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectMapper objectMapper)_			throws JMSException, IOException {__		return mapToBytesMessage(object, session, objectMapper.writer())__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,mapper,the,mapper,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,deprecated,as,of,4,3,use,link,map,to,bytes,message,object,session,object,writer;deprecated,protected,bytes,message,map,to,bytes,message,object,object,session,session,object,mapper,object,mapper,throws,jmsexception,ioexception,return,map,to,bytes,message,object,session,object,mapper,writer
MappingJackson2MessageConverter -> @Deprecated 	protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectMapper objectMapper) 			throws JMSException, IOException;1458945978;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectMapper the mapper to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@deprecated as of 4.3, use {@link #mapToBytesMessage(Object, Session, ObjectWriter)};@Deprecated_	protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectMapper objectMapper)_			throws JMSException, IOException {__		return mapToBytesMessage(object, session, objectMapper.writer())__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,mapper,the,mapper,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,deprecated,as,of,4,3,use,link,map,to,bytes,message,object,session,object,writer;deprecated,protected,bytes,message,map,to,bytes,message,object,object,session,session,object,mapper,object,mapper,throws,jmsexception,ioexception,return,map,to,bytes,message,object,session,object,mapper,writer
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectMapper objectMapper) 			throws JMSException, IOException;1356735495;Map the given object to a {@link javax.jms.BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectMapper the mapper to use_@return the resulting message_@throws javax.jms.JMSException if thrown by JMS methods_@throws java.io.IOException in case of I/O errors_@see javax.jms.Session#createBytesMessage_@see org.springframework.oxm.Marshaller#marshal(Object, javax.xml.transform.Result);protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectMapper objectMapper)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream()__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectMapper.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,javax,jms,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,mapper,the,mapper,to,use,return,the,resulting,message,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,throws,java,io,ioexception,in,case,of,i,o,errors,see,javax,jms,session,create,bytes,message,see,org,springframework,oxm,marshaller,marshal,object,javax,xml,transform,result;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,mapper,object,mapper,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,mapper,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectMapper objectMapper) 			throws JMSException, IOException;1367943114;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectMapper the mapper to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectMapper objectMapper)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream()__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectMapper.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,mapper,the,mapper,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,mapper,object,mapper,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,mapper,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectMapper objectMapper) 			throws JMSException, IOException;1368482696;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectMapper the mapper to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectMapper objectMapper)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream()__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectMapper.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,mapper,the,mapper,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,mapper,object,mapper,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,mapper,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectMapper objectMapper) 			throws JMSException, IOException;1395698258;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectMapper the mapper to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectMapper objectMapper)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectMapper.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,mapper,the,mapper,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,mapper,object,mapper,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,1024,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,mapper,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectMapper objectMapper) 			throws JMSException, IOException;1417596581;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectMapper the mapper to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectMapper objectMapper)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectMapper.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,mapper,the,mapper,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,mapper,object,mapper,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,1024,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,mapper,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectMapper objectMapper) 			throws JMSException, IOException;1450368890;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectMapper the mapper to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectMapper objectMapper)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectMapper.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,mapper,the,mapper,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,mapper,object,mapper,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,1024,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,mapper,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1452874694;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@since 4.3;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectWriter.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,since,4,3;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,1024,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,writer,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1458945978;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@since 4.3;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectWriter.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,since,4,3;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,1024,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,writer,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1467726769;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@since 4.3_@see Session#createBytesMessage;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectWriter.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,session,create,bytes,message;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,1024,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,writer,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1467730834;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@since 4.3_@see Session#createBytesMessage;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectWriter.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,session,create,bytes,message;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,1024,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,writer,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1473503875;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@since 4.3_@see Session#createBytesMessage;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectWriter.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,session,create,bytes,message;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,1024,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,writer,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1477860027;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@since 4.3_@see Session#createBytesMessage;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectWriter.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,session,create,bytes,message;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,1024,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,writer,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1495868221;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@since 4.3_@see Session#createBytesMessage;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectWriter.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,session,create,bytes,message;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,1024,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,writer,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1496242568;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@since 4.3_@see Session#createBytesMessage;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectWriter.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,session,create,bytes,message;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,1024,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,writer,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1496837955;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@since 4.3_@see Session#createBytesMessage;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectWriter.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,session,create,bytes,message;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,1024,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,writer,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1497362807;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@since 4.3_@see Session#createBytesMessage;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectWriter.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,session,create,bytes,message;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,1024,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,writer,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1498780456;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@since 4.3_@see Session#createBytesMessage;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectWriter.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,session,create,bytes,message;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,1024,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,writer,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1530174524;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@since 4.3_@see Session#createBytesMessage;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)__		OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__		objectWriter.writeValue(writer, object)___		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName, this.encoding)__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,session,create,bytes,message;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,1024,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,writer,write,value,writer,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,return,message
MappingJackson2MessageConverter -> protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1551113869;Map the given object to a {@link BytesMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@since 4.3_@see Session#createBytesMessage;protected BytesMessage mapToBytesMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		ByteArrayOutputStream bos = new ByteArrayOutputStream(1024)__		if (this.encoding != null) {_			OutputStreamWriter writer = new OutputStreamWriter(bos, this.encoding)__			objectWriter.writeValue(writer, object)__		}_		else {_			_			_			objectWriter.writeValue(bos, object)__		}__		BytesMessage message = session.createBytesMessage()__		message.writeBytes(bos.toByteArray())__		if (this.encodingPropertyName != null) {_			message.setStringProperty(this.encodingPropertyName,_					(this.encoding != null ? this.encoding : DEFAULT_ENCODING))__		}_		return message__	};map,the,given,object,to,a,link,bytes,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,session,create,bytes,message;protected,bytes,message,map,to,bytes,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,byte,array,output,stream,bos,new,byte,array,output,stream,1024,if,this,encoding,null,output,stream,writer,writer,new,output,stream,writer,bos,this,encoding,object,writer,write,value,writer,object,else,object,writer,write,value,bos,object,bytes,message,message,session,create,bytes,message,message,write,bytes,bos,to,byte,array,if,this,encoding,property,name,null,message,set,string,property,this,encoding,property,name,this,encoding,null,this,encoding,return,message
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1356735495;Specify whether {@link #toMessage(Object, javax.jms.Session)} should marshal to a_{@link javax.jms.BytesMessage} or a {@link javax.jms.TextMessage}._<p>The default is {@link org.springframework.jms.support.converter.MessageType#BYTES}, i.e. this converter marshals to_a {@link javax.jms.BytesMessage}. Note that the default version of this converter_supports {@link org.springframework.jms.support.converter.MessageType#BYTES} and {@link org.springframework.jms.support.converter.MessageType#TEXT} only._@see org.springframework.jms.support.converter.MessageType#BYTES_@see org.springframework.jms.support.converter.MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,javax,jms,session,should,marshal,to,a,link,javax,jms,bytes,message,or,a,link,javax,jms,text,message,p,the,default,is,link,org,springframework,jms,support,converter,message,type,bytes,i,e,this,converter,marshals,to,a,link,javax,jms,bytes,message,note,that,the,default,version,of,this,converter,supports,link,org,springframework,jms,support,converter,message,type,bytes,and,link,org,springframework,jms,support,converter,message,type,text,only,see,org,springframework,jms,support,converter,message,type,bytes,see,org,springframework,jms,support,converter,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1367943114;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1368482696;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1395698258;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1417596581;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1450368890;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1452874694;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1458945978;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1467726769;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1467730834;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1473503875;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1477860027;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1495868221;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1496242568;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1496837955;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1497362807;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1498780456;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1530174524;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> public void setTargetType(MessageType targetType);1551113869;Specify whether {@link #toMessage(Object, Session)} should marshal to a_{@link BytesMessage} or a {@link TextMessage}._<p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to_a {@link BytesMessage}. Note that the default version of this converter_supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only._@see MessageType#BYTES_@see MessageType#TEXT;public void setTargetType(MessageType targetType) {_		Assert.notNull(targetType, "MessageType must not be null")__		this.targetType = targetType__	};specify,whether,link,to,message,object,session,should,marshal,to,a,link,bytes,message,or,a,link,text,message,p,the,default,is,link,message,type,bytes,i,e,this,converter,marshals,to,a,link,bytes,message,note,that,the,default,version,of,this,converter,supports,link,message,type,bytes,and,link,message,type,text,only,see,message,type,bytes,see,message,type,text;public,void,set,target,type,message,type,target,type,assert,not,null,target,type,message,type,must,not,be,null,this,target,type,target,type
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType) 			throws JMSException, IOException;1452874694;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectWriter the writer to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,writer,the,writer,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,writer,object,writer,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType) 			throws JMSException, IOException;1458945978;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectWriter the writer to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,writer,the,writer,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,writer,object,writer,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType) 			throws JMSException, IOException;1467726769;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectWriter the writer to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,writer,the,writer,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,writer,object,writer,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType) 			throws JMSException, IOException;1467730834;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectWriter the writer to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,writer,the,writer,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,writer,object,writer,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType) 			throws JMSException, IOException;1473503875;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectWriter the writer to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,writer,the,writer,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,writer,object,writer,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType) 			throws JMSException, IOException;1477860027;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectWriter the writer to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,writer,the,writer,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,writer,object,writer,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType) 			throws JMSException, IOException;1495868221;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectWriter the writer to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,writer,the,writer,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,writer,object,writer,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType) 			throws JMSException, IOException;1496242568;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectWriter the writer to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,writer,the,writer,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,writer,object,writer,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType) 			throws JMSException, IOException;1496837955;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectWriter the writer to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,writer,the,writer,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,writer,object,writer,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType) 			throws JMSException, IOException;1497362807;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectWriter the writer to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,writer,the,writer,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,writer,object,writer,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType) 			throws JMSException, IOException;1498780456;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectWriter the writer to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,writer,the,writer,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,writer,object,writer,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType) 			throws JMSException, IOException;1530174524;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectWriter the writer to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,writer,the,writer,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,writer,object,writer,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType) 			throws JMSException, IOException;1551113869;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectWriter the writer to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectWriter objectWriter, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,writer,the,writer,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,writer,object,writer,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> public Message toMessage(Object object, Session session, @Nullable Class<?> jsonView) 			throws JMSException, MessageConversionException;1496837955;Convert a Java object to a JMS Message using the specified json view_and the supplied session  to create the message object._@param object the object to convert_@param session the Session to use for creating a JMS Message_@param jsonView the view to use to filter the content_@return the JMS Message_@throws javax.jms.JMSException if thrown by JMS API methods_@throws MessageConversionException in case of conversion failure_@since 4.3;public Message toMessage(Object object, Session session, @Nullable Class<?> jsonView)_			throws JMSException, MessageConversionException {__		if (jsonView != null) {_			return toMessage(object, session, this.objectMapper.writerWithView(jsonView))__		}_		else {_			return toMessage(object, session, this.objectMapper.writer())__		}_	};convert,a,java,object,to,a,jms,message,using,the,specified,json,view,and,the,supplied,session,to,create,the,message,object,param,object,the,object,to,convert,param,session,the,session,to,use,for,creating,a,jms,message,param,json,view,the,view,to,use,to,filter,the,content,return,the,jms,message,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,throws,message,conversion,exception,in,case,of,conversion,failure,since,4,3;public,message,to,message,object,object,session,session,nullable,class,json,view,throws,jmsexception,message,conversion,exception,if,json,view,null,return,to,message,object,session,this,object,mapper,writer,with,view,json,view,else,return,to,message,object,session,this,object,mapper,writer
MappingJackson2MessageConverter -> public Message toMessage(Object object, Session session, @Nullable Class<?> jsonView) 			throws JMSException, MessageConversionException;1497362807;Convert a Java object to a JMS Message using the specified json view_and the supplied session  to create the message object._@param object the object to convert_@param session the Session to use for creating a JMS Message_@param jsonView the view to use to filter the content_@return the JMS Message_@throws javax.jms.JMSException if thrown by JMS API methods_@throws MessageConversionException in case of conversion failure_@since 4.3;public Message toMessage(Object object, Session session, @Nullable Class<?> jsonView)_			throws JMSException, MessageConversionException {__		if (jsonView != null) {_			return toMessage(object, session, this.objectMapper.writerWithView(jsonView))__		}_		else {_			return toMessage(object, session, this.objectMapper.writer())__		}_	};convert,a,java,object,to,a,jms,message,using,the,specified,json,view,and,the,supplied,session,to,create,the,message,object,param,object,the,object,to,convert,param,session,the,session,to,use,for,creating,a,jms,message,param,json,view,the,view,to,use,to,filter,the,content,return,the,jms,message,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,throws,message,conversion,exception,in,case,of,conversion,failure,since,4,3;public,message,to,message,object,object,session,session,nullable,class,json,view,throws,jmsexception,message,conversion,exception,if,json,view,null,return,to,message,object,session,this,object,mapper,writer,with,view,json,view,else,return,to,message,object,session,this,object,mapper,writer
MappingJackson2MessageConverter -> public Message toMessage(Object object, Session session, @Nullable Class<?> jsonView) 			throws JMSException, MessageConversionException;1498780456;Convert a Java object to a JMS Message using the specified json view_and the supplied session  to create the message object._@param object the object to convert_@param session the Session to use for creating a JMS Message_@param jsonView the view to use to filter the content_@return the JMS Message_@throws javax.jms.JMSException if thrown by JMS API methods_@throws MessageConversionException in case of conversion failure_@since 4.3;public Message toMessage(Object object, Session session, @Nullable Class<?> jsonView)_			throws JMSException, MessageConversionException {__		if (jsonView != null) {_			return toMessage(object, session, this.objectMapper.writerWithView(jsonView))__		}_		else {_			return toMessage(object, session, this.objectMapper.writer())__		}_	};convert,a,java,object,to,a,jms,message,using,the,specified,json,view,and,the,supplied,session,to,create,the,message,object,param,object,the,object,to,convert,param,session,the,session,to,use,for,creating,a,jms,message,param,json,view,the,view,to,use,to,filter,the,content,return,the,jms,message,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,throws,message,conversion,exception,in,case,of,conversion,failure,since,4,3;public,message,to,message,object,object,session,session,nullable,class,json,view,throws,jmsexception,message,conversion,exception,if,json,view,null,return,to,message,object,session,this,object,mapper,writer,with,view,json,view,else,return,to,message,object,session,this,object,mapper,writer
MappingJackson2MessageConverter -> public Message toMessage(Object object, Session session, @Nullable Class<?> jsonView) 			throws JMSException, MessageConversionException;1530174524;Convert a Java object to a JMS Message using the specified json view_and the supplied session  to create the message object._@param object the object to convert_@param session the Session to use for creating a JMS Message_@param jsonView the view to use to filter the content_@return the JMS Message_@throws javax.jms.JMSException if thrown by JMS API methods_@throws MessageConversionException in case of conversion failure_@since 4.3;public Message toMessage(Object object, Session session, @Nullable Class<?> jsonView)_			throws JMSException, MessageConversionException {__		if (jsonView != null) {_			return toMessage(object, session, this.objectMapper.writerWithView(jsonView))__		}_		else {_			return toMessage(object, session, this.objectMapper.writer())__		}_	};convert,a,java,object,to,a,jms,message,using,the,specified,json,view,and,the,supplied,session,to,create,the,message,object,param,object,the,object,to,convert,param,session,the,session,to,use,for,creating,a,jms,message,param,json,view,the,view,to,use,to,filter,the,content,return,the,jms,message,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,throws,message,conversion,exception,in,case,of,conversion,failure,since,4,3;public,message,to,message,object,object,session,session,nullable,class,json,view,throws,jmsexception,message,conversion,exception,if,json,view,null,return,to,message,object,session,this,object,mapper,writer,with,view,json,view,else,return,to,message,object,session,this,object,mapper,writer
MappingJackson2MessageConverter -> public Message toMessage(Object object, Session session, @Nullable Class<?> jsonView) 			throws JMSException, MessageConversionException;1551113869;Convert a Java object to a JMS Message using the specified json view_and the supplied session  to create the message object._@param object the object to convert_@param session the Session to use for creating a JMS Message_@param jsonView the view to use to filter the content_@return the JMS Message_@throws javax.jms.JMSException if thrown by JMS API methods_@throws MessageConversionException in case of conversion failure_@since 4.3;public Message toMessage(Object object, Session session, @Nullable Class<?> jsonView)_			throws JMSException, MessageConversionException {__		if (jsonView != null) {_			return toMessage(object, session, this.objectMapper.writerWithView(jsonView))__		}_		else {_			return toMessage(object, session, this.objectMapper.writer())__		}_	};convert,a,java,object,to,a,jms,message,using,the,specified,json,view,and,the,supplied,session,to,create,the,message,object,param,object,the,object,to,convert,param,session,the,session,to,use,for,creating,a,jms,message,param,json,view,the,view,to,use,to,filter,the,content,return,the,jms,message,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,throws,message,conversion,exception,in,case,of,conversion,failure,since,4,3;public,message,to,message,object,object,session,session,nullable,class,json,view,throws,jmsexception,message,conversion,exception,if,json,view,null,return,to,message,object,session,this,object,mapper,writer,with,view,json,view,else,return,to,message,object,session,this,object,mapper,writer
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1356735495;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws javax.jms.JMSException if thrown by JMS_@throws java.io.IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,javax,jms,jmsexception,if,thrown,by,jms,throws,java,io,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1367943114;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1368482696;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1395698258;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1417596581;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1450368890;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1452874694;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1458945978;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1467726769;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1467730834;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1473503875;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1477860027;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1495868221;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1496242568;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1496837955;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1497362807;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1498780456;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1530174524;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		try {_			String body = new String(bytes, encoding)__			return this.objectMapper.readValue(body, targetJavaType)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessageConversionException("Cannot convert bytes to String", ex)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex
MappingJackson2MessageConverter -> protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1551113869;Convert a BytesMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromBytesMessage(BytesMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String encoding = this.encoding__		if (this.encodingPropertyName != null && message.propertyExists(this.encodingPropertyName)) {_			encoding = message.getStringProperty(this.encodingPropertyName)__		}_		byte[] bytes = new byte[(int) message.getBodyLength()]__		message.readBytes(bytes)__		if (encoding != null) {_			try {_				String body = new String(bytes, encoding)__				return this.objectMapper.readValue(body, targetJavaType)__			}_			catch (UnsupportedEncodingException ex) {_				throw new MessageConversionException("Cannot convert bytes to String", ex)__			}_		}_		else {_			_			return this.objectMapper.readValue(bytes, targetJavaType)__		}_	};convert,a,bytes,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,bytes,message,bytes,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,encoding,this,encoding,if,this,encoding,property,name,null,message,property,exists,this,encoding,property,name,encoding,message,get,string,property,this,encoding,property,name,byte,bytes,new,byte,int,message,get,body,length,message,read,bytes,bytes,if,encoding,null,try,string,body,new,string,bytes,encoding,return,this,object,mapper,read,value,body,target,java,type,catch,unsupported,encoding,exception,ex,throw,new,message,conversion,exception,cannot,convert,bytes,to,string,ex,else,return,this,object,mapper,read,value,bytes,target,java,type
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1356735495;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1367943114;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1368482696;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1395698258;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1417596581;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1450368890;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1452874694;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1458945978;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1467726769;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1467730834;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1473503875;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1477860027;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1495868221;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1496242568;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1496837955;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1497362807;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1498780456;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1530174524;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> public void setTypeIdPropertyName(String typeIdPropertyName);1551113869;Specify the name of the JMS message property that carries the type id for the_contained object: either a mapped id value or a raw Java class name._<p>Default is none. <b>NOTE: This property needs to be set in order to allow_for converting from an incoming message to a Java object.</b>_@see #setTypeIdMappings;public void setTypeIdPropertyName(String typeIdPropertyName) {_		this.typeIdPropertyName = typeIdPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,type,id,for,the,contained,object,either,a,mapped,id,value,or,a,raw,java,class,name,p,default,is,none,b,note,this,property,needs,to,be,set,in,order,to,allow,for,converting,from,an,incoming,message,to,a,java,object,b,see,set,type,id,mappings;public,void,set,type,id,property,name,string,type,id,property,name,this,type,id,property,name,type,id,property,name
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1356735495;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws javax.jms.JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException("Could not find type id property [" + this.typeIdPropertyName + "]")__		}_		Class mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			return this.objectMapper.getTypeFactory().constructType(_					ClassUtils.forName(typeId, getClass().getClassLoader()))__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,return,this,object,mapper,get,type,factory,construct,type,class,utils,for,name,type,id,get,class,get,class,loader,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1367943114;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException("Could not find type id property [" + this.typeIdPropertyName + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1368482696;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException("Could not find type id property [" + this.typeIdPropertyName + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1395698258;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException("Could not find type id property [" + this.typeIdPropertyName + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1417596581;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException("Could not find type id property [" + this.typeIdPropertyName + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1450368890;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException("Could not find type id property [" + this.typeIdPropertyName + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1452874694;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException("Could not find type id property [" + this.typeIdPropertyName + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1458945978;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException("Could not find type id property [" + this.typeIdPropertyName + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1467726769;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException("Could not find type id property [" + this.typeIdPropertyName + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1467730834;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException("Could not find type id property [" + this.typeIdPropertyName + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1473503875;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException(_					"Could not find type id property [" + this.typeIdPropertyName + "] on message [" +_					message.getJMSMessageID() + "] from destination [" + message.getJMSDestination() + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,on,message,message,get,jmsmessage,id,from,destination,message,get,jmsdestination,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1477860027;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException(_					"Could not find type id property [" + this.typeIdPropertyName + "] on message [" +_					message.getJMSMessageID() + "] from destination [" + message.getJMSDestination() + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,on,message,message,get,jmsmessage,id,from,destination,message,get,jmsdestination,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1495868221;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException(_					"Could not find type id property [" + this.typeIdPropertyName + "] on message [" +_					message.getJMSMessageID() + "] from destination [" + message.getJMSDestination() + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,on,message,message,get,jmsmessage,id,from,destination,message,get,jmsdestination,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1496242568;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException(_					"Could not find type id property [" + this.typeIdPropertyName + "] on message [" +_					message.getJMSMessageID() + "] from destination [" + message.getJMSDestination() + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,on,message,message,get,jmsmessage,id,from,destination,message,get,jmsdestination,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1496837955;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException(_					"Could not find type id property [" + this.typeIdPropertyName + "] on message [" +_					message.getJMSMessageID() + "] from destination [" + message.getJMSDestination() + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,on,message,message,get,jmsmessage,id,from,destination,message,get,jmsdestination,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1497362807;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException(_					"Could not find type id property [" + this.typeIdPropertyName + "] on message [" +_					message.getJMSMessageID() + "] from destination [" + message.getJMSDestination() + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,on,message,message,get,jmsmessage,id,from,destination,message,get,jmsdestination,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1498780456;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException(_					"Could not find type id property [" + this.typeIdPropertyName + "] on message [" +_					message.getJMSMessageID() + "] from destination [" + message.getJMSDestination() + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,on,message,message,get,jmsmessage,id,from,destination,message,get,jmsdestination,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1530174524;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException(_					"Could not find type id property [" + this.typeIdPropertyName + "] on message [" +_					message.getJMSMessageID() + "] from destination [" + message.getJMSDestination() + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,on,message,message,get,jmsmessage,id,from,destination,message,get,jmsdestination,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> protected JavaType getJavaTypeForMessage(Message message) throws JMSException;1551113869;Determine a Jackson JavaType for the given JMS Message,_typically parsing a type id message property._<p>The default implementation parses the configured type id property name_and consults the configured type id mapping. This can be overridden with_a different strategy, e.g. doing some heuristics based on message origin._@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #setTypeIdOnMessage(Object, javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected JavaType getJavaTypeForMessage(Message message) throws JMSException {_		String typeId = message.getStringProperty(this.typeIdPropertyName)__		if (typeId == null) {_			throw new MessageConversionException(_					"Could not find type id property [" + this.typeIdPropertyName + "] on message [" +_					message.getJMSMessageID() + "] from destination [" + message.getJMSDestination() + "]")__		}_		Class<?> mappedClass = this.idClassMappings.get(typeId)__		if (mappedClass != null) {_			return this.objectMapper.getTypeFactory().constructType(mappedClass)__		}_		try {_			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader)__			return this.objectMapper.getTypeFactory().constructType(typeClass)__		}_		catch (Throwable ex) {_			throw new MessageConversionException("Failed to resolve type id [" + typeId + "]", ex)__		}_	};determine,a,jackson,java,type,for,the,given,jms,message,typically,parsing,a,type,id,message,property,p,the,default,implementation,parses,the,configured,type,id,property,name,and,consults,the,configured,type,id,mapping,this,can,be,overridden,with,a,different,strategy,e,g,doing,some,heuristics,based,on,message,origin,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,set,type,id,on,message,object,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,java,type,get,java,type,for,message,message,message,throws,jmsexception,string,type,id,message,get,string,property,this,type,id,property,name,if,type,id,null,throw,new,message,conversion,exception,could,not,find,type,id,property,this,type,id,property,name,on,message,message,get,jmsmessage,id,from,destination,message,get,jmsdestination,class,mapped,class,this,id,class,mappings,get,type,id,if,mapped,class,null,return,this,object,mapper,get,type,factory,construct,type,mapped,class,try,class,type,class,class,utils,for,name,type,id,this,bean,class,loader,return,this,object,mapper,get,type,factory,construct,type,type,class,catch,throwable,ex,throw,new,message,conversion,exception,failed,to,resolve,type,id,type,id,ex
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(@Nullable Object conversionHint);1496837955;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none;@Nullable_	protected Class<?> getSerializationView(@Nullable Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter methodParam = (MethodParameter) conversionHint__			JsonView annotation = methodParam.getParameterAnnotation(JsonView.class)__			if (annotation == null) {_				annotation = methodParam.getMethodAnnotation(JsonView.class)__				if (annotation == null) {_					return null__				}_			}_			return extractViewClass(annotation, conversionHint)__		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}_		else {_			return null__		}_	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none;nullable,protected,class,get,serialization,view,nullable,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,method,param,method,parameter,conversion,hint,json,view,annotation,method,param,get,parameter,annotation,json,view,class,if,annotation,null,annotation,method,param,get,method,annotation,json,view,class,if,annotation,null,return,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,else,return,null
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(@Nullable Object conversionHint);1497362807;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none;@Nullable_	protected Class<?> getSerializationView(@Nullable Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter methodParam = (MethodParameter) conversionHint__			JsonView annotation = methodParam.getParameterAnnotation(JsonView.class)__			if (annotation == null) {_				annotation = methodParam.getMethodAnnotation(JsonView.class)__				if (annotation == null) {_					return null__				}_			}_			return extractViewClass(annotation, conversionHint)__		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}_		else {_			return null__		}_	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none;nullable,protected,class,get,serialization,view,nullable,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,method,param,method,parameter,conversion,hint,json,view,annotation,method,param,get,parameter,annotation,json,view,class,if,annotation,null,annotation,method,param,get,method,annotation,json,view,class,if,annotation,null,return,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,else,return,null
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(@Nullable Object conversionHint);1498780456;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none;@Nullable_	protected Class<?> getSerializationView(@Nullable Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter methodParam = (MethodParameter) conversionHint__			JsonView annotation = methodParam.getParameterAnnotation(JsonView.class)__			if (annotation == null) {_				annotation = methodParam.getMethodAnnotation(JsonView.class)__				if (annotation == null) {_					return null__				}_			}_			return extractViewClass(annotation, conversionHint)__		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}_		else {_			return null__		}_	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none;nullable,protected,class,get,serialization,view,nullable,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,method,param,method,parameter,conversion,hint,json,view,annotation,method,param,get,parameter,annotation,json,view,class,if,annotation,null,annotation,method,param,get,method,annotation,json,view,class,if,annotation,null,return,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,else,return,null
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(@Nullable Object conversionHint);1530174524;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none;@Nullable_	protected Class<?> getSerializationView(@Nullable Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter methodParam = (MethodParameter) conversionHint__			JsonView annotation = methodParam.getParameterAnnotation(JsonView.class)__			if (annotation == null) {_				annotation = methodParam.getMethodAnnotation(JsonView.class)__				if (annotation == null) {_					return null__				}_			}_			return extractViewClass(annotation, conversionHint)__		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}_		else {_			return null__		}_	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none;nullable,protected,class,get,serialization,view,nullable,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,method,param,method,parameter,conversion,hint,json,view,annotation,method,param,get,parameter,annotation,json,view,class,if,annotation,null,annotation,method,param,get,method,annotation,json,view,class,if,annotation,null,return,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,else,return,null
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(@Nullable Object conversionHint);1551113869;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none;@Nullable_	protected Class<?> getSerializationView(@Nullable Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter methodParam = (MethodParameter) conversionHint__			JsonView annotation = methodParam.getParameterAnnotation(JsonView.class)__			if (annotation == null) {_				annotation = methodParam.getMethodAnnotation(JsonView.class)__				if (annotation == null) {_					return null__				}_			}_			return extractViewClass(annotation, conversionHint)__		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}_		else {_			return null__		}_	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none;nullable,protected,class,get,serialization,view,nullable,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,method,param,method,parameter,conversion,hint,json,view,annotation,method,param,get,parameter,annotation,json,view,class,if,annotation,null,annotation,method,param,get,method,annotation,json,view,class,if,annotation,null,return,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,else,return,null
MappingJackson2MessageConverter -> @Deprecated 	protected Message mapToMessage(Object object, Session session, ObjectMapper objectMapper, MessageType targetType) 			throws JMSException, IOException;1452874694;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectMapper the mapper to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@deprecated as of 4.3, use {@link #mapToMessage(Object, Session, ObjectWriter, MessageType)};@Deprecated_	protected Message mapToMessage(Object object, Session session, ObjectMapper objectMapper, MessageType targetType)_			throws JMSException, IOException {__		return mapToMessage(object, session, objectMapper.writer(), targetType)__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,mapper,the,mapper,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,deprecated,as,of,4,3,use,link,map,to,message,object,session,object,writer,message,type;deprecated,protected,message,map,to,message,object,object,session,session,object,mapper,object,mapper,message,type,target,type,throws,jmsexception,ioexception,return,map,to,message,object,session,object,mapper,writer,target,type
MappingJackson2MessageConverter -> @Deprecated 	protected Message mapToMessage(Object object, Session session, ObjectMapper objectMapper, MessageType targetType) 			throws JMSException, IOException;1458945978;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectMapper the mapper to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@deprecated as of 4.3, use {@link #mapToMessage(Object, Session, ObjectWriter, MessageType)};@Deprecated_	protected Message mapToMessage(Object object, Session session, ObjectMapper objectMapper, MessageType targetType)_			throws JMSException, IOException {__		return mapToMessage(object, session, objectMapper.writer(), targetType)__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,mapper,the,mapper,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,deprecated,as,of,4,3,use,link,map,to,message,object,session,object,writer,message,type;deprecated,protected,message,map,to,message,object,object,session,session,object,mapper,object,mapper,message,type,target,type,throws,jmsexception,ioexception,return,map,to,message,object,session,object,mapper,writer,target,type
MappingJackson2MessageConverter -> protected Class<?> getSerializationView(Object conversionHint);1452874694;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none;protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter methodParam = (MethodParameter) conversionHint__			JsonView annotation = methodParam.getParameterAnnotation(JsonView.class)__			if (annotation == null) {_				annotation = methodParam.getMethodAnnotation(JsonView.class)__				if (annotation == null) {_					return null__				}_			}_			return extractViewClass(annotation, conversionHint)__		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class) conversionHint__		}_		else {_			return null__		}_	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none;protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,method,param,method,parameter,conversion,hint,json,view,annotation,method,param,get,parameter,annotation,json,view,class,if,annotation,null,annotation,method,param,get,method,annotation,json,view,class,if,annotation,null,return,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,else,return,null
MappingJackson2MessageConverter -> protected Class<?> getSerializationView(Object conversionHint);1458945978;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none;protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter methodParam = (MethodParameter) conversionHint__			JsonView annotation = methodParam.getParameterAnnotation(JsonView.class)__			if (annotation == null) {_				annotation = methodParam.getMethodAnnotation(JsonView.class)__				if (annotation == null) {_					return null__				}_			}_			return extractViewClass(annotation, conversionHint)__		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class) conversionHint__		}_		else {_			return null__		}_	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none;protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,method,param,method,parameter,conversion,hint,json,view,annotation,method,param,get,parameter,annotation,json,view,class,if,annotation,null,annotation,method,param,get,method,annotation,json,view,class,if,annotation,null,return,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,else,return,null
MappingJackson2MessageConverter -> protected Class<?> getSerializationView(Object conversionHint);1467726769;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none;protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter methodParam = (MethodParameter) conversionHint__			JsonView annotation = methodParam.getParameterAnnotation(JsonView.class)__			if (annotation == null) {_				annotation = methodParam.getMethodAnnotation(JsonView.class)__				if (annotation == null) {_					return null__				}_			}_			return extractViewClass(annotation, conversionHint)__		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class) conversionHint__		}_		else {_			return null__		}_	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none;protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,method,param,method,parameter,conversion,hint,json,view,annotation,method,param,get,parameter,annotation,json,view,class,if,annotation,null,annotation,method,param,get,method,annotation,json,view,class,if,annotation,null,return,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,else,return,null
MappingJackson2MessageConverter -> protected Class<?> getSerializationView(Object conversionHint);1467730834;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none;protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter methodParam = (MethodParameter) conversionHint__			JsonView annotation = methodParam.getParameterAnnotation(JsonView.class)__			if (annotation == null) {_				annotation = methodParam.getMethodAnnotation(JsonView.class)__				if (annotation == null) {_					return null__				}_			}_			return extractViewClass(annotation, conversionHint)__		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class) conversionHint__		}_		else {_			return null__		}_	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none;protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,method,param,method,parameter,conversion,hint,json,view,annotation,method,param,get,parameter,annotation,json,view,class,if,annotation,null,annotation,method,param,get,method,annotation,json,view,class,if,annotation,null,return,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,else,return,null
MappingJackson2MessageConverter -> protected Class<?> getSerializationView(Object conversionHint);1473503875;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none;protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter methodParam = (MethodParameter) conversionHint__			JsonView annotation = methodParam.getParameterAnnotation(JsonView.class)__			if (annotation == null) {_				annotation = methodParam.getMethodAnnotation(JsonView.class)__				if (annotation == null) {_					return null__				}_			}_			return extractViewClass(annotation, conversionHint)__		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class) conversionHint__		}_		else {_			return null__		}_	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none;protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,method,param,method,parameter,conversion,hint,json,view,annotation,method,param,get,parameter,annotation,json,view,class,if,annotation,null,annotation,method,param,get,method,annotation,json,view,class,if,annotation,null,return,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,else,return,null
MappingJackson2MessageConverter -> protected Class<?> getSerializationView(Object conversionHint);1477860027;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none;protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter methodParam = (MethodParameter) conversionHint__			JsonView annotation = methodParam.getParameterAnnotation(JsonView.class)__			if (annotation == null) {_				annotation = methodParam.getMethodAnnotation(JsonView.class)__				if (annotation == null) {_					return null__				}_			}_			return extractViewClass(annotation, conversionHint)__		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}_		else {_			return null__		}_	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none;protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,method,param,method,parameter,conversion,hint,json,view,annotation,method,param,get,parameter,annotation,json,view,class,if,annotation,null,annotation,method,param,get,method,annotation,json,view,class,if,annotation,null,return,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,else,return,null
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1356735495;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws javax.jms.JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1367943114;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1368482696;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1395698258;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1417596581;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1450368890;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1452874694;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1458945978;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1467726769;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1467730834;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1473503875;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1477860027;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1495868221;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1496242568;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1496837955;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1497362807;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1498780456;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1530174524;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> protected void setTypeIdOnMessage(Object object, Message message) throws JMSException;1551113869;Set a type id for the given payload object on the given JMS Message._<p>The default implementation consults the configured type id mapping and_sets the resulting value (either a mapped id or the raw Java class name)_into the configured type id message property._@param object the payload object to set a type id for_@param message the JMS Message to set the type id on_@throws JMSException if thrown by JMS methods_@see #getJavaTypeForMessage(javax.jms.Message)_@see #setTypeIdPropertyName(String)_@see #setTypeIdMappings(java.util.Map);protected void setTypeIdOnMessage(Object object, Message message) throws JMSException {_		if (this.typeIdPropertyName != null) {_			String typeId = this.classIdMappings.get(object.getClass())__			if (typeId == null) {_				typeId = object.getClass().getName()__			}_			message.setStringProperty(this.typeIdPropertyName, typeId)__		}_	};set,a,type,id,for,the,given,payload,object,on,the,given,jms,message,p,the,default,implementation,consults,the,configured,type,id,mapping,and,sets,the,resulting,value,either,a,mapped,id,or,the,raw,java,class,name,into,the,configured,type,id,message,property,param,object,the,payload,object,to,set,a,type,id,for,param,message,the,jms,message,to,set,the,type,id,on,throws,jmsexception,if,thrown,by,jms,methods,see,get,java,type,for,message,javax,jms,message,see,set,type,id,property,name,string,see,set,type,id,mappings,java,util,map;protected,void,set,type,id,on,message,object,object,message,message,throws,jmsexception,if,this,type,id,property,name,null,string,type,id,this,class,id,mappings,get,object,get,class,if,type,id,null,type,id,object,get,class,get,name,message,set,string,property,this,type,id,property,name,type,id
MappingJackson2MessageConverter -> public Message toMessage(Object object, Session session, Class<?> jsonView) 			throws JMSException, MessageConversionException;1452874694;Convert a Java object to a JMS Message using the specified json view_and the supplied session  to create the message object._@param object the object to convert_@param session the Session to use for creating a JMS Message_@param jsonView the view to use to filter the content_@return the JMS Message_@throws javax.jms.JMSException if thrown by JMS API methods_@throws MessageConversionException in case of conversion failure_@since 4.3;public Message toMessage(Object object, Session session, Class<?> jsonView)_			throws JMSException, MessageConversionException {_		if (jsonView != null) {_			return toMessage(object, session, this.objectMapper.writerWithView(jsonView))__		}_		else {_			return toMessage(object, session, this.objectMapper.writer())__		}_	};convert,a,java,object,to,a,jms,message,using,the,specified,json,view,and,the,supplied,session,to,create,the,message,object,param,object,the,object,to,convert,param,session,the,session,to,use,for,creating,a,jms,message,param,json,view,the,view,to,use,to,filter,the,content,return,the,jms,message,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,throws,message,conversion,exception,in,case,of,conversion,failure,since,4,3;public,message,to,message,object,object,session,session,class,json,view,throws,jmsexception,message,conversion,exception,if,json,view,null,return,to,message,object,session,this,object,mapper,writer,with,view,json,view,else,return,to,message,object,session,this,object,mapper,writer
MappingJackson2MessageConverter -> public Message toMessage(Object object, Session session, Class<?> jsonView) 			throws JMSException, MessageConversionException;1458945978;Convert a Java object to a JMS Message using the specified json view_and the supplied session  to create the message object._@param object the object to convert_@param session the Session to use for creating a JMS Message_@param jsonView the view to use to filter the content_@return the JMS Message_@throws javax.jms.JMSException if thrown by JMS API methods_@throws MessageConversionException in case of conversion failure_@since 4.3;public Message toMessage(Object object, Session session, Class<?> jsonView)_			throws JMSException, MessageConversionException {__		if (jsonView != null) {_			return toMessage(object, session, this.objectMapper.writerWithView(jsonView))__		}_		else {_			return toMessage(object, session, this.objectMapper.writer())__		}_	};convert,a,java,object,to,a,jms,message,using,the,specified,json,view,and,the,supplied,session,to,create,the,message,object,param,object,the,object,to,convert,param,session,the,session,to,use,for,creating,a,jms,message,param,json,view,the,view,to,use,to,filter,the,content,return,the,jms,message,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,throws,message,conversion,exception,in,case,of,conversion,failure,since,4,3;public,message,to,message,object,object,session,session,class,json,view,throws,jmsexception,message,conversion,exception,if,json,view,null,return,to,message,object,session,this,object,mapper,writer,with,view,json,view,else,return,to,message,object,session,this,object,mapper,writer
MappingJackson2MessageConverter -> public Message toMessage(Object object, Session session, Class<?> jsonView) 			throws JMSException, MessageConversionException;1467726769;Convert a Java object to a JMS Message using the specified json view_and the supplied session  to create the message object._@param object the object to convert_@param session the Session to use for creating a JMS Message_@param jsonView the view to use to filter the content_@return the JMS Message_@throws javax.jms.JMSException if thrown by JMS API methods_@throws MessageConversionException in case of conversion failure_@since 4.3;public Message toMessage(Object object, Session session, Class<?> jsonView)_			throws JMSException, MessageConversionException {__		if (jsonView != null) {_			return toMessage(object, session, this.objectMapper.writerWithView(jsonView))__		}_		else {_			return toMessage(object, session, this.objectMapper.writer())__		}_	};convert,a,java,object,to,a,jms,message,using,the,specified,json,view,and,the,supplied,session,to,create,the,message,object,param,object,the,object,to,convert,param,session,the,session,to,use,for,creating,a,jms,message,param,json,view,the,view,to,use,to,filter,the,content,return,the,jms,message,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,throws,message,conversion,exception,in,case,of,conversion,failure,since,4,3;public,message,to,message,object,object,session,session,class,json,view,throws,jmsexception,message,conversion,exception,if,json,view,null,return,to,message,object,session,this,object,mapper,writer,with,view,json,view,else,return,to,message,object,session,this,object,mapper,writer
MappingJackson2MessageConverter -> public Message toMessage(Object object, Session session, Class<?> jsonView) 			throws JMSException, MessageConversionException;1467730834;Convert a Java object to a JMS Message using the specified json view_and the supplied session  to create the message object._@param object the object to convert_@param session the Session to use for creating a JMS Message_@param jsonView the view to use to filter the content_@return the JMS Message_@throws javax.jms.JMSException if thrown by JMS API methods_@throws MessageConversionException in case of conversion failure_@since 4.3;public Message toMessage(Object object, Session session, Class<?> jsonView)_			throws JMSException, MessageConversionException {__		if (jsonView != null) {_			return toMessage(object, session, this.objectMapper.writerWithView(jsonView))__		}_		else {_			return toMessage(object, session, this.objectMapper.writer())__		}_	};convert,a,java,object,to,a,jms,message,using,the,specified,json,view,and,the,supplied,session,to,create,the,message,object,param,object,the,object,to,convert,param,session,the,session,to,use,for,creating,a,jms,message,param,json,view,the,view,to,use,to,filter,the,content,return,the,jms,message,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,throws,message,conversion,exception,in,case,of,conversion,failure,since,4,3;public,message,to,message,object,object,session,session,class,json,view,throws,jmsexception,message,conversion,exception,if,json,view,null,return,to,message,object,session,this,object,mapper,writer,with,view,json,view,else,return,to,message,object,session,this,object,mapper,writer
MappingJackson2MessageConverter -> public Message toMessage(Object object, Session session, Class<?> jsonView) 			throws JMSException, MessageConversionException;1473503875;Convert a Java object to a JMS Message using the specified json view_and the supplied session  to create the message object._@param object the object to convert_@param session the Session to use for creating a JMS Message_@param jsonView the view to use to filter the content_@return the JMS Message_@throws javax.jms.JMSException if thrown by JMS API methods_@throws MessageConversionException in case of conversion failure_@since 4.3;public Message toMessage(Object object, Session session, Class<?> jsonView)_			throws JMSException, MessageConversionException {__		if (jsonView != null) {_			return toMessage(object, session, this.objectMapper.writerWithView(jsonView))__		}_		else {_			return toMessage(object, session, this.objectMapper.writer())__		}_	};convert,a,java,object,to,a,jms,message,using,the,specified,json,view,and,the,supplied,session,to,create,the,message,object,param,object,the,object,to,convert,param,session,the,session,to,use,for,creating,a,jms,message,param,json,view,the,view,to,use,to,filter,the,content,return,the,jms,message,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,throws,message,conversion,exception,in,case,of,conversion,failure,since,4,3;public,message,to,message,object,object,session,session,class,json,view,throws,jmsexception,message,conversion,exception,if,json,view,null,return,to,message,object,session,this,object,mapper,writer,with,view,json,view,else,return,to,message,object,session,this,object,mapper,writer
MappingJackson2MessageConverter -> public Message toMessage(Object object, Session session, Class<?> jsonView) 			throws JMSException, MessageConversionException;1477860027;Convert a Java object to a JMS Message using the specified json view_and the supplied session  to create the message object._@param object the object to convert_@param session the Session to use for creating a JMS Message_@param jsonView the view to use to filter the content_@return the JMS Message_@throws javax.jms.JMSException if thrown by JMS API methods_@throws MessageConversionException in case of conversion failure_@since 4.3;public Message toMessage(Object object, Session session, Class<?> jsonView)_			throws JMSException, MessageConversionException {__		if (jsonView != null) {_			return toMessage(object, session, this.objectMapper.writerWithView(jsonView))__		}_		else {_			return toMessage(object, session, this.objectMapper.writer())__		}_	};convert,a,java,object,to,a,jms,message,using,the,specified,json,view,and,the,supplied,session,to,create,the,message,object,param,object,the,object,to,convert,param,session,the,session,to,use,for,creating,a,jms,message,param,json,view,the,view,to,use,to,filter,the,content,return,the,jms,message,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,throws,message,conversion,exception,in,case,of,conversion,failure,since,4,3;public,message,to,message,object,object,session,session,class,json,view,throws,jmsexception,message,conversion,exception,if,json,view,null,return,to,message,object,session,this,object,mapper,writer,with,view,json,view,else,return,to,message,object,session,this,object,mapper,writer
MappingJackson2MessageConverter -> public Message toMessage(Object object, Session session, Class<?> jsonView) 			throws JMSException, MessageConversionException;1495868221;Convert a Java object to a JMS Message using the specified json view_and the supplied session  to create the message object._@param object the object to convert_@param session the Session to use for creating a JMS Message_@param jsonView the view to use to filter the content_@return the JMS Message_@throws javax.jms.JMSException if thrown by JMS API methods_@throws MessageConversionException in case of conversion failure_@since 4.3;public Message toMessage(Object object, Session session, Class<?> jsonView)_			throws JMSException, MessageConversionException {__		if (jsonView != null) {_			return toMessage(object, session, this.objectMapper.writerWithView(jsonView))__		}_		else {_			return toMessage(object, session, this.objectMapper.writer())__		}_	};convert,a,java,object,to,a,jms,message,using,the,specified,json,view,and,the,supplied,session,to,create,the,message,object,param,object,the,object,to,convert,param,session,the,session,to,use,for,creating,a,jms,message,param,json,view,the,view,to,use,to,filter,the,content,return,the,jms,message,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,throws,message,conversion,exception,in,case,of,conversion,failure,since,4,3;public,message,to,message,object,object,session,session,class,json,view,throws,jmsexception,message,conversion,exception,if,json,view,null,return,to,message,object,session,this,object,mapper,writer,with,view,json,view,else,return,to,message,object,session,this,object,mapper,writer
MappingJackson2MessageConverter -> public Message toMessage(Object object, Session session, Class<?> jsonView) 			throws JMSException, MessageConversionException;1496242568;Convert a Java object to a JMS Message using the specified json view_and the supplied session  to create the message object._@param object the object to convert_@param session the Session to use for creating a JMS Message_@param jsonView the view to use to filter the content_@return the JMS Message_@throws javax.jms.JMSException if thrown by JMS API methods_@throws MessageConversionException in case of conversion failure_@since 4.3;public Message toMessage(Object object, Session session, Class<?> jsonView)_			throws JMSException, MessageConversionException {__		if (jsonView != null) {_			return toMessage(object, session, this.objectMapper.writerWithView(jsonView))__		}_		else {_			return toMessage(object, session, this.objectMapper.writer())__		}_	};convert,a,java,object,to,a,jms,message,using,the,specified,json,view,and,the,supplied,session,to,create,the,message,object,param,object,the,object,to,convert,param,session,the,session,to,use,for,creating,a,jms,message,param,json,view,the,view,to,use,to,filter,the,content,return,the,jms,message,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,throws,message,conversion,exception,in,case,of,conversion,failure,since,4,3;public,message,to,message,object,object,session,session,class,json,view,throws,jmsexception,message,conversion,exception,if,json,view,null,return,to,message,object,session,this,object,mapper,writer,with,view,json,view,else,return,to,message,object,session,this,object,mapper,writer
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1356735495;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<String, Class<?>>()__		for (Map.Entry<String, Class<?>> entry : typeIdMappings.entrySet()) {_			String id = entry.getKey()__			Class<?> clazz = entry.getValue()__			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		}_	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,string,class,for,map,entry,string,class,entry,type,id,mappings,entry,set,string,id,entry,get,key,class,clazz,entry,get,value,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1367943114;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<String, Class<?>>()__		for (Map.Entry<String, Class<?>> entry : typeIdMappings.entrySet()) {_			String id = entry.getKey()__			Class<?> clazz = entry.getValue()__			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		}_	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,string,class,for,map,entry,string,class,entry,type,id,mappings,entry,set,string,id,entry,get,key,class,clazz,entry,get,value,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1368482696;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<String, Class<?>>()__		for (Map.Entry<String, Class<?>> entry : typeIdMappings.entrySet()) {_			String id = entry.getKey()__			Class<?> clazz = entry.getValue()__			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		}_	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,string,class,for,map,entry,string,class,entry,type,id,mappings,entry,set,string,id,entry,get,key,class,clazz,entry,get,value,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1395698258;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<String, Class<?>>()__		for (Map.Entry<String, Class<?>> entry : typeIdMappings.entrySet()) {_			String id = entry.getKey()__			Class<?> clazz = entry.getValue()__			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		}_	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,string,class,for,map,entry,string,class,entry,type,id,mappings,entry,set,string,id,entry,get,key,class,clazz,entry,get,value,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1417596581;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<String, Class<?>>()__		for (Map.Entry<String, Class<?>> entry : typeIdMappings.entrySet()) {_			String id = entry.getKey()__			Class<?> clazz = entry.getValue()__			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		}_	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,string,class,for,map,entry,string,class,entry,type,id,mappings,entry,set,string,id,entry,get,key,class,clazz,entry,get,value,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1450368890;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<String, Class<?>>()__		for (Map.Entry<String, Class<?>> entry : typeIdMappings.entrySet()) {_			String id = entry.getKey()__			Class<?> clazz = entry.getValue()__			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		}_	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,string,class,for,map,entry,string,class,entry,type,id,mappings,entry,set,string,id,entry,get,key,class,clazz,entry,get,value,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1452874694;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<String, Class<?>>()__		for (Map.Entry<String, Class<?>> entry : typeIdMappings.entrySet()) {_			String id = entry.getKey()__			Class<?> clazz = entry.getValue()__			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		}_	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,string,class,for,map,entry,string,class,entry,type,id,mappings,entry,set,string,id,entry,get,key,class,clazz,entry,get,value,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1458945978;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<String, Class<?>>()__		for (Map.Entry<String, Class<?>> entry : typeIdMappings.entrySet()) {_			String id = entry.getKey()__			Class<?> clazz = entry.getValue()__			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		}_	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,string,class,for,map,entry,string,class,entry,type,id,mappings,entry,set,string,id,entry,get,key,class,clazz,entry,get,value,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1467726769;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<String, Class<?>>()__		for (Map.Entry<String, Class<?>> entry : typeIdMappings.entrySet()) {_			String id = entry.getKey()__			Class<?> clazz = entry.getValue()__			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		}_	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,string,class,for,map,entry,string,class,entry,type,id,mappings,entry,set,string,id,entry,get,key,class,clazz,entry,get,value,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1467730834;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<>()__		for (Map.Entry<String, Class<?>> entry : typeIdMappings.entrySet()) {_			String id = entry.getKey()__			Class<?> clazz = entry.getValue()__			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		}_	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,for,map,entry,string,class,entry,type,id,mappings,entry,set,string,id,entry,get,key,class,clazz,entry,get,value,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1473503875;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<>()__		for (Map.Entry<String, Class<?>> entry : typeIdMappings.entrySet()) {_			String id = entry.getKey()__			Class<?> clazz = entry.getValue()__			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		}_	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,for,map,entry,string,class,entry,type,id,mappings,entry,set,string,id,entry,get,key,class,clazz,entry,get,value,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1477860027;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<>()__		for (Map.Entry<String, Class<?>> entry : typeIdMappings.entrySet()) {_			String id = entry.getKey()__			Class<?> clazz = entry.getValue()__			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		}_	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,for,map,entry,string,class,entry,type,id,mappings,entry,set,string,id,entry,get,key,class,clazz,entry,get,value,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1495868221;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<>()__		for (Map.Entry<String, Class<?>> entry : typeIdMappings.entrySet()) {_			String id = entry.getKey()__			Class<?> clazz = entry.getValue()__			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		}_	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,for,map,entry,string,class,entry,type,id,mappings,entry,set,string,id,entry,get,key,class,clazz,entry,get,value,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1496242568;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<>()__		for (Map.Entry<String, Class<?>> entry : typeIdMappings.entrySet()) {_			String id = entry.getKey()__			Class<?> clazz = entry.getValue()__			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		}_	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,for,map,entry,string,class,entry,type,id,mappings,entry,set,string,id,entry,get,key,class,clazz,entry,get,value,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1496837955;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<>()__		for (Map.Entry<String, Class<?>> entry : typeIdMappings.entrySet()) {_			String id = entry.getKey()__			Class<?> clazz = entry.getValue()__			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		}_	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,for,map,entry,string,class,entry,type,id,mappings,entry,set,string,id,entry,get,key,class,clazz,entry,get,value,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1497362807;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<>()__		typeIdMappings.forEach((id, clazz) -> {_			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		})__	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,type,id,mappings,for,each,id,clazz,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1498780456;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<>()__		typeIdMappings.forEach((id, clazz) -> {_			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		})__	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,type,id,mappings,for,each,id,clazz,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1530174524;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<>()__		typeIdMappings.forEach((id, clazz) -> {_			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		})__	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,type,id,mappings,for,each,id,clazz,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings);1551113869;Specify mappings from type ids to Java classes, if desired._This allows for synthetic ids in the type id message property,_instead of transferring Java class names._<p>Default is no custom mappings, i.e. transferring raw Java class names._@param typeIdMappings a Map with type id values as keys and Java classes as values;public void setTypeIdMappings(Map<String, Class<?>> typeIdMappings) {_		this.idClassMappings = new HashMap<>()__		typeIdMappings.forEach((id, clazz) -> {_			this.idClassMappings.put(id, clazz)__			this.classIdMappings.put(clazz, id)__		})__	};specify,mappings,from,type,ids,to,java,classes,if,desired,this,allows,for,synthetic,ids,in,the,type,id,message,property,instead,of,transferring,java,class,names,p,default,is,no,custom,mappings,i,e,transferring,raw,java,class,names,param,type,id,mappings,a,map,with,type,id,values,as,keys,and,java,classes,as,values;public,void,set,type,id,mappings,map,string,class,type,id,mappings,this,id,class,mappings,new,hash,map,type,id,mappings,for,each,id,clazz,this,id,class,mappings,put,id,clazz,this,class,id,mappings,put,clazz,id
MappingJackson2MessageConverter -> @Deprecated 	protected TextMessage mapToTextMessage(Object object, Session session, ObjectMapper objectMapper) 			throws JMSException, IOException;1452874694;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectMapper the mapper to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@deprecated as of 4.3, use {@link #mapToTextMessage(Object, Session, ObjectWriter)};@Deprecated_	protected TextMessage mapToTextMessage(Object object, Session session, ObjectMapper objectMapper)_			throws JMSException, IOException {__		return mapToTextMessage(object, session, objectMapper.writer())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,mapper,the,mapper,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,deprecated,as,of,4,3,use,link,map,to,text,message,object,session,object,writer;deprecated,protected,text,message,map,to,text,message,object,object,session,session,object,mapper,object,mapper,throws,jmsexception,ioexception,return,map,to,text,message,object,session,object,mapper,writer
MappingJackson2MessageConverter -> @Deprecated 	protected TextMessage mapToTextMessage(Object object, Session session, ObjectMapper objectMapper) 			throws JMSException, IOException;1458945978;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectMapper the mapper to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@deprecated as of 4.3, use {@link #mapToTextMessage(Object, Session, ObjectWriter)};@Deprecated_	protected TextMessage mapToTextMessage(Object object, Session session, ObjectMapper objectMapper)_			throws JMSException, IOException {__		return mapToTextMessage(object, session, objectMapper.writer())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,mapper,the,mapper,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,deprecated,as,of,4,3,use,link,map,to,text,message,object,session,object,writer;deprecated,protected,text,message,map,to,text,message,object,object,session,session,object,mapper,object,mapper,throws,jmsexception,ioexception,return,map,to,text,message,object,session,object,mapper,writer
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1356735495;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link org.springframework.jms.support.converter.MessageType#TEXT} or_{@link org.springframework.jms.support.converter.MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws javax.jms.JMSException if thrown by JMS_@throws java.io.IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,org,springframework,jms,support,converter,message,type,text,or,link,org,springframework,jms,support,converter,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,javax,jms,jmsexception,if,thrown,by,jms,throws,java,io,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1367943114;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1368482696;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1395698258;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1417596581;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1450368890;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1452874694;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1458945978;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1467726769;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1467730834;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1473503875;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1477860027;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1495868221;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1496242568;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1496837955;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1497362807;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1498780456;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1530174524;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Object convertFromMessage(Message message, JavaType targetJavaType) 			throws JMSException, IOException;1551113869;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromMessage(Message message, JavaType targetJavaType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + message.getClass() +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,message,message,message,java,type,target,java,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,message,get,class,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1452874694;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@since 4.3;protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectWriter.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,since,4,3;protected,text,message,map,to,text,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,writer,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1458945978;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@since 4.3;protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectWriter.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,since,4,3;protected,text,message,map,to,text,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,writer,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1467726769;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@since 4.3;protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectWriter.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,since,4,3;protected,text,message,map,to,text,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,writer,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1467730834;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@since 4.3;protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectWriter.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,since,4,3;protected,text,message,map,to,text,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,writer,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1473503875;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@since 4.3;protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectWriter.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,since,4,3;protected,text,message,map,to,text,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,writer,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1477860027;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@since 4.3;protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectWriter.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,since,4,3;protected,text,message,map,to,text,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,writer,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1495868221;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@since 4.3;protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectWriter.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,since,4,3;protected,text,message,map,to,text,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,writer,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1496242568;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@since 4.3;protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectWriter.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,since,4,3;protected,text,message,map,to,text,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,writer,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1496837955;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@since 4.3;protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectWriter.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,since,4,3;protected,text,message,map,to,text,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,writer,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1497362807;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@since 4.3;protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectWriter.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,since,4,3;protected,text,message,map,to,text,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,writer,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1498780456;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage_@since 4.3;protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectWriter.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message,since,4,3;protected,text,message,map,to,text,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,writer,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1530174524;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@since 4.3_@see Session#createBytesMessage;protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectWriter.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,session,create,bytes,message;protected,text,message,map,to,text,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,writer,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter) 			throws JMSException, IOException;1551113869;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectWriter the writer to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@since 4.3_@see Session#createBytesMessage;protected TextMessage mapToTextMessage(Object object, Session session, ObjectWriter objectWriter)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectWriter.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,writer,the,writer,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,session,create,bytes,message;protected,text,message,map,to,text,message,object,object,session,session,object,writer,object,writer,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,writer,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectMapper objectMapper) 			throws JMSException, IOException;1356735495;Map the given object to a {@link javax.jms.TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectMapper the mapper to use_@return the resulting message_@throws javax.jms.JMSException if thrown by JMS methods_@throws java.io.IOException in case of I/O errors_@see javax.jms.Session#createBytesMessage_@see org.springframework.oxm.Marshaller#marshal(Object, javax.xml.transform.Result);protected TextMessage mapToTextMessage(Object object, Session session, ObjectMapper objectMapper)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectMapper.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,javax,jms,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,mapper,the,mapper,to,use,return,the,resulting,message,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,throws,java,io,ioexception,in,case,of,i,o,errors,see,javax,jms,session,create,bytes,message,see,org,springframework,oxm,marshaller,marshal,object,javax,xml,transform,result;protected,text,message,map,to,text,message,object,object,session,session,object,mapper,object,mapper,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,mapper,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectMapper objectMapper) 			throws JMSException, IOException;1367943114;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectMapper the mapper to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage;protected TextMessage mapToTextMessage(Object object, Session session, ObjectMapper objectMapper)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectMapper.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,mapper,the,mapper,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message;protected,text,message,map,to,text,message,object,object,session,session,object,mapper,object,mapper,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,mapper,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectMapper objectMapper) 			throws JMSException, IOException;1368482696;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectMapper the mapper to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage;protected TextMessage mapToTextMessage(Object object, Session session, ObjectMapper objectMapper)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectMapper.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,mapper,the,mapper,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message;protected,text,message,map,to,text,message,object,object,session,session,object,mapper,object,mapper,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,mapper,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectMapper objectMapper) 			throws JMSException, IOException;1395698258;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectMapper the mapper to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage;protected TextMessage mapToTextMessage(Object object, Session session, ObjectMapper objectMapper)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectMapper.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,mapper,the,mapper,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message;protected,text,message,map,to,text,message,object,object,session,session,object,mapper,object,mapper,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,mapper,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectMapper objectMapper) 			throws JMSException, IOException;1417596581;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectMapper the mapper to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage;protected TextMessage mapToTextMessage(Object object, Session session, ObjectMapper objectMapper)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectMapper.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,mapper,the,mapper,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message;protected,text,message,map,to,text,message,object,object,session,session,object,mapper,object,mapper,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,mapper,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected TextMessage mapToTextMessage(Object object, Session session, ObjectMapper objectMapper) 			throws JMSException, IOException;1450368890;Map the given object to a {@link TextMessage}._@param object the object to be mapped_@param session current JMS session_@param objectMapper the mapper to use_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors_@see Session#createBytesMessage;protected TextMessage mapToTextMessage(Object object, Session session, ObjectMapper objectMapper)_			throws JMSException, IOException {__		StringWriter writer = new StringWriter()__		objectMapper.writeValue(writer, object)__		return session.createTextMessage(writer.toString())__	};map,the,given,object,to,a,link,text,message,param,object,the,object,to,be,mapped,param,session,current,jms,session,param,object,mapper,the,mapper,to,use,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors,see,session,create,bytes,message;protected,text,message,map,to,text,message,object,object,session,session,object,mapper,object,mapper,throws,jmsexception,ioexception,string,writer,writer,new,string,writer,object,mapper,write,value,writer,object,return,session,create,text,message,writer,to,string
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1356735495;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws javax.jms.JMSException if thrown by JMS_@throws java.io.IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,javax,jms,jmsexception,if,thrown,by,jms,throws,java,io,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1367943114;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1368482696;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1395698258;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1417596581;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1450368890;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1452874694;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1458945978;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1467726769;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1467730834;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1473503875;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1477860027;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1495868221;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1496242568;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1496837955;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1497362807;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1498780456;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1530174524;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType) 			throws JMSException, IOException;1551113869;Convert a TextMessage to a Java Object with the specified type._@param message the input message_@param targetJavaType the target type_@return the message converted to an object_@throws JMSException if thrown by JMS_@throws IOException in case of I/O errors;protected Object convertFromTextMessage(TextMessage message, JavaType targetJavaType)_			throws JMSException, IOException {__		String body = message.getText()__		return this.objectMapper.readValue(body, targetJavaType)__	};convert,a,text,message,to,a,java,object,with,the,specified,type,param,message,the,input,message,param,target,java,type,the,target,type,return,the,message,converted,to,an,object,throws,jmsexception,if,thrown,by,jms,throws,ioexception,in,case,of,i,o,errors;protected,object,convert,from,text,message,text,message,message,java,type,target,java,type,throws,jmsexception,ioexception,string,body,message,get,text,return,this,object,mapper,read,value,body,target,java,type
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1356735495;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1367943114;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1368482696;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1395698258;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1417596581;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1450368890;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1452874694;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1458945978;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1467726769;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1467730834;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1473503875;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1477860027;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1495868221;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1496242568;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1496837955;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1497362807;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1498780456;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1530174524;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncoding(String encoding);1551113869;Specify the encoding to use when converting to and from text-based_message body content. The default encoding will be "UTF-8"._<p>When reading from a a text-based message, an encoding may have been_suggested through a special JMS property which will then be preferred_over the encoding set on this MessageConverter instance._@see #setEncodingPropertyName;public void setEncoding(String encoding) {_		this.encoding = encoding__	};specify,the,encoding,to,use,when,converting,to,and,from,text,based,message,body,content,the,default,encoding,will,be,utf,8,p,when,reading,from,a,a,text,based,message,an,encoding,may,have,been,suggested,through,a,special,jms,property,which,will,then,be,preferred,over,the,encoding,set,on,this,message,converter,instance,see,set,encoding,property,name;public,void,set,encoding,string,encoding,this,encoding,encoding
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1356735495;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1367943114;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1368482696;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1395698258;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1417596581;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1450368890;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1452874694;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1458945978;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1467726769;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1467730834;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1473503875;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1477860027;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1495868221;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1496242568;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1496837955;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1497362807;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1498780456;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1530174524;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setEncodingPropertyName(String encodingPropertyName);1551113869;Specify the name of the JMS message property that carries the encoding from_bytes to String and back is BytesMessage is used during the conversion process._<p>Default is none. Setting this property is optional_ if not set, UTF-8 will_be used for decoding any incoming bytes message._@see #setEncoding;public void setEncodingPropertyName(String encodingPropertyName) {_		this.encodingPropertyName = encodingPropertyName__	};specify,the,name,of,the,jms,message,property,that,carries,the,encoding,from,bytes,to,string,and,back,is,bytes,message,is,used,during,the,conversion,process,p,default,is,none,setting,this,property,is,optional,if,not,set,utf,8,will,be,used,for,decoding,any,incoming,bytes,message,see,set,encoding;public,void,set,encoding,property,name,string,encoding,property,name,this,encoding,property,name,encoding,property,name
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1356735495;Specify the {@link org.codehaus.jackson.map.ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,org,codehaus,jackson,map,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1367943114;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1368482696;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1395698258;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1417596581;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1450368890;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1452874694;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1458945978;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1467726769;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1467730834;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1473503875;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1477860027;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1495868221;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1496242568;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1496837955;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1497362807;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1498780456;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1530174524;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1551113869;Specify the {@link ObjectMapper} to use instead of using the default.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__	};specify,the,link,object,mapper,to,use,instead,of,using,the,default;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectMapper objectMapper, MessageType targetType) 			throws JMSException, IOException;1356735495;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link org.springframework.jms.support.converter.MessageType#TEXT} or_{@link org.springframework.jms.support.converter.MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectMapper the mapper to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws javax.jms.JMSException if thrown by JMS methods_@throws java.io.IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectMapper objectMapper, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJacksonMessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,org,springframework,jms,support,converter,message,type,text,or,link,org,springframework,jms,support,converter,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,mapper,the,mapper,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,throws,java,io,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,mapper,object,mapper,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson,message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectMapper objectMapper, MessageType targetType) 			throws JMSException, IOException;1367943114;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectMapper the mapper to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectMapper objectMapper, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,mapper,the,mapper,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,mapper,object,mapper,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectMapper objectMapper, MessageType targetType) 			throws JMSException, IOException;1368482696;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectMapper the mapper to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectMapper objectMapper, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,mapper,the,mapper,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,mapper,object,mapper,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectMapper objectMapper, MessageType targetType) 			throws JMSException, IOException;1395698258;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectMapper the mapper to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectMapper objectMapper, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,mapper,the,mapper,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,mapper,object,mapper,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectMapper objectMapper, MessageType targetType) 			throws JMSException, IOException;1417596581;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectMapper the mapper to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectMapper objectMapper, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,mapper,the,mapper,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,mapper,object,mapper,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> protected Message mapToMessage(Object object, Session session, ObjectMapper objectMapper, MessageType targetType) 			throws JMSException, IOException;1450368890;Template method that allows for custom message mapping._Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or_{@link MessageType#BYTES}._<p>The default implementation throws an {@link IllegalArgumentException}._@param object the object to marshal_@param session the JMS Session_@param objectMapper the mapper to use_@param targetType the target message type (other than TEXT or BYTES)_@return the resulting message_@throws JMSException if thrown by JMS methods_@throws IOException in case of I/O errors;protected Message mapToMessage(Object object, Session session, ObjectMapper objectMapper, MessageType targetType)_			throws JMSException, IOException {__		throw new IllegalArgumentException("Unsupported message type [" + targetType +_				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.")__	};template,method,that,allows,for,custom,message,mapping,invoked,when,link,set,target,type,is,not,link,message,type,text,or,link,message,type,bytes,p,the,default,implementation,throws,an,link,illegal,argument,exception,param,object,the,object,to,marshal,param,session,the,jms,session,param,object,mapper,the,mapper,to,use,param,target,type,the,target,message,type,other,than,text,or,bytes,return,the,resulting,message,throws,jmsexception,if,thrown,by,jms,methods,throws,ioexception,in,case,of,i,o,errors;protected,message,map,to,message,object,object,session,session,object,mapper,object,mapper,message,type,target,type,throws,jmsexception,ioexception,throw,new,illegal,argument,exception,unsupported,message,type,target,type,mapping,jackson2message,converter,by,default,only,supports,text,messages,and,bytes,messages
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(Object conversionHint);1495868221;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none;@Nullable_	protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter methodParam = (MethodParameter) conversionHint__			JsonView annotation = methodParam.getParameterAnnotation(JsonView.class)__			if (annotation == null) {_				annotation = methodParam.getMethodAnnotation(JsonView.class)__				if (annotation == null) {_					return null__				}_			}_			return extractViewClass(annotation, conversionHint)__		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}_		else {_			return null__		}_	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none;nullable,protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,method,param,method,parameter,conversion,hint,json,view,annotation,method,param,get,parameter,annotation,json,view,class,if,annotation,null,annotation,method,param,get,method,annotation,json,view,class,if,annotation,null,return,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,else,return,null
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(Object conversionHint);1496242568;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none;@Nullable_	protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter methodParam = (MethodParameter) conversionHint__			JsonView annotation = methodParam.getParameterAnnotation(JsonView.class)__			if (annotation == null) {_				annotation = methodParam.getMethodAnnotation(JsonView.class)__				if (annotation == null) {_					return null__				}_			}_			return extractViewClass(annotation, conversionHint)__		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}_		else {_			return null__		}_	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none;nullable,protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,method,param,method,parameter,conversion,hint,json,view,annotation,method,param,get,parameter,annotation,json,view,class,if,annotation,null,annotation,method,param,get,method,annotation,json,view,class,if,annotation,null,return,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,else,return,null
