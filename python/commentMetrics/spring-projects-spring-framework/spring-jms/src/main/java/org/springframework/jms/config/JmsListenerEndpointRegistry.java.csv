commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setApplicationContext(ApplicationContext applicationContext) {     this.applicationContext = applicationContext. }
false;public;1;6;;@Override public void onApplicationEvent(ContextRefreshedEvent event) {     if (event.getApplicationContext() == this.applicationContext) {         this.contextRefreshed = true.     } }
true;public;1;5;/**  * Return the {@link MessageListenerContainer} with the specified id or  * {@code null} if no such container exists.  * @param id the id of the container  * @return the container or {@code null} if no container with that id exists  * @see JmsListenerEndpoint#getId()  * @see #getListenerContainerIds()  */ ;/**  * Return the {@link MessageListenerContainer} with the specified id or  * {@code null} if no such container exists.  * @param id the id of the container  * @return the container or {@code null} if no container with that id exists  * @see JmsListenerEndpoint#getId()  * @see #getListenerContainerIds()  */ @Nullable public MessageListenerContainer getListenerContainer(String id) {     Assert.notNull(id, "Container identifier must not be null").     return this.listenerContainers.get(id). }
true;public;0;3;/**  * Return the ids of the managed {@link MessageListenerContainer} instance(s).  * @since 4.2.3  * @see #getListenerContainer(String)  */ ;/**  * Return the ids of the managed {@link MessageListenerContainer} instance(s).  * @since 4.2.3  * @see #getListenerContainer(String)  */ public Set<String> getListenerContainerIds() {     return Collections.unmodifiableSet(this.listenerContainers.keySet()). }
true;public;0;3;/**  * Return the managed {@link MessageListenerContainer} instance(s).  */ ;/**  * Return the managed {@link MessageListenerContainer} instance(s).  */ public Collection<MessageListenerContainer> getListenerContainers() {     return Collections.unmodifiableCollection(this.listenerContainers.values()). }
true;public;3;19;/**  * Create a message listener container for the given {@link JmsListenerEndpoint}.  * <p>This create the necessary infrastructure to honor that endpoint  * with regards to its configuration.  * <p>The {@code startImmediately} flag determines if the container should be  * started immediately.  * @param endpoint the endpoint to add  * @param factory the listener factory to use  * @param startImmediately start the container immediately if necessary  * @see #getListenerContainers()  * @see #getListenerContainer(String)  */ ;/**  * Create a message listener container for the given {@link JmsListenerEndpoint}.  * <p>This create the necessary infrastructure to honor that endpoint  * with regards to its configuration.  * <p>The {@code startImmediately} flag determines if the container should be  * started immediately.  * @param endpoint the endpoint to add  * @param factory the listener factory to use  * @param startImmediately start the container immediately if necessary  * @see #getListenerContainers()  * @see #getListenerContainer(String)  */ public void registerListenerContainer(JmsListenerEndpoint endpoint, JmsListenerContainerFactory<?> factory, boolean startImmediately) {     Assert.notNull(endpoint, "Endpoint must not be null").     Assert.notNull(factory, "Factory must not be null").     String id = endpoint.getId().     Assert.hasText(id, "Endpoint id must be set").     synchronized (this.listenerContainers) {         if (this.listenerContainers.containsKey(id)) {             throw new IllegalStateException("Another endpoint is already registered with id '" + id + "'").         }         MessageListenerContainer container = createListenerContainer(endpoint, factory).         this.listenerContainers.put(id, container).         if (startImmediately) {             startIfNecessary(container).         }     } }
true;public;2;3;/**  * Create a message listener container for the given {@link JmsListenerEndpoint}.  * <p>This create the necessary infrastructure to honor that endpoint  * with regards to its configuration.  * @param endpoint the endpoint to add  * @param factory the listener factory to use  * @see #registerListenerContainer(JmsListenerEndpoint, JmsListenerContainerFactory, boolean)  */ ;/**  * Create a message listener container for the given {@link JmsListenerEndpoint}.  * <p>This create the necessary infrastructure to honor that endpoint  * with regards to its configuration.  * @param endpoint the endpoint to add  * @param factory the listener factory to use  * @see #registerListenerContainer(JmsListenerEndpoint, JmsListenerContainerFactory, boolean)  */ public void registerListenerContainer(JmsListenerEndpoint endpoint, JmsListenerContainerFactory<?> factory) {     registerListenerContainer(endpoint, factory, false). }
true;protected;2;25;/**  * Create and start a new container using the specified factory.  */ ;/**  * Create and start a new container using the specified factory.  */ protected MessageListenerContainer createListenerContainer(JmsListenerEndpoint endpoint, JmsListenerContainerFactory<?> factory) {     MessageListenerContainer listenerContainer = factory.createListenerContainer(endpoint).     if (listenerContainer instanceof InitializingBean) {         try {             ((InitializingBean) listenerContainer).afterPropertiesSet().         } catch (Exception ex) {             throw new BeanInitializationException("Failed to initialize message listener container", ex).         }     }     int containerPhase = listenerContainer.getPhase().     if (containerPhase < Integer.MAX_VALUE) {         // a custom phase value         if (this.phase < Integer.MAX_VALUE && this.phase != containerPhase) {             throw new IllegalStateException("Encountered phase mismatch between container factory definitions: " + this.phase + " vs " + containerPhase).         }         this.phase = listenerContainer.getPhase().     }     return listenerContainer. }
false;public;0;4;;// Delegating implementation of SmartLifecycle @Override public int getPhase() {     return this.phase. }
false;public;0;6;;@Override public void start() {     for (MessageListenerContainer listenerContainer : getListenerContainers()) {         startIfNecessary(listenerContainer).     } }
false;public;0;6;;@Override public void stop() {     for (MessageListenerContainer listenerContainer : getListenerContainers()) {         listenerContainer.stop().     } }
false;public;1;8;;@Override public void stop(Runnable callback) {     Collection<MessageListenerContainer> listenerContainers = getListenerContainers().     AggregatingCallback aggregatingCallback = new AggregatingCallback(listenerContainers.size(), callback).     for (MessageListenerContainer listenerContainer : listenerContainers) {         listenerContainer.stop(aggregatingCallback).     } }
false;public;0;9;;@Override public boolean isRunning() {     for (MessageListenerContainer listenerContainer : getListenerContainers()) {         if (listenerContainer.isRunning()) {             return true.         }     }     return false. }
true;private;1;5;/**  * Start the specified {@link MessageListenerContainer} if it should be started  * on startup or when start is called explicitly after startup.  * @see MessageListenerContainer#isAutoStartup()  */ ;/**  * Start the specified {@link MessageListenerContainer} if it should be started  * on startup or when start is called explicitly after startup.  * @see MessageListenerContainer#isAutoStartup()  */ private void startIfNecessary(MessageListenerContainer listenerContainer) {     if (this.contextRefreshed || listenerContainer.isAutoStartup()) {         listenerContainer.start().     } }
false;public;0;13;;@Override public void destroy() {     for (MessageListenerContainer listenerContainer : getListenerContainers()) {         if (listenerContainer instanceof DisposableBean) {             try {                 ((DisposableBean) listenerContainer).destroy().             } catch (Throwable ex) {                 logger.warn("Failed to destroy message listener container", ex).             }         }     } }
false;public;0;6;;@Override public void run() {     if (this.count.decrementAndGet() == 0) {         this.finishCallback.run().     } }
