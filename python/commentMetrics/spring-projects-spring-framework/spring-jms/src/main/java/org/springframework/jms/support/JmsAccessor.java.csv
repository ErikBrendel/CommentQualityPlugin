# id;timestamp;commentText;codeText;commentWords;codeWords
JmsAccessor -> public void setConnectionFactory(@Nullable ConnectionFactory connectionFactory);1500448076;Set the ConnectionFactory to use for obtaining JMS {@link Connection Connections}.;public void setConnectionFactory(@Nullable ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,connection,factory,to,use,for,obtaining,jms,link,connection,connections;public,void,set,connection,factory,nullable,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsAccessor -> public void setConnectionFactory(@Nullable ConnectionFactory connectionFactory);1530174524;Set the ConnectionFactory to use for obtaining JMS {@link Connection Connections}.;public void setConnectionFactory(@Nullable ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,connection,factory,to,use,for,obtaining,jms,link,connection,connections;public,void,set,connection,factory,nullable,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsAccessor -> @Nullable 	public ConnectionFactory getConnectionFactory();1496837955;Return the ConnectionFactory that this accessor uses for obtaining_JMS {@link Connection Connections}.;@Nullable_	public ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,connection,factory,that,this,accessor,uses,for,obtaining,jms,link,connection,connections;nullable,public,connection,factory,get,connection,factory,return,this,connection,factory
JmsAccessor -> @Nullable 	public ConnectionFactory getConnectionFactory();1500448076;Return the ConnectionFactory that this accessor uses for obtaining_JMS {@link Connection Connections}.;@Nullable_	public ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,connection,factory,that,this,accessor,uses,for,obtaining,jms,link,connection,connections;nullable,public,connection,factory,get,connection,factory,return,this,connection,factory
JmsAccessor -> @Nullable 	public ConnectionFactory getConnectionFactory();1530174524;Return the ConnectionFactory that this accessor uses for obtaining_JMS {@link Connection Connections}.;@Nullable_	public ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,connection,factory,that,this,accessor,uses,for,obtaining,jms,link,connection,connections;nullable,public,connection,factory,get,connection,factory,return,this,connection,factory
JmsAccessor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1328020251;Set the ConnectionFactory to use for obtaining JMS {@link Connection Connections}.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,connection,factory,to,use,for,obtaining,jms,link,connection,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsAccessor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1356735495;Set the ConnectionFactory to use for obtaining JMS {@link Connection Connections}.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,connection,factory,to,use,for,obtaining,jms,link,connection,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsAccessor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1357119239;Set the ConnectionFactory to use for obtaining JMS {@link Connection Connections}.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,connection,factory,to,use,for,obtaining,jms,link,connection,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsAccessor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1368482696;Set the ConnectionFactory to use for obtaining JMS {@link Connection Connections}.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,connection,factory,to,use,for,obtaining,jms,link,connection,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsAccessor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1401724323;Set the ConnectionFactory to use for obtaining JMS {@link Connection Connections}.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,connection,factory,to,use,for,obtaining,jms,link,connection,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsAccessor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1405696891;Set the ConnectionFactory to use for obtaining JMS {@link Connection Connections}.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,connection,factory,to,use,for,obtaining,jms,link,connection,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsAccessor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1438003976;Set the ConnectionFactory to use for obtaining JMS {@link Connection Connections}.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,connection,factory,to,use,for,obtaining,jms,link,connection,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsAccessor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1461047077;Set the ConnectionFactory to use for obtaining JMS {@link Connection Connections}.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,connection,factory,to,use,for,obtaining,jms,link,connection,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsAccessor -> public void setConnectionFactory(ConnectionFactory connectionFactory);1496837955;Set the ConnectionFactory to use for obtaining JMS {@link Connection Connections}.;public void setConnectionFactory(ConnectionFactory connectionFactory) {_		this.connectionFactory = connectionFactory__	};set,the,connection,factory,to,use,for,obtaining,jms,link,connection,connections;public,void,set,connection,factory,connection,factory,connection,factory,this,connection,factory,connection,factory
JmsAccessor -> public void setSessionAcknowledgeModeName(String constantName);1328020251;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>If you want to use vendor-specific extensions to the acknowledgment mode,_use {@link #setSessionAcknowledgeModeName(String)} instead._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeModeName(String constantName) {_		setSessionAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,if,you,want,to,use,vendor,specific,extensions,to,the,acknowledgment,mode,use,link,set,session,acknowledge,mode,name,string,instead,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,name,string,constant,name,set,session,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsAccessor -> public void setSessionAcknowledgeModeName(String constantName);1356735495;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>If you want to use vendor-specific extensions to the acknowledgment mode,_use {@link #setSessionAcknowledgeModeName(String)} instead._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeModeName(String constantName) {_		setSessionAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,if,you,want,to,use,vendor,specific,extensions,to,the,acknowledgment,mode,use,link,set,session,acknowledge,mode,name,string,instead,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,name,string,constant,name,set,session,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsAccessor -> public void setSessionAcknowledgeModeName(String constantName);1357119239;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>If you want to use vendor-specific extensions to the acknowledgment mode,_use {@link #setSessionAcknowledgeModeName(String)} instead._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeModeName(String constantName) {_		setSessionAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,if,you,want,to,use,vendor,specific,extensions,to,the,acknowledgment,mode,use,link,set,session,acknowledge,mode,name,string,instead,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,name,string,constant,name,set,session,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsAccessor -> public void setSessionAcknowledgeModeName(String constantName);1368482696;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>If you want to use vendor-specific extensions to the acknowledgment mode,_use {@link #setSessionAcknowledgeModeName(String)} instead._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeModeName(String constantName) {_		setSessionAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,if,you,want,to,use,vendor,specific,extensions,to,the,acknowledgment,mode,use,link,set,session,acknowledge,mode,name,string,instead,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,name,string,constant,name,set,session,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsAccessor -> public void setSessionAcknowledgeModeName(String constantName);1401724323;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>If you want to use vendor-specific extensions to the acknowledgment mode,_use {@link #setSessionAcknowledgeModeName(String)} instead._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeModeName(String constantName) {_		setSessionAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,if,you,want,to,use,vendor,specific,extensions,to,the,acknowledgment,mode,use,link,set,session,acknowledge,mode,name,string,instead,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,name,string,constant,name,set,session,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsAccessor -> public void setSessionAcknowledgeModeName(String constantName);1405696891;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>If you want to use vendor-specific extensions to the acknowledgment mode,_use {@link #setSessionAcknowledgeMode(int)} instead._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeModeName(String constantName) {_		setSessionAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,if,you,want,to,use,vendor,specific,extensions,to,the,acknowledgment,mode,use,link,set,session,acknowledge,mode,int,instead,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,name,string,constant,name,set,session,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsAccessor -> public void setSessionAcknowledgeModeName(String constantName);1438003976;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>If you want to use vendor-specific extensions to the acknowledgment mode,_use {@link #setSessionAcknowledgeMode(int)} instead._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeModeName(String constantName) {_		setSessionAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,if,you,want,to,use,vendor,specific,extensions,to,the,acknowledgment,mode,use,link,set,session,acknowledge,mode,int,instead,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,name,string,constant,name,set,session,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsAccessor -> public void setSessionAcknowledgeModeName(String constantName);1461047077;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>If you want to use vendor-specific extensions to the acknowledgment mode,_use {@link #setSessionAcknowledgeMode(int)} instead._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeModeName(String constantName) {_		setSessionAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,if,you,want,to,use,vendor,specific,extensions,to,the,acknowledgment,mode,use,link,set,session,acknowledge,mode,int,instead,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,name,string,constant,name,set,session,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsAccessor -> public void setSessionAcknowledgeModeName(String constantName);1496837955;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>If you want to use vendor-specific extensions to the acknowledgment mode,_use {@link #setSessionAcknowledgeMode(int)} instead._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeModeName(String constantName) {_		setSessionAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,if,you,want,to,use,vendor,specific,extensions,to,the,acknowledgment,mode,use,link,set,session,acknowledge,mode,int,instead,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,name,string,constant,name,set,session,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsAccessor -> public void setSessionAcknowledgeModeName(String constantName);1500448076;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>If you want to use vendor-specific extensions to the acknowledgment mode,_use {@link #setSessionAcknowledgeMode(int)} instead._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeModeName(String constantName) {_		setSessionAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,if,you,want,to,use,vendor,specific,extensions,to,the,acknowledgment,mode,use,link,set,session,acknowledge,mode,int,instead,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,name,string,constant,name,set,session,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsAccessor -> public void setSessionAcknowledgeModeName(String constantName);1530174524;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>If you want to use vendor-specific extensions to the acknowledgment mode,_use {@link #setSessionAcknowledgeMode(int)} instead._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeModeName(String constantName) {_		setSessionAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,if,you,want,to,use,vendor,specific,extensions,to,the,acknowledgment,mode,use,link,set,session,acknowledge,mode,int,instead,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,name,string,constant,name,set,session,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsAccessor -> public void setSessionTransacted(boolean sessionTransacted);1328020251;Set the transaction mode that is used when creating a JMS {@link Session}._Default is "false"._<p>Note that within a JTA transaction, the parameters passed to_<code>create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)</code>_method are not taken into account. Depending on the J2EE transaction context,_the container makes its own decisions on these values. Analogously, these_parameters are not taken into account within a locally managed transaction_either, since the accessor operates on an existing JMS Session in this case._<p>Setting this flag to "true" will use a short local JMS transaction_when running outside of a managed transaction, and a synchronized local_JMS transaction in case of a managed transaction (other than an XA_transaction) being present. The latter has the effect of a local JMS_transaction being managed alongside the main transaction (which might_be a native JDBC transaction), with the JMS transaction committing_right after the main transaction._@see javax.jms.Connection#createSession(boolean, int);public void setSessionTransacted(boolean sessionTransacted) {_		this.sessionTransacted = sessionTransacted__	};set,the,transaction,mode,that,is,used,when,creating,a,jms,link,session,default,is,false,p,note,that,within,a,jta,transaction,the,parameters,passed,to,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,code,method,are,not,taken,into,account,depending,on,the,j2ee,transaction,context,the,container,makes,its,own,decisions,on,these,values,analogously,these,parameters,are,not,taken,into,account,within,a,locally,managed,transaction,either,since,the,accessor,operates,on,an,existing,jms,session,in,this,case,p,setting,this,flag,to,true,will,use,a,short,local,jms,transaction,when,running,outside,of,a,managed,transaction,and,a,synchronized,local,jms,transaction,in,case,of,a,managed,transaction,other,than,an,xa,transaction,being,present,the,latter,has,the,effect,of,a,local,jms,transaction,being,managed,alongside,the,main,transaction,which,might,be,a,native,jdbc,transaction,with,the,jms,transaction,committing,right,after,the,main,transaction,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,transacted,boolean,session,transacted,this,session,transacted,session,transacted
JmsAccessor -> public void setSessionTransacted(boolean sessionTransacted);1356735495;Set the transaction mode that is used when creating a JMS {@link Session}._Default is "false"._<p>Note that within a JTA transaction, the parameters passed to_{@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)}_method are not taken into account. Depending on the J2EE transaction context,_the container makes its own decisions on these values. Analogously, these_parameters are not taken into account within a locally managed transaction_either, since the accessor operates on an existing JMS Session in this case._<p>Setting this flag to "true" will use a short local JMS transaction_when running outside of a managed transaction, and a synchronized local_JMS transaction in case of a managed transaction (other than an XA_transaction) being present. The latter has the effect of a local JMS_transaction being managed alongside the main transaction (which might_be a native JDBC transaction), with the JMS transaction committing_right after the main transaction._@see javax.jms.Connection#createSession(boolean, int);public void setSessionTransacted(boolean sessionTransacted) {_		this.sessionTransacted = sessionTransacted__	};set,the,transaction,mode,that,is,used,when,creating,a,jms,link,session,default,is,false,p,note,that,within,a,jta,transaction,the,parameters,passed,to,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,j2ee,transaction,context,the,container,makes,its,own,decisions,on,these,values,analogously,these,parameters,are,not,taken,into,account,within,a,locally,managed,transaction,either,since,the,accessor,operates,on,an,existing,jms,session,in,this,case,p,setting,this,flag,to,true,will,use,a,short,local,jms,transaction,when,running,outside,of,a,managed,transaction,and,a,synchronized,local,jms,transaction,in,case,of,a,managed,transaction,other,than,an,xa,transaction,being,present,the,latter,has,the,effect,of,a,local,jms,transaction,being,managed,alongside,the,main,transaction,which,might,be,a,native,jdbc,transaction,with,the,jms,transaction,committing,right,after,the,main,transaction,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,transacted,boolean,session,transacted,this,session,transacted,session,transacted
JmsAccessor -> public void setSessionTransacted(boolean sessionTransacted);1357119239;Set the transaction mode that is used when creating a JMS {@link Session}._Default is "false"._<p>Note that within a JTA transaction, the parameters passed to_{@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)}_method are not taken into account. Depending on the J2EE transaction context,_the container makes its own decisions on these values. Analogously, these_parameters are not taken into account within a locally managed transaction_either, since the accessor operates on an existing JMS Session in this case._<p>Setting this flag to "true" will use a short local JMS transaction_when running outside of a managed transaction, and a synchronized local_JMS transaction in case of a managed transaction (other than an XA_transaction) being present. The latter has the effect of a local JMS_transaction being managed alongside the main transaction (which might_be a native JDBC transaction), with the JMS transaction committing_right after the main transaction._@see javax.jms.Connection#createSession(boolean, int);public void setSessionTransacted(boolean sessionTransacted) {_		this.sessionTransacted = sessionTransacted__	};set,the,transaction,mode,that,is,used,when,creating,a,jms,link,session,default,is,false,p,note,that,within,a,jta,transaction,the,parameters,passed,to,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,j2ee,transaction,context,the,container,makes,its,own,decisions,on,these,values,analogously,these,parameters,are,not,taken,into,account,within,a,locally,managed,transaction,either,since,the,accessor,operates,on,an,existing,jms,session,in,this,case,p,setting,this,flag,to,true,will,use,a,short,local,jms,transaction,when,running,outside,of,a,managed,transaction,and,a,synchronized,local,jms,transaction,in,case,of,a,managed,transaction,other,than,an,xa,transaction,being,present,the,latter,has,the,effect,of,a,local,jms,transaction,being,managed,alongside,the,main,transaction,which,might,be,a,native,jdbc,transaction,with,the,jms,transaction,committing,right,after,the,main,transaction,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,transacted,boolean,session,transacted,this,session,transacted,session,transacted
JmsAccessor -> public void setSessionTransacted(boolean sessionTransacted);1368482696;Set the transaction mode that is used when creating a JMS {@link Session}._Default is "false"._<p>Note that within a JTA transaction, the parameters passed to_{@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)}_method are not taken into account. Depending on the J2EE transaction context,_the container makes its own decisions on these values. Analogously, these_parameters are not taken into account within a locally managed transaction_either, since the accessor operates on an existing JMS Session in this case._<p>Setting this flag to "true" will use a short local JMS transaction_when running outside of a managed transaction, and a synchronized local_JMS transaction in case of a managed transaction (other than an XA_transaction) being present. The latter has the effect of a local JMS_transaction being managed alongside the main transaction (which might_be a native JDBC transaction), with the JMS transaction committing_right after the main transaction._@see javax.jms.Connection#createSession(boolean, int);public void setSessionTransacted(boolean sessionTransacted) {_		this.sessionTransacted = sessionTransacted__	};set,the,transaction,mode,that,is,used,when,creating,a,jms,link,session,default,is,false,p,note,that,within,a,jta,transaction,the,parameters,passed,to,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,j2ee,transaction,context,the,container,makes,its,own,decisions,on,these,values,analogously,these,parameters,are,not,taken,into,account,within,a,locally,managed,transaction,either,since,the,accessor,operates,on,an,existing,jms,session,in,this,case,p,setting,this,flag,to,true,will,use,a,short,local,jms,transaction,when,running,outside,of,a,managed,transaction,and,a,synchronized,local,jms,transaction,in,case,of,a,managed,transaction,other,than,an,xa,transaction,being,present,the,latter,has,the,effect,of,a,local,jms,transaction,being,managed,alongside,the,main,transaction,which,might,be,a,native,jdbc,transaction,with,the,jms,transaction,committing,right,after,the,main,transaction,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,transacted,boolean,session,transacted,this,session,transacted,session,transacted
JmsAccessor -> public void setSessionTransacted(boolean sessionTransacted);1401724323;Set the transaction mode that is used when creating a JMS {@link Session}._Default is "false"._<p>Note that within a JTA transaction, the parameters passed to_{@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)}_method are not taken into account. Depending on the J2EE transaction context,_the container makes its own decisions on these values. Analogously, these_parameters are not taken into account within a locally managed transaction_either, since the accessor operates on an existing JMS Session in this case._<p>Setting this flag to "true" will use a short local JMS transaction_when running outside of a managed transaction, and a synchronized local_JMS transaction in case of a managed transaction (other than an XA_transaction) being present. This has the effect of a local JMS_transaction being managed alongside the main transaction (which might_be a native JDBC transaction), with the JMS transaction committing_right after the main transaction._@see javax.jms.Connection#createSession(boolean, int);public void setSessionTransacted(boolean sessionTransacted) {_		this.sessionTransacted = sessionTransacted__	};set,the,transaction,mode,that,is,used,when,creating,a,jms,link,session,default,is,false,p,note,that,within,a,jta,transaction,the,parameters,passed,to,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,j2ee,transaction,context,the,container,makes,its,own,decisions,on,these,values,analogously,these,parameters,are,not,taken,into,account,within,a,locally,managed,transaction,either,since,the,accessor,operates,on,an,existing,jms,session,in,this,case,p,setting,this,flag,to,true,will,use,a,short,local,jms,transaction,when,running,outside,of,a,managed,transaction,and,a,synchronized,local,jms,transaction,in,case,of,a,managed,transaction,other,than,an,xa,transaction,being,present,this,has,the,effect,of,a,local,jms,transaction,being,managed,alongside,the,main,transaction,which,might,be,a,native,jdbc,transaction,with,the,jms,transaction,committing,right,after,the,main,transaction,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,transacted,boolean,session,transacted,this,session,transacted,session,transacted
JmsAccessor -> public void setSessionTransacted(boolean sessionTransacted);1405696891;Set the transaction mode that is used when creating a JMS {@link Session}._Default is "false"._<p>Note that within a JTA transaction, the parameters passed to_{@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)}_method are not taken into account. Depending on the J2EE transaction context,_the container makes its own decisions on these values. Analogously, these_parameters are not taken into account within a locally managed transaction_either, since the accessor operates on an existing JMS Session in this case._<p>Setting this flag to "true" will use a short local JMS transaction_when running outside of a managed transaction, and a synchronized local_JMS transaction in case of a managed transaction (other than an XA_transaction) being present. This has the effect of a local JMS_transaction being managed alongside the main transaction (which might_be a native JDBC transaction), with the JMS transaction committing_right after the main transaction._@see javax.jms.Connection#createSession(boolean, int);public void setSessionTransacted(boolean sessionTransacted) {_		this.sessionTransacted = sessionTransacted__	};set,the,transaction,mode,that,is,used,when,creating,a,jms,link,session,default,is,false,p,note,that,within,a,jta,transaction,the,parameters,passed,to,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,j2ee,transaction,context,the,container,makes,its,own,decisions,on,these,values,analogously,these,parameters,are,not,taken,into,account,within,a,locally,managed,transaction,either,since,the,accessor,operates,on,an,existing,jms,session,in,this,case,p,setting,this,flag,to,true,will,use,a,short,local,jms,transaction,when,running,outside,of,a,managed,transaction,and,a,synchronized,local,jms,transaction,in,case,of,a,managed,transaction,other,than,an,xa,transaction,being,present,this,has,the,effect,of,a,local,jms,transaction,being,managed,alongside,the,main,transaction,which,might,be,a,native,jdbc,transaction,with,the,jms,transaction,committing,right,after,the,main,transaction,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,transacted,boolean,session,transacted,this,session,transacted,session,transacted
JmsAccessor -> public void setSessionTransacted(boolean sessionTransacted);1438003976;Set the transaction mode that is used when creating a JMS {@link Session}._Default is "false"._<p>Note that within a JTA transaction, the parameters passed to_{@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)}_method are not taken into account. Depending on the Java EE transaction context,_the container makes its own decisions on these values. Analogously, these_parameters are not taken into account within a locally managed transaction_either, since the accessor operates on an existing JMS Session in this case._<p>Setting this flag to "true" will use a short local JMS transaction_when running outside of a managed transaction, and a synchronized local_JMS transaction in case of a managed transaction (other than an XA_transaction) being present. This has the effect of a local JMS_transaction being managed alongside the main transaction (which might_be a native JDBC transaction), with the JMS transaction committing_right after the main transaction._@see javax.jms.Connection#createSession(boolean, int);public void setSessionTransacted(boolean sessionTransacted) {_		this.sessionTransacted = sessionTransacted__	};set,the,transaction,mode,that,is,used,when,creating,a,jms,link,session,default,is,false,p,note,that,within,a,jta,transaction,the,parameters,passed,to,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,java,ee,transaction,context,the,container,makes,its,own,decisions,on,these,values,analogously,these,parameters,are,not,taken,into,account,within,a,locally,managed,transaction,either,since,the,accessor,operates,on,an,existing,jms,session,in,this,case,p,setting,this,flag,to,true,will,use,a,short,local,jms,transaction,when,running,outside,of,a,managed,transaction,and,a,synchronized,local,jms,transaction,in,case,of,a,managed,transaction,other,than,an,xa,transaction,being,present,this,has,the,effect,of,a,local,jms,transaction,being,managed,alongside,the,main,transaction,which,might,be,a,native,jdbc,transaction,with,the,jms,transaction,committing,right,after,the,main,transaction,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,transacted,boolean,session,transacted,this,session,transacted,session,transacted
JmsAccessor -> public void setSessionTransacted(boolean sessionTransacted);1461047077;Set the transaction mode that is used when creating a JMS {@link Session}._Default is "false"._<p>Note that within a JTA transaction, the parameters passed to_{@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)}_method are not taken into account. Depending on the Java EE transaction context,_the container makes its own decisions on these values. Analogously, these_parameters are not taken into account within a locally managed transaction_either, since the accessor operates on an existing JMS Session in this case._<p>Setting this flag to "true" will use a short local JMS transaction_when running outside of a managed transaction, and a synchronized local_JMS transaction in case of a managed transaction (other than an XA_transaction) being present. This has the effect of a local JMS_transaction being managed alongside the main transaction (which might_be a native JDBC transaction), with the JMS transaction committing_right after the main transaction._@see javax.jms.Connection#createSession(boolean, int);public void setSessionTransacted(boolean sessionTransacted) {_		this.sessionTransacted = sessionTransacted__	};set,the,transaction,mode,that,is,used,when,creating,a,jms,link,session,default,is,false,p,note,that,within,a,jta,transaction,the,parameters,passed,to,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,java,ee,transaction,context,the,container,makes,its,own,decisions,on,these,values,analogously,these,parameters,are,not,taken,into,account,within,a,locally,managed,transaction,either,since,the,accessor,operates,on,an,existing,jms,session,in,this,case,p,setting,this,flag,to,true,will,use,a,short,local,jms,transaction,when,running,outside,of,a,managed,transaction,and,a,synchronized,local,jms,transaction,in,case,of,a,managed,transaction,other,than,an,xa,transaction,being,present,this,has,the,effect,of,a,local,jms,transaction,being,managed,alongside,the,main,transaction,which,might,be,a,native,jdbc,transaction,with,the,jms,transaction,committing,right,after,the,main,transaction,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,transacted,boolean,session,transacted,this,session,transacted,session,transacted
JmsAccessor -> public void setSessionTransacted(boolean sessionTransacted);1496837955;Set the transaction mode that is used when creating a JMS {@link Session}._Default is "false"._<p>Note that within a JTA transaction, the parameters passed to_{@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)}_method are not taken into account. Depending on the Java EE transaction context,_the container makes its own decisions on these values. Analogously, these_parameters are not taken into account within a locally managed transaction_either, since the accessor operates on an existing JMS Session in this case._<p>Setting this flag to "true" will use a short local JMS transaction_when running outside of a managed transaction, and a synchronized local_JMS transaction in case of a managed transaction (other than an XA_transaction) being present. This has the effect of a local JMS_transaction being managed alongside the main transaction (which might_be a native JDBC transaction), with the JMS transaction committing_right after the main transaction._@see javax.jms.Connection#createSession(boolean, int);public void setSessionTransacted(boolean sessionTransacted) {_		this.sessionTransacted = sessionTransacted__	};set,the,transaction,mode,that,is,used,when,creating,a,jms,link,session,default,is,false,p,note,that,within,a,jta,transaction,the,parameters,passed,to,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,java,ee,transaction,context,the,container,makes,its,own,decisions,on,these,values,analogously,these,parameters,are,not,taken,into,account,within,a,locally,managed,transaction,either,since,the,accessor,operates,on,an,existing,jms,session,in,this,case,p,setting,this,flag,to,true,will,use,a,short,local,jms,transaction,when,running,outside,of,a,managed,transaction,and,a,synchronized,local,jms,transaction,in,case,of,a,managed,transaction,other,than,an,xa,transaction,being,present,this,has,the,effect,of,a,local,jms,transaction,being,managed,alongside,the,main,transaction,which,might,be,a,native,jdbc,transaction,with,the,jms,transaction,committing,right,after,the,main,transaction,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,transacted,boolean,session,transacted,this,session,transacted,session,transacted
JmsAccessor -> public void setSessionTransacted(boolean sessionTransacted);1500448076;Set the transaction mode that is used when creating a JMS {@link Session}._Default is "false"._<p>Note that within a JTA transaction, the parameters passed to_{@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)}_method are not taken into account. Depending on the Java EE transaction context,_the container makes its own decisions on these values. Analogously, these_parameters are not taken into account within a locally managed transaction_either, since the accessor operates on an existing JMS Session in this case._<p>Setting this flag to "true" will use a short local JMS transaction_when running outside of a managed transaction, and a synchronized local_JMS transaction in case of a managed transaction (other than an XA_transaction) being present. This has the effect of a local JMS_transaction being managed alongside the main transaction (which might_be a native JDBC transaction), with the JMS transaction committing_right after the main transaction._@see javax.jms.Connection#createSession(boolean, int);public void setSessionTransacted(boolean sessionTransacted) {_		this.sessionTransacted = sessionTransacted__	};set,the,transaction,mode,that,is,used,when,creating,a,jms,link,session,default,is,false,p,note,that,within,a,jta,transaction,the,parameters,passed,to,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,java,ee,transaction,context,the,container,makes,its,own,decisions,on,these,values,analogously,these,parameters,are,not,taken,into,account,within,a,locally,managed,transaction,either,since,the,accessor,operates,on,an,existing,jms,session,in,this,case,p,setting,this,flag,to,true,will,use,a,short,local,jms,transaction,when,running,outside,of,a,managed,transaction,and,a,synchronized,local,jms,transaction,in,case,of,a,managed,transaction,other,than,an,xa,transaction,being,present,this,has,the,effect,of,a,local,jms,transaction,being,managed,alongside,the,main,transaction,which,might,be,a,native,jdbc,transaction,with,the,jms,transaction,committing,right,after,the,main,transaction,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,transacted,boolean,session,transacted,this,session,transacted,session,transacted
JmsAccessor -> public void setSessionTransacted(boolean sessionTransacted);1530174524;Set the transaction mode that is used when creating a JMS {@link Session}._Default is "false"._<p>Note that within a JTA transaction, the parameters passed to_{@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)}_method are not taken into account. Depending on the Java EE transaction context,_the container makes its own decisions on these values. Analogously, these_parameters are not taken into account within a locally managed transaction_either, since the accessor operates on an existing JMS Session in this case._<p>Setting this flag to "true" will use a short local JMS transaction_when running outside of a managed transaction, and a synchronized local_JMS transaction in case of a managed transaction (other than an XA_transaction) being present. This has the effect of a local JMS_transaction being managed alongside the main transaction (which might_be a native JDBC transaction), with the JMS transaction committing_right after the main transaction._@see javax.jms.Connection#createSession(boolean, int);public void setSessionTransacted(boolean sessionTransacted) {_		this.sessionTransacted = sessionTransacted__	};set,the,transaction,mode,that,is,used,when,creating,a,jms,link,session,default,is,false,p,note,that,within,a,jta,transaction,the,parameters,passed,to,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,java,ee,transaction,context,the,container,makes,its,own,decisions,on,these,values,analogously,these,parameters,are,not,taken,into,account,within,a,locally,managed,transaction,either,since,the,accessor,operates,on,an,existing,jms,session,in,this,case,p,setting,this,flag,to,true,will,use,a,short,local,jms,transaction,when,running,outside,of,a,managed,transaction,and,a,synchronized,local,jms,transaction,in,case,of,a,managed,transaction,other,than,an,xa,transaction,being,present,this,has,the,effect,of,a,local,jms,transaction,being,managed,alongside,the,main,transaction,which,might,be,a,native,jdbc,transaction,with,the,jms,transaction,committing,right,after,the,main,transaction,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,transacted,boolean,session,transacted,this,session,transacted,session,transacted
JmsAccessor -> protected Session createSession(Connection con) throws JMSException;1328020251;Create a JMS Session for the given Connection._<p>This implementation uses JMS 1.1 API._@param con the JMS Connection to create a Session for_@return the new JMS Session_@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#createSession(boolean, int);protected Session createSession(Connection con) throws JMSException {_		return con.createSession(isSessionTransacted(), getSessionAcknowledgeMode())__	};create,a,jms,session,for,the,given,connection,p,this,implementation,uses,jms,1,1,api,param,con,the,jms,connection,to,create,a,session,for,return,the,new,jms,session,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,create,session,boolean,int;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,is,session,transacted,get,session,acknowledge,mode
JmsAccessor -> protected Session createSession(Connection con) throws JMSException;1356735495;Create a JMS Session for the given Connection._<p>This implementation uses JMS 1.1 API._@param con the JMS Connection to create a Session for_@return the new JMS Session_@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#createSession(boolean, int);protected Session createSession(Connection con) throws JMSException {_		return con.createSession(isSessionTransacted(), getSessionAcknowledgeMode())__	};create,a,jms,session,for,the,given,connection,p,this,implementation,uses,jms,1,1,api,param,con,the,jms,connection,to,create,a,session,for,return,the,new,jms,session,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,create,session,boolean,int;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,is,session,transacted,get,session,acknowledge,mode
JmsAccessor -> protected Session createSession(Connection con) throws JMSException;1357119239;Create a JMS Session for the given Connection._<p>This implementation uses JMS 1.1 API._@param con the JMS Connection to create a Session for_@return the new JMS Session_@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#createSession(boolean, int);protected Session createSession(Connection con) throws JMSException {_		return con.createSession(isSessionTransacted(), getSessionAcknowledgeMode())__	};create,a,jms,session,for,the,given,connection,p,this,implementation,uses,jms,1,1,api,param,con,the,jms,connection,to,create,a,session,for,return,the,new,jms,session,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,create,session,boolean,int;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,is,session,transacted,get,session,acknowledge,mode
JmsAccessor -> protected Session createSession(Connection con) throws JMSException;1368482696;Create a JMS Session for the given Connection._<p>This implementation uses JMS 1.1 API._@param con the JMS Connection to create a Session for_@return the new JMS Session_@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#createSession(boolean, int);protected Session createSession(Connection con) throws JMSException {_		return con.createSession(isSessionTransacted(), getSessionAcknowledgeMode())__	};create,a,jms,session,for,the,given,connection,p,this,implementation,uses,jms,1,1,api,param,con,the,jms,connection,to,create,a,session,for,return,the,new,jms,session,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,create,session,boolean,int;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,is,session,transacted,get,session,acknowledge,mode
JmsAccessor -> protected Session createSession(Connection con) throws JMSException;1401724323;Create a JMS Session for the given Connection._<p>This implementation uses JMS 1.1 API._@param con the JMS Connection to create a Session for_@return the new JMS Session_@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#createSession(boolean, int);protected Session createSession(Connection con) throws JMSException {_		return con.createSession(isSessionTransacted(), getSessionAcknowledgeMode())__	};create,a,jms,session,for,the,given,connection,p,this,implementation,uses,jms,1,1,api,param,con,the,jms,connection,to,create,a,session,for,return,the,new,jms,session,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,create,session,boolean,int;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,is,session,transacted,get,session,acknowledge,mode
JmsAccessor -> protected Session createSession(Connection con) throws JMSException;1405696891;Create a JMS Session for the given Connection._<p>This implementation uses JMS 1.1 API._@param con the JMS Connection to create a Session for_@return the new JMS Session_@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#createSession(boolean, int);protected Session createSession(Connection con) throws JMSException {_		return con.createSession(isSessionTransacted(), getSessionAcknowledgeMode())__	};create,a,jms,session,for,the,given,connection,p,this,implementation,uses,jms,1,1,api,param,con,the,jms,connection,to,create,a,session,for,return,the,new,jms,session,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,create,session,boolean,int;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,is,session,transacted,get,session,acknowledge,mode
JmsAccessor -> protected Session createSession(Connection con) throws JMSException;1438003976;Create a JMS Session for the given Connection._<p>This implementation uses JMS 1.1 API._@param con the JMS Connection to create a Session for_@return the new JMS Session_@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#createSession(boolean, int);protected Session createSession(Connection con) throws JMSException {_		return con.createSession(isSessionTransacted(), getSessionAcknowledgeMode())__	};create,a,jms,session,for,the,given,connection,p,this,implementation,uses,jms,1,1,api,param,con,the,jms,connection,to,create,a,session,for,return,the,new,jms,session,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,create,session,boolean,int;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,is,session,transacted,get,session,acknowledge,mode
JmsAccessor -> protected Session createSession(Connection con) throws JMSException;1461047077;Create a JMS Session for the given Connection._<p>This implementation uses JMS 1.1 API._@param con the JMS Connection to create a Session for_@return the new JMS Session_@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#createSession(boolean, int);protected Session createSession(Connection con) throws JMSException {_		return con.createSession(isSessionTransacted(), getSessionAcknowledgeMode())__	};create,a,jms,session,for,the,given,connection,p,this,implementation,uses,jms,1,1,api,param,con,the,jms,connection,to,create,a,session,for,return,the,new,jms,session,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,create,session,boolean,int;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,is,session,transacted,get,session,acknowledge,mode
JmsAccessor -> protected Session createSession(Connection con) throws JMSException;1496837955;Create a JMS Session for the given Connection._<p>This implementation uses JMS 1.1 API._@param con the JMS Connection to create a Session for_@return the new JMS Session_@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#createSession(boolean, int);protected Session createSession(Connection con) throws JMSException {_		return con.createSession(isSessionTransacted(), getSessionAcknowledgeMode())__	};create,a,jms,session,for,the,given,connection,p,this,implementation,uses,jms,1,1,api,param,con,the,jms,connection,to,create,a,session,for,return,the,new,jms,session,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,create,session,boolean,int;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,is,session,transacted,get,session,acknowledge,mode
JmsAccessor -> protected Session createSession(Connection con) throws JMSException;1500448076;Create a JMS Session for the given Connection._<p>This implementation uses JMS 1.1 API._@param con the JMS Connection to create a Session for_@return the new JMS Session_@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#createSession(boolean, int);protected Session createSession(Connection con) throws JMSException {_		return con.createSession(isSessionTransacted(), getSessionAcknowledgeMode())__	};create,a,jms,session,for,the,given,connection,p,this,implementation,uses,jms,1,1,api,param,con,the,jms,connection,to,create,a,session,for,return,the,new,jms,session,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,create,session,boolean,int;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,is,session,transacted,get,session,acknowledge,mode
JmsAccessor -> protected Session createSession(Connection con) throws JMSException;1530174524;Create a JMS Session for the given Connection._<p>This implementation uses JMS 1.1 API._@param con the JMS Connection to create a Session for_@return the new JMS Session_@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#createSession(boolean, int);protected Session createSession(Connection con) throws JMSException {_		return con.createSession(isSessionTransacted(), getSessionAcknowledgeMode())__	};create,a,jms,session,for,the,given,connection,p,this,implementation,uses,jms,1,1,api,param,con,the,jms,connection,to,create,a,session,for,return,the,new,jms,session,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,create,session,boolean,int;protected,session,create,session,connection,con,throws,jmsexception,return,con,create,session,is,session,transacted,get,session,acknowledge,mode
JmsAccessor -> public boolean isSessionTransacted();1328020251;Return whether the JMS {@link Session sessions} used by this_accessor are supposed to be transacted._@see #setSessionTransacted(boolean);public boolean isSessionTransacted() {_		return this.sessionTransacted__	};return,whether,the,jms,link,session,sessions,used,by,this,accessor,are,supposed,to,be,transacted,see,set,session,transacted,boolean;public,boolean,is,session,transacted,return,this,session,transacted
JmsAccessor -> public boolean isSessionTransacted();1356735495;Return whether the JMS {@link Session sessions} used by this_accessor are supposed to be transacted._@see #setSessionTransacted(boolean);public boolean isSessionTransacted() {_		return this.sessionTransacted__	};return,whether,the,jms,link,session,sessions,used,by,this,accessor,are,supposed,to,be,transacted,see,set,session,transacted,boolean;public,boolean,is,session,transacted,return,this,session,transacted
JmsAccessor -> public boolean isSessionTransacted();1357119239;Return whether the JMS {@link Session sessions} used by this_accessor are supposed to be transacted._@see #setSessionTransacted(boolean);public boolean isSessionTransacted() {_		return this.sessionTransacted__	};return,whether,the,jms,link,session,sessions,used,by,this,accessor,are,supposed,to,be,transacted,see,set,session,transacted,boolean;public,boolean,is,session,transacted,return,this,session,transacted
JmsAccessor -> public boolean isSessionTransacted();1368482696;Return whether the JMS {@link Session sessions} used by this_accessor are supposed to be transacted._@see #setSessionTransacted(boolean);public boolean isSessionTransacted() {_		return this.sessionTransacted__	};return,whether,the,jms,link,session,sessions,used,by,this,accessor,are,supposed,to,be,transacted,see,set,session,transacted,boolean;public,boolean,is,session,transacted,return,this,session,transacted
JmsAccessor -> public boolean isSessionTransacted();1401724323;Return whether the JMS {@link Session sessions} used by this_accessor are supposed to be transacted._@see #setSessionTransacted(boolean);public boolean isSessionTransacted() {_		return this.sessionTransacted__	};return,whether,the,jms,link,session,sessions,used,by,this,accessor,are,supposed,to,be,transacted,see,set,session,transacted,boolean;public,boolean,is,session,transacted,return,this,session,transacted
JmsAccessor -> public boolean isSessionTransacted();1405696891;Return whether the JMS {@link Session sessions} used by this_accessor are supposed to be transacted._@see #setSessionTransacted(boolean);public boolean isSessionTransacted() {_		return this.sessionTransacted__	};return,whether,the,jms,link,session,sessions,used,by,this,accessor,are,supposed,to,be,transacted,see,set,session,transacted,boolean;public,boolean,is,session,transacted,return,this,session,transacted
JmsAccessor -> public boolean isSessionTransacted();1438003976;Return whether the JMS {@link Session sessions} used by this_accessor are supposed to be transacted._@see #setSessionTransacted(boolean);public boolean isSessionTransacted() {_		return this.sessionTransacted__	};return,whether,the,jms,link,session,sessions,used,by,this,accessor,are,supposed,to,be,transacted,see,set,session,transacted,boolean;public,boolean,is,session,transacted,return,this,session,transacted
JmsAccessor -> public boolean isSessionTransacted();1461047077;Return whether the JMS {@link Session sessions} used by this_accessor are supposed to be transacted._@see #setSessionTransacted(boolean);public boolean isSessionTransacted() {_		return this.sessionTransacted__	};return,whether,the,jms,link,session,sessions,used,by,this,accessor,are,supposed,to,be,transacted,see,set,session,transacted,boolean;public,boolean,is,session,transacted,return,this,session,transacted
JmsAccessor -> public boolean isSessionTransacted();1496837955;Return whether the JMS {@link Session sessions} used by this_accessor are supposed to be transacted._@see #setSessionTransacted(boolean);public boolean isSessionTransacted() {_		return this.sessionTransacted__	};return,whether,the,jms,link,session,sessions,used,by,this,accessor,are,supposed,to,be,transacted,see,set,session,transacted,boolean;public,boolean,is,session,transacted,return,this,session,transacted
JmsAccessor -> public boolean isSessionTransacted();1500448076;Return whether the JMS {@link Session sessions} used by this_accessor are supposed to be transacted._@see #setSessionTransacted(boolean);public boolean isSessionTransacted() {_		return this.sessionTransacted__	};return,whether,the,jms,link,session,sessions,used,by,this,accessor,are,supposed,to,be,transacted,see,set,session,transacted,boolean;public,boolean,is,session,transacted,return,this,session,transacted
JmsAccessor -> public boolean isSessionTransacted();1530174524;Return whether the JMS {@link Session sessions} used by this_accessor are supposed to be transacted._@see #setSessionTransacted(boolean);public boolean isSessionTransacted() {_		return this.sessionTransacted__	};return,whether,the,jms,link,session,sessions,used,by,this,accessor,are,supposed,to,be,transacted,see,set,session,transacted,boolean;public,boolean,is,session,transacted,return,this,session,transacted
JmsAccessor -> public void setSessionAcknowledgeMode(int sessionAcknowledgeMode);1328020251;Set the JMS acknowledgement mode that is used when creating a JMS_{@link Session} to send a message._<p>Default is {@link Session#AUTO_ACKNOWLEDGE}._<p>Vendor-specific extensions to the acknowledgment mode can be set here as well._<p>Note that that inside an EJB the parameters to_create(Queue/Topic)Session(boolean transacted, int acknowledgeMode) method_are not taken into account. Depending on the transaction context in the EJB,_the container makes its own decisions on these values. See section 17.3.5_of the EJB spec._@param sessionAcknowledgeMode the acknowledgement mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeMode(int sessionAcknowledgeMode) {_		this.sessionAcknowledgeMode = sessionAcknowledgeMode__	};set,the,jms,acknowledgement,mode,that,is,used,when,creating,a,jms,link,session,to,send,a,message,p,default,is,link,session,p,vendor,specific,extensions,to,the,acknowledgment,mode,can,be,set,here,as,well,p,note,that,that,inside,an,ejb,the,parameters,to,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,transaction,context,in,the,ejb,the,container,makes,its,own,decisions,on,these,values,see,section,17,3,5,of,the,ejb,spec,param,session,acknowledge,mode,the,acknowledgement,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,int,session,acknowledge,mode,this,session,acknowledge,mode,session,acknowledge,mode
JmsAccessor -> public void setSessionAcknowledgeMode(int sessionAcknowledgeMode);1356735495;Set the JMS acknowledgement mode that is used when creating a JMS_{@link Session} to send a message._<p>Default is {@link Session#AUTO_ACKNOWLEDGE}._<p>Vendor-specific extensions to the acknowledgment mode can be set here as well._<p>Note that that inside an EJB the parameters to_create(Queue/Topic)Session(boolean transacted, int acknowledgeMode) method_are not taken into account. Depending on the transaction context in the EJB,_the container makes its own decisions on these values. See section 17.3.5_of the EJB spec._@param sessionAcknowledgeMode the acknowledgement mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeMode(int sessionAcknowledgeMode) {_		this.sessionAcknowledgeMode = sessionAcknowledgeMode__	};set,the,jms,acknowledgement,mode,that,is,used,when,creating,a,jms,link,session,to,send,a,message,p,default,is,link,session,p,vendor,specific,extensions,to,the,acknowledgment,mode,can,be,set,here,as,well,p,note,that,that,inside,an,ejb,the,parameters,to,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,transaction,context,in,the,ejb,the,container,makes,its,own,decisions,on,these,values,see,section,17,3,5,of,the,ejb,spec,param,session,acknowledge,mode,the,acknowledgement,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,int,session,acknowledge,mode,this,session,acknowledge,mode,session,acknowledge,mode
JmsAccessor -> public void setSessionAcknowledgeMode(int sessionAcknowledgeMode);1357119239;Set the JMS acknowledgement mode that is used when creating a JMS_{@link Session} to send a message._<p>Default is {@link Session#AUTO_ACKNOWLEDGE}._<p>Vendor-specific extensions to the acknowledgment mode can be set here as well._<p>Note that that inside an EJB the parameters to_create(Queue/Topic)Session(boolean transacted, int acknowledgeMode) method_are not taken into account. Depending on the transaction context in the EJB,_the container makes its own decisions on these values. See section 17.3.5_of the EJB spec._@param sessionAcknowledgeMode the acknowledgement mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeMode(int sessionAcknowledgeMode) {_		this.sessionAcknowledgeMode = sessionAcknowledgeMode__	};set,the,jms,acknowledgement,mode,that,is,used,when,creating,a,jms,link,session,to,send,a,message,p,default,is,link,session,p,vendor,specific,extensions,to,the,acknowledgment,mode,can,be,set,here,as,well,p,note,that,that,inside,an,ejb,the,parameters,to,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,transaction,context,in,the,ejb,the,container,makes,its,own,decisions,on,these,values,see,section,17,3,5,of,the,ejb,spec,param,session,acknowledge,mode,the,acknowledgement,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,int,session,acknowledge,mode,this,session,acknowledge,mode,session,acknowledge,mode
JmsAccessor -> public void setSessionAcknowledgeMode(int sessionAcknowledgeMode);1368482696;Set the JMS acknowledgement mode that is used when creating a JMS_{@link Session} to send a message._<p>Default is {@link Session#AUTO_ACKNOWLEDGE}._<p>Vendor-specific extensions to the acknowledgment mode can be set here as well._<p>Note that that inside an EJB the parameters to_create(Queue/Topic)Session(boolean transacted, int acknowledgeMode) method_are not taken into account. Depending on the transaction context in the EJB,_the container makes its own decisions on these values. See section 17.3.5_of the EJB spec._@param sessionAcknowledgeMode the acknowledgement mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeMode(int sessionAcknowledgeMode) {_		this.sessionAcknowledgeMode = sessionAcknowledgeMode__	};set,the,jms,acknowledgement,mode,that,is,used,when,creating,a,jms,link,session,to,send,a,message,p,default,is,link,session,p,vendor,specific,extensions,to,the,acknowledgment,mode,can,be,set,here,as,well,p,note,that,that,inside,an,ejb,the,parameters,to,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,transaction,context,in,the,ejb,the,container,makes,its,own,decisions,on,these,values,see,section,17,3,5,of,the,ejb,spec,param,session,acknowledge,mode,the,acknowledgement,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,int,session,acknowledge,mode,this,session,acknowledge,mode,session,acknowledge,mode
JmsAccessor -> public void setSessionAcknowledgeMode(int sessionAcknowledgeMode);1401724323;Set the JMS acknowledgement mode that is used when creating a JMS_{@link Session} to send a message._<p>Default is {@link Session#AUTO_ACKNOWLEDGE}._<p>Vendor-specific extensions to the acknowledgment mode can be set here as well._<p>Note that that inside an EJB the parameters to_create(Queue/Topic)Session(boolean transacted, int acknowledgeMode) method_are not taken into account. Depending on the transaction context in the EJB,_the container makes its own decisions on these values. See section 17.3.5_of the EJB spec._@param sessionAcknowledgeMode the acknowledgement mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeMode(int sessionAcknowledgeMode) {_		this.sessionAcknowledgeMode = sessionAcknowledgeMode__	};set,the,jms,acknowledgement,mode,that,is,used,when,creating,a,jms,link,session,to,send,a,message,p,default,is,link,session,p,vendor,specific,extensions,to,the,acknowledgment,mode,can,be,set,here,as,well,p,note,that,that,inside,an,ejb,the,parameters,to,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,transaction,context,in,the,ejb,the,container,makes,its,own,decisions,on,these,values,see,section,17,3,5,of,the,ejb,spec,param,session,acknowledge,mode,the,acknowledgement,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,int,session,acknowledge,mode,this,session,acknowledge,mode,session,acknowledge,mode
JmsAccessor -> public void setSessionAcknowledgeMode(int sessionAcknowledgeMode);1405696891;Set the JMS acknowledgement mode that is used when creating a JMS_{@link Session} to send a message._<p>Default is {@link Session#AUTO_ACKNOWLEDGE}._<p>Vendor-specific extensions to the acknowledgment mode can be set here as well._<p>Note that that inside an EJB, the parameters to the_{@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)} method_are not taken into account. Depending on the transaction context in the EJB,_the container makes its own decisions on these values. See section 17.3.5_of the EJB spec._@param sessionAcknowledgeMode the acknowledgement mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeMode(int sessionAcknowledgeMode) {_		this.sessionAcknowledgeMode = sessionAcknowledgeMode__	};set,the,jms,acknowledgement,mode,that,is,used,when,creating,a,jms,link,session,to,send,a,message,p,default,is,link,session,p,vendor,specific,extensions,to,the,acknowledgment,mode,can,be,set,here,as,well,p,note,that,that,inside,an,ejb,the,parameters,to,the,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,transaction,context,in,the,ejb,the,container,makes,its,own,decisions,on,these,values,see,section,17,3,5,of,the,ejb,spec,param,session,acknowledge,mode,the,acknowledgement,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,int,session,acknowledge,mode,this,session,acknowledge,mode,session,acknowledge,mode
JmsAccessor -> public void setSessionAcknowledgeMode(int sessionAcknowledgeMode);1438003976;Set the JMS acknowledgement mode that is used when creating a JMS_{@link Session} to send a message._<p>Default is {@link Session#AUTO_ACKNOWLEDGE}._<p>Vendor-specific extensions to the acknowledgment mode can be set here as well._<p>Note that that inside an EJB, the parameters to the_{@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)} method_are not taken into account. Depending on the transaction context in the EJB,_the container makes its own decisions on these values. See section 17.3.5_of the EJB spec._@param sessionAcknowledgeMode the acknowledgement mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeMode(int sessionAcknowledgeMode) {_		this.sessionAcknowledgeMode = sessionAcknowledgeMode__	};set,the,jms,acknowledgement,mode,that,is,used,when,creating,a,jms,link,session,to,send,a,message,p,default,is,link,session,p,vendor,specific,extensions,to,the,acknowledgment,mode,can,be,set,here,as,well,p,note,that,that,inside,an,ejb,the,parameters,to,the,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,transaction,context,in,the,ejb,the,container,makes,its,own,decisions,on,these,values,see,section,17,3,5,of,the,ejb,spec,param,session,acknowledge,mode,the,acknowledgement,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,int,session,acknowledge,mode,this,session,acknowledge,mode,session,acknowledge,mode
JmsAccessor -> public void setSessionAcknowledgeMode(int sessionAcknowledgeMode);1461047077;Set the JMS acknowledgement mode that is used when creating a JMS_{@link Session} to send a message._<p>Default is {@link Session#AUTO_ACKNOWLEDGE}._<p>Vendor-specific extensions to the acknowledgment mode can be set here as well._<p>Note that inside an EJB, the parameters to the_{@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)} method_are not taken into account. Depending on the transaction context in the EJB,_the container makes its own decisions on these values. See section 17.3.5_of the EJB spec._@param sessionAcknowledgeMode the acknowledgement mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeMode(int sessionAcknowledgeMode) {_		this.sessionAcknowledgeMode = sessionAcknowledgeMode__	};set,the,jms,acknowledgement,mode,that,is,used,when,creating,a,jms,link,session,to,send,a,message,p,default,is,link,session,p,vendor,specific,extensions,to,the,acknowledgment,mode,can,be,set,here,as,well,p,note,that,inside,an,ejb,the,parameters,to,the,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,transaction,context,in,the,ejb,the,container,makes,its,own,decisions,on,these,values,see,section,17,3,5,of,the,ejb,spec,param,session,acknowledge,mode,the,acknowledgement,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,int,session,acknowledge,mode,this,session,acknowledge,mode,session,acknowledge,mode
JmsAccessor -> public void setSessionAcknowledgeMode(int sessionAcknowledgeMode);1496837955;Set the JMS acknowledgement mode that is used when creating a JMS_{@link Session} to send a message._<p>Default is {@link Session#AUTO_ACKNOWLEDGE}._<p>Vendor-specific extensions to the acknowledgment mode can be set here as well._<p>Note that inside an EJB, the parameters to the_{@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)} method_are not taken into account. Depending on the transaction context in the EJB,_the container makes its own decisions on these values. See section 17.3.5_of the EJB spec._@param sessionAcknowledgeMode the acknowledgement mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeMode(int sessionAcknowledgeMode) {_		this.sessionAcknowledgeMode = sessionAcknowledgeMode__	};set,the,jms,acknowledgement,mode,that,is,used,when,creating,a,jms,link,session,to,send,a,message,p,default,is,link,session,p,vendor,specific,extensions,to,the,acknowledgment,mode,can,be,set,here,as,well,p,note,that,inside,an,ejb,the,parameters,to,the,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,transaction,context,in,the,ejb,the,container,makes,its,own,decisions,on,these,values,see,section,17,3,5,of,the,ejb,spec,param,session,acknowledge,mode,the,acknowledgement,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,int,session,acknowledge,mode,this,session,acknowledge,mode,session,acknowledge,mode
JmsAccessor -> public void setSessionAcknowledgeMode(int sessionAcknowledgeMode);1500448076;Set the JMS acknowledgement mode that is used when creating a JMS_{@link Session} to send a message._<p>Default is {@link Session#AUTO_ACKNOWLEDGE}._<p>Vendor-specific extensions to the acknowledgment mode can be set here as well._<p>Note that inside an EJB, the parameters to the_{@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)} method_are not taken into account. Depending on the transaction context in the EJB,_the container makes its own decisions on these values. See section 17.3.5_of the EJB spec._@param sessionAcknowledgeMode the acknowledgement mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeMode(int sessionAcknowledgeMode) {_		this.sessionAcknowledgeMode = sessionAcknowledgeMode__	};set,the,jms,acknowledgement,mode,that,is,used,when,creating,a,jms,link,session,to,send,a,message,p,default,is,link,session,p,vendor,specific,extensions,to,the,acknowledgment,mode,can,be,set,here,as,well,p,note,that,inside,an,ejb,the,parameters,to,the,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,transaction,context,in,the,ejb,the,container,makes,its,own,decisions,on,these,values,see,section,17,3,5,of,the,ejb,spec,param,session,acknowledge,mode,the,acknowledgement,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,int,session,acknowledge,mode,this,session,acknowledge,mode,session,acknowledge,mode
JmsAccessor -> public void setSessionAcknowledgeMode(int sessionAcknowledgeMode);1530174524;Set the JMS acknowledgement mode that is used when creating a JMS_{@link Session} to send a message._<p>Default is {@link Session#AUTO_ACKNOWLEDGE}._<p>Vendor-specific extensions to the acknowledgment mode can be set here as well._<p>Note that inside an EJB, the parameters to the_{@code create(Queue/Topic)Session(boolean transacted, int acknowledgeMode)} method_are not taken into account. Depending on the transaction context in the EJB,_the container makes its own decisions on these values. See section 17.3.5_of the EJB spec._@param sessionAcknowledgeMode the acknowledgement mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Connection#createSession(boolean, int);public void setSessionAcknowledgeMode(int sessionAcknowledgeMode) {_		this.sessionAcknowledgeMode = sessionAcknowledgeMode__	};set,the,jms,acknowledgement,mode,that,is,used,when,creating,a,jms,link,session,to,send,a,message,p,default,is,link,session,p,vendor,specific,extensions,to,the,acknowledgment,mode,can,be,set,here,as,well,p,note,that,inside,an,ejb,the,parameters,to,the,code,create,queue,topic,session,boolean,transacted,int,acknowledge,mode,method,are,not,taken,into,account,depending,on,the,transaction,context,in,the,ejb,the,container,makes,its,own,decisions,on,these,values,see,section,17,3,5,of,the,ejb,spec,param,session,acknowledge,mode,the,acknowledgement,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,connection,create,session,boolean,int;public,void,set,session,acknowledge,mode,int,session,acknowledge,mode,this,session,acknowledge,mode,session,acknowledge,mode
JmsAccessor -> public int getSessionAcknowledgeMode();1328020251;Return the acknowledgement mode for JMS {@link Session sessions}.;public int getSessionAcknowledgeMode() {_		return this.sessionAcknowledgeMode__	};return,the,acknowledgement,mode,for,jms,link,session,sessions;public,int,get,session,acknowledge,mode,return,this,session,acknowledge,mode
JmsAccessor -> public int getSessionAcknowledgeMode();1356735495;Return the acknowledgement mode for JMS {@link Session sessions}.;public int getSessionAcknowledgeMode() {_		return this.sessionAcknowledgeMode__	};return,the,acknowledgement,mode,for,jms,link,session,sessions;public,int,get,session,acknowledge,mode,return,this,session,acknowledge,mode
JmsAccessor -> public int getSessionAcknowledgeMode();1357119239;Return the acknowledgement mode for JMS {@link Session sessions}.;public int getSessionAcknowledgeMode() {_		return this.sessionAcknowledgeMode__	};return,the,acknowledgement,mode,for,jms,link,session,sessions;public,int,get,session,acknowledge,mode,return,this,session,acknowledge,mode
JmsAccessor -> public int getSessionAcknowledgeMode();1368482696;Return the acknowledgement mode for JMS {@link Session sessions}.;public int getSessionAcknowledgeMode() {_		return this.sessionAcknowledgeMode__	};return,the,acknowledgement,mode,for,jms,link,session,sessions;public,int,get,session,acknowledge,mode,return,this,session,acknowledge,mode
JmsAccessor -> public int getSessionAcknowledgeMode();1401724323;Return the acknowledgement mode for JMS {@link Session sessions}.;public int getSessionAcknowledgeMode() {_		return this.sessionAcknowledgeMode__	};return,the,acknowledgement,mode,for,jms,link,session,sessions;public,int,get,session,acknowledge,mode,return,this,session,acknowledge,mode
JmsAccessor -> public int getSessionAcknowledgeMode();1405696891;Return the acknowledgement mode for JMS {@link Session sessions}.;public int getSessionAcknowledgeMode() {_		return this.sessionAcknowledgeMode__	};return,the,acknowledgement,mode,for,jms,link,session,sessions;public,int,get,session,acknowledge,mode,return,this,session,acknowledge,mode
JmsAccessor -> public int getSessionAcknowledgeMode();1438003976;Return the acknowledgement mode for JMS {@link Session sessions}.;public int getSessionAcknowledgeMode() {_		return this.sessionAcknowledgeMode__	};return,the,acknowledgement,mode,for,jms,link,session,sessions;public,int,get,session,acknowledge,mode,return,this,session,acknowledge,mode
JmsAccessor -> public int getSessionAcknowledgeMode();1461047077;Return the acknowledgement mode for JMS {@link Session sessions}.;public int getSessionAcknowledgeMode() {_		return this.sessionAcknowledgeMode__	};return,the,acknowledgement,mode,for,jms,link,session,sessions;public,int,get,session,acknowledge,mode,return,this,session,acknowledge,mode
JmsAccessor -> public int getSessionAcknowledgeMode();1496837955;Return the acknowledgement mode for JMS {@link Session sessions}.;public int getSessionAcknowledgeMode() {_		return this.sessionAcknowledgeMode__	};return,the,acknowledgement,mode,for,jms,link,session,sessions;public,int,get,session,acknowledge,mode,return,this,session,acknowledge,mode
JmsAccessor -> public int getSessionAcknowledgeMode();1500448076;Return the acknowledgement mode for JMS {@link Session sessions}.;public int getSessionAcknowledgeMode() {_		return this.sessionAcknowledgeMode__	};return,the,acknowledgement,mode,for,jms,link,session,sessions;public,int,get,session,acknowledge,mode,return,this,session,acknowledge,mode
JmsAccessor -> public int getSessionAcknowledgeMode();1530174524;Return the acknowledgement mode for JMS {@link Session sessions}.;public int getSessionAcknowledgeMode() {_		return this.sessionAcknowledgeMode__	};return,the,acknowledgement,mode,for,jms,link,session,sessions;public,int,get,session,acknowledge,mode,return,this,session,acknowledge,mode
JmsAccessor -> protected boolean isClientAcknowledge(Session session) throws JMSException;1328020251;Determine whether the given Session is in client acknowledge mode._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to check_@return whether the given Session is in client acknowledge mode_@throws javax.jms.JMSException if thrown by JMS API methods_@see javax.jms.Session#getAcknowledgeMode()_@see javax.jms.Session#CLIENT_ACKNOWLEDGE;protected boolean isClientAcknowledge(Session session) throws JMSException {_		return (session.getAcknowledgeMode() == Session.CLIENT_ACKNOWLEDGE)__	};determine,whether,the,given,session,is,in,client,acknowledge,mode,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,check,return,whether,the,given,session,is,in,client,acknowledge,mode,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,session,get,acknowledge,mode,see,javax,jms,session;protected,boolean,is,client,acknowledge,session,session,throws,jmsexception,return,session,get,acknowledge,mode,session
JmsAccessor -> protected boolean isClientAcknowledge(Session session) throws JMSException;1356735495;Determine whether the given Session is in client acknowledge mode._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to check_@return whether the given Session is in client acknowledge mode_@throws javax.jms.JMSException if thrown by JMS API methods_@see javax.jms.Session#getAcknowledgeMode()_@see javax.jms.Session#CLIENT_ACKNOWLEDGE;protected boolean isClientAcknowledge(Session session) throws JMSException {_		return (session.getAcknowledgeMode() == Session.CLIENT_ACKNOWLEDGE)__	};determine,whether,the,given,session,is,in,client,acknowledge,mode,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,check,return,whether,the,given,session,is,in,client,acknowledge,mode,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,session,get,acknowledge,mode,see,javax,jms,session;protected,boolean,is,client,acknowledge,session,session,throws,jmsexception,return,session,get,acknowledge,mode,session
JmsAccessor -> protected boolean isClientAcknowledge(Session session) throws JMSException;1357119239;Determine whether the given Session is in client acknowledge mode._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to check_@return whether the given Session is in client acknowledge mode_@throws javax.jms.JMSException if thrown by JMS API methods_@see javax.jms.Session#getAcknowledgeMode()_@see javax.jms.Session#CLIENT_ACKNOWLEDGE;protected boolean isClientAcknowledge(Session session) throws JMSException {_		return (session.getAcknowledgeMode() == Session.CLIENT_ACKNOWLEDGE)__	};determine,whether,the,given,session,is,in,client,acknowledge,mode,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,check,return,whether,the,given,session,is,in,client,acknowledge,mode,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,session,get,acknowledge,mode,see,javax,jms,session;protected,boolean,is,client,acknowledge,session,session,throws,jmsexception,return,session,get,acknowledge,mode,session
JmsAccessor -> protected boolean isClientAcknowledge(Session session) throws JMSException;1368482696;Determine whether the given Session is in client acknowledge mode._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to check_@return whether the given Session is in client acknowledge mode_@throws javax.jms.JMSException if thrown by JMS API methods_@see javax.jms.Session#getAcknowledgeMode()_@see javax.jms.Session#CLIENT_ACKNOWLEDGE;protected boolean isClientAcknowledge(Session session) throws JMSException {_		return (session.getAcknowledgeMode() == Session.CLIENT_ACKNOWLEDGE)__	};determine,whether,the,given,session,is,in,client,acknowledge,mode,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,check,return,whether,the,given,session,is,in,client,acknowledge,mode,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,session,get,acknowledge,mode,see,javax,jms,session;protected,boolean,is,client,acknowledge,session,session,throws,jmsexception,return,session,get,acknowledge,mode,session
JmsAccessor -> protected boolean isClientAcknowledge(Session session) throws JMSException;1401724323;Determine whether the given Session is in client acknowledge mode._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to check_@return whether the given Session is in client acknowledge mode_@throws javax.jms.JMSException if thrown by JMS API methods_@see javax.jms.Session#getAcknowledgeMode()_@see javax.jms.Session#CLIENT_ACKNOWLEDGE;protected boolean isClientAcknowledge(Session session) throws JMSException {_		return (session.getAcknowledgeMode() == Session.CLIENT_ACKNOWLEDGE)__	};determine,whether,the,given,session,is,in,client,acknowledge,mode,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,check,return,whether,the,given,session,is,in,client,acknowledge,mode,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,session,get,acknowledge,mode,see,javax,jms,session;protected,boolean,is,client,acknowledge,session,session,throws,jmsexception,return,session,get,acknowledge,mode,session
JmsAccessor -> protected boolean isClientAcknowledge(Session session) throws JMSException;1405696891;Determine whether the given Session is in client acknowledge mode._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to check_@return whether the given Session is in client acknowledge mode_@throws javax.jms.JMSException if thrown by JMS API methods_@see javax.jms.Session#getAcknowledgeMode()_@see javax.jms.Session#CLIENT_ACKNOWLEDGE;protected boolean isClientAcknowledge(Session session) throws JMSException {_		return (session.getAcknowledgeMode() == Session.CLIENT_ACKNOWLEDGE)__	};determine,whether,the,given,session,is,in,client,acknowledge,mode,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,check,return,whether,the,given,session,is,in,client,acknowledge,mode,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,session,get,acknowledge,mode,see,javax,jms,session;protected,boolean,is,client,acknowledge,session,session,throws,jmsexception,return,session,get,acknowledge,mode,session
JmsAccessor -> protected boolean isClientAcknowledge(Session session) throws JMSException;1438003976;Determine whether the given Session is in client acknowledge mode._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to check_@return whether the given Session is in client acknowledge mode_@throws javax.jms.JMSException if thrown by JMS API methods_@see javax.jms.Session#getAcknowledgeMode()_@see javax.jms.Session#CLIENT_ACKNOWLEDGE;protected boolean isClientAcknowledge(Session session) throws JMSException {_		return (session.getAcknowledgeMode() == Session.CLIENT_ACKNOWLEDGE)__	};determine,whether,the,given,session,is,in,client,acknowledge,mode,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,check,return,whether,the,given,session,is,in,client,acknowledge,mode,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,session,get,acknowledge,mode,see,javax,jms,session;protected,boolean,is,client,acknowledge,session,session,throws,jmsexception,return,session,get,acknowledge,mode,session
JmsAccessor -> protected boolean isClientAcknowledge(Session session) throws JMSException;1461047077;Determine whether the given Session is in client acknowledge mode._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to check_@return whether the given Session is in client acknowledge mode_@throws javax.jms.JMSException if thrown by JMS API methods_@see javax.jms.Session#getAcknowledgeMode()_@see javax.jms.Session#CLIENT_ACKNOWLEDGE;protected boolean isClientAcknowledge(Session session) throws JMSException {_		return (session.getAcknowledgeMode() == Session.CLIENT_ACKNOWLEDGE)__	};determine,whether,the,given,session,is,in,client,acknowledge,mode,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,check,return,whether,the,given,session,is,in,client,acknowledge,mode,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,session,get,acknowledge,mode,see,javax,jms,session;protected,boolean,is,client,acknowledge,session,session,throws,jmsexception,return,session,get,acknowledge,mode,session
JmsAccessor -> protected boolean isClientAcknowledge(Session session) throws JMSException;1496837955;Determine whether the given Session is in client acknowledge mode._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to check_@return whether the given Session is in client acknowledge mode_@throws javax.jms.JMSException if thrown by JMS API methods_@see javax.jms.Session#getAcknowledgeMode()_@see javax.jms.Session#CLIENT_ACKNOWLEDGE;protected boolean isClientAcknowledge(Session session) throws JMSException {_		return (session.getAcknowledgeMode() == Session.CLIENT_ACKNOWLEDGE)__	};determine,whether,the,given,session,is,in,client,acknowledge,mode,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,check,return,whether,the,given,session,is,in,client,acknowledge,mode,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,session,get,acknowledge,mode,see,javax,jms,session;protected,boolean,is,client,acknowledge,session,session,throws,jmsexception,return,session,get,acknowledge,mode,session
JmsAccessor -> protected boolean isClientAcknowledge(Session session) throws JMSException;1500448076;Determine whether the given Session is in client acknowledge mode._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to check_@return whether the given Session is in client acknowledge mode_@throws javax.jms.JMSException if thrown by JMS API methods_@see javax.jms.Session#getAcknowledgeMode()_@see javax.jms.Session#CLIENT_ACKNOWLEDGE;protected boolean isClientAcknowledge(Session session) throws JMSException {_		return (session.getAcknowledgeMode() == Session.CLIENT_ACKNOWLEDGE)__	};determine,whether,the,given,session,is,in,client,acknowledge,mode,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,check,return,whether,the,given,session,is,in,client,acknowledge,mode,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,session,get,acknowledge,mode,see,javax,jms,session;protected,boolean,is,client,acknowledge,session,session,throws,jmsexception,return,session,get,acknowledge,mode,session
JmsAccessor -> protected boolean isClientAcknowledge(Session session) throws JMSException;1530174524;Determine whether the given Session is in client acknowledge mode._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to check_@return whether the given Session is in client acknowledge mode_@throws javax.jms.JMSException if thrown by JMS API methods_@see javax.jms.Session#getAcknowledgeMode()_@see javax.jms.Session#CLIENT_ACKNOWLEDGE;protected boolean isClientAcknowledge(Session session) throws JMSException {_		return (session.getAcknowledgeMode() == Session.CLIENT_ACKNOWLEDGE)__	};determine,whether,the,given,session,is,in,client,acknowledge,mode,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,check,return,whether,the,given,session,is,in,client,acknowledge,mode,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,session,get,acknowledge,mode,see,javax,jms,session;protected,boolean,is,client,acknowledge,session,session,throws,jmsexception,return,session,get,acknowledge,mode,session
JmsAccessor -> public ConnectionFactory getConnectionFactory();1328020251;Return the ConnectionFactory that this accessor uses for obtaining_JMS {@link Connection Connections}.;public ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,connection,factory,that,this,accessor,uses,for,obtaining,jms,link,connection,connections;public,connection,factory,get,connection,factory,return,this,connection,factory
JmsAccessor -> public ConnectionFactory getConnectionFactory();1356735495;Return the ConnectionFactory that this accessor uses for obtaining_JMS {@link Connection Connections}.;public ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,connection,factory,that,this,accessor,uses,for,obtaining,jms,link,connection,connections;public,connection,factory,get,connection,factory,return,this,connection,factory
JmsAccessor -> public ConnectionFactory getConnectionFactory();1357119239;Return the ConnectionFactory that this accessor uses for obtaining_JMS {@link Connection Connections}.;public ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,connection,factory,that,this,accessor,uses,for,obtaining,jms,link,connection,connections;public,connection,factory,get,connection,factory,return,this,connection,factory
JmsAccessor -> public ConnectionFactory getConnectionFactory();1368482696;Return the ConnectionFactory that this accessor uses for obtaining_JMS {@link Connection Connections}.;public ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,connection,factory,that,this,accessor,uses,for,obtaining,jms,link,connection,connections;public,connection,factory,get,connection,factory,return,this,connection,factory
JmsAccessor -> public ConnectionFactory getConnectionFactory();1401724323;Return the ConnectionFactory that this accessor uses for obtaining_JMS {@link Connection Connections}.;public ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,connection,factory,that,this,accessor,uses,for,obtaining,jms,link,connection,connections;public,connection,factory,get,connection,factory,return,this,connection,factory
JmsAccessor -> public ConnectionFactory getConnectionFactory();1405696891;Return the ConnectionFactory that this accessor uses for obtaining_JMS {@link Connection Connections}.;public ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,connection,factory,that,this,accessor,uses,for,obtaining,jms,link,connection,connections;public,connection,factory,get,connection,factory,return,this,connection,factory
JmsAccessor -> public ConnectionFactory getConnectionFactory();1438003976;Return the ConnectionFactory that this accessor uses for obtaining_JMS {@link Connection Connections}.;public ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,connection,factory,that,this,accessor,uses,for,obtaining,jms,link,connection,connections;public,connection,factory,get,connection,factory,return,this,connection,factory
JmsAccessor -> public ConnectionFactory getConnectionFactory();1461047077;Return the ConnectionFactory that this accessor uses for obtaining_JMS {@link Connection Connections}.;public ConnectionFactory getConnectionFactory() {_		return this.connectionFactory__	};return,the,connection,factory,that,this,accessor,uses,for,obtaining,jms,link,connection,connections;public,connection,factory,get,connection,factory,return,this,connection,factory
JmsAccessor -> protected Connection createConnection() throws JMSException;1328020251;Create a JMS Connection via this template's ConnectionFactory._<p>This implementation uses JMS 1.1 API._@return the new JMS Connection_@throws JMSException if thrown by JMS API methods_@see javax.jms.ConnectionFactory#createConnection();protected Connection createConnection() throws JMSException {_		return getConnectionFactory().createConnection()__	};create,a,jms,connection,via,this,template,s,connection,factory,p,this,implementation,uses,jms,1,1,api,return,the,new,jms,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,factory,create,connection;protected,connection,create,connection,throws,jmsexception,return,get,connection,factory,create,connection
JmsAccessor -> protected Connection createConnection() throws JMSException;1356735495;Create a JMS Connection via this template's ConnectionFactory._<p>This implementation uses JMS 1.1 API._@return the new JMS Connection_@throws JMSException if thrown by JMS API methods_@see javax.jms.ConnectionFactory#createConnection();protected Connection createConnection() throws JMSException {_		return getConnectionFactory().createConnection()__	};create,a,jms,connection,via,this,template,s,connection,factory,p,this,implementation,uses,jms,1,1,api,return,the,new,jms,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,factory,create,connection;protected,connection,create,connection,throws,jmsexception,return,get,connection,factory,create,connection
JmsAccessor -> protected Connection createConnection() throws JMSException;1357119239;Create a JMS Connection via this template's ConnectionFactory._<p>This implementation uses JMS 1.1 API._@return the new JMS Connection_@throws JMSException if thrown by JMS API methods_@see javax.jms.ConnectionFactory#createConnection();protected Connection createConnection() throws JMSException {_		return getConnectionFactory().createConnection()__	};create,a,jms,connection,via,this,template,s,connection,factory,p,this,implementation,uses,jms,1,1,api,return,the,new,jms,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,factory,create,connection;protected,connection,create,connection,throws,jmsexception,return,get,connection,factory,create,connection
JmsAccessor -> protected Connection createConnection() throws JMSException;1368482696;Create a JMS Connection via this template's ConnectionFactory._<p>This implementation uses JMS 1.1 API._@return the new JMS Connection_@throws JMSException if thrown by JMS API methods_@see javax.jms.ConnectionFactory#createConnection();protected Connection createConnection() throws JMSException {_		return getConnectionFactory().createConnection()__	};create,a,jms,connection,via,this,template,s,connection,factory,p,this,implementation,uses,jms,1,1,api,return,the,new,jms,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,factory,create,connection;protected,connection,create,connection,throws,jmsexception,return,get,connection,factory,create,connection
JmsAccessor -> protected Connection createConnection() throws JMSException;1401724323;Create a JMS Connection via this template's ConnectionFactory._<p>This implementation uses JMS 1.1 API._@return the new JMS Connection_@throws JMSException if thrown by JMS API methods_@see javax.jms.ConnectionFactory#createConnection();protected Connection createConnection() throws JMSException {_		return getConnectionFactory().createConnection()__	};create,a,jms,connection,via,this,template,s,connection,factory,p,this,implementation,uses,jms,1,1,api,return,the,new,jms,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,factory,create,connection;protected,connection,create,connection,throws,jmsexception,return,get,connection,factory,create,connection
JmsAccessor -> protected Connection createConnection() throws JMSException;1405696891;Create a JMS Connection via this template's ConnectionFactory._<p>This implementation uses JMS 1.1 API._@return the new JMS Connection_@throws JMSException if thrown by JMS API methods_@see javax.jms.ConnectionFactory#createConnection();protected Connection createConnection() throws JMSException {_		return getConnectionFactory().createConnection()__	};create,a,jms,connection,via,this,template,s,connection,factory,p,this,implementation,uses,jms,1,1,api,return,the,new,jms,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,factory,create,connection;protected,connection,create,connection,throws,jmsexception,return,get,connection,factory,create,connection
JmsAccessor -> protected Connection createConnection() throws JMSException;1438003976;Create a JMS Connection via this template's ConnectionFactory._<p>This implementation uses JMS 1.1 API._@return the new JMS Connection_@throws JMSException if thrown by JMS API methods_@see javax.jms.ConnectionFactory#createConnection();protected Connection createConnection() throws JMSException {_		return getConnectionFactory().createConnection()__	};create,a,jms,connection,via,this,template,s,connection,factory,p,this,implementation,uses,jms,1,1,api,return,the,new,jms,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,factory,create,connection;protected,connection,create,connection,throws,jmsexception,return,get,connection,factory,create,connection
JmsAccessor -> protected Connection createConnection() throws JMSException;1461047077;Create a JMS Connection via this template's ConnectionFactory._<p>This implementation uses JMS 1.1 API._@return the new JMS Connection_@throws JMSException if thrown by JMS API methods_@see javax.jms.ConnectionFactory#createConnection();protected Connection createConnection() throws JMSException {_		return getConnectionFactory().createConnection()__	};create,a,jms,connection,via,this,template,s,connection,factory,p,this,implementation,uses,jms,1,1,api,return,the,new,jms,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,factory,create,connection;protected,connection,create,connection,throws,jmsexception,return,get,connection,factory,create,connection
JmsAccessor -> protected Connection createConnection() throws JMSException;1496837955;Create a JMS Connection via this template's ConnectionFactory._<p>This implementation uses JMS 1.1 API._@return the new JMS Connection_@throws JMSException if thrown by JMS API methods_@see javax.jms.ConnectionFactory#createConnection();protected Connection createConnection() throws JMSException {_		return obtainConnectionFactory().createConnection()__	};create,a,jms,connection,via,this,template,s,connection,factory,p,this,implementation,uses,jms,1,1,api,return,the,new,jms,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,factory,create,connection;protected,connection,create,connection,throws,jmsexception,return,obtain,connection,factory,create,connection
JmsAccessor -> protected Connection createConnection() throws JMSException;1500448076;Create a JMS Connection via this template's ConnectionFactory._<p>This implementation uses JMS 1.1 API._@return the new JMS Connection_@throws JMSException if thrown by JMS API methods_@see javax.jms.ConnectionFactory#createConnection();protected Connection createConnection() throws JMSException {_		return obtainConnectionFactory().createConnection()__	};create,a,jms,connection,via,this,template,s,connection,factory,p,this,implementation,uses,jms,1,1,api,return,the,new,jms,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,factory,create,connection;protected,connection,create,connection,throws,jmsexception,return,obtain,connection,factory,create,connection
JmsAccessor -> protected Connection createConnection() throws JMSException;1530174524;Create a JMS Connection via this template's ConnectionFactory._<p>This implementation uses JMS 1.1 API._@return the new JMS Connection_@throws JMSException if thrown by JMS API methods_@see javax.jms.ConnectionFactory#createConnection();protected Connection createConnection() throws JMSException {_		return obtainConnectionFactory().createConnection()__	};create,a,jms,connection,via,this,template,s,connection,factory,p,this,implementation,uses,jms,1,1,api,return,the,new,jms,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,factory,create,connection;protected,connection,create,connection,throws,jmsexception,return,obtain,connection,factory,create,connection
JmsAccessor -> protected final ConnectionFactory obtainConnectionFactory();1496837955;Obtain the ConnectionFactory for actual use._@return the ConnectionFactory (never {@code null})_@throws IllegalStateException in case of no ConnectionFactory set_@since 5.0;protected final ConnectionFactory obtainConnectionFactory() {_		ConnectionFactory connectionFactory = getConnectionFactory()__		Assert.state(connectionFactory != null, "No ConnectionFactory set")__		return connectionFactory__	};obtain,the,connection,factory,for,actual,use,return,the,connection,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,connection,factory,set,since,5,0;protected,final,connection,factory,obtain,connection,factory,connection,factory,connection,factory,get,connection,factory,assert,state,connection,factory,null,no,connection,factory,set,return,connection,factory
JmsAccessor -> protected final ConnectionFactory obtainConnectionFactory();1500448076;Obtain the ConnectionFactory for actual use._@return the ConnectionFactory (never {@code null})_@throws IllegalStateException in case of no ConnectionFactory set_@since 5.0;protected final ConnectionFactory obtainConnectionFactory() {_		ConnectionFactory connectionFactory = getConnectionFactory()__		Assert.state(connectionFactory != null, "No ConnectionFactory set")__		return connectionFactory__	};obtain,the,connection,factory,for,actual,use,return,the,connection,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,connection,factory,set,since,5,0;protected,final,connection,factory,obtain,connection,factory,connection,factory,connection,factory,get,connection,factory,assert,state,connection,factory,null,no,connection,factory,set,return,connection,factory
JmsAccessor -> protected final ConnectionFactory obtainConnectionFactory();1530174524;Obtain the ConnectionFactory for actual use._@return the ConnectionFactory (never {@code null})_@throws IllegalStateException in case of no ConnectionFactory set_@since 5.0;protected final ConnectionFactory obtainConnectionFactory() {_		ConnectionFactory connectionFactory = getConnectionFactory()__		Assert.state(connectionFactory != null, "No ConnectionFactory set")__		return connectionFactory__	};obtain,the,connection,factory,for,actual,use,return,the,connection,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,connection,factory,set,since,5,0;protected,final,connection,factory,obtain,connection,factory,connection,factory,connection,factory,get,connection,factory,assert,state,connection,factory,null,no,connection,factory,set,return,connection,factory
JmsAccessor -> protected JmsException convertJmsAccessException(JMSException ex);1328020251;Convert the specified checked {@link javax.jms.JMSException JMSException} to_a Spring runtime {@link org.springframework.jms.JmsException JmsException}_equivalent._<p>The default implementation delegates to the_{@link org.springframework.jms.support.JmsUtils#convertJmsAccessException} method._@param ex the original checked {@link JMSException} to convert_@return the Spring runtime {@link JmsException} wrapping <code>ex</code>_@see org.springframework.jms.support.JmsUtils#convertJmsAccessException;protected JmsException convertJmsAccessException(JMSException ex) {_		return JmsUtils.convertJmsAccessException(ex)__	};convert,the,specified,checked,link,javax,jms,jmsexception,jmsexception,to,a,spring,runtime,link,org,springframework,jms,jms,exception,jms,exception,equivalent,p,the,default,implementation,delegates,to,the,link,org,springframework,jms,support,jms,utils,convert,jms,access,exception,method,param,ex,the,original,checked,link,jmsexception,to,convert,return,the,spring,runtime,link,jms,exception,wrapping,code,ex,code,see,org,springframework,jms,support,jms,utils,convert,jms,access,exception;protected,jms,exception,convert,jms,access,exception,jmsexception,ex,return,jms,utils,convert,jms,access,exception,ex
JmsAccessor -> protected JmsException convertJmsAccessException(JMSException ex);1356735495;Convert the specified checked {@link javax.jms.JMSException JMSException} to_a Spring runtime {@link org.springframework.jms.JmsException JmsException}_equivalent._<p>The default implementation delegates to the_{@link JmsUtils#convertJmsAccessException} method._@param ex the original checked {@link JMSException} to convert_@return the Spring runtime {@link JmsException} wrapping {@code ex}_@see JmsUtils#convertJmsAccessException;protected JmsException convertJmsAccessException(JMSException ex) {_		return JmsUtils.convertJmsAccessException(ex)__	};convert,the,specified,checked,link,javax,jms,jmsexception,jmsexception,to,a,spring,runtime,link,org,springframework,jms,jms,exception,jms,exception,equivalent,p,the,default,implementation,delegates,to,the,link,jms,utils,convert,jms,access,exception,method,param,ex,the,original,checked,link,jmsexception,to,convert,return,the,spring,runtime,link,jms,exception,wrapping,code,ex,see,jms,utils,convert,jms,access,exception;protected,jms,exception,convert,jms,access,exception,jmsexception,ex,return,jms,utils,convert,jms,access,exception,ex
JmsAccessor -> protected JmsException convertJmsAccessException(JMSException ex);1357119239;Convert the specified checked {@link javax.jms.JMSException JMSException} to_a Spring runtime {@link org.springframework.jms.JmsException JmsException}_equivalent._<p>The default implementation delegates to the_{@link JmsUtils#convertJmsAccessException} method._@param ex the original checked {@link JMSException} to convert_@return the Spring runtime {@link JmsException} wrapping {@code ex}_@see JmsUtils#convertJmsAccessException;protected JmsException convertJmsAccessException(JMSException ex) {_		return JmsUtils.convertJmsAccessException(ex)__	};convert,the,specified,checked,link,javax,jms,jmsexception,jmsexception,to,a,spring,runtime,link,org,springframework,jms,jms,exception,jms,exception,equivalent,p,the,default,implementation,delegates,to,the,link,jms,utils,convert,jms,access,exception,method,param,ex,the,original,checked,link,jmsexception,to,convert,return,the,spring,runtime,link,jms,exception,wrapping,code,ex,see,jms,utils,convert,jms,access,exception;protected,jms,exception,convert,jms,access,exception,jmsexception,ex,return,jms,utils,convert,jms,access,exception,ex
JmsAccessor -> protected JmsException convertJmsAccessException(JMSException ex);1368482696;Convert the specified checked {@link javax.jms.JMSException JMSException} to_a Spring runtime {@link org.springframework.jms.JmsException JmsException}_equivalent._<p>The default implementation delegates to the_{@link JmsUtils#convertJmsAccessException} method._@param ex the original checked {@link JMSException} to convert_@return the Spring runtime {@link JmsException} wrapping {@code ex}_@see JmsUtils#convertJmsAccessException;protected JmsException convertJmsAccessException(JMSException ex) {_		return JmsUtils.convertJmsAccessException(ex)__	};convert,the,specified,checked,link,javax,jms,jmsexception,jmsexception,to,a,spring,runtime,link,org,springframework,jms,jms,exception,jms,exception,equivalent,p,the,default,implementation,delegates,to,the,link,jms,utils,convert,jms,access,exception,method,param,ex,the,original,checked,link,jmsexception,to,convert,return,the,spring,runtime,link,jms,exception,wrapping,code,ex,see,jms,utils,convert,jms,access,exception;protected,jms,exception,convert,jms,access,exception,jmsexception,ex,return,jms,utils,convert,jms,access,exception,ex
JmsAccessor -> protected JmsException convertJmsAccessException(JMSException ex);1401724323;Convert the specified checked {@link javax.jms.JMSException JMSException} to_a Spring runtime {@link org.springframework.jms.JmsException JmsException}_equivalent._<p>The default implementation delegates to the_{@link JmsUtils#convertJmsAccessException} method._@param ex the original checked {@link JMSException} to convert_@return the Spring runtime {@link JmsException} wrapping {@code ex}_@see JmsUtils#convertJmsAccessException;protected JmsException convertJmsAccessException(JMSException ex) {_		return JmsUtils.convertJmsAccessException(ex)__	};convert,the,specified,checked,link,javax,jms,jmsexception,jmsexception,to,a,spring,runtime,link,org,springframework,jms,jms,exception,jms,exception,equivalent,p,the,default,implementation,delegates,to,the,link,jms,utils,convert,jms,access,exception,method,param,ex,the,original,checked,link,jmsexception,to,convert,return,the,spring,runtime,link,jms,exception,wrapping,code,ex,see,jms,utils,convert,jms,access,exception;protected,jms,exception,convert,jms,access,exception,jmsexception,ex,return,jms,utils,convert,jms,access,exception,ex
JmsAccessor -> protected JmsException convertJmsAccessException(JMSException ex);1405696891;Convert the specified checked {@link javax.jms.JMSException JMSException} to_a Spring runtime {@link org.springframework.jms.JmsException JmsException}_equivalent._<p>The default implementation delegates to the_{@link JmsUtils#convertJmsAccessException} method._@param ex the original checked {@link JMSException} to convert_@return the Spring runtime {@link JmsException} wrapping {@code ex}_@see JmsUtils#convertJmsAccessException;protected JmsException convertJmsAccessException(JMSException ex) {_		return JmsUtils.convertJmsAccessException(ex)__	};convert,the,specified,checked,link,javax,jms,jmsexception,jmsexception,to,a,spring,runtime,link,org,springframework,jms,jms,exception,jms,exception,equivalent,p,the,default,implementation,delegates,to,the,link,jms,utils,convert,jms,access,exception,method,param,ex,the,original,checked,link,jmsexception,to,convert,return,the,spring,runtime,link,jms,exception,wrapping,code,ex,see,jms,utils,convert,jms,access,exception;protected,jms,exception,convert,jms,access,exception,jmsexception,ex,return,jms,utils,convert,jms,access,exception,ex
JmsAccessor -> protected JmsException convertJmsAccessException(JMSException ex);1438003976;Convert the specified checked {@link javax.jms.JMSException JMSException} to_a Spring runtime {@link org.springframework.jms.JmsException JmsException}_equivalent._<p>The default implementation delegates to the_{@link JmsUtils#convertJmsAccessException} method._@param ex the original checked {@link JMSException} to convert_@return the Spring runtime {@link JmsException} wrapping {@code ex}_@see JmsUtils#convertJmsAccessException;protected JmsException convertJmsAccessException(JMSException ex) {_		return JmsUtils.convertJmsAccessException(ex)__	};convert,the,specified,checked,link,javax,jms,jmsexception,jmsexception,to,a,spring,runtime,link,org,springframework,jms,jms,exception,jms,exception,equivalent,p,the,default,implementation,delegates,to,the,link,jms,utils,convert,jms,access,exception,method,param,ex,the,original,checked,link,jmsexception,to,convert,return,the,spring,runtime,link,jms,exception,wrapping,code,ex,see,jms,utils,convert,jms,access,exception;protected,jms,exception,convert,jms,access,exception,jmsexception,ex,return,jms,utils,convert,jms,access,exception,ex
JmsAccessor -> protected JmsException convertJmsAccessException(JMSException ex);1461047077;Convert the specified checked {@link javax.jms.JMSException JMSException} to_a Spring runtime {@link org.springframework.jms.JmsException JmsException}_equivalent._<p>The default implementation delegates to the_{@link JmsUtils#convertJmsAccessException} method._@param ex the original checked {@link JMSException} to convert_@return the Spring runtime {@link JmsException} wrapping {@code ex}_@see JmsUtils#convertJmsAccessException;protected JmsException convertJmsAccessException(JMSException ex) {_		return JmsUtils.convertJmsAccessException(ex)__	};convert,the,specified,checked,link,javax,jms,jmsexception,jmsexception,to,a,spring,runtime,link,org,springframework,jms,jms,exception,jms,exception,equivalent,p,the,default,implementation,delegates,to,the,link,jms,utils,convert,jms,access,exception,method,param,ex,the,original,checked,link,jmsexception,to,convert,return,the,spring,runtime,link,jms,exception,wrapping,code,ex,see,jms,utils,convert,jms,access,exception;protected,jms,exception,convert,jms,access,exception,jmsexception,ex,return,jms,utils,convert,jms,access,exception,ex
JmsAccessor -> protected JmsException convertJmsAccessException(JMSException ex);1496837955;Convert the specified checked {@link javax.jms.JMSException JMSException} to_a Spring runtime {@link org.springframework.jms.JmsException JmsException}_equivalent._<p>The default implementation delegates to the_{@link JmsUtils#convertJmsAccessException} method._@param ex the original checked {@link JMSException} to convert_@return the Spring runtime {@link JmsException} wrapping {@code ex}_@see JmsUtils#convertJmsAccessException;protected JmsException convertJmsAccessException(JMSException ex) {_		return JmsUtils.convertJmsAccessException(ex)__	};convert,the,specified,checked,link,javax,jms,jmsexception,jmsexception,to,a,spring,runtime,link,org,springframework,jms,jms,exception,jms,exception,equivalent,p,the,default,implementation,delegates,to,the,link,jms,utils,convert,jms,access,exception,method,param,ex,the,original,checked,link,jmsexception,to,convert,return,the,spring,runtime,link,jms,exception,wrapping,code,ex,see,jms,utils,convert,jms,access,exception;protected,jms,exception,convert,jms,access,exception,jmsexception,ex,return,jms,utils,convert,jms,access,exception,ex
JmsAccessor -> protected JmsException convertJmsAccessException(JMSException ex);1500448076;Convert the specified checked {@link javax.jms.JMSException JMSException} to_a Spring runtime {@link org.springframework.jms.JmsException JmsException}_equivalent._<p>The default implementation delegates to the_{@link JmsUtils#convertJmsAccessException} method._@param ex the original checked {@link JMSException} to convert_@return the Spring runtime {@link JmsException} wrapping {@code ex}_@see JmsUtils#convertJmsAccessException;protected JmsException convertJmsAccessException(JMSException ex) {_		return JmsUtils.convertJmsAccessException(ex)__	};convert,the,specified,checked,link,javax,jms,jmsexception,jmsexception,to,a,spring,runtime,link,org,springframework,jms,jms,exception,jms,exception,equivalent,p,the,default,implementation,delegates,to,the,link,jms,utils,convert,jms,access,exception,method,param,ex,the,original,checked,link,jmsexception,to,convert,return,the,spring,runtime,link,jms,exception,wrapping,code,ex,see,jms,utils,convert,jms,access,exception;protected,jms,exception,convert,jms,access,exception,jmsexception,ex,return,jms,utils,convert,jms,access,exception,ex
JmsAccessor -> protected JmsException convertJmsAccessException(JMSException ex);1530174524;Convert the specified checked {@link javax.jms.JMSException JMSException} to_a Spring runtime {@link org.springframework.jms.JmsException JmsException}_equivalent._<p>The default implementation delegates to the_{@link JmsUtils#convertJmsAccessException} method._@param ex the original checked {@link JMSException} to convert_@return the Spring runtime {@link JmsException} wrapping {@code ex}_@see JmsUtils#convertJmsAccessException;protected JmsException convertJmsAccessException(JMSException ex) {_		return JmsUtils.convertJmsAccessException(ex)__	};convert,the,specified,checked,link,javax,jms,jmsexception,jmsexception,to,a,spring,runtime,link,org,springframework,jms,jms,exception,jms,exception,equivalent,p,the,default,implementation,delegates,to,the,link,jms,utils,convert,jms,access,exception,method,param,ex,the,original,checked,link,jmsexception,to,convert,return,the,spring,runtime,link,jms,exception,wrapping,code,ex,see,jms,utils,convert,jms,access,exception;protected,jms,exception,convert,jms,access,exception,jmsexception,ex,return,jms,utils,convert,jms,access,exception,ex
