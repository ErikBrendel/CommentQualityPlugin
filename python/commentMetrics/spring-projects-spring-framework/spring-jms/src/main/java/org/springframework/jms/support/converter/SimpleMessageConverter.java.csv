commented;modifiers;parameterAmount;loc;comment;code
true;public;2;23;/**  * This implementation creates a TextMessage for a String, a  * BytesMessage for a byte array, a MapMessage for a Map,  * and an ObjectMessage for a Serializable object.  * @see #createMessageForString  * @see #createMessageForByteArray  * @see #createMessageForMap  * @see #createMessageForSerializable  */ ;/**  * This implementation creates a TextMessage for a String, a  * BytesMessage for a byte array, a MapMessage for a Map,  * and an ObjectMessage for a Serializable object.  * @see #createMessageForString  * @see #createMessageForByteArray  * @see #createMessageForMap  * @see #createMessageForSerializable  */ @Override public Message toMessage(Object object, Session session) throws JMSException, MessageConversionException {     if (object instanceof Message) {         return (Message) object.     } else if (object instanceof String) {         return createMessageForString((String) object, session).     } else if (object instanceof byte[]) {         return createMessageForByteArray((byte[]) object, session).     } else if (object instanceof Map) {         return createMessageForMap((Map<?, ?>) object, session).     } else if (object instanceof Serializable) {         return createMessageForSerializable(((Serializable) object), session).     } else {         throw new MessageConversionException("Cannot convert object of type [" + ObjectUtils.nullSafeClassName(object) + "] to JMS message. Supported message " + "payloads are: String, byte array, Map<String,?>, Serializable object.").     } }
true;public;1;18;/**  * This implementation converts a TextMessage back to a String, a  * ByteMessage back to a byte array, a MapMessage back to a Map,  * and an ObjectMessage back to a Serializable object. Returns  * the plain Message object in case of an unknown message type.  * @see #extractStringFromMessage  * @see #extractByteArrayFromMessage  * @see #extractMapFromMessage  * @see #extractSerializableFromMessage  */ ;/**  * This implementation converts a TextMessage back to a String, a  * ByteMessage back to a byte array, a MapMessage back to a Map,  * and an ObjectMessage back to a Serializable object. Returns  * the plain Message object in case of an unknown message type.  * @see #extractStringFromMessage  * @see #extractByteArrayFromMessage  * @see #extractMapFromMessage  * @see #extractSerializableFromMessage  */ @Override public Object fromMessage(Message message) throws JMSException, MessageConversionException {     if (message instanceof TextMessage) {         return extractStringFromMessage((TextMessage) message).     } else if (message instanceof BytesMessage) {         return extractByteArrayFromMessage((BytesMessage) message).     } else if (message instanceof MapMessage) {         return extractMapFromMessage((MapMessage) message).     } else if (message instanceof ObjectMessage) {         return extractSerializableFromMessage((ObjectMessage) message).     } else {         return message.     } }
true;protected;2;3;/**  * Create a JMS TextMessage for the given String.  * @param text the String to convert  * @param session current JMS session  * @return the resulting message  * @throws JMSException if thrown by JMS methods  * @see javax.jms.Session#createTextMessage  */ ;/**  * Create a JMS TextMessage for the given String.  * @param text the String to convert  * @param session current JMS session  * @return the resulting message  * @throws JMSException if thrown by JMS methods  * @see javax.jms.Session#createTextMessage  */ protected TextMessage createMessageForString(String text, Session session) throws JMSException {     return session.createTextMessage(text). }
true;protected;2;5;/**  * Create a JMS BytesMessage for the given byte array.  * @param bytes the byte array to convert  * @param session current JMS session  * @return the resulting message  * @throws JMSException if thrown by JMS methods  * @see javax.jms.Session#createBytesMessage  */ ;/**  * Create a JMS BytesMessage for the given byte array.  * @param bytes the byte array to convert  * @param session current JMS session  * @return the resulting message  * @throws JMSException if thrown by JMS methods  * @see javax.jms.Session#createBytesMessage  */ protected BytesMessage createMessageForByteArray(byte[] bytes, Session session) throws JMSException {     BytesMessage message = session.createBytesMessage().     message.writeBytes(bytes).     return message. }
true;protected;2;12;/**  * Create a JMS MapMessage for the given Map.  * @param map the Map to convert  * @param session current JMS session  * @return the resulting message  * @throws JMSException if thrown by JMS methods  * @see javax.jms.Session#createMapMessage  */ ;/**  * Create a JMS MapMessage for the given Map.  * @param map the Map to convert  * @param session current JMS session  * @return the resulting message  * @throws JMSException if thrown by JMS methods  * @see javax.jms.Session#createMapMessage  */ protected MapMessage createMessageForMap(Map<?, ?> map, Session session) throws JMSException {     MapMessage message = session.createMapMessage().     for (Map.Entry<?, ?> entry : map.entrySet()) {         Object key = entry.getKey().         if (!(key instanceof String)) {             throw new MessageConversionException("Cannot convert non-String key of type [" + ObjectUtils.nullSafeClassName(key) + "] to JMS MapMessage entry").         }         message.setObject((String) key, entry.getValue()).     }     return message. }
true;protected;2;3;/**  * Create a JMS ObjectMessage for the given Serializable object.  * @param object the Serializable object to convert  * @param session current JMS session  * @return the resulting message  * @throws JMSException if thrown by JMS methods  * @see javax.jms.Session#createObjectMessage  */ ;/**  * Create a JMS ObjectMessage for the given Serializable object.  * @param object the Serializable object to convert  * @param session current JMS session  * @return the resulting message  * @throws JMSException if thrown by JMS methods  * @see javax.jms.Session#createObjectMessage  */ protected ObjectMessage createMessageForSerializable(Serializable object, Session session) throws JMSException {     return session.createObjectMessage(object). }
true;protected;1;3;/**  * Extract a String from the given TextMessage.  * @param message the message to convert  * @return the resulting String  * @throws JMSException if thrown by JMS methods  */ ;/**  * Extract a String from the given TextMessage.  * @param message the message to convert  * @return the resulting String  * @throws JMSException if thrown by JMS methods  */ protected String extractStringFromMessage(TextMessage message) throws JMSException {     return message.getText(). }
true;protected;1;5;/**  * Extract a byte array from the given {@link BytesMessage}.  * @param message the message to convert  * @return the resulting byte array  * @throws JMSException if thrown by JMS methods  */ ;/**  * Extract a byte array from the given {@link BytesMessage}.  * @param message the message to convert  * @return the resulting byte array  * @throws JMSException if thrown by JMS methods  */ protected byte[] extractByteArrayFromMessage(BytesMessage message) throws JMSException {     byte[] bytes = new byte[(int) message.getBodyLength()].     message.readBytes(bytes).     return bytes. }
true;protected;1;10;/**  * Extract a Map from the given {@link MapMessage}.  * @param message the message to convert  * @return the resulting Map  * @throws JMSException if thrown by JMS methods  */ ;/**  * Extract a Map from the given {@link MapMessage}.  * @param message the message to convert  * @return the resulting Map  * @throws JMSException if thrown by JMS methods  */ @SuppressWarnings("unchecked") protected Map<String, Object> extractMapFromMessage(MapMessage message) throws JMSException {     Map<String, Object> map = new HashMap<>().     Enumeration<String> en = message.getMapNames().     while (en.hasMoreElements()) {         String key = en.nextElement().         map.put(key, message.getObject(key)).     }     return map. }
true;protected;1;3;/**  * Extract a Serializable object from the given {@link ObjectMessage}.  * @param message the message to convert  * @return the resulting Serializable object  * @throws JMSException if thrown by JMS methods  */ ;/**  * Extract a Serializable object from the given {@link ObjectMessage}.  * @param message the message to convert  * @return the resulting Serializable object  * @throws JMSException if thrown by JMS methods  */ protected Serializable extractSerializableFromMessage(ObjectMessage message) throws JMSException {     return message.getObject(). }
