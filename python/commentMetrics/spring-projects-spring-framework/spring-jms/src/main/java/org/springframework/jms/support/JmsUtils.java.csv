# id;timestamp;commentText;codeText;commentWords;codeWords
JmsUtils -> public static void closeMessageConsumer(MessageConsumer consumer);1328020251;Close the given JMS MessageConsumer and ignore any thrown exception._This is useful for typical <code>finally</code> blocks in manual JMS code._@param consumer the JMS MessageConsumer to close (may be <code>null</code>);public static void closeMessageConsumer(MessageConsumer consumer) {_		if (consumer != null) {_			_			_			boolean wasInterrupted = Thread.interrupted()__			try {_				consumer.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS MessageConsumer", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS MessageConsumer", ex)__			}_			finally {_				if (wasInterrupted) {_					_					Thread.currentThread().interrupt()__				}_			}_		}_	};close,the,given,jms,message,consumer,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,code,blocks,in,manual,jms,code,param,consumer,the,jms,message,consumer,to,close,may,be,code,null,code;public,static,void,close,message,consumer,message,consumer,consumer,if,consumer,null,boolean,was,interrupted,thread,interrupted,try,consumer,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,message,consumer,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,message,consumer,ex,finally,if,was,interrupted,thread,current,thread,interrupt
JmsUtils -> public static void closeMessageConsumer(MessageConsumer consumer);1356735495;Close the given JMS MessageConsumer and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param consumer the JMS MessageConsumer to close (may be {@code null});public static void closeMessageConsumer(MessageConsumer consumer) {_		if (consumer != null) {_			_			_			boolean wasInterrupted = Thread.interrupted()__			try {_				consumer.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS MessageConsumer", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS MessageConsumer", ex)__			}_			finally {_				if (wasInterrupted) {_					_					Thread.currentThread().interrupt()__				}_			}_		}_	};close,the,given,jms,message,consumer,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,consumer,the,jms,message,consumer,to,close,may,be,code,null;public,static,void,close,message,consumer,message,consumer,consumer,if,consumer,null,boolean,was,interrupted,thread,interrupted,try,consumer,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,message,consumer,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,message,consumer,ex,finally,if,was,interrupted,thread,current,thread,interrupt
JmsUtils -> public static void closeMessageProducer(@Nullable MessageProducer producer);1495868221;Close the given JMS MessageProducer and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param producer the JMS MessageProducer to close (may be {@code null});public static void closeMessageProducer(@Nullable MessageProducer producer) {_		if (producer != null) {_			try {_				producer.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS MessageProducer", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS MessageProducer", ex)__			}_		}_	};close,the,given,jms,message,producer,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,producer,the,jms,message,producer,to,close,may,be,code,null;public,static,void,close,message,producer,nullable,message,producer,producer,if,producer,null,try,producer,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,message,producer,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,message,producer,ex
JmsUtils -> public static void closeMessageProducer(@Nullable MessageProducer producer);1519732288;Close the given JMS MessageProducer and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param producer the JMS MessageProducer to close (may be {@code null});public static void closeMessageProducer(@Nullable MessageProducer producer) {_		if (producer != null) {_			try {_				producer.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS MessageProducer", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS MessageProducer", ex)__			}_		}_	};close,the,given,jms,message,producer,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,producer,the,jms,message,producer,to,close,may,be,code,null;public,static,void,close,message,producer,nullable,message,producer,producer,if,producer,null,try,producer,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,message,producer,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,message,producer,ex
JmsUtils -> public static void closeMessageConsumer(@Nullable MessageConsumer consumer);1495868221;Close the given JMS MessageConsumer and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param consumer the JMS MessageConsumer to close (may be {@code null});public static void closeMessageConsumer(@Nullable MessageConsumer consumer) {_		if (consumer != null) {_			_			_			boolean wasInterrupted = Thread.interrupted()__			try {_				consumer.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS MessageConsumer", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS MessageConsumer", ex)__			}_			finally {_				if (wasInterrupted) {_					_					Thread.currentThread().interrupt()__				}_			}_		}_	};close,the,given,jms,message,consumer,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,consumer,the,jms,message,consumer,to,close,may,be,code,null;public,static,void,close,message,consumer,nullable,message,consumer,consumer,if,consumer,null,boolean,was,interrupted,thread,interrupted,try,consumer,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,message,consumer,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,message,consumer,ex,finally,if,was,interrupted,thread,current,thread,interrupt
JmsUtils -> public static void closeMessageConsumer(@Nullable MessageConsumer consumer);1519732288;Close the given JMS MessageConsumer and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param consumer the JMS MessageConsumer to close (may be {@code null});public static void closeMessageConsumer(@Nullable MessageConsumer consumer) {_		if (consumer != null) {_			_			_			boolean wasInterrupted = Thread.interrupted()__			try {_				consumer.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS MessageConsumer", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS MessageConsumer", ex)__			}_			finally {_				if (wasInterrupted) {_					_					Thread.currentThread().interrupt()__				}_			}_		}_	};close,the,given,jms,message,consumer,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,consumer,the,jms,message,consumer,to,close,may,be,code,null;public,static,void,close,message,consumer,nullable,message,consumer,consumer,if,consumer,null,boolean,was,interrupted,thread,interrupted,try,consumer,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,message,consumer,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,message,consumer,ex,finally,if,was,interrupted,thread,current,thread,interrupt
JmsUtils -> public static void commitIfNecessary(Session session) throws JMSException;1328020251;Commit the Session if not within a JTA transaction._@param session the JMS Session to commit_@throws JMSException if committing failed;public static void commitIfNecessary(Session session) throws JMSException {_		Assert.notNull(session, "Session must not be null")__		try {_			session.commit()__		}_		catch (javax.jms.TransactionInProgressException ex) {_			_		}_		catch (javax.jms.IllegalStateException ex) {_			_		}_	};commit,the,session,if,not,within,a,jta,transaction,param,session,the,jms,session,to,commit,throws,jmsexception,if,committing,failed;public,static,void,commit,if,necessary,session,session,throws,jmsexception,assert,not,null,session,session,must,not,be,null,try,session,commit,catch,javax,jms,transaction,in,progress,exception,ex,catch,javax,jms,illegal,state,exception,ex
JmsUtils -> public static void commitIfNecessary(Session session) throws JMSException;1356735495;Commit the Session if not within a JTA transaction._@param session the JMS Session to commit_@throws JMSException if committing failed;public static void commitIfNecessary(Session session) throws JMSException {_		Assert.notNull(session, "Session must not be null")__		try {_			session.commit()__		}_		catch (javax.jms.TransactionInProgressException ex) {_			_		}_		catch (javax.jms.IllegalStateException ex) {_			_		}_	};commit,the,session,if,not,within,a,jta,transaction,param,session,the,jms,session,to,commit,throws,jmsexception,if,committing,failed;public,static,void,commit,if,necessary,session,session,throws,jmsexception,assert,not,null,session,session,must,not,be,null,try,session,commit,catch,javax,jms,transaction,in,progress,exception,ex,catch,javax,jms,illegal,state,exception,ex
JmsUtils -> public static void commitIfNecessary(Session session) throws JMSException;1495868221;Commit the Session if not within a JTA transaction._@param session the JMS Session to commit_@throws JMSException if committing failed;public static void commitIfNecessary(Session session) throws JMSException {_		Assert.notNull(session, "Session must not be null")__		try {_			session.commit()__		}_		catch (javax.jms.TransactionInProgressException ex) {_			_		}_		catch (javax.jms.IllegalStateException ex) {_			_		}_	};commit,the,session,if,not,within,a,jta,transaction,param,session,the,jms,session,to,commit,throws,jmsexception,if,committing,failed;public,static,void,commit,if,necessary,session,session,throws,jmsexception,assert,not,null,session,session,must,not,be,null,try,session,commit,catch,javax,jms,transaction,in,progress,exception,ex,catch,javax,jms,illegal,state,exception,ex
JmsUtils -> public static void commitIfNecessary(Session session) throws JMSException;1519732288;Commit the Session if not within a JTA transaction._@param session the JMS Session to commit_@throws JMSException if committing failed;public static void commitIfNecessary(Session session) throws JMSException {_		Assert.notNull(session, "Session must not be null")__		try {_			session.commit()__		}_		catch (javax.jms.TransactionInProgressException | javax.jms.IllegalStateException ex) {_			_		}_	};commit,the,session,if,not,within,a,jta,transaction,param,session,the,jms,session,to,commit,throws,jmsexception,if,committing,failed;public,static,void,commit,if,necessary,session,session,throws,jmsexception,assert,not,null,session,session,must,not,be,null,try,session,commit,catch,javax,jms,transaction,in,progress,exception,javax,jms,illegal,state,exception,ex
JmsUtils -> public static void closeSession(Session session);1328020251;Close the given JMS Session and ignore any thrown exception._This is useful for typical <code>finally</code> blocks in manual JMS code._@param session the JMS Session to close (may be <code>null</code>);public static void closeSession(Session session) {_		if (session != null) {_			try {_				session.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS Session", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS Session", ex)__			}_		}_	};close,the,given,jms,session,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,code,blocks,in,manual,jms,code,param,session,the,jms,session,to,close,may,be,code,null,code;public,static,void,close,session,session,session,if,session,null,try,session,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,session,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,session,ex
JmsUtils -> public static void closeSession(Session session);1356735495;Close the given JMS Session and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param session the JMS Session to close (may be {@code null});public static void closeSession(Session session) {_		if (session != null) {_			try {_				session.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS Session", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS Session", ex)__			}_		}_	};close,the,given,jms,session,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,session,the,jms,session,to,close,may,be,code,null;public,static,void,close,session,session,session,if,session,null,try,session,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,session,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,session,ex
JmsUtils -> public static void closeMessageProducer(MessageProducer producer);1328020251;Close the given JMS MessageProducer and ignore any thrown exception._This is useful for typical <code>finally</code> blocks in manual JMS code._@param producer the JMS MessageProducer to close (may be <code>null</code>);public static void closeMessageProducer(MessageProducer producer) {_		if (producer != null) {_			try {_				producer.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS MessageProducer", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS MessageProducer", ex)__			}_		}_	};close,the,given,jms,message,producer,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,code,blocks,in,manual,jms,code,param,producer,the,jms,message,producer,to,close,may,be,code,null,code;public,static,void,close,message,producer,message,producer,producer,if,producer,null,try,producer,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,message,producer,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,message,producer,ex
JmsUtils -> public static void closeMessageProducer(MessageProducer producer);1356735495;Close the given JMS MessageProducer and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param producer the JMS MessageProducer to close (may be {@code null});public static void closeMessageProducer(MessageProducer producer) {_		if (producer != null) {_			try {_				producer.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS MessageProducer", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS MessageProducer", ex)__			}_		}_	};close,the,given,jms,message,producer,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,producer,the,jms,message,producer,to,close,may,be,code,null;public,static,void,close,message,producer,message,producer,producer,if,producer,null,try,producer,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,message,producer,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,message,producer,ex
JmsUtils -> public static JmsException convertJmsAccessException(JMSException ex);1328020251;Convert the specified checked {@link javax.jms.JMSException JMSException} to a_Spring runtime {@link org.springframework.jms.JmsException JmsException} equivalent._@param ex the original checked JMSException to convert_@return the Spring runtime JmsException wrapping the given exception;public static JmsException convertJmsAccessException(JMSException ex) {_		Assert.notNull(ex, "JMSException must not be null")___		if (ex instanceof javax.jms.IllegalStateException) {_			return new org.springframework.jms.IllegalStateException((javax.jms.IllegalStateException) ex)__		}_		if (ex instanceof javax.jms.InvalidClientIDException) {_			return new InvalidClientIDException((javax.jms.InvalidClientIDException) ex)__		}_		if (ex instanceof javax.jms.InvalidDestinationException) {_			return new InvalidDestinationException((javax.jms.InvalidDestinationException) ex)__		}_		if (ex instanceof javax.jms.InvalidSelectorException) {_			return new InvalidSelectorException((javax.jms.InvalidSelectorException) ex)__		}_		if (ex instanceof javax.jms.JMSSecurityException) {_			return new JmsSecurityException((javax.jms.JMSSecurityException) ex)__		}_		if (ex instanceof javax.jms.MessageEOFException) {_			return new MessageEOFException((javax.jms.MessageEOFException) ex)__		}_		if (ex instanceof javax.jms.MessageFormatException) {_			return new MessageFormatException((javax.jms.MessageFormatException) ex)__		}_		if (ex instanceof javax.jms.MessageNotReadableException) {_			return new MessageNotReadableException((javax.jms.MessageNotReadableException) ex)__		}_		if (ex instanceof javax.jms.MessageNotWriteableException) {_			return new MessageNotWriteableException((javax.jms.MessageNotWriteableException) ex)__		}_		if (ex instanceof javax.jms.ResourceAllocationException) {_			return new ResourceAllocationException((javax.jms.ResourceAllocationException) ex)__		}_		if (ex instanceof javax.jms.TransactionInProgressException) {_			return new TransactionInProgressException((javax.jms.TransactionInProgressException) ex)__		}_		if (ex instanceof javax.jms.TransactionRolledBackException) {_			return new TransactionRolledBackException((javax.jms.TransactionRolledBackException) ex)__		}__		_		return new UncategorizedJmsException(ex)__	};convert,the,specified,checked,link,javax,jms,jmsexception,jmsexception,to,a,spring,runtime,link,org,springframework,jms,jms,exception,jms,exception,equivalent,param,ex,the,original,checked,jmsexception,to,convert,return,the,spring,runtime,jms,exception,wrapping,the,given,exception;public,static,jms,exception,convert,jms,access,exception,jmsexception,ex,assert,not,null,ex,jmsexception,must,not,be,null,if,ex,instanceof,javax,jms,illegal,state,exception,return,new,org,springframework,jms,illegal,state,exception,javax,jms,illegal,state,exception,ex,if,ex,instanceof,javax,jms,invalid,client,idexception,return,new,invalid,client,idexception,javax,jms,invalid,client,idexception,ex,if,ex,instanceof,javax,jms,invalid,destination,exception,return,new,invalid,destination,exception,javax,jms,invalid,destination,exception,ex,if,ex,instanceof,javax,jms,invalid,selector,exception,return,new,invalid,selector,exception,javax,jms,invalid,selector,exception,ex,if,ex,instanceof,javax,jms,jmssecurity,exception,return,new,jms,security,exception,javax,jms,jmssecurity,exception,ex,if,ex,instanceof,javax,jms,message,eofexception,return,new,message,eofexception,javax,jms,message,eofexception,ex,if,ex,instanceof,javax,jms,message,format,exception,return,new,message,format,exception,javax,jms,message,format,exception,ex,if,ex,instanceof,javax,jms,message,not,readable,exception,return,new,message,not,readable,exception,javax,jms,message,not,readable,exception,ex,if,ex,instanceof,javax,jms,message,not,writeable,exception,return,new,message,not,writeable,exception,javax,jms,message,not,writeable,exception,ex,if,ex,instanceof,javax,jms,resource,allocation,exception,return,new,resource,allocation,exception,javax,jms,resource,allocation,exception,ex,if,ex,instanceof,javax,jms,transaction,in,progress,exception,return,new,transaction,in,progress,exception,javax,jms,transaction,in,progress,exception,ex,if,ex,instanceof,javax,jms,transaction,rolled,back,exception,return,new,transaction,rolled,back,exception,javax,jms,transaction,rolled,back,exception,ex,return,new,uncategorized,jms,exception,ex
JmsUtils -> public static JmsException convertJmsAccessException(JMSException ex);1356735495;Convert the specified checked {@link javax.jms.JMSException JMSException} to a_Spring runtime {@link org.springframework.jms.JmsException JmsException} equivalent._@param ex the original checked JMSException to convert_@return the Spring runtime JmsException wrapping the given exception;public static JmsException convertJmsAccessException(JMSException ex) {_		Assert.notNull(ex, "JMSException must not be null")___		if (ex instanceof javax.jms.IllegalStateException) {_			return new org.springframework.jms.IllegalStateException((javax.jms.IllegalStateException) ex)__		}_		if (ex instanceof javax.jms.InvalidClientIDException) {_			return new InvalidClientIDException((javax.jms.InvalidClientIDException) ex)__		}_		if (ex instanceof javax.jms.InvalidDestinationException) {_			return new InvalidDestinationException((javax.jms.InvalidDestinationException) ex)__		}_		if (ex instanceof javax.jms.InvalidSelectorException) {_			return new InvalidSelectorException((javax.jms.InvalidSelectorException) ex)__		}_		if (ex instanceof javax.jms.JMSSecurityException) {_			return new JmsSecurityException((javax.jms.JMSSecurityException) ex)__		}_		if (ex instanceof javax.jms.MessageEOFException) {_			return new MessageEOFException((javax.jms.MessageEOFException) ex)__		}_		if (ex instanceof javax.jms.MessageFormatException) {_			return new MessageFormatException((javax.jms.MessageFormatException) ex)__		}_		if (ex instanceof javax.jms.MessageNotReadableException) {_			return new MessageNotReadableException((javax.jms.MessageNotReadableException) ex)__		}_		if (ex instanceof javax.jms.MessageNotWriteableException) {_			return new MessageNotWriteableException((javax.jms.MessageNotWriteableException) ex)__		}_		if (ex instanceof javax.jms.ResourceAllocationException) {_			return new ResourceAllocationException((javax.jms.ResourceAllocationException) ex)__		}_		if (ex instanceof javax.jms.TransactionInProgressException) {_			return new TransactionInProgressException((javax.jms.TransactionInProgressException) ex)__		}_		if (ex instanceof javax.jms.TransactionRolledBackException) {_			return new TransactionRolledBackException((javax.jms.TransactionRolledBackException) ex)__		}__		_		return new UncategorizedJmsException(ex)__	};convert,the,specified,checked,link,javax,jms,jmsexception,jmsexception,to,a,spring,runtime,link,org,springframework,jms,jms,exception,jms,exception,equivalent,param,ex,the,original,checked,jmsexception,to,convert,return,the,spring,runtime,jms,exception,wrapping,the,given,exception;public,static,jms,exception,convert,jms,access,exception,jmsexception,ex,assert,not,null,ex,jmsexception,must,not,be,null,if,ex,instanceof,javax,jms,illegal,state,exception,return,new,org,springframework,jms,illegal,state,exception,javax,jms,illegal,state,exception,ex,if,ex,instanceof,javax,jms,invalid,client,idexception,return,new,invalid,client,idexception,javax,jms,invalid,client,idexception,ex,if,ex,instanceof,javax,jms,invalid,destination,exception,return,new,invalid,destination,exception,javax,jms,invalid,destination,exception,ex,if,ex,instanceof,javax,jms,invalid,selector,exception,return,new,invalid,selector,exception,javax,jms,invalid,selector,exception,ex,if,ex,instanceof,javax,jms,jmssecurity,exception,return,new,jms,security,exception,javax,jms,jmssecurity,exception,ex,if,ex,instanceof,javax,jms,message,eofexception,return,new,message,eofexception,javax,jms,message,eofexception,ex,if,ex,instanceof,javax,jms,message,format,exception,return,new,message,format,exception,javax,jms,message,format,exception,ex,if,ex,instanceof,javax,jms,message,not,readable,exception,return,new,message,not,readable,exception,javax,jms,message,not,readable,exception,ex,if,ex,instanceof,javax,jms,message,not,writeable,exception,return,new,message,not,writeable,exception,javax,jms,message,not,writeable,exception,ex,if,ex,instanceof,javax,jms,resource,allocation,exception,return,new,resource,allocation,exception,javax,jms,resource,allocation,exception,ex,if,ex,instanceof,javax,jms,transaction,in,progress,exception,return,new,transaction,in,progress,exception,javax,jms,transaction,in,progress,exception,ex,if,ex,instanceof,javax,jms,transaction,rolled,back,exception,return,new,transaction,rolled,back,exception,javax,jms,transaction,rolled,back,exception,ex,return,new,uncategorized,jms,exception,ex
JmsUtils -> public static JmsException convertJmsAccessException(JMSException ex);1495868221;Convert the specified checked {@link javax.jms.JMSException JMSException} to a_Spring runtime {@link org.springframework.jms.JmsException JmsException} equivalent._@param ex the original checked JMSException to convert_@return the Spring runtime JmsException wrapping the given exception;public static JmsException convertJmsAccessException(JMSException ex) {_		Assert.notNull(ex, "JMSException must not be null")___		if (ex instanceof javax.jms.IllegalStateException) {_			return new org.springframework.jms.IllegalStateException((javax.jms.IllegalStateException) ex)__		}_		if (ex instanceof javax.jms.InvalidClientIDException) {_			return new InvalidClientIDException((javax.jms.InvalidClientIDException) ex)__		}_		if (ex instanceof javax.jms.InvalidDestinationException) {_			return new InvalidDestinationException((javax.jms.InvalidDestinationException) ex)__		}_		if (ex instanceof javax.jms.InvalidSelectorException) {_			return new InvalidSelectorException((javax.jms.InvalidSelectorException) ex)__		}_		if (ex instanceof javax.jms.JMSSecurityException) {_			return new JmsSecurityException((javax.jms.JMSSecurityException) ex)__		}_		if (ex instanceof javax.jms.MessageEOFException) {_			return new MessageEOFException((javax.jms.MessageEOFException) ex)__		}_		if (ex instanceof javax.jms.MessageFormatException) {_			return new MessageFormatException((javax.jms.MessageFormatException) ex)__		}_		if (ex instanceof javax.jms.MessageNotReadableException) {_			return new MessageNotReadableException((javax.jms.MessageNotReadableException) ex)__		}_		if (ex instanceof javax.jms.MessageNotWriteableException) {_			return new MessageNotWriteableException((javax.jms.MessageNotWriteableException) ex)__		}_		if (ex instanceof javax.jms.ResourceAllocationException) {_			return new ResourceAllocationException((javax.jms.ResourceAllocationException) ex)__		}_		if (ex instanceof javax.jms.TransactionInProgressException) {_			return new TransactionInProgressException((javax.jms.TransactionInProgressException) ex)__		}_		if (ex instanceof javax.jms.TransactionRolledBackException) {_			return new TransactionRolledBackException((javax.jms.TransactionRolledBackException) ex)__		}__		_		return new UncategorizedJmsException(ex)__	};convert,the,specified,checked,link,javax,jms,jmsexception,jmsexception,to,a,spring,runtime,link,org,springframework,jms,jms,exception,jms,exception,equivalent,param,ex,the,original,checked,jmsexception,to,convert,return,the,spring,runtime,jms,exception,wrapping,the,given,exception;public,static,jms,exception,convert,jms,access,exception,jmsexception,ex,assert,not,null,ex,jmsexception,must,not,be,null,if,ex,instanceof,javax,jms,illegal,state,exception,return,new,org,springframework,jms,illegal,state,exception,javax,jms,illegal,state,exception,ex,if,ex,instanceof,javax,jms,invalid,client,idexception,return,new,invalid,client,idexception,javax,jms,invalid,client,idexception,ex,if,ex,instanceof,javax,jms,invalid,destination,exception,return,new,invalid,destination,exception,javax,jms,invalid,destination,exception,ex,if,ex,instanceof,javax,jms,invalid,selector,exception,return,new,invalid,selector,exception,javax,jms,invalid,selector,exception,ex,if,ex,instanceof,javax,jms,jmssecurity,exception,return,new,jms,security,exception,javax,jms,jmssecurity,exception,ex,if,ex,instanceof,javax,jms,message,eofexception,return,new,message,eofexception,javax,jms,message,eofexception,ex,if,ex,instanceof,javax,jms,message,format,exception,return,new,message,format,exception,javax,jms,message,format,exception,ex,if,ex,instanceof,javax,jms,message,not,readable,exception,return,new,message,not,readable,exception,javax,jms,message,not,readable,exception,ex,if,ex,instanceof,javax,jms,message,not,writeable,exception,return,new,message,not,writeable,exception,javax,jms,message,not,writeable,exception,ex,if,ex,instanceof,javax,jms,resource,allocation,exception,return,new,resource,allocation,exception,javax,jms,resource,allocation,exception,ex,if,ex,instanceof,javax,jms,transaction,in,progress,exception,return,new,transaction,in,progress,exception,javax,jms,transaction,in,progress,exception,ex,if,ex,instanceof,javax,jms,transaction,rolled,back,exception,return,new,transaction,rolled,back,exception,javax,jms,transaction,rolled,back,exception,ex,return,new,uncategorized,jms,exception,ex
JmsUtils -> public static JmsException convertJmsAccessException(JMSException ex);1519732288;Convert the specified checked {@link javax.jms.JMSException JMSException} to a_Spring runtime {@link org.springframework.jms.JmsException JmsException} equivalent._@param ex the original checked JMSException to convert_@return the Spring runtime JmsException wrapping the given exception;public static JmsException convertJmsAccessException(JMSException ex) {_		Assert.notNull(ex, "JMSException must not be null")___		if (ex instanceof javax.jms.IllegalStateException) {_			return new org.springframework.jms.IllegalStateException((javax.jms.IllegalStateException) ex)__		}_		if (ex instanceof javax.jms.InvalidClientIDException) {_			return new InvalidClientIDException((javax.jms.InvalidClientIDException) ex)__		}_		if (ex instanceof javax.jms.InvalidDestinationException) {_			return new InvalidDestinationException((javax.jms.InvalidDestinationException) ex)__		}_		if (ex instanceof javax.jms.InvalidSelectorException) {_			return new InvalidSelectorException((javax.jms.InvalidSelectorException) ex)__		}_		if (ex instanceof javax.jms.JMSSecurityException) {_			return new JmsSecurityException((javax.jms.JMSSecurityException) ex)__		}_		if (ex instanceof javax.jms.MessageEOFException) {_			return new MessageEOFException((javax.jms.MessageEOFException) ex)__		}_		if (ex instanceof javax.jms.MessageFormatException) {_			return new MessageFormatException((javax.jms.MessageFormatException) ex)__		}_		if (ex instanceof javax.jms.MessageNotReadableException) {_			return new MessageNotReadableException((javax.jms.MessageNotReadableException) ex)__		}_		if (ex instanceof javax.jms.MessageNotWriteableException) {_			return new MessageNotWriteableException((javax.jms.MessageNotWriteableException) ex)__		}_		if (ex instanceof javax.jms.ResourceAllocationException) {_			return new ResourceAllocationException((javax.jms.ResourceAllocationException) ex)__		}_		if (ex instanceof javax.jms.TransactionInProgressException) {_			return new TransactionInProgressException((javax.jms.TransactionInProgressException) ex)__		}_		if (ex instanceof javax.jms.TransactionRolledBackException) {_			return new TransactionRolledBackException((javax.jms.TransactionRolledBackException) ex)__		}__		_		return new UncategorizedJmsException(ex)__	};convert,the,specified,checked,link,javax,jms,jmsexception,jmsexception,to,a,spring,runtime,link,org,springframework,jms,jms,exception,jms,exception,equivalent,param,ex,the,original,checked,jmsexception,to,convert,return,the,spring,runtime,jms,exception,wrapping,the,given,exception;public,static,jms,exception,convert,jms,access,exception,jmsexception,ex,assert,not,null,ex,jmsexception,must,not,be,null,if,ex,instanceof,javax,jms,illegal,state,exception,return,new,org,springframework,jms,illegal,state,exception,javax,jms,illegal,state,exception,ex,if,ex,instanceof,javax,jms,invalid,client,idexception,return,new,invalid,client,idexception,javax,jms,invalid,client,idexception,ex,if,ex,instanceof,javax,jms,invalid,destination,exception,return,new,invalid,destination,exception,javax,jms,invalid,destination,exception,ex,if,ex,instanceof,javax,jms,invalid,selector,exception,return,new,invalid,selector,exception,javax,jms,invalid,selector,exception,ex,if,ex,instanceof,javax,jms,jmssecurity,exception,return,new,jms,security,exception,javax,jms,jmssecurity,exception,ex,if,ex,instanceof,javax,jms,message,eofexception,return,new,message,eofexception,javax,jms,message,eofexception,ex,if,ex,instanceof,javax,jms,message,format,exception,return,new,message,format,exception,javax,jms,message,format,exception,ex,if,ex,instanceof,javax,jms,message,not,readable,exception,return,new,message,not,readable,exception,javax,jms,message,not,readable,exception,ex,if,ex,instanceof,javax,jms,message,not,writeable,exception,return,new,message,not,writeable,exception,javax,jms,message,not,writeable,exception,ex,if,ex,instanceof,javax,jms,resource,allocation,exception,return,new,resource,allocation,exception,javax,jms,resource,allocation,exception,ex,if,ex,instanceof,javax,jms,transaction,in,progress,exception,return,new,transaction,in,progress,exception,javax,jms,transaction,in,progress,exception,ex,if,ex,instanceof,javax,jms,transaction,rolled,back,exception,return,new,transaction,rolled,back,exception,javax,jms,transaction,rolled,back,exception,ex,return,new,uncategorized,jms,exception,ex
JmsUtils -> public static void closeConnection(@Nullable Connection con);1495868221;Close the given JMS Connection and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param con the JMS Connection to close (may be {@code null});public static void closeConnection(@Nullable Connection con) {_		closeConnection(con, false)__	};close,the,given,jms,connection,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,con,the,jms,connection,to,close,may,be,code,null;public,static,void,close,connection,nullable,connection,con,close,connection,con,false
JmsUtils -> public static void closeConnection(@Nullable Connection con);1519732288;Close the given JMS Connection and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param con the JMS Connection to close (may be {@code null});public static void closeConnection(@Nullable Connection con) {_		closeConnection(con, false)__	};close,the,given,jms,connection,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,con,the,jms,connection,to,close,may,be,code,null;public,static,void,close,connection,nullable,connection,con,close,connection,con,false
JmsUtils -> public static void rollbackIfNecessary(Session session) throws JMSException;1328020251;Rollback the Session if not within a JTA transaction._@param session the JMS Session to rollback_@throws JMSException if committing failed;public static void rollbackIfNecessary(Session session) throws JMSException {_		Assert.notNull(session, "Session must not be null")__		try {_			session.rollback()__		}_		catch (javax.jms.TransactionInProgressException ex) {_			_		}_		catch (javax.jms.IllegalStateException ex) {_			_		}_	};rollback,the,session,if,not,within,a,jta,transaction,param,session,the,jms,session,to,rollback,throws,jmsexception,if,committing,failed;public,static,void,rollback,if,necessary,session,session,throws,jmsexception,assert,not,null,session,session,must,not,be,null,try,session,rollback,catch,javax,jms,transaction,in,progress,exception,ex,catch,javax,jms,illegal,state,exception,ex
JmsUtils -> public static void rollbackIfNecessary(Session session) throws JMSException;1356735495;Rollback the Session if not within a JTA transaction._@param session the JMS Session to rollback_@throws JMSException if committing failed;public static void rollbackIfNecessary(Session session) throws JMSException {_		Assert.notNull(session, "Session must not be null")__		try {_			session.rollback()__		}_		catch (javax.jms.TransactionInProgressException ex) {_			_		}_		catch (javax.jms.IllegalStateException ex) {_			_		}_	};rollback,the,session,if,not,within,a,jta,transaction,param,session,the,jms,session,to,rollback,throws,jmsexception,if,committing,failed;public,static,void,rollback,if,necessary,session,session,throws,jmsexception,assert,not,null,session,session,must,not,be,null,try,session,rollback,catch,javax,jms,transaction,in,progress,exception,ex,catch,javax,jms,illegal,state,exception,ex
JmsUtils -> public static void rollbackIfNecessary(Session session) throws JMSException;1495868221;Rollback the Session if not within a JTA transaction._@param session the JMS Session to rollback_@throws JMSException if committing failed;public static void rollbackIfNecessary(Session session) throws JMSException {_		Assert.notNull(session, "Session must not be null")__		try {_			session.rollback()__		}_		catch (javax.jms.TransactionInProgressException ex) {_			_		}_		catch (javax.jms.IllegalStateException ex) {_			_		}_	};rollback,the,session,if,not,within,a,jta,transaction,param,session,the,jms,session,to,rollback,throws,jmsexception,if,committing,failed;public,static,void,rollback,if,necessary,session,session,throws,jmsexception,assert,not,null,session,session,must,not,be,null,try,session,rollback,catch,javax,jms,transaction,in,progress,exception,ex,catch,javax,jms,illegal,state,exception,ex
JmsUtils -> public static void rollbackIfNecessary(Session session) throws JMSException;1519732288;Rollback the Session if not within a JTA transaction._@param session the JMS Session to rollback_@throws JMSException if committing failed;public static void rollbackIfNecessary(Session session) throws JMSException {_		Assert.notNull(session, "Session must not be null")__		try {_			session.rollback()__		}_		catch (javax.jms.TransactionInProgressException | javax.jms.IllegalStateException ex) {_			_		}_	};rollback,the,session,if,not,within,a,jta,transaction,param,session,the,jms,session,to,rollback,throws,jmsexception,if,committing,failed;public,static,void,rollback,if,necessary,session,session,throws,jmsexception,assert,not,null,session,session,must,not,be,null,try,session,rollback,catch,javax,jms,transaction,in,progress,exception,javax,jms,illegal,state,exception,ex
JmsUtils -> public static void closeQueueRequestor(@Nullable QueueRequestor requestor);1495868221;Close the given JMS QueueRequestor and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param requestor the JMS QueueRequestor to close (may be {@code null});public static void closeQueueRequestor(@Nullable QueueRequestor requestor) {_		if (requestor != null) {_			try {_				requestor.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS QueueRequestor", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS QueueRequestor", ex)__			}_		}_	};close,the,given,jms,queue,requestor,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,requestor,the,jms,queue,requestor,to,close,may,be,code,null;public,static,void,close,queue,requestor,nullable,queue,requestor,requestor,if,requestor,null,try,requestor,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,queue,requestor,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,queue,requestor,ex
JmsUtils -> public static void closeQueueRequestor(@Nullable QueueRequestor requestor);1519732288;Close the given JMS QueueRequestor and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param requestor the JMS QueueRequestor to close (may be {@code null});public static void closeQueueRequestor(@Nullable QueueRequestor requestor) {_		if (requestor != null) {_			try {_				requestor.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS QueueRequestor", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS QueueRequestor", ex)__			}_		}_	};close,the,given,jms,queue,requestor,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,requestor,the,jms,queue,requestor,to,close,may,be,code,null;public,static,void,close,queue,requestor,nullable,queue,requestor,requestor,if,requestor,null,try,requestor,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,queue,requestor,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,queue,requestor,ex
JmsUtils -> public static void closeQueueBrowser(QueueBrowser browser);1328020251;Close the given JMS QueueBrowser and ignore any thrown exception._This is useful for typical <code>finally</code> blocks in manual JMS code._@param browser the JMS QueueBrowser to close (may be <code>null</code>);public static void closeQueueBrowser(QueueBrowser browser) {_		if (browser != null) {_			try {_				browser.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS QueueBrowser", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS QueueBrowser", ex)__			}_		}_	};close,the,given,jms,queue,browser,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,code,blocks,in,manual,jms,code,param,browser,the,jms,queue,browser,to,close,may,be,code,null,code;public,static,void,close,queue,browser,queue,browser,browser,if,browser,null,try,browser,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,queue,browser,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,queue,browser,ex
JmsUtils -> public static void closeQueueBrowser(QueueBrowser browser);1356735495;Close the given JMS QueueBrowser and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param browser the JMS QueueBrowser to close (may be {@code null});public static void closeQueueBrowser(QueueBrowser browser) {_		if (browser != null) {_			try {_				browser.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS QueueBrowser", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS QueueBrowser", ex)__			}_		}_	};close,the,given,jms,queue,browser,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,browser,the,jms,queue,browser,to,close,may,be,code,null;public,static,void,close,queue,browser,queue,browser,browser,if,browser,null,try,browser,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,queue,browser,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,queue,browser,ex
JmsUtils -> public static void closeConnection(Connection con);1328020251;Close the given JMS Connection and ignore any thrown exception._This is useful for typical <code>finally</code> blocks in manual JMS code._@param con the JMS Connection to close (may be <code>null</code>);public static void closeConnection(Connection con) {_		closeConnection(con, false)__	};close,the,given,jms,connection,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,code,blocks,in,manual,jms,code,param,con,the,jms,connection,to,close,may,be,code,null,code;public,static,void,close,connection,connection,con,close,connection,con,false
JmsUtils -> public static void closeConnection(Connection con);1356735495;Close the given JMS Connection and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param con the JMS Connection to close (may be {@code null});public static void closeConnection(Connection con) {_		closeConnection(con, false)__	};close,the,given,jms,connection,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,con,the,jms,connection,to,close,may,be,code,null;public,static,void,close,connection,connection,con,close,connection,con,false
JmsUtils -> public static String buildExceptionMessage(JMSException ex);1328020251;Build a descriptive exception message for the given JMSException,_incorporating a linked exception's message if appropriate._@param ex the JMSException to build a message for_@return the descriptive message String_@see javax.jms.JMSException#getLinkedException();public static String buildExceptionMessage(JMSException ex) {_		String message = ex.getMessage()__		Exception linkedEx = ex.getLinkedException()__		if (linkedEx != null) {_			if (message == null) {_				message = linkedEx.toString()__			}_			else {_				String linkedMessage = linkedEx.getMessage()__				if (linkedMessage != null && !message.contains(linkedMessage)) {_					message = message + "_ nested exception is " + linkedEx__				}_			}_		}_		return message__	};build,a,descriptive,exception,message,for,the,given,jmsexception,incorporating,a,linked,exception,s,message,if,appropriate,param,ex,the,jmsexception,to,build,a,message,for,return,the,descriptive,message,string,see,javax,jms,jmsexception,get,linked,exception;public,static,string,build,exception,message,jmsexception,ex,string,message,ex,get,message,exception,linked,ex,ex,get,linked,exception,if,linked,ex,null,if,message,null,message,linked,ex,to,string,else,string,linked,message,linked,ex,get,message,if,linked,message,null,message,contains,linked,message,message,message,nested,exception,is,linked,ex,return,message
JmsUtils -> public static String buildExceptionMessage(JMSException ex);1356735495;Build a descriptive exception message for the given JMSException,_incorporating a linked exception's message if appropriate._@param ex the JMSException to build a message for_@return the descriptive message String_@see javax.jms.JMSException#getLinkedException();public static String buildExceptionMessage(JMSException ex) {_		String message = ex.getMessage()__		Exception linkedEx = ex.getLinkedException()__		if (linkedEx != null) {_			if (message == null) {_				message = linkedEx.toString()__			}_			else {_				String linkedMessage = linkedEx.getMessage()__				if (linkedMessage != null && !message.contains(linkedMessage)) {_					message = message + "_ nested exception is " + linkedEx__				}_			}_		}_		return message__	};build,a,descriptive,exception,message,for,the,given,jmsexception,incorporating,a,linked,exception,s,message,if,appropriate,param,ex,the,jmsexception,to,build,a,message,for,return,the,descriptive,message,string,see,javax,jms,jmsexception,get,linked,exception;public,static,string,build,exception,message,jmsexception,ex,string,message,ex,get,message,exception,linked,ex,ex,get,linked,exception,if,linked,ex,null,if,message,null,message,linked,ex,to,string,else,string,linked,message,linked,ex,get,message,if,linked,message,null,message,contains,linked,message,message,message,nested,exception,is,linked,ex,return,message
JmsUtils -> public static String buildExceptionMessage(JMSException ex);1495868221;Build a descriptive exception message for the given JMSException,_incorporating a linked exception's message if appropriate._@param ex the JMSException to build a message for_@return the descriptive message String_@see javax.jms.JMSException#getLinkedException();public static String buildExceptionMessage(JMSException ex) {_		String message = ex.getMessage()__		Exception linkedEx = ex.getLinkedException()__		if (linkedEx != null) {_			if (message == null) {_				message = linkedEx.toString()__			}_			else {_				String linkedMessage = linkedEx.getMessage()__				if (linkedMessage != null && !message.contains(linkedMessage)) {_					message = message + "_ nested exception is " + linkedEx__				}_			}_		}_		return message__	};build,a,descriptive,exception,message,for,the,given,jmsexception,incorporating,a,linked,exception,s,message,if,appropriate,param,ex,the,jmsexception,to,build,a,message,for,return,the,descriptive,message,string,see,javax,jms,jmsexception,get,linked,exception;public,static,string,build,exception,message,jmsexception,ex,string,message,ex,get,message,exception,linked,ex,ex,get,linked,exception,if,linked,ex,null,if,message,null,message,linked,ex,to,string,else,string,linked,message,linked,ex,get,message,if,linked,message,null,message,contains,linked,message,message,message,nested,exception,is,linked,ex,return,message
JmsUtils -> public static String buildExceptionMessage(JMSException ex);1519732288;Build a descriptive exception message for the given JMSException,_incorporating a linked exception's message if appropriate._@param ex the JMSException to build a message for_@return the descriptive message String_@see javax.jms.JMSException#getLinkedException();public static String buildExceptionMessage(JMSException ex) {_		String message = ex.getMessage()__		Exception linkedEx = ex.getLinkedException()__		if (linkedEx != null) {_			if (message == null) {_				message = linkedEx.toString()__			}_			else {_				String linkedMessage = linkedEx.getMessage()__				if (linkedMessage != null && !message.contains(linkedMessage)) {_					message = message + "_ nested exception is " + linkedEx__				}_			}_		}_		return message__	};build,a,descriptive,exception,message,for,the,given,jmsexception,incorporating,a,linked,exception,s,message,if,appropriate,param,ex,the,jmsexception,to,build,a,message,for,return,the,descriptive,message,string,see,javax,jms,jmsexception,get,linked,exception;public,static,string,build,exception,message,jmsexception,ex,string,message,ex,get,message,exception,linked,ex,ex,get,linked,exception,if,linked,ex,null,if,message,null,message,linked,ex,to,string,else,string,linked,message,linked,ex,get,message,if,linked,message,null,message,contains,linked,message,message,message,nested,exception,is,linked,ex,return,message
JmsUtils -> public static void closeConnection(Connection con, boolean stop);1328020251;Close the given JMS Connection and ignore any thrown exception._This is useful for typical <code>finally</code> blocks in manual JMS code._@param con the JMS Connection to close (may be <code>null</code>)_@param stop whether to call <code>stop()</code> before closing;public static void closeConnection(Connection con, boolean stop) {_		if (con != null) {_			try {_				if (stop) {_					try {_						con.stop()__					}_					finally {_						con.close()__					}_				}_				else {_					con.close()__				}_			}_			catch (javax.jms.IllegalStateException ex) {_				logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__			}_			catch (JMSException ex) {_				logger.debug("Could not close JMS Connection", ex)__			}_			catch (Throwable ex) {_				_				logger.debug("Unexpected exception on closing JMS Connection", ex)__			}_		}_	};close,the,given,jms,connection,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,code,blocks,in,manual,jms,code,param,con,the,jms,connection,to,close,may,be,code,null,code,param,stop,whether,to,call,code,stop,code,before,closing;public,static,void,close,connection,connection,con,boolean,stop,if,con,null,try,if,stop,try,con,stop,finally,con,close,else,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,jmsexception,ex,logger,debug,could,not,close,jms,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jms,connection,ex
JmsUtils -> public static void closeConnection(Connection con, boolean stop);1356735495;Close the given JMS Connection and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param con the JMS Connection to close (may be {@code null})_@param stop whether to call {@code stop()} before closing;public static void closeConnection(Connection con, boolean stop) {_		if (con != null) {_			try {_				if (stop) {_					try {_						con.stop()__					}_					finally {_						con.close()__					}_				}_				else {_					con.close()__				}_			}_			catch (javax.jms.IllegalStateException ex) {_				logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__			}_			catch (JMSException ex) {_				logger.debug("Could not close JMS Connection", ex)__			}_			catch (Throwable ex) {_				_				logger.debug("Unexpected exception on closing JMS Connection", ex)__			}_		}_	};close,the,given,jms,connection,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,con,the,jms,connection,to,close,may,be,code,null,param,stop,whether,to,call,code,stop,before,closing;public,static,void,close,connection,connection,con,boolean,stop,if,con,null,try,if,stop,try,con,stop,finally,con,close,else,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,jmsexception,ex,logger,debug,could,not,close,jms,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jms,connection,ex
JmsUtils -> public static void closeQueueBrowser(@Nullable QueueBrowser browser);1495868221;Close the given JMS QueueBrowser and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param browser the JMS QueueBrowser to close (may be {@code null});public static void closeQueueBrowser(@Nullable QueueBrowser browser) {_		if (browser != null) {_			try {_				browser.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS QueueBrowser", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS QueueBrowser", ex)__			}_		}_	};close,the,given,jms,queue,browser,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,browser,the,jms,queue,browser,to,close,may,be,code,null;public,static,void,close,queue,browser,nullable,queue,browser,browser,if,browser,null,try,browser,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,queue,browser,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,queue,browser,ex
JmsUtils -> public static void closeQueueBrowser(@Nullable QueueBrowser browser);1519732288;Close the given JMS QueueBrowser and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param browser the JMS QueueBrowser to close (may be {@code null});public static void closeQueueBrowser(@Nullable QueueBrowser browser) {_		if (browser != null) {_			try {_				browser.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS QueueBrowser", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS QueueBrowser", ex)__			}_		}_	};close,the,given,jms,queue,browser,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,browser,the,jms,queue,browser,to,close,may,be,code,null;public,static,void,close,queue,browser,nullable,queue,browser,browser,if,browser,null,try,browser,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,queue,browser,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,queue,browser,ex
JmsUtils -> public static void closeSession(@Nullable Session session);1495868221;Close the given JMS Session and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param session the JMS Session to close (may be {@code null});public static void closeSession(@Nullable Session session) {_		if (session != null) {_			try {_				session.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS Session", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS Session", ex)__			}_		}_	};close,the,given,jms,session,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,session,the,jms,session,to,close,may,be,code,null;public,static,void,close,session,nullable,session,session,if,session,null,try,session,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,session,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,session,ex
JmsUtils -> public static void closeSession(@Nullable Session session);1519732288;Close the given JMS Session and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param session the JMS Session to close (may be {@code null});public static void closeSession(@Nullable Session session) {_		if (session != null) {_			try {_				session.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS Session", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS Session", ex)__			}_		}_	};close,the,given,jms,session,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,session,the,jms,session,to,close,may,be,code,null;public,static,void,close,session,nullable,session,session,if,session,null,try,session,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,session,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,session,ex
JmsUtils -> public static void closeQueueRequestor(QueueRequestor requestor);1328020251;Close the given JMS QueueRequestor and ignore any thrown exception._This is useful for typical <code>finally</code> blocks in manual JMS code._@param requestor the JMS QueueRequestor to close (may be <code>null</code>);public static void closeQueueRequestor(QueueRequestor requestor) {_		if (requestor != null) {_			try {_				requestor.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS QueueRequestor", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS QueueRequestor", ex)__			}_		}_	};close,the,given,jms,queue,requestor,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,code,blocks,in,manual,jms,code,param,requestor,the,jms,queue,requestor,to,close,may,be,code,null,code;public,static,void,close,queue,requestor,queue,requestor,requestor,if,requestor,null,try,requestor,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,queue,requestor,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,queue,requestor,ex
JmsUtils -> public static void closeQueueRequestor(QueueRequestor requestor);1356735495;Close the given JMS QueueRequestor and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param requestor the JMS QueueRequestor to close (may be {@code null});public static void closeQueueRequestor(QueueRequestor requestor) {_		if (requestor != null) {_			try {_				requestor.close()__			}_			catch (JMSException ex) {_				logger.trace("Could not close JMS QueueRequestor", ex)__			}_			catch (Throwable ex) {_				_				logger.trace("Unexpected exception on closing JMS QueueRequestor", ex)__			}_		}_	};close,the,given,jms,queue,requestor,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,requestor,the,jms,queue,requestor,to,close,may,be,code,null;public,static,void,close,queue,requestor,queue,requestor,requestor,if,requestor,null,try,requestor,close,catch,jmsexception,ex,logger,trace,could,not,close,jms,queue,requestor,ex,catch,throwable,ex,logger,trace,unexpected,exception,on,closing,jms,queue,requestor,ex
JmsUtils -> public static void closeConnection(@Nullable Connection con, boolean stop);1495868221;Close the given JMS Connection and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param con the JMS Connection to close (may be {@code null})_@param stop whether to call {@code stop()} before closing;public static void closeConnection(@Nullable Connection con, boolean stop) {_		if (con != null) {_			try {_				if (stop) {_					try {_						con.stop()__					}_					finally {_						con.close()__					}_				}_				else {_					con.close()__				}_			}_			catch (javax.jms.IllegalStateException ex) {_				logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__			}_			catch (JMSException ex) {_				logger.debug("Could not close JMS Connection", ex)__			}_			catch (Throwable ex) {_				_				logger.debug("Unexpected exception on closing JMS Connection", ex)__			}_		}_	};close,the,given,jms,connection,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,con,the,jms,connection,to,close,may,be,code,null,param,stop,whether,to,call,code,stop,before,closing;public,static,void,close,connection,nullable,connection,con,boolean,stop,if,con,null,try,if,stop,try,con,stop,finally,con,close,else,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,jmsexception,ex,logger,debug,could,not,close,jms,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jms,connection,ex
JmsUtils -> public static void closeConnection(@Nullable Connection con, boolean stop);1519732288;Close the given JMS Connection and ignore any thrown exception._This is useful for typical {@code finally} blocks in manual JMS code._@param con the JMS Connection to close (may be {@code null})_@param stop whether to call {@code stop()} before closing;public static void closeConnection(@Nullable Connection con, boolean stop) {_		if (con != null) {_			try {_				if (stop) {_					try {_						con.stop()__					}_					finally {_						con.close()__					}_				}_				else {_					con.close()__				}_			}_			catch (javax.jms.IllegalStateException ex) {_				logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__			}_			catch (JMSException ex) {_				logger.debug("Could not close JMS Connection", ex)__			}_			catch (Throwable ex) {_				_				logger.debug("Unexpected exception on closing JMS Connection", ex)__			}_		}_	};close,the,given,jms,connection,and,ignore,any,thrown,exception,this,is,useful,for,typical,code,finally,blocks,in,manual,jms,code,param,con,the,jms,connection,to,close,may,be,code,null,param,stop,whether,to,call,code,stop,before,closing;public,static,void,close,connection,nullable,connection,con,boolean,stop,if,con,null,try,if,stop,try,con,stop,finally,con,close,else,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,jmsexception,ex,logger,debug,could,not,close,jms,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jms,connection,ex
