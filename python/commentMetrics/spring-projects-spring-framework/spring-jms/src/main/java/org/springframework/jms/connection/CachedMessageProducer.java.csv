commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void setDisableMessageID(boolean disableMessageID) throws JMSException {     if (this.originalDisableMessageID == null) {         this.originalDisableMessageID = this.target.getDisableMessageID().     }     this.target.setDisableMessageID(disableMessageID). }
false;public;0;4;;@Override public boolean getDisableMessageID() throws JMSException {     return this.target.getDisableMessageID(). }
false;public;1;7;;@Override public void setDisableMessageTimestamp(boolean disableMessageTimestamp) throws JMSException {     if (this.originalDisableMessageTimestamp == null) {         this.originalDisableMessageTimestamp = this.target.getDisableMessageTimestamp().     }     this.target.setDisableMessageTimestamp(disableMessageTimestamp). }
false;public;0;4;;@Override public boolean getDisableMessageTimestamp() throws JMSException {     return this.target.getDisableMessageTimestamp(). }
false;public;1;6;;public void setDeliveryDelay(long deliveryDelay) throws JMSException {     if (this.originalDeliveryDelay == null) {         this.originalDeliveryDelay = this.target.getDeliveryDelay().     }     this.target.setDeliveryDelay(deliveryDelay). }
false;public;0;3;;public long getDeliveryDelay() throws JMSException {     return this.target.getDeliveryDelay(). }
false;public;1;4;;@Override public void setDeliveryMode(int deliveryMode) {     this.deliveryMode = deliveryMode. }
false;public;0;4;;@Override public int getDeliveryMode() {     return this.deliveryMode. }
false;public;1;4;;@Override public void setPriority(int priority) {     this.priority = priority. }
false;public;0;4;;@Override public int getPriority() {     return this.priority. }
false;public;1;4;;@Override public void setTimeToLive(long timeToLive) {     this.timeToLive = timeToLive. }
false;public;0;4;;@Override public long getTimeToLive() {     return this.timeToLive. }
false;public;0;4;;@Override public Destination getDestination() throws JMSException {     return this.target.getDestination(). }
false;public;0;4;;@Override public Queue getQueue() throws JMSException {     return (Queue) this.target.getDestination(). }
false;public;0;4;;@Override public Topic getTopic() throws JMSException {     return (Topic) this.target.getDestination(). }
false;public;1;4;;@Override public void send(Message message) throws JMSException {     this.target.send(message, this.deliveryMode, this.priority, this.timeToLive). }
false;public;4;4;;@Override public void send(Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {     this.target.send(message, deliveryMode, priority, timeToLive). }
false;public;2;4;;@Override public void send(Destination destination, Message message) throws JMSException {     this.target.send(destination, message, this.deliveryMode, this.priority, this.timeToLive). }
false;public;5;4;;@Override public void send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {     this.target.send(destination, message, deliveryMode, priority, timeToLive). }
false;public;2;4;;@Override public void send(Message message, CompletionListener completionListener) throws JMSException {     this.target.send(message, this.deliveryMode, this.priority, this.timeToLive, completionListener). }
false;public;5;6;;@Override public void send(Message message, int deliveryMode, int priority, long timeToLive, CompletionListener completionListener) throws JMSException {     this.target.send(message, deliveryMode, priority, timeToLive, completionListener). }
false;public;3;4;;@Override public void send(Destination destination, Message message, CompletionListener completionListener) throws JMSException {     this.target.send(destination, message, this.deliveryMode, this.priority, this.timeToLive, completionListener). }
false;public;6;7;;@Override public void send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive, CompletionListener completionListener) throws JMSException {     this.target.send(destination, message, deliveryMode, priority, timeToLive, completionListener). }
false;public;2;4;;@Override public void send(Queue queue, Message message) throws JMSException {     this.target.send(queue, message, this.deliveryMode, this.priority, this.timeToLive). }
false;public;5;4;;@Override public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {     this.target.send(queue, message, deliveryMode, priority, timeToLive). }
false;public;1;4;;@Override public void publish(Message message) throws JMSException {     this.target.send(message, this.deliveryMode, this.priority, this.timeToLive). }
false;public;4;4;;@Override public void publish(Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {     this.target.send(message, deliveryMode, priority, timeToLive). }
false;public;2;4;;@Override public void publish(Topic topic, Message message) throws JMSException {     this.target.send(topic, message, this.deliveryMode, this.priority, this.timeToLive). }
false;public;5;4;;@Override public void publish(Topic topic, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {     this.target.send(topic, message, deliveryMode, priority, timeToLive). }
false;public;0;16;;@Override public void close() throws JMSException {     // It's a cached MessageProducer... reset properties only.     if (this.originalDisableMessageID != null) {         this.target.setDisableMessageID(this.originalDisableMessageID).         this.originalDisableMessageID = null.     }     if (this.originalDisableMessageTimestamp != null) {         this.target.setDisableMessageTimestamp(this.originalDisableMessageTimestamp).         this.originalDisableMessageTimestamp = null.     }     if (this.originalDeliveryDelay != null) {         this.target.setDeliveryDelay(this.originalDeliveryDelay).         this.originalDeliveryDelay = null.     } }
false;public;0;4;;@Override public String toString() {     return "Cached JMS MessageProducer: " + this.target. }
