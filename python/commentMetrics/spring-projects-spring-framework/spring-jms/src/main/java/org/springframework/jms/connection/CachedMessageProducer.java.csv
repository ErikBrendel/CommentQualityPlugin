# id;timestamp;commentText;codeText;commentWords;codeWords
CachedMessageProducer -> public MessageProducer getProxyIfNecessary();1364391982;Build a dynamic proxy that reflectively adapts to JMS 2.0 API methods, if necessary._Otherwise simply return this CachedMessageProducer instance itself.;public MessageProducer getProxyIfNecessary() {_		if (completionListenerClass != null) {_			return (MessageProducer) Proxy.newProxyInstance(CachedMessageProducer.class.getClassLoader(),_					new Class[] {MessageProducer.class, QueueSender.class, TopicPublisher.class},_					new Jms2MessageProducerInvocationHandler())__		}_		else {_			return this__		}_	};build,a,dynamic,proxy,that,reflectively,adapts,to,jms,2,0,api,methods,if,necessary,otherwise,simply,return,this,cached,message,producer,instance,itself;public,message,producer,get,proxy,if,necessary,if,completion,listener,class,null,return,message,producer,proxy,new,proxy,instance,cached,message,producer,class,get,class,loader,new,class,message,producer,class,queue,sender,class,topic,publisher,class,new,jms2message,producer,invocation,handler,else,return,this
CachedMessageProducer -> public MessageProducer getProxyIfNecessary();1368482696;Build a dynamic proxy that reflectively adapts to JMS 2.0 API methods, if necessary._Otherwise simply return this CachedMessageProducer instance itself.;public MessageProducer getProxyIfNecessary() {_		if (completionListenerClass != null) {_			return (MessageProducer) Proxy.newProxyInstance(CachedMessageProducer.class.getClassLoader(),_					new Class[] {MessageProducer.class, QueueSender.class, TopicPublisher.class},_					new Jms2MessageProducerInvocationHandler())__		}_		else {_			return this__		}_	};build,a,dynamic,proxy,that,reflectively,adapts,to,jms,2,0,api,methods,if,necessary,otherwise,simply,return,this,cached,message,producer,instance,itself;public,message,producer,get,proxy,if,necessary,if,completion,listener,class,null,return,message,producer,proxy,new,proxy,instance,cached,message,producer,class,get,class,loader,new,class,message,producer,class,queue,sender,class,topic,publisher,class,new,jms2message,producer,invocation,handler,else,return,this
CachedMessageProducer -> public MessageProducer getProxyIfNecessary();1385412762;Build a dynamic proxy that reflectively adapts to JMS 2.0 API methods, if necessary._Otherwise simply return this CachedMessageProducer instance itself.;public MessageProducer getProxyIfNecessary() {_		if (completionListenerClass != null) {_			return (MessageProducer) Proxy.newProxyInstance(CachedMessageProducer.class.getClassLoader(),_					new Class<?>[] {MessageProducer.class, QueueSender.class, TopicPublisher.class},_					new Jms2MessageProducerInvocationHandler())__		}_		else {_			return this__		}_	};build,a,dynamic,proxy,that,reflectively,adapts,to,jms,2,0,api,methods,if,necessary,otherwise,simply,return,this,cached,message,producer,instance,itself;public,message,producer,get,proxy,if,necessary,if,completion,listener,class,null,return,message,producer,proxy,new,proxy,instance,cached,message,producer,class,get,class,loader,new,class,message,producer,class,queue,sender,class,topic,publisher,class,new,jms2message,producer,invocation,handler,else,return,this
CachedMessageProducer -> public MessageProducer getProxyIfNecessary();1404426343;Build a dynamic proxy that reflectively adapts to JMS 2.0 API methods, if necessary._Otherwise simply return this CachedMessageProducer instance itself.;public MessageProducer getProxyIfNecessary() {_		if (completionListenerClass != null) {_			return (MessageProducer) Proxy.newProxyInstance(CachedMessageProducer.class.getClassLoader(),_					new Class<?>[] {MessageProducer.class, QueueSender.class, TopicPublisher.class},_					new Jms2MessageProducerInvocationHandler())__		}_		else {_			return this__		}_	};build,a,dynamic,proxy,that,reflectively,adapts,to,jms,2,0,api,methods,if,necessary,otherwise,simply,return,this,cached,message,producer,instance,itself;public,message,producer,get,proxy,if,necessary,if,completion,listener,class,null,return,message,producer,proxy,new,proxy,instance,cached,message,producer,class,get,class,loader,new,class,message,producer,class,queue,sender,class,topic,publisher,class,new,jms2message,producer,invocation,handler,else,return,this
CachedMessageProducer -> public MessageProducer getProxyIfNecessary();1404475736;Build a dynamic proxy that reflectively adapts to JMS 2.0 API methods, if necessary._Otherwise simply return this CachedMessageProducer instance itself.;public MessageProducer getProxyIfNecessary() {_		if (completionListenerClass != null) {_			return (MessageProducer) Proxy.newProxyInstance(CachedMessageProducer.class.getClassLoader(),_					new Class<?>[] {MessageProducer.class, QueueSender.class, TopicPublisher.class},_					new Jms2MessageProducerInvocationHandler())__		}_		else {_			return this__		}_	};build,a,dynamic,proxy,that,reflectively,adapts,to,jms,2,0,api,methods,if,necessary,otherwise,simply,return,this,cached,message,producer,instance,itself;public,message,producer,get,proxy,if,necessary,if,completion,listener,class,null,return,message,producer,proxy,new,proxy,instance,cached,message,producer,class,get,class,loader,new,class,message,producer,class,queue,sender,class,topic,publisher,class,new,jms2message,producer,invocation,handler,else,return,this
CachedMessageProducer -> public MessageProducer getProxyIfNecessary();1404482946;Build a dynamic proxy that reflectively adapts to JMS 2.0 API methods, if necessary._Otherwise simply return this CachedMessageProducer instance itself.;public MessageProducer getProxyIfNecessary() {_		if (completionListenerClass != null) {_			return (MessageProducer) Proxy.newProxyInstance(CachedMessageProducer.class.getClassLoader(),_					new Class<?>[] {MessageProducer.class, QueueSender.class, TopicPublisher.class},_					new Jms2MessageProducerInvocationHandler())__		}_		else {_			return this__		}_	};build,a,dynamic,proxy,that,reflectively,adapts,to,jms,2,0,api,methods,if,necessary,otherwise,simply,return,this,cached,message,producer,instance,itself;public,message,producer,get,proxy,if,necessary,if,completion,listener,class,null,return,message,producer,proxy,new,proxy,instance,cached,message,producer,class,get,class,loader,new,class,message,producer,class,queue,sender,class,topic,publisher,class,new,jms2message,producer,invocation,handler,else,return,this
CachedMessageProducer -> public MessageProducer getProxyIfNecessary();1434018810;Build a dynamic proxy that reflectively adapts to JMS 2.0 API methods, if necessary._Otherwise simply return this CachedMessageProducer instance itself.;public MessageProducer getProxyIfNecessary() {_		if (completionListenerClass != null) {_			return (MessageProducer) Proxy.newProxyInstance(CachedMessageProducer.class.getClassLoader(),_					new Class<?>[] {MessageProducer.class, QueueSender.class, TopicPublisher.class},_					new Jms2MessageProducerInvocationHandler())__		}_		else {_			return this__		}_	};build,a,dynamic,proxy,that,reflectively,adapts,to,jms,2,0,api,methods,if,necessary,otherwise,simply,return,this,cached,message,producer,instance,itself;public,message,producer,get,proxy,if,necessary,if,completion,listener,class,null,return,message,producer,proxy,new,proxy,instance,cached,message,producer,class,get,class,loader,new,class,message,producer,class,queue,sender,class,topic,publisher,class,new,jms2message,producer,invocation,handler,else,return,this
CachedMessageProducer -> public MessageProducer getProxyIfNecessary();1449660489;Build a dynamic proxy that reflectively adapts to JMS 2.0 API methods, if necessary._Otherwise simply return this CachedMessageProducer instance itself.;public MessageProducer getProxyIfNecessary() {_		if (completionListenerClass != null) {_			return (MessageProducer) Proxy.newProxyInstance(CachedMessageProducer.class.getClassLoader(),_					new Class<?>[] {MessageProducer.class, QueueSender.class, TopicPublisher.class},_					new Jms2MessageProducerInvocationHandler())__		}_		else {_			return this__		}_	};build,a,dynamic,proxy,that,reflectively,adapts,to,jms,2,0,api,methods,if,necessary,otherwise,simply,return,this,cached,message,producer,instance,itself;public,message,producer,get,proxy,if,necessary,if,completion,listener,class,null,return,message,producer,proxy,new,proxy,instance,cached,message,producer,class,get,class,loader,new,class,message,producer,class,queue,sender,class,topic,publisher,class,new,jms2message,producer,invocation,handler,else,return,this
