commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@link JmsListenerEndpointRegistry} instance to use.  */ ;/**  * Set the {@link JmsListenerEndpointRegistry} instance to use.  */ public void setEndpointRegistry(@Nullable JmsListenerEndpointRegistry endpointRegistry) {     this.endpointRegistry = endpointRegistry. }
true;public;0;4;/**  * Return the {@link JmsListenerEndpointRegistry} instance for this  * registrar, may be {@code null}.  */ ;/**  * Return the {@link JmsListenerEndpointRegistry} instance for this  * registrar, may be {@code null}.  */ @Nullable public JmsListenerEndpointRegistry getEndpointRegistry() {     return this.endpointRegistry. }
true;public;1;3;/**  * Set the {@link MessageHandlerMethodFactory} to use to configure the message  * listener responsible to serve an endpoint detected by this processor.  * <p>By default, {@link DefaultMessageHandlerMethodFactory} is used and it  * can be configured further to support additional method arguments  * or to customize conversion and validation support. See  * {@link DefaultMessageHandlerMethodFactory} javadoc for more details.  */ ;/**  * Set the {@link MessageHandlerMethodFactory} to use to configure the message  * listener responsible to serve an endpoint detected by this processor.  * <p>By default, {@link DefaultMessageHandlerMethodFactory} is used and it  * can be configured further to support additional method arguments  * or to customize conversion and validation support. See  * {@link DefaultMessageHandlerMethodFactory} javadoc for more details.  */ public void setMessageHandlerMethodFactory(@Nullable MessageHandlerMethodFactory messageHandlerMethodFactory) {     this.messageHandlerMethodFactory = messageHandlerMethodFactory. }
true;public;0;4;/**  * Return the custom {@link MessageHandlerMethodFactory} to use, if any.  */ ;/**  * Return the custom {@link MessageHandlerMethodFactory} to use, if any.  */ @Nullable public MessageHandlerMethodFactory getMessageHandlerMethodFactory() {     return this.messageHandlerMethodFactory. }
true;public;1;3;/**  * Set the {@link JmsListenerContainerFactory} to use in case a {@link JmsListenerEndpoint}  * is registered with a {@code null} container factory.  * <p>Alternatively, the bean name of the {@link JmsListenerContainerFactory} to use  * can be specified for a lazy lookup, see {@link #setContainerFactoryBeanName}.  */ ;/**  * Set the {@link JmsListenerContainerFactory} to use in case a {@link JmsListenerEndpoint}  * is registered with a {@code null} container factory.  * <p>Alternatively, the bean name of the {@link JmsListenerContainerFactory} to use  * can be specified for a lazy lookup, see {@link #setContainerFactoryBeanName}.  */ public void setContainerFactory(JmsListenerContainerFactory<?> containerFactory) {     this.containerFactory = containerFactory. }
true;public;1;3;/**  * Set the bean name of the {@link JmsListenerContainerFactory} to use in case  * a {@link JmsListenerEndpoint} is registered with a {@code null} container factory.  * Alternatively, the container factory instance can be registered directly:  * see {@link #setContainerFactory(JmsListenerContainerFactory)}.  * @see #setBeanFactory  */ ;/**  * Set the bean name of the {@link JmsListenerContainerFactory} to use in case  * a {@link JmsListenerEndpoint} is registered with a {@code null} container factory.  * Alternatively, the container factory instance can be registered directly:  * see {@link #setContainerFactory(JmsListenerContainerFactory)}.  * @see #setBeanFactory  */ public void setContainerFactoryBeanName(String containerFactoryBeanName) {     this.containerFactoryBeanName = containerFactoryBeanName. }
true;public;1;7;/**  * A {@link BeanFactory} only needs to be available in conjunction with  * {@link #setContainerFactoryBeanName}.  */ ;/**  * A {@link BeanFactory} only needs to be available in conjunction with  * {@link #setContainerFactoryBeanName}.  */ @Override public void setBeanFactory(BeanFactory beanFactory) {     this.beanFactory = beanFactory.     if (beanFactory instanceof ConfigurableBeanFactory) {         this.mutex = ((ConfigurableBeanFactory) beanFactory).getSingletonMutex().     } }
false;public;0;4;;@Override public void afterPropertiesSet() {     registerAllEndpoints(). }
false;protected;0;10;;protected void registerAllEndpoints() {     Assert.state(this.endpointRegistry != null, "No JmsListenerEndpointRegistry set").     synchronized (this.mutex) {         for (JmsListenerEndpointDescriptor descriptor : this.endpointDescriptors) {             this.endpointRegistry.registerListenerContainer(descriptor.endpoint, resolveContainerFactory(descriptor)).         }         // trigger immediate startup         this.startImmediately = true.     } }
false;private;1;20;;private JmsListenerContainerFactory<?> resolveContainerFactory(JmsListenerEndpointDescriptor descriptor) {     if (descriptor.containerFactory != null) {         return descriptor.containerFactory.     } else if (this.containerFactory != null) {         return this.containerFactory.     } else if (this.containerFactoryBeanName != null) {         Assert.state(this.beanFactory != null, "BeanFactory must be set to obtain container factory by bean name").         // Consider changing this if live change of the factory is required...         this.containerFactory = this.beanFactory.getBean(this.containerFactoryBeanName, JmsListenerContainerFactory.class).         return this.containerFactory.     } else {         throw new IllegalStateException("Could not resolve the " + JmsListenerContainerFactory.class.getSimpleName() + " to use for [" + descriptor.endpoint + "] no factory was given and no default is set.").     } }
true;public;2;18;/**  * Register a new {@link JmsListenerEndpoint} alongside the  * {@link JmsListenerContainerFactory} to use to create the underlying container.  * <p>The {@code factory} may be {@code null} if the default factory has to be  * used for that endpoint.  */ ;/**  * Register a new {@link JmsListenerEndpoint} alongside the  * {@link JmsListenerContainerFactory} to use to create the underlying container.  * <p>The {@code factory} may be {@code null} if the default factory has to be  * used for that endpoint.  */ public void registerEndpoint(JmsListenerEndpoint endpoint, @Nullable JmsListenerContainerFactory<?> factory) {     Assert.notNull(endpoint, "Endpoint must not be null").     Assert.hasText(endpoint.getId(), "Endpoint id must be set").     // Factory may be null, we defer the resolution right before actually creating the container     JmsListenerEndpointDescriptor descriptor = new JmsListenerEndpointDescriptor(endpoint, factory).     synchronized (this.mutex) {         if (this.startImmediately) {             // register and start immediately             Assert.state(this.endpointRegistry != null, "No JmsListenerEndpointRegistry set").             this.endpointRegistry.registerListenerContainer(descriptor.endpoint, resolveContainerFactory(descriptor), true).         } else {             this.endpointDescriptors.add(descriptor).         }     } }
true;public;1;3;/**  * Register a new {@link JmsListenerEndpoint} using the default  * {@link JmsListenerContainerFactory} to create the underlying container.  * @see #setContainerFactory(JmsListenerContainerFactory)  * @see #registerEndpoint(JmsListenerEndpoint, JmsListenerContainerFactory)  */ ;/**  * Register a new {@link JmsListenerEndpoint} using the default  * {@link JmsListenerContainerFactory} to create the underlying container.  * @see #setContainerFactory(JmsListenerContainerFactory)  * @see #registerEndpoint(JmsListenerEndpoint, JmsListenerContainerFactory)  */ public void registerEndpoint(JmsListenerEndpoint endpoint) {     registerEndpoint(endpoint, null). }
