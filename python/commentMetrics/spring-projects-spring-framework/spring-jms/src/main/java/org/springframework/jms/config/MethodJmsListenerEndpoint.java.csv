commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the actual bean instance to invoke this endpoint method on.  */ ;/**  * Set the actual bean instance to invoke this endpoint method on.  */ public void setBean(@Nullable Object bean) {     this.bean = bean. }
false;public;0;4;;@Nullable public Object getBean() {     return this.bean. }
true;public;1;3;/**  * Set the method to invoke for processing a message managed by this endpoint.  */ ;/**  * Set the method to invoke for processing a message managed by this endpoint.  */ public void setMethod(@Nullable Method method) {     this.method = method. }
false;public;0;4;;@Nullable public Method getMethod() {     return this.method. }
true;public;1;3;/**  * Set the most specific method known for this endpoint's declaration.  * <p>In case of a proxy, this will be the method on the target class  * (if annotated itself, that is, if not just annotated in an interface).  * @since 4.2.3  */ ;/**  * Set the most specific method known for this endpoint's declaration.  * <p>In case of a proxy, this will be the method on the target class  * (if annotated itself, that is, if not just annotated in an interface).  * @since 4.2.3  */ public void setMostSpecificMethod(@Nullable Method mostSpecificMethod) {     this.mostSpecificMethod = mostSpecificMethod. }
false;public;0;15;;@Nullable public Method getMostSpecificMethod() {     if (this.mostSpecificMethod != null) {         return this.mostSpecificMethod.     }     Method method = getMethod().     if (method != null) {         Object bean = getBean().         if (AopUtils.isAopProxy(bean)) {             Class<?> targetClass = AopProxyUtils.ultimateTargetClass(bean).             method = AopUtils.getMostSpecificMethod(method, targetClass).         }     }     return method. }
true;public;1;3;/**  * Set the {@link MessageHandlerMethodFactory} to use to build the  * {@link InvocableHandlerMethod} responsible to manage the invocation  * of this endpoint.  */ ;/**  * Set the {@link MessageHandlerMethodFactory} to use to build the  * {@link InvocableHandlerMethod} responsible to manage the invocation  * of this endpoint.  */ public void setMessageHandlerMethodFactory(MessageHandlerMethodFactory messageHandlerMethodFactory) {     this.messageHandlerMethodFactory = messageHandlerMethodFactory. }
true;public;1;3;/**  * Set a value resolver for embedded placeholders and expressions.  */ ;/**  * Set a value resolver for embedded placeholders and expressions.  */ public void setEmbeddedValueResolver(@Nullable StringValueResolver embeddedValueResolver) {     this.embeddedValueResolver = embeddedValueResolver. }
true;public;1;6;/**  * Set the {@link BeanFactory} to use to resolve expressions (may be {@code null}).  */ ;/**  * Set the {@link BeanFactory} to use to resolve expressions (may be {@code null}).  */ @Override public void setBeanFactory(@Nullable BeanFactory beanFactory) {     if (this.embeddedValueResolver == null && beanFactory instanceof ConfigurableBeanFactory) {         this.embeddedValueResolver = new EmbeddedValueResolver((ConfigurableBeanFactory) beanFactory).     } }
false;protected;1;31;;@Override protected MessagingMessageListenerAdapter createMessageListener(MessageListenerContainer container) {     Assert.state(this.messageHandlerMethodFactory != null, "Could not create message listener - MessageHandlerMethodFactory not set").     MessagingMessageListenerAdapter messageListener = createMessageListenerInstance().     InvocableHandlerMethod invocableHandlerMethod = this.messageHandlerMethodFactory.createInvocableHandlerMethod(getBean(), getMethod()).     messageListener.setHandlerMethod(invocableHandlerMethod).     String responseDestination = getDefaultResponseDestination().     if (StringUtils.hasText(responseDestination)) {         if (container.isReplyPubSubDomain()) {             messageListener.setDefaultResponseTopicName(responseDestination).         } else {             messageListener.setDefaultResponseQueueName(responseDestination).         }     }     QosSettings responseQosSettings = container.getReplyQosSettings().     if (responseQosSettings != null) {         messageListener.setResponseQosSettings(responseQosSettings).     }     MessageConverter messageConverter = container.getMessageConverter().     if (messageConverter != null) {         messageListener.setMessageConverter(messageConverter).     }     DestinationResolver destinationResolver = container.getDestinationResolver().     if (destinationResolver != null) {         messageListener.setDestinationResolver(destinationResolver).     }     return messageListener. }
true;protected;0;3;/**  * Create an empty {@link MessagingMessageListenerAdapter} instance.  * @return a new {@code MessagingMessageListenerAdapter} or subclass thereof  */ ;/**  * Create an empty {@link MessagingMessageListenerAdapter} instance.  * @return a new {@code MessagingMessageListenerAdapter} or subclass thereof  */ protected MessagingMessageListenerAdapter createMessageListenerInstance() {     return new MessagingMessageListenerAdapter(). }
true;protected;0;17;/**  * Return the default response destination, if any.  */ ;/**  * Return the default response destination, if any.  */ @Nullable protected String getDefaultResponseDestination() {     Method specificMethod = getMostSpecificMethod().     if (specificMethod == null) {         return null.     }     SendTo ann = getSendTo(specificMethod).     if (ann != null) {         Object[] destinations = ann.value().         if (destinations.length != 1) {             throw new IllegalStateException("Invalid @" + SendTo.class.getSimpleName() + " annotation on '" + specificMethod + "' one destination must be set (got " + Arrays.toString(destinations) + ")").         }         return resolve((String) destinations[0]).     }     return null. }
false;private;1;8;;@Nullable private SendTo getSendTo(Method specificMethod) {     SendTo ann = AnnotatedElementUtils.findMergedAnnotation(specificMethod, SendTo.class).     if (ann == null) {         ann = AnnotatedElementUtils.findMergedAnnotation(specificMethod.getDeclaringClass(), SendTo.class).     }     return ann. }
false;private;1;4;;@Nullable private String resolve(String value) {     return (this.embeddedValueResolver != null ? this.embeddedValueResolver.resolveStringValue(value) : value). }
false;protected;0;6;;@Override protected StringBuilder getEndpointDescription() {     return super.getEndpointDescription().append(" | bean='").append(this.bean).append("'").append(" | method='").append(this.method).append("'"). }
