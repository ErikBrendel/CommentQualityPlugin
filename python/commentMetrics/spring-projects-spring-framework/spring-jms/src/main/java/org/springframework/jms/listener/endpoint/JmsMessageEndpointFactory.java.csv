commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the JMS MessageListener for this endpoint.  */ ;/**  * Set the JMS MessageListener for this endpoint.  */ public void setMessageListener(MessageListener messageListener) {     this.messageListener = messageListener. }
true;protected;0;4;/**  * Return the JMS MessageListener for this endpoint.  */ ;/**  * Return the JMS MessageListener for this endpoint.  */ protected MessageListener getMessageListener() {     Assert.state(this.messageListener != null, "No MessageListener set").     return this.messageListener. }
true;protected;0;4;/**  * Creates a concrete JMS message endpoint, internal to this factory.  */ ;/**  * Creates a concrete JMS message endpoint, internal to this factory.  */ @Override protected AbstractMessageEndpoint createEndpointInternal() throws UnavailableException {     return new JmsMessageEndpoint(). }
false;public;1;33;;@Override public void onMessage(Message message) {     Throwable endpointEx = null.     boolean applyDeliveryCalls = !hasBeforeDeliveryBeenCalled().     if (applyDeliveryCalls) {         try {             beforeDelivery(null).         } catch (ResourceException ex) {             throw new JmsResourceException(ex).         }     }     try {         getMessageListener().onMessage(message).     } catch (RuntimeException | Error ex) {         endpointEx = ex.         onEndpointException(ex).         throw ex.     } finally {         if (applyDeliveryCalls) {             try {                 afterDelivery().             } catch (ResourceException ex) {                 if (endpointEx == null) {                     throw new JmsResourceException(ex).                 }             }         }     } }
false;protected;0;4;;@Override protected ClassLoader getEndpointClassLoader() {     return getMessageListener().getClass().getClassLoader(). }
