commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * @see DefaultMessageListenerContainer#setTaskExecutor  */ ;/**  * @see DefaultMessageListenerContainer#setTaskExecutor  */ public void setTaskExecutor(Executor taskExecutor) {     this.taskExecutor = taskExecutor. }
true;public;1;3;/**  * @see DefaultMessageListenerContainer#setTransactionManager  */ ;/**  * @see DefaultMessageListenerContainer#setTransactionManager  */ public void setTransactionManager(PlatformTransactionManager transactionManager) {     this.transactionManager = transactionManager. }
true;public;1;3;/**  * @see DefaultMessageListenerContainer#setCacheLevel  */ ;/**  * @see DefaultMessageListenerContainer#setCacheLevel  */ public void setCacheLevel(Integer cacheLevel) {     this.cacheLevel = cacheLevel. }
true;public;1;3;/**  * @see DefaultMessageListenerContainer#setCacheLevelName  */ ;/**  * @see DefaultMessageListenerContainer#setCacheLevelName  */ public void setCacheLevelName(String cacheLevelName) {     this.cacheLevelName = cacheLevelName. }
true;public;1;3;/**  * @see DefaultMessageListenerContainer#setConcurrency  */ ;/**  * @see DefaultMessageListenerContainer#setConcurrency  */ public void setConcurrency(String concurrency) {     this.concurrency = concurrency. }
true;public;1;3;/**  * @see DefaultMessageListenerContainer#setMaxMessagesPerTask  */ ;/**  * @see DefaultMessageListenerContainer#setMaxMessagesPerTask  */ public void setMaxMessagesPerTask(Integer maxMessagesPerTask) {     this.maxMessagesPerTask = maxMessagesPerTask. }
true;public;1;3;/**  * @see DefaultMessageListenerContainer#setReceiveTimeout  */ ;/**  * @see DefaultMessageListenerContainer#setReceiveTimeout  */ public void setReceiveTimeout(Long receiveTimeout) {     this.receiveTimeout = receiveTimeout. }
true;public;1;3;/**  * @see DefaultMessageListenerContainer#setRecoveryInterval  */ ;/**  * @see DefaultMessageListenerContainer#setRecoveryInterval  */ public void setRecoveryInterval(Long recoveryInterval) {     this.recoveryInterval = recoveryInterval. }
true;public;1;3;/**  * @see DefaultMessageListenerContainer#setBackOff  */ ;/**  * @see DefaultMessageListenerContainer#setBackOff  */ public void setBackOff(BackOff backOff) {     this.backOff = backOff. }
false;protected;0;4;;@Override protected DefaultMessageListenerContainer createContainerInstance() {     return new DefaultMessageListenerContainer(). }
false;protected;1;36;;@Override protected void initializeContainer(DefaultMessageListenerContainer container) {     if (this.taskExecutor != null) {         container.setTaskExecutor(this.taskExecutor).     }     if (this.transactionManager != null) {         container.setTransactionManager(this.transactionManager).     }     if (this.cacheLevel != null) {         container.setCacheLevel(this.cacheLevel).     } else if (this.cacheLevelName != null) {         container.setCacheLevelName(this.cacheLevelName).     }     if (this.concurrency != null) {         container.setConcurrency(this.concurrency).     }     if (this.maxMessagesPerTask != null) {         container.setMaxMessagesPerTask(this.maxMessagesPerTask).     }     if (this.receiveTimeout != null) {         container.setReceiveTimeout(this.receiveTimeout).     }     if (this.backOff != null) {         container.setBackOff(this.backOff).         if (this.recoveryInterval != null) {             logger.info("Ignoring recovery interval in DefaultJmsListenerContainerFactory in favor of BackOff").         }     } else if (this.recoveryInterval != null) {         container.setRecoveryInterval(this.recoveryInterval).     } }
