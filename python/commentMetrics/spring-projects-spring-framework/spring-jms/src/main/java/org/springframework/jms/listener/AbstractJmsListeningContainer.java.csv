# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractJmsListeningContainer -> @Nullable 	public String getClientId();1495868221;Return the JMS client ID for the shared Connection created and used_by this container, if any.;@Nullable_	public String getClientId() {_		return this.clientId__	};return,the,jms,client,id,for,the,shared,connection,created,and,used,by,this,container,if,any;nullable,public,string,get,client,id,return,this,client,id
AbstractJmsListeningContainer -> @Nullable 	public String getClientId();1498780456;Return the JMS client ID for the shared Connection created and used_by this container, if any.;@Nullable_	public String getClientId() {_		return this.clientId__	};return,the,jms,client,id,for,the,shared,connection,created,and,used,by,this,container,if,any;nullable,public,string,get,client,id,return,this,client,id
AbstractJmsListeningContainer -> @Nullable 	public String getClientId();1500448076;Return the JMS client ID for the shared Connection created and used_by this container, if any.;@Nullable_	public String getClientId() {_		return this.clientId__	};return,the,jms,client,id,for,the,shared,connection,created,and,used,by,this,container,if,any;nullable,public,string,get,client,id,return,this,client,id
AbstractJmsListeningContainer -> @Nullable 	public String getClientId();1521123475;Return the JMS client ID for the shared Connection created and used_by this container, if any.;@Nullable_	public String getClientId() {_		return this.clientId__	};return,the,jms,client,id,for,the,shared,connection,created,and,used,by,this,container,if,any;nullable,public,string,get,client,id,return,this,client,id
AbstractJmsListeningContainer -> @Nullable 	public String getClientId();1534414082;Return the JMS client ID for the shared Connection created and used_by this container, if any.;@Nullable_	public String getClientId() {_		return this.clientId__	};return,the,jms,client,id,for,the,shared,connection,created,and,used,by,this,container,if,any;nullable,public,string,get,client,id,return,this,client,id
AbstractJmsListeningContainer -> @Override 	public void afterPropertiesSet();1328020251;Delegates to {@link #validateConfiguration()} and {@link #initialize()}.;@Override_	public void afterPropertiesSet() {_		super.afterPropertiesSet()__		validateConfiguration()__		initialize()__	};delegates,to,link,validate,configuration,and,link,initialize;override,public,void,after,properties,set,super,after,properties,set,validate,configuration,initialize
AbstractJmsListeningContainer -> @Override 	public void afterPropertiesSet();1355394580;Delegates to {@link #validateConfiguration()} and {@link #initialize()}.;@Override_	public void afterPropertiesSet() {_		super.afterPropertiesSet()__		validateConfiguration()__		initialize()__	};delegates,to,link,validate,configuration,and,link,initialize;override,public,void,after,properties,set,super,after,properties,set,validate,configuration,initialize
AbstractJmsListeningContainer -> @Override 	public void afterPropertiesSet();1356735495;Delegates to {@link #validateConfiguration()} and {@link #initialize()}.;@Override_	public void afterPropertiesSet() {_		super.afterPropertiesSet()__		validateConfiguration()__		initialize()__	};delegates,to,link,validate,configuration,and,link,initialize;override,public,void,after,properties,set,super,after,properties,set,validate,configuration,initialize
AbstractJmsListeningContainer -> @Override 	public void afterPropertiesSet();1357119239;Delegates to {@link #validateConfiguration()} and {@link #initialize()}.;@Override_	public void afterPropertiesSet() {_		super.afterPropertiesSet()__		validateConfiguration()__		initialize()__	};delegates,to,link,validate,configuration,and,link,initialize;override,public,void,after,properties,set,super,after,properties,set,validate,configuration,initialize
AbstractJmsListeningContainer -> @Override 	public void afterPropertiesSet();1368482696;Delegates to {@link #validateConfiguration()} and {@link #initialize()}.;@Override_	public void afterPropertiesSet() {_		super.afterPropertiesSet()__		validateConfiguration()__		initialize()__	};delegates,to,link,validate,configuration,and,link,initialize;override,public,void,after,properties,set,super,after,properties,set,validate,configuration,initialize
AbstractJmsListeningContainer -> @Override 	public void afterPropertiesSet();1403791284;Delegates to {@link #validateConfiguration()} and {@link #initialize()}.;@Override_	public void afterPropertiesSet() {_		super.afterPropertiesSet()__		validateConfiguration()__		initialize()__	};delegates,to,link,validate,configuration,and,link,initialize;override,public,void,after,properties,set,super,after,properties,set,validate,configuration,initialize
AbstractJmsListeningContainer -> @Override 	public void afterPropertiesSet();1462186904;Delegates to {@link #validateConfiguration()} and {@link #initialize()}.;@Override_	public void afterPropertiesSet() {_		super.afterPropertiesSet()__		validateConfiguration()__		initialize()__	};delegates,to,link,validate,configuration,and,link,initialize;override,public,void,after,properties,set,super,after,properties,set,validate,configuration,initialize
AbstractJmsListeningContainer -> @Override 	public void afterPropertiesSet();1467730834;Delegates to {@link #validateConfiguration()} and {@link #initialize()}.;@Override_	public void afterPropertiesSet() {_		super.afterPropertiesSet()__		validateConfiguration()__		initialize()__	};delegates,to,link,validate,configuration,and,link,initialize;override,public,void,after,properties,set,super,after,properties,set,validate,configuration,initialize
AbstractJmsListeningContainer -> @Override 	public void afterPropertiesSet();1495868221;Delegates to {@link #validateConfiguration()} and {@link #initialize()}.;@Override_	public void afterPropertiesSet() {_		super.afterPropertiesSet()__		validateConfiguration()__		initialize()__	};delegates,to,link,validate,configuration,and,link,initialize;override,public,void,after,properties,set,super,after,properties,set,validate,configuration,initialize
AbstractJmsListeningContainer -> @Override 	public void afterPropertiesSet();1498780456;Delegates to {@link #validateConfiguration()} and {@link #initialize()}.;@Override_	public void afterPropertiesSet() {_		super.afterPropertiesSet()__		validateConfiguration()__		initialize()__	};delegates,to,link,validate,configuration,and,link,initialize;override,public,void,after,properties,set,super,after,properties,set,validate,configuration,initialize
AbstractJmsListeningContainer -> @Override 	public void afterPropertiesSet();1500448076;Delegates to {@link #validateConfiguration()} and {@link #initialize()}.;@Override_	public void afterPropertiesSet() {_		super.afterPropertiesSet()__		validateConfiguration()__		initialize()__	};delegates,to,link,validate,configuration,and,link,initialize;override,public,void,after,properties,set,super,after,properties,set,validate,configuration,initialize
AbstractJmsListeningContainer -> @Override 	public void afterPropertiesSet();1521123475;Delegates to {@link #validateConfiguration()} and {@link #initialize()}.;@Override_	public void afterPropertiesSet() {_		super.afterPropertiesSet()__		validateConfiguration()__		initialize()__	};delegates,to,link,validate,configuration,and,link,initialize;override,public,void,after,properties,set,super,after,properties,set,validate,configuration,initialize
AbstractJmsListeningContainer -> @Override 	public void afterPropertiesSet();1534414082;Delegates to {@link #validateConfiguration()} and {@link #initialize()}.;@Override_	public void afterPropertiesSet() {_		super.afterPropertiesSet()__		validateConfiguration()__		initialize()__	};delegates,to,link,validate,configuration,and,link,initialize;override,public,void,after,properties,set,super,after,properties,set,validate,configuration,initialize
AbstractJmsListeningContainer -> protected final void refreshSharedConnection() throws JMSException;1328020251;Refresh the shared Connection that this container holds._<p>Called on startup and also after an infrastructure exception_that occurred during invoker setup and/or execution._@throws JMSException if thrown by JMS API methods;protected final void refreshSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			ConnectionFactoryUtils.releaseConnection(_					this.sharedConnection, getConnectionFactory(), this.sharedConnectionStarted)__			this.sharedConnection = null__			this.sharedConnection = createSharedConnection()__			if (this.sharedConnectionStarted) {_				this.sharedConnection.start()__			}_		}_	};refresh,the,shared,connection,that,this,container,holds,p,called,on,startup,and,also,after,an,infrastructure,exception,that,occurred,during,invoker,setup,and,or,execution,throws,jmsexception,if,thrown,by,jms,api,methods;protected,final,void,refresh,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,shared,connection,started,this,shared,connection,null,this,shared,connection,create,shared,connection,if,this,shared,connection,started,this,shared,connection,start
AbstractJmsListeningContainer -> protected final void refreshSharedConnection() throws JMSException;1355394580;Refresh the shared Connection that this container holds._<p>Called on startup and also after an infrastructure exception_that occurred during invoker setup and/or execution._@throws JMSException if thrown by JMS API methods;protected final void refreshSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			ConnectionFactoryUtils.releaseConnection(_					this.sharedConnection, getConnectionFactory(), this.sharedConnectionStarted)__			this.sharedConnection = null__			this.sharedConnection = createSharedConnection()__			if (this.sharedConnectionStarted) {_				this.sharedConnection.start()__			}_		}_	};refresh,the,shared,connection,that,this,container,holds,p,called,on,startup,and,also,after,an,infrastructure,exception,that,occurred,during,invoker,setup,and,or,execution,throws,jmsexception,if,thrown,by,jms,api,methods;protected,final,void,refresh,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,shared,connection,started,this,shared,connection,null,this,shared,connection,create,shared,connection,if,this,shared,connection,started,this,shared,connection,start
AbstractJmsListeningContainer -> protected final void refreshSharedConnection() throws JMSException;1356735495;Refresh the shared Connection that this container holds._<p>Called on startup and also after an infrastructure exception_that occurred during invoker setup and/or execution._@throws JMSException if thrown by JMS API methods;protected final void refreshSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			ConnectionFactoryUtils.releaseConnection(_					this.sharedConnection, getConnectionFactory(), this.sharedConnectionStarted)__			this.sharedConnection = null__			this.sharedConnection = createSharedConnection()__			if (this.sharedConnectionStarted) {_				this.sharedConnection.start()__			}_		}_	};refresh,the,shared,connection,that,this,container,holds,p,called,on,startup,and,also,after,an,infrastructure,exception,that,occurred,during,invoker,setup,and,or,execution,throws,jmsexception,if,thrown,by,jms,api,methods;protected,final,void,refresh,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,shared,connection,started,this,shared,connection,null,this,shared,connection,create,shared,connection,if,this,shared,connection,started,this,shared,connection,start
AbstractJmsListeningContainer -> protected final void refreshSharedConnection() throws JMSException;1357119239;Refresh the shared Connection that this container holds._<p>Called on startup and also after an infrastructure exception_that occurred during invoker setup and/or execution._@throws JMSException if thrown by JMS API methods;protected final void refreshSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			ConnectionFactoryUtils.releaseConnection(_					this.sharedConnection, getConnectionFactory(), this.sharedConnectionStarted)__			this.sharedConnection = null__			this.sharedConnection = createSharedConnection()__			if (this.sharedConnectionStarted) {_				this.sharedConnection.start()__			}_		}_	};refresh,the,shared,connection,that,this,container,holds,p,called,on,startup,and,also,after,an,infrastructure,exception,that,occurred,during,invoker,setup,and,or,execution,throws,jmsexception,if,thrown,by,jms,api,methods;protected,final,void,refresh,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,shared,connection,started,this,shared,connection,null,this,shared,connection,create,shared,connection,if,this,shared,connection,started,this,shared,connection,start
AbstractJmsListeningContainer -> protected final void refreshSharedConnection() throws JMSException;1368482696;Refresh the shared Connection that this container holds._<p>Called on startup and also after an infrastructure exception_that occurred during invoker setup and/or execution._@throws JMSException if thrown by JMS API methods;protected final void refreshSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			ConnectionFactoryUtils.releaseConnection(_					this.sharedConnection, getConnectionFactory(), this.sharedConnectionStarted)__			this.sharedConnection = null__			this.sharedConnection = createSharedConnection()__			if (this.sharedConnectionStarted) {_				this.sharedConnection.start()__			}_		}_	};refresh,the,shared,connection,that,this,container,holds,p,called,on,startup,and,also,after,an,infrastructure,exception,that,occurred,during,invoker,setup,and,or,execution,throws,jmsexception,if,thrown,by,jms,api,methods;protected,final,void,refresh,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,shared,connection,started,this,shared,connection,null,this,shared,connection,create,shared,connection,if,this,shared,connection,started,this,shared,connection,start
AbstractJmsListeningContainer -> protected final void refreshSharedConnection() throws JMSException;1403791284;Refresh the shared Connection that this container holds._<p>Called on startup and also after an infrastructure exception_that occurred during invoker setup and/or execution._@throws JMSException if thrown by JMS API methods;protected final void refreshSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			ConnectionFactoryUtils.releaseConnection(_					this.sharedConnection, getConnectionFactory(), this.sharedConnectionStarted)__			this.sharedConnection = null__			this.sharedConnection = createSharedConnection()__			if (this.sharedConnectionStarted) {_				this.sharedConnection.start()__			}_		}_	};refresh,the,shared,connection,that,this,container,holds,p,called,on,startup,and,also,after,an,infrastructure,exception,that,occurred,during,invoker,setup,and,or,execution,throws,jmsexception,if,thrown,by,jms,api,methods;protected,final,void,refresh,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,shared,connection,started,this,shared,connection,null,this,shared,connection,create,shared,connection,if,this,shared,connection,started,this,shared,connection,start
AbstractJmsListeningContainer -> protected final void refreshSharedConnection() throws JMSException;1462186904;Refresh the shared Connection that this container holds._<p>Called on startup and also after an infrastructure exception_that occurred during invoker setup and/or execution._@throws JMSException if thrown by JMS API methods;protected final void refreshSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			ConnectionFactoryUtils.releaseConnection(_					this.sharedConnection, getConnectionFactory(), this.sharedConnectionStarted)__			this.sharedConnection = null__			this.sharedConnection = createSharedConnection()__			if (this.sharedConnectionStarted) {_				this.sharedConnection.start()__			}_		}_	};refresh,the,shared,connection,that,this,container,holds,p,called,on,startup,and,also,after,an,infrastructure,exception,that,occurred,during,invoker,setup,and,or,execution,throws,jmsexception,if,thrown,by,jms,api,methods;protected,final,void,refresh,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,shared,connection,started,this,shared,connection,null,this,shared,connection,create,shared,connection,if,this,shared,connection,started,this,shared,connection,start
AbstractJmsListeningContainer -> protected final void refreshSharedConnection() throws JMSException;1467730834;Refresh the shared Connection that this container holds._<p>Called on startup and also after an infrastructure exception_that occurred during invoker setup and/or execution._@throws JMSException if thrown by JMS API methods;protected final void refreshSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			ConnectionFactoryUtils.releaseConnection(_					this.sharedConnection, getConnectionFactory(), this.sharedConnectionStarted)__			this.sharedConnection = null__			this.sharedConnection = createSharedConnection()__			if (this.sharedConnectionStarted) {_				this.sharedConnection.start()__			}_		}_	};refresh,the,shared,connection,that,this,container,holds,p,called,on,startup,and,also,after,an,infrastructure,exception,that,occurred,during,invoker,setup,and,or,execution,throws,jmsexception,if,thrown,by,jms,api,methods;protected,final,void,refresh,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,shared,connection,started,this,shared,connection,null,this,shared,connection,create,shared,connection,if,this,shared,connection,started,this,shared,connection,start
AbstractJmsListeningContainer -> protected final void refreshSharedConnection() throws JMSException;1495868221;Refresh the shared Connection that this container holds._<p>Called on startup and also after an infrastructure exception_that occurred during invoker setup and/or execution._@throws JMSException if thrown by JMS API methods;protected final void refreshSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			ConnectionFactoryUtils.releaseConnection(_					this.sharedConnection, getConnectionFactory(), this.sharedConnectionStarted)__			this.sharedConnection = null__			this.sharedConnection = createSharedConnection()__			if (this.sharedConnectionStarted) {_				this.sharedConnection.start()__			}_		}_	};refresh,the,shared,connection,that,this,container,holds,p,called,on,startup,and,also,after,an,infrastructure,exception,that,occurred,during,invoker,setup,and,or,execution,throws,jmsexception,if,thrown,by,jms,api,methods;protected,final,void,refresh,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,shared,connection,started,this,shared,connection,null,this,shared,connection,create,shared,connection,if,this,shared,connection,started,this,shared,connection,start
AbstractJmsListeningContainer -> protected final void refreshSharedConnection() throws JMSException;1498780456;Refresh the shared Connection that this container holds._<p>Called on startup and also after an infrastructure exception_that occurred during invoker setup and/or execution._@throws JMSException if thrown by JMS API methods;protected final void refreshSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			ConnectionFactoryUtils.releaseConnection(_					this.sharedConnection, getConnectionFactory(), this.sharedConnectionStarted)__			this.sharedConnection = null__			this.sharedConnection = createSharedConnection()__			if (this.sharedConnectionStarted) {_				this.sharedConnection.start()__			}_		}_	};refresh,the,shared,connection,that,this,container,holds,p,called,on,startup,and,also,after,an,infrastructure,exception,that,occurred,during,invoker,setup,and,or,execution,throws,jmsexception,if,thrown,by,jms,api,methods;protected,final,void,refresh,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,shared,connection,started,this,shared,connection,null,this,shared,connection,create,shared,connection,if,this,shared,connection,started,this,shared,connection,start
AbstractJmsListeningContainer -> protected final void refreshSharedConnection() throws JMSException;1500448076;Refresh the shared Connection that this container holds._<p>Called on startup and also after an infrastructure exception_that occurred during invoker setup and/or execution._@throws JMSException if thrown by JMS API methods;protected final void refreshSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			ConnectionFactoryUtils.releaseConnection(_					this.sharedConnection, getConnectionFactory(), this.sharedConnectionStarted)__			this.sharedConnection = null__			this.sharedConnection = createSharedConnection()__			if (this.sharedConnectionStarted) {_				this.sharedConnection.start()__			}_		}_	};refresh,the,shared,connection,that,this,container,holds,p,called,on,startup,and,also,after,an,infrastructure,exception,that,occurred,during,invoker,setup,and,or,execution,throws,jmsexception,if,thrown,by,jms,api,methods;protected,final,void,refresh,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,shared,connection,started,this,shared,connection,null,this,shared,connection,create,shared,connection,if,this,shared,connection,started,this,shared,connection,start
AbstractJmsListeningContainer -> protected final void refreshSharedConnection() throws JMSException;1521123475;Refresh the shared Connection that this container holds._<p>Called on startup and also after an infrastructure exception_that occurred during invoker setup and/or execution._@throws JMSException if thrown by JMS API methods;protected final void refreshSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			ConnectionFactoryUtils.releaseConnection(_					this.sharedConnection, getConnectionFactory(), this.sharedConnectionStarted)__			this.sharedConnection = null__			this.sharedConnection = createSharedConnection()__			if (this.sharedConnectionStarted) {_				this.sharedConnection.start()__			}_		}_	};refresh,the,shared,connection,that,this,container,holds,p,called,on,startup,and,also,after,an,infrastructure,exception,that,occurred,during,invoker,setup,and,or,execution,throws,jmsexception,if,thrown,by,jms,api,methods;protected,final,void,refresh,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,shared,connection,started,this,shared,connection,null,this,shared,connection,create,shared,connection,if,this,shared,connection,started,this,shared,connection,start
AbstractJmsListeningContainer -> protected final void refreshSharedConnection() throws JMSException;1534414082;Refresh the shared Connection that this container holds._<p>Called on startup and also after an infrastructure exception_that occurred during invoker setup and/or execution._@throws JMSException if thrown by JMS API methods;protected final void refreshSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			ConnectionFactoryUtils.releaseConnection(_					this.sharedConnection, getConnectionFactory(), this.sharedConnectionStarted)__			this.sharedConnection = null__			this.sharedConnection = createSharedConnection()__			if (this.sharedConnectionStarted) {_				this.sharedConnection.start()__			}_		}_	};refresh,the,shared,connection,that,this,container,holds,p,called,on,startup,and,also,after,an,infrastructure,exception,that,occurred,during,invoker,setup,and,or,execution,throws,jmsexception,if,thrown,by,jms,api,methods;protected,final,void,refresh,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,shared,connection,started,this,shared,connection,null,this,shared,connection,create,shared,connection,if,this,shared,connection,started,this,shared,connection,start
AbstractJmsListeningContainer -> protected void establishSharedConnection() throws JMSException;1328020251;Establish a shared Connection for this container._<p>The default implementation delegates to {@link #createSharedConnection()},_which does one immediate attempt and throws an exception if it fails._Can be overridden to have a recovery process in place, retrying_until a Connection can be successfully established._@throws JMSException if thrown by JMS API methods;protected void establishSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				this.sharedConnection = createSharedConnection()__				logger.debug("Established shared JMS Connection")__			}_		}_	};establish,a,shared,connection,for,this,container,p,the,default,implementation,delegates,to,link,create,shared,connection,which,does,one,immediate,attempt,and,throws,an,exception,if,it,fails,can,be,overridden,to,have,a,recovery,process,in,place,retrying,until,a,connection,can,be,successfully,established,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,establish,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,this,shared,connection,create,shared,connection,logger,debug,established,shared,jms,connection
AbstractJmsListeningContainer -> protected void establishSharedConnection() throws JMSException;1355394580;Establish a shared Connection for this container._<p>The default implementation delegates to {@link #createSharedConnection()},_which does one immediate attempt and throws an exception if it fails._Can be overridden to have a recovery process in place, retrying_until a Connection can be successfully established._@throws JMSException if thrown by JMS API methods;protected void establishSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				this.sharedConnection = createSharedConnection()__				logger.debug("Established shared JMS Connection")__			}_		}_	};establish,a,shared,connection,for,this,container,p,the,default,implementation,delegates,to,link,create,shared,connection,which,does,one,immediate,attempt,and,throws,an,exception,if,it,fails,can,be,overridden,to,have,a,recovery,process,in,place,retrying,until,a,connection,can,be,successfully,established,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,establish,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,this,shared,connection,create,shared,connection,logger,debug,established,shared,jms,connection
AbstractJmsListeningContainer -> protected void establishSharedConnection() throws JMSException;1356735495;Establish a shared Connection for this container._<p>The default implementation delegates to {@link #createSharedConnection()},_which does one immediate attempt and throws an exception if it fails._Can be overridden to have a recovery process in place, retrying_until a Connection can be successfully established._@throws JMSException if thrown by JMS API methods;protected void establishSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				this.sharedConnection = createSharedConnection()__				logger.debug("Established shared JMS Connection")__			}_		}_	};establish,a,shared,connection,for,this,container,p,the,default,implementation,delegates,to,link,create,shared,connection,which,does,one,immediate,attempt,and,throws,an,exception,if,it,fails,can,be,overridden,to,have,a,recovery,process,in,place,retrying,until,a,connection,can,be,successfully,established,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,establish,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,this,shared,connection,create,shared,connection,logger,debug,established,shared,jms,connection
AbstractJmsListeningContainer -> protected void establishSharedConnection() throws JMSException;1357119239;Establish a shared Connection for this container._<p>The default implementation delegates to {@link #createSharedConnection()},_which does one immediate attempt and throws an exception if it fails._Can be overridden to have a recovery process in place, retrying_until a Connection can be successfully established._@throws JMSException if thrown by JMS API methods;protected void establishSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				this.sharedConnection = createSharedConnection()__				logger.debug("Established shared JMS Connection")__			}_		}_	};establish,a,shared,connection,for,this,container,p,the,default,implementation,delegates,to,link,create,shared,connection,which,does,one,immediate,attempt,and,throws,an,exception,if,it,fails,can,be,overridden,to,have,a,recovery,process,in,place,retrying,until,a,connection,can,be,successfully,established,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,establish,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,this,shared,connection,create,shared,connection,logger,debug,established,shared,jms,connection
AbstractJmsListeningContainer -> protected void establishSharedConnection() throws JMSException;1368482696;Establish a shared Connection for this container._<p>The default implementation delegates to {@link #createSharedConnection()},_which does one immediate attempt and throws an exception if it fails._Can be overridden to have a recovery process in place, retrying_until a Connection can be successfully established._@throws JMSException if thrown by JMS API methods;protected void establishSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				this.sharedConnection = createSharedConnection()__				logger.debug("Established shared JMS Connection")__			}_		}_	};establish,a,shared,connection,for,this,container,p,the,default,implementation,delegates,to,link,create,shared,connection,which,does,one,immediate,attempt,and,throws,an,exception,if,it,fails,can,be,overridden,to,have,a,recovery,process,in,place,retrying,until,a,connection,can,be,successfully,established,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,establish,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,this,shared,connection,create,shared,connection,logger,debug,established,shared,jms,connection
AbstractJmsListeningContainer -> protected void establishSharedConnection() throws JMSException;1403791284;Establish a shared Connection for this container._<p>The default implementation delegates to {@link #createSharedConnection()},_which does one immediate attempt and throws an exception if it fails._Can be overridden to have a recovery process in place, retrying_until a Connection can be successfully established._@throws JMSException if thrown by JMS API methods;protected void establishSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				this.sharedConnection = createSharedConnection()__				logger.debug("Established shared JMS Connection")__			}_		}_	};establish,a,shared,connection,for,this,container,p,the,default,implementation,delegates,to,link,create,shared,connection,which,does,one,immediate,attempt,and,throws,an,exception,if,it,fails,can,be,overridden,to,have,a,recovery,process,in,place,retrying,until,a,connection,can,be,successfully,established,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,establish,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,this,shared,connection,create,shared,connection,logger,debug,established,shared,jms,connection
AbstractJmsListeningContainer -> protected void establishSharedConnection() throws JMSException;1462186904;Establish a shared Connection for this container._<p>The default implementation delegates to {@link #createSharedConnection()},_which does one immediate attempt and throws an exception if it fails._Can be overridden to have a recovery process in place, retrying_until a Connection can be successfully established._@throws JMSException if thrown by JMS API methods;protected void establishSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				this.sharedConnection = createSharedConnection()__				logger.debug("Established shared JMS Connection")__			}_		}_	};establish,a,shared,connection,for,this,container,p,the,default,implementation,delegates,to,link,create,shared,connection,which,does,one,immediate,attempt,and,throws,an,exception,if,it,fails,can,be,overridden,to,have,a,recovery,process,in,place,retrying,until,a,connection,can,be,successfully,established,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,establish,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,this,shared,connection,create,shared,connection,logger,debug,established,shared,jms,connection
AbstractJmsListeningContainer -> protected void establishSharedConnection() throws JMSException;1467730834;Establish a shared Connection for this container._<p>The default implementation delegates to {@link #createSharedConnection()},_which does one immediate attempt and throws an exception if it fails._Can be overridden to have a recovery process in place, retrying_until a Connection can be successfully established._@throws JMSException if thrown by JMS API methods;protected void establishSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				this.sharedConnection = createSharedConnection()__				logger.debug("Established shared JMS Connection")__			}_		}_	};establish,a,shared,connection,for,this,container,p,the,default,implementation,delegates,to,link,create,shared,connection,which,does,one,immediate,attempt,and,throws,an,exception,if,it,fails,can,be,overridden,to,have,a,recovery,process,in,place,retrying,until,a,connection,can,be,successfully,established,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,establish,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,this,shared,connection,create,shared,connection,logger,debug,established,shared,jms,connection
AbstractJmsListeningContainer -> protected void establishSharedConnection() throws JMSException;1495868221;Establish a shared Connection for this container._<p>The default implementation delegates to {@link #createSharedConnection()},_which does one immediate attempt and throws an exception if it fails._Can be overridden to have a recovery process in place, retrying_until a Connection can be successfully established._@throws JMSException if thrown by JMS API methods;protected void establishSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				this.sharedConnection = createSharedConnection()__				logger.debug("Established shared JMS Connection")__			}_		}_	};establish,a,shared,connection,for,this,container,p,the,default,implementation,delegates,to,link,create,shared,connection,which,does,one,immediate,attempt,and,throws,an,exception,if,it,fails,can,be,overridden,to,have,a,recovery,process,in,place,retrying,until,a,connection,can,be,successfully,established,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,establish,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,this,shared,connection,create,shared,connection,logger,debug,established,shared,jms,connection
AbstractJmsListeningContainer -> protected void establishSharedConnection() throws JMSException;1498780456;Establish a shared Connection for this container._<p>The default implementation delegates to {@link #createSharedConnection()},_which does one immediate attempt and throws an exception if it fails._Can be overridden to have a recovery process in place, retrying_until a Connection can be successfully established._@throws JMSException if thrown by JMS API methods;protected void establishSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				this.sharedConnection = createSharedConnection()__				logger.debug("Established shared JMS Connection")__			}_		}_	};establish,a,shared,connection,for,this,container,p,the,default,implementation,delegates,to,link,create,shared,connection,which,does,one,immediate,attempt,and,throws,an,exception,if,it,fails,can,be,overridden,to,have,a,recovery,process,in,place,retrying,until,a,connection,can,be,successfully,established,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,establish,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,this,shared,connection,create,shared,connection,logger,debug,established,shared,jms,connection
AbstractJmsListeningContainer -> protected void establishSharedConnection() throws JMSException;1500448076;Establish a shared Connection for this container._<p>The default implementation delegates to {@link #createSharedConnection()},_which does one immediate attempt and throws an exception if it fails._Can be overridden to have a recovery process in place, retrying_until a Connection can be successfully established._@throws JMSException if thrown by JMS API methods;protected void establishSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				this.sharedConnection = createSharedConnection()__				logger.debug("Established shared JMS Connection")__			}_		}_	};establish,a,shared,connection,for,this,container,p,the,default,implementation,delegates,to,link,create,shared,connection,which,does,one,immediate,attempt,and,throws,an,exception,if,it,fails,can,be,overridden,to,have,a,recovery,process,in,place,retrying,until,a,connection,can,be,successfully,established,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,establish,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,this,shared,connection,create,shared,connection,logger,debug,established,shared,jms,connection
AbstractJmsListeningContainer -> protected void establishSharedConnection() throws JMSException;1521123475;Establish a shared Connection for this container._<p>The default implementation delegates to {@link #createSharedConnection()},_which does one immediate attempt and throws an exception if it fails._Can be overridden to have a recovery process in place, retrying_until a Connection can be successfully established._@throws JMSException if thrown by JMS API methods;protected void establishSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				this.sharedConnection = createSharedConnection()__				logger.debug("Established shared JMS Connection")__			}_		}_	};establish,a,shared,connection,for,this,container,p,the,default,implementation,delegates,to,link,create,shared,connection,which,does,one,immediate,attempt,and,throws,an,exception,if,it,fails,can,be,overridden,to,have,a,recovery,process,in,place,retrying,until,a,connection,can,be,successfully,established,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,establish,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,this,shared,connection,create,shared,connection,logger,debug,established,shared,jms,connection
AbstractJmsListeningContainer -> protected void establishSharedConnection() throws JMSException;1534414082;Establish a shared Connection for this container._<p>The default implementation delegates to {@link #createSharedConnection()},_which does one immediate attempt and throws an exception if it fails._Can be overridden to have a recovery process in place, retrying_until a Connection can be successfully established._@throws JMSException if thrown by JMS API methods;protected void establishSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				this.sharedConnection = createSharedConnection()__				logger.debug("Established shared JMS Connection")__			}_		}_	};establish,a,shared,connection,for,this,container,p,the,default,implementation,delegates,to,link,create,shared,connection,which,does,one,immediate,attempt,and,throws,an,exception,if,it,fails,can,be,overridden,to,have,a,recovery,process,in,place,retrying,until,a,connection,can,be,successfully,established,throws,jmsexception,if,thrown,by,jms,api,methods;protected,void,establish,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,this,shared,connection,create,shared,connection,logger,debug,established,shared,jms,connection
AbstractJmsListeningContainer -> public final boolean isActive();1328020251;Return whether this container is currently active,_that is, whether it has been set up but not shut down yet.;public final boolean isActive() {_		synchronized (this.lifecycleMonitor) {_			return this.active__		}_	};return,whether,this,container,is,currently,active,that,is,whether,it,has,been,set,up,but,not,shut,down,yet;public,final,boolean,is,active,synchronized,this,lifecycle,monitor,return,this,active
AbstractJmsListeningContainer -> public final boolean isActive();1355394580;Return whether this container is currently active,_that is, whether it has been set up but not shut down yet.;public final boolean isActive() {_		synchronized (this.lifecycleMonitor) {_			return this.active__		}_	};return,whether,this,container,is,currently,active,that,is,whether,it,has,been,set,up,but,not,shut,down,yet;public,final,boolean,is,active,synchronized,this,lifecycle,monitor,return,this,active
AbstractJmsListeningContainer -> public final boolean isActive();1356735495;Return whether this container is currently active,_that is, whether it has been set up but not shut down yet.;public final boolean isActive() {_		synchronized (this.lifecycleMonitor) {_			return this.active__		}_	};return,whether,this,container,is,currently,active,that,is,whether,it,has,been,set,up,but,not,shut,down,yet;public,final,boolean,is,active,synchronized,this,lifecycle,monitor,return,this,active
AbstractJmsListeningContainer -> public final boolean isActive();1357119239;Return whether this container is currently active,_that is, whether it has been set up but not shut down yet.;public final boolean isActive() {_		synchronized (this.lifecycleMonitor) {_			return this.active__		}_	};return,whether,this,container,is,currently,active,that,is,whether,it,has,been,set,up,but,not,shut,down,yet;public,final,boolean,is,active,synchronized,this,lifecycle,monitor,return,this,active
AbstractJmsListeningContainer -> public final boolean isActive();1368482696;Return whether this container is currently active,_that is, whether it has been set up but not shut down yet.;public final boolean isActive() {_		synchronized (this.lifecycleMonitor) {_			return this.active__		}_	};return,whether,this,container,is,currently,active,that,is,whether,it,has,been,set,up,but,not,shut,down,yet;public,final,boolean,is,active,synchronized,this,lifecycle,monitor,return,this,active
AbstractJmsListeningContainer -> public final boolean isActive();1403791284;Return whether this container is currently active,_that is, whether it has been set up but not shut down yet.;public final boolean isActive() {_		synchronized (this.lifecycleMonitor) {_			return this.active__		}_	};return,whether,this,container,is,currently,active,that,is,whether,it,has,been,set,up,but,not,shut,down,yet;public,final,boolean,is,active,synchronized,this,lifecycle,monitor,return,this,active
AbstractJmsListeningContainer -> public final boolean isActive();1462186904;Return whether this container is currently active,_that is, whether it has been set up but not shut down yet.;public final boolean isActive() {_		synchronized (this.lifecycleMonitor) {_			return this.active__		}_	};return,whether,this,container,is,currently,active,that,is,whether,it,has,been,set,up,but,not,shut,down,yet;public,final,boolean,is,active,synchronized,this,lifecycle,monitor,return,this,active
AbstractJmsListeningContainer -> public final boolean isActive();1467730834;Return whether this container is currently active,_that is, whether it has been set up but not shut down yet.;public final boolean isActive() {_		synchronized (this.lifecycleMonitor) {_			return this.active__		}_	};return,whether,this,container,is,currently,active,that,is,whether,it,has,been,set,up,but,not,shut,down,yet;public,final,boolean,is,active,synchronized,this,lifecycle,monitor,return,this,active
AbstractJmsListeningContainer -> public final boolean isActive();1495868221;Return whether this container is currently active,_that is, whether it has been set up but not shut down yet.;public final boolean isActive() {_		synchronized (this.lifecycleMonitor) {_			return this.active__		}_	};return,whether,this,container,is,currently,active,that,is,whether,it,has,been,set,up,but,not,shut,down,yet;public,final,boolean,is,active,synchronized,this,lifecycle,monitor,return,this,active
AbstractJmsListeningContainer -> public final boolean isActive();1498780456;Return whether this container is currently active,_that is, whether it has been set up but not shut down yet.;public final boolean isActive() {_		synchronized (this.lifecycleMonitor) {_			return this.active__		}_	};return,whether,this,container,is,currently,active,that,is,whether,it,has,been,set,up,but,not,shut,down,yet;public,final,boolean,is,active,synchronized,this,lifecycle,monitor,return,this,active
AbstractJmsListeningContainer -> public final boolean isActive();1500448076;Return whether this container is currently active,_that is, whether it has been set up but not shut down yet.;public final boolean isActive() {_		synchronized (this.lifecycleMonitor) {_			return this.active__		}_	};return,whether,this,container,is,currently,active,that,is,whether,it,has,been,set,up,but,not,shut,down,yet;public,final,boolean,is,active,synchronized,this,lifecycle,monitor,return,this,active
AbstractJmsListeningContainer -> public final boolean isActive();1521123475;Return whether this container is currently active,_that is, whether it has been set up but not shut down yet.;public final boolean isActive() {_		synchronized (this.lifecycleMonitor) {_			return this.active__		}_	};return,whether,this,container,is,currently,active,that,is,whether,it,has,been,set,up,but,not,shut,down,yet;public,final,boolean,is,active,synchronized,this,lifecycle,monitor,return,this,active
AbstractJmsListeningContainer -> public final boolean isActive();1534414082;Return whether this container is currently active,_that is, whether it has been set up but not shut down yet.;public final boolean isActive() {_		synchronized (this.lifecycleMonitor) {_			return this.active__		}_	};return,whether,this,container,is,currently,active,that,is,whether,it,has,been,set,up,but,not,shut,down,yet;public,final,boolean,is,active,synchronized,this,lifecycle,monitor,return,this,active
AbstractJmsListeningContainer -> public void setClientId(String clientId);1328020251;Specify the JMS client ID for a shared Connection created and used_by this container._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,the,jms,client,id,for,a,shared,connection,created,and,used,by,this,container,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
AbstractJmsListeningContainer -> public void setClientId(String clientId);1355394580;Specify the JMS client ID for a shared Connection created and used_by this container._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,the,jms,client,id,for,a,shared,connection,created,and,used,by,this,container,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
AbstractJmsListeningContainer -> public void setClientId(String clientId);1356735495;Specify the JMS client ID for a shared Connection created and used_by this container._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,the,jms,client,id,for,a,shared,connection,created,and,used,by,this,container,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
AbstractJmsListeningContainer -> public void setClientId(String clientId);1357119239;Specify the JMS client ID for a shared Connection created and used_by this container._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,the,jms,client,id,for,a,shared,connection,created,and,used,by,this,container,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
AbstractJmsListeningContainer -> public void setClientId(String clientId);1368482696;Specify the JMS client ID for a shared Connection created and used_by this container._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,the,jms,client,id,for,a,shared,connection,created,and,used,by,this,container,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
AbstractJmsListeningContainer -> public void setClientId(String clientId);1403791284;Specify the JMS client ID for a shared Connection created and used_by this container._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,the,jms,client,id,for,a,shared,connection,created,and,used,by,this,container,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
AbstractJmsListeningContainer -> public void setClientId(String clientId);1462186904;Specify the JMS client ID for a shared Connection created and used_by this container._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,the,jms,client,id,for,a,shared,connection,created,and,used,by,this,container,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
AbstractJmsListeningContainer -> public void setClientId(String clientId);1467730834;Specify the JMS client ID for a shared Connection created and used_by this container._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,the,jms,client,id,for,a,shared,connection,created,and,used,by,this,container,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
AbstractJmsListeningContainer -> public void setClientId(String clientId);1495868221;Specify the JMS client ID for a shared Connection created and used_by this container._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,the,jms,client,id,for,a,shared,connection,created,and,used,by,this,container,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
AbstractJmsListeningContainer -> public void setClientId(String clientId);1498780456;Specify the JMS client ID for a shared Connection created and used_by this container._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,the,jms,client,id,for,a,shared,connection,created,and,used,by,this,container,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
AbstractJmsListeningContainer -> protected final boolean rescheduleTaskIfNecessary(Object task);1328020251;Take the given task object and reschedule it, either immediately if_this container is currently running, or later once this container_has been restarted._<p>If this container has already been shut down, the task will not_get rescheduled at all._@param task the task object to reschedule_@return whether the task has been rescheduled_(either immediately or for a restart of this container)_@see #doRescheduleTask;protected final boolean rescheduleTaskIfNecessary(Object task) {_		if (this.running) {_			try {_				doRescheduleTask(task)__			}_			catch (RuntimeException ex) {_				logRejectedTask(task, ex)__				this.pausedTasks.add(task)__			}_			return true__		}_		else if (this.active) {_			this.pausedTasks.add(task)__			return true__		}_		else {_			return false__		}_	};take,the,given,task,object,and,reschedule,it,either,immediately,if,this,container,is,currently,running,or,later,once,this,container,has,been,restarted,p,if,this,container,has,already,been,shut,down,the,task,will,not,get,rescheduled,at,all,param,task,the,task,object,to,reschedule,return,whether,the,task,has,been,rescheduled,either,immediately,or,for,a,restart,of,this,container,see,do,reschedule,task;protected,final,boolean,reschedule,task,if,necessary,object,task,if,this,running,try,do,reschedule,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex,this,paused,tasks,add,task,return,true,else,if,this,active,this,paused,tasks,add,task,return,true,else,return,false
AbstractJmsListeningContainer -> protected final boolean rescheduleTaskIfNecessary(Object task);1355394580;Take the given task object and reschedule it, either immediately if_this container is currently running, or later once this container_has been restarted._<p>If this container has already been shut down, the task will not_get rescheduled at all._@param task the task object to reschedule_@return whether the task has been rescheduled_(either immediately or for a restart of this container)_@see #doRescheduleTask;protected final boolean rescheduleTaskIfNecessary(Object task) {_		if (this.running) {_			try {_				doRescheduleTask(task)__			}_			catch (RuntimeException ex) {_				logRejectedTask(task, ex)__				this.pausedTasks.add(task)__			}_			return true__		}_		else if (this.active) {_			this.pausedTasks.add(task)__			return true__		}_		else {_			return false__		}_	};take,the,given,task,object,and,reschedule,it,either,immediately,if,this,container,is,currently,running,or,later,once,this,container,has,been,restarted,p,if,this,container,has,already,been,shut,down,the,task,will,not,get,rescheduled,at,all,param,task,the,task,object,to,reschedule,return,whether,the,task,has,been,rescheduled,either,immediately,or,for,a,restart,of,this,container,see,do,reschedule,task;protected,final,boolean,reschedule,task,if,necessary,object,task,if,this,running,try,do,reschedule,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex,this,paused,tasks,add,task,return,true,else,if,this,active,this,paused,tasks,add,task,return,true,else,return,false
AbstractJmsListeningContainer -> protected final boolean rescheduleTaskIfNecessary(Object task);1356735495;Take the given task object and reschedule it, either immediately if_this container is currently running, or later once this container_has been restarted._<p>If this container has already been shut down, the task will not_get rescheduled at all._@param task the task object to reschedule_@return whether the task has been rescheduled_(either immediately or for a restart of this container)_@see #doRescheduleTask;protected final boolean rescheduleTaskIfNecessary(Object task) {_		if (this.running) {_			try {_				doRescheduleTask(task)__			}_			catch (RuntimeException ex) {_				logRejectedTask(task, ex)__				this.pausedTasks.add(task)__			}_			return true__		}_		else if (this.active) {_			this.pausedTasks.add(task)__			return true__		}_		else {_			return false__		}_	};take,the,given,task,object,and,reschedule,it,either,immediately,if,this,container,is,currently,running,or,later,once,this,container,has,been,restarted,p,if,this,container,has,already,been,shut,down,the,task,will,not,get,rescheduled,at,all,param,task,the,task,object,to,reschedule,return,whether,the,task,has,been,rescheduled,either,immediately,or,for,a,restart,of,this,container,see,do,reschedule,task;protected,final,boolean,reschedule,task,if,necessary,object,task,if,this,running,try,do,reschedule,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex,this,paused,tasks,add,task,return,true,else,if,this,active,this,paused,tasks,add,task,return,true,else,return,false
AbstractJmsListeningContainer -> protected final boolean rescheduleTaskIfNecessary(Object task);1357119239;Take the given task object and reschedule it, either immediately if_this container is currently running, or later once this container_has been restarted._<p>If this container has already been shut down, the task will not_get rescheduled at all._@param task the task object to reschedule_@return whether the task has been rescheduled_(either immediately or for a restart of this container)_@see #doRescheduleTask;protected final boolean rescheduleTaskIfNecessary(Object task) {_		if (this.running) {_			try {_				doRescheduleTask(task)__			}_			catch (RuntimeException ex) {_				logRejectedTask(task, ex)__				this.pausedTasks.add(task)__			}_			return true__		}_		else if (this.active) {_			this.pausedTasks.add(task)__			return true__		}_		else {_			return false__		}_	};take,the,given,task,object,and,reschedule,it,either,immediately,if,this,container,is,currently,running,or,later,once,this,container,has,been,restarted,p,if,this,container,has,already,been,shut,down,the,task,will,not,get,rescheduled,at,all,param,task,the,task,object,to,reschedule,return,whether,the,task,has,been,rescheduled,either,immediately,or,for,a,restart,of,this,container,see,do,reschedule,task;protected,final,boolean,reschedule,task,if,necessary,object,task,if,this,running,try,do,reschedule,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex,this,paused,tasks,add,task,return,true,else,if,this,active,this,paused,tasks,add,task,return,true,else,return,false
AbstractJmsListeningContainer -> protected final boolean rescheduleTaskIfNecessary(Object task);1368482696;Take the given task object and reschedule it, either immediately if_this container is currently running, or later once this container_has been restarted._<p>If this container has already been shut down, the task will not_get rescheduled at all._@param task the task object to reschedule_@return whether the task has been rescheduled_(either immediately or for a restart of this container)_@see #doRescheduleTask;protected final boolean rescheduleTaskIfNecessary(Object task) {_		if (this.running) {_			try {_				doRescheduleTask(task)__			}_			catch (RuntimeException ex) {_				logRejectedTask(task, ex)__				this.pausedTasks.add(task)__			}_			return true__		}_		else if (this.active) {_			this.pausedTasks.add(task)__			return true__		}_		else {_			return false__		}_	};take,the,given,task,object,and,reschedule,it,either,immediately,if,this,container,is,currently,running,or,later,once,this,container,has,been,restarted,p,if,this,container,has,already,been,shut,down,the,task,will,not,get,rescheduled,at,all,param,task,the,task,object,to,reschedule,return,whether,the,task,has,been,rescheduled,either,immediately,or,for,a,restart,of,this,container,see,do,reschedule,task;protected,final,boolean,reschedule,task,if,necessary,object,task,if,this,running,try,do,reschedule,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex,this,paused,tasks,add,task,return,true,else,if,this,active,this,paused,tasks,add,task,return,true,else,return,false
AbstractJmsListeningContainer -> protected final boolean rescheduleTaskIfNecessary(Object task);1403791284;Take the given task object and reschedule it, either immediately if_this container is currently running, or later once this container_has been restarted._<p>If this container has already been shut down, the task will not_get rescheduled at all._@param task the task object to reschedule_@return whether the task has been rescheduled_(either immediately or for a restart of this container)_@see #doRescheduleTask;protected final boolean rescheduleTaskIfNecessary(Object task) {_		if (this.running) {_			try {_				doRescheduleTask(task)__			}_			catch (RuntimeException ex) {_				logRejectedTask(task, ex)__				this.pausedTasks.add(task)__			}_			return true__		}_		else if (this.active) {_			this.pausedTasks.add(task)__			return true__		}_		else {_			return false__		}_	};take,the,given,task,object,and,reschedule,it,either,immediately,if,this,container,is,currently,running,or,later,once,this,container,has,been,restarted,p,if,this,container,has,already,been,shut,down,the,task,will,not,get,rescheduled,at,all,param,task,the,task,object,to,reschedule,return,whether,the,task,has,been,rescheduled,either,immediately,or,for,a,restart,of,this,container,see,do,reschedule,task;protected,final,boolean,reschedule,task,if,necessary,object,task,if,this,running,try,do,reschedule,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex,this,paused,tasks,add,task,return,true,else,if,this,active,this,paused,tasks,add,task,return,true,else,return,false
AbstractJmsListeningContainer -> protected final boolean rescheduleTaskIfNecessary(Object task);1462186904;Take the given task object and reschedule it, either immediately if_this container is currently running, or later once this container_has been restarted._<p>If this container has already been shut down, the task will not_get rescheduled at all._@param task the task object to reschedule_@return whether the task has been rescheduled_(either immediately or for a restart of this container)_@see #doRescheduleTask;protected final boolean rescheduleTaskIfNecessary(Object task) {_		if (this.running) {_			try {_				doRescheduleTask(task)__			}_			catch (RuntimeException ex) {_				logRejectedTask(task, ex)__				this.pausedTasks.add(task)__			}_			return true__		}_		else if (this.active) {_			this.pausedTasks.add(task)__			return true__		}_		else {_			return false__		}_	};take,the,given,task,object,and,reschedule,it,either,immediately,if,this,container,is,currently,running,or,later,once,this,container,has,been,restarted,p,if,this,container,has,already,been,shut,down,the,task,will,not,get,rescheduled,at,all,param,task,the,task,object,to,reschedule,return,whether,the,task,has,been,rescheduled,either,immediately,or,for,a,restart,of,this,container,see,do,reschedule,task;protected,final,boolean,reschedule,task,if,necessary,object,task,if,this,running,try,do,reschedule,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex,this,paused,tasks,add,task,return,true,else,if,this,active,this,paused,tasks,add,task,return,true,else,return,false
AbstractJmsListeningContainer -> protected final boolean rescheduleTaskIfNecessary(Object task);1467730834;Take the given task object and reschedule it, either immediately if_this container is currently running, or later once this container_has been restarted._<p>If this container has already been shut down, the task will not_get rescheduled at all._@param task the task object to reschedule_@return whether the task has been rescheduled_(either immediately or for a restart of this container)_@see #doRescheduleTask;protected final boolean rescheduleTaskIfNecessary(Object task) {_		if (this.running) {_			try {_				doRescheduleTask(task)__			}_			catch (RuntimeException ex) {_				logRejectedTask(task, ex)__				this.pausedTasks.add(task)__			}_			return true__		}_		else if (this.active) {_			this.pausedTasks.add(task)__			return true__		}_		else {_			return false__		}_	};take,the,given,task,object,and,reschedule,it,either,immediately,if,this,container,is,currently,running,or,later,once,this,container,has,been,restarted,p,if,this,container,has,already,been,shut,down,the,task,will,not,get,rescheduled,at,all,param,task,the,task,object,to,reschedule,return,whether,the,task,has,been,rescheduled,either,immediately,or,for,a,restart,of,this,container,see,do,reschedule,task;protected,final,boolean,reschedule,task,if,necessary,object,task,if,this,running,try,do,reschedule,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex,this,paused,tasks,add,task,return,true,else,if,this,active,this,paused,tasks,add,task,return,true,else,return,false
AbstractJmsListeningContainer -> protected final boolean rescheduleTaskIfNecessary(Object task);1495868221;Take the given task object and reschedule it, either immediately if_this container is currently running, or later once this container_has been restarted._<p>If this container has already been shut down, the task will not_get rescheduled at all._@param task the task object to reschedule_@return whether the task has been rescheduled_(either immediately or for a restart of this container)_@see #doRescheduleTask;protected final boolean rescheduleTaskIfNecessary(Object task) {_		if (this.running) {_			try {_				doRescheduleTask(task)__			}_			catch (RuntimeException ex) {_				logRejectedTask(task, ex)__				this.pausedTasks.add(task)__			}_			return true__		}_		else if (this.active) {_			this.pausedTasks.add(task)__			return true__		}_		else {_			return false__		}_	};take,the,given,task,object,and,reschedule,it,either,immediately,if,this,container,is,currently,running,or,later,once,this,container,has,been,restarted,p,if,this,container,has,already,been,shut,down,the,task,will,not,get,rescheduled,at,all,param,task,the,task,object,to,reschedule,return,whether,the,task,has,been,rescheduled,either,immediately,or,for,a,restart,of,this,container,see,do,reschedule,task;protected,final,boolean,reschedule,task,if,necessary,object,task,if,this,running,try,do,reschedule,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex,this,paused,tasks,add,task,return,true,else,if,this,active,this,paused,tasks,add,task,return,true,else,return,false
AbstractJmsListeningContainer -> protected final boolean rescheduleTaskIfNecessary(Object task);1498780456;Take the given task object and reschedule it, either immediately if_this container is currently running, or later once this container_has been restarted._<p>If this container has already been shut down, the task will not_get rescheduled at all._@param task the task object to reschedule_@return whether the task has been rescheduled_(either immediately or for a restart of this container)_@see #doRescheduleTask;protected final boolean rescheduleTaskIfNecessary(Object task) {_		if (this.running) {_			try {_				doRescheduleTask(task)__			}_			catch (RuntimeException ex) {_				logRejectedTask(task, ex)__				this.pausedTasks.add(task)__			}_			return true__		}_		else if (this.active) {_			this.pausedTasks.add(task)__			return true__		}_		else {_			return false__		}_	};take,the,given,task,object,and,reschedule,it,either,immediately,if,this,container,is,currently,running,or,later,once,this,container,has,been,restarted,p,if,this,container,has,already,been,shut,down,the,task,will,not,get,rescheduled,at,all,param,task,the,task,object,to,reschedule,return,whether,the,task,has,been,rescheduled,either,immediately,or,for,a,restart,of,this,container,see,do,reschedule,task;protected,final,boolean,reschedule,task,if,necessary,object,task,if,this,running,try,do,reschedule,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex,this,paused,tasks,add,task,return,true,else,if,this,active,this,paused,tasks,add,task,return,true,else,return,false
AbstractJmsListeningContainer -> protected final boolean rescheduleTaskIfNecessary(Object task);1500448076;Take the given task object and reschedule it, either immediately if_this container is currently running, or later once this container_has been restarted._<p>If this container has already been shut down, the task will not_get rescheduled at all._@param task the task object to reschedule_@return whether the task has been rescheduled_(either immediately or for a restart of this container)_@see #doRescheduleTask;protected final boolean rescheduleTaskIfNecessary(Object task) {_		if (this.running) {_			try {_				doRescheduleTask(task)__			}_			catch (RuntimeException ex) {_				logRejectedTask(task, ex)__				this.pausedTasks.add(task)__			}_			return true__		}_		else if (this.active) {_			this.pausedTasks.add(task)__			return true__		}_		else {_			return false__		}_	};take,the,given,task,object,and,reschedule,it,either,immediately,if,this,container,is,currently,running,or,later,once,this,container,has,been,restarted,p,if,this,container,has,already,been,shut,down,the,task,will,not,get,rescheduled,at,all,param,task,the,task,object,to,reschedule,return,whether,the,task,has,been,rescheduled,either,immediately,or,for,a,restart,of,this,container,see,do,reschedule,task;protected,final,boolean,reschedule,task,if,necessary,object,task,if,this,running,try,do,reschedule,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex,this,paused,tasks,add,task,return,true,else,if,this,active,this,paused,tasks,add,task,return,true,else,return,false
AbstractJmsListeningContainer -> protected final boolean rescheduleTaskIfNecessary(Object task);1521123475;Take the given task object and reschedule it, either immediately if_this container is currently running, or later once this container_has been restarted._<p>If this container has already been shut down, the task will not_get rescheduled at all._@param task the task object to reschedule_@return whether the task has been rescheduled_(either immediately or for a restart of this container)_@see #doRescheduleTask;protected final boolean rescheduleTaskIfNecessary(Object task) {_		if (this.running) {_			try {_				doRescheduleTask(task)__			}_			catch (RuntimeException ex) {_				logRejectedTask(task, ex)__				this.pausedTasks.add(task)__			}_			return true__		}_		else if (this.active) {_			this.pausedTasks.add(task)__			return true__		}_		else {_			return false__		}_	};take,the,given,task,object,and,reschedule,it,either,immediately,if,this,container,is,currently,running,or,later,once,this,container,has,been,restarted,p,if,this,container,has,already,been,shut,down,the,task,will,not,get,rescheduled,at,all,param,task,the,task,object,to,reschedule,return,whether,the,task,has,been,rescheduled,either,immediately,or,for,a,restart,of,this,container,see,do,reschedule,task;protected,final,boolean,reschedule,task,if,necessary,object,task,if,this,running,try,do,reschedule,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex,this,paused,tasks,add,task,return,true,else,if,this,active,this,paused,tasks,add,task,return,true,else,return,false
AbstractJmsListeningContainer -> protected final boolean rescheduleTaskIfNecessary(Object task);1534414082;Take the given task object and reschedule it, either immediately if_this container is currently running, or later once this container_has been restarted._<p>If this container has already been shut down, the task will not_get rescheduled at all._@param task the task object to reschedule_@return whether the task has been rescheduled_(either immediately or for a restart of this container)_@see #doRescheduleTask;protected final boolean rescheduleTaskIfNecessary(Object task) {_		if (this.running) {_			try {_				doRescheduleTask(task)__			}_			catch (RuntimeException ex) {_				logRejectedTask(task, ex)__				this.pausedTasks.add(task)__			}_			return true__		}_		else if (this.active) {_			this.pausedTasks.add(task)__			return true__		}_		else {_			return false__		}_	};take,the,given,task,object,and,reschedule,it,either,immediately,if,this,container,is,currently,running,or,later,once,this,container,has,been,restarted,p,if,this,container,has,already,been,shut,down,the,task,will,not,get,rescheduled,at,all,param,task,the,task,object,to,reschedule,return,whether,the,task,has,been,rescheduled,either,immediately,or,for,a,restart,of,this,container,see,do,reschedule,task;protected,final,boolean,reschedule,task,if,necessary,object,task,if,this,running,try,do,reschedule,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex,this,paused,tasks,add,task,return,true,else,if,this,active,this,paused,tasks,add,task,return,true,else,return,false
AbstractJmsListeningContainer -> @Override 	public void destroy();1356735495;Calls {@link #shutdown()} when the BeanFactory destroys the container instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,link,shutdown,when,the,bean,factory,destroys,the,container,instance,see,shutdown;override,public,void,destroy,shutdown
AbstractJmsListeningContainer -> @Override 	public void destroy();1368482696;Calls {@link #shutdown()} when the BeanFactory destroys the container instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,link,shutdown,when,the,bean,factory,destroys,the,container,instance,see,shutdown;override,public,void,destroy,shutdown
AbstractJmsListeningContainer -> @Override 	public void destroy();1403791284;Calls {@link #shutdown()} when the BeanFactory destroys the container instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,link,shutdown,when,the,bean,factory,destroys,the,container,instance,see,shutdown;override,public,void,destroy,shutdown
AbstractJmsListeningContainer -> @Override 	public void destroy();1462186904;Calls {@link #shutdown()} when the BeanFactory destroys the container instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,link,shutdown,when,the,bean,factory,destroys,the,container,instance,see,shutdown;override,public,void,destroy,shutdown
AbstractJmsListeningContainer -> @Override 	public void destroy();1467730834;Calls {@link #shutdown()} when the BeanFactory destroys the container instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,link,shutdown,when,the,bean,factory,destroys,the,container,instance,see,shutdown;override,public,void,destroy,shutdown
AbstractJmsListeningContainer -> @Override 	public void destroy();1495868221;Calls {@link #shutdown()} when the BeanFactory destroys the container instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,link,shutdown,when,the,bean,factory,destroys,the,container,instance,see,shutdown;override,public,void,destroy,shutdown
AbstractJmsListeningContainer -> @Override 	public void destroy();1498780456;Calls {@link #shutdown()} when the BeanFactory destroys the container instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,link,shutdown,when,the,bean,factory,destroys,the,container,instance,see,shutdown;override,public,void,destroy,shutdown
AbstractJmsListeningContainer -> @Override 	public void destroy();1500448076;Calls {@link #shutdown()} when the BeanFactory destroys the container instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,link,shutdown,when,the,bean,factory,destroys,the,container,instance,see,shutdown;override,public,void,destroy,shutdown
AbstractJmsListeningContainer -> @Override 	public void destroy();1521123475;Calls {@link #shutdown()} when the BeanFactory destroys the container instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,link,shutdown,when,the,bean,factory,destroys,the,container,instance,see,shutdown;override,public,void,destroy,shutdown
AbstractJmsListeningContainer -> @Override 	public void destroy();1534414082;Calls {@link #shutdown()} when the BeanFactory destroys the container instance._@see #shutdown();@Override_	public void destroy() {_		shutdown()__	};calls,link,shutdown,when,the,bean,factory,destroys,the,container,instance,see,shutdown;override,public,void,destroy,shutdown
AbstractJmsListeningContainer -> public void shutdown() throws JmsException;1328020251;Stop the shared Connection, call {@link #doShutdown()},_and close this container._@throws JmsException if shutdown failed;public void shutdown() throws JmsException {_		logger.debug("Shutting down JMS listener container")__		boolean wasRunning__		synchronized (this.lifecycleMonitor) {_			wasRunning = this.running__			this.running = false__			this.active = false__			this.lifecycleMonitor.notifyAll()__		}__		_		if (wasRunning && sharedConnectionEnabled()) {_			try {_				stopSharedConnection()__			}_			catch (Throwable ex) {_				logger.debug("Could not stop JMS Connection on shutdown", ex)__			}_		}__		_		try {_			doShutdown()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_		finally {_			if (sharedConnectionEnabled()) {_				synchronized (this.sharedConnectionMonitor) {_					ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), false)__					this.sharedConnection = null__				}_			}_		}_	};stop,the,shared,connection,call,link,do,shutdown,and,close,this,container,throws,jms,exception,if,shutdown,failed;public,void,shutdown,throws,jms,exception,logger,debug,shutting,down,jms,listener,container,boolean,was,running,synchronized,this,lifecycle,monitor,was,running,this,running,this,running,false,this,active,false,this,lifecycle,monitor,notify,all,if,was,running,shared,connection,enabled,try,stop,shared,connection,catch,throwable,ex,logger,debug,could,not,stop,jms,connection,on,shutdown,ex,try,do,shutdown,catch,jmsexception,ex,throw,convert,jms,access,exception,ex,finally,if,shared,connection,enabled,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,false,this,shared,connection,null
AbstractJmsListeningContainer -> public void shutdown() throws JmsException;1355394580;Stop the shared Connection, call {@link #doShutdown()},_and close this container._@throws JmsException if shutdown failed;public void shutdown() throws JmsException {_		logger.debug("Shutting down JMS listener container")__		boolean wasRunning__		synchronized (this.lifecycleMonitor) {_			wasRunning = this.running__			this.running = false__			this.active = false__			this.pausedTasks.clear()__			this.lifecycleMonitor.notifyAll()__		}__		_		if (wasRunning && sharedConnectionEnabled()) {_			try {_				stopSharedConnection()__			}_			catch (Throwable ex) {_				logger.debug("Could not stop JMS Connection on shutdown", ex)__			}_		}__		_		try {_			doShutdown()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_		finally {_			if (sharedConnectionEnabled()) {_				synchronized (this.sharedConnectionMonitor) {_					ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), false)__					this.sharedConnection = null__				}_			}_		}_	};stop,the,shared,connection,call,link,do,shutdown,and,close,this,container,throws,jms,exception,if,shutdown,failed;public,void,shutdown,throws,jms,exception,logger,debug,shutting,down,jms,listener,container,boolean,was,running,synchronized,this,lifecycle,monitor,was,running,this,running,this,running,false,this,active,false,this,paused,tasks,clear,this,lifecycle,monitor,notify,all,if,was,running,shared,connection,enabled,try,stop,shared,connection,catch,throwable,ex,logger,debug,could,not,stop,jms,connection,on,shutdown,ex,try,do,shutdown,catch,jmsexception,ex,throw,convert,jms,access,exception,ex,finally,if,shared,connection,enabled,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,false,this,shared,connection,null
AbstractJmsListeningContainer -> public void shutdown() throws JmsException;1356735495;Stop the shared Connection, call {@link #doShutdown()},_and close this container._@throws JmsException if shutdown failed;public void shutdown() throws JmsException {_		logger.debug("Shutting down JMS listener container")__		boolean wasRunning__		synchronized (this.lifecycleMonitor) {_			wasRunning = this.running__			this.running = false__			this.active = false__			this.pausedTasks.clear()__			this.lifecycleMonitor.notifyAll()__		}__		_		if (wasRunning && sharedConnectionEnabled()) {_			try {_				stopSharedConnection()__			}_			catch (Throwable ex) {_				logger.debug("Could not stop JMS Connection on shutdown", ex)__			}_		}__		_		try {_			doShutdown()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_		finally {_			if (sharedConnectionEnabled()) {_				synchronized (this.sharedConnectionMonitor) {_					ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), false)__					this.sharedConnection = null__				}_			}_		}_	};stop,the,shared,connection,call,link,do,shutdown,and,close,this,container,throws,jms,exception,if,shutdown,failed;public,void,shutdown,throws,jms,exception,logger,debug,shutting,down,jms,listener,container,boolean,was,running,synchronized,this,lifecycle,monitor,was,running,this,running,this,running,false,this,active,false,this,paused,tasks,clear,this,lifecycle,monitor,notify,all,if,was,running,shared,connection,enabled,try,stop,shared,connection,catch,throwable,ex,logger,debug,could,not,stop,jms,connection,on,shutdown,ex,try,do,shutdown,catch,jmsexception,ex,throw,convert,jms,access,exception,ex,finally,if,shared,connection,enabled,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,false,this,shared,connection,null
AbstractJmsListeningContainer -> public void shutdown() throws JmsException;1357119239;Stop the shared Connection, call {@link #doShutdown()},_and close this container._@throws JmsException if shutdown failed;public void shutdown() throws JmsException {_		logger.debug("Shutting down JMS listener container")__		boolean wasRunning__		synchronized (this.lifecycleMonitor) {_			wasRunning = this.running__			this.running = false__			this.active = false__			this.pausedTasks.clear()__			this.lifecycleMonitor.notifyAll()__		}__		_		if (wasRunning && sharedConnectionEnabled()) {_			try {_				stopSharedConnection()__			}_			catch (Throwable ex) {_				logger.debug("Could not stop JMS Connection on shutdown", ex)__			}_		}__		_		try {_			doShutdown()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_		finally {_			if (sharedConnectionEnabled()) {_				synchronized (this.sharedConnectionMonitor) {_					ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), false)__					this.sharedConnection = null__				}_			}_		}_	};stop,the,shared,connection,call,link,do,shutdown,and,close,this,container,throws,jms,exception,if,shutdown,failed;public,void,shutdown,throws,jms,exception,logger,debug,shutting,down,jms,listener,container,boolean,was,running,synchronized,this,lifecycle,monitor,was,running,this,running,this,running,false,this,active,false,this,paused,tasks,clear,this,lifecycle,monitor,notify,all,if,was,running,shared,connection,enabled,try,stop,shared,connection,catch,throwable,ex,logger,debug,could,not,stop,jms,connection,on,shutdown,ex,try,do,shutdown,catch,jmsexception,ex,throw,convert,jms,access,exception,ex,finally,if,shared,connection,enabled,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,false,this,shared,connection,null
AbstractJmsListeningContainer -> public void shutdown() throws JmsException;1368482696;Stop the shared Connection, call {@link #doShutdown()},_and close this container._@throws JmsException if shutdown failed;public void shutdown() throws JmsException {_		logger.debug("Shutting down JMS listener container")__		boolean wasRunning__		synchronized (this.lifecycleMonitor) {_			wasRunning = this.running__			this.running = false__			this.active = false__			this.pausedTasks.clear()__			this.lifecycleMonitor.notifyAll()__		}__		_		if (wasRunning && sharedConnectionEnabled()) {_			try {_				stopSharedConnection()__			}_			catch (Throwable ex) {_				logger.debug("Could not stop JMS Connection on shutdown", ex)__			}_		}__		_		try {_			doShutdown()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_		finally {_			if (sharedConnectionEnabled()) {_				synchronized (this.sharedConnectionMonitor) {_					ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), false)__					this.sharedConnection = null__				}_			}_		}_	};stop,the,shared,connection,call,link,do,shutdown,and,close,this,container,throws,jms,exception,if,shutdown,failed;public,void,shutdown,throws,jms,exception,logger,debug,shutting,down,jms,listener,container,boolean,was,running,synchronized,this,lifecycle,monitor,was,running,this,running,this,running,false,this,active,false,this,paused,tasks,clear,this,lifecycle,monitor,notify,all,if,was,running,shared,connection,enabled,try,stop,shared,connection,catch,throwable,ex,logger,debug,could,not,stop,jms,connection,on,shutdown,ex,try,do,shutdown,catch,jmsexception,ex,throw,convert,jms,access,exception,ex,finally,if,shared,connection,enabled,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,false,this,shared,connection,null
AbstractJmsListeningContainer -> public void shutdown() throws JmsException;1403791284;Stop the shared Connection, call {@link #doShutdown()},_and close this container._@throws JmsException if shutdown failed;public void shutdown() throws JmsException {_		logger.debug("Shutting down JMS listener container")__		boolean wasRunning__		synchronized (this.lifecycleMonitor) {_			wasRunning = this.running__			this.running = false__			this.active = false__			this.pausedTasks.clear()__			this.lifecycleMonitor.notifyAll()__		}__		_		if (wasRunning && sharedConnectionEnabled()) {_			try {_				stopSharedConnection()__			}_			catch (Throwable ex) {_				logger.debug("Could not stop JMS Connection on shutdown", ex)__			}_		}__		_		try {_			doShutdown()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_		finally {_			if (sharedConnectionEnabled()) {_				synchronized (this.sharedConnectionMonitor) {_					ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), false)__					this.sharedConnection = null__				}_			}_		}_	};stop,the,shared,connection,call,link,do,shutdown,and,close,this,container,throws,jms,exception,if,shutdown,failed;public,void,shutdown,throws,jms,exception,logger,debug,shutting,down,jms,listener,container,boolean,was,running,synchronized,this,lifecycle,monitor,was,running,this,running,this,running,false,this,active,false,this,paused,tasks,clear,this,lifecycle,monitor,notify,all,if,was,running,shared,connection,enabled,try,stop,shared,connection,catch,throwable,ex,logger,debug,could,not,stop,jms,connection,on,shutdown,ex,try,do,shutdown,catch,jmsexception,ex,throw,convert,jms,access,exception,ex,finally,if,shared,connection,enabled,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,false,this,shared,connection,null
AbstractJmsListeningContainer -> public void shutdown() throws JmsException;1462186904;Stop the shared Connection, call {@link #doShutdown()},_and close this container._@throws JmsException if shutdown failed;public void shutdown() throws JmsException {_		logger.debug("Shutting down JMS listener container")__		boolean wasRunning__		synchronized (this.lifecycleMonitor) {_			wasRunning = this.running__			this.running = false__			this.active = false__			this.pausedTasks.clear()__			this.lifecycleMonitor.notifyAll()__		}__		_		if (wasRunning && sharedConnectionEnabled()) {_			try {_				stopSharedConnection()__			}_			catch (Throwable ex) {_				logger.debug("Could not stop JMS Connection on shutdown", ex)__			}_		}__		_		try {_			doShutdown()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_		finally {_			if (sharedConnectionEnabled()) {_				synchronized (this.sharedConnectionMonitor) {_					ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), false)__					this.sharedConnection = null__				}_			}_		}_	};stop,the,shared,connection,call,link,do,shutdown,and,close,this,container,throws,jms,exception,if,shutdown,failed;public,void,shutdown,throws,jms,exception,logger,debug,shutting,down,jms,listener,container,boolean,was,running,synchronized,this,lifecycle,monitor,was,running,this,running,this,running,false,this,active,false,this,paused,tasks,clear,this,lifecycle,monitor,notify,all,if,was,running,shared,connection,enabled,try,stop,shared,connection,catch,throwable,ex,logger,debug,could,not,stop,jms,connection,on,shutdown,ex,try,do,shutdown,catch,jmsexception,ex,throw,convert,jms,access,exception,ex,finally,if,shared,connection,enabled,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,false,this,shared,connection,null
AbstractJmsListeningContainer -> public void shutdown() throws JmsException;1467730834;Stop the shared Connection, call {@link #doShutdown()},_and close this container._@throws JmsException if shutdown failed;public void shutdown() throws JmsException {_		logger.debug("Shutting down JMS listener container")__		boolean wasRunning__		synchronized (this.lifecycleMonitor) {_			wasRunning = this.running__			this.running = false__			this.active = false__			this.pausedTasks.clear()__			this.lifecycleMonitor.notifyAll()__		}__		_		if (wasRunning && sharedConnectionEnabled()) {_			try {_				stopSharedConnection()__			}_			catch (Throwable ex) {_				logger.debug("Could not stop JMS Connection on shutdown", ex)__			}_		}__		_		try {_			doShutdown()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_		finally {_			if (sharedConnectionEnabled()) {_				synchronized (this.sharedConnectionMonitor) {_					ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), false)__					this.sharedConnection = null__				}_			}_		}_	};stop,the,shared,connection,call,link,do,shutdown,and,close,this,container,throws,jms,exception,if,shutdown,failed;public,void,shutdown,throws,jms,exception,logger,debug,shutting,down,jms,listener,container,boolean,was,running,synchronized,this,lifecycle,monitor,was,running,this,running,this,running,false,this,active,false,this,paused,tasks,clear,this,lifecycle,monitor,notify,all,if,was,running,shared,connection,enabled,try,stop,shared,connection,catch,throwable,ex,logger,debug,could,not,stop,jms,connection,on,shutdown,ex,try,do,shutdown,catch,jmsexception,ex,throw,convert,jms,access,exception,ex,finally,if,shared,connection,enabled,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,false,this,shared,connection,null
AbstractJmsListeningContainer -> public void shutdown() throws JmsException;1495868221;Stop the shared Connection, call {@link #doShutdown()},_and close this container._@throws JmsException if shutdown failed;public void shutdown() throws JmsException {_		logger.debug("Shutting down JMS listener container")__		boolean wasRunning__		synchronized (this.lifecycleMonitor) {_			wasRunning = this.running__			this.running = false__			this.active = false__			this.pausedTasks.clear()__			this.lifecycleMonitor.notifyAll()__		}__		_		if (wasRunning && sharedConnectionEnabled()) {_			try {_				stopSharedConnection()__			}_			catch (Throwable ex) {_				logger.debug("Could not stop JMS Connection on shutdown", ex)__			}_		}__		_		try {_			doShutdown()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_		finally {_			if (sharedConnectionEnabled()) {_				synchronized (this.sharedConnectionMonitor) {_					ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), false)__					this.sharedConnection = null__				}_			}_		}_	};stop,the,shared,connection,call,link,do,shutdown,and,close,this,container,throws,jms,exception,if,shutdown,failed;public,void,shutdown,throws,jms,exception,logger,debug,shutting,down,jms,listener,container,boolean,was,running,synchronized,this,lifecycle,monitor,was,running,this,running,this,running,false,this,active,false,this,paused,tasks,clear,this,lifecycle,monitor,notify,all,if,was,running,shared,connection,enabled,try,stop,shared,connection,catch,throwable,ex,logger,debug,could,not,stop,jms,connection,on,shutdown,ex,try,do,shutdown,catch,jmsexception,ex,throw,convert,jms,access,exception,ex,finally,if,shared,connection,enabled,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,false,this,shared,connection,null
AbstractJmsListeningContainer -> public void shutdown() throws JmsException;1498780456;Stop the shared Connection, call {@link #doShutdown()},_and close this container._@throws JmsException if shutdown failed;public void shutdown() throws JmsException {_		logger.debug("Shutting down JMS listener container")__		boolean wasRunning__		synchronized (this.lifecycleMonitor) {_			wasRunning = this.running__			this.running = false__			this.active = false__			this.pausedTasks.clear()__			this.lifecycleMonitor.notifyAll()__		}__		_		if (wasRunning && sharedConnectionEnabled()) {_			try {_				stopSharedConnection()__			}_			catch (Throwable ex) {_				logger.debug("Could not stop JMS Connection on shutdown", ex)__			}_		}__		_		try {_			doShutdown()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_		finally {_			if (sharedConnectionEnabled()) {_				synchronized (this.sharedConnectionMonitor) {_					ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), false)__					this.sharedConnection = null__				}_			}_		}_	};stop,the,shared,connection,call,link,do,shutdown,and,close,this,container,throws,jms,exception,if,shutdown,failed;public,void,shutdown,throws,jms,exception,logger,debug,shutting,down,jms,listener,container,boolean,was,running,synchronized,this,lifecycle,monitor,was,running,this,running,this,running,false,this,active,false,this,paused,tasks,clear,this,lifecycle,monitor,notify,all,if,was,running,shared,connection,enabled,try,stop,shared,connection,catch,throwable,ex,logger,debug,could,not,stop,jms,connection,on,shutdown,ex,try,do,shutdown,catch,jmsexception,ex,throw,convert,jms,access,exception,ex,finally,if,shared,connection,enabled,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,false,this,shared,connection,null
AbstractJmsListeningContainer -> public void shutdown() throws JmsException;1500448076;Stop the shared Connection, call {@link #doShutdown()},_and close this container._@throws JmsException if shutdown failed;public void shutdown() throws JmsException {_		logger.debug("Shutting down JMS listener container")__		boolean wasRunning__		synchronized (this.lifecycleMonitor) {_			wasRunning = this.running__			this.running = false__			this.active = false__			this.pausedTasks.clear()__			this.lifecycleMonitor.notifyAll()__		}__		_		if (wasRunning && sharedConnectionEnabled()) {_			try {_				stopSharedConnection()__			}_			catch (Throwable ex) {_				logger.debug("Could not stop JMS Connection on shutdown", ex)__			}_		}__		_		try {_			doShutdown()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_		finally {_			if (sharedConnectionEnabled()) {_				synchronized (this.sharedConnectionMonitor) {_					ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), false)__					this.sharedConnection = null__				}_			}_		}_	};stop,the,shared,connection,call,link,do,shutdown,and,close,this,container,throws,jms,exception,if,shutdown,failed;public,void,shutdown,throws,jms,exception,logger,debug,shutting,down,jms,listener,container,boolean,was,running,synchronized,this,lifecycle,monitor,was,running,this,running,this,running,false,this,active,false,this,paused,tasks,clear,this,lifecycle,monitor,notify,all,if,was,running,shared,connection,enabled,try,stop,shared,connection,catch,throwable,ex,logger,debug,could,not,stop,jms,connection,on,shutdown,ex,try,do,shutdown,catch,jmsexception,ex,throw,convert,jms,access,exception,ex,finally,if,shared,connection,enabled,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,false,this,shared,connection,null
AbstractJmsListeningContainer -> public void shutdown() throws JmsException;1521123475;Stop the shared Connection, call {@link #doShutdown()},_and close this container._@throws JmsException if shutdown failed;public void shutdown() throws JmsException {_		logger.debug("Shutting down JMS listener container")__		boolean wasRunning__		synchronized (this.lifecycleMonitor) {_			wasRunning = this.running__			this.running = false__			this.active = false__			this.pausedTasks.clear()__			this.lifecycleMonitor.notifyAll()__		}__		_		if (wasRunning && sharedConnectionEnabled()) {_			try {_				stopSharedConnection()__			}_			catch (Throwable ex) {_				logger.debug("Could not stop JMS Connection on shutdown", ex)__			}_		}__		_		try {_			doShutdown()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_		finally {_			if (sharedConnectionEnabled()) {_				synchronized (this.sharedConnectionMonitor) {_					ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), false)__					this.sharedConnection = null__				}_			}_		}_	};stop,the,shared,connection,call,link,do,shutdown,and,close,this,container,throws,jms,exception,if,shutdown,failed;public,void,shutdown,throws,jms,exception,logger,debug,shutting,down,jms,listener,container,boolean,was,running,synchronized,this,lifecycle,monitor,was,running,this,running,this,running,false,this,active,false,this,paused,tasks,clear,this,lifecycle,monitor,notify,all,if,was,running,shared,connection,enabled,try,stop,shared,connection,catch,throwable,ex,logger,debug,could,not,stop,jms,connection,on,shutdown,ex,try,do,shutdown,catch,jmsexception,ex,throw,convert,jms,access,exception,ex,finally,if,shared,connection,enabled,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,false,this,shared,connection,null
AbstractJmsListeningContainer -> public void shutdown() throws JmsException;1534414082;Stop the shared Connection, call {@link #doShutdown()},_and close this container._@throws JmsException if shutdown failed;public void shutdown() throws JmsException {_		logger.debug("Shutting down JMS listener container")__		boolean wasRunning__		synchronized (this.lifecycleMonitor) {_			wasRunning = this.running__			this.running = false__			this.active = false__			this.pausedTasks.clear()__			this.lifecycleMonitor.notifyAll()__		}__		_		if (wasRunning && sharedConnectionEnabled()) {_			try {_				stopSharedConnection()__			}_			catch (Throwable ex) {_				logger.debug("Could not stop JMS Connection on shutdown", ex)__			}_		}__		_		try {_			doShutdown()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_		finally {_			if (sharedConnectionEnabled()) {_				synchronized (this.sharedConnectionMonitor) {_					ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), false)__					this.sharedConnection = null__				}_			}_		}_	};stop,the,shared,connection,call,link,do,shutdown,and,close,this,container,throws,jms,exception,if,shutdown,failed;public,void,shutdown,throws,jms,exception,logger,debug,shutting,down,jms,listener,container,boolean,was,running,synchronized,this,lifecycle,monitor,was,running,this,running,this,running,false,this,active,false,this,paused,tasks,clear,this,lifecycle,monitor,notify,all,if,was,running,shared,connection,enabled,try,stop,shared,connection,catch,throwable,ex,logger,debug,could,not,stop,jms,connection,on,shutdown,ex,try,do,shutdown,catch,jmsexception,ex,throw,convert,jms,access,exception,ex,finally,if,shared,connection,enabled,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,false,this,shared,connection,null
AbstractJmsListeningContainer -> @Override 	public int getPhase();1356735495;Return the phase in which this container will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,container,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
AbstractJmsListeningContainer -> @Override 	public int getPhase();1368482696;Return the phase in which this container will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,container,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
AbstractJmsListeningContainer -> @Override 	public int getPhase();1403791284;Return the phase in which this container will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,container,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
AbstractJmsListeningContainer -> @Override 	public int getPhase();1462186904;Return the phase in which this container will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,container,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
AbstractJmsListeningContainer -> @Override 	public int getPhase();1467730834;Return the phase in which this container will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,container,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
AbstractJmsListeningContainer -> @Override 	public int getPhase();1495868221;Return the phase in which this container will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,container,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
AbstractJmsListeningContainer -> @Override 	public int getPhase();1498780456;Return the phase in which this container will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,container,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
AbstractJmsListeningContainer -> @Override 	public int getPhase();1500448076;Return the phase in which this container will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,container,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
AbstractJmsListeningContainer -> @Override 	public int getPhase();1521123475;Return the phase in which this container will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,container,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
AbstractJmsListeningContainer -> @Override 	public int getPhase();1534414082;Return the phase in which this container will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,container,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
AbstractJmsListeningContainer -> public int getPhase();1328020251;Return the phase in which this container will be started and stopped.;public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,container,will,be,started,and,stopped;public,int,get,phase,return,this,phase
AbstractJmsListeningContainer -> public int getPhase();1355394580;Return the phase in which this container will be started and stopped.;public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,container,will,be,started,and,stopped;public,int,get,phase,return,this,phase
AbstractJmsListeningContainer -> public int getPhase();1357119239;Return the phase in which this container will be started and stopped.;public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,container,will,be,started,and,stopped;public,int,get,phase,return,this,phase
AbstractJmsListeningContainer -> protected void doStop() throws JMSException;1328020251;Notify all invoker tasks and stop the shared Connection, if any._@throws JMSException if thrown by JMS API methods_@see #stopSharedConnection;protected void doStop() throws JMSException {_		synchronized (this.lifecycleMonitor) {_			this.running = false__			this.lifecycleMonitor.notifyAll()__		}__		if (sharedConnectionEnabled()) {_			stopSharedConnection()__		}_	};notify,all,invoker,tasks,and,stop,the,shared,connection,if,any,throws,jmsexception,if,thrown,by,jms,api,methods,see,stop,shared,connection;protected,void,do,stop,throws,jmsexception,synchronized,this,lifecycle,monitor,this,running,false,this,lifecycle,monitor,notify,all,if,shared,connection,enabled,stop,shared,connection
AbstractJmsListeningContainer -> protected void doStop() throws JMSException;1355394580;Notify all invoker tasks and stop the shared Connection, if any._@throws JMSException if thrown by JMS API methods_@see #stopSharedConnection;protected void doStop() throws JMSException {_		synchronized (this.lifecycleMonitor) {_			this.running = false__			this.lifecycleMonitor.notifyAll()__		}__		if (sharedConnectionEnabled()) {_			stopSharedConnection()__		}_	};notify,all,invoker,tasks,and,stop,the,shared,connection,if,any,throws,jmsexception,if,thrown,by,jms,api,methods,see,stop,shared,connection;protected,void,do,stop,throws,jmsexception,synchronized,this,lifecycle,monitor,this,running,false,this,lifecycle,monitor,notify,all,if,shared,connection,enabled,stop,shared,connection
AbstractJmsListeningContainer -> protected void doStop() throws JMSException;1356735495;Notify all invoker tasks and stop the shared Connection, if any._@throws JMSException if thrown by JMS API methods_@see #stopSharedConnection;protected void doStop() throws JMSException {_		synchronized (this.lifecycleMonitor) {_			this.running = false__			this.lifecycleMonitor.notifyAll()__		}__		if (sharedConnectionEnabled()) {_			stopSharedConnection()__		}_	};notify,all,invoker,tasks,and,stop,the,shared,connection,if,any,throws,jmsexception,if,thrown,by,jms,api,methods,see,stop,shared,connection;protected,void,do,stop,throws,jmsexception,synchronized,this,lifecycle,monitor,this,running,false,this,lifecycle,monitor,notify,all,if,shared,connection,enabled,stop,shared,connection
AbstractJmsListeningContainer -> protected void doStop() throws JMSException;1357119239;Notify all invoker tasks and stop the shared Connection, if any._@throws JMSException if thrown by JMS API methods_@see #stopSharedConnection;protected void doStop() throws JMSException {_		synchronized (this.lifecycleMonitor) {_			this.running = false__			this.lifecycleMonitor.notifyAll()__		}__		if (sharedConnectionEnabled()) {_			stopSharedConnection()__		}_	};notify,all,invoker,tasks,and,stop,the,shared,connection,if,any,throws,jmsexception,if,thrown,by,jms,api,methods,see,stop,shared,connection;protected,void,do,stop,throws,jmsexception,synchronized,this,lifecycle,monitor,this,running,false,this,lifecycle,monitor,notify,all,if,shared,connection,enabled,stop,shared,connection
AbstractJmsListeningContainer -> protected void doStop() throws JMSException;1368482696;Notify all invoker tasks and stop the shared Connection, if any._@throws JMSException if thrown by JMS API methods_@see #stopSharedConnection;protected void doStop() throws JMSException {_		synchronized (this.lifecycleMonitor) {_			this.running = false__			this.lifecycleMonitor.notifyAll()__		}__		if (sharedConnectionEnabled()) {_			stopSharedConnection()__		}_	};notify,all,invoker,tasks,and,stop,the,shared,connection,if,any,throws,jmsexception,if,thrown,by,jms,api,methods,see,stop,shared,connection;protected,void,do,stop,throws,jmsexception,synchronized,this,lifecycle,monitor,this,running,false,this,lifecycle,monitor,notify,all,if,shared,connection,enabled,stop,shared,connection
AbstractJmsListeningContainer -> protected void doStop() throws JMSException;1403791284;Notify all invoker tasks and stop the shared Connection, if any._@throws JMSException if thrown by JMS API methods_@see #stopSharedConnection;protected void doStop() throws JMSException {_		synchronized (this.lifecycleMonitor) {_			this.running = false__			this.lifecycleMonitor.notifyAll()__		}__		if (sharedConnectionEnabled()) {_			stopSharedConnection()__		}_	};notify,all,invoker,tasks,and,stop,the,shared,connection,if,any,throws,jmsexception,if,thrown,by,jms,api,methods,see,stop,shared,connection;protected,void,do,stop,throws,jmsexception,synchronized,this,lifecycle,monitor,this,running,false,this,lifecycle,monitor,notify,all,if,shared,connection,enabled,stop,shared,connection
AbstractJmsListeningContainer -> protected void doStop() throws JMSException;1462186904;Notify all invoker tasks and stop the shared Connection, if any._@throws JMSException if thrown by JMS API methods_@see #stopSharedConnection;protected void doStop() throws JMSException {_		synchronized (this.lifecycleMonitor) {_			this.running = false__			this.lifecycleMonitor.notifyAll()__		}__		if (sharedConnectionEnabled()) {_			stopSharedConnection()__		}_	};notify,all,invoker,tasks,and,stop,the,shared,connection,if,any,throws,jmsexception,if,thrown,by,jms,api,methods,see,stop,shared,connection;protected,void,do,stop,throws,jmsexception,synchronized,this,lifecycle,monitor,this,running,false,this,lifecycle,monitor,notify,all,if,shared,connection,enabled,stop,shared,connection
AbstractJmsListeningContainer -> protected void doStop() throws JMSException;1467730834;Notify all invoker tasks and stop the shared Connection, if any._@throws JMSException if thrown by JMS API methods_@see #stopSharedConnection;protected void doStop() throws JMSException {_		synchronized (this.lifecycleMonitor) {_			this.running = false__			this.lifecycleMonitor.notifyAll()__		}__		if (sharedConnectionEnabled()) {_			stopSharedConnection()__		}_	};notify,all,invoker,tasks,and,stop,the,shared,connection,if,any,throws,jmsexception,if,thrown,by,jms,api,methods,see,stop,shared,connection;protected,void,do,stop,throws,jmsexception,synchronized,this,lifecycle,monitor,this,running,false,this,lifecycle,monitor,notify,all,if,shared,connection,enabled,stop,shared,connection
AbstractJmsListeningContainer -> protected void doStop() throws JMSException;1495868221;Notify all invoker tasks and stop the shared Connection, if any._@throws JMSException if thrown by JMS API methods_@see #stopSharedConnection;protected void doStop() throws JMSException {_		synchronized (this.lifecycleMonitor) {_			this.running = false__			this.lifecycleMonitor.notifyAll()__		}__		if (sharedConnectionEnabled()) {_			stopSharedConnection()__		}_	};notify,all,invoker,tasks,and,stop,the,shared,connection,if,any,throws,jmsexception,if,thrown,by,jms,api,methods,see,stop,shared,connection;protected,void,do,stop,throws,jmsexception,synchronized,this,lifecycle,monitor,this,running,false,this,lifecycle,monitor,notify,all,if,shared,connection,enabled,stop,shared,connection
AbstractJmsListeningContainer -> protected void doStop() throws JMSException;1498780456;Notify all invoker tasks and stop the shared Connection, if any._@throws JMSException if thrown by JMS API methods_@see #stopSharedConnection;protected void doStop() throws JMSException {_		synchronized (this.lifecycleMonitor) {_			this.running = false__			this.lifecycleMonitor.notifyAll()__		}__		if (sharedConnectionEnabled()) {_			stopSharedConnection()__		}_	};notify,all,invoker,tasks,and,stop,the,shared,connection,if,any,throws,jmsexception,if,thrown,by,jms,api,methods,see,stop,shared,connection;protected,void,do,stop,throws,jmsexception,synchronized,this,lifecycle,monitor,this,running,false,this,lifecycle,monitor,notify,all,if,shared,connection,enabled,stop,shared,connection
AbstractJmsListeningContainer -> protected void doStop() throws JMSException;1500448076;Notify all invoker tasks and stop the shared Connection, if any._@throws JMSException if thrown by JMS API methods_@see #stopSharedConnection;protected void doStop() throws JMSException {_		synchronized (this.lifecycleMonitor) {_			this.running = false__			this.lifecycleMonitor.notifyAll()__		}__		if (sharedConnectionEnabled()) {_			stopSharedConnection()__		}_	};notify,all,invoker,tasks,and,stop,the,shared,connection,if,any,throws,jmsexception,if,thrown,by,jms,api,methods,see,stop,shared,connection;protected,void,do,stop,throws,jmsexception,synchronized,this,lifecycle,monitor,this,running,false,this,lifecycle,monitor,notify,all,if,shared,connection,enabled,stop,shared,connection
AbstractJmsListeningContainer -> protected void doStop() throws JMSException;1521123475;Notify all invoker tasks and stop the shared Connection, if any._@throws JMSException if thrown by JMS API methods_@see #stopSharedConnection;protected void doStop() throws JMSException {_		synchronized (this.lifecycleMonitor) {_			this.running = false__			this.lifecycleMonitor.notifyAll()__		}__		if (sharedConnectionEnabled()) {_			stopSharedConnection()__		}_	};notify,all,invoker,tasks,and,stop,the,shared,connection,if,any,throws,jmsexception,if,thrown,by,jms,api,methods,see,stop,shared,connection;protected,void,do,stop,throws,jmsexception,synchronized,this,lifecycle,monitor,this,running,false,this,lifecycle,monitor,notify,all,if,shared,connection,enabled,stop,shared,connection
AbstractJmsListeningContainer -> protected void doStop() throws JMSException;1534414082;Notify all invoker tasks and stop the shared Connection, if any._@throws JMSException if thrown by JMS API methods_@see #stopSharedConnection;protected void doStop() throws JMSException {_		synchronized (this.lifecycleMonitor) {_			this.running = false__			this.lifecycleMonitor.notifyAll()__		}__		if (sharedConnectionEnabled()) {_			stopSharedConnection()__		}_	};notify,all,invoker,tasks,and,stop,the,shared,connection,if,any,throws,jmsexception,if,thrown,by,jms,api,methods,see,stop,shared,connection;protected,void,do,stop,throws,jmsexception,synchronized,this,lifecycle,monitor,this,running,false,this,lifecycle,monitor,notify,all,if,shared,connection,enabled,stop,shared,connection
AbstractJmsListeningContainer -> public void setPhase(int phase);1328020251;Specify the phase in which this container should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this container starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,container,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,container,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
AbstractJmsListeningContainer -> public void setPhase(int phase);1355394580;Specify the phase in which this container should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this container starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,container,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,container,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
AbstractJmsListeningContainer -> public void setPhase(int phase);1356735495;Specify the phase in which this container should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this container starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,container,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,container,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
AbstractJmsListeningContainer -> public void setPhase(int phase);1357119239;Specify the phase in which this container should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this container starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,container,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,container,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
AbstractJmsListeningContainer -> public void setPhase(int phase);1368482696;Specify the phase in which this container should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this container starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,container,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,container,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
AbstractJmsListeningContainer -> public void setPhase(int phase);1403791284;Specify the phase in which this container should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this container starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,container,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,container,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
AbstractJmsListeningContainer -> public void setPhase(int phase);1462186904;Specify the phase in which this container should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this container starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,container,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,container,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
AbstractJmsListeningContainer -> public void setPhase(int phase);1467730834;Specify the phase in which this container should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this container starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,container,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,container,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
AbstractJmsListeningContainer -> public void setPhase(int phase);1495868221;Specify the phase in which this container should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this container starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,container,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,container,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
AbstractJmsListeningContainer -> public void setPhase(int phase);1498780456;Specify the phase in which this container should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this container starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,container,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,container,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
AbstractJmsListeningContainer -> public void setPhase(int phase);1500448076;Specify the phase in which this container should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this container starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,container,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,container,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
AbstractJmsListeningContainer -> public void setPhase(int phase);1521123475;Specify the phase in which this container should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this container starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,container,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,container,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
AbstractJmsListeningContainer -> public void setPhase(int phase);1534414082;Specify the phase in which this container should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this container starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,container,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,container,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
AbstractJmsListeningContainer -> public int getPausedTaskCount();1328020251;Determine the number of currently paused tasks, if any.;public int getPausedTaskCount() {_		synchronized (this.lifecycleMonitor) {_			return this.pausedTasks.size()__		}_	};determine,the,number,of,currently,paused,tasks,if,any;public,int,get,paused,task,count,synchronized,this,lifecycle,monitor,return,this,paused,tasks,size
AbstractJmsListeningContainer -> public int getPausedTaskCount();1355394580;Determine the number of currently paused tasks, if any.;public int getPausedTaskCount() {_		synchronized (this.lifecycleMonitor) {_			return this.pausedTasks.size()__		}_	};determine,the,number,of,currently,paused,tasks,if,any;public,int,get,paused,task,count,synchronized,this,lifecycle,monitor,return,this,paused,tasks,size
AbstractJmsListeningContainer -> public int getPausedTaskCount();1356735495;Determine the number of currently paused tasks, if any.;public int getPausedTaskCount() {_		synchronized (this.lifecycleMonitor) {_			return this.pausedTasks.size()__		}_	};determine,the,number,of,currently,paused,tasks,if,any;public,int,get,paused,task,count,synchronized,this,lifecycle,monitor,return,this,paused,tasks,size
AbstractJmsListeningContainer -> public int getPausedTaskCount();1357119239;Determine the number of currently paused tasks, if any.;public int getPausedTaskCount() {_		synchronized (this.lifecycleMonitor) {_			return this.pausedTasks.size()__		}_	};determine,the,number,of,currently,paused,tasks,if,any;public,int,get,paused,task,count,synchronized,this,lifecycle,monitor,return,this,paused,tasks,size
AbstractJmsListeningContainer -> public int getPausedTaskCount();1368482696;Determine the number of currently paused tasks, if any.;public int getPausedTaskCount() {_		synchronized (this.lifecycleMonitor) {_			return this.pausedTasks.size()__		}_	};determine,the,number,of,currently,paused,tasks,if,any;public,int,get,paused,task,count,synchronized,this,lifecycle,monitor,return,this,paused,tasks,size
AbstractJmsListeningContainer -> public int getPausedTaskCount();1403791284;Determine the number of currently paused tasks, if any.;public int getPausedTaskCount() {_		synchronized (this.lifecycleMonitor) {_			return this.pausedTasks.size()__		}_	};determine,the,number,of,currently,paused,tasks,if,any;public,int,get,paused,task,count,synchronized,this,lifecycle,monitor,return,this,paused,tasks,size
AbstractJmsListeningContainer -> public int getPausedTaskCount();1462186904;Determine the number of currently paused tasks, if any.;public int getPausedTaskCount() {_		synchronized (this.lifecycleMonitor) {_			return this.pausedTasks.size()__		}_	};determine,the,number,of,currently,paused,tasks,if,any;public,int,get,paused,task,count,synchronized,this,lifecycle,monitor,return,this,paused,tasks,size
AbstractJmsListeningContainer -> public int getPausedTaskCount();1467730834;Determine the number of currently paused tasks, if any.;public int getPausedTaskCount() {_		synchronized (this.lifecycleMonitor) {_			return this.pausedTasks.size()__		}_	};determine,the,number,of,currently,paused,tasks,if,any;public,int,get,paused,task,count,synchronized,this,lifecycle,monitor,return,this,paused,tasks,size
AbstractJmsListeningContainer -> public int getPausedTaskCount();1495868221;Determine the number of currently paused tasks, if any.;public int getPausedTaskCount() {_		synchronized (this.lifecycleMonitor) {_			return this.pausedTasks.size()__		}_	};determine,the,number,of,currently,paused,tasks,if,any;public,int,get,paused,task,count,synchronized,this,lifecycle,monitor,return,this,paused,tasks,size
AbstractJmsListeningContainer -> public int getPausedTaskCount();1498780456;Determine the number of currently paused tasks, if any.;public int getPausedTaskCount() {_		synchronized (this.lifecycleMonitor) {_			return this.pausedTasks.size()__		}_	};determine,the,number,of,currently,paused,tasks,if,any;public,int,get,paused,task,count,synchronized,this,lifecycle,monitor,return,this,paused,tasks,size
AbstractJmsListeningContainer -> public int getPausedTaskCount();1500448076;Determine the number of currently paused tasks, if any.;public int getPausedTaskCount() {_		synchronized (this.lifecycleMonitor) {_			return this.pausedTasks.size()__		}_	};determine,the,number,of,currently,paused,tasks,if,any;public,int,get,paused,task,count,synchronized,this,lifecycle,monitor,return,this,paused,tasks,size
AbstractJmsListeningContainer -> public int getPausedTaskCount();1521123475;Determine the number of currently paused tasks, if any.;public int getPausedTaskCount() {_		synchronized (this.lifecycleMonitor) {_			return this.pausedTasks.size()__		}_	};determine,the,number,of,currently,paused,tasks,if,any;public,int,get,paused,task,count,synchronized,this,lifecycle,monitor,return,this,paused,tasks,size
AbstractJmsListeningContainer -> public int getPausedTaskCount();1534414082;Determine the number of currently paused tasks, if any.;public int getPausedTaskCount() {_		synchronized (this.lifecycleMonitor) {_			return this.pausedTasks.size()__		}_	};determine,the,number,of,currently,paused,tasks,if,any;public,int,get,paused,task,count,synchronized,this,lifecycle,monitor,return,this,paused,tasks,size
AbstractJmsListeningContainer -> protected void startSharedConnection() throws JMSException;1328020251;Start the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void startSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = true__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.start()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection start exception - assuming already started: " + ex)__				}_			}_		}_	};start,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,start,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,true,if,this,shared,connection,null,try,this,shared,connection,start,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,start,exception,assuming,already,started,ex
AbstractJmsListeningContainer -> protected void startSharedConnection() throws JMSException;1355394580;Start the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void startSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = true__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.start()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection start exception - assuming already started: " + ex)__				}_			}_		}_	};start,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,start,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,true,if,this,shared,connection,null,try,this,shared,connection,start,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,start,exception,assuming,already,started,ex
AbstractJmsListeningContainer -> protected void startSharedConnection() throws JMSException;1356735495;Start the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void startSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = true__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.start()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection start exception - assuming already started: " + ex)__				}_			}_		}_	};start,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,start,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,true,if,this,shared,connection,null,try,this,shared,connection,start,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,start,exception,assuming,already,started,ex
AbstractJmsListeningContainer -> protected void startSharedConnection() throws JMSException;1357119239;Start the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void startSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = true__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.start()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection start exception - assuming already started: " + ex)__				}_			}_		}_	};start,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,start,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,true,if,this,shared,connection,null,try,this,shared,connection,start,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,start,exception,assuming,already,started,ex
AbstractJmsListeningContainer -> protected void startSharedConnection() throws JMSException;1368482696;Start the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void startSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = true__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.start()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection start exception - assuming already started: " + ex)__				}_			}_		}_	};start,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,start,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,true,if,this,shared,connection,null,try,this,shared,connection,start,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,start,exception,assuming,already,started,ex
AbstractJmsListeningContainer -> protected void startSharedConnection() throws JMSException;1403791284;Start the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void startSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = true__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.start()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection start exception - assuming already started: " + ex)__				}_			}_		}_	};start,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,start,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,true,if,this,shared,connection,null,try,this,shared,connection,start,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,start,exception,assuming,already,started,ex
AbstractJmsListeningContainer -> protected void startSharedConnection() throws JMSException;1462186904;Start the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void startSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = true__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.start()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection start exception - assuming already started: " + ex)__				}_			}_		}_	};start,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,start,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,true,if,this,shared,connection,null,try,this,shared,connection,start,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,start,exception,assuming,already,started,ex
AbstractJmsListeningContainer -> protected void startSharedConnection() throws JMSException;1467730834;Start the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void startSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = true__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.start()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection start exception - assuming already started: " + ex)__				}_			}_		}_	};start,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,start,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,true,if,this,shared,connection,null,try,this,shared,connection,start,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,start,exception,assuming,already,started,ex
AbstractJmsListeningContainer -> protected void startSharedConnection() throws JMSException;1495868221;Start the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void startSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = true__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.start()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection start exception - assuming already started: " + ex)__				}_			}_		}_	};start,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,start,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,true,if,this,shared,connection,null,try,this,shared,connection,start,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,start,exception,assuming,already,started,ex
AbstractJmsListeningContainer -> protected void startSharedConnection() throws JMSException;1498780456;Start the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void startSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = true__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.start()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection start exception - assuming already started: " + ex)__				}_			}_		}_	};start,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,start,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,true,if,this,shared,connection,null,try,this,shared,connection,start,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,start,exception,assuming,already,started,ex
AbstractJmsListeningContainer -> protected void startSharedConnection() throws JMSException;1500448076;Start the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void startSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = true__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.start()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection start exception - assuming already started: " + ex)__				}_			}_		}_	};start,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,start,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,true,if,this,shared,connection,null,try,this,shared,connection,start,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,start,exception,assuming,already,started,ex
AbstractJmsListeningContainer -> protected void startSharedConnection() throws JMSException;1521123475;Start the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void startSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = true__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.start()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection start exception - assuming already started: " + ex)__				}_			}_		}_	};start,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,start,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,true,if,this,shared,connection,null,try,this,shared,connection,start,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,start,exception,assuming,already,started,ex
AbstractJmsListeningContainer -> protected void startSharedConnection() throws JMSException;1534414082;Start the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void startSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = true__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.start()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection start exception - assuming already started: " + ex)__				}_			}_		}_	};start,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,start,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,true,if,this,shared,connection,null,try,this,shared,connection,start,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,start,exception,assuming,already,started,ex
AbstractJmsListeningContainer -> public void start() throws JmsException;1328020251;Start this container._@throws JmsException if starting failed_@see #doStart;public void start() throws JmsException {_		try {_			doStart()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};start,this,container,throws,jms,exception,if,starting,failed,see,do,start;public,void,start,throws,jms,exception,try,do,start,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void start() throws JmsException;1355394580;Start this container._@throws JmsException if starting failed_@see #doStart;public void start() throws JmsException {_		try {_			doStart()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};start,this,container,throws,jms,exception,if,starting,failed,see,do,start;public,void,start,throws,jms,exception,try,do,start,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void start() throws JmsException;1357119239;Start this container._@throws JmsException if starting failed_@see #doStart;public void start() throws JmsException {_		try {_			doStart()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};start,this,container,throws,jms,exception,if,starting,failed,see,do,start;public,void,start,throws,jms,exception,try,do,start,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> protected void doStart() throws JMSException;1328020251;Start the shared Connection, if any, and notify all invoker tasks._@throws JMSException if thrown by JMS API methods_@see #startSharedConnection;protected void doStart() throws JMSException {_		_		if (sharedConnectionEnabled()) {_			establishSharedConnection()__		}__		_		synchronized (this.lifecycleMonitor) {_			this.running = true__			this.lifecycleMonitor.notifyAll()__			resumePausedTasks()__		}__		_		if (sharedConnectionEnabled()) {_			startSharedConnection()__		}_	};start,the,shared,connection,if,any,and,notify,all,invoker,tasks,throws,jmsexception,if,thrown,by,jms,api,methods,see,start,shared,connection;protected,void,do,start,throws,jmsexception,if,shared,connection,enabled,establish,shared,connection,synchronized,this,lifecycle,monitor,this,running,true,this,lifecycle,monitor,notify,all,resume,paused,tasks,if,shared,connection,enabled,start,shared,connection
AbstractJmsListeningContainer -> protected void doStart() throws JMSException;1355394580;Start the shared Connection, if any, and notify all invoker tasks._@throws JMSException if thrown by JMS API methods_@see #startSharedConnection;protected void doStart() throws JMSException {_		_		if (sharedConnectionEnabled()) {_			establishSharedConnection()__		}__		_		synchronized (this.lifecycleMonitor) {_			this.running = true__			this.lifecycleMonitor.notifyAll()__			resumePausedTasks()__		}__		_		if (sharedConnectionEnabled()) {_			startSharedConnection()__		}_	};start,the,shared,connection,if,any,and,notify,all,invoker,tasks,throws,jmsexception,if,thrown,by,jms,api,methods,see,start,shared,connection;protected,void,do,start,throws,jmsexception,if,shared,connection,enabled,establish,shared,connection,synchronized,this,lifecycle,monitor,this,running,true,this,lifecycle,monitor,notify,all,resume,paused,tasks,if,shared,connection,enabled,start,shared,connection
AbstractJmsListeningContainer -> protected void doStart() throws JMSException;1356735495;Start the shared Connection, if any, and notify all invoker tasks._@throws JMSException if thrown by JMS API methods_@see #startSharedConnection;protected void doStart() throws JMSException {_		_		if (sharedConnectionEnabled()) {_			establishSharedConnection()__		}__		_		synchronized (this.lifecycleMonitor) {_			this.running = true__			this.lifecycleMonitor.notifyAll()__			resumePausedTasks()__		}__		_		if (sharedConnectionEnabled()) {_			startSharedConnection()__		}_	};start,the,shared,connection,if,any,and,notify,all,invoker,tasks,throws,jmsexception,if,thrown,by,jms,api,methods,see,start,shared,connection;protected,void,do,start,throws,jmsexception,if,shared,connection,enabled,establish,shared,connection,synchronized,this,lifecycle,monitor,this,running,true,this,lifecycle,monitor,notify,all,resume,paused,tasks,if,shared,connection,enabled,start,shared,connection
AbstractJmsListeningContainer -> protected void doStart() throws JMSException;1357119239;Start the shared Connection, if any, and notify all invoker tasks._@throws JMSException if thrown by JMS API methods_@see #startSharedConnection;protected void doStart() throws JMSException {_		_		if (sharedConnectionEnabled()) {_			establishSharedConnection()__		}__		_		synchronized (this.lifecycleMonitor) {_			this.running = true__			this.lifecycleMonitor.notifyAll()__			resumePausedTasks()__		}__		_		if (sharedConnectionEnabled()) {_			startSharedConnection()__		}_	};start,the,shared,connection,if,any,and,notify,all,invoker,tasks,throws,jmsexception,if,thrown,by,jms,api,methods,see,start,shared,connection;protected,void,do,start,throws,jmsexception,if,shared,connection,enabled,establish,shared,connection,synchronized,this,lifecycle,monitor,this,running,true,this,lifecycle,monitor,notify,all,resume,paused,tasks,if,shared,connection,enabled,start,shared,connection
AbstractJmsListeningContainer -> protected void doStart() throws JMSException;1368482696;Start the shared Connection, if any, and notify all invoker tasks._@throws JMSException if thrown by JMS API methods_@see #startSharedConnection;protected void doStart() throws JMSException {_		_		if (sharedConnectionEnabled()) {_			establishSharedConnection()__		}__		_		synchronized (this.lifecycleMonitor) {_			this.running = true__			this.lifecycleMonitor.notifyAll()__			resumePausedTasks()__		}__		_		if (sharedConnectionEnabled()) {_			startSharedConnection()__		}_	};start,the,shared,connection,if,any,and,notify,all,invoker,tasks,throws,jmsexception,if,thrown,by,jms,api,methods,see,start,shared,connection;protected,void,do,start,throws,jmsexception,if,shared,connection,enabled,establish,shared,connection,synchronized,this,lifecycle,monitor,this,running,true,this,lifecycle,monitor,notify,all,resume,paused,tasks,if,shared,connection,enabled,start,shared,connection
AbstractJmsListeningContainer -> protected void doStart() throws JMSException;1403791284;Start the shared Connection, if any, and notify all invoker tasks._@throws JMSException if thrown by JMS API methods_@see #startSharedConnection;protected void doStart() throws JMSException {_		_		if (sharedConnectionEnabled()) {_			establishSharedConnection()__		}__		_		synchronized (this.lifecycleMonitor) {_			this.running = true__			this.lifecycleMonitor.notifyAll()__			resumePausedTasks()__		}__		_		if (sharedConnectionEnabled()) {_			startSharedConnection()__		}_	};start,the,shared,connection,if,any,and,notify,all,invoker,tasks,throws,jmsexception,if,thrown,by,jms,api,methods,see,start,shared,connection;protected,void,do,start,throws,jmsexception,if,shared,connection,enabled,establish,shared,connection,synchronized,this,lifecycle,monitor,this,running,true,this,lifecycle,monitor,notify,all,resume,paused,tasks,if,shared,connection,enabled,start,shared,connection
AbstractJmsListeningContainer -> protected void doStart() throws JMSException;1462186904;Start the shared Connection, if any, and notify all invoker tasks._@throws JMSException if thrown by JMS API methods_@see #startSharedConnection;protected void doStart() throws JMSException {_		_		if (sharedConnectionEnabled()) {_			establishSharedConnection()__		}__		_		synchronized (this.lifecycleMonitor) {_			this.running = true__			this.lifecycleMonitor.notifyAll()__			resumePausedTasks()__		}__		_		if (sharedConnectionEnabled()) {_			startSharedConnection()__		}_	};start,the,shared,connection,if,any,and,notify,all,invoker,tasks,throws,jmsexception,if,thrown,by,jms,api,methods,see,start,shared,connection;protected,void,do,start,throws,jmsexception,if,shared,connection,enabled,establish,shared,connection,synchronized,this,lifecycle,monitor,this,running,true,this,lifecycle,monitor,notify,all,resume,paused,tasks,if,shared,connection,enabled,start,shared,connection
AbstractJmsListeningContainer -> protected void doStart() throws JMSException;1467730834;Start the shared Connection, if any, and notify all invoker tasks._@throws JMSException if thrown by JMS API methods_@see #startSharedConnection;protected void doStart() throws JMSException {_		_		if (sharedConnectionEnabled()) {_			establishSharedConnection()__		}__		_		synchronized (this.lifecycleMonitor) {_			this.running = true__			this.lifecycleMonitor.notifyAll()__			resumePausedTasks()__		}__		_		if (sharedConnectionEnabled()) {_			startSharedConnection()__		}_	};start,the,shared,connection,if,any,and,notify,all,invoker,tasks,throws,jmsexception,if,thrown,by,jms,api,methods,see,start,shared,connection;protected,void,do,start,throws,jmsexception,if,shared,connection,enabled,establish,shared,connection,synchronized,this,lifecycle,monitor,this,running,true,this,lifecycle,monitor,notify,all,resume,paused,tasks,if,shared,connection,enabled,start,shared,connection
AbstractJmsListeningContainer -> protected void doStart() throws JMSException;1495868221;Start the shared Connection, if any, and notify all invoker tasks._@throws JMSException if thrown by JMS API methods_@see #startSharedConnection;protected void doStart() throws JMSException {_		_		if (sharedConnectionEnabled()) {_			establishSharedConnection()__		}__		_		synchronized (this.lifecycleMonitor) {_			this.running = true__			this.lifecycleMonitor.notifyAll()__			resumePausedTasks()__		}__		_		if (sharedConnectionEnabled()) {_			startSharedConnection()__		}_	};start,the,shared,connection,if,any,and,notify,all,invoker,tasks,throws,jmsexception,if,thrown,by,jms,api,methods,see,start,shared,connection;protected,void,do,start,throws,jmsexception,if,shared,connection,enabled,establish,shared,connection,synchronized,this,lifecycle,monitor,this,running,true,this,lifecycle,monitor,notify,all,resume,paused,tasks,if,shared,connection,enabled,start,shared,connection
AbstractJmsListeningContainer -> protected void doStart() throws JMSException;1498780456;Start the shared Connection, if any, and notify all invoker tasks._@throws JMSException if thrown by JMS API methods_@see #startSharedConnection;protected void doStart() throws JMSException {_		_		if (sharedConnectionEnabled()) {_			establishSharedConnection()__		}__		_		synchronized (this.lifecycleMonitor) {_			this.running = true__			this.lifecycleMonitor.notifyAll()__			resumePausedTasks()__		}__		_		if (sharedConnectionEnabled()) {_			startSharedConnection()__		}_	};start,the,shared,connection,if,any,and,notify,all,invoker,tasks,throws,jmsexception,if,thrown,by,jms,api,methods,see,start,shared,connection;protected,void,do,start,throws,jmsexception,if,shared,connection,enabled,establish,shared,connection,synchronized,this,lifecycle,monitor,this,running,true,this,lifecycle,monitor,notify,all,resume,paused,tasks,if,shared,connection,enabled,start,shared,connection
AbstractJmsListeningContainer -> protected void doStart() throws JMSException;1500448076;Start the shared Connection, if any, and notify all invoker tasks._@throws JMSException if thrown by JMS API methods_@see #startSharedConnection;protected void doStart() throws JMSException {_		_		if (sharedConnectionEnabled()) {_			establishSharedConnection()__		}__		_		synchronized (this.lifecycleMonitor) {_			this.running = true__			this.lifecycleMonitor.notifyAll()__			resumePausedTasks()__		}__		_		if (sharedConnectionEnabled()) {_			startSharedConnection()__		}_	};start,the,shared,connection,if,any,and,notify,all,invoker,tasks,throws,jmsexception,if,thrown,by,jms,api,methods,see,start,shared,connection;protected,void,do,start,throws,jmsexception,if,shared,connection,enabled,establish,shared,connection,synchronized,this,lifecycle,monitor,this,running,true,this,lifecycle,monitor,notify,all,resume,paused,tasks,if,shared,connection,enabled,start,shared,connection
AbstractJmsListeningContainer -> protected void doStart() throws JMSException;1521123475;Start the shared Connection, if any, and notify all invoker tasks._@throws JMSException if thrown by JMS API methods_@see #startSharedConnection;protected void doStart() throws JMSException {_		_		if (sharedConnectionEnabled()) {_			establishSharedConnection()__		}__		_		synchronized (this.lifecycleMonitor) {_			this.running = true__			this.lifecycleMonitor.notifyAll()__			resumePausedTasks()__		}__		_		if (sharedConnectionEnabled()) {_			startSharedConnection()__		}_	};start,the,shared,connection,if,any,and,notify,all,invoker,tasks,throws,jmsexception,if,thrown,by,jms,api,methods,see,start,shared,connection;protected,void,do,start,throws,jmsexception,if,shared,connection,enabled,establish,shared,connection,synchronized,this,lifecycle,monitor,this,running,true,this,lifecycle,monitor,notify,all,resume,paused,tasks,if,shared,connection,enabled,start,shared,connection
AbstractJmsListeningContainer -> protected void doStart() throws JMSException;1534414082;Start the shared Connection, if any, and notify all invoker tasks._@throws JMSException if thrown by JMS API methods_@see #startSharedConnection;protected void doStart() throws JMSException {_		_		if (sharedConnectionEnabled()) {_			establishSharedConnection()__		}__		_		synchronized (this.lifecycleMonitor) {_			this.running = true__			this.lifecycleMonitor.notifyAll()__			resumePausedTasks()__		}__		_		if (sharedConnectionEnabled()) {_			startSharedConnection()__		}_	};start,the,shared,connection,if,any,and,notify,all,invoker,tasks,throws,jmsexception,if,thrown,by,jms,api,methods,see,start,shared,connection;protected,void,do,start,throws,jmsexception,if,shared,connection,enabled,establish,shared,connection,synchronized,this,lifecycle,monitor,this,running,true,this,lifecycle,monitor,notify,all,resume,paused,tasks,if,shared,connection,enabled,start,shared,connection
AbstractJmsListeningContainer -> @Override 	public void stop() throws JmsException;1356735495;Stop this container._@throws JmsException if stopping failed_@see #doStop;@Override_	public void stop() throws JmsException {_		try {_			doStop()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};stop,this,container,throws,jms,exception,if,stopping,failed,see,do,stop;override,public,void,stop,throws,jms,exception,try,do,stop,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void stop() throws JmsException;1368482696;Stop this container._@throws JmsException if stopping failed_@see #doStop;@Override_	public void stop() throws JmsException {_		try {_			doStop()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};stop,this,container,throws,jms,exception,if,stopping,failed,see,do,stop;override,public,void,stop,throws,jms,exception,try,do,stop,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void stop() throws JmsException;1403791284;Stop this container._@throws JmsException if stopping failed_@see #doStop;@Override_	public void stop() throws JmsException {_		try {_			doStop()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};stop,this,container,throws,jms,exception,if,stopping,failed,see,do,stop;override,public,void,stop,throws,jms,exception,try,do,stop,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void stop() throws JmsException;1462186904;Stop this container._@throws JmsException if stopping failed_@see #doStop;@Override_	public void stop() throws JmsException {_		try {_			doStop()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};stop,this,container,throws,jms,exception,if,stopping,failed,see,do,stop;override,public,void,stop,throws,jms,exception,try,do,stop,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void stop() throws JmsException;1467730834;Stop this container._@throws JmsException if stopping failed_@see #doStop;@Override_	public void stop() throws JmsException {_		try {_			doStop()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};stop,this,container,throws,jms,exception,if,stopping,failed,see,do,stop;override,public,void,stop,throws,jms,exception,try,do,stop,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void stop() throws JmsException;1495868221;Stop this container._@throws JmsException if stopping failed_@see #doStop;@Override_	public void stop() throws JmsException {_		try {_			doStop()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};stop,this,container,throws,jms,exception,if,stopping,failed,see,do,stop;override,public,void,stop,throws,jms,exception,try,do,stop,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void stop() throws JmsException;1498780456;Stop this container._@throws JmsException if stopping failed_@see #doStop;@Override_	public void stop() throws JmsException {_		try {_			doStop()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};stop,this,container,throws,jms,exception,if,stopping,failed,see,do,stop;override,public,void,stop,throws,jms,exception,try,do,stop,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void stop() throws JmsException;1500448076;Stop this container._@throws JmsException if stopping failed_@see #doStop;@Override_	public void stop() throws JmsException {_		try {_			doStop()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};stop,this,container,throws,jms,exception,if,stopping,failed,see,do,stop;override,public,void,stop,throws,jms,exception,try,do,stop,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void stop() throws JmsException;1521123475;Stop this container._@throws JmsException if stopping failed_@see #doStop;@Override_	public void stop() throws JmsException {_		try {_			doStop()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};stop,this,container,throws,jms,exception,if,stopping,failed,see,do,stop;override,public,void,stop,throws,jms,exception,try,do,stop,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void stop() throws JmsException;1534414082;Stop this container._@throws JmsException if stopping failed_@see #doStop;@Override_	public void stop() throws JmsException {_		try {_			doStop()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};stop,this,container,throws,jms,exception,if,stopping,failed,see,do,stop;override,public,void,stop,throws,jms,exception,try,do,stop,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Nullable 	protected final String getBeanName();1495868221;Return the bean name that this listener container has been assigned_in its containing bean factory, if any.;@Nullable_	protected final String getBeanName() {_		return this.beanName__	};return,the,bean,name,that,this,listener,container,has,been,assigned,in,its,containing,bean,factory,if,any;nullable,protected,final,string,get,bean,name,return,this,bean,name
AbstractJmsListeningContainer -> @Nullable 	protected final String getBeanName();1498780456;Return the bean name that this listener container has been assigned_in its containing bean factory, if any.;@Nullable_	protected final String getBeanName() {_		return this.beanName__	};return,the,bean,name,that,this,listener,container,has,been,assigned,in,its,containing,bean,factory,if,any;nullable,protected,final,string,get,bean,name,return,this,bean,name
AbstractJmsListeningContainer -> @Nullable 	protected final String getBeanName();1500448076;Return the bean name that this listener container has been assigned_in its containing bean factory, if any.;@Nullable_	protected final String getBeanName() {_		return this.beanName__	};return,the,bean,name,that,this,listener,container,has,been,assigned,in,its,containing,bean,factory,if,any;nullable,protected,final,string,get,bean,name,return,this,bean,name
AbstractJmsListeningContainer -> @Nullable 	protected final String getBeanName();1521123475;Return the bean name that this listener container has been assigned_in its containing bean factory, if any.;@Nullable_	protected final String getBeanName() {_		return this.beanName__	};return,the,bean,name,that,this,listener,container,has,been,assigned,in,its,containing,bean,factory,if,any;nullable,protected,final,string,get,bean,name,return,this,bean,name
AbstractJmsListeningContainer -> @Nullable 	protected final String getBeanName();1534414082;Return the bean name that this listener container has been assigned_in its containing bean factory, if any.;@Nullable_	protected final String getBeanName() {_		return this.beanName__	};return,the,bean,name,that,this,listener,container,has,been,assigned,in,its,containing,bean,factory,if,any;nullable,protected,final,string,get,bean,name,return,this,bean,name
AbstractJmsListeningContainer -> protected final Connection getSharedConnection();1328020251;Return the shared JMS Connection maintained by this container._Available after initialization._@return the shared Connection (never <code>null</code>)_@throws IllegalStateException if this container does not maintain a_shared Connection, or if the Connection hasn't been initialized yet_@see #sharedConnectionEnabled();protected final Connection getSharedConnection() {_		if (!sharedConnectionEnabled()) {_			throw new IllegalStateException(_					"This listener container does not maintain a shared Connection")__		}_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				throw new SharedConnectionNotInitializedException(_						"This listener container's shared Connection has not been initialized yet")__			}_			return this.sharedConnection__		}_	};return,the,shared,jms,connection,maintained,by,this,container,available,after,initialization,return,the,shared,connection,never,code,null,code,throws,illegal,state,exception,if,this,container,does,not,maintain,a,shared,connection,or,if,the,connection,hasn,t,been,initialized,yet,see,shared,connection,enabled;protected,final,connection,get,shared,connection,if,shared,connection,enabled,throw,new,illegal,state,exception,this,listener,container,does,not,maintain,a,shared,connection,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,throw,new,shared,connection,not,initialized,exception,this,listener,container,s,shared,connection,has,not,been,initialized,yet,return,this,shared,connection
AbstractJmsListeningContainer -> protected final Connection getSharedConnection();1355394580;Return the shared JMS Connection maintained by this container._Available after initialization._@return the shared Connection (never <code>null</code>)_@throws IllegalStateException if this container does not maintain a_shared Connection, or if the Connection hasn't been initialized yet_@see #sharedConnectionEnabled();protected final Connection getSharedConnection() {_		if (!sharedConnectionEnabled()) {_			throw new IllegalStateException(_					"This listener container does not maintain a shared Connection")__		}_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				throw new SharedConnectionNotInitializedException(_						"This listener container's shared Connection has not been initialized yet")__			}_			return this.sharedConnection__		}_	};return,the,shared,jms,connection,maintained,by,this,container,available,after,initialization,return,the,shared,connection,never,code,null,code,throws,illegal,state,exception,if,this,container,does,not,maintain,a,shared,connection,or,if,the,connection,hasn,t,been,initialized,yet,see,shared,connection,enabled;protected,final,connection,get,shared,connection,if,shared,connection,enabled,throw,new,illegal,state,exception,this,listener,container,does,not,maintain,a,shared,connection,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,throw,new,shared,connection,not,initialized,exception,this,listener,container,s,shared,connection,has,not,been,initialized,yet,return,this,shared,connection
AbstractJmsListeningContainer -> protected final Connection getSharedConnection();1356735495;Return the shared JMS Connection maintained by this container._Available after initialization._@return the shared Connection (never {@code null})_@throws IllegalStateException if this container does not maintain a_shared Connection, or if the Connection hasn't been initialized yet_@see #sharedConnectionEnabled();protected final Connection getSharedConnection() {_		if (!sharedConnectionEnabled()) {_			throw new IllegalStateException(_					"This listener container does not maintain a shared Connection")__		}_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				throw new SharedConnectionNotInitializedException(_						"This listener container's shared Connection has not been initialized yet")__			}_			return this.sharedConnection__		}_	};return,the,shared,jms,connection,maintained,by,this,container,available,after,initialization,return,the,shared,connection,never,code,null,throws,illegal,state,exception,if,this,container,does,not,maintain,a,shared,connection,or,if,the,connection,hasn,t,been,initialized,yet,see,shared,connection,enabled;protected,final,connection,get,shared,connection,if,shared,connection,enabled,throw,new,illegal,state,exception,this,listener,container,does,not,maintain,a,shared,connection,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,throw,new,shared,connection,not,initialized,exception,this,listener,container,s,shared,connection,has,not,been,initialized,yet,return,this,shared,connection
AbstractJmsListeningContainer -> protected final Connection getSharedConnection();1357119239;Return the shared JMS Connection maintained by this container._Available after initialization._@return the shared Connection (never {@code null})_@throws IllegalStateException if this container does not maintain a_shared Connection, or if the Connection hasn't been initialized yet_@see #sharedConnectionEnabled();protected final Connection getSharedConnection() {_		if (!sharedConnectionEnabled()) {_			throw new IllegalStateException(_					"This listener container does not maintain a shared Connection")__		}_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				throw new SharedConnectionNotInitializedException(_						"This listener container's shared Connection has not been initialized yet")__			}_			return this.sharedConnection__		}_	};return,the,shared,jms,connection,maintained,by,this,container,available,after,initialization,return,the,shared,connection,never,code,null,throws,illegal,state,exception,if,this,container,does,not,maintain,a,shared,connection,or,if,the,connection,hasn,t,been,initialized,yet,see,shared,connection,enabled;protected,final,connection,get,shared,connection,if,shared,connection,enabled,throw,new,illegal,state,exception,this,listener,container,does,not,maintain,a,shared,connection,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,throw,new,shared,connection,not,initialized,exception,this,listener,container,s,shared,connection,has,not,been,initialized,yet,return,this,shared,connection
AbstractJmsListeningContainer -> protected final Connection getSharedConnection();1368482696;Return the shared JMS Connection maintained by this container._Available after initialization._@return the shared Connection (never {@code null})_@throws IllegalStateException if this container does not maintain a_shared Connection, or if the Connection hasn't been initialized yet_@see #sharedConnectionEnabled();protected final Connection getSharedConnection() {_		if (!sharedConnectionEnabled()) {_			throw new IllegalStateException(_					"This listener container does not maintain a shared Connection")__		}_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				throw new SharedConnectionNotInitializedException(_						"This listener container's shared Connection has not been initialized yet")__			}_			return this.sharedConnection__		}_	};return,the,shared,jms,connection,maintained,by,this,container,available,after,initialization,return,the,shared,connection,never,code,null,throws,illegal,state,exception,if,this,container,does,not,maintain,a,shared,connection,or,if,the,connection,hasn,t,been,initialized,yet,see,shared,connection,enabled;protected,final,connection,get,shared,connection,if,shared,connection,enabled,throw,new,illegal,state,exception,this,listener,container,does,not,maintain,a,shared,connection,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,throw,new,shared,connection,not,initialized,exception,this,listener,container,s,shared,connection,has,not,been,initialized,yet,return,this,shared,connection
AbstractJmsListeningContainer -> protected final Connection getSharedConnection();1403791284;Return the shared JMS Connection maintained by this container._Available after initialization._@return the shared Connection (never {@code null})_@throws IllegalStateException if this container does not maintain a_shared Connection, or if the Connection hasn't been initialized yet_@see #sharedConnectionEnabled();protected final Connection getSharedConnection() {_		if (!sharedConnectionEnabled()) {_			throw new IllegalStateException(_					"This listener container does not maintain a shared Connection")__		}_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				throw new SharedConnectionNotInitializedException(_						"This listener container's shared Connection has not been initialized yet")__			}_			return this.sharedConnection__		}_	};return,the,shared,jms,connection,maintained,by,this,container,available,after,initialization,return,the,shared,connection,never,code,null,throws,illegal,state,exception,if,this,container,does,not,maintain,a,shared,connection,or,if,the,connection,hasn,t,been,initialized,yet,see,shared,connection,enabled;protected,final,connection,get,shared,connection,if,shared,connection,enabled,throw,new,illegal,state,exception,this,listener,container,does,not,maintain,a,shared,connection,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,throw,new,shared,connection,not,initialized,exception,this,listener,container,s,shared,connection,has,not,been,initialized,yet,return,this,shared,connection
AbstractJmsListeningContainer -> protected final Connection getSharedConnection();1462186904;Return the shared JMS Connection maintained by this container._Available after initialization._@return the shared Connection (never {@code null})_@throws IllegalStateException if this container does not maintain a_shared Connection, or if the Connection hasn't been initialized yet_@see #sharedConnectionEnabled();protected final Connection getSharedConnection() {_		if (!sharedConnectionEnabled()) {_			throw new IllegalStateException(_					"This listener container does not maintain a shared Connection")__		}_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				throw new SharedConnectionNotInitializedException(_						"This listener container's shared Connection has not been initialized yet")__			}_			return this.sharedConnection__		}_	};return,the,shared,jms,connection,maintained,by,this,container,available,after,initialization,return,the,shared,connection,never,code,null,throws,illegal,state,exception,if,this,container,does,not,maintain,a,shared,connection,or,if,the,connection,hasn,t,been,initialized,yet,see,shared,connection,enabled;protected,final,connection,get,shared,connection,if,shared,connection,enabled,throw,new,illegal,state,exception,this,listener,container,does,not,maintain,a,shared,connection,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,throw,new,shared,connection,not,initialized,exception,this,listener,container,s,shared,connection,has,not,been,initialized,yet,return,this,shared,connection
AbstractJmsListeningContainer -> protected final Connection getSharedConnection();1467730834;Return the shared JMS Connection maintained by this container._Available after initialization._@return the shared Connection (never {@code null})_@throws IllegalStateException if this container does not maintain a_shared Connection, or if the Connection hasn't been initialized yet_@see #sharedConnectionEnabled();protected final Connection getSharedConnection() {_		if (!sharedConnectionEnabled()) {_			throw new IllegalStateException(_					"This listener container does not maintain a shared Connection")__		}_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				throw new SharedConnectionNotInitializedException(_						"This listener container's shared Connection has not been initialized yet")__			}_			return this.sharedConnection__		}_	};return,the,shared,jms,connection,maintained,by,this,container,available,after,initialization,return,the,shared,connection,never,code,null,throws,illegal,state,exception,if,this,container,does,not,maintain,a,shared,connection,or,if,the,connection,hasn,t,been,initialized,yet,see,shared,connection,enabled;protected,final,connection,get,shared,connection,if,shared,connection,enabled,throw,new,illegal,state,exception,this,listener,container,does,not,maintain,a,shared,connection,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,throw,new,shared,connection,not,initialized,exception,this,listener,container,s,shared,connection,has,not,been,initialized,yet,return,this,shared,connection
AbstractJmsListeningContainer -> protected final Connection getSharedConnection();1495868221;Return the shared JMS Connection maintained by this container._Available after initialization._@return the shared Connection (never {@code null})_@throws IllegalStateException if this container does not maintain a_shared Connection, or if the Connection hasn't been initialized yet_@see #sharedConnectionEnabled();protected final Connection getSharedConnection() {_		if (!sharedConnectionEnabled()) {_			throw new IllegalStateException(_					"This listener container does not maintain a shared Connection")__		}_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				throw new SharedConnectionNotInitializedException(_						"This listener container's shared Connection has not been initialized yet")__			}_			return this.sharedConnection__		}_	};return,the,shared,jms,connection,maintained,by,this,container,available,after,initialization,return,the,shared,connection,never,code,null,throws,illegal,state,exception,if,this,container,does,not,maintain,a,shared,connection,or,if,the,connection,hasn,t,been,initialized,yet,see,shared,connection,enabled;protected,final,connection,get,shared,connection,if,shared,connection,enabled,throw,new,illegal,state,exception,this,listener,container,does,not,maintain,a,shared,connection,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,throw,new,shared,connection,not,initialized,exception,this,listener,container,s,shared,connection,has,not,been,initialized,yet,return,this,shared,connection
AbstractJmsListeningContainer -> protected final Connection getSharedConnection();1498780456;Return the shared JMS Connection maintained by this container._Available after initialization._@return the shared Connection (never {@code null})_@throws IllegalStateException if this container does not maintain a_shared Connection, or if the Connection hasn't been initialized yet_@see #sharedConnectionEnabled();protected final Connection getSharedConnection() {_		if (!sharedConnectionEnabled()) {_			throw new IllegalStateException(_					"This listener container does not maintain a shared Connection")__		}_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				throw new SharedConnectionNotInitializedException(_						"This listener container's shared Connection has not been initialized yet")__			}_			return this.sharedConnection__		}_	};return,the,shared,jms,connection,maintained,by,this,container,available,after,initialization,return,the,shared,connection,never,code,null,throws,illegal,state,exception,if,this,container,does,not,maintain,a,shared,connection,or,if,the,connection,hasn,t,been,initialized,yet,see,shared,connection,enabled;protected,final,connection,get,shared,connection,if,shared,connection,enabled,throw,new,illegal,state,exception,this,listener,container,does,not,maintain,a,shared,connection,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,throw,new,shared,connection,not,initialized,exception,this,listener,container,s,shared,connection,has,not,been,initialized,yet,return,this,shared,connection
AbstractJmsListeningContainer -> protected final Connection getSharedConnection();1500448076;Return the shared JMS Connection maintained by this container._Available after initialization._@return the shared Connection (never {@code null})_@throws IllegalStateException if this container does not maintain a_shared Connection, or if the Connection hasn't been initialized yet_@see #sharedConnectionEnabled();protected final Connection getSharedConnection() {_		if (!sharedConnectionEnabled()) {_			throw new IllegalStateException(_					"This listener container does not maintain a shared Connection")__		}_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				throw new SharedConnectionNotInitializedException(_						"This listener container's shared Connection has not been initialized yet")__			}_			return this.sharedConnection__		}_	};return,the,shared,jms,connection,maintained,by,this,container,available,after,initialization,return,the,shared,connection,never,code,null,throws,illegal,state,exception,if,this,container,does,not,maintain,a,shared,connection,or,if,the,connection,hasn,t,been,initialized,yet,see,shared,connection,enabled;protected,final,connection,get,shared,connection,if,shared,connection,enabled,throw,new,illegal,state,exception,this,listener,container,does,not,maintain,a,shared,connection,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,throw,new,shared,connection,not,initialized,exception,this,listener,container,s,shared,connection,has,not,been,initialized,yet,return,this,shared,connection
AbstractJmsListeningContainer -> protected final Connection getSharedConnection();1521123475;Return the shared JMS Connection maintained by this container._Available after initialization._@return the shared Connection (never {@code null})_@throws IllegalStateException if this container does not maintain a_shared Connection, or if the Connection hasn't been initialized yet_@see #sharedConnectionEnabled();protected final Connection getSharedConnection() {_		if (!sharedConnectionEnabled()) {_			throw new IllegalStateException(_					"This listener container does not maintain a shared Connection")__		}_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				throw new SharedConnectionNotInitializedException(_						"This listener container's shared Connection has not been initialized yet")__			}_			return this.sharedConnection__		}_	};return,the,shared,jms,connection,maintained,by,this,container,available,after,initialization,return,the,shared,connection,never,code,null,throws,illegal,state,exception,if,this,container,does,not,maintain,a,shared,connection,or,if,the,connection,hasn,t,been,initialized,yet,see,shared,connection,enabled;protected,final,connection,get,shared,connection,if,shared,connection,enabled,throw,new,illegal,state,exception,this,listener,container,does,not,maintain,a,shared,connection,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,throw,new,shared,connection,not,initialized,exception,this,listener,container,s,shared,connection,has,not,been,initialized,yet,return,this,shared,connection
AbstractJmsListeningContainer -> protected final Connection getSharedConnection();1534414082;Return the shared JMS Connection maintained by this container._Available after initialization._@return the shared Connection (never {@code null})_@throws IllegalStateException if this container does not maintain a_shared Connection, or if the Connection hasn't been initialized yet_@see #sharedConnectionEnabled();protected final Connection getSharedConnection() {_		if (!sharedConnectionEnabled()) {_			throw new IllegalStateException(_					"This listener container does not maintain a shared Connection")__		}_		synchronized (this.sharedConnectionMonitor) {_			if (this.sharedConnection == null) {_				throw new SharedConnectionNotInitializedException(_						"This listener container's shared Connection has not been initialized yet")__			}_			return this.sharedConnection__		}_	};return,the,shared,jms,connection,maintained,by,this,container,available,after,initialization,return,the,shared,connection,never,code,null,throws,illegal,state,exception,if,this,container,does,not,maintain,a,shared,connection,or,if,the,connection,hasn,t,been,initialized,yet,see,shared,connection,enabled;protected,final,connection,get,shared,connection,if,shared,connection,enabled,throw,new,illegal,state,exception,this,listener,container,does,not,maintain,a,shared,connection,synchronized,this,shared,connection,monitor,if,this,shared,connection,null,throw,new,shared,connection,not,initialized,exception,this,listener,container,s,shared,connection,has,not,been,initialized,yet,return,this,shared,connection
AbstractJmsListeningContainer -> protected abstract void doInitialize() throws JMSException_;1328020251;Register any invokers within this container._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will already have been_started at this point._@throws JMSException if registration failed_@see #getSharedConnection();protected abstract void doInitialize() throws JMSException_;register,any,invokers,within,this,container,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,already,have,been,started,at,this,point,throws,jmsexception,if,registration,failed,see,get,shared,connection;protected,abstract,void,do,initialize,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doInitialize() throws JMSException_;1355394580;Register any invokers within this container._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will already have been_started at this point._@throws JMSException if registration failed_@see #getSharedConnection();protected abstract void doInitialize() throws JMSException_;register,any,invokers,within,this,container,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,already,have,been,started,at,this,point,throws,jmsexception,if,registration,failed,see,get,shared,connection;protected,abstract,void,do,initialize,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doInitialize() throws JMSException_;1356735495;Register any invokers within this container._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will already have been_started at this point._@throws JMSException if registration failed_@see #getSharedConnection();protected abstract void doInitialize() throws JMSException_;register,any,invokers,within,this,container,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,already,have,been,started,at,this,point,throws,jmsexception,if,registration,failed,see,get,shared,connection;protected,abstract,void,do,initialize,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doInitialize() throws JMSException_;1357119239;Register any invokers within this container._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will already have been_started at this point._@throws JMSException if registration failed_@see #getSharedConnection();protected abstract void doInitialize() throws JMSException_;register,any,invokers,within,this,container,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,already,have,been,started,at,this,point,throws,jmsexception,if,registration,failed,see,get,shared,connection;protected,abstract,void,do,initialize,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doInitialize() throws JMSException_;1368482696;Register any invokers within this container._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will already have been_started at this point._@throws JMSException if registration failed_@see #getSharedConnection();protected abstract void doInitialize() throws JMSException_;register,any,invokers,within,this,container,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,already,have,been,started,at,this,point,throws,jmsexception,if,registration,failed,see,get,shared,connection;protected,abstract,void,do,initialize,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doInitialize() throws JMSException_;1403791284;Register any invokers within this container._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will already have been_started at this point._@throws JMSException if registration failed_@see #getSharedConnection();protected abstract void doInitialize() throws JMSException_;register,any,invokers,within,this,container,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,already,have,been,started,at,this,point,throws,jmsexception,if,registration,failed,see,get,shared,connection;protected,abstract,void,do,initialize,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doInitialize() throws JMSException_;1462186904;Register any invokers within this container._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will already have been_started at this point._@throws JMSException if registration failed_@see #getSharedConnection();protected abstract void doInitialize() throws JMSException_;register,any,invokers,within,this,container,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,already,have,been,started,at,this,point,throws,jmsexception,if,registration,failed,see,get,shared,connection;protected,abstract,void,do,initialize,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doInitialize() throws JMSException_;1467730834;Register any invokers within this container._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will already have been_started at this point._@throws JMSException if registration failed_@see #getSharedConnection();protected abstract void doInitialize() throws JMSException_;register,any,invokers,within,this,container,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,already,have,been,started,at,this,point,throws,jmsexception,if,registration,failed,see,get,shared,connection;protected,abstract,void,do,initialize,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doInitialize() throws JMSException_;1495868221;Register any invokers within this container._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will already have been_started at this point._@throws JMSException if registration failed_@see #getSharedConnection();protected abstract void doInitialize() throws JMSException_;register,any,invokers,within,this,container,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,already,have,been,started,at,this,point,throws,jmsexception,if,registration,failed,see,get,shared,connection;protected,abstract,void,do,initialize,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doInitialize() throws JMSException_;1498780456;Register any invokers within this container._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will already have been_started at this point._@throws JMSException if registration failed_@see #getSharedConnection();protected abstract void doInitialize() throws JMSException_;register,any,invokers,within,this,container,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,already,have,been,started,at,this,point,throws,jmsexception,if,registration,failed,see,get,shared,connection;protected,abstract,void,do,initialize,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doInitialize() throws JMSException_;1500448076;Register any invokers within this container._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will already have been_started at this point._@throws JMSException if registration failed_@see #getSharedConnection();protected abstract void doInitialize() throws JMSException_;register,any,invokers,within,this,container,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,already,have,been,started,at,this,point,throws,jmsexception,if,registration,failed,see,get,shared,connection;protected,abstract,void,do,initialize,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doInitialize() throws JMSException_;1521123475;Register any invokers within this container._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will already have been_started at this point._@throws JMSException if registration failed_@see #getSharedConnection();protected abstract void doInitialize() throws JMSException_;register,any,invokers,within,this,container,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,already,have,been,started,at,this,point,throws,jmsexception,if,registration,failed,see,get,shared,connection;protected,abstract,void,do,initialize,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doInitialize() throws JMSException_;1534414082;Register any invokers within this container._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will already have been_started at this point._@throws JMSException if registration failed_@see #getSharedConnection();protected abstract void doInitialize() throws JMSException_;register,any,invokers,within,this,container,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,already,have,been,started,at,this,point,throws,jmsexception,if,registration,failed,see,get,shared,connection;protected,abstract,void,do,initialize,throws,jmsexception
AbstractJmsListeningContainer -> protected Connection createSharedConnection() throws JMSException;1328020251;Create a shared Connection for this container._<p>The default implementation creates a standard Connection_and prepares it through {@link #prepareSharedConnection}._@return the prepared Connection_@throws JMSException if the creation failed;protected Connection createSharedConnection() throws JMSException {_		Connection con = createConnection()__		try {_			prepareSharedConnection(con)__			return con__		}_		catch (JMSException ex) {_			JmsUtils.closeConnection(con)__			throw ex__		}_	};create,a,shared,connection,for,this,container,p,the,default,implementation,creates,a,standard,connection,and,prepares,it,through,link,prepare,shared,connection,return,the,prepared,connection,throws,jmsexception,if,the,creation,failed;protected,connection,create,shared,connection,throws,jmsexception,connection,con,create,connection,try,prepare,shared,connection,con,return,con,catch,jmsexception,ex,jms,utils,close,connection,con,throw,ex
AbstractJmsListeningContainer -> protected Connection createSharedConnection() throws JMSException;1355394580;Create a shared Connection for this container._<p>The default implementation creates a standard Connection_and prepares it through {@link #prepareSharedConnection}._@return the prepared Connection_@throws JMSException if the creation failed;protected Connection createSharedConnection() throws JMSException {_		Connection con = createConnection()__		try {_			prepareSharedConnection(con)__			return con__		}_		catch (JMSException ex) {_			JmsUtils.closeConnection(con)__			throw ex__		}_	};create,a,shared,connection,for,this,container,p,the,default,implementation,creates,a,standard,connection,and,prepares,it,through,link,prepare,shared,connection,return,the,prepared,connection,throws,jmsexception,if,the,creation,failed;protected,connection,create,shared,connection,throws,jmsexception,connection,con,create,connection,try,prepare,shared,connection,con,return,con,catch,jmsexception,ex,jms,utils,close,connection,con,throw,ex
AbstractJmsListeningContainer -> protected Connection createSharedConnection() throws JMSException;1356735495;Create a shared Connection for this container._<p>The default implementation creates a standard Connection_and prepares it through {@link #prepareSharedConnection}._@return the prepared Connection_@throws JMSException if the creation failed;protected Connection createSharedConnection() throws JMSException {_		Connection con = createConnection()__		try {_			prepareSharedConnection(con)__			return con__		}_		catch (JMSException ex) {_			JmsUtils.closeConnection(con)__			throw ex__		}_	};create,a,shared,connection,for,this,container,p,the,default,implementation,creates,a,standard,connection,and,prepares,it,through,link,prepare,shared,connection,return,the,prepared,connection,throws,jmsexception,if,the,creation,failed;protected,connection,create,shared,connection,throws,jmsexception,connection,con,create,connection,try,prepare,shared,connection,con,return,con,catch,jmsexception,ex,jms,utils,close,connection,con,throw,ex
AbstractJmsListeningContainer -> protected Connection createSharedConnection() throws JMSException;1357119239;Create a shared Connection for this container._<p>The default implementation creates a standard Connection_and prepares it through {@link #prepareSharedConnection}._@return the prepared Connection_@throws JMSException if the creation failed;protected Connection createSharedConnection() throws JMSException {_		Connection con = createConnection()__		try {_			prepareSharedConnection(con)__			return con__		}_		catch (JMSException ex) {_			JmsUtils.closeConnection(con)__			throw ex__		}_	};create,a,shared,connection,for,this,container,p,the,default,implementation,creates,a,standard,connection,and,prepares,it,through,link,prepare,shared,connection,return,the,prepared,connection,throws,jmsexception,if,the,creation,failed;protected,connection,create,shared,connection,throws,jmsexception,connection,con,create,connection,try,prepare,shared,connection,con,return,con,catch,jmsexception,ex,jms,utils,close,connection,con,throw,ex
AbstractJmsListeningContainer -> protected Connection createSharedConnection() throws JMSException;1368482696;Create a shared Connection for this container._<p>The default implementation creates a standard Connection_and prepares it through {@link #prepareSharedConnection}._@return the prepared Connection_@throws JMSException if the creation failed;protected Connection createSharedConnection() throws JMSException {_		Connection con = createConnection()__		try {_			prepareSharedConnection(con)__			return con__		}_		catch (JMSException ex) {_			JmsUtils.closeConnection(con)__			throw ex__		}_	};create,a,shared,connection,for,this,container,p,the,default,implementation,creates,a,standard,connection,and,prepares,it,through,link,prepare,shared,connection,return,the,prepared,connection,throws,jmsexception,if,the,creation,failed;protected,connection,create,shared,connection,throws,jmsexception,connection,con,create,connection,try,prepare,shared,connection,con,return,con,catch,jmsexception,ex,jms,utils,close,connection,con,throw,ex
AbstractJmsListeningContainer -> protected Connection createSharedConnection() throws JMSException;1403791284;Create a shared Connection for this container._<p>The default implementation creates a standard Connection_and prepares it through {@link #prepareSharedConnection}._@return the prepared Connection_@throws JMSException if the creation failed;protected Connection createSharedConnection() throws JMSException {_		Connection con = createConnection()__		try {_			prepareSharedConnection(con)__			return con__		}_		catch (JMSException ex) {_			JmsUtils.closeConnection(con)__			throw ex__		}_	};create,a,shared,connection,for,this,container,p,the,default,implementation,creates,a,standard,connection,and,prepares,it,through,link,prepare,shared,connection,return,the,prepared,connection,throws,jmsexception,if,the,creation,failed;protected,connection,create,shared,connection,throws,jmsexception,connection,con,create,connection,try,prepare,shared,connection,con,return,con,catch,jmsexception,ex,jms,utils,close,connection,con,throw,ex
AbstractJmsListeningContainer -> protected Connection createSharedConnection() throws JMSException;1462186904;Create a shared Connection for this container._<p>The default implementation creates a standard Connection_and prepares it through {@link #prepareSharedConnection}._@return the prepared Connection_@throws JMSException if the creation failed;protected Connection createSharedConnection() throws JMSException {_		Connection con = createConnection()__		try {_			prepareSharedConnection(con)__			return con__		}_		catch (JMSException ex) {_			JmsUtils.closeConnection(con)__			throw ex__		}_	};create,a,shared,connection,for,this,container,p,the,default,implementation,creates,a,standard,connection,and,prepares,it,through,link,prepare,shared,connection,return,the,prepared,connection,throws,jmsexception,if,the,creation,failed;protected,connection,create,shared,connection,throws,jmsexception,connection,con,create,connection,try,prepare,shared,connection,con,return,con,catch,jmsexception,ex,jms,utils,close,connection,con,throw,ex
AbstractJmsListeningContainer -> protected Connection createSharedConnection() throws JMSException;1467730834;Create a shared Connection for this container._<p>The default implementation creates a standard Connection_and prepares it through {@link #prepareSharedConnection}._@return the prepared Connection_@throws JMSException if the creation failed;protected Connection createSharedConnection() throws JMSException {_		Connection con = createConnection()__		try {_			prepareSharedConnection(con)__			return con__		}_		catch (JMSException ex) {_			JmsUtils.closeConnection(con)__			throw ex__		}_	};create,a,shared,connection,for,this,container,p,the,default,implementation,creates,a,standard,connection,and,prepares,it,through,link,prepare,shared,connection,return,the,prepared,connection,throws,jmsexception,if,the,creation,failed;protected,connection,create,shared,connection,throws,jmsexception,connection,con,create,connection,try,prepare,shared,connection,con,return,con,catch,jmsexception,ex,jms,utils,close,connection,con,throw,ex
AbstractJmsListeningContainer -> protected Connection createSharedConnection() throws JMSException;1495868221;Create a shared Connection for this container._<p>The default implementation creates a standard Connection_and prepares it through {@link #prepareSharedConnection}._@return the prepared Connection_@throws JMSException if the creation failed;protected Connection createSharedConnection() throws JMSException {_		Connection con = createConnection()__		try {_			prepareSharedConnection(con)__			return con__		}_		catch (JMSException ex) {_			JmsUtils.closeConnection(con)__			throw ex__		}_	};create,a,shared,connection,for,this,container,p,the,default,implementation,creates,a,standard,connection,and,prepares,it,through,link,prepare,shared,connection,return,the,prepared,connection,throws,jmsexception,if,the,creation,failed;protected,connection,create,shared,connection,throws,jmsexception,connection,con,create,connection,try,prepare,shared,connection,con,return,con,catch,jmsexception,ex,jms,utils,close,connection,con,throw,ex
AbstractJmsListeningContainer -> protected Connection createSharedConnection() throws JMSException;1498780456;Create a shared Connection for this container._<p>The default implementation creates a standard Connection_and prepares it through {@link #prepareSharedConnection}._@return the prepared Connection_@throws JMSException if the creation failed;protected Connection createSharedConnection() throws JMSException {_		Connection con = createConnection()__		try {_			prepareSharedConnection(con)__			return con__		}_		catch (JMSException ex) {_			JmsUtils.closeConnection(con)__			throw ex__		}_	};create,a,shared,connection,for,this,container,p,the,default,implementation,creates,a,standard,connection,and,prepares,it,through,link,prepare,shared,connection,return,the,prepared,connection,throws,jmsexception,if,the,creation,failed;protected,connection,create,shared,connection,throws,jmsexception,connection,con,create,connection,try,prepare,shared,connection,con,return,con,catch,jmsexception,ex,jms,utils,close,connection,con,throw,ex
AbstractJmsListeningContainer -> protected Connection createSharedConnection() throws JMSException;1500448076;Create a shared Connection for this container._<p>The default implementation creates a standard Connection_and prepares it through {@link #prepareSharedConnection}._@return the prepared Connection_@throws JMSException if the creation failed;protected Connection createSharedConnection() throws JMSException {_		Connection con = createConnection()__		try {_			prepareSharedConnection(con)__			return con__		}_		catch (JMSException ex) {_			JmsUtils.closeConnection(con)__			throw ex__		}_	};create,a,shared,connection,for,this,container,p,the,default,implementation,creates,a,standard,connection,and,prepares,it,through,link,prepare,shared,connection,return,the,prepared,connection,throws,jmsexception,if,the,creation,failed;protected,connection,create,shared,connection,throws,jmsexception,connection,con,create,connection,try,prepare,shared,connection,con,return,con,catch,jmsexception,ex,jms,utils,close,connection,con,throw,ex
AbstractJmsListeningContainer -> protected Connection createSharedConnection() throws JMSException;1521123475;Create a shared Connection for this container._<p>The default implementation creates a standard Connection_and prepares it through {@link #prepareSharedConnection}._@return the prepared Connection_@throws JMSException if the creation failed;protected Connection createSharedConnection() throws JMSException {_		Connection con = createConnection()__		try {_			prepareSharedConnection(con)__			return con__		}_		catch (JMSException ex) {_			JmsUtils.closeConnection(con)__			throw ex__		}_	};create,a,shared,connection,for,this,container,p,the,default,implementation,creates,a,standard,connection,and,prepares,it,through,link,prepare,shared,connection,return,the,prepared,connection,throws,jmsexception,if,the,creation,failed;protected,connection,create,shared,connection,throws,jmsexception,connection,con,create,connection,try,prepare,shared,connection,con,return,con,catch,jmsexception,ex,jms,utils,close,connection,con,throw,ex
AbstractJmsListeningContainer -> protected Connection createSharedConnection() throws JMSException;1534414082;Create a shared Connection for this container._<p>The default implementation creates a standard Connection_and prepares it through {@link #prepareSharedConnection}._@return the prepared Connection_@throws JMSException if the creation failed;protected Connection createSharedConnection() throws JMSException {_		Connection con = createConnection()__		try {_			prepareSharedConnection(con)__			return con__		}_		catch (JMSException ex) {_			JmsUtils.closeConnection(con)__			throw ex__		}_	};create,a,shared,connection,for,this,container,p,the,default,implementation,creates,a,standard,connection,and,prepares,it,through,link,prepare,shared,connection,return,the,prepared,connection,throws,jmsexception,if,the,creation,failed;protected,connection,create,shared,connection,throws,jmsexception,connection,con,create,connection,try,prepare,shared,connection,con,return,con,catch,jmsexception,ex,jms,utils,close,connection,con,throw,ex
AbstractJmsListeningContainer -> public void initialize() throws JmsException;1328020251;Initialize this container._<p>Creates a JMS Connection, starts the {@link javax.jms.Connection}_(if {@link #setAutoStartup(boolean) "autoStartup"} hasn't been turned off),_and calls {@link #doInitialize()}._@throws org.springframework.jms.JmsException if startup failed;public void initialize() throws JmsException {_		try {_			synchronized (this.lifecycleMonitor) {_				this.active = true__				this.lifecycleMonitor.notifyAll()__			}_			doInitialize()__		}_		catch (JMSException ex) {_			synchronized (this.sharedConnectionMonitor) {_				ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), this.autoStartup)__				this.sharedConnection = null__			}_			throw convertJmsAccessException(ex)__		}_	};initialize,this,container,p,creates,a,jms,connection,starts,the,link,javax,jms,connection,if,link,set,auto,startup,boolean,auto,startup,hasn,t,been,turned,off,and,calls,link,do,initialize,throws,org,springframework,jms,jms,exception,if,startup,failed;public,void,initialize,throws,jms,exception,try,synchronized,this,lifecycle,monitor,this,active,true,this,lifecycle,monitor,notify,all,do,initialize,catch,jmsexception,ex,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,auto,startup,this,shared,connection,null,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void initialize() throws JmsException;1355394580;Initialize this container._<p>Creates a JMS Connection, starts the {@link javax.jms.Connection}_(if {@link #setAutoStartup(boolean) "autoStartup"} hasn't been turned off),_and calls {@link #doInitialize()}._@throws org.springframework.jms.JmsException if startup failed;public void initialize() throws JmsException {_		try {_			synchronized (this.lifecycleMonitor) {_				this.active = true__				this.lifecycleMonitor.notifyAll()__			}_			doInitialize()__		}_		catch (JMSException ex) {_			synchronized (this.sharedConnectionMonitor) {_				ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), this.autoStartup)__				this.sharedConnection = null__			}_			throw convertJmsAccessException(ex)__		}_	};initialize,this,container,p,creates,a,jms,connection,starts,the,link,javax,jms,connection,if,link,set,auto,startup,boolean,auto,startup,hasn,t,been,turned,off,and,calls,link,do,initialize,throws,org,springframework,jms,jms,exception,if,startup,failed;public,void,initialize,throws,jms,exception,try,synchronized,this,lifecycle,monitor,this,active,true,this,lifecycle,monitor,notify,all,do,initialize,catch,jmsexception,ex,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,auto,startup,this,shared,connection,null,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void initialize() throws JmsException;1356735495;Initialize this container._<p>Creates a JMS Connection, starts the {@link javax.jms.Connection}_(if {@link #setAutoStartup(boolean) "autoStartup"} hasn't been turned off),_and calls {@link #doInitialize()}._@throws org.springframework.jms.JmsException if startup failed;public void initialize() throws JmsException {_		try {_			synchronized (this.lifecycleMonitor) {_				this.active = true__				this.lifecycleMonitor.notifyAll()__			}_			doInitialize()__		}_		catch (JMSException ex) {_			synchronized (this.sharedConnectionMonitor) {_				ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), this.autoStartup)__				this.sharedConnection = null__			}_			throw convertJmsAccessException(ex)__		}_	};initialize,this,container,p,creates,a,jms,connection,starts,the,link,javax,jms,connection,if,link,set,auto,startup,boolean,auto,startup,hasn,t,been,turned,off,and,calls,link,do,initialize,throws,org,springframework,jms,jms,exception,if,startup,failed;public,void,initialize,throws,jms,exception,try,synchronized,this,lifecycle,monitor,this,active,true,this,lifecycle,monitor,notify,all,do,initialize,catch,jmsexception,ex,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,auto,startup,this,shared,connection,null,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void initialize() throws JmsException;1357119239;Initialize this container._<p>Creates a JMS Connection, starts the {@link javax.jms.Connection}_(if {@link #setAutoStartup(boolean) "autoStartup"} hasn't been turned off),_and calls {@link #doInitialize()}._@throws org.springframework.jms.JmsException if startup failed;public void initialize() throws JmsException {_		try {_			synchronized (this.lifecycleMonitor) {_				this.active = true__				this.lifecycleMonitor.notifyAll()__			}_			doInitialize()__		}_		catch (JMSException ex) {_			synchronized (this.sharedConnectionMonitor) {_				ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), this.autoStartup)__				this.sharedConnection = null__			}_			throw convertJmsAccessException(ex)__		}_	};initialize,this,container,p,creates,a,jms,connection,starts,the,link,javax,jms,connection,if,link,set,auto,startup,boolean,auto,startup,hasn,t,been,turned,off,and,calls,link,do,initialize,throws,org,springframework,jms,jms,exception,if,startup,failed;public,void,initialize,throws,jms,exception,try,synchronized,this,lifecycle,monitor,this,active,true,this,lifecycle,monitor,notify,all,do,initialize,catch,jmsexception,ex,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,auto,startup,this,shared,connection,null,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void initialize() throws JmsException;1368482696;Initialize this container._<p>Creates a JMS Connection, starts the {@link javax.jms.Connection}_(if {@link #setAutoStartup(boolean) "autoStartup"} hasn't been turned off),_and calls {@link #doInitialize()}._@throws org.springframework.jms.JmsException if startup failed;public void initialize() throws JmsException {_		try {_			synchronized (this.lifecycleMonitor) {_				this.active = true__				this.lifecycleMonitor.notifyAll()__			}_			doInitialize()__		}_		catch (JMSException ex) {_			synchronized (this.sharedConnectionMonitor) {_				ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), this.autoStartup)__				this.sharedConnection = null__			}_			throw convertJmsAccessException(ex)__		}_	};initialize,this,container,p,creates,a,jms,connection,starts,the,link,javax,jms,connection,if,link,set,auto,startup,boolean,auto,startup,hasn,t,been,turned,off,and,calls,link,do,initialize,throws,org,springframework,jms,jms,exception,if,startup,failed;public,void,initialize,throws,jms,exception,try,synchronized,this,lifecycle,monitor,this,active,true,this,lifecycle,monitor,notify,all,do,initialize,catch,jmsexception,ex,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,auto,startup,this,shared,connection,null,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void initialize() throws JmsException;1403791284;Initialize this container._<p>Creates a JMS Connection, starts the {@link javax.jms.Connection}_(if {@link #setAutoStartup(boolean) "autoStartup"} hasn't been turned off),_and calls {@link #doInitialize()}._@throws org.springframework.jms.JmsException if startup failed;public void initialize() throws JmsException {_		try {_			synchronized (this.lifecycleMonitor) {_				this.active = true__				this.lifecycleMonitor.notifyAll()__			}_			doInitialize()__		}_		catch (JMSException ex) {_			synchronized (this.sharedConnectionMonitor) {_				ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), this.autoStartup)__				this.sharedConnection = null__			}_			throw convertJmsAccessException(ex)__		}_	};initialize,this,container,p,creates,a,jms,connection,starts,the,link,javax,jms,connection,if,link,set,auto,startup,boolean,auto,startup,hasn,t,been,turned,off,and,calls,link,do,initialize,throws,org,springframework,jms,jms,exception,if,startup,failed;public,void,initialize,throws,jms,exception,try,synchronized,this,lifecycle,monitor,this,active,true,this,lifecycle,monitor,notify,all,do,initialize,catch,jmsexception,ex,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,auto,startup,this,shared,connection,null,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void initialize() throws JmsException;1462186904;Initialize this container._<p>Creates a JMS Connection, starts the {@link javax.jms.Connection}_(if {@link #setAutoStartup(boolean) "autoStartup"} hasn't been turned off),_and calls {@link #doInitialize()}._@throws org.springframework.jms.JmsException if startup failed;public void initialize() throws JmsException {_		try {_			synchronized (this.lifecycleMonitor) {_				this.active = true__				this.lifecycleMonitor.notifyAll()__			}_			doInitialize()__		}_		catch (JMSException ex) {_			synchronized (this.sharedConnectionMonitor) {_				ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), this.autoStartup)__				this.sharedConnection = null__			}_			throw convertJmsAccessException(ex)__		}_	};initialize,this,container,p,creates,a,jms,connection,starts,the,link,javax,jms,connection,if,link,set,auto,startup,boolean,auto,startup,hasn,t,been,turned,off,and,calls,link,do,initialize,throws,org,springframework,jms,jms,exception,if,startup,failed;public,void,initialize,throws,jms,exception,try,synchronized,this,lifecycle,monitor,this,active,true,this,lifecycle,monitor,notify,all,do,initialize,catch,jmsexception,ex,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,auto,startup,this,shared,connection,null,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void initialize() throws JmsException;1467730834;Initialize this container._<p>Creates a JMS Connection, starts the {@link javax.jms.Connection}_(if {@link #setAutoStartup(boolean) "autoStartup"} hasn't been turned off),_and calls {@link #doInitialize()}._@throws org.springframework.jms.JmsException if startup failed;public void initialize() throws JmsException {_		try {_			synchronized (this.lifecycleMonitor) {_				this.active = true__				this.lifecycleMonitor.notifyAll()__			}_			doInitialize()__		}_		catch (JMSException ex) {_			synchronized (this.sharedConnectionMonitor) {_				ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), this.autoStartup)__				this.sharedConnection = null__			}_			throw convertJmsAccessException(ex)__		}_	};initialize,this,container,p,creates,a,jms,connection,starts,the,link,javax,jms,connection,if,link,set,auto,startup,boolean,auto,startup,hasn,t,been,turned,off,and,calls,link,do,initialize,throws,org,springframework,jms,jms,exception,if,startup,failed;public,void,initialize,throws,jms,exception,try,synchronized,this,lifecycle,monitor,this,active,true,this,lifecycle,monitor,notify,all,do,initialize,catch,jmsexception,ex,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,auto,startup,this,shared,connection,null,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void initialize() throws JmsException;1495868221;Initialize this container._<p>Creates a JMS Connection, starts the {@link javax.jms.Connection}_(if {@link #setAutoStartup(boolean) "autoStartup"} hasn't been turned off),_and calls {@link #doInitialize()}._@throws org.springframework.jms.JmsException if startup failed;public void initialize() throws JmsException {_		try {_			synchronized (this.lifecycleMonitor) {_				this.active = true__				this.lifecycleMonitor.notifyAll()__			}_			doInitialize()__		}_		catch (JMSException ex) {_			synchronized (this.sharedConnectionMonitor) {_				ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), this.autoStartup)__				this.sharedConnection = null__			}_			throw convertJmsAccessException(ex)__		}_	};initialize,this,container,p,creates,a,jms,connection,starts,the,link,javax,jms,connection,if,link,set,auto,startup,boolean,auto,startup,hasn,t,been,turned,off,and,calls,link,do,initialize,throws,org,springframework,jms,jms,exception,if,startup,failed;public,void,initialize,throws,jms,exception,try,synchronized,this,lifecycle,monitor,this,active,true,this,lifecycle,monitor,notify,all,do,initialize,catch,jmsexception,ex,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,auto,startup,this,shared,connection,null,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void initialize() throws JmsException;1498780456;Initialize this container._<p>Creates a JMS Connection, starts the {@link javax.jms.Connection}_(if {@link #setAutoStartup(boolean) "autoStartup"} hasn't been turned off),_and calls {@link #doInitialize()}._@throws org.springframework.jms.JmsException if startup failed;public void initialize() throws JmsException {_		try {_			synchronized (this.lifecycleMonitor) {_				this.active = true__				this.lifecycleMonitor.notifyAll()__			}_			doInitialize()__		}_		catch (JMSException ex) {_			synchronized (this.sharedConnectionMonitor) {_				ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), this.autoStartup)__				this.sharedConnection = null__			}_			throw convertJmsAccessException(ex)__		}_	};initialize,this,container,p,creates,a,jms,connection,starts,the,link,javax,jms,connection,if,link,set,auto,startup,boolean,auto,startup,hasn,t,been,turned,off,and,calls,link,do,initialize,throws,org,springframework,jms,jms,exception,if,startup,failed;public,void,initialize,throws,jms,exception,try,synchronized,this,lifecycle,monitor,this,active,true,this,lifecycle,monitor,notify,all,do,initialize,catch,jmsexception,ex,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,auto,startup,this,shared,connection,null,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void initialize() throws JmsException;1500448076;Initialize this container._<p>Creates a JMS Connection, starts the {@link javax.jms.Connection}_(if {@link #setAutoStartup(boolean) "autoStartup"} hasn't been turned off),_and calls {@link #doInitialize()}._@throws org.springframework.jms.JmsException if startup failed;public void initialize() throws JmsException {_		try {_			synchronized (this.lifecycleMonitor) {_				this.active = true__				this.lifecycleMonitor.notifyAll()__			}_			doInitialize()__		}_		catch (JMSException ex) {_			synchronized (this.sharedConnectionMonitor) {_				ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), this.autoStartup)__				this.sharedConnection = null__			}_			throw convertJmsAccessException(ex)__		}_	};initialize,this,container,p,creates,a,jms,connection,starts,the,link,javax,jms,connection,if,link,set,auto,startup,boolean,auto,startup,hasn,t,been,turned,off,and,calls,link,do,initialize,throws,org,springframework,jms,jms,exception,if,startup,failed;public,void,initialize,throws,jms,exception,try,synchronized,this,lifecycle,monitor,this,active,true,this,lifecycle,monitor,notify,all,do,initialize,catch,jmsexception,ex,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,auto,startup,this,shared,connection,null,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void initialize() throws JmsException;1521123475;Initialize this container._<p>Creates a JMS Connection, starts the {@link javax.jms.Connection}_(if {@link #setAutoStartup(boolean) "autoStartup"} hasn't been turned off),_and calls {@link #doInitialize()}._@throws org.springframework.jms.JmsException if startup failed;public void initialize() throws JmsException {_		try {_			synchronized (this.lifecycleMonitor) {_				this.active = true__				this.lifecycleMonitor.notifyAll()__			}_			doInitialize()__		}_		catch (JMSException ex) {_			synchronized (this.sharedConnectionMonitor) {_				ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), this.autoStartup)__				this.sharedConnection = null__			}_			throw convertJmsAccessException(ex)__		}_	};initialize,this,container,p,creates,a,jms,connection,starts,the,link,javax,jms,connection,if,link,set,auto,startup,boolean,auto,startup,hasn,t,been,turned,off,and,calls,link,do,initialize,throws,org,springframework,jms,jms,exception,if,startup,failed;public,void,initialize,throws,jms,exception,try,synchronized,this,lifecycle,monitor,this,active,true,this,lifecycle,monitor,notify,all,do,initialize,catch,jmsexception,ex,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,auto,startup,this,shared,connection,null,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void initialize() throws JmsException;1534414082;Initialize this container._<p>Creates a JMS Connection, starts the {@link javax.jms.Connection}_(if {@link #setAutoStartup(boolean) "autoStartup"} hasn't been turned off),_and calls {@link #doInitialize()}._@throws org.springframework.jms.JmsException if startup failed;public void initialize() throws JmsException {_		try {_			synchronized (this.lifecycleMonitor) {_				this.active = true__				this.lifecycleMonitor.notifyAll()__			}_			doInitialize()__		}_		catch (JMSException ex) {_			synchronized (this.sharedConnectionMonitor) {_				ConnectionFactoryUtils.releaseConnection(this.sharedConnection, getConnectionFactory(), this.autoStartup)__				this.sharedConnection = null__			}_			throw convertJmsAccessException(ex)__		}_	};initialize,this,container,p,creates,a,jms,connection,starts,the,link,javax,jms,connection,if,link,set,auto,startup,boolean,auto,startup,hasn,t,been,turned,off,and,calls,link,do,initialize,throws,org,springframework,jms,jms,exception,if,startup,failed;public,void,initialize,throws,jms,exception,try,synchronized,this,lifecycle,monitor,this,active,true,this,lifecycle,monitor,notify,all,do,initialize,catch,jmsexception,ex,synchronized,this,shared,connection,monitor,connection,factory,utils,release,connection,this,shared,connection,get,connection,factory,this,auto,startup,this,shared,connection,null,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> protected final String getBeanName();1328020251;Return the bean name that this listener container has been assigned_in its containing bean factory, if any.;protected final String getBeanName() {_		return this.beanName__	};return,the,bean,name,that,this,listener,container,has,been,assigned,in,its,containing,bean,factory,if,any;protected,final,string,get,bean,name,return,this,bean,name
AbstractJmsListeningContainer -> protected final String getBeanName();1355394580;Return the bean name that this listener container has been assigned_in its containing bean factory, if any.;protected final String getBeanName() {_		return this.beanName__	};return,the,bean,name,that,this,listener,container,has,been,assigned,in,its,containing,bean,factory,if,any;protected,final,string,get,bean,name,return,this,bean,name
AbstractJmsListeningContainer -> protected final String getBeanName();1356735495;Return the bean name that this listener container has been assigned_in its containing bean factory, if any.;protected final String getBeanName() {_		return this.beanName__	};return,the,bean,name,that,this,listener,container,has,been,assigned,in,its,containing,bean,factory,if,any;protected,final,string,get,bean,name,return,this,bean,name
AbstractJmsListeningContainer -> protected final String getBeanName();1357119239;Return the bean name that this listener container has been assigned_in its containing bean factory, if any.;protected final String getBeanName() {_		return this.beanName__	};return,the,bean,name,that,this,listener,container,has,been,assigned,in,its,containing,bean,factory,if,any;protected,final,string,get,bean,name,return,this,bean,name
AbstractJmsListeningContainer -> protected final String getBeanName();1368482696;Return the bean name that this listener container has been assigned_in its containing bean factory, if any.;protected final String getBeanName() {_		return this.beanName__	};return,the,bean,name,that,this,listener,container,has,been,assigned,in,its,containing,bean,factory,if,any;protected,final,string,get,bean,name,return,this,bean,name
AbstractJmsListeningContainer -> protected final String getBeanName();1403791284;Return the bean name that this listener container has been assigned_in its containing bean factory, if any.;protected final String getBeanName() {_		return this.beanName__	};return,the,bean,name,that,this,listener,container,has,been,assigned,in,its,containing,bean,factory,if,any;protected,final,string,get,bean,name,return,this,bean,name
AbstractJmsListeningContainer -> protected final String getBeanName();1462186904;Return the bean name that this listener container has been assigned_in its containing bean factory, if any.;protected final String getBeanName() {_		return this.beanName__	};return,the,bean,name,that,this,listener,container,has,been,assigned,in,its,containing,bean,factory,if,any;protected,final,string,get,bean,name,return,this,bean,name
AbstractJmsListeningContainer -> protected final String getBeanName();1467730834;Return the bean name that this listener container has been assigned_in its containing bean factory, if any.;protected final String getBeanName() {_		return this.beanName__	};return,the,bean,name,that,this,listener,container,has,been,assigned,in,its,containing,bean,factory,if,any;protected,final,string,get,bean,name,return,this,bean,name
AbstractJmsListeningContainer -> public void setAutoStartup(boolean autoStartup);1328020251;Set whether to automatically start the container after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup_through the {@link #start()} method.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,container,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup,through,the,link,start,method;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
AbstractJmsListeningContainer -> public void setAutoStartup(boolean autoStartup);1355394580;Set whether to automatically start the container after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup_through the {@link #start()} method.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,container,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup,through,the,link,start,method;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
AbstractJmsListeningContainer -> public void setAutoStartup(boolean autoStartup);1356735495;Set whether to automatically start the container after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup_through the {@link #start()} method.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,container,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup,through,the,link,start,method;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
AbstractJmsListeningContainer -> public void setAutoStartup(boolean autoStartup);1357119239;Set whether to automatically start the container after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup_through the {@link #start()} method.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,container,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup,through,the,link,start,method;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
AbstractJmsListeningContainer -> public void setAutoStartup(boolean autoStartup);1368482696;Set whether to automatically start the container after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup_through the {@link #start()} method.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,container,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup,through,the,link,start,method;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
AbstractJmsListeningContainer -> public void setAutoStartup(boolean autoStartup);1403791284;Set whether to automatically start the container after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup_through the {@link #start()} method.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,container,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup,through,the,link,start,method;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
AbstractJmsListeningContainer -> public void setAutoStartup(boolean autoStartup);1462186904;Set whether to automatically start the container after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup_through the {@link #start()} method.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,container,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup,through,the,link,start,method;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
AbstractJmsListeningContainer -> public void setAutoStartup(boolean autoStartup);1467730834;Set whether to automatically start the container after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup_through the {@link #start()} method.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,container,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup,through,the,link,start,method;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
AbstractJmsListeningContainer -> public void setAutoStartup(boolean autoStartup);1495868221;Set whether to automatically start the container after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup_through the {@link #start()} method.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,container,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup,through,the,link,start,method;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
AbstractJmsListeningContainer -> public void setAutoStartup(boolean autoStartup);1498780456;Set whether to automatically start the container after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup_through the {@link #start()} method.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,container,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup,through,the,link,start,method;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
AbstractJmsListeningContainer -> public void setAutoStartup(boolean autoStartup);1500448076;Set whether to automatically start the container after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup_through the {@link #start()} method.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,container,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup,through,the,link,start,method;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
AbstractJmsListeningContainer -> public void setAutoStartup(boolean autoStartup);1521123475;Set whether to automatically start the container after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup_through the {@link #start()} method.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,container,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup,through,the,link,start,method;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
AbstractJmsListeningContainer -> public void setAutoStartup(boolean autoStartup);1534414082;Set whether to automatically start the container after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup_through the {@link #start()} method.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,container,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup,through,the,link,start,method;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
AbstractJmsListeningContainer -> protected void stopSharedConnection() throws JMSException;1328020251;Stop the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void stopSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = false__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.stop()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection stop exception - assuming already stopped: " + ex)__				}_			}_		}_	};stop,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,stop,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,false,if,this,shared,connection,null,try,this,shared,connection,stop,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,stop,exception,assuming,already,stopped,ex
AbstractJmsListeningContainer -> protected void stopSharedConnection() throws JMSException;1355394580;Stop the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void stopSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = false__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.stop()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection stop exception - assuming already stopped: " + ex)__				}_			}_		}_	};stop,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,stop,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,false,if,this,shared,connection,null,try,this,shared,connection,stop,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,stop,exception,assuming,already,stopped,ex
AbstractJmsListeningContainer -> protected void stopSharedConnection() throws JMSException;1356735495;Stop the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void stopSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = false__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.stop()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection stop exception - assuming already stopped: " + ex)__				}_			}_		}_	};stop,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,stop,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,false,if,this,shared,connection,null,try,this,shared,connection,stop,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,stop,exception,assuming,already,stopped,ex
AbstractJmsListeningContainer -> protected void stopSharedConnection() throws JMSException;1357119239;Stop the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void stopSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = false__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.stop()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection stop exception - assuming already stopped: " + ex)__				}_			}_		}_	};stop,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,stop,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,false,if,this,shared,connection,null,try,this,shared,connection,stop,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,stop,exception,assuming,already,stopped,ex
AbstractJmsListeningContainer -> protected void stopSharedConnection() throws JMSException;1368482696;Stop the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void stopSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = false__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.stop()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection stop exception - assuming already stopped: " + ex)__				}_			}_		}_	};stop,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,stop,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,false,if,this,shared,connection,null,try,this,shared,connection,stop,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,stop,exception,assuming,already,stopped,ex
AbstractJmsListeningContainer -> protected void stopSharedConnection() throws JMSException;1403791284;Stop the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void stopSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = false__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.stop()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection stop exception - assuming already stopped: " + ex)__				}_			}_		}_	};stop,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,stop,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,false,if,this,shared,connection,null,try,this,shared,connection,stop,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,stop,exception,assuming,already,stopped,ex
AbstractJmsListeningContainer -> protected void stopSharedConnection() throws JMSException;1462186904;Stop the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void stopSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = false__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.stop()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection stop exception - assuming already stopped: " + ex)__				}_			}_		}_	};stop,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,stop,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,false,if,this,shared,connection,null,try,this,shared,connection,stop,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,stop,exception,assuming,already,stopped,ex
AbstractJmsListeningContainer -> protected void stopSharedConnection() throws JMSException;1467730834;Stop the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void stopSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = false__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.stop()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection stop exception - assuming already stopped: " + ex)__				}_			}_		}_	};stop,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,stop,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,false,if,this,shared,connection,null,try,this,shared,connection,stop,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,stop,exception,assuming,already,stopped,ex
AbstractJmsListeningContainer -> protected void stopSharedConnection() throws JMSException;1495868221;Stop the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void stopSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = false__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.stop()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection stop exception - assuming already stopped: " + ex)__				}_			}_		}_	};stop,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,stop,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,false,if,this,shared,connection,null,try,this,shared,connection,stop,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,stop,exception,assuming,already,stopped,ex
AbstractJmsListeningContainer -> protected void stopSharedConnection() throws JMSException;1498780456;Stop the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void stopSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = false__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.stop()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection stop exception - assuming already stopped: " + ex)__				}_			}_		}_	};stop,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,stop,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,false,if,this,shared,connection,null,try,this,shared,connection,stop,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,stop,exception,assuming,already,stopped,ex
AbstractJmsListeningContainer -> protected void stopSharedConnection() throws JMSException;1500448076;Stop the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void stopSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = false__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.stop()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection stop exception - assuming already stopped: " + ex)__				}_			}_		}_	};stop,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,stop,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,false,if,this,shared,connection,null,try,this,shared,connection,stop,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,stop,exception,assuming,already,stopped,ex
AbstractJmsListeningContainer -> protected void stopSharedConnection() throws JMSException;1521123475;Stop the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void stopSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = false__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.stop()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection stop exception - assuming already stopped: " + ex)__				}_			}_		}_	};stop,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,stop,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,false,if,this,shared,connection,null,try,this,shared,connection,stop,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,stop,exception,assuming,already,stopped,ex
AbstractJmsListeningContainer -> protected void stopSharedConnection() throws JMSException;1534414082;Stop the shared Connection._@throws JMSException if thrown by JMS API methods_@see javax.jms.Connection#start();protected void stopSharedConnection() throws JMSException {_		synchronized (this.sharedConnectionMonitor) {_			this.sharedConnectionStarted = false__			if (this.sharedConnection != null) {_				try {_					this.sharedConnection.stop()__				}_				catch (javax.jms.IllegalStateException ex) {_					logger.debug("Ignoring Connection stop exception - assuming already stopped: " + ex)__				}_			}_		}_	};stop,the,shared,connection,throws,jmsexception,if,thrown,by,jms,api,methods,see,javax,jms,connection,start;protected,void,stop,shared,connection,throws,jmsexception,synchronized,this,shared,connection,monitor,this,shared,connection,started,false,if,this,shared,connection,null,try,this,shared,connection,stop,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,stop,exception,assuming,already,stopped,ex
AbstractJmsListeningContainer -> @Override 	public void start() throws JmsException;1356735495;Start this container._@throws JmsException if starting failed_@see #doStart;@Override_	public void start() throws JmsException {_		try {_			doStart()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};start,this,container,throws,jms,exception,if,starting,failed,see,do,start;override,public,void,start,throws,jms,exception,try,do,start,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void start() throws JmsException;1368482696;Start this container._@throws JmsException if starting failed_@see #doStart;@Override_	public void start() throws JmsException {_		try {_			doStart()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};start,this,container,throws,jms,exception,if,starting,failed,see,do,start;override,public,void,start,throws,jms,exception,try,do,start,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void start() throws JmsException;1403791284;Start this container._@throws JmsException if starting failed_@see #doStart;@Override_	public void start() throws JmsException {_		try {_			doStart()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};start,this,container,throws,jms,exception,if,starting,failed,see,do,start;override,public,void,start,throws,jms,exception,try,do,start,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void start() throws JmsException;1462186904;Start this container._@throws JmsException if starting failed_@see #doStart;@Override_	public void start() throws JmsException {_		try {_			doStart()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};start,this,container,throws,jms,exception,if,starting,failed,see,do,start;override,public,void,start,throws,jms,exception,try,do,start,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void start() throws JmsException;1467730834;Start this container._@throws JmsException if starting failed_@see #doStart;@Override_	public void start() throws JmsException {_		try {_			doStart()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};start,this,container,throws,jms,exception,if,starting,failed,see,do,start;override,public,void,start,throws,jms,exception,try,do,start,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void start() throws JmsException;1495868221;Start this container._@throws JmsException if starting failed_@see #doStart;@Override_	public void start() throws JmsException {_		try {_			doStart()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};start,this,container,throws,jms,exception,if,starting,failed,see,do,start;override,public,void,start,throws,jms,exception,try,do,start,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void start() throws JmsException;1498780456;Start this container._@throws JmsException if starting failed_@see #doStart;@Override_	public void start() throws JmsException {_		try {_			doStart()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};start,this,container,throws,jms,exception,if,starting,failed,see,do,start;override,public,void,start,throws,jms,exception,try,do,start,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void start() throws JmsException;1500448076;Start this container._@throws JmsException if starting failed_@see #doStart;@Override_	public void start() throws JmsException {_		try {_			doStart()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};start,this,container,throws,jms,exception,if,starting,failed,see,do,start;override,public,void,start,throws,jms,exception,try,do,start,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void start() throws JmsException;1521123475;Start this container._@throws JmsException if starting failed_@see #doStart;@Override_	public void start() throws JmsException {_		try {_			doStart()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};start,this,container,throws,jms,exception,if,starting,failed,see,do,start;override,public,void,start,throws,jms,exception,try,do,start,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> @Override 	public void start() throws JmsException;1534414082;Start this container._@throws JmsException if starting failed_@see #doStart;@Override_	public void start() throws JmsException {_		try {_			doStart()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};start,this,container,throws,jms,exception,if,starting,failed,see,do,start;override,public,void,start,throws,jms,exception,try,do,start,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void destroy();1328020251;Calls {@link #shutdown()} when the BeanFactory destroys the container instance._@see #shutdown();public void destroy() {_		shutdown()__	};calls,link,shutdown,when,the,bean,factory,destroys,the,container,instance,see,shutdown;public,void,destroy,shutdown
AbstractJmsListeningContainer -> public void destroy();1355394580;Calls {@link #shutdown()} when the BeanFactory destroys the container instance._@see #shutdown();public void destroy() {_		shutdown()__	};calls,link,shutdown,when,the,bean,factory,destroys,the,container,instance,see,shutdown;public,void,destroy,shutdown
AbstractJmsListeningContainer -> public void destroy();1357119239;Calls {@link #shutdown()} when the BeanFactory destroys the container instance._@see #shutdown();public void destroy() {_		shutdown()__	};calls,link,shutdown,when,the,bean,factory,destroys,the,container,instance,see,shutdown;public,void,destroy,shutdown
AbstractJmsListeningContainer -> protected void prepareSharedConnection(Connection connection) throws JMSException;1328020251;Prepare the given Connection, which is about to be registered_as shared Connection for this container._<p>The default implementation sets the specified client id, if any._Subclasses can override this to apply further settings._@param connection the Connection to prepare_@throws JMSException if the preparation efforts failed_@see #getClientId();protected void prepareSharedConnection(Connection connection) throws JMSException {_		String clientId = getClientId()__		if (clientId != null) {_			connection.setClientID(clientId)__		}_	};prepare,the,given,connection,which,is,about,to,be,registered,as,shared,connection,for,this,container,p,the,default,implementation,sets,the,specified,client,id,if,any,subclasses,can,override,this,to,apply,further,settings,param,connection,the,connection,to,prepare,throws,jmsexception,if,the,preparation,efforts,failed,see,get,client,id;protected,void,prepare,shared,connection,connection,connection,throws,jmsexception,string,client,id,get,client,id,if,client,id,null,connection,set,client,id,client,id
AbstractJmsListeningContainer -> protected void prepareSharedConnection(Connection connection) throws JMSException;1355394580;Prepare the given Connection, which is about to be registered_as shared Connection for this container._<p>The default implementation sets the specified client id, if any._Subclasses can override this to apply further settings._@param connection the Connection to prepare_@throws JMSException if the preparation efforts failed_@see #getClientId();protected void prepareSharedConnection(Connection connection) throws JMSException {_		String clientId = getClientId()__		if (clientId != null) {_			connection.setClientID(clientId)__		}_	};prepare,the,given,connection,which,is,about,to,be,registered,as,shared,connection,for,this,container,p,the,default,implementation,sets,the,specified,client,id,if,any,subclasses,can,override,this,to,apply,further,settings,param,connection,the,connection,to,prepare,throws,jmsexception,if,the,preparation,efforts,failed,see,get,client,id;protected,void,prepare,shared,connection,connection,connection,throws,jmsexception,string,client,id,get,client,id,if,client,id,null,connection,set,client,id,client,id
AbstractJmsListeningContainer -> protected void prepareSharedConnection(Connection connection) throws JMSException;1356735495;Prepare the given Connection, which is about to be registered_as shared Connection for this container._<p>The default implementation sets the specified client id, if any._Subclasses can override this to apply further settings._@param connection the Connection to prepare_@throws JMSException if the preparation efforts failed_@see #getClientId();protected void prepareSharedConnection(Connection connection) throws JMSException {_		String clientId = getClientId()__		if (clientId != null) {_			connection.setClientID(clientId)__		}_	};prepare,the,given,connection,which,is,about,to,be,registered,as,shared,connection,for,this,container,p,the,default,implementation,sets,the,specified,client,id,if,any,subclasses,can,override,this,to,apply,further,settings,param,connection,the,connection,to,prepare,throws,jmsexception,if,the,preparation,efforts,failed,see,get,client,id;protected,void,prepare,shared,connection,connection,connection,throws,jmsexception,string,client,id,get,client,id,if,client,id,null,connection,set,client,id,client,id
AbstractJmsListeningContainer -> protected void prepareSharedConnection(Connection connection) throws JMSException;1357119239;Prepare the given Connection, which is about to be registered_as shared Connection for this container._<p>The default implementation sets the specified client id, if any._Subclasses can override this to apply further settings._@param connection the Connection to prepare_@throws JMSException if the preparation efforts failed_@see #getClientId();protected void prepareSharedConnection(Connection connection) throws JMSException {_		String clientId = getClientId()__		if (clientId != null) {_			connection.setClientID(clientId)__		}_	};prepare,the,given,connection,which,is,about,to,be,registered,as,shared,connection,for,this,container,p,the,default,implementation,sets,the,specified,client,id,if,any,subclasses,can,override,this,to,apply,further,settings,param,connection,the,connection,to,prepare,throws,jmsexception,if,the,preparation,efforts,failed,see,get,client,id;protected,void,prepare,shared,connection,connection,connection,throws,jmsexception,string,client,id,get,client,id,if,client,id,null,connection,set,client,id,client,id
AbstractJmsListeningContainer -> protected void prepareSharedConnection(Connection connection) throws JMSException;1368482696;Prepare the given Connection, which is about to be registered_as shared Connection for this container._<p>The default implementation sets the specified client id, if any._Subclasses can override this to apply further settings._@param connection the Connection to prepare_@throws JMSException if the preparation efforts failed_@see #getClientId();protected void prepareSharedConnection(Connection connection) throws JMSException {_		String clientId = getClientId()__		if (clientId != null) {_			connection.setClientID(clientId)__		}_	};prepare,the,given,connection,which,is,about,to,be,registered,as,shared,connection,for,this,container,p,the,default,implementation,sets,the,specified,client,id,if,any,subclasses,can,override,this,to,apply,further,settings,param,connection,the,connection,to,prepare,throws,jmsexception,if,the,preparation,efforts,failed,see,get,client,id;protected,void,prepare,shared,connection,connection,connection,throws,jmsexception,string,client,id,get,client,id,if,client,id,null,connection,set,client,id,client,id
AbstractJmsListeningContainer -> protected void prepareSharedConnection(Connection connection) throws JMSException;1403791284;Prepare the given Connection, which is about to be registered_as shared Connection for this container._<p>The default implementation sets the specified client id, if any._Subclasses can override this to apply further settings._@param connection the Connection to prepare_@throws JMSException if the preparation efforts failed_@see #getClientId();protected void prepareSharedConnection(Connection connection) throws JMSException {_		String clientId = getClientId()__		if (clientId != null) {_			connection.setClientID(clientId)__		}_	};prepare,the,given,connection,which,is,about,to,be,registered,as,shared,connection,for,this,container,p,the,default,implementation,sets,the,specified,client,id,if,any,subclasses,can,override,this,to,apply,further,settings,param,connection,the,connection,to,prepare,throws,jmsexception,if,the,preparation,efforts,failed,see,get,client,id;protected,void,prepare,shared,connection,connection,connection,throws,jmsexception,string,client,id,get,client,id,if,client,id,null,connection,set,client,id,client,id
AbstractJmsListeningContainer -> protected void prepareSharedConnection(Connection connection) throws JMSException;1462186904;Prepare the given Connection, which is about to be registered_as shared Connection for this container._<p>The default implementation sets the specified client id, if any._Subclasses can override this to apply further settings._@param connection the Connection to prepare_@throws JMSException if the preparation efforts failed_@see #getClientId();protected void prepareSharedConnection(Connection connection) throws JMSException {_		String clientId = getClientId()__		if (clientId != null) {_			connection.setClientID(clientId)__		}_	};prepare,the,given,connection,which,is,about,to,be,registered,as,shared,connection,for,this,container,p,the,default,implementation,sets,the,specified,client,id,if,any,subclasses,can,override,this,to,apply,further,settings,param,connection,the,connection,to,prepare,throws,jmsexception,if,the,preparation,efforts,failed,see,get,client,id;protected,void,prepare,shared,connection,connection,connection,throws,jmsexception,string,client,id,get,client,id,if,client,id,null,connection,set,client,id,client,id
AbstractJmsListeningContainer -> protected void prepareSharedConnection(Connection connection) throws JMSException;1467730834;Prepare the given Connection, which is about to be registered_as shared Connection for this container._<p>The default implementation sets the specified client id, if any._Subclasses can override this to apply further settings._@param connection the Connection to prepare_@throws JMSException if the preparation efforts failed_@see #getClientId();protected void prepareSharedConnection(Connection connection) throws JMSException {_		String clientId = getClientId()__		if (clientId != null) {_			connection.setClientID(clientId)__		}_	};prepare,the,given,connection,which,is,about,to,be,registered,as,shared,connection,for,this,container,p,the,default,implementation,sets,the,specified,client,id,if,any,subclasses,can,override,this,to,apply,further,settings,param,connection,the,connection,to,prepare,throws,jmsexception,if,the,preparation,efforts,failed,see,get,client,id;protected,void,prepare,shared,connection,connection,connection,throws,jmsexception,string,client,id,get,client,id,if,client,id,null,connection,set,client,id,client,id
AbstractJmsListeningContainer -> protected void prepareSharedConnection(Connection connection) throws JMSException;1495868221;Prepare the given Connection, which is about to be registered_as shared Connection for this container._<p>The default implementation sets the specified client id, if any._Subclasses can override this to apply further settings._@param connection the Connection to prepare_@throws JMSException if the preparation efforts failed_@see #getClientId();protected void prepareSharedConnection(Connection connection) throws JMSException {_		String clientId = getClientId()__		if (clientId != null) {_			connection.setClientID(clientId)__		}_	};prepare,the,given,connection,which,is,about,to,be,registered,as,shared,connection,for,this,container,p,the,default,implementation,sets,the,specified,client,id,if,any,subclasses,can,override,this,to,apply,further,settings,param,connection,the,connection,to,prepare,throws,jmsexception,if,the,preparation,efforts,failed,see,get,client,id;protected,void,prepare,shared,connection,connection,connection,throws,jmsexception,string,client,id,get,client,id,if,client,id,null,connection,set,client,id,client,id
AbstractJmsListeningContainer -> protected void prepareSharedConnection(Connection connection) throws JMSException;1498780456;Prepare the given Connection, which is about to be registered_as shared Connection for this container._<p>The default implementation sets the specified client id, if any._Subclasses can override this to apply further settings._@param connection the Connection to prepare_@throws JMSException if the preparation efforts failed_@see #getClientId();protected void prepareSharedConnection(Connection connection) throws JMSException {_		String clientId = getClientId()__		if (clientId != null) {_			connection.setClientID(clientId)__		}_	};prepare,the,given,connection,which,is,about,to,be,registered,as,shared,connection,for,this,container,p,the,default,implementation,sets,the,specified,client,id,if,any,subclasses,can,override,this,to,apply,further,settings,param,connection,the,connection,to,prepare,throws,jmsexception,if,the,preparation,efforts,failed,see,get,client,id;protected,void,prepare,shared,connection,connection,connection,throws,jmsexception,string,client,id,get,client,id,if,client,id,null,connection,set,client,id,client,id
AbstractJmsListeningContainer -> protected void prepareSharedConnection(Connection connection) throws JMSException;1500448076;Prepare the given Connection, which is about to be registered_as shared Connection for this container._<p>The default implementation sets the specified client id, if any._Subclasses can override this to apply further settings._@param connection the Connection to prepare_@throws JMSException if the preparation efforts failed_@see #getClientId();protected void prepareSharedConnection(Connection connection) throws JMSException {_		String clientId = getClientId()__		if (clientId != null) {_			connection.setClientID(clientId)__		}_	};prepare,the,given,connection,which,is,about,to,be,registered,as,shared,connection,for,this,container,p,the,default,implementation,sets,the,specified,client,id,if,any,subclasses,can,override,this,to,apply,further,settings,param,connection,the,connection,to,prepare,throws,jmsexception,if,the,preparation,efforts,failed,see,get,client,id;protected,void,prepare,shared,connection,connection,connection,throws,jmsexception,string,client,id,get,client,id,if,client,id,null,connection,set,client,id,client,id
AbstractJmsListeningContainer -> protected void prepareSharedConnection(Connection connection) throws JMSException;1521123475;Prepare the given Connection, which is about to be registered_as shared Connection for this container._<p>The default implementation sets the specified client id, if any._Subclasses can override this to apply further settings._@param connection the Connection to prepare_@throws JMSException if the preparation efforts failed_@see #getClientId();protected void prepareSharedConnection(Connection connection) throws JMSException {_		String clientId = getClientId()__		if (clientId != null) {_			connection.setClientID(clientId)__		}_	};prepare,the,given,connection,which,is,about,to,be,registered,as,shared,connection,for,this,container,p,the,default,implementation,sets,the,specified,client,id,if,any,subclasses,can,override,this,to,apply,further,settings,param,connection,the,connection,to,prepare,throws,jmsexception,if,the,preparation,efforts,failed,see,get,client,id;protected,void,prepare,shared,connection,connection,connection,throws,jmsexception,string,client,id,get,client,id,if,client,id,null,connection,set,client,id,client,id
AbstractJmsListeningContainer -> protected void prepareSharedConnection(Connection connection) throws JMSException;1534414082;Prepare the given Connection, which is about to be registered_as shared Connection for this container._<p>The default implementation sets the specified client id, if any._Subclasses can override this to apply further settings._@param connection the Connection to prepare_@throws JMSException if the preparation efforts failed_@see #getClientId();protected void prepareSharedConnection(Connection connection) throws JMSException {_		String clientId = getClientId()__		if (clientId != null) {_			connection.setClientID(clientId)__		}_	};prepare,the,given,connection,which,is,about,to,be,registered,as,shared,connection,for,this,container,p,the,default,implementation,sets,the,specified,client,id,if,any,subclasses,can,override,this,to,apply,further,settings,param,connection,the,connection,to,prepare,throws,jmsexception,if,the,preparation,efforts,failed,see,get,client,id;protected,void,prepare,shared,connection,connection,connection,throws,jmsexception,string,client,id,get,client,id,if,client,id,null,connection,set,client,id,client,id
AbstractJmsListeningContainer -> protected void logRejectedTask(Object task, RuntimeException ex);1328020251;Log a task that has been rejected by {@link #doRescheduleTask}._<p>The default implementation simply logs a corresponding message_at debug level._@param task the rejected task object_@param ex the exception thrown from {@link #doRescheduleTask};protected void logRejectedTask(Object task, RuntimeException ex) {_		if (logger.isDebugEnabled()) {_			logger.debug("Listener container task [" + task + "] has been rejected and paused: " + ex)__		}_	};log,a,task,that,has,been,rejected,by,link,do,reschedule,task,p,the,default,implementation,simply,logs,a,corresponding,message,at,debug,level,param,task,the,rejected,task,object,param,ex,the,exception,thrown,from,link,do,reschedule,task;protected,void,log,rejected,task,object,task,runtime,exception,ex,if,logger,is,debug,enabled,logger,debug,listener,container,task,task,has,been,rejected,and,paused,ex
AbstractJmsListeningContainer -> protected void logRejectedTask(Object task, RuntimeException ex);1355394580;Log a task that has been rejected by {@link #doRescheduleTask}._<p>The default implementation simply logs a corresponding message_at debug level._@param task the rejected task object_@param ex the exception thrown from {@link #doRescheduleTask};protected void logRejectedTask(Object task, RuntimeException ex) {_		if (logger.isDebugEnabled()) {_			logger.debug("Listener container task [" + task + "] has been rejected and paused: " + ex)__		}_	};log,a,task,that,has,been,rejected,by,link,do,reschedule,task,p,the,default,implementation,simply,logs,a,corresponding,message,at,debug,level,param,task,the,rejected,task,object,param,ex,the,exception,thrown,from,link,do,reschedule,task;protected,void,log,rejected,task,object,task,runtime,exception,ex,if,logger,is,debug,enabled,logger,debug,listener,container,task,task,has,been,rejected,and,paused,ex
AbstractJmsListeningContainer -> protected void logRejectedTask(Object task, RuntimeException ex);1356735495;Log a task that has been rejected by {@link #doRescheduleTask}._<p>The default implementation simply logs a corresponding message_at debug level._@param task the rejected task object_@param ex the exception thrown from {@link #doRescheduleTask};protected void logRejectedTask(Object task, RuntimeException ex) {_		if (logger.isDebugEnabled()) {_			logger.debug("Listener container task [" + task + "] has been rejected and paused: " + ex)__		}_	};log,a,task,that,has,been,rejected,by,link,do,reschedule,task,p,the,default,implementation,simply,logs,a,corresponding,message,at,debug,level,param,task,the,rejected,task,object,param,ex,the,exception,thrown,from,link,do,reschedule,task;protected,void,log,rejected,task,object,task,runtime,exception,ex,if,logger,is,debug,enabled,logger,debug,listener,container,task,task,has,been,rejected,and,paused,ex
AbstractJmsListeningContainer -> protected void logRejectedTask(Object task, RuntimeException ex);1357119239;Log a task that has been rejected by {@link #doRescheduleTask}._<p>The default implementation simply logs a corresponding message_at debug level._@param task the rejected task object_@param ex the exception thrown from {@link #doRescheduleTask};protected void logRejectedTask(Object task, RuntimeException ex) {_		if (logger.isDebugEnabled()) {_			logger.debug("Listener container task [" + task + "] has been rejected and paused: " + ex)__		}_	};log,a,task,that,has,been,rejected,by,link,do,reschedule,task,p,the,default,implementation,simply,logs,a,corresponding,message,at,debug,level,param,task,the,rejected,task,object,param,ex,the,exception,thrown,from,link,do,reschedule,task;protected,void,log,rejected,task,object,task,runtime,exception,ex,if,logger,is,debug,enabled,logger,debug,listener,container,task,task,has,been,rejected,and,paused,ex
AbstractJmsListeningContainer -> protected void logRejectedTask(Object task, RuntimeException ex);1368482696;Log a task that has been rejected by {@link #doRescheduleTask}._<p>The default implementation simply logs a corresponding message_at debug level._@param task the rejected task object_@param ex the exception thrown from {@link #doRescheduleTask};protected void logRejectedTask(Object task, RuntimeException ex) {_		if (logger.isDebugEnabled()) {_			logger.debug("Listener container task [" + task + "] has been rejected and paused: " + ex)__		}_	};log,a,task,that,has,been,rejected,by,link,do,reschedule,task,p,the,default,implementation,simply,logs,a,corresponding,message,at,debug,level,param,task,the,rejected,task,object,param,ex,the,exception,thrown,from,link,do,reschedule,task;protected,void,log,rejected,task,object,task,runtime,exception,ex,if,logger,is,debug,enabled,logger,debug,listener,container,task,task,has,been,rejected,and,paused,ex
AbstractJmsListeningContainer -> protected void logRejectedTask(Object task, RuntimeException ex);1403791284;Log a task that has been rejected by {@link #doRescheduleTask}._<p>The default implementation simply logs a corresponding message_at debug level._@param task the rejected task object_@param ex the exception thrown from {@link #doRescheduleTask};protected void logRejectedTask(Object task, RuntimeException ex) {_		if (logger.isDebugEnabled()) {_			logger.debug("Listener container task [" + task + "] has been rejected and paused: " + ex)__		}_	};log,a,task,that,has,been,rejected,by,link,do,reschedule,task,p,the,default,implementation,simply,logs,a,corresponding,message,at,debug,level,param,task,the,rejected,task,object,param,ex,the,exception,thrown,from,link,do,reschedule,task;protected,void,log,rejected,task,object,task,runtime,exception,ex,if,logger,is,debug,enabled,logger,debug,listener,container,task,task,has,been,rejected,and,paused,ex
AbstractJmsListeningContainer -> protected void logRejectedTask(Object task, RuntimeException ex);1462186904;Log a task that has been rejected by {@link #doRescheduleTask}._<p>The default implementation simply logs a corresponding message_at debug level._@param task the rejected task object_@param ex the exception thrown from {@link #doRescheduleTask};protected void logRejectedTask(Object task, RuntimeException ex) {_		if (logger.isDebugEnabled()) {_			logger.debug("Listener container task [" + task + "] has been rejected and paused: " + ex)__		}_	};log,a,task,that,has,been,rejected,by,link,do,reschedule,task,p,the,default,implementation,simply,logs,a,corresponding,message,at,debug,level,param,task,the,rejected,task,object,param,ex,the,exception,thrown,from,link,do,reschedule,task;protected,void,log,rejected,task,object,task,runtime,exception,ex,if,logger,is,debug,enabled,logger,debug,listener,container,task,task,has,been,rejected,and,paused,ex
AbstractJmsListeningContainer -> protected void logRejectedTask(Object task, RuntimeException ex);1467730834;Log a task that has been rejected by {@link #doRescheduleTask}._<p>The default implementation simply logs a corresponding message_at debug level._@param task the rejected task object_@param ex the exception thrown from {@link #doRescheduleTask};protected void logRejectedTask(Object task, RuntimeException ex) {_		if (logger.isDebugEnabled()) {_			logger.debug("Listener container task [" + task + "] has been rejected and paused: " + ex)__		}_	};log,a,task,that,has,been,rejected,by,link,do,reschedule,task,p,the,default,implementation,simply,logs,a,corresponding,message,at,debug,level,param,task,the,rejected,task,object,param,ex,the,exception,thrown,from,link,do,reschedule,task;protected,void,log,rejected,task,object,task,runtime,exception,ex,if,logger,is,debug,enabled,logger,debug,listener,container,task,task,has,been,rejected,and,paused,ex
AbstractJmsListeningContainer -> protected void logRejectedTask(Object task, RuntimeException ex);1495868221;Log a task that has been rejected by {@link #doRescheduleTask}._<p>The default implementation simply logs a corresponding message_at debug level._@param task the rejected task object_@param ex the exception thrown from {@link #doRescheduleTask};protected void logRejectedTask(Object task, RuntimeException ex) {_		if (logger.isDebugEnabled()) {_			logger.debug("Listener container task [" + task + "] has been rejected and paused: " + ex)__		}_	};log,a,task,that,has,been,rejected,by,link,do,reschedule,task,p,the,default,implementation,simply,logs,a,corresponding,message,at,debug,level,param,task,the,rejected,task,object,param,ex,the,exception,thrown,from,link,do,reschedule,task;protected,void,log,rejected,task,object,task,runtime,exception,ex,if,logger,is,debug,enabled,logger,debug,listener,container,task,task,has,been,rejected,and,paused,ex
AbstractJmsListeningContainer -> protected void logRejectedTask(Object task, RuntimeException ex);1498780456;Log a task that has been rejected by {@link #doRescheduleTask}._<p>The default implementation simply logs a corresponding message_at debug level._@param task the rejected task object_@param ex the exception thrown from {@link #doRescheduleTask};protected void logRejectedTask(Object task, RuntimeException ex) {_		if (logger.isDebugEnabled()) {_			logger.debug("Listener container task [" + task + "] has been rejected and paused: " + ex)__		}_	};log,a,task,that,has,been,rejected,by,link,do,reschedule,task,p,the,default,implementation,simply,logs,a,corresponding,message,at,debug,level,param,task,the,rejected,task,object,param,ex,the,exception,thrown,from,link,do,reschedule,task;protected,void,log,rejected,task,object,task,runtime,exception,ex,if,logger,is,debug,enabled,logger,debug,listener,container,task,task,has,been,rejected,and,paused,ex
AbstractJmsListeningContainer -> protected void logRejectedTask(Object task, RuntimeException ex);1500448076;Log a task that has been rejected by {@link #doRescheduleTask}._<p>The default implementation simply logs a corresponding message_at debug level._@param task the rejected task object_@param ex the exception thrown from {@link #doRescheduleTask};protected void logRejectedTask(Object task, RuntimeException ex) {_		if (logger.isDebugEnabled()) {_			logger.debug("Listener container task [" + task + "] has been rejected and paused: " + ex)__		}_	};log,a,task,that,has,been,rejected,by,link,do,reschedule,task,p,the,default,implementation,simply,logs,a,corresponding,message,at,debug,level,param,task,the,rejected,task,object,param,ex,the,exception,thrown,from,link,do,reschedule,task;protected,void,log,rejected,task,object,task,runtime,exception,ex,if,logger,is,debug,enabled,logger,debug,listener,container,task,task,has,been,rejected,and,paused,ex
AbstractJmsListeningContainer -> protected void logRejectedTask(Object task, RuntimeException ex);1521123475;Log a task that has been rejected by {@link #doRescheduleTask}._<p>The default implementation simply logs a corresponding message_at debug level._@param task the rejected task object_@param ex the exception thrown from {@link #doRescheduleTask};protected void logRejectedTask(Object task, RuntimeException ex) {_		if (logger.isDebugEnabled()) {_			logger.debug("Listener container task [" + task + "] has been rejected and paused: " + ex)__		}_	};log,a,task,that,has,been,rejected,by,link,do,reschedule,task,p,the,default,implementation,simply,logs,a,corresponding,message,at,debug,level,param,task,the,rejected,task,object,param,ex,the,exception,thrown,from,link,do,reschedule,task;protected,void,log,rejected,task,object,task,runtime,exception,ex,if,logger,is,debug,enabled,logger,debug,listener,container,task,task,has,been,rejected,and,paused,ex
AbstractJmsListeningContainer -> protected void logRejectedTask(Object task, RuntimeException ex);1534414082;Log a task that has been rejected by {@link #doRescheduleTask}._<p>The default implementation simply logs a corresponding message_at debug level._@param task the rejected task object_@param ex the exception thrown from {@link #doRescheduleTask};protected void logRejectedTask(Object task, RuntimeException ex) {_		if (logger.isDebugEnabled()) {_			logger.debug("Listener container task [" + task + "] has been rejected and paused: " + ex)__		}_	};log,a,task,that,has,been,rejected,by,link,do,reschedule,task,p,the,default,implementation,simply,logs,a,corresponding,message,at,debug,level,param,task,the,rejected,task,object,param,ex,the,exception,thrown,from,link,do,reschedule,task;protected,void,log,rejected,task,object,task,runtime,exception,ex,if,logger,is,debug,enabled,logger,debug,listener,container,task,task,has,been,rejected,and,paused,ex
AbstractJmsListeningContainer -> protected abstract boolean sharedConnectionEnabled()_;1328020251;Return whether a shared JMS Connection should be maintained_by this container base class._@see #getSharedConnection();protected abstract boolean sharedConnectionEnabled()_;return,whether,a,shared,jms,connection,should,be,maintained,by,this,container,base,class,see,get,shared,connection;protected,abstract,boolean,shared,connection,enabled
AbstractJmsListeningContainer -> protected abstract boolean sharedConnectionEnabled()_;1355394580;Return whether a shared JMS Connection should be maintained_by this container base class._@see #getSharedConnection();protected abstract boolean sharedConnectionEnabled()_;return,whether,a,shared,jms,connection,should,be,maintained,by,this,container,base,class,see,get,shared,connection;protected,abstract,boolean,shared,connection,enabled
AbstractJmsListeningContainer -> protected abstract boolean sharedConnectionEnabled()_;1356735495;Return whether a shared JMS Connection should be maintained_by this container base class._@see #getSharedConnection();protected abstract boolean sharedConnectionEnabled()_;return,whether,a,shared,jms,connection,should,be,maintained,by,this,container,base,class,see,get,shared,connection;protected,abstract,boolean,shared,connection,enabled
AbstractJmsListeningContainer -> protected abstract boolean sharedConnectionEnabled()_;1357119239;Return whether a shared JMS Connection should be maintained_by this container base class._@see #getSharedConnection();protected abstract boolean sharedConnectionEnabled()_;return,whether,a,shared,jms,connection,should,be,maintained,by,this,container,base,class,see,get,shared,connection;protected,abstract,boolean,shared,connection,enabled
AbstractJmsListeningContainer -> protected abstract boolean sharedConnectionEnabled()_;1368482696;Return whether a shared JMS Connection should be maintained_by this container base class._@see #getSharedConnection();protected abstract boolean sharedConnectionEnabled()_;return,whether,a,shared,jms,connection,should,be,maintained,by,this,container,base,class,see,get,shared,connection;protected,abstract,boolean,shared,connection,enabled
AbstractJmsListeningContainer -> protected abstract boolean sharedConnectionEnabled()_;1403791284;Return whether a shared JMS Connection should be maintained_by this container base class._@see #getSharedConnection();protected abstract boolean sharedConnectionEnabled()_;return,whether,a,shared,jms,connection,should,be,maintained,by,this,container,base,class,see,get,shared,connection;protected,abstract,boolean,shared,connection,enabled
AbstractJmsListeningContainer -> protected abstract boolean sharedConnectionEnabled()_;1462186904;Return whether a shared JMS Connection should be maintained_by this container base class._@see #getSharedConnection();protected abstract boolean sharedConnectionEnabled()_;return,whether,a,shared,jms,connection,should,be,maintained,by,this,container,base,class,see,get,shared,connection;protected,abstract,boolean,shared,connection,enabled
AbstractJmsListeningContainer -> protected abstract boolean sharedConnectionEnabled()_;1467730834;Return whether a shared JMS Connection should be maintained_by this container base class._@see #getSharedConnection();protected abstract boolean sharedConnectionEnabled()_;return,whether,a,shared,jms,connection,should,be,maintained,by,this,container,base,class,see,get,shared,connection;protected,abstract,boolean,shared,connection,enabled
AbstractJmsListeningContainer -> protected abstract boolean sharedConnectionEnabled()_;1495868221;Return whether a shared JMS Connection should be maintained_by this container base class._@see #getSharedConnection();protected abstract boolean sharedConnectionEnabled()_;return,whether,a,shared,jms,connection,should,be,maintained,by,this,container,base,class,see,get,shared,connection;protected,abstract,boolean,shared,connection,enabled
AbstractJmsListeningContainer -> protected abstract boolean sharedConnectionEnabled()_;1498780456;Return whether a shared JMS Connection should be maintained_by this container base class._@see #getSharedConnection();protected abstract boolean sharedConnectionEnabled()_;return,whether,a,shared,jms,connection,should,be,maintained,by,this,container,base,class,see,get,shared,connection;protected,abstract,boolean,shared,connection,enabled
AbstractJmsListeningContainer -> protected abstract boolean sharedConnectionEnabled()_;1500448076;Return whether a shared JMS Connection should be maintained_by this container base class._@see #getSharedConnection();protected abstract boolean sharedConnectionEnabled()_;return,whether,a,shared,jms,connection,should,be,maintained,by,this,container,base,class,see,get,shared,connection;protected,abstract,boolean,shared,connection,enabled
AbstractJmsListeningContainer -> protected abstract boolean sharedConnectionEnabled()_;1521123475;Return whether a shared JMS Connection should be maintained_by this container base class._@see #getSharedConnection();protected abstract boolean sharedConnectionEnabled()_;return,whether,a,shared,jms,connection,should,be,maintained,by,this,container,base,class,see,get,shared,connection;protected,abstract,boolean,shared,connection,enabled
AbstractJmsListeningContainer -> protected abstract boolean sharedConnectionEnabled()_;1534414082;Return whether a shared JMS Connection should be maintained_by this container base class._@see #getSharedConnection();protected abstract boolean sharedConnectionEnabled()_;return,whether,a,shared,jms,connection,should,be,maintained,by,this,container,base,class,see,get,shared,connection;protected,abstract,boolean,shared,connection,enabled
AbstractJmsListeningContainer -> protected void validateConfiguration();1328020251;Validate the configuration of this container._<p>The default implementation is empty. To be overridden in subclasses.;protected void validateConfiguration() {_	};validate,the,configuration,of,this,container,p,the,default,implementation,is,empty,to,be,overridden,in,subclasses;protected,void,validate,configuration
AbstractJmsListeningContainer -> protected void validateConfiguration();1355394580;Validate the configuration of this container._<p>The default implementation is empty. To be overridden in subclasses.;protected void validateConfiguration() {_	};validate,the,configuration,of,this,container,p,the,default,implementation,is,empty,to,be,overridden,in,subclasses;protected,void,validate,configuration
AbstractJmsListeningContainer -> protected void validateConfiguration();1356735495;Validate the configuration of this container._<p>The default implementation is empty. To be overridden in subclasses.;protected void validateConfiguration() {_	};validate,the,configuration,of,this,container,p,the,default,implementation,is,empty,to,be,overridden,in,subclasses;protected,void,validate,configuration
AbstractJmsListeningContainer -> protected void validateConfiguration();1357119239;Validate the configuration of this container._<p>The default implementation is empty. To be overridden in subclasses.;protected void validateConfiguration() {_	};validate,the,configuration,of,this,container,p,the,default,implementation,is,empty,to,be,overridden,in,subclasses;protected,void,validate,configuration
AbstractJmsListeningContainer -> protected void validateConfiguration();1368482696;Validate the configuration of this container._<p>The default implementation is empty. To be overridden in subclasses.;protected void validateConfiguration() {_	};validate,the,configuration,of,this,container,p,the,default,implementation,is,empty,to,be,overridden,in,subclasses;protected,void,validate,configuration
AbstractJmsListeningContainer -> protected void validateConfiguration();1403791284;Validate the configuration of this container._<p>The default implementation is empty. To be overridden in subclasses.;protected void validateConfiguration() {_	};validate,the,configuration,of,this,container,p,the,default,implementation,is,empty,to,be,overridden,in,subclasses;protected,void,validate,configuration
AbstractJmsListeningContainer -> protected void validateConfiguration();1462186904;Validate the configuration of this container._<p>The default implementation is empty. To be overridden in subclasses.;protected void validateConfiguration() {_	};validate,the,configuration,of,this,container,p,the,default,implementation,is,empty,to,be,overridden,in,subclasses;protected,void,validate,configuration
AbstractJmsListeningContainer -> protected void validateConfiguration();1467730834;Validate the configuration of this container._<p>The default implementation is empty. To be overridden in subclasses.;protected void validateConfiguration() {_	};validate,the,configuration,of,this,container,p,the,default,implementation,is,empty,to,be,overridden,in,subclasses;protected,void,validate,configuration
AbstractJmsListeningContainer -> protected void validateConfiguration();1495868221;Validate the configuration of this container._<p>The default implementation is empty. To be overridden in subclasses.;protected void validateConfiguration() {_	};validate,the,configuration,of,this,container,p,the,default,implementation,is,empty,to,be,overridden,in,subclasses;protected,void,validate,configuration
AbstractJmsListeningContainer -> protected void validateConfiguration();1498780456;Validate the configuration of this container._<p>The default implementation is empty. To be overridden in subclasses.;protected void validateConfiguration() {_	};validate,the,configuration,of,this,container,p,the,default,implementation,is,empty,to,be,overridden,in,subclasses;protected,void,validate,configuration
AbstractJmsListeningContainer -> protected void validateConfiguration();1500448076;Validate the configuration of this container._<p>The default implementation is empty. To be overridden in subclasses.;protected void validateConfiguration() {_	};validate,the,configuration,of,this,container,p,the,default,implementation,is,empty,to,be,overridden,in,subclasses;protected,void,validate,configuration
AbstractJmsListeningContainer -> protected void validateConfiguration();1521123475;Validate the configuration of this container._<p>The default implementation is empty. To be overridden in subclasses.;protected void validateConfiguration() {_	};validate,the,configuration,of,this,container,p,the,default,implementation,is,empty,to,be,overridden,in,subclasses;protected,void,validate,configuration
AbstractJmsListeningContainer -> protected void validateConfiguration();1534414082;Validate the configuration of this container._<p>The default implementation is empty. To be overridden in subclasses.;protected void validateConfiguration() {_	};validate,the,configuration,of,this,container,p,the,default,implementation,is,empty,to,be,overridden,in,subclasses;protected,void,validate,configuration
AbstractJmsListeningContainer -> public final boolean isRunning();1328020251;Determine whether this container is currently running,_that is, whether it has been started and not stopped yet._@see #start()_@see #stop()_@see #runningAllowed();public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return (this.running && runningAllowed())__		}_	};determine,whether,this,container,is,currently,running,that,is,whether,it,has,been,started,and,not,stopped,yet,see,start,see,stop,see,running,allowed;public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running,running,allowed
AbstractJmsListeningContainer -> public final boolean isRunning();1355394580;Determine whether this container is currently running,_that is, whether it has been started and not stopped yet._@see #start()_@see #stop()_@see #runningAllowed();public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return (this.running && runningAllowed())__		}_	};determine,whether,this,container,is,currently,running,that,is,whether,it,has,been,started,and,not,stopped,yet,see,start,see,stop,see,running,allowed;public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running,running,allowed
AbstractJmsListeningContainer -> public final boolean isRunning();1357119239;Determine whether this container is currently running,_that is, whether it has been started and not stopped yet._@see #start()_@see #stop()_@see #runningAllowed();public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return (this.running && runningAllowed())__		}_	};determine,whether,this,container,is,currently,running,that,is,whether,it,has,been,started,and,not,stopped,yet,see,start,see,stop,see,running,allowed;public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running,running,allowed
AbstractJmsListeningContainer -> protected abstract void doShutdown() throws JMSException_;1328020251;Close the registered invokers._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will automatically be closed_<i>afterwards</i>._@throws JMSException if shutdown failed_@see #shutdown();protected abstract void doShutdown() throws JMSException_;close,the,registered,invokers,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,automatically,be,closed,i,afterwards,i,throws,jmsexception,if,shutdown,failed,see,shutdown;protected,abstract,void,do,shutdown,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doShutdown() throws JMSException_;1355394580;Close the registered invokers._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will automatically be closed_<i>afterwards</i>._@throws JMSException if shutdown failed_@see #shutdown();protected abstract void doShutdown() throws JMSException_;close,the,registered,invokers,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,automatically,be,closed,i,afterwards,i,throws,jmsexception,if,shutdown,failed,see,shutdown;protected,abstract,void,do,shutdown,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doShutdown() throws JMSException_;1356735495;Close the registered invokers._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will automatically be closed_<i>afterwards</i>._@throws JMSException if shutdown failed_@see #shutdown();protected abstract void doShutdown() throws JMSException_;close,the,registered,invokers,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,automatically,be,closed,i,afterwards,i,throws,jmsexception,if,shutdown,failed,see,shutdown;protected,abstract,void,do,shutdown,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doShutdown() throws JMSException_;1357119239;Close the registered invokers._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will automatically be closed_<i>afterwards</i>._@throws JMSException if shutdown failed_@see #shutdown();protected abstract void doShutdown() throws JMSException_;close,the,registered,invokers,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,automatically,be,closed,i,afterwards,i,throws,jmsexception,if,shutdown,failed,see,shutdown;protected,abstract,void,do,shutdown,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doShutdown() throws JMSException_;1368482696;Close the registered invokers._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will automatically be closed_<i>afterwards</i>._@throws JMSException if shutdown failed_@see #shutdown();protected abstract void doShutdown() throws JMSException_;close,the,registered,invokers,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,automatically,be,closed,i,afterwards,i,throws,jmsexception,if,shutdown,failed,see,shutdown;protected,abstract,void,do,shutdown,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doShutdown() throws JMSException_;1403791284;Close the registered invokers._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will automatically be closed_<i>afterwards</i>._@throws JMSException if shutdown failed_@see #shutdown();protected abstract void doShutdown() throws JMSException_;close,the,registered,invokers,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,automatically,be,closed,i,afterwards,i,throws,jmsexception,if,shutdown,failed,see,shutdown;protected,abstract,void,do,shutdown,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doShutdown() throws JMSException_;1462186904;Close the registered invokers._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will automatically be closed_<i>afterwards</i>._@throws JMSException if shutdown failed_@see #shutdown();protected abstract void doShutdown() throws JMSException_;close,the,registered,invokers,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,automatically,be,closed,i,afterwards,i,throws,jmsexception,if,shutdown,failed,see,shutdown;protected,abstract,void,do,shutdown,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doShutdown() throws JMSException_;1467730834;Close the registered invokers._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will automatically be closed_<i>afterwards</i>._@throws JMSException if shutdown failed_@see #shutdown();protected abstract void doShutdown() throws JMSException_;close,the,registered,invokers,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,automatically,be,closed,i,afterwards,i,throws,jmsexception,if,shutdown,failed,see,shutdown;protected,abstract,void,do,shutdown,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doShutdown() throws JMSException_;1495868221;Close the registered invokers._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will automatically be closed_<i>afterwards</i>._@throws JMSException if shutdown failed_@see #shutdown();protected abstract void doShutdown() throws JMSException_;close,the,registered,invokers,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,automatically,be,closed,i,afterwards,i,throws,jmsexception,if,shutdown,failed,see,shutdown;protected,abstract,void,do,shutdown,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doShutdown() throws JMSException_;1498780456;Close the registered invokers._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will automatically be closed_<i>afterwards</i>._@throws JMSException if shutdown failed_@see #shutdown();protected abstract void doShutdown() throws JMSException_;close,the,registered,invokers,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,automatically,be,closed,i,afterwards,i,throws,jmsexception,if,shutdown,failed,see,shutdown;protected,abstract,void,do,shutdown,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doShutdown() throws JMSException_;1500448076;Close the registered invokers._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will automatically be closed_<i>afterwards</i>._@throws JMSException if shutdown failed_@see #shutdown();protected abstract void doShutdown() throws JMSException_;close,the,registered,invokers,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,automatically,be,closed,i,afterwards,i,throws,jmsexception,if,shutdown,failed,see,shutdown;protected,abstract,void,do,shutdown,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doShutdown() throws JMSException_;1521123475;Close the registered invokers._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will automatically be closed_<i>afterwards</i>._@throws JMSException if shutdown failed_@see #shutdown();protected abstract void doShutdown() throws JMSException_;close,the,registered,invokers,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,automatically,be,closed,i,afterwards,i,throws,jmsexception,if,shutdown,failed,see,shutdown;protected,abstract,void,do,shutdown,throws,jmsexception
AbstractJmsListeningContainer -> protected abstract void doShutdown() throws JMSException_;1534414082;Close the registered invokers._<p>Subclasses need to implement this method for their specific_invoker management process._<p>A shared JMS Connection, if any, will automatically be closed_<i>afterwards</i>._@throws JMSException if shutdown failed_@see #shutdown();protected abstract void doShutdown() throws JMSException_;close,the,registered,invokers,p,subclasses,need,to,implement,this,method,for,their,specific,invoker,management,process,p,a,shared,jms,connection,if,any,will,automatically,be,closed,i,afterwards,i,throws,jmsexception,if,shutdown,failed,see,shutdown;protected,abstract,void,do,shutdown,throws,jmsexception
AbstractJmsListeningContainer -> @Override 	public final boolean isRunning();1356735495;Determine whether this container is currently running,_that is, whether it has been started and not stopped yet._@see #start()_@see #stop()_@see #runningAllowed();@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return (this.running && runningAllowed())__		}_	};determine,whether,this,container,is,currently,running,that,is,whether,it,has,been,started,and,not,stopped,yet,see,start,see,stop,see,running,allowed;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running,running,allowed
AbstractJmsListeningContainer -> @Override 	public final boolean isRunning();1368482696;Determine whether this container is currently running,_that is, whether it has been started and not stopped yet._@see #start()_@see #stop()_@see #runningAllowed();@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return (this.running && runningAllowed())__		}_	};determine,whether,this,container,is,currently,running,that,is,whether,it,has,been,started,and,not,stopped,yet,see,start,see,stop,see,running,allowed;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running,running,allowed
AbstractJmsListeningContainer -> @Override 	public final boolean isRunning();1403791284;Determine whether this container is currently running,_that is, whether it has been started and not stopped yet._@see #start()_@see #stop()_@see #runningAllowed();@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return (this.running && runningAllowed())__		}_	};determine,whether,this,container,is,currently,running,that,is,whether,it,has,been,started,and,not,stopped,yet,see,start,see,stop,see,running,allowed;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running,running,allowed
AbstractJmsListeningContainer -> @Override 	public final boolean isRunning();1462186904;Determine whether this container is currently running,_that is, whether it has been started and not stopped yet._@see #start()_@see #stop()_@see #runningAllowed();@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return (this.running && runningAllowed())__		}_	};determine,whether,this,container,is,currently,running,that,is,whether,it,has,been,started,and,not,stopped,yet,see,start,see,stop,see,running,allowed;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running,running,allowed
AbstractJmsListeningContainer -> @Override 	public final boolean isRunning();1467730834;Determine whether this container is currently running,_that is, whether it has been started and not stopped yet._@see #start()_@see #stop()_@see #runningAllowed();@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return (this.running && runningAllowed())__		}_	};determine,whether,this,container,is,currently,running,that,is,whether,it,has,been,started,and,not,stopped,yet,see,start,see,stop,see,running,allowed;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running,running,allowed
AbstractJmsListeningContainer -> @Override 	public final boolean isRunning();1495868221;Determine whether this container is currently running,_that is, whether it has been started and not stopped yet._@see #start()_@see #stop()_@see #runningAllowed();@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return (this.running && runningAllowed())__		}_	};determine,whether,this,container,is,currently,running,that,is,whether,it,has,been,started,and,not,stopped,yet,see,start,see,stop,see,running,allowed;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running,running,allowed
AbstractJmsListeningContainer -> @Override 	public final boolean isRunning();1498780456;Determine whether this container is currently running,_that is, whether it has been started and not stopped yet._@see #start()_@see #stop()_@see #runningAllowed();@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return (this.running && runningAllowed())__		}_	};determine,whether,this,container,is,currently,running,that,is,whether,it,has,been,started,and,not,stopped,yet,see,start,see,stop,see,running,allowed;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running,running,allowed
AbstractJmsListeningContainer -> @Override 	public final boolean isRunning();1500448076;Determine whether this container is currently running,_that is, whether it has been started and not stopped yet._@see #start()_@see #stop()_@see #runningAllowed();@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return (this.running && runningAllowed())__		}_	};determine,whether,this,container,is,currently,running,that,is,whether,it,has,been,started,and,not,stopped,yet,see,start,see,stop,see,running,allowed;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running,running,allowed
AbstractJmsListeningContainer -> @Override 	public final boolean isRunning();1521123475;Determine whether this container is currently running,_that is, whether it has been started and not stopped yet._@see #start()_@see #stop()_@see #runningAllowed();@Override_	public final boolean isRunning() {_		return (this.running && runningAllowed())__	};determine,whether,this,container,is,currently,running,that,is,whether,it,has,been,started,and,not,stopped,yet,see,start,see,stop,see,running,allowed;override,public,final,boolean,is,running,return,this,running,running,allowed
AbstractJmsListeningContainer -> @Override 	public final boolean isRunning();1534414082;Determine whether this container is currently running,_that is, whether it has been started and not stopped yet._@see #start()_@see #stop()_@see #runningAllowed();@Override_	public final boolean isRunning() {_		return (this.running && runningAllowed())__	};determine,whether,this,container,is,currently,running,that,is,whether,it,has,been,started,and,not,stopped,yet,see,start,see,stop,see,running,allowed;override,public,final,boolean,is,running,return,this,running,running,allowed
AbstractJmsListeningContainer -> public void setClientId(@Nullable String clientId);1500448076;Specify the JMS client ID for a shared Connection created and used_by this container._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setConnectionFactory;public void setClientId(@Nullable String clientId) {_		this.clientId = clientId__	};specify,the,jms,client,id,for,a,shared,connection,created,and,used,by,this,container,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,connection,factory;public,void,set,client,id,nullable,string,client,id,this,client,id,client,id
AbstractJmsListeningContainer -> public void setClientId(@Nullable String clientId);1521123475;Specify the JMS client ID for a shared Connection created and used_by this container._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setConnectionFactory;public void setClientId(@Nullable String clientId) {_		this.clientId = clientId__	};specify,the,jms,client,id,for,a,shared,connection,created,and,used,by,this,container,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,connection,factory;public,void,set,client,id,nullable,string,client,id,this,client,id,client,id
AbstractJmsListeningContainer -> public void setClientId(@Nullable String clientId);1534414082;Specify the JMS client ID for a shared Connection created and used_by this container._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setConnectionFactory;public void setClientId(@Nullable String clientId) {_		this.clientId = clientId__	};specify,the,jms,client,id,for,a,shared,connection,created,and,used,by,this,container,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,connection,factory;public,void,set,client,id,nullable,string,client,id,this,client,id,client,id
AbstractJmsListeningContainer -> public String getClientId();1328020251;Return the JMS client ID for the shared Connection created and used_by this container, if any.;public String getClientId() {_		return this.clientId__	};return,the,jms,client,id,for,the,shared,connection,created,and,used,by,this,container,if,any;public,string,get,client,id,return,this,client,id
AbstractJmsListeningContainer -> public String getClientId();1355394580;Return the JMS client ID for the shared Connection created and used_by this container, if any.;public String getClientId() {_		return this.clientId__	};return,the,jms,client,id,for,the,shared,connection,created,and,used,by,this,container,if,any;public,string,get,client,id,return,this,client,id
AbstractJmsListeningContainer -> public String getClientId();1356735495;Return the JMS client ID for the shared Connection created and used_by this container, if any.;public String getClientId() {_		return this.clientId__	};return,the,jms,client,id,for,the,shared,connection,created,and,used,by,this,container,if,any;public,string,get,client,id,return,this,client,id
AbstractJmsListeningContainer -> public String getClientId();1357119239;Return the JMS client ID for the shared Connection created and used_by this container, if any.;public String getClientId() {_		return this.clientId__	};return,the,jms,client,id,for,the,shared,connection,created,and,used,by,this,container,if,any;public,string,get,client,id,return,this,client,id
AbstractJmsListeningContainer -> public String getClientId();1368482696;Return the JMS client ID for the shared Connection created and used_by this container, if any.;public String getClientId() {_		return this.clientId__	};return,the,jms,client,id,for,the,shared,connection,created,and,used,by,this,container,if,any;public,string,get,client,id,return,this,client,id
AbstractJmsListeningContainer -> public String getClientId();1403791284;Return the JMS client ID for the shared Connection created and used_by this container, if any.;public String getClientId() {_		return this.clientId__	};return,the,jms,client,id,for,the,shared,connection,created,and,used,by,this,container,if,any;public,string,get,client,id,return,this,client,id
AbstractJmsListeningContainer -> public String getClientId();1462186904;Return the JMS client ID for the shared Connection created and used_by this container, if any.;public String getClientId() {_		return this.clientId__	};return,the,jms,client,id,for,the,shared,connection,created,and,used,by,this,container,if,any;public,string,get,client,id,return,this,client,id
AbstractJmsListeningContainer -> public String getClientId();1467730834;Return the JMS client ID for the shared Connection created and used_by this container, if any.;public String getClientId() {_		return this.clientId__	};return,the,jms,client,id,for,the,shared,connection,created,and,used,by,this,container,if,any;public,string,get,client,id,return,this,client,id
AbstractJmsListeningContainer -> public void stop() throws JmsException;1328020251;Stop this container._@throws JmsException if stopping failed_@see #doStop;public void stop() throws JmsException {_		try {_			doStop()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};stop,this,container,throws,jms,exception,if,stopping,failed,see,do,stop;public,void,stop,throws,jms,exception,try,do,stop,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void stop() throws JmsException;1355394580;Stop this container._@throws JmsException if stopping failed_@see #doStop;public void stop() throws JmsException {_		try {_			doStop()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};stop,this,container,throws,jms,exception,if,stopping,failed,see,do,stop;public,void,stop,throws,jms,exception,try,do,stop,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> public void stop() throws JmsException;1357119239;Stop this container._@throws JmsException if stopping failed_@see #doStop;public void stop() throws JmsException {_		try {_			doStop()__		}_		catch (JMSException ex) {_			throw convertJmsAccessException(ex)__		}_	};stop,this,container,throws,jms,exception,if,stopping,failed,see,do,stop;public,void,stop,throws,jms,exception,try,do,stop,catch,jmsexception,ex,throw,convert,jms,access,exception,ex
AbstractJmsListeningContainer -> protected boolean runningAllowed();1328020251;Check whether this container's listeners are generally allowed to run._<p>This implementation always returns <code>true</code>_ the default 'running'_state is purely determined by {@link #start()} / {@link #stop()}._<p>Subclasses may override this method to check against temporary_conditions that prevent listeners from actually running. In other words,_they may apply further restrictions to the 'running' state, returning_<code>false</code> if such a restriction prevents listeners from running.;protected boolean runningAllowed() {_		return true__	};check,whether,this,container,s,listeners,are,generally,allowed,to,run,p,this,implementation,always,returns,code,true,code,the,default,running,state,is,purely,determined,by,link,start,link,stop,p,subclasses,may,override,this,method,to,check,against,temporary,conditions,that,prevent,listeners,from,actually,running,in,other,words,they,may,apply,further,restrictions,to,the,running,state,returning,code,false,code,if,such,a,restriction,prevents,listeners,from,running;protected,boolean,running,allowed,return,true
AbstractJmsListeningContainer -> protected boolean runningAllowed();1355394580;Check whether this container's listeners are generally allowed to run._<p>This implementation always returns <code>true</code>_ the default 'running'_state is purely determined by {@link #start()} / {@link #stop()}._<p>Subclasses may override this method to check against temporary_conditions that prevent listeners from actually running. In other words,_they may apply further restrictions to the 'running' state, returning_<code>false</code> if such a restriction prevents listeners from running.;protected boolean runningAllowed() {_		return true__	};check,whether,this,container,s,listeners,are,generally,allowed,to,run,p,this,implementation,always,returns,code,true,code,the,default,running,state,is,purely,determined,by,link,start,link,stop,p,subclasses,may,override,this,method,to,check,against,temporary,conditions,that,prevent,listeners,from,actually,running,in,other,words,they,may,apply,further,restrictions,to,the,running,state,returning,code,false,code,if,such,a,restriction,prevents,listeners,from,running;protected,boolean,running,allowed,return,true
AbstractJmsListeningContainer -> protected boolean runningAllowed();1356735495;Check whether this container's listeners are generally allowed to run._<p>This implementation always returns {@code true}_ the default 'running'_state is purely determined by {@link #start()} / {@link #stop()}._<p>Subclasses may override this method to check against temporary_conditions that prevent listeners from actually running. In other words,_they may apply further restrictions to the 'running' state, returning_{@code false} if such a restriction prevents listeners from running.;protected boolean runningAllowed() {_		return true__	};check,whether,this,container,s,listeners,are,generally,allowed,to,run,p,this,implementation,always,returns,code,true,the,default,running,state,is,purely,determined,by,link,start,link,stop,p,subclasses,may,override,this,method,to,check,against,temporary,conditions,that,prevent,listeners,from,actually,running,in,other,words,they,may,apply,further,restrictions,to,the,running,state,returning,code,false,if,such,a,restriction,prevents,listeners,from,running;protected,boolean,running,allowed,return,true
AbstractJmsListeningContainer -> protected boolean runningAllowed();1357119239;Check whether this container's listeners are generally allowed to run._<p>This implementation always returns {@code true}_ the default 'running'_state is purely determined by {@link #start()} / {@link #stop()}._<p>Subclasses may override this method to check against temporary_conditions that prevent listeners from actually running. In other words,_they may apply further restrictions to the 'running' state, returning_{@code false} if such a restriction prevents listeners from running.;protected boolean runningAllowed() {_		return true__	};check,whether,this,container,s,listeners,are,generally,allowed,to,run,p,this,implementation,always,returns,code,true,the,default,running,state,is,purely,determined,by,link,start,link,stop,p,subclasses,may,override,this,method,to,check,against,temporary,conditions,that,prevent,listeners,from,actually,running,in,other,words,they,may,apply,further,restrictions,to,the,running,state,returning,code,false,if,such,a,restriction,prevents,listeners,from,running;protected,boolean,running,allowed,return,true
AbstractJmsListeningContainer -> protected boolean runningAllowed();1368482696;Check whether this container's listeners are generally allowed to run._<p>This implementation always returns {@code true}_ the default 'running'_state is purely determined by {@link #start()} / {@link #stop()}._<p>Subclasses may override this method to check against temporary_conditions that prevent listeners from actually running. In other words,_they may apply further restrictions to the 'running' state, returning_{@code false} if such a restriction prevents listeners from running.;protected boolean runningAllowed() {_		return true__	};check,whether,this,container,s,listeners,are,generally,allowed,to,run,p,this,implementation,always,returns,code,true,the,default,running,state,is,purely,determined,by,link,start,link,stop,p,subclasses,may,override,this,method,to,check,against,temporary,conditions,that,prevent,listeners,from,actually,running,in,other,words,they,may,apply,further,restrictions,to,the,running,state,returning,code,false,if,such,a,restriction,prevents,listeners,from,running;protected,boolean,running,allowed,return,true
AbstractJmsListeningContainer -> protected boolean runningAllowed();1403791284;Check whether this container's listeners are generally allowed to run._<p>This implementation always returns {@code true}_ the default 'running'_state is purely determined by {@link #start()} / {@link #stop()}._<p>Subclasses may override this method to check against temporary_conditions that prevent listeners from actually running. In other words,_they may apply further restrictions to the 'running' state, returning_{@code false} if such a restriction prevents listeners from running.;protected boolean runningAllowed() {_		return true__	};check,whether,this,container,s,listeners,are,generally,allowed,to,run,p,this,implementation,always,returns,code,true,the,default,running,state,is,purely,determined,by,link,start,link,stop,p,subclasses,may,override,this,method,to,check,against,temporary,conditions,that,prevent,listeners,from,actually,running,in,other,words,they,may,apply,further,restrictions,to,the,running,state,returning,code,false,if,such,a,restriction,prevents,listeners,from,running;protected,boolean,running,allowed,return,true
AbstractJmsListeningContainer -> protected boolean runningAllowed();1462186904;Check whether this container's listeners are generally allowed to run._<p>This implementation always returns {@code true}_ the default 'running'_state is purely determined by {@link #start()} / {@link #stop()}._<p>Subclasses may override this method to check against temporary_conditions that prevent listeners from actually running. In other words,_they may apply further restrictions to the 'running' state, returning_{@code false} if such a restriction prevents listeners from running.;protected boolean runningAllowed() {_		return true__	};check,whether,this,container,s,listeners,are,generally,allowed,to,run,p,this,implementation,always,returns,code,true,the,default,running,state,is,purely,determined,by,link,start,link,stop,p,subclasses,may,override,this,method,to,check,against,temporary,conditions,that,prevent,listeners,from,actually,running,in,other,words,they,may,apply,further,restrictions,to,the,running,state,returning,code,false,if,such,a,restriction,prevents,listeners,from,running;protected,boolean,running,allowed,return,true
AbstractJmsListeningContainer -> protected boolean runningAllowed();1467730834;Check whether this container's listeners are generally allowed to run._<p>This implementation always returns {@code true}_ the default 'running'_state is purely determined by {@link #start()} / {@link #stop()}._<p>Subclasses may override this method to check against temporary_conditions that prevent listeners from actually running. In other words,_they may apply further restrictions to the 'running' state, returning_{@code false} if such a restriction prevents listeners from running.;protected boolean runningAllowed() {_		return true__	};check,whether,this,container,s,listeners,are,generally,allowed,to,run,p,this,implementation,always,returns,code,true,the,default,running,state,is,purely,determined,by,link,start,link,stop,p,subclasses,may,override,this,method,to,check,against,temporary,conditions,that,prevent,listeners,from,actually,running,in,other,words,they,may,apply,further,restrictions,to,the,running,state,returning,code,false,if,such,a,restriction,prevents,listeners,from,running;protected,boolean,running,allowed,return,true
AbstractJmsListeningContainer -> protected boolean runningAllowed();1495868221;Check whether this container's listeners are generally allowed to run._<p>This implementation always returns {@code true}_ the default 'running'_state is purely determined by {@link #start()} / {@link #stop()}._<p>Subclasses may override this method to check against temporary_conditions that prevent listeners from actually running. In other words,_they may apply further restrictions to the 'running' state, returning_{@code false} if such a restriction prevents listeners from running.;protected boolean runningAllowed() {_		return true__	};check,whether,this,container,s,listeners,are,generally,allowed,to,run,p,this,implementation,always,returns,code,true,the,default,running,state,is,purely,determined,by,link,start,link,stop,p,subclasses,may,override,this,method,to,check,against,temporary,conditions,that,prevent,listeners,from,actually,running,in,other,words,they,may,apply,further,restrictions,to,the,running,state,returning,code,false,if,such,a,restriction,prevents,listeners,from,running;protected,boolean,running,allowed,return,true
AbstractJmsListeningContainer -> protected boolean runningAllowed();1498780456;Check whether this container's listeners are generally allowed to run._<p>This implementation always returns {@code true}_ the default 'running'_state is purely determined by {@link #start()} / {@link #stop()}._<p>Subclasses may override this method to check against temporary_conditions that prevent listeners from actually running. In other words,_they may apply further restrictions to the 'running' state, returning_{@code false} if such a restriction prevents listeners from running.;protected boolean runningAllowed() {_		return true__	};check,whether,this,container,s,listeners,are,generally,allowed,to,run,p,this,implementation,always,returns,code,true,the,default,running,state,is,purely,determined,by,link,start,link,stop,p,subclasses,may,override,this,method,to,check,against,temporary,conditions,that,prevent,listeners,from,actually,running,in,other,words,they,may,apply,further,restrictions,to,the,running,state,returning,code,false,if,such,a,restriction,prevents,listeners,from,running;protected,boolean,running,allowed,return,true
AbstractJmsListeningContainer -> protected boolean runningAllowed();1500448076;Check whether this container's listeners are generally allowed to run._<p>This implementation always returns {@code true}_ the default 'running'_state is purely determined by {@link #start()} / {@link #stop()}._<p>Subclasses may override this method to check against temporary_conditions that prevent listeners from actually running. In other words,_they may apply further restrictions to the 'running' state, returning_{@code false} if such a restriction prevents listeners from running.;protected boolean runningAllowed() {_		return true__	};check,whether,this,container,s,listeners,are,generally,allowed,to,run,p,this,implementation,always,returns,code,true,the,default,running,state,is,purely,determined,by,link,start,link,stop,p,subclasses,may,override,this,method,to,check,against,temporary,conditions,that,prevent,listeners,from,actually,running,in,other,words,they,may,apply,further,restrictions,to,the,running,state,returning,code,false,if,such,a,restriction,prevents,listeners,from,running;protected,boolean,running,allowed,return,true
AbstractJmsListeningContainer -> protected boolean runningAllowed();1521123475;Check whether this container's listeners are generally allowed to run._<p>This implementation always returns {@code true}_ the default 'running'_state is purely determined by {@link #start()} / {@link #stop()}._<p>Subclasses may override this method to check against temporary_conditions that prevent listeners from actually running. In other words,_they may apply further restrictions to the 'running' state, returning_{@code false} if such a restriction prevents listeners from running.;protected boolean runningAllowed() {_		return true__	};check,whether,this,container,s,listeners,are,generally,allowed,to,run,p,this,implementation,always,returns,code,true,the,default,running,state,is,purely,determined,by,link,start,link,stop,p,subclasses,may,override,this,method,to,check,against,temporary,conditions,that,prevent,listeners,from,actually,running,in,other,words,they,may,apply,further,restrictions,to,the,running,state,returning,code,false,if,such,a,restriction,prevents,listeners,from,running;protected,boolean,running,allowed,return,true
AbstractJmsListeningContainer -> protected boolean runningAllowed();1534414082;Check whether this container's listeners are generally allowed to run._<p>This implementation always returns {@code true}_ the default 'running'_state is purely determined by {@link #start()} / {@link #stop()}._<p>Subclasses may override this method to check against temporary_conditions that prevent listeners from actually running. In other words,_they may apply further restrictions to the 'running' state, returning_{@code false} if such a restriction prevents listeners from running.;protected boolean runningAllowed() {_		return true__	};check,whether,this,container,s,listeners,are,generally,allowed,to,run,p,this,implementation,always,returns,code,true,the,default,running,state,is,purely,determined,by,link,start,link,stop,p,subclasses,may,override,this,method,to,check,against,temporary,conditions,that,prevent,listeners,from,actually,running,in,other,words,they,may,apply,further,restrictions,to,the,running,state,returning,code,false,if,such,a,restriction,prevents,listeners,from,running;protected,boolean,running,allowed,return,true
AbstractJmsListeningContainer -> protected void resumePausedTasks();1328020251;Try to resume all paused tasks._Tasks for which rescheduling failed simply remain in paused mode.;protected void resumePausedTasks() {_		synchronized (this.lifecycleMonitor) {_			if (!this.pausedTasks.isEmpty()) {_				for (Iterator<?> it = this.pausedTasks.iterator()_ it.hasNext()_) {_					Object task = it.next()__					try {_						doRescheduleTask(task)__						it.remove()__						if (logger.isDebugEnabled()) {_							logger.debug("Resumed paused task: " + task)__						}_					}_					catch (RuntimeException ex) {_						logRejectedTask(task, ex)__						_					}_				}_			}_		}_	};try,to,resume,all,paused,tasks,tasks,for,which,rescheduling,failed,simply,remain,in,paused,mode;protected,void,resume,paused,tasks,synchronized,this,lifecycle,monitor,if,this,paused,tasks,is,empty,for,iterator,it,this,paused,tasks,iterator,it,has,next,object,task,it,next,try,do,reschedule,task,task,it,remove,if,logger,is,debug,enabled,logger,debug,resumed,paused,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex
AbstractJmsListeningContainer -> protected void resumePausedTasks();1355394580;Try to resume all paused tasks._Tasks for which rescheduling failed simply remain in paused mode.;protected void resumePausedTasks() {_		synchronized (this.lifecycleMonitor) {_			if (!this.pausedTasks.isEmpty()) {_				for (Iterator<?> it = this.pausedTasks.iterator()_ it.hasNext()_) {_					Object task = it.next()__					try {_						doRescheduleTask(task)__						it.remove()__						if (logger.isDebugEnabled()) {_							logger.debug("Resumed paused task: " + task)__						}_					}_					catch (RuntimeException ex) {_						logRejectedTask(task, ex)__						_					}_				}_			}_		}_	};try,to,resume,all,paused,tasks,tasks,for,which,rescheduling,failed,simply,remain,in,paused,mode;protected,void,resume,paused,tasks,synchronized,this,lifecycle,monitor,if,this,paused,tasks,is,empty,for,iterator,it,this,paused,tasks,iterator,it,has,next,object,task,it,next,try,do,reschedule,task,task,it,remove,if,logger,is,debug,enabled,logger,debug,resumed,paused,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex
AbstractJmsListeningContainer -> protected void resumePausedTasks();1356735495;Try to resume all paused tasks._Tasks for which rescheduling failed simply remain in paused mode.;protected void resumePausedTasks() {_		synchronized (this.lifecycleMonitor) {_			if (!this.pausedTasks.isEmpty()) {_				for (Iterator<?> it = this.pausedTasks.iterator()_ it.hasNext()_) {_					Object task = it.next()__					try {_						doRescheduleTask(task)__						it.remove()__						if (logger.isDebugEnabled()) {_							logger.debug("Resumed paused task: " + task)__						}_					}_					catch (RuntimeException ex) {_						logRejectedTask(task, ex)__						_					}_				}_			}_		}_	};try,to,resume,all,paused,tasks,tasks,for,which,rescheduling,failed,simply,remain,in,paused,mode;protected,void,resume,paused,tasks,synchronized,this,lifecycle,monitor,if,this,paused,tasks,is,empty,for,iterator,it,this,paused,tasks,iterator,it,has,next,object,task,it,next,try,do,reschedule,task,task,it,remove,if,logger,is,debug,enabled,logger,debug,resumed,paused,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex
AbstractJmsListeningContainer -> protected void resumePausedTasks();1357119239;Try to resume all paused tasks._Tasks for which rescheduling failed simply remain in paused mode.;protected void resumePausedTasks() {_		synchronized (this.lifecycleMonitor) {_			if (!this.pausedTasks.isEmpty()) {_				for (Iterator<?> it = this.pausedTasks.iterator()_ it.hasNext()_) {_					Object task = it.next()__					try {_						doRescheduleTask(task)__						it.remove()__						if (logger.isDebugEnabled()) {_							logger.debug("Resumed paused task: " + task)__						}_					}_					catch (RuntimeException ex) {_						logRejectedTask(task, ex)__						_					}_				}_			}_		}_	};try,to,resume,all,paused,tasks,tasks,for,which,rescheduling,failed,simply,remain,in,paused,mode;protected,void,resume,paused,tasks,synchronized,this,lifecycle,monitor,if,this,paused,tasks,is,empty,for,iterator,it,this,paused,tasks,iterator,it,has,next,object,task,it,next,try,do,reschedule,task,task,it,remove,if,logger,is,debug,enabled,logger,debug,resumed,paused,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex
AbstractJmsListeningContainer -> protected void resumePausedTasks();1368482696;Try to resume all paused tasks._Tasks for which rescheduling failed simply remain in paused mode.;protected void resumePausedTasks() {_		synchronized (this.lifecycleMonitor) {_			if (!this.pausedTasks.isEmpty()) {_				for (Iterator<?> it = this.pausedTasks.iterator()_ it.hasNext()_) {_					Object task = it.next()__					try {_						doRescheduleTask(task)__						it.remove()__						if (logger.isDebugEnabled()) {_							logger.debug("Resumed paused task: " + task)__						}_					}_					catch (RuntimeException ex) {_						logRejectedTask(task, ex)__						_					}_				}_			}_		}_	};try,to,resume,all,paused,tasks,tasks,for,which,rescheduling,failed,simply,remain,in,paused,mode;protected,void,resume,paused,tasks,synchronized,this,lifecycle,monitor,if,this,paused,tasks,is,empty,for,iterator,it,this,paused,tasks,iterator,it,has,next,object,task,it,next,try,do,reschedule,task,task,it,remove,if,logger,is,debug,enabled,logger,debug,resumed,paused,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex
AbstractJmsListeningContainer -> protected void resumePausedTasks();1403791284;Try to resume all paused tasks._Tasks for which rescheduling failed simply remain in paused mode.;protected void resumePausedTasks() {_		synchronized (this.lifecycleMonitor) {_			if (!this.pausedTasks.isEmpty()) {_				for (Iterator<?> it = this.pausedTasks.iterator()_ it.hasNext()_) {_					Object task = it.next()__					try {_						doRescheduleTask(task)__						it.remove()__						if (logger.isDebugEnabled()) {_							logger.debug("Resumed paused task: " + task)__						}_					}_					catch (RuntimeException ex) {_						logRejectedTask(task, ex)__						_					}_				}_			}_		}_	};try,to,resume,all,paused,tasks,tasks,for,which,rescheduling,failed,simply,remain,in,paused,mode;protected,void,resume,paused,tasks,synchronized,this,lifecycle,monitor,if,this,paused,tasks,is,empty,for,iterator,it,this,paused,tasks,iterator,it,has,next,object,task,it,next,try,do,reschedule,task,task,it,remove,if,logger,is,debug,enabled,logger,debug,resumed,paused,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex
AbstractJmsListeningContainer -> protected void resumePausedTasks();1462186904;Try to resume all paused tasks._Tasks for which rescheduling failed simply remain in paused mode.;protected void resumePausedTasks() {_		synchronized (this.lifecycleMonitor) {_			if (!this.pausedTasks.isEmpty()) {_				for (Iterator<?> it = this.pausedTasks.iterator()_ it.hasNext()_) {_					Object task = it.next()__					try {_						doRescheduleTask(task)__						it.remove()__						if (logger.isDebugEnabled()) {_							logger.debug("Resumed paused task: " + task)__						}_					}_					catch (RuntimeException ex) {_						logRejectedTask(task, ex)__						_					}_				}_			}_		}_	};try,to,resume,all,paused,tasks,tasks,for,which,rescheduling,failed,simply,remain,in,paused,mode;protected,void,resume,paused,tasks,synchronized,this,lifecycle,monitor,if,this,paused,tasks,is,empty,for,iterator,it,this,paused,tasks,iterator,it,has,next,object,task,it,next,try,do,reschedule,task,task,it,remove,if,logger,is,debug,enabled,logger,debug,resumed,paused,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex
AbstractJmsListeningContainer -> protected void resumePausedTasks();1467730834;Try to resume all paused tasks._Tasks for which rescheduling failed simply remain in paused mode.;protected void resumePausedTasks() {_		synchronized (this.lifecycleMonitor) {_			if (!this.pausedTasks.isEmpty()) {_				for (Iterator<?> it = this.pausedTasks.iterator()_ it.hasNext()_) {_					Object task = it.next()__					try {_						doRescheduleTask(task)__						it.remove()__						if (logger.isDebugEnabled()) {_							logger.debug("Resumed paused task: " + task)__						}_					}_					catch (RuntimeException ex) {_						logRejectedTask(task, ex)__						_					}_				}_			}_		}_	};try,to,resume,all,paused,tasks,tasks,for,which,rescheduling,failed,simply,remain,in,paused,mode;protected,void,resume,paused,tasks,synchronized,this,lifecycle,monitor,if,this,paused,tasks,is,empty,for,iterator,it,this,paused,tasks,iterator,it,has,next,object,task,it,next,try,do,reschedule,task,task,it,remove,if,logger,is,debug,enabled,logger,debug,resumed,paused,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex
AbstractJmsListeningContainer -> protected void resumePausedTasks();1495868221;Try to resume all paused tasks._Tasks for which rescheduling failed simply remain in paused mode.;protected void resumePausedTasks() {_		synchronized (this.lifecycleMonitor) {_			if (!this.pausedTasks.isEmpty()) {_				for (Iterator<?> it = this.pausedTasks.iterator()_ it.hasNext()_) {_					Object task = it.next()__					try {_						doRescheduleTask(task)__						it.remove()__						if (logger.isDebugEnabled()) {_							logger.debug("Resumed paused task: " + task)__						}_					}_					catch (RuntimeException ex) {_						logRejectedTask(task, ex)__						_					}_				}_			}_		}_	};try,to,resume,all,paused,tasks,tasks,for,which,rescheduling,failed,simply,remain,in,paused,mode;protected,void,resume,paused,tasks,synchronized,this,lifecycle,monitor,if,this,paused,tasks,is,empty,for,iterator,it,this,paused,tasks,iterator,it,has,next,object,task,it,next,try,do,reschedule,task,task,it,remove,if,logger,is,debug,enabled,logger,debug,resumed,paused,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex
AbstractJmsListeningContainer -> protected void resumePausedTasks();1498780456;Try to resume all paused tasks._Tasks for which rescheduling failed simply remain in paused mode.;protected void resumePausedTasks() {_		synchronized (this.lifecycleMonitor) {_			if (!this.pausedTasks.isEmpty()) {_				for (Iterator<?> it = this.pausedTasks.iterator()_ it.hasNext()_) {_					Object task = it.next()__					try {_						doRescheduleTask(task)__						it.remove()__						if (logger.isDebugEnabled()) {_							logger.debug("Resumed paused task: " + task)__						}_					}_					catch (RuntimeException ex) {_						logRejectedTask(task, ex)__						_					}_				}_			}_		}_	};try,to,resume,all,paused,tasks,tasks,for,which,rescheduling,failed,simply,remain,in,paused,mode;protected,void,resume,paused,tasks,synchronized,this,lifecycle,monitor,if,this,paused,tasks,is,empty,for,iterator,it,this,paused,tasks,iterator,it,has,next,object,task,it,next,try,do,reschedule,task,task,it,remove,if,logger,is,debug,enabled,logger,debug,resumed,paused,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex
AbstractJmsListeningContainer -> protected void resumePausedTasks();1500448076;Try to resume all paused tasks._Tasks for which rescheduling failed simply remain in paused mode.;protected void resumePausedTasks() {_		synchronized (this.lifecycleMonitor) {_			if (!this.pausedTasks.isEmpty()) {_				for (Iterator<?> it = this.pausedTasks.iterator()_ it.hasNext()_) {_					Object task = it.next()__					try {_						doRescheduleTask(task)__						it.remove()__						if (logger.isDebugEnabled()) {_							logger.debug("Resumed paused task: " + task)__						}_					}_					catch (RuntimeException ex) {_						logRejectedTask(task, ex)__						_					}_				}_			}_		}_	};try,to,resume,all,paused,tasks,tasks,for,which,rescheduling,failed,simply,remain,in,paused,mode;protected,void,resume,paused,tasks,synchronized,this,lifecycle,monitor,if,this,paused,tasks,is,empty,for,iterator,it,this,paused,tasks,iterator,it,has,next,object,task,it,next,try,do,reschedule,task,task,it,remove,if,logger,is,debug,enabled,logger,debug,resumed,paused,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex
AbstractJmsListeningContainer -> protected void resumePausedTasks();1521123475;Try to resume all paused tasks._Tasks for which rescheduling failed simply remain in paused mode.;protected void resumePausedTasks() {_		synchronized (this.lifecycleMonitor) {_			if (!this.pausedTasks.isEmpty()) {_				for (Iterator<?> it = this.pausedTasks.iterator()_ it.hasNext()_) {_					Object task = it.next()__					try {_						doRescheduleTask(task)__						it.remove()__						if (logger.isDebugEnabled()) {_							logger.debug("Resumed paused task: " + task)__						}_					}_					catch (RuntimeException ex) {_						logRejectedTask(task, ex)__						_					}_				}_			}_		}_	};try,to,resume,all,paused,tasks,tasks,for,which,rescheduling,failed,simply,remain,in,paused,mode;protected,void,resume,paused,tasks,synchronized,this,lifecycle,monitor,if,this,paused,tasks,is,empty,for,iterator,it,this,paused,tasks,iterator,it,has,next,object,task,it,next,try,do,reschedule,task,task,it,remove,if,logger,is,debug,enabled,logger,debug,resumed,paused,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex
AbstractJmsListeningContainer -> protected void resumePausedTasks();1534414082;Try to resume all paused tasks._Tasks for which rescheduling failed simply remain in paused mode.;protected void resumePausedTasks() {_		synchronized (this.lifecycleMonitor) {_			if (!this.pausedTasks.isEmpty()) {_				for (Iterator<?> it = this.pausedTasks.iterator()_ it.hasNext()_) {_					Object task = it.next()__					try {_						doRescheduleTask(task)__						it.remove()__						if (logger.isDebugEnabled()) {_							logger.debug("Resumed paused task: " + task)__						}_					}_					catch (RuntimeException ex) {_						logRejectedTask(task, ex)__						_					}_				}_			}_		}_	};try,to,resume,all,paused,tasks,tasks,for,which,rescheduling,failed,simply,remain,in,paused,mode;protected,void,resume,paused,tasks,synchronized,this,lifecycle,monitor,if,this,paused,tasks,is,empty,for,iterator,it,this,paused,tasks,iterator,it,has,next,object,task,it,next,try,do,reschedule,task,task,it,remove,if,logger,is,debug,enabled,logger,debug,resumed,paused,task,task,catch,runtime,exception,ex,log,rejected,task,task,ex
AbstractJmsListeningContainer -> protected void doRescheduleTask(Object task);1328020251;Reschedule the given task object immediately._<p>To be implemented by subclasses if they ever call_<code>rescheduleTaskIfNecessary</code>._This implementation throws an UnsupportedOperationException._@param task the task object to reschedule_@see #rescheduleTaskIfNecessary;protected void doRescheduleTask(Object task) {_		throw new UnsupportedOperationException(_				ClassUtils.getShortName(getClass()) + " does not support rescheduling of tasks")__	};reschedule,the,given,task,object,immediately,p,to,be,implemented,by,subclasses,if,they,ever,call,code,reschedule,task,if,necessary,code,this,implementation,throws,an,unsupported,operation,exception,param,task,the,task,object,to,reschedule,see,reschedule,task,if,necessary;protected,void,do,reschedule,task,object,task,throw,new,unsupported,operation,exception,class,utils,get,short,name,get,class,does,not,support,rescheduling,of,tasks
AbstractJmsListeningContainer -> protected void doRescheduleTask(Object task);1355394580;Reschedule the given task object immediately._<p>To be implemented by subclasses if they ever call_<code>rescheduleTaskIfNecessary</code>._This implementation throws an UnsupportedOperationException._@param task the task object to reschedule_@see #rescheduleTaskIfNecessary;protected void doRescheduleTask(Object task) {_		throw new UnsupportedOperationException(_				ClassUtils.getShortName(getClass()) + " does not support rescheduling of tasks")__	};reschedule,the,given,task,object,immediately,p,to,be,implemented,by,subclasses,if,they,ever,call,code,reschedule,task,if,necessary,code,this,implementation,throws,an,unsupported,operation,exception,param,task,the,task,object,to,reschedule,see,reschedule,task,if,necessary;protected,void,do,reschedule,task,object,task,throw,new,unsupported,operation,exception,class,utils,get,short,name,get,class,does,not,support,rescheduling,of,tasks
AbstractJmsListeningContainer -> protected void doRescheduleTask(Object task);1356735495;Reschedule the given task object immediately._<p>To be implemented by subclasses if they ever call_{@code rescheduleTaskIfNecessary}._This implementation throws an UnsupportedOperationException._@param task the task object to reschedule_@see #rescheduleTaskIfNecessary;protected void doRescheduleTask(Object task) {_		throw new UnsupportedOperationException(_				ClassUtils.getShortName(getClass()) + " does not support rescheduling of tasks")__	};reschedule,the,given,task,object,immediately,p,to,be,implemented,by,subclasses,if,they,ever,call,code,reschedule,task,if,necessary,this,implementation,throws,an,unsupported,operation,exception,param,task,the,task,object,to,reschedule,see,reschedule,task,if,necessary;protected,void,do,reschedule,task,object,task,throw,new,unsupported,operation,exception,class,utils,get,short,name,get,class,does,not,support,rescheduling,of,tasks
AbstractJmsListeningContainer -> protected void doRescheduleTask(Object task);1357119239;Reschedule the given task object immediately._<p>To be implemented by subclasses if they ever call_{@code rescheduleTaskIfNecessary}._This implementation throws an UnsupportedOperationException._@param task the task object to reschedule_@see #rescheduleTaskIfNecessary;protected void doRescheduleTask(Object task) {_		throw new UnsupportedOperationException(_				ClassUtils.getShortName(getClass()) + " does not support rescheduling of tasks")__	};reschedule,the,given,task,object,immediately,p,to,be,implemented,by,subclasses,if,they,ever,call,code,reschedule,task,if,necessary,this,implementation,throws,an,unsupported,operation,exception,param,task,the,task,object,to,reschedule,see,reschedule,task,if,necessary;protected,void,do,reschedule,task,object,task,throw,new,unsupported,operation,exception,class,utils,get,short,name,get,class,does,not,support,rescheduling,of,tasks
AbstractJmsListeningContainer -> protected void doRescheduleTask(Object task);1368482696;Reschedule the given task object immediately._<p>To be implemented by subclasses if they ever call_{@code rescheduleTaskIfNecessary}._This implementation throws an UnsupportedOperationException._@param task the task object to reschedule_@see #rescheduleTaskIfNecessary;protected void doRescheduleTask(Object task) {_		throw new UnsupportedOperationException(_				ClassUtils.getShortName(getClass()) + " does not support rescheduling of tasks")__	};reschedule,the,given,task,object,immediately,p,to,be,implemented,by,subclasses,if,they,ever,call,code,reschedule,task,if,necessary,this,implementation,throws,an,unsupported,operation,exception,param,task,the,task,object,to,reschedule,see,reschedule,task,if,necessary;protected,void,do,reschedule,task,object,task,throw,new,unsupported,operation,exception,class,utils,get,short,name,get,class,does,not,support,rescheduling,of,tasks
AbstractJmsListeningContainer -> protected void doRescheduleTask(Object task);1403791284;Reschedule the given task object immediately._<p>To be implemented by subclasses if they ever call_{@code rescheduleTaskIfNecessary}._This implementation throws an UnsupportedOperationException._@param task the task object to reschedule_@see #rescheduleTaskIfNecessary;protected void doRescheduleTask(Object task) {_		throw new UnsupportedOperationException(_				ClassUtils.getShortName(getClass()) + " does not support rescheduling of tasks")__	};reschedule,the,given,task,object,immediately,p,to,be,implemented,by,subclasses,if,they,ever,call,code,reschedule,task,if,necessary,this,implementation,throws,an,unsupported,operation,exception,param,task,the,task,object,to,reschedule,see,reschedule,task,if,necessary;protected,void,do,reschedule,task,object,task,throw,new,unsupported,operation,exception,class,utils,get,short,name,get,class,does,not,support,rescheduling,of,tasks
AbstractJmsListeningContainer -> protected void doRescheduleTask(Object task);1462186904;Reschedule the given task object immediately._<p>To be implemented by subclasses if they ever call_{@code rescheduleTaskIfNecessary}._This implementation throws an UnsupportedOperationException._@param task the task object to reschedule_@see #rescheduleTaskIfNecessary;protected void doRescheduleTask(Object task) {_		throw new UnsupportedOperationException(_				ClassUtils.getShortName(getClass()) + " does not support rescheduling of tasks")__	};reschedule,the,given,task,object,immediately,p,to,be,implemented,by,subclasses,if,they,ever,call,code,reschedule,task,if,necessary,this,implementation,throws,an,unsupported,operation,exception,param,task,the,task,object,to,reschedule,see,reschedule,task,if,necessary;protected,void,do,reschedule,task,object,task,throw,new,unsupported,operation,exception,class,utils,get,short,name,get,class,does,not,support,rescheduling,of,tasks
AbstractJmsListeningContainer -> protected void doRescheduleTask(Object task);1467730834;Reschedule the given task object immediately._<p>To be implemented by subclasses if they ever call_{@code rescheduleTaskIfNecessary}._This implementation throws an UnsupportedOperationException._@param task the task object to reschedule_@see #rescheduleTaskIfNecessary;protected void doRescheduleTask(Object task) {_		throw new UnsupportedOperationException(_				ClassUtils.getShortName(getClass()) + " does not support rescheduling of tasks")__	};reschedule,the,given,task,object,immediately,p,to,be,implemented,by,subclasses,if,they,ever,call,code,reschedule,task,if,necessary,this,implementation,throws,an,unsupported,operation,exception,param,task,the,task,object,to,reschedule,see,reschedule,task,if,necessary;protected,void,do,reschedule,task,object,task,throw,new,unsupported,operation,exception,class,utils,get,short,name,get,class,does,not,support,rescheduling,of,tasks
AbstractJmsListeningContainer -> protected void doRescheduleTask(Object task);1495868221;Reschedule the given task object immediately._<p>To be implemented by subclasses if they ever call_{@code rescheduleTaskIfNecessary}._This implementation throws an UnsupportedOperationException._@param task the task object to reschedule_@see #rescheduleTaskIfNecessary;protected void doRescheduleTask(Object task) {_		throw new UnsupportedOperationException(_				ClassUtils.getShortName(getClass()) + " does not support rescheduling of tasks")__	};reschedule,the,given,task,object,immediately,p,to,be,implemented,by,subclasses,if,they,ever,call,code,reschedule,task,if,necessary,this,implementation,throws,an,unsupported,operation,exception,param,task,the,task,object,to,reschedule,see,reschedule,task,if,necessary;protected,void,do,reschedule,task,object,task,throw,new,unsupported,operation,exception,class,utils,get,short,name,get,class,does,not,support,rescheduling,of,tasks
AbstractJmsListeningContainer -> protected void doRescheduleTask(Object task);1498780456;Reschedule the given task object immediately._<p>To be implemented by subclasses if they ever call_{@code rescheduleTaskIfNecessary}._This implementation throws an UnsupportedOperationException._@param task the task object to reschedule_@see #rescheduleTaskIfNecessary;protected void doRescheduleTask(Object task) {_		throw new UnsupportedOperationException(_				ClassUtils.getShortName(getClass()) + " does not support rescheduling of tasks")__	};reschedule,the,given,task,object,immediately,p,to,be,implemented,by,subclasses,if,they,ever,call,code,reschedule,task,if,necessary,this,implementation,throws,an,unsupported,operation,exception,param,task,the,task,object,to,reschedule,see,reschedule,task,if,necessary;protected,void,do,reschedule,task,object,task,throw,new,unsupported,operation,exception,class,utils,get,short,name,get,class,does,not,support,rescheduling,of,tasks
AbstractJmsListeningContainer -> protected void doRescheduleTask(Object task);1500448076;Reschedule the given task object immediately._<p>To be implemented by subclasses if they ever call_{@code rescheduleTaskIfNecessary}._This implementation throws an UnsupportedOperationException._@param task the task object to reschedule_@see #rescheduleTaskIfNecessary;protected void doRescheduleTask(Object task) {_		throw new UnsupportedOperationException(_				ClassUtils.getShortName(getClass()) + " does not support rescheduling of tasks")__	};reschedule,the,given,task,object,immediately,p,to,be,implemented,by,subclasses,if,they,ever,call,code,reschedule,task,if,necessary,this,implementation,throws,an,unsupported,operation,exception,param,task,the,task,object,to,reschedule,see,reschedule,task,if,necessary;protected,void,do,reschedule,task,object,task,throw,new,unsupported,operation,exception,class,utils,get,short,name,get,class,does,not,support,rescheduling,of,tasks
AbstractJmsListeningContainer -> protected void doRescheduleTask(Object task);1521123475;Reschedule the given task object immediately._<p>To be implemented by subclasses if they ever call_{@code rescheduleTaskIfNecessary}._This implementation throws an UnsupportedOperationException._@param task the task object to reschedule_@see #rescheduleTaskIfNecessary;protected void doRescheduleTask(Object task) {_		throw new UnsupportedOperationException(_				ClassUtils.getShortName(getClass()) + " does not support rescheduling of tasks")__	};reschedule,the,given,task,object,immediately,p,to,be,implemented,by,subclasses,if,they,ever,call,code,reschedule,task,if,necessary,this,implementation,throws,an,unsupported,operation,exception,param,task,the,task,object,to,reschedule,see,reschedule,task,if,necessary;protected,void,do,reschedule,task,object,task,throw,new,unsupported,operation,exception,class,utils,get,short,name,get,class,does,not,support,rescheduling,of,tasks
AbstractJmsListeningContainer -> protected void doRescheduleTask(Object task);1534414082;Reschedule the given task object immediately._<p>To be implemented by subclasses if they ever call_{@code rescheduleTaskIfNecessary}._This implementation throws an UnsupportedOperationException._@param task the task object to reschedule_@see #rescheduleTaskIfNecessary;protected void doRescheduleTask(Object task) {_		throw new UnsupportedOperationException(_				ClassUtils.getShortName(getClass()) + " does not support rescheduling of tasks")__	};reschedule,the,given,task,object,immediately,p,to,be,implemented,by,subclasses,if,they,ever,call,code,reschedule,task,if,necessary,this,implementation,throws,an,unsupported,operation,exception,param,task,the,task,object,to,reschedule,see,reschedule,task,if,necessary;protected,void,do,reschedule,task,object,task,throw,new,unsupported,operation,exception,class,utils,get,short,name,get,class,does,not,support,rescheduling,of,tasks
AbstractJmsListeningContainer -> SharedConnectionNotInitializedException -> protected SharedConnectionNotInitializedException(String msg);1328020251;Create a new SharedConnectionNotInitializedException._@param msg the detail message;protected SharedConnectionNotInitializedException(String msg) {_			super(msg)__		};create,a,new,shared,connection,not,initialized,exception,param,msg,the,detail,message;protected,shared,connection,not,initialized,exception,string,msg,super,msg
AbstractJmsListeningContainer -> SharedConnectionNotInitializedException -> protected SharedConnectionNotInitializedException(String msg);1355394580;Create a new SharedConnectionNotInitializedException._@param msg the detail message;protected SharedConnectionNotInitializedException(String msg) {_			super(msg)__		};create,a,new,shared,connection,not,initialized,exception,param,msg,the,detail,message;protected,shared,connection,not,initialized,exception,string,msg,super,msg
AbstractJmsListeningContainer -> SharedConnectionNotInitializedException -> protected SharedConnectionNotInitializedException(String msg);1356735495;Create a new SharedConnectionNotInitializedException._@param msg the detail message;protected SharedConnectionNotInitializedException(String msg) {_			super(msg)__		};create,a,new,shared,connection,not,initialized,exception,param,msg,the,detail,message;protected,shared,connection,not,initialized,exception,string,msg,super,msg
AbstractJmsListeningContainer -> SharedConnectionNotInitializedException -> protected SharedConnectionNotInitializedException(String msg);1357119239;Create a new SharedConnectionNotInitializedException._@param msg the detail message;protected SharedConnectionNotInitializedException(String msg) {_			super(msg)__		};create,a,new,shared,connection,not,initialized,exception,param,msg,the,detail,message;protected,shared,connection,not,initialized,exception,string,msg,super,msg
AbstractJmsListeningContainer -> SharedConnectionNotInitializedException -> protected SharedConnectionNotInitializedException(String msg);1368482696;Create a new SharedConnectionNotInitializedException._@param msg the detail message;protected SharedConnectionNotInitializedException(String msg) {_			super(msg)__		};create,a,new,shared,connection,not,initialized,exception,param,msg,the,detail,message;protected,shared,connection,not,initialized,exception,string,msg,super,msg
AbstractJmsListeningContainer -> SharedConnectionNotInitializedException -> protected SharedConnectionNotInitializedException(String msg);1403791284;Create a new SharedConnectionNotInitializedException._@param msg the detail message;protected SharedConnectionNotInitializedException(String msg) {_			super(msg)__		};create,a,new,shared,connection,not,initialized,exception,param,msg,the,detail,message;protected,shared,connection,not,initialized,exception,string,msg,super,msg
AbstractJmsListeningContainer -> SharedConnectionNotInitializedException -> protected SharedConnectionNotInitializedException(String msg);1462186904;Create a new SharedConnectionNotInitializedException._@param msg the detail message;protected SharedConnectionNotInitializedException(String msg) {_			super(msg)__		};create,a,new,shared,connection,not,initialized,exception,param,msg,the,detail,message;protected,shared,connection,not,initialized,exception,string,msg,super,msg
AbstractJmsListeningContainer -> SharedConnectionNotInitializedException -> protected SharedConnectionNotInitializedException(String msg);1467730834;Create a new SharedConnectionNotInitializedException._@param msg the detail message;protected SharedConnectionNotInitializedException(String msg) {_			super(msg)__		};create,a,new,shared,connection,not,initialized,exception,param,msg,the,detail,message;protected,shared,connection,not,initialized,exception,string,msg,super,msg
AbstractJmsListeningContainer -> SharedConnectionNotInitializedException -> protected SharedConnectionNotInitializedException(String msg);1495868221;Create a new SharedConnectionNotInitializedException._@param msg the detail message;protected SharedConnectionNotInitializedException(String msg) {_			super(msg)__		};create,a,new,shared,connection,not,initialized,exception,param,msg,the,detail,message;protected,shared,connection,not,initialized,exception,string,msg,super,msg
AbstractJmsListeningContainer -> SharedConnectionNotInitializedException -> protected SharedConnectionNotInitializedException(String msg);1498780456;Create a new SharedConnectionNotInitializedException._@param msg the detail message;protected SharedConnectionNotInitializedException(String msg) {_			super(msg)__		};create,a,new,shared,connection,not,initialized,exception,param,msg,the,detail,message;protected,shared,connection,not,initialized,exception,string,msg,super,msg
AbstractJmsListeningContainer -> SharedConnectionNotInitializedException -> protected SharedConnectionNotInitializedException(String msg);1500448076;Create a new SharedConnectionNotInitializedException._@param msg the detail message;protected SharedConnectionNotInitializedException(String msg) {_			super(msg)__		};create,a,new,shared,connection,not,initialized,exception,param,msg,the,detail,message;protected,shared,connection,not,initialized,exception,string,msg,super,msg
AbstractJmsListeningContainer -> SharedConnectionNotInitializedException -> protected SharedConnectionNotInitializedException(String msg);1521123475;Create a new SharedConnectionNotInitializedException._@param msg the detail message;protected SharedConnectionNotInitializedException(String msg) {_			super(msg)__		};create,a,new,shared,connection,not,initialized,exception,param,msg,the,detail,message;protected,shared,connection,not,initialized,exception,string,msg,super,msg
AbstractJmsListeningContainer -> SharedConnectionNotInitializedException -> protected SharedConnectionNotInitializedException(String msg);1534414082;Create a new SharedConnectionNotInitializedException._@param msg the detail message;protected SharedConnectionNotInitializedException(String msg) {_			super(msg)__		};create,a,new,shared,connection,not,initialized,exception,param,msg,the,detail,message;protected,shared,connection,not,initialized,exception,string,msg,super,msg
