commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Send a message to the given destination.  * @param destinationName the name of the target destination  * @param message the message to send  */ ;/**  * Send a message to the given destination.  * @param destinationName the name of the target destination  * @param message the message to send  */ void send(String destinationName, Message<?> message) throws MessagingException.
true;;2;1;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message and send it to the given destination.  * @param destinationName the name of the target destination  * @param payload the Object to use as payload  */ ;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message and send it to the given destination.  * @param destinationName the name of the target destination  * @param payload the Object to use as payload  */ void convertAndSend(String destinationName, Object payload) throws MessagingException.
true;;3;2;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message with the given headers and send it to  * the given destination.  * @param destinationName the name of the target destination  * @param payload the Object to use as payload  * @param headers headers for the message to send  */ ;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message with the given headers and send it to  * the given destination.  * @param destinationName the name of the target destination  * @param payload the Object to use as payload  * @param headers headers for the message to send  */ void convertAndSend(String destinationName, Object payload, Map<String, Object> headers) throws MessagingException.
true;;3;2;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message, apply the given post processor, and send  * the resulting message to the given destination.  * @param destinationName the name of the target destination  * @param payload the Object to use as payload  * @param postProcessor the post processor to apply to the message  */ ;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message, apply the given post processor, and send  * the resulting message to the given destination.  * @param destinationName the name of the target destination  * @param payload the Object to use as payload  * @param postProcessor the post processor to apply to the message  */ void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor) throws MessagingException.
true;;4;2;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message with the given headers, apply the given post processor,  * and send the resulting message to the given destination.  * @param destinationName the name of the target destination  * @param payload the Object to use as payload  * @param headers headers for the message to send  * @param postProcessor the post processor to apply to the message  */ ;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message with the given headers, apply the given post processor,  * and send the resulting message to the given destination.  * @param destinationName the name of the target destination  * @param payload the Object to use as payload  * @param headers headers for the message to send  * @param postProcessor the post processor to apply to the message  */ void convertAndSend(String destinationName, Object payload, @Nullable Map<String, Object> headers, @Nullable MessagePostProcessor postProcessor) throws MessagingException.
true;;1;2;/**  * Receive a message from the given destination.  * @param destinationName the name of the target destination  * @return the received message, possibly {@code null} if the message could not  * be received, for example due to a timeout  */ ;/**  * Receive a message from the given destination.  * @param destinationName the name of the target destination  * @return the received message, possibly {@code null} if the message could not  * be received, for example due to a timeout  */ @Nullable Message<?> receive(String destinationName) throws MessagingException.
true;;2;2;/**  * Receive a message from the given destination and convert its payload to the  * specified target class.  * @param destinationName the name of the target destination  * @param targetClass the target class to convert the payload to  * @return the converted payload of the reply message, possibly {@code null} if  * the message could not be received, for example due to a timeout  */ ;/**  * Receive a message from the given destination and convert its payload to the  * specified target class.  * @param destinationName the name of the target destination  * @param targetClass the target class to convert the payload to  * @return the converted payload of the reply message, possibly {@code null} if  * the message could not be received, for example due to a timeout  */ @Nullable <T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException.
true;;2;2;/**  * Send a request message and receive the reply from the given destination.  * @param destinationName the name of the target destination  * @param requestMessage the message to send  * @return the reply, possibly {@code null} if the message could not be received,  * for example due to a timeout  */ ;/**  * Send a request message and receive the reply from the given destination.  * @param destinationName the name of the target destination  * @param requestMessage the message to send  * @return the reply, possibly {@code null} if the message could not be received,  * for example due to a timeout  */ @Nullable Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException.
true;;3;2;/**  * Convert the given request Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter}, send  * it as a {@link Message} to the given destination, receive the reply and convert  * its body of the specified target class.  * @param destinationName the name of the target destination  * @param request payload for the request message to send  * @param targetClass the target type to convert the payload of the reply to  * @return the payload of the reply message, possibly {@code null} if the message  * could not be received, for example due to a timeout  */ ;/**  * Convert the given request Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter}, send  * it as a {@link Message} to the given destination, receive the reply and convert  * its body of the specified target class.  * @param destinationName the name of the target destination  * @param request payload for the request message to send  * @param targetClass the target type to convert the payload of the reply to  * @return the payload of the reply message, possibly {@code null} if the message  * could not be received, for example due to a timeout  */ @Nullable <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException.
true;;4;3;/**  * Convert the given request Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter}, send  * it as a {@link Message} with the given headers, to the specified destination,  * receive the reply and convert its body of the specified target class.  * @param destinationName the name of the target destination  * @param request payload for the request message to send  * @param headers headers for the request message to send  * @param targetClass the target type to convert the payload of the reply to  * @return the payload of the reply message, possibly {@code null} if the message  * could not be received, for example due to a timeout  */ ;/**  * Convert the given request Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter}, send  * it as a {@link Message} with the given headers, to the specified destination,  * receive the reply and convert its body of the specified target class.  * @param destinationName the name of the target destination  * @param request payload for the request message to send  * @param headers headers for the request message to send  * @param targetClass the target type to convert the payload of the reply to  * @return the payload of the reply message, possibly {@code null} if the message  * could not be received, for example due to a timeout  */ @Nullable <T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass) throws MessagingException.
true;;4;3;/**  * Convert the given request Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * apply the given post processor and send the resulting {@link Message} to the  * given destination, receive the reply and convert its body of the given  * target class.  * @param destinationName the name of the target destination  * @param request payload for the request message to send  * @param targetClass the target type to convert the payload of the reply to  * @param requestPostProcessor post process to apply to the request message  * @return the payload of the reply message, possibly {@code null} if the message  * could not be received, for example due to a timeout  */ ;/**  * Convert the given request Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * apply the given post processor and send the resulting {@link Message} to the  * given destination, receive the reply and convert its body of the given  * target class.  * @param destinationName the name of the target destination  * @param request payload for the request message to send  * @param targetClass the target type to convert the payload of the reply to  * @param requestPostProcessor post process to apply to the request message  * @return the payload of the reply message, possibly {@code null} if the message  * could not be received, for example due to a timeout  */ @Nullable <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException.
true;;5;3;/**  * Convert the given request Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message with the given headers, apply the given post processor  * and send the resulting {@link Message} to the specified destination, receive  * the reply and convert its body of the given target class.  * @param destinationName the name of the target destination  * @param request payload for the request message to send  * @param targetClass the target type to convert the payload of the reply to  * @param requestPostProcessor post process to apply to the request message  * @return the payload of the reply message, possibly {@code null} if the message  * could not be received, for example due to a timeout  */ ;/**  * Convert the given request Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message with the given headers, apply the given post processor  * and send the resulting {@link Message} to the specified destination, receive  * the reply and convert its body of the given target class.  * @param destinationName the name of the target destination  * @param request payload for the request message to send  * @param targetClass the target type to convert the payload of the reply to  * @param requestPostProcessor post process to apply to the request message  * @return the payload of the reply message, possibly {@code null} if the message  * could not be received, for example due to a timeout  */ @Nullable <T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException.
