# id;timestamp;commentText;codeText;commentWords;codeWords
JmsMessageOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, Class<T> targetClass) 			throws MessagingException_;1406555570;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} with the given headers, to the specified destination,_receive the reply and convert its body of the specified target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param headers headers for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, Class<T> targetClass)_			throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,with,the,given,headers,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,headers,headers,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,map,string,object,headers,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, Class<T> targetClass) 			throws MessagingException_;1409589067;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} with the given headers, to the specified destination,_receive the reply and convert its body of the specified target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param headers headers for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, Class<T> targetClass)_			throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,with,the,given,headers,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,headers,headers,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,map,string,object,headers,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, Class<T> targetClass) 			throws MessagingException_;1413848647;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} with the given headers, to the specified destination,_receive the reply and convert its body of the specified target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param headers headers for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, Class<T> targetClass)_			throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,with,the,given,headers,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,headers,headers,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,map,string,object,headers,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, Map<String, Object> headers) 			throws MessagingException_;1404937154;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers and send it to_the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send;void convertAndSend(String destinationName, Object payload, Map<String, Object> headers)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send;void,convert,and,send,string,destination,name,object,payload,map,string,object,headers,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, Map<String, Object> headers) 			throws MessagingException_;1406214751;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers and send it to_the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send;void convertAndSend(String destinationName, Object payload, Map<String, Object> headers)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send;void,convert,and,send,string,destination,name,object,payload,map,string,object,headers,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, Map<String, Object> headers) 			throws MessagingException_;1406555570;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers and send it to_the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send;void convertAndSend(String destinationName, Object payload, Map<String, Object> headers)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send;void,convert,and,send,string,destination,name,object,payload,map,string,object,headers,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, Map<String, Object> headers) 			throws MessagingException_;1409589067;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers and send it to_the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send;void convertAndSend(String destinationName, Object payload, Map<String, Object> headers)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send;void,convert,and,send,string,destination,name,object,payload,map,string,object,headers,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, Map<String, Object> headers) 			throws MessagingException_;1413848647;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers and send it to_the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send;void convertAndSend(String destinationName, Object payload, Map<String, Object> headers)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send;void,convert,and,send,string,destination,name,object,payload,map,string,object,headers,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, Map<String, Object> headers) 			throws MessagingException_;1495868221;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers and send it to_the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send;void convertAndSend(String destinationName, Object payload, Map<String, Object> headers)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send;void,convert,and,send,string,destination,name,object,payload,map,string,object,headers,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, Map<String, Object> headers) 			throws MessagingException_;1496259743;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers and send it to_the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send;void convertAndSend(String destinationName, Object payload, Map<String, Object> headers)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send;void,convert,and,send,string,destination,name,object,payload,map,string,object,headers,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, Map<String, Object> headers) 			throws MessagingException_;1496837955;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers and send it to_the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send;void convertAndSend(String destinationName, Object payload, Map<String, Object> headers)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send;void,convert,and,send,string,destination,name,object,payload,map,string,object,headers,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, Map<String, Object> headers) 			throws MessagingException_;1530174524;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers and send it to_the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send;void convertAndSend(String destinationName, Object payload, Map<String, Object> headers)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send;void,convert,and,send,string,destination,name,object,payload,map,string,object,headers,throws,messaging,exception
JmsMessageOperations -> Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;1406555570;Send a request message and receive the reply from the given destination._@param destinationName the name of the target destination_@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;message,send,and,receive,string,destination,name,message,request,message,throws,messaging,exception
JmsMessageOperations -> Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;1409589067;Send a request message and receive the reply from the given destination._@param destinationName the name of the target destination_@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;message,send,and,receive,string,destination,name,message,request,message,throws,messaging,exception
JmsMessageOperations -> Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;1413848647;Send a request message and receive the reply from the given destination._@param destinationName the name of the target destination_@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;message,send,and,receive,string,destination,name,message,request,message,throws,messaging,exception
JmsMessageOperations -> <T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;1404937154;Receive a message from the given destination and convert its payload to the_specified target class._@param destinationName the name of the target destination_@param targetClass the target class to convert the payload to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;<T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;receive,a,message,from,the,given,destination,and,convert,its,payload,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,target,class,the,target,class,to,convert,the,payload,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,receive,and,convert,string,destination,name,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> <T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;1406214751;Receive a message from the given destination and convert its payload to the_specified target class._@param destinationName the name of the target destination_@param targetClass the target class to convert the payload to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;<T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;receive,a,message,from,the,given,destination,and,convert,its,payload,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,target,class,the,target,class,to,convert,the,payload,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,receive,and,convert,string,destination,name,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> <T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;1406555570;Receive a message from the given destination and convert its payload to the_specified target class._@param destinationName the name of the target destination_@param targetClass the target class to convert the payload to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;<T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;receive,a,message,from,the,given,destination,and,convert,its,payload,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,target,class,the,target,class,to,convert,the,payload,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,receive,and,convert,string,destination,name,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> <T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;1409589067;Receive a message from the given destination and convert its payload to the_specified target class._@param destinationName the name of the target destination_@param targetClass the target class to convert the payload to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;<T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;receive,a,message,from,the,given,destination,and,convert,its,payload,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,target,class,the,target,class,to,convert,the,payload,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,receive,and,convert,string,destination,name,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> <T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;1413848647;Receive a message from the given destination and convert its payload to the_specified target class._@param destinationName the name of the target destination_@param targetClass the target class to convert the payload to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;<T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;receive,a,message,from,the,given,destination,and,convert,its,payload,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,target,class,the,target,class,to,convert,the,payload,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,receive,and,convert,string,destination,name,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload) throws MessagingException_;1404937154;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message and send it to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload;void convertAndSend(String destinationName, Object payload) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload;void,convert,and,send,string,destination,name,object,payload,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload) throws MessagingException_;1406214751;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message and send it to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload;void convertAndSend(String destinationName, Object payload) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload;void,convert,and,send,string,destination,name,object,payload,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload) throws MessagingException_;1406555570;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message and send it to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload;void convertAndSend(String destinationName, Object payload) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload;void,convert,and,send,string,destination,name,object,payload,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload) throws MessagingException_;1409589067;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message and send it to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload;void convertAndSend(String destinationName, Object payload) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload;void,convert,and,send,string,destination,name,object,payload,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload) throws MessagingException_;1413848647;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message and send it to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload;void convertAndSend(String destinationName, Object payload) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload;void,convert,and,send,string,destination,name,object,payload,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload) throws MessagingException_;1495868221;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message and send it to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload;void convertAndSend(String destinationName, Object payload) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload;void,convert,and,send,string,destination,name,object,payload,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload) throws MessagingException_;1496259743;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message and send it to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload;void convertAndSend(String destinationName, Object payload) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload;void,convert,and,send,string,destination,name,object,payload,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload) throws MessagingException_;1496837955;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message and send it to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload;void convertAndSend(String destinationName, Object payload) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload;void,convert,and,send,string,destination,name,object,payload,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload) throws MessagingException_;1530174524;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message and send it to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload;void convertAndSend(String destinationName, Object payload) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,and,send,it,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload;void,convert,and,send,string,destination,name,object,payload,throws,messaging,exception
JmsMessageOperations -> @Nullable 	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;1495868221;Send a request message and receive the reply from the given destination._@param destinationName the name of the target destination_@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;@Nullable_	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,send,and,receive,string,destination,name,message,request,message,throws,messaging,exception
JmsMessageOperations -> @Nullable 	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;1496259743;Send a request message and receive the reply from the given destination._@param destinationName the name of the target destination_@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;@Nullable_	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,send,and,receive,string,destination,name,message,request,message,throws,messaging,exception
JmsMessageOperations -> @Nullable 	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;1496837955;Send a request message and receive the reply from the given destination._@param destinationName the name of the target destination_@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;@Nullable_	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,send,and,receive,string,destination,name,message,request,message,throws,messaging,exception
JmsMessageOperations -> @Nullable 	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;1530174524;Send a request message and receive the reply from the given destination._@param destinationName the name of the target destination_@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;@Nullable_	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,send,and,receive,string,destination,name,message,request,message,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor) 			throws MessagingException_;1404937154;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message, apply the given post processor, and send_the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor) 			throws MessagingException_;1406214751;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message, apply the given post processor, and send_the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor) 			throws MessagingException_;1406555570;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message, apply the given post processor, and send_the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor) 			throws MessagingException_;1409589067;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message, apply the given post processor, and send_the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor) 			throws MessagingException_;1413848647;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message, apply the given post processor, and send_the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor) 			throws MessagingException_;1495868221;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message, apply the given post processor, and send_the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor) 			throws MessagingException_;1496259743;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message, apply the given post processor, and send_the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor) 			throws MessagingException_;1496837955;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message, apply the given post processor, and send_the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor) 			throws MessagingException_;1530174524;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message, apply the given post processor, and send_the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor)_			throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, 			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;1406555570;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor_and send the resulting {@link Message} to the specified destination, receive_the reply and convert its body of the given target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,_			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,map,string,object,headers,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
JmsMessageOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, 			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;1409589067;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor_and send the resulting {@link Message} to the specified destination, receive_the reply and convert its body of the given target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,_			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,map,string,object,headers,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
JmsMessageOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, 			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;1413848647;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor_and send the resulting {@link Message} to the specified destination, receive_the reply and convert its body of the given target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,_			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,map,string,object,headers,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass) 			throws MessagingException_;1496259743;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} with the given headers, to the specified destination,_receive the reply and convert its body of the specified target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param headers headers for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass)_			throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,with,the,given,headers,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,headers,headers,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,nullable,map,string,object,headers,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass) 			throws MessagingException_;1496837955;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} with the given headers, to the specified destination,_receive the reply and convert its body of the specified target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param headers headers for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass)_			throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,with,the,given,headers,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,headers,headers,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,nullable,map,string,object,headers,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass) 			throws MessagingException_;1530174524;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} with the given headers, to the specified destination,_receive the reply and convert its body of the specified target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param headers headers for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass)_			throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,with,the,given,headers,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,headers,headers,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,nullable,map,string,object,headers,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> @Nullable 	Message<?> receive(String destinationName) throws MessagingException_;1495868221;Receive a message from the given destination._@param destinationName the name of the target destination_@return the received message, possibly {@code null} if the message could not_be received, for example due to a timeout;@Nullable_	Message<?> receive(String destinationName) throws MessagingException_;receive,a,message,from,the,given,destination,param,destination,name,the,name,of,the,target,destination,return,the,received,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,receive,string,destination,name,throws,messaging,exception
JmsMessageOperations -> @Nullable 	Message<?> receive(String destinationName) throws MessagingException_;1496259743;Receive a message from the given destination._@param destinationName the name of the target destination_@return the received message, possibly {@code null} if the message could not_be received, for example due to a timeout;@Nullable_	Message<?> receive(String destinationName) throws MessagingException_;receive,a,message,from,the,given,destination,param,destination,name,the,name,of,the,target,destination,return,the,received,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,receive,string,destination,name,throws,messaging,exception
JmsMessageOperations -> @Nullable 	Message<?> receive(String destinationName) throws MessagingException_;1496837955;Receive a message from the given destination._@param destinationName the name of the target destination_@return the received message, possibly {@code null} if the message could not_be received, for example due to a timeout;@Nullable_	Message<?> receive(String destinationName) throws MessagingException_;receive,a,message,from,the,given,destination,param,destination,name,the,name,of,the,target,destination,return,the,received,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,receive,string,destination,name,throws,messaging,exception
JmsMessageOperations -> @Nullable 	Message<?> receive(String destinationName) throws MessagingException_;1530174524;Receive a message from the given destination._@param destinationName the name of the target destination_@return the received message, possibly {@code null} if the message could not_be received, for example due to a timeout;@Nullable_	Message<?> receive(String destinationName) throws MessagingException_;receive,a,message,from,the,given,destination,param,destination,name,the,name,of,the,target,destination,return,the,received,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,receive,string,destination,name,throws,messaging,exception
JmsMessageOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException_;1406555570;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to the given destination, receive the reply and convert_its body of the specified target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException_;1409589067;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to the given destination, receive the reply and convert_its body of the specified target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException_;1413848647;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to the given destination, receive the reply and convert_its body of the specified target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> void send(String destinationName, Message<?> message) throws MessagingException_;1404937154;Send a message to the given destination._@param destinationName the name of the target destination_@param message the message to send;void send(String destinationName, Message<?> message) throws MessagingException_;send,a,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,message,the,message,to,send;void,send,string,destination,name,message,message,throws,messaging,exception
JmsMessageOperations -> void send(String destinationName, Message<?> message) throws MessagingException_;1406214751;Send a message to the given destination._@param destinationName the name of the target destination_@param message the message to send;void send(String destinationName, Message<?> message) throws MessagingException_;send,a,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,message,the,message,to,send;void,send,string,destination,name,message,message,throws,messaging,exception
JmsMessageOperations -> void send(String destinationName, Message<?> message) throws MessagingException_;1406555570;Send a message to the given destination._@param destinationName the name of the target destination_@param message the message to send;void send(String destinationName, Message<?> message) throws MessagingException_;send,a,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,message,the,message,to,send;void,send,string,destination,name,message,message,throws,messaging,exception
JmsMessageOperations -> void send(String destinationName, Message<?> message) throws MessagingException_;1409589067;Send a message to the given destination._@param destinationName the name of the target destination_@param message the message to send;void send(String destinationName, Message<?> message) throws MessagingException_;send,a,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,message,the,message,to,send;void,send,string,destination,name,message,message,throws,messaging,exception
JmsMessageOperations -> void send(String destinationName, Message<?> message) throws MessagingException_;1413848647;Send a message to the given destination._@param destinationName the name of the target destination_@param message the message to send;void send(String destinationName, Message<?> message) throws MessagingException_;send,a,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,message,the,message,to,send;void,send,string,destination,name,message,message,throws,messaging,exception
JmsMessageOperations -> void send(String destinationName, Message<?> message) throws MessagingException_;1495868221;Send a message to the given destination._@param destinationName the name of the target destination_@param message the message to send;void send(String destinationName, Message<?> message) throws MessagingException_;send,a,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,message,the,message,to,send;void,send,string,destination,name,message,message,throws,messaging,exception
JmsMessageOperations -> void send(String destinationName, Message<?> message) throws MessagingException_;1496259743;Send a message to the given destination._@param destinationName the name of the target destination_@param message the message to send;void send(String destinationName, Message<?> message) throws MessagingException_;send,a,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,message,the,message,to,send;void,send,string,destination,name,message,message,throws,messaging,exception
JmsMessageOperations -> void send(String destinationName, Message<?> message) throws MessagingException_;1496837955;Send a message to the given destination._@param destinationName the name of the target destination_@param message the message to send;void send(String destinationName, Message<?> message) throws MessagingException_;send,a,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,message,the,message,to,send;void,send,string,destination,name,message,message,throws,messaging,exception
JmsMessageOperations -> void send(String destinationName, Message<?> message) throws MessagingException_;1530174524;Send a message to the given destination._@param destinationName the name of the target destination_@param message the message to send;void send(String destinationName, Message<?> message) throws MessagingException_;send,a,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,message,the,message,to,send;void,send,string,destination,name,message,message,throws,messaging,exception
JmsMessageOperations -> Message<?> receive(String destinationName) throws MessagingException_;1404937154;Receive a message from the given destination._@param destinationName the name of the target destination_@return the received message, possibly {@code null} if the message could not_be received, for example due to a timeout;Message<?> receive(String destinationName) throws MessagingException_;receive,a,message,from,the,given,destination,param,destination,name,the,name,of,the,target,destination,return,the,received,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;message,receive,string,destination,name,throws,messaging,exception
JmsMessageOperations -> Message<?> receive(String destinationName) throws MessagingException_;1406214751;Receive a message from the given destination._@param destinationName the name of the target destination_@return the received message, possibly {@code null} if the message could not_be received, for example due to a timeout;Message<?> receive(String destinationName) throws MessagingException_;receive,a,message,from,the,given,destination,param,destination,name,the,name,of,the,target,destination,return,the,received,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;message,receive,string,destination,name,throws,messaging,exception
JmsMessageOperations -> Message<?> receive(String destinationName) throws MessagingException_;1406555570;Receive a message from the given destination._@param destinationName the name of the target destination_@return the received message, possibly {@code null} if the message could not_be received, for example due to a timeout;Message<?> receive(String destinationName) throws MessagingException_;receive,a,message,from,the,given,destination,param,destination,name,the,name,of,the,target,destination,return,the,received,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;message,receive,string,destination,name,throws,messaging,exception
JmsMessageOperations -> Message<?> receive(String destinationName) throws MessagingException_;1409589067;Receive a message from the given destination._@param destinationName the name of the target destination_@return the received message, possibly {@code null} if the message could not_be received, for example due to a timeout;Message<?> receive(String destinationName) throws MessagingException_;receive,a,message,from,the,given,destination,param,destination,name,the,name,of,the,target,destination,return,the,received,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;message,receive,string,destination,name,throws,messaging,exception
JmsMessageOperations -> Message<?> receive(String destinationName) throws MessagingException_;1413848647;Receive a message from the given destination._@param destinationName the name of the target destination_@return the received message, possibly {@code null} if the message could not_be received, for example due to a timeout;Message<?> receive(String destinationName) throws MessagingException_;receive,a,message,from,the,given,destination,param,destination,name,the,name,of,the,target,destination,return,the,received,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;message,receive,string,destination,name,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, 			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;1495868221;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor_and send the resulting {@link Message} to the specified destination, receive_the reply and convert its body of the given target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,_			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,map,string,object,headers,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, 			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;1496259743;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor_and send the resulting {@link Message} to the specified destination, receive_the reply and convert its body of the given target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,_			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,map,string,object,headers,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, 			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;1496837955;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor_and send the resulting {@link Message} to the specified destination, receive_the reply and convert its body of the given target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,_			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,map,string,object,headers,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, 			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;1530174524;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor_and send the resulting {@link Message} to the specified destination, receive_the reply and convert its body of the given target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,_			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,map,string,object,headers,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException_;1495868221;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to the given destination, receive the reply and convert_its body of the specified target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException_;1496259743;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to the given destination, receive the reply and convert_its body of the specified target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException_;1496837955;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to the given destination, receive the reply and convert_its body of the specified target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException_;1530174524;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to the given destination, receive the reply and convert_its body of the specified target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, @Nullable Map<String, Object> headers, 			@Nullable MessagePostProcessor postProcessor) throws MessagingException_;1496837955;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor,_and send the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, @Nullable Map<String, Object> headers,_			@Nullable MessagePostProcessor postProcessor) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,nullable,map,string,object,headers,nullable,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, @Nullable Map<String, Object> headers, 			@Nullable MessagePostProcessor postProcessor) throws MessagingException_;1530174524;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor,_and send the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, @Nullable Map<String, Object> headers,_			@Nullable MessagePostProcessor postProcessor) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,nullable,map,string,object,headers,nullable,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass, 			MessagePostProcessor requestPostProcessor) throws MessagingException_;1495868221;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to the_given destination, receive the reply and convert its body of the given_target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass,_			MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass, 			MessagePostProcessor requestPostProcessor) throws MessagingException_;1496259743;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to the_given destination, receive the reply and convert its body of the given_target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass,_			MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass, 			MessagePostProcessor requestPostProcessor) throws MessagingException_;1496837955;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to the_given destination, receive the reply and convert its body of the given_target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass,_			MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass, 			MessagePostProcessor requestPostProcessor) throws MessagingException_;1530174524;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to the_given destination, receive the reply and convert its body of the given_target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass,_			MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, Map<String, 			Object> headers, MessagePostProcessor postProcessor) throws MessagingException_;1404937154;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor,_and send the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, Map<String,_			Object> headers, MessagePostProcessor postProcessor) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,map,string,object,headers,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, Map<String, 			Object> headers, MessagePostProcessor postProcessor) throws MessagingException_;1406214751;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor,_and send the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, Map<String,_			Object> headers, MessagePostProcessor postProcessor) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,map,string,object,headers,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, Map<String, 			Object> headers, MessagePostProcessor postProcessor) throws MessagingException_;1406555570;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor,_and send the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, Map<String,_			Object> headers, MessagePostProcessor postProcessor) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,map,string,object,headers,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, Map<String, 			Object> headers, MessagePostProcessor postProcessor) throws MessagingException_;1409589067;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor,_and send the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, Map<String,_			Object> headers, MessagePostProcessor postProcessor) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,map,string,object,headers,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, Map<String, 			Object> headers, MessagePostProcessor postProcessor) throws MessagingException_;1413848647;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor,_and send the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, Map<String,_			Object> headers, MessagePostProcessor postProcessor) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,map,string,object,headers,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> void convertAndSend(String destinationName, Object payload, Map<String, 			Object> headers, MessagePostProcessor postProcessor) throws MessagingException_;1495868221;Convert the given Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor,_and send the resulting message to the given destination._@param destinationName the name of the target destination_@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message;void convertAndSend(String destinationName, Object payload, Map<String,_			Object> headers, MessagePostProcessor postProcessor) throws MessagingException_;convert,the,given,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,message,to,the,given,destination,param,destination,name,the,name,of,the,target,destination,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message;void,convert,and,send,string,destination,name,object,payload,map,string,object,headers,message,post,processor,post,processor,throws,messaging,exception
JmsMessageOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass, 			MessagePostProcessor requestPostProcessor) throws MessagingException_;1406555570;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to the_given destination, receive the reply and convert its body of the given_target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass,_			MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
JmsMessageOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass, 			MessagePostProcessor requestPostProcessor) throws MessagingException_;1409589067;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to the_given destination, receive the reply and convert its body of the given_target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass,_			MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
JmsMessageOperations -> <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass, 			MessagePostProcessor requestPostProcessor) throws MessagingException_;1413848647;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to the_given destination, receive the reply and convert its body of the given_target class._@param destinationName the name of the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass,_			MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,name,the,name,of,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,string,destination,name,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;1495868221;Receive a message from the given destination and convert its payload to the_specified target class._@param destinationName the name of the target destination_@param targetClass the target class to convert the payload to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;receive,a,message,from,the,given,destination,and,convert,its,payload,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,target,class,the,target,class,to,convert,the,payload,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,receive,and,convert,string,destination,name,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;1496259743;Receive a message from the given destination and convert its payload to the_specified target class._@param destinationName the name of the target destination_@param targetClass the target class to convert the payload to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;receive,a,message,from,the,given,destination,and,convert,its,payload,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,target,class,the,target,class,to,convert,the,payload,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,receive,and,convert,string,destination,name,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;1496837955;Receive a message from the given destination and convert its payload to the_specified target class._@param destinationName the name of the target destination_@param targetClass the target class to convert the payload to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;receive,a,message,from,the,given,destination,and,convert,its,payload,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,target,class,the,target,class,to,convert,the,payload,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,receive,and,convert,string,destination,name,class,t,target,class,throws,messaging,exception
JmsMessageOperations -> @Nullable 	<T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;1530174524;Receive a message from the given destination and convert its payload to the_specified target class._@param destinationName the name of the target destination_@param targetClass the target class to convert the payload to_@return the converted payload of the reply message, possibly {@code null} if_the message could not be received, for example due to a timeout;@Nullable_	<T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException_;receive,a,message,from,the,given,destination,and,convert,its,payload,to,the,specified,target,class,param,destination,name,the,name,of,the,target,destination,param,target,class,the,target,class,to,convert,the,payload,to,return,the,converted,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,receive,and,convert,string,destination,name,class,t,target,class,throws,messaging,exception
