commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the {@link Marshaller} to be used by this message converter.  */ ;/**  * Set the {@link Marshaller} to be used by this message converter.  */ public void setMarshaller(Marshaller marshaller) {     Assert.notNull(marshaller, "Marshaller must not be null").     this.marshaller = marshaller. }
true;public;1;4;/**  * Set the {@link Unmarshaller} to be used by this message converter.  */ ;/**  * Set the {@link Unmarshaller} to be used by this message converter.  */ public void setUnmarshaller(Unmarshaller unmarshaller) {     Assert.notNull(unmarshaller, "Unmarshaller must not be null").     this.unmarshaller = unmarshaller. }
true;public;1;4;/**  * Specify whether {@link #toMessage(Object, Session)} should marshal to  * a {@link BytesMessage} or a {@link TextMessage}.  * <p>The default is {@link MessageType#BYTES}, i.e. this converter marshals  * to a {@link BytesMessage}. Note that the default version of this converter  * supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only.  * @see MessageType#BYTES  * @see MessageType#TEXT  */ ;/**  * Specify whether {@link #toMessage(Object, Session)} should marshal to  * a {@link BytesMessage} or a {@link TextMessage}.  * <p>The default is {@link MessageType#BYTES}, i.e. this converter marshals  * to a {@link BytesMessage}. Note that the default version of this converter  * supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only.  * @see MessageType#BYTES  * @see MessageType#TEXT  */ public void setTargetType(MessageType targetType) {     Assert.notNull(targetType, "MessageType must not be null").     this.targetType = targetType. }
false;public;0;5;;@Override public void afterPropertiesSet() {     Assert.notNull(this.marshaller, "Property 'marshaller' is required").     Assert.notNull(this.unmarshaller, "Property 'unmarshaller' is required"). }
true;public;2;17;/**  * This implementation marshals the given object to a {@link javax.jms.TextMessage} or  * {@link javax.jms.BytesMessage}. The desired message type can be defined by setting  * the {@link #setTargetType "marshalTo"} property.  * @see #marshalToTextMessage  * @see #marshalToBytesMessage  */ ;/**  * This implementation marshals the given object to a {@link javax.jms.TextMessage} or  * {@link javax.jms.BytesMessage}. The desired message type can be defined by setting  * the {@link #setTargetType "marshalTo"} property.  * @see #marshalToTextMessage  * @see #marshalToBytesMessage  */ @Override public Message toMessage(Object object, Session session) throws JMSException, MessageConversionException {     Assert.state(this.marshaller != null, "No Marshaller set").     try {         switch(this.targetType) {             case TEXT:                 return marshalToTextMessage(object, session, this.marshaller).             case BYTES:                 return marshalToBytesMessage(object, session, this.marshaller).             default:                 return marshalToMessage(object, session, this.marshaller, this.targetType).         }     } catch (XmlMappingException | IOException ex) {         throw new MessageConversionException("Could not marshal [" + object + "]", ex).     } }
true;public;1;23;/**  * This implementation unmarshals the given {@link Message} into an object.  * @see #unmarshalFromTextMessage  * @see #unmarshalFromBytesMessage  */ ;/**  * This implementation unmarshals the given {@link Message} into an object.  * @see #unmarshalFromTextMessage  * @see #unmarshalFromBytesMessage  */ @Override public Object fromMessage(Message message) throws JMSException, MessageConversionException {     Assert.state(this.unmarshaller != null, "No Unmarshaller set").     try {         if (message instanceof TextMessage) {             TextMessage textMessage = (TextMessage) message.             return unmarshalFromTextMessage(textMessage, this.unmarshaller).         } else if (message instanceof BytesMessage) {             BytesMessage bytesMessage = (BytesMessage) message.             return unmarshalFromBytesMessage(bytesMessage, this.unmarshaller).         } else {             return unmarshalFromMessage(message, this.unmarshaller).         }     } catch (IOException ex) {         throw new MessageConversionException("Could not access message content: " + message, ex).     } catch (XmlMappingException ex) {         throw new MessageConversionException("Could not unmarshal message: " + message, ex).     } }
true;protected;3;8;/**  * Marshal the given object to a {@link TextMessage}.  * @param object the object to be marshalled  * @param session current JMS session  * @param marshaller the marshaller to use  * @return the resulting message  * @throws JMSException if thrown by JMS methods  * @throws IOException in case of I/O errors  * @throws XmlMappingException in case of OXM mapping errors  * @see Session#createTextMessage  * @see Marshaller#marshal(Object, Result)  */ ;/**  * Marshal the given object to a {@link TextMessage}.  * @param object the object to be marshalled  * @param session current JMS session  * @param marshaller the marshaller to use  * @return the resulting message  * @throws JMSException if thrown by JMS methods  * @throws IOException in case of I/O errors  * @throws XmlMappingException in case of OXM mapping errors  * @see Session#createTextMessage  * @see Marshaller#marshal(Object, Result)  */ protected TextMessage marshalToTextMessage(Object object, Session session, Marshaller marshaller) throws JMSException, IOException, XmlMappingException {     StringWriter writer = new StringWriter().     Result result = new StreamResult(writer).     marshaller.marshal(object, result).     return session.createTextMessage(writer.toString()). }
true;protected;3;10;/**  * Marshal the given object to a {@link BytesMessage}.  * @param object the object to be marshalled  * @param session current JMS session  * @param marshaller the marshaller to use  * @return the resulting message  * @throws JMSException if thrown by JMS methods  * @throws IOException in case of I/O errors  * @throws XmlMappingException in case of OXM mapping errors  * @see Session#createBytesMessage  * @see Marshaller#marshal(Object, Result)  */ ;/**  * Marshal the given object to a {@link BytesMessage}.  * @param object the object to be marshalled  * @param session current JMS session  * @param marshaller the marshaller to use  * @return the resulting message  * @throws JMSException if thrown by JMS methods  * @throws IOException in case of I/O errors  * @throws XmlMappingException in case of OXM mapping errors  * @see Session#createBytesMessage  * @see Marshaller#marshal(Object, Result)  */ protected BytesMessage marshalToBytesMessage(Object object, Session session, Marshaller marshaller) throws JMSException, IOException, XmlMappingException {     ByteArrayOutputStream bos = new ByteArrayOutputStream(1024).     StreamResult streamResult = new StreamResult(bos).     marshaller.marshal(object, streamResult).     BytesMessage message = session.createBytesMessage().     message.writeBytes(bos.toByteArray()).     return message. }
true;protected;4;6;/**  * Template method that allows for custom message marshalling.  * Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or  * {@link MessageType#BYTES}.  * <p>The default implementation throws an {@link IllegalArgumentException}.  * @param object the object to marshal  * @param session the JMS session  * @param marshaller the marshaller to use  * @param targetType the target message type (other than TEXT or BYTES)  * @return the resulting message  * @throws JMSException if thrown by JMS methods  * @throws IOException in case of I/O errors  * @throws XmlMappingException in case of OXM mapping errors  */ ;/**  * Template method that allows for custom message marshalling.  * Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or  * {@link MessageType#BYTES}.  * <p>The default implementation throws an {@link IllegalArgumentException}.  * @param object the object to marshal  * @param session the JMS session  * @param marshaller the marshaller to use  * @param targetType the target message type (other than TEXT or BYTES)  * @return the resulting message  * @throws JMSException if thrown by JMS methods  * @throws IOException in case of I/O errors  * @throws XmlMappingException in case of OXM mapping errors  */ protected Message marshalToMessage(Object object, Session session, Marshaller marshaller, MessageType targetType) throws JMSException, IOException, XmlMappingException {     throw new IllegalArgumentException("Unsupported message type [" + targetType + "]. MarshallingMessageConverter by default only supports TextMessages and BytesMessages."). }
true;protected;2;6;/**  * Unmarshal the given {@link TextMessage} into an object.  * @param message the message  * @param unmarshaller the unmarshaller to use  * @return the unmarshalled object  * @throws JMSException if thrown by JMS methods  * @throws IOException in case of I/O errors  * @throws XmlMappingException in case of OXM mapping errors  * @see Unmarshaller#unmarshal(Source)  */ ;/**  * Unmarshal the given {@link TextMessage} into an object.  * @param message the message  * @param unmarshaller the unmarshaller to use  * @return the unmarshalled object  * @throws JMSException if thrown by JMS methods  * @throws IOException in case of I/O errors  * @throws XmlMappingException in case of OXM mapping errors  * @see Unmarshaller#unmarshal(Source)  */ protected Object unmarshalFromTextMessage(TextMessage message, Unmarshaller unmarshaller) throws JMSException, IOException, XmlMappingException {     Source source = new StreamSource(new StringReader(message.getText())).     return unmarshaller.unmarshal(source). }
true;protected;2;9;/**  * Unmarshal the given {@link BytesMessage} into an object.  * @param message the message  * @param unmarshaller the unmarshaller to use  * @return the unmarshalled object  * @throws JMSException if thrown by JMS methods  * @throws IOException in case of I/O errors  * @throws XmlMappingException in case of OXM mapping errors  * @see Unmarshaller#unmarshal(Source)  */ ;/**  * Unmarshal the given {@link BytesMessage} into an object.  * @param message the message  * @param unmarshaller the unmarshaller to use  * @return the unmarshalled object  * @throws JMSException if thrown by JMS methods  * @throws IOException in case of I/O errors  * @throws XmlMappingException in case of OXM mapping errors  * @see Unmarshaller#unmarshal(Source)  */ protected Object unmarshalFromBytesMessage(BytesMessage message, Unmarshaller unmarshaller) throws JMSException, IOException, XmlMappingException {     byte[] bytes = new byte[(int) message.getBodyLength()].     message.readBytes(bytes).     ByteArrayInputStream bis = new ByteArrayInputStream(bytes).     StreamSource source = new StreamSource(bis).     return unmarshaller.unmarshal(source). }
true;protected;2;6;/**  * Template method that allows for custom message unmarshalling.  * Invoked when {@link #fromMessage(Message)} is invoked with a message  * that is not a {@link TextMessage} or {@link BytesMessage}.  * <p>The default implementation throws an {@link IllegalArgumentException}.  * @param message the message  * @param unmarshaller the unmarshaller to use  * @return the unmarshalled object  * @throws JMSException if thrown by JMS methods  * @throws IOException in case of I/O errors  * @throws XmlMappingException in case of OXM mapping errors  */ ;/**  * Template method that allows for custom message unmarshalling.  * Invoked when {@link #fromMessage(Message)} is invoked with a message  * that is not a {@link TextMessage} or {@link BytesMessage}.  * <p>The default implementation throws an {@link IllegalArgumentException}.  * @param message the message  * @param unmarshaller the unmarshaller to use  * @return the unmarshalled object  * @throws JMSException if thrown by JMS methods  * @throws IOException in case of I/O errors  * @throws XmlMappingException in case of OXM mapping errors  */ protected Object unmarshalFromMessage(Message message, Unmarshaller unmarshaller) throws JMSException, IOException, XmlMappingException {     throw new IllegalArgumentException("Unsupported message type [" + message.getClass() + "]. MarshallingMessageConverter by default only supports TextMessages and BytesMessages."). }
