commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the content of the response.  */ ;/**  * Return the content of the response.  */ public T getResponse() {     return this.response. }
true;public;2;14;/**  * Resolve the {@link Destination} to use for this instance. The {@link DestinationResolver}  * and {@link Session} can be used to resolve a destination at runtime.  * @param destinationResolver the destination resolver to use if necessary  * @param session the session to use, if necessary  * @return the {@link Destination} to use  * @throws JMSException if the DestinationResolver failed to resolve the destination  */ ;/**  * Resolve the {@link Destination} to use for this instance. The {@link DestinationResolver}  * and {@link Session} can be used to resolve a destination at runtime.  * @param destinationResolver the destination resolver to use if necessary  * @param session the session to use, if necessary  * @return the {@link Destination} to use  * @throws JMSException if the DestinationResolver failed to resolve the destination  */ @Nullable public Destination resolveDestination(DestinationResolver destinationResolver, Session session) throws JMSException {     if (this.destination instanceof Destination) {         return (Destination) this.destination.     }     if (this.destination instanceof DestinationNameHolder) {         DestinationNameHolder nameHolder = (DestinationNameHolder) this.destination.         return destinationResolver.resolveDestinationName(session, nameHolder.destinationName, nameHolder.pubSubDomain).     }     return null. }
false;public;0;4;;@Override public String toString() {     return "JmsResponse [" + "response=" + this.response + ", destination=" + this.destination + ']'. }
true;public,static;2;4;/**  * Create a {@link JmsResponse} targeting the queue with the specified name.  */ ;/**  * Create a {@link JmsResponse} targeting the queue with the specified name.  */ public static <T> JmsResponse<T> forQueue(T result, String queueName) {     Assert.notNull(queueName, "Queue name must not be null").     return new JmsResponse<>(result, new DestinationNameHolder(queueName, false)). }
true;public,static;2;4;/**  * Create a {@link JmsResponse} targeting the topic with the specified name.  */ ;/**  * Create a {@link JmsResponse} targeting the topic with the specified name.  */ public static <T> JmsResponse<T> forTopic(T result, String topicName) {     Assert.notNull(topicName, "Topic name must not be null").     return new JmsResponse<>(result, new DestinationNameHolder(topicName, true)). }
true;public,static;2;4;/**  * Create a {@link JmsResponse} targeting the specified {@link Destination}.  */ ;/**  * Create a {@link JmsResponse} targeting the specified {@link Destination}.  */ public static <T> JmsResponse<T> forDestination(T result, Destination destination) {     Assert.notNull(destination, "Destination must not be null").     return new JmsResponse<>(result, destination). }
false;public;0;4;;@Override public String toString() {     return this.destinationName + "{" + "pubSubDomain=" + this.pubSubDomain + '}'. }
