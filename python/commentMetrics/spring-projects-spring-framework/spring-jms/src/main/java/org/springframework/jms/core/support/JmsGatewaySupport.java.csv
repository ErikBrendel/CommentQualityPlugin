commented;modifiers;parameterAmount;loc;comment;code
true;public,final;1;3;/**  * Set the JMS connection factory to be used by the gateway.  * Will automatically create a JmsTemplate for the given ConnectionFactory.  * @see #createJmsTemplate  * @see #setConnectionFactory(javax.jms.ConnectionFactory)  */ ;/**  * Set the JMS connection factory to be used by the gateway.  * Will automatically create a JmsTemplate for the given ConnectionFactory.  * @see #createJmsTemplate  * @see #setConnectionFactory(javax.jms.ConnectionFactory)  */ public final void setConnectionFactory(ConnectionFactory connectionFactory) {     this.jmsTemplate = createJmsTemplate(connectionFactory). }
true;protected;1;3;/**  * Create a JmsTemplate for the given ConnectionFactory.  * Only invoked if populating the gateway with a ConnectionFactory reference.  * <p>Can be overridden in subclasses to provide a JmsTemplate instance with  * a different configuration.  * @param connectionFactory the JMS ConnectionFactory to create a JmsTemplate for  * @return the new JmsTemplate instance  * @see #setConnectionFactory  */ ;/**  * Create a JmsTemplate for the given ConnectionFactory.  * Only invoked if populating the gateway with a ConnectionFactory reference.  * <p>Can be overridden in subclasses to provide a JmsTemplate instance with  * a different configuration.  * @param connectionFactory the JMS ConnectionFactory to create a JmsTemplate for  * @return the new JmsTemplate instance  * @see #setConnectionFactory  */ protected JmsTemplate createJmsTemplate(ConnectionFactory connectionFactory) {     return new JmsTemplate(connectionFactory). }
true;public,final;0;4;/**  * Return the JMS ConnectionFactory used by the gateway.  */ ;/**  * Return the JMS ConnectionFactory used by the gateway.  */ @Nullable public final ConnectionFactory getConnectionFactory() {     return (this.jmsTemplate != null ? this.jmsTemplate.getConnectionFactory() : null). }
true;public,final;1;3;/**  * Set the JmsTemplate for the gateway.  * @see #setConnectionFactory(javax.jms.ConnectionFactory)  */ ;/**  * Set the JmsTemplate for the gateway.  * @see #setConnectionFactory(javax.jms.ConnectionFactory)  */ public final void setJmsTemplate(@Nullable JmsTemplate jmsTemplate) {     this.jmsTemplate = jmsTemplate. }
true;public,final;0;4;/**  * Return the JmsTemplate for the gateway.  */ ;/**  * Return the JmsTemplate for the gateway.  */ @Nullable public final JmsTemplate getJmsTemplate() {     return this.jmsTemplate. }
false;public,final;0;12;;@Override public final void afterPropertiesSet() throws IllegalArgumentException, BeanInitializationException {     if (this.jmsTemplate == null) {         throw new IllegalArgumentException("'connectionFactory' or 'jmsTemplate' is required").     }     try {         initGateway().     } catch (Exception ex) {         throw new BeanInitializationException("Initialization of JMS gateway failed: " + ex.getMessage(), ex).     } }
true;protected;0;2;/**  * Subclasses can override this for custom initialization behavior.  * Gets called after population of this instance's bean properties.  * @throws java.lang.Exception if initialization fails  */ ;/**  * Subclasses can override this for custom initialization behavior.  * Gets called after population of this instance's bean properties.  * @throws java.lang.Exception if initialization fails  */ protected void initGateway() throws Exception { }
