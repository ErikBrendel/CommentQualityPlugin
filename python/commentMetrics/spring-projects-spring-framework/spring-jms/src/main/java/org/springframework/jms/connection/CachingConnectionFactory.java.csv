# id;timestamp;commentText;codeText;commentWords;codeWords
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1328020251;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1356735495;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1357119239;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1364391982;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1368482696;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1385412762;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1404505219;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1404542968;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1404543551;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1409783777;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1434018810;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1449660489;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1458999130;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1467730834;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1467749899;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1495868221;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1496259743;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1496837955;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1498780456;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1515367589;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1517567590;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1519295386;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1521822983;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1530174524;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1530198749;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public void setCacheProducers(boolean cacheProducers);1544613334;Specify whether to cache JMS MessageProducers per JMS Session instance_(more specifically: one MessageProducer per Destination and Session)._<p>Default is "true". Switch this to "false" in order to always_recreate MessageProducers on demand.;public void setCacheProducers(boolean cacheProducers) {_		this.cacheProducers = cacheProducers__	};specify,whether,to,cache,jms,message,producers,per,jms,session,instance,more,specifically,one,message,producer,per,destination,and,session,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,producers,on,demand;public,void,set,cache,producers,boolean,cache,producers,this,cache,producers,cache,producers
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1328020251;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1356735495;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1357119239;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1364391982;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1368482696;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1385412762;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1404505219;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1404542968;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1404543551;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1409783777;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1434018810;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1449660489;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1458999130;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1467730834;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1467749899;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1495868221;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1496259743;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1496837955;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1498780456;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1515367589;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1517567590;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1519295386;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1521822983;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1530174524;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1530198749;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory(ConnectionFactory targetConnectionFactory);1544613334;Create a new CachingConnectionFactory for the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public CachingConnectionFactory(ConnectionFactory targetConnectionFactory) {_		super(targetConnectionFactory)__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,caching,connection,factory,connection,factory,target,connection,factory,super,target,connection,factory,set,reconnect,on,exception,true
CachingConnectionFactory -> protected Session getSession(Connection con, Integer mode) throws JMSException;1328020251;Checks for a cached Session for the given mode.;protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<Session>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Creating cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,session,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,creating,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> protected Session getSession(Connection con, Integer mode) throws JMSException;1357119239;Checks for a cached Session for the given mode.;protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<Session>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Creating cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,session,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,creating,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> protected Session getSession(Connection con, Integer mode) throws JMSException;1364391982;Checks for a cached Session for the given mode.;protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<Session>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Creating cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,session,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,creating,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1328020251;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1356735495;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1357119239;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1364391982;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1368482696;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1385412762;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1404505219;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1404542968;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1404543551;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1409783777;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1434018810;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1449660489;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1458999130;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1467730834;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1467749899;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1495868221;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1496259743;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1496837955;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1498780456;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1515367589;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1517567590;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1519295386;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1521822983;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1530174524;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1530198749;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> public void setCacheConsumers(boolean cacheConsumers);1544613334;Specify whether to cache JMS MessageConsumers per JMS Session instance_(more specifically: one MessageConsumer per Destination, selector String_and Session). Note that durable subscribers will only be cached until_logical closing of the Session handle._<p>Default is "true". Switch this to "false" in order to always_recreate MessageConsumers on demand.;public void setCacheConsumers(boolean cacheConsumers) {_		this.cacheConsumers = cacheConsumers__	};specify,whether,to,cache,jms,message,consumers,per,jms,session,instance,more,specifically,one,message,consumer,per,destination,selector,string,and,session,note,that,durable,subscribers,will,only,be,cached,until,logical,closing,of,the,session,handle,p,default,is,true,switch,this,to,false,in,order,to,always,recreate,message,consumers,on,demand;public,void,set,cache,consumers,boolean,cache,consumers,this,cache,consumers,cache,consumers
CachingConnectionFactory -> @Override 	public void resetConnection();1356735495;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1368482696;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1385412762;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1404505219;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1404542968;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1404543551;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1409783777;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1434018810;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1449660489;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1458999130;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1467730834;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1467749899;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1495868221;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1496259743;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1496837955;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1498780456;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1515367589;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> @Override 	public void resetConnection();1517567590;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false___		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}__		_		super.resetConnection()___		this.active = true__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,super,reset,connection,this,active,true
CachingConnectionFactory -> @Override 	public void resetConnection();1519295386;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false___		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}__		_		super.resetConnection()___		this.active = true__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,super,reset,connection,this,active,true
CachingConnectionFactory -> @Override 	public void resetConnection();1521822983;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false___		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}__		_		super.resetConnection()___		this.active = true__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,super,reset,connection,this,active,true
CachingConnectionFactory -> @Override 	public void resetConnection();1530174524;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false___		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}__		_		super.resetConnection()___		this.active = true__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,super,reset,connection,this,active,true
CachingConnectionFactory -> @Override 	public void resetConnection();1530198749;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false___		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}__		_		super.resetConnection()___		this.active = true__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,super,reset,connection,this,active,true
CachingConnectionFactory -> @Override 	public void resetConnection();1544613334;Resets the Session cache as well.;@Override_	public void resetConnection() {_		this.active = false___		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}__		_		super.resetConnection()___		this.active = true__	};resets,the,session,cache,as,well;override,public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,super,reset,connection,this,active,true
CachingConnectionFactory -> public CachingConnectionFactory();1328020251;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1356735495;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1357119239;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1364391982;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1368482696;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1385412762;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1404505219;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1404542968;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1404543551;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1409783777;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1434018810;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1449660489;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1458999130;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1467730834;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1467749899;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1495868221;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1496259743;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1496837955;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1498780456;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1515367589;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1517567590;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1519295386;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1521822983;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1530174524;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1530198749;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> public CachingConnectionFactory();1544613334;Create a new CachingConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public CachingConnectionFactory() {_		super()__		setReconnectOnException(true)__	};create,a,new,caching,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,caching,connection,factory,super,set,reconnect,on,exception,true
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1356735495;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<Session>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Creating cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,session,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,creating,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1368482696;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<Session>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Creating cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,session,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,creating,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1385412762;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<Session>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Creating cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,session,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,creating,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1404505219;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<Session>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Creating cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,session,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,creating,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1404542968;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<Session>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Creating cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,session,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,creating,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1404543551;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<Session>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,session,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1409783777;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<Session>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,session,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1434018810;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<Session>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,session,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1449660489;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<Session>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,session,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1458999130;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<Session>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,session,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1467730834;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1467749899;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1495868221;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1496259743;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1496837955;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1498780456;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1515367589;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1517567590;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		if (!this.active) {_			return null__		}__		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,if,this,active,return,null,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1519295386;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		if (!this.active) {_			return null__		}__		LinkedList<Session> sessionList__		synchronized (this.cachedSessions) {_			sessionList = this.cachedSessions.get(mode)__			if (sessionList == null) {_				sessionList = new LinkedList<>()__				this.cachedSessions.put(mode, sessionList)__			}_		}_		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,if,this,active,return,null,linked,list,session,session,list,synchronized,this,cached,sessions,session,list,this,cached,sessions,get,mode,if,session,list,null,session,list,new,linked,list,this,cached,sessions,put,mode,session,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1521822983;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		if (!this.active) {_			return null__		}__		LinkedList<Session> sessionList = this.cachedSessions.computeIfAbsent(mode, k -> new LinkedList<>())__		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,if,this,active,return,null,linked,list,session,session,list,this,cached,sessions,compute,if,absent,mode,k,new,linked,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1530174524;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		if (!this.active) {_			return null__		}__		LinkedList<Session> sessionList = this.cachedSessions.computeIfAbsent(mode, k -> new LinkedList<>())__		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,if,this,active,return,null,linked,list,session,session,list,this,cached,sessions,compute,if,absent,mode,k,new,linked,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1530198749;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		if (!this.active) {_			return null__		}__		LinkedList<Session> sessionList = this.cachedSessions.computeIfAbsent(mode, k -> new LinkedList<>())__		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,if,this,active,return,null,linked,list,session,session,list,this,cached,sessions,compute,if,absent,mode,k,new,linked,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> @Override 	protected Session getSession(Connection con, Integer mode) throws JMSException;1544613334;Checks for a cached Session for the given mode.;@Override_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		if (!this.active) {_			return null__		}__		LinkedList<Session> sessionList = this.cachedSessions.computeIfAbsent(mode, k -> new LinkedList<>())__		Session session = null__		synchronized (sessionList) {_			if (!sessionList.isEmpty()) {_				session = sessionList.removeFirst()__			}_		}_		if (session != null) {_			if (logger.isTraceEnabled()) {_				logger.trace("Found cached JMS Session for mode " + mode + ": " +_						(session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session))__			}_		}_		else {_			Session targetSession = createSession(con, mode)__			if (logger.isDebugEnabled()) {_				logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession)__			}_			session = getCachedSessionProxy(targetSession, sessionList)__		}_		return session__	};checks,for,a,cached,session,for,the,given,mode;override,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,if,this,active,return,null,linked,list,session,session,list,this,cached,sessions,compute,if,absent,mode,k,new,linked,list,session,session,null,synchronized,session,list,if,session,list,is,empty,session,session,list,remove,first,if,session,null,if,logger,is,trace,enabled,logger,trace,found,cached,jms,session,for,mode,mode,session,instanceof,session,proxy,session,proxy,session,get,target,session,session,else,session,target,session,create,session,con,mode,if,logger,is,debug,enabled,logger,debug,registering,cached,jms,session,for,mode,mode,target,session,session,get,cached,session,proxy,target,session,session,list,return,session
CachingConnectionFactory -> public int getSessionCacheSize();1328020251;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1356735495;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1357119239;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1364391982;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1368482696;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1385412762;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1404505219;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1404542968;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1404543551;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1409783777;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1434018810;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1449660489;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1458999130;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1467730834;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1467749899;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1495868221;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1496259743;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1496837955;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1498780456;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1515367589;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1517567590;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1519295386;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1521822983;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1530174524;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1530198749;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public int getSessionCacheSize();1544613334;Return the desired size for the JMS Session cache (per JMS Session type).;public int getSessionCacheSize() {_		return this.sessionCacheSize__	};return,the,desired,size,for,the,jms,session,cache,per,jms,session,type;public,int,get,session,cache,size,return,this,session,cache,size
CachingConnectionFactory -> public boolean isCacheProducers();1328020251;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1356735495;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1357119239;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1364391982;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1368482696;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1385412762;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1404505219;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1404542968;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1404543551;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1409783777;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1434018810;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1449660489;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1458999130;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1467730834;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1467749899;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1495868221;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1496259743;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1496837955;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1498780456;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1515367589;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1517567590;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1519295386;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1521822983;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1530174524;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1530198749;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheProducers();1544613334;Return whether to cache JMS MessageProducers per JMS Session instance.;public boolean isCacheProducers() {_		return this.cacheProducers__	};return,whether,to,cache,jms,message,producers,per,jms,session,instance;public,boolean,is,cache,producers,return,this,cache,producers
CachingConnectionFactory -> public boolean isCacheConsumers();1328020251;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1356735495;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1357119239;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1364391982;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1368482696;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1385412762;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1404505219;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1404542968;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1404543551;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1409783777;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1434018810;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1449660489;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1458999130;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1467730834;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1467749899;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1495868221;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1496259743;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1496837955;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1498780456;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1515367589;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1517567590;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1519295386;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1521822983;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1530174524;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1530198749;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> public boolean isCacheConsumers();1544613334;Return whether to cache JMS MessageConsumers per JMS Session instance.;public boolean isCacheConsumers() {_		return this.cacheConsumers__	};return,whether,to,cache,jms,message,consumers,per,jms,session,instance;public,boolean,is,cache,consumers,return,this,cache,consumers
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1328020251;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class> classes = new ArrayList<Class>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,class,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1356735495;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class> classes = new ArrayList<Class>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,class,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1357119239;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class> classes = new ArrayList<Class>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,class,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1364391982;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class> classes = new ArrayList<Class>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,class,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1368482696;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class> classes = new ArrayList<Class>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,class,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1385412762;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<Class<?>>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,class,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1404505219;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<Class<?>>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,class,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1404542968;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<Class<?>>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,class,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1404543551;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<Class<?>>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,class,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1409783777;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<Class<?>>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,class,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1434018810;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<Class<?>>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,class,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1449660489;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<Class<?>>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,class,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1458999130;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<Class<?>>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,class,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1467730834;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1467749899;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1495868221;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1496259743;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1496837955;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1498780456;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1515367589;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1517567590;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(_				SessionProxy.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,classes,to,array,new,class,classes,size,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1519295386;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(SessionProxy.class.getClassLoader(),_				ClassUtils.toClassArray(classes), new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,class,utils,to,class,array,classes,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1521822983;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(SessionProxy.class.getClassLoader(),_				ClassUtils.toClassArray(classes), new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,class,utils,to,class,array,classes,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1530174524;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(SessionProxy.class.getClassLoader(),_				ClassUtils.toClassArray(classes), new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,class,utils,to,class,array,classes,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1530198749;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(SessionProxy.class.getClassLoader(),_				ClassUtils.toClassArray(classes), new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,class,utils,to,class,array,classes,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList);1544613334;Wrap the given Session with a proxy that delegates every method call to it_but adapts close calls. This is useful for allowing application code to_handle a special framework Session just like an ordinary Session._@param target the original Session to wrap_@param sessionList the List of cached Sessions that the given Session belongs to_@return the wrapped Session;protected Session getCachedSessionProxy(Session target, LinkedList<Session> sessionList) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(SessionProxy.class)__		if (target instanceof QueueSession) {_			classes.add(QueueSession.class)__		}_		if (target instanceof TopicSession) {_			classes.add(TopicSession.class)__		}_		return (Session) Proxy.newProxyInstance(SessionProxy.class.getClassLoader(),_				ClassUtils.toClassArray(classes), new CachedSessionInvocationHandler(target, sessionList))__	};wrap,the,given,session,with,a,proxy,that,delegates,every,method,call,to,it,but,adapts,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,session,just,like,an,ordinary,session,param,target,the,original,session,to,wrap,param,session,list,the,list,of,cached,sessions,that,the,given,session,belongs,to,return,the,wrapped,session;protected,session,get,cached,session,proxy,session,target,linked,list,session,session,list,list,class,classes,new,array,list,3,classes,add,session,proxy,class,if,target,instanceof,queue,session,classes,add,queue,session,class,if,target,instanceof,topic,session,classes,add,topic,session,class,return,session,proxy,new,proxy,instance,session,proxy,class,get,class,loader,class,utils,to,class,array,classes,new,cached,session,invocation,handler,target,session,list
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1328020251;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1356735495;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1357119239;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1364391982;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1368482696;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1385412762;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1404505219;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1404542968;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1404543551;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1409783777;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1434018810;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1449660489;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1458999130;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1467730834;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1467749899;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1495868221;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1496259743;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1496837955;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1498780456;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1515367589;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1517567590;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1519295386;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1521822983;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1530174524;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1530198749;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void setSessionCacheSize(int sessionCacheSize);1544613334;Specify the desired size for the JMS Session cache (per JMS Session type)._<p>This cache size is the maximum limit for the number of cached Sessions_per session acknowledgement type (auto, client, dups_ok, transacted)._As a consequence, the actual number of cached Sessions may be up to_four times as high as the specified value - in the unlikely case_of mixing and matching different acknowledgement types._<p>Default is 1: caching a single Session, (re-)creating further ones on_demand. Specify a number like 10 if you'd like to raise the number of cached_Sessions_ that said, 1 may be sufficient for low-concurrency scenarios._@see #setCacheProducers;public void setSessionCacheSize(int sessionCacheSize) {_		Assert.isTrue(sessionCacheSize >= 1, "Session cache size must be 1 or higher")__		this.sessionCacheSize = sessionCacheSize__	};specify,the,desired,size,for,the,jms,session,cache,per,jms,session,type,p,this,cache,size,is,the,maximum,limit,for,the,number,of,cached,sessions,per,session,acknowledgement,type,auto,client,transacted,as,a,consequence,the,actual,number,of,cached,sessions,may,be,up,to,four,times,as,high,as,the,specified,value,in,the,unlikely,case,of,mixing,and,matching,different,acknowledgement,types,p,default,is,1,caching,a,single,session,re,creating,further,ones,on,demand,specify,a,number,like,10,if,you,d,like,to,raise,the,number,of,cached,sessions,that,said,1,may,be,sufficient,for,low,concurrency,scenarios,see,set,cache,producers;public,void,set,session,cache,size,int,session,cache,size,assert,is,true,session,cache,size,1,session,cache,size,must,be,1,or,higher,this,session,cache,size,session,cache,size
CachingConnectionFactory -> public void resetConnection();1328020251;Resets the Session cache as well.;public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> public void resetConnection();1357119239;Resets the Session cache as well.;public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
CachingConnectionFactory -> public void resetConnection();1364391982;Resets the Session cache as well.;public void resetConnection() {_		this.active = false__		synchronized (this.cachedSessions) {_			for (LinkedList<Session> sessionList : this.cachedSessions.values()) {_				synchronized (sessionList) {_					for (Session session : sessionList) {_						try {_							session.close()__						}_						catch (Throwable ex) {_							logger.trace("Could not close cached JMS Session", ex)__						}_					}_				}_			}_			this.cachedSessions.clear()__		}_		this.active = true___		_		super.resetConnection()__	};resets,the,session,cache,as,well;public,void,reset,connection,this,active,false,synchronized,this,cached,sessions,for,linked,list,session,session,list,this,cached,sessions,values,synchronized,session,list,for,session,session,session,list,try,session,close,catch,throwable,ex,logger,trace,could,not,close,cached,jms,session,ex,this,cached,sessions,clear,this,active,true,super,reset,connection
