commented;modifiers;parameterAmount;loc;comment;code
false;public;2;63;;@Override public void fromHeaders(MessageHeaders headers, javax.jms.Message jmsMessage) {     try {         Object jmsCorrelationId = headers.get(JmsHeaders.CORRELATION_ID).         if (jmsCorrelationId instanceof Number) {             jmsCorrelationId = jmsCorrelationId.toString().         }         if (jmsCorrelationId instanceof String) {             try {                 jmsMessage.setJMSCorrelationID((String) jmsCorrelationId).             } catch (Exception ex) {                 logger.debug("Failed to set JMSCorrelationID - skipping", ex).             }         }         Destination jmsReplyTo = getHeaderIfAvailable(headers, JmsHeaders.REPLY_TO, Destination.class).         if (jmsReplyTo != null) {             try {                 jmsMessage.setJMSReplyTo(jmsReplyTo).             } catch (Exception ex) {                 logger.debug("Failed to set JMSReplyTo - skipping", ex).             }         }         String jmsType = getHeaderIfAvailable(headers, JmsHeaders.TYPE, String.class).         if (jmsType != null) {             try {                 jmsMessage.setJMSType(jmsType).             } catch (Exception ex) {                 logger.debug("Failed to set JMSType - skipping", ex).             }         }         Set<String> headerNames = headers.keySet().         for (String headerName : headerNames) {             if (StringUtils.hasText(headerName) && !headerName.startsWith(JmsHeaders.PREFIX)) {                 Object value = headers.get(headerName).                 if (value != null && SUPPORTED_PROPERTY_TYPES.contains(value.getClass())) {                     try {                         String propertyName = this.fromHeaderName(headerName).                         jmsMessage.setObjectProperty(propertyName, value).                     } catch (Exception ex) {                         if (headerName.startsWith("JMSX")) {                             if (logger.isTraceEnabled()) {                                 logger.trace("Skipping reserved header '" + headerName + "' since it cannot be set by client").                             }                         } else if (logger.isDebugEnabled()) {                             logger.debug("Failed to map message header '" + headerName + "' to JMS property", ex).                         }                     }                 }             }         }     } catch (Exception ex) {         if (logger.isDebugEnabled()) {             logger.debug("Error occurred while mapping from MessageHeaders to JMS properties", ex).         }     } }
false;public;1;106;;@Override public MessageHeaders toHeaders(javax.jms.Message jmsMessage) {     Map<String, Object> headers = new HashMap<>().     try {         try {             String correlationId = jmsMessage.getJMSCorrelationID().             if (correlationId != null) {                 headers.put(JmsHeaders.CORRELATION_ID, correlationId).             }         } catch (Exception ex) {             logger.debug("Failed to read JMSCorrelationID property - skipping", ex).         }         try {             Destination destination = jmsMessage.getJMSDestination().             if (destination != null) {                 headers.put(JmsHeaders.DESTINATION, destination).             }         } catch (Exception ex) {             logger.debug("Failed to read JMSDestination property - skipping", ex).         }         try {             int deliveryMode = jmsMessage.getJMSDeliveryMode().             headers.put(JmsHeaders.DELIVERY_MODE, deliveryMode).         } catch (Exception ex) {             logger.debug("Failed to read JMSDeliveryMode property - skipping", ex).         }         try {             long expiration = jmsMessage.getJMSExpiration().             headers.put(JmsHeaders.EXPIRATION, expiration).         } catch (Exception ex) {             logger.debug("Failed to read JMSExpiration property - skipping", ex).         }         try {             String messageId = jmsMessage.getJMSMessageID().             if (messageId != null) {                 headers.put(JmsHeaders.MESSAGE_ID, messageId).             }         } catch (Exception ex) {             logger.debug("Failed to read JMSMessageID property - skipping", ex).         }         try {             headers.put(JmsHeaders.PRIORITY, jmsMessage.getJMSPriority()).         } catch (Exception ex) {             logger.debug("Failed to read JMSPriority property - skipping", ex).         }         try {             Destination replyTo = jmsMessage.getJMSReplyTo().             if (replyTo != null) {                 headers.put(JmsHeaders.REPLY_TO, replyTo).             }         } catch (Exception ex) {             logger.debug("Failed to read JMSReplyTo property - skipping", ex).         }         try {             headers.put(JmsHeaders.REDELIVERED, jmsMessage.getJMSRedelivered()).         } catch (Exception ex) {             logger.debug("Failed to read JMSRedelivered property - skipping", ex).         }         try {             String type = jmsMessage.getJMSType().             if (type != null) {                 headers.put(JmsHeaders.TYPE, type).             }         } catch (Exception ex) {             logger.debug("Failed to read JMSType property - skipping", ex).         }         try {             headers.put(JmsHeaders.TIMESTAMP, jmsMessage.getJMSTimestamp()).         } catch (Exception ex) {             logger.debug("Failed to read JMSTimestamp property - skipping", ex).         }         Enumeration<?> jmsPropertyNames = jmsMessage.getPropertyNames().         if (jmsPropertyNames != null) {             while (jmsPropertyNames.hasMoreElements()) {                 String propertyName = jmsPropertyNames.nextElement().toString().                 try {                     String headerName = this.toHeaderName(propertyName).                     headers.put(headerName, jmsMessage.getObjectProperty(propertyName)).                 } catch (Exception ex) {                     if (logger.isDebugEnabled()) {                         logger.debug("Error occurred while mapping JMS property '" + propertyName + "' to Message header", ex).                     }                 }             }         }     } catch (JMSException ex) {         if (logger.isDebugEnabled()) {             logger.debug("Error occurred while mapping from JMS properties to MessageHeaders", ex).         }     }     return new MessageHeaders(headers). }
true;protected;1;7;/**  * Add the outbound prefix if necessary.  * <p>Convert {@link MessageHeaders#CONTENT_TYPE} to {@code content_type} for JMS compliance.  * @see #CONTENT_TYPE_PROPERTY  */ ;/**  * Add the outbound prefix if necessary.  * <p>Convert {@link MessageHeaders#CONTENT_TYPE} to {@code content_type} for JMS compliance.  * @see #CONTENT_TYPE_PROPERTY  */ @Override protected String fromHeaderName(String headerName) {     if (MessageHeaders.CONTENT_TYPE.equals(headerName)) {         return CONTENT_TYPE_PROPERTY.     }     return super.fromHeaderName(headerName). }
true;protected;1;7;/**  * Add the inbound prefix if necessary.  * <p>Convert the JMS-compliant {@code content_type} to {@link MessageHeaders#CONTENT_TYPE}.  * @see #CONTENT_TYPE_PROPERTY  */ ;/**  * Add the inbound prefix if necessary.  * <p>Convert the JMS-compliant {@code content_type} to {@link MessageHeaders#CONTENT_TYPE}.  * @see #CONTENT_TYPE_PROPERTY  */ @Override protected String toHeaderName(String propertyName) {     if (CONTENT_TYPE_PROPERTY.equals(propertyName)) {         return MessageHeaders.CONTENT_TYPE.     }     return super.toHeaderName(propertyName). }
