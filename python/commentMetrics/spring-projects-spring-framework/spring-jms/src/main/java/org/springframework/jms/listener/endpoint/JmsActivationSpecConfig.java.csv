# id;timestamp;commentText;codeText;commentWords;codeWords
JmsActivationSpecConfig -> public void setAcknowledgeMode(int acknowledgeMode);1328020251;Set the JMS acknowledgement mode to use._@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;public void setAcknowledgeMode(int acknowledgeMode) {_		this.acknowledgeMode = acknowledgeMode__	};set,the,jms,acknowledgement,mode,to,use,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;public,void,set,acknowledge,mode,int,acknowledge,mode,this,acknowledge,mode,acknowledge,mode
JmsActivationSpecConfig -> public void setAcknowledgeMode(int acknowledgeMode);1397718966;Set the JMS acknowledgement mode to use._@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;public void setAcknowledgeMode(int acknowledgeMode) {_		this.acknowledgeMode = acknowledgeMode__	};set,the,jms,acknowledgement,mode,to,use,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;public,void,set,acknowledge,mode,int,acknowledge,mode,this,acknowledge,mode,acknowledge,mode
JmsActivationSpecConfig -> public void setAcknowledgeMode(int acknowledgeMode);1405696881;Set the JMS acknowledgement mode to use._@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;public void setAcknowledgeMode(int acknowledgeMode) {_		this.acknowledgeMode = acknowledgeMode__	};set,the,jms,acknowledgement,mode,to,use,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;public,void,set,acknowledge,mode,int,acknowledge,mode,this,acknowledge,mode,acknowledge,mode
JmsActivationSpecConfig -> public void setAcknowledgeMode(int acknowledgeMode);1429198188;Set the JMS acknowledgement mode to use._@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;public void setAcknowledgeMode(int acknowledgeMode) {_		this.acknowledgeMode = acknowledgeMode__	};set,the,jms,acknowledgement,mode,to,use,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;public,void,set,acknowledge,mode,int,acknowledge,mode,this,acknowledge,mode,acknowledge,mode
JmsActivationSpecConfig -> public void setAcknowledgeMode(int acknowledgeMode);1492514138;Set the JMS acknowledgement mode to use._@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;public void setAcknowledgeMode(int acknowledgeMode) {_		this.acknowledgeMode = acknowledgeMode__	};set,the,jms,acknowledgement,mode,to,use,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;public,void,set,acknowledge,mode,int,acknowledge,mode,this,acknowledge,mode,acknowledge,mode
JmsActivationSpecConfig -> public void setAcknowledgeMode(int acknowledgeMode);1495868221;Set the JMS acknowledgement mode to use._@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;public void setAcknowledgeMode(int acknowledgeMode) {_		this.acknowledgeMode = acknowledgeMode__	};set,the,jms,acknowledgement,mode,to,use,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;public,void,set,acknowledge,mode,int,acknowledge,mode,this,acknowledge,mode,acknowledge,mode
JmsActivationSpecConfig -> public void setAcknowledgeMode(int acknowledgeMode);1496837955;Set the JMS acknowledgement mode to use._@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;public void setAcknowledgeMode(int acknowledgeMode) {_		this.acknowledgeMode = acknowledgeMode__	};set,the,jms,acknowledgement,mode,to,use,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;public,void,set,acknowledge,mode,int,acknowledge,mode,this,acknowledge,mode,acknowledge,mode
JmsActivationSpecConfig -> public void setAcknowledgeMode(int acknowledgeMode);1498780456;Set the JMS acknowledgement mode to use._@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;public void setAcknowledgeMode(int acknowledgeMode) {_		this.acknowledgeMode = acknowledgeMode__	};set,the,jms,acknowledgement,mode,to,use,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;public,void,set,acknowledge,mode,int,acknowledge,mode,this,acknowledge,mode,acknowledge,mode
JmsActivationSpecConfig -> public void setAcknowledgeMode(int acknowledgeMode);1500448076;Set the JMS acknowledgement mode to use._@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;public void setAcknowledgeMode(int acknowledgeMode) {_		this.acknowledgeMode = acknowledgeMode__	};set,the,jms,acknowledgement,mode,to,use,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;public,void,set,acknowledge,mode,int,acknowledge,mode,this,acknowledge,mode,acknowledge,mode
JmsActivationSpecConfig -> public void setAcknowledgeMode(int acknowledgeMode);1530174524;Set the JMS acknowledgement mode to use._@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED;public void setAcknowledgeMode(int acknowledgeMode) {_		this.acknowledgeMode = acknowledgeMode__	};set,the,jms,acknowledgement,mode,to,use,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session;public,void,set,acknowledge,mode,int,acknowledge,mode,this,acknowledge,mode,acknowledge,mode
JmsActivationSpecConfig -> public void setMaxConcurrency(int maxConcurrency);1328020251;Specify the maximum number of consumers/sessions to use, effectively_controlling the number of concurrent invocations on the target listener.;public void setMaxConcurrency(int maxConcurrency) {_		this.maxConcurrency = maxConcurrency__	};specify,the,maximum,number,of,consumers,sessions,to,use,effectively,controlling,the,number,of,concurrent,invocations,on,the,target,listener;public,void,set,max,concurrency,int,max,concurrency,this,max,concurrency,max,concurrency
JmsActivationSpecConfig -> public void setMaxConcurrency(int maxConcurrency);1397718966;Specify the maximum number of consumers/sessions to use, effectively_controlling the number of concurrent invocations on the target listener.;public void setMaxConcurrency(int maxConcurrency) {_		this.maxConcurrency = maxConcurrency__	};specify,the,maximum,number,of,consumers,sessions,to,use,effectively,controlling,the,number,of,concurrent,invocations,on,the,target,listener;public,void,set,max,concurrency,int,max,concurrency,this,max,concurrency,max,concurrency
JmsActivationSpecConfig -> public void setMaxConcurrency(int maxConcurrency);1405696881;Specify the maximum number of consumers/sessions to use, effectively_controlling the number of concurrent invocations on the target listener.;public void setMaxConcurrency(int maxConcurrency) {_		this.maxConcurrency = maxConcurrency__	};specify,the,maximum,number,of,consumers,sessions,to,use,effectively,controlling,the,number,of,concurrent,invocations,on,the,target,listener;public,void,set,max,concurrency,int,max,concurrency,this,max,concurrency,max,concurrency
JmsActivationSpecConfig -> public void setMaxConcurrency(int maxConcurrency);1429198188;Specify the maximum number of consumers/sessions to use, effectively_controlling the number of concurrent invocations on the target listener.;public void setMaxConcurrency(int maxConcurrency) {_		this.maxConcurrency = maxConcurrency__	};specify,the,maximum,number,of,consumers,sessions,to,use,effectively,controlling,the,number,of,concurrent,invocations,on,the,target,listener;public,void,set,max,concurrency,int,max,concurrency,this,max,concurrency,max,concurrency
JmsActivationSpecConfig -> public void setMaxConcurrency(int maxConcurrency);1492514138;Specify the maximum number of consumers/sessions to use, effectively_controlling the number of concurrent invocations on the target listener.;public void setMaxConcurrency(int maxConcurrency) {_		this.maxConcurrency = maxConcurrency__	};specify,the,maximum,number,of,consumers,sessions,to,use,effectively,controlling,the,number,of,concurrent,invocations,on,the,target,listener;public,void,set,max,concurrency,int,max,concurrency,this,max,concurrency,max,concurrency
JmsActivationSpecConfig -> public void setMaxConcurrency(int maxConcurrency);1495868221;Specify the maximum number of consumers/sessions to use, effectively_controlling the number of concurrent invocations on the target listener.;public void setMaxConcurrency(int maxConcurrency) {_		this.maxConcurrency = maxConcurrency__	};specify,the,maximum,number,of,consumers,sessions,to,use,effectively,controlling,the,number,of,concurrent,invocations,on,the,target,listener;public,void,set,max,concurrency,int,max,concurrency,this,max,concurrency,max,concurrency
JmsActivationSpecConfig -> public void setMaxConcurrency(int maxConcurrency);1496837955;Specify the maximum number of consumers/sessions to use, effectively_controlling the number of concurrent invocations on the target listener.;public void setMaxConcurrency(int maxConcurrency) {_		this.maxConcurrency = maxConcurrency__	};specify,the,maximum,number,of,consumers,sessions,to,use,effectively,controlling,the,number,of,concurrent,invocations,on,the,target,listener;public,void,set,max,concurrency,int,max,concurrency,this,max,concurrency,max,concurrency
JmsActivationSpecConfig -> public void setMaxConcurrency(int maxConcurrency);1498780456;Specify the maximum number of consumers/sessions to use, effectively_controlling the number of concurrent invocations on the target listener.;public void setMaxConcurrency(int maxConcurrency) {_		this.maxConcurrency = maxConcurrency__	};specify,the,maximum,number,of,consumers,sessions,to,use,effectively,controlling,the,number,of,concurrent,invocations,on,the,target,listener;public,void,set,max,concurrency,int,max,concurrency,this,max,concurrency,max,concurrency
JmsActivationSpecConfig -> public void setMaxConcurrency(int maxConcurrency);1500448076;Specify the maximum number of consumers/sessions to use, effectively_controlling the number of concurrent invocations on the target listener.;public void setMaxConcurrency(int maxConcurrency) {_		this.maxConcurrency = maxConcurrency__	};specify,the,maximum,number,of,consumers,sessions,to,use,effectively,controlling,the,number,of,concurrent,invocations,on,the,target,listener;public,void,set,max,concurrency,int,max,concurrency,this,max,concurrency,max,concurrency
JmsActivationSpecConfig -> public void setMaxConcurrency(int maxConcurrency);1530174524;Specify the maximum number of consumers/sessions to use, effectively_controlling the number of concurrent invocations on the target listener.;public void setMaxConcurrency(int maxConcurrency) {_		this.maxConcurrency = maxConcurrency__	};specify,the,maximum,number,of,consumers,sessions,to,use,effectively,controlling,the,number,of,concurrent,invocations,on,the,target,listener;public,void,set,max,concurrency,int,max,concurrency,this,max,concurrency,max,concurrency
JmsActivationSpecConfig -> public int getAcknowledgeMode();1328020251;Return the JMS acknowledgement mode to use.;public int getAcknowledgeMode() {_		return this.acknowledgeMode__	};return,the,jms,acknowledgement,mode,to,use;public,int,get,acknowledge,mode,return,this,acknowledge,mode
JmsActivationSpecConfig -> public int getAcknowledgeMode();1397718966;Return the JMS acknowledgement mode to use.;public int getAcknowledgeMode() {_		return this.acknowledgeMode__	};return,the,jms,acknowledgement,mode,to,use;public,int,get,acknowledge,mode,return,this,acknowledge,mode
JmsActivationSpecConfig -> public int getAcknowledgeMode();1405696881;Return the JMS acknowledgement mode to use.;public int getAcknowledgeMode() {_		return this.acknowledgeMode__	};return,the,jms,acknowledgement,mode,to,use;public,int,get,acknowledge,mode,return,this,acknowledge,mode
JmsActivationSpecConfig -> public int getAcknowledgeMode();1429198188;Return the JMS acknowledgement mode to use.;public int getAcknowledgeMode() {_		return this.acknowledgeMode__	};return,the,jms,acknowledgement,mode,to,use;public,int,get,acknowledge,mode,return,this,acknowledge,mode
JmsActivationSpecConfig -> public int getAcknowledgeMode();1492514138;Return the JMS acknowledgement mode to use.;public int getAcknowledgeMode() {_		return this.acknowledgeMode__	};return,the,jms,acknowledgement,mode,to,use;public,int,get,acknowledge,mode,return,this,acknowledge,mode
JmsActivationSpecConfig -> public int getAcknowledgeMode();1495868221;Return the JMS acknowledgement mode to use.;public int getAcknowledgeMode() {_		return this.acknowledgeMode__	};return,the,jms,acknowledgement,mode,to,use;public,int,get,acknowledge,mode,return,this,acknowledge,mode
JmsActivationSpecConfig -> public int getAcknowledgeMode();1496837955;Return the JMS acknowledgement mode to use.;public int getAcknowledgeMode() {_		return this.acknowledgeMode__	};return,the,jms,acknowledgement,mode,to,use;public,int,get,acknowledge,mode,return,this,acknowledge,mode
JmsActivationSpecConfig -> public int getAcknowledgeMode();1498780456;Return the JMS acknowledgement mode to use.;public int getAcknowledgeMode() {_		return this.acknowledgeMode__	};return,the,jms,acknowledgement,mode,to,use;public,int,get,acknowledge,mode,return,this,acknowledge,mode
JmsActivationSpecConfig -> public int getAcknowledgeMode();1500448076;Return the JMS acknowledgement mode to use.;public int getAcknowledgeMode() {_		return this.acknowledgeMode__	};return,the,jms,acknowledgement,mode,to,use;public,int,get,acknowledge,mode,return,this,acknowledge,mode
JmsActivationSpecConfig -> public int getAcknowledgeMode();1530174524;Return the JMS acknowledgement mode to use.;public int getAcknowledgeMode() {_		return this.acknowledgeMode__	};return,the,jms,acknowledgement,mode,to,use;public,int,get,acknowledge,mode,return,this,acknowledge,mode
JmsActivationSpecConfig -> public void setMessageConverter(@Nullable MessageConverter messageConverter);1500448076;Set the {@link MessageConverter} strategy for converting JMS Messages._@param messageConverter the message converter to use;public void setMessageConverter(@Nullable MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,nullable,message,converter,message,converter,this,message,converter,message,converter
JmsActivationSpecConfig -> public void setMessageConverter(@Nullable MessageConverter messageConverter);1530174524;Set the {@link MessageConverter} strategy for converting JMS Messages._@param messageConverter the message converter to use;public void setMessageConverter(@Nullable MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,nullable,message,converter,message,converter,this,message,converter,message,converter
JmsActivationSpecConfig -> public void setConcurrency(String concurrency);1328020251;Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple_upper limit String, e.g. "10"._<p>JCA listener containers will always scale from zero to the given upper limit._A specified lower limit will effectively be ignored._<p>This property is primarily supported for configuration compatibility with_{@link org.springframework.jms.listener.DefaultMessageListenerContainer}._For this activation config, generally use {@link #setMaxConcurrency} instead.;public void setConcurrency(String concurrency) {_		try {_			int separatorIndex = concurrency.indexOf('-')__			if (separatorIndex != -1) {_				setMaxConcurrency(Integer.parseInt(concurrency.substring(separatorIndex + 1, concurrency.length())))__			}_			else {_				setMaxConcurrency(Integer.parseInt(concurrency))__			}_		}_		catch (NumberFormatException ex) {_			throw new IllegalArgumentException("Invalid concurrency value [" + concurrency + "]: only " +_					"single maximum integer (e.g. \"5\") and minimum-maximum combo (e.g. \"3-5\") supported. " +_					"Note that JmsActivationSpecConfig will effectively ignore the minimum value and " +_					"scale from zero up to the number of consumers according to the maximum value.")__		}_	};specify,concurrency,limits,via,a,lower,upper,string,e,g,5,10,or,a,simple,upper,limit,string,e,g,10,p,jca,listener,containers,will,always,scale,from,zero,to,the,given,upper,limit,a,specified,lower,limit,will,effectively,be,ignored,p,this,property,is,primarily,supported,for,configuration,compatibility,with,link,org,springframework,jms,listener,default,message,listener,container,for,this,activation,config,generally,use,link,set,max,concurrency,instead;public,void,set,concurrency,string,concurrency,try,int,separator,index,concurrency,index,of,if,separator,index,1,set,max,concurrency,integer,parse,int,concurrency,substring,separator,index,1,concurrency,length,else,set,max,concurrency,integer,parse,int,concurrency,catch,number,format,exception,ex,throw,new,illegal,argument,exception,invalid,concurrency,value,concurrency,only,single,maximum,integer,e,g,5,and,minimum,maximum,combo,e,g,3,5,supported,note,that,jms,activation,spec,config,will,effectively,ignore,the,minimum,value,and,scale,from,zero,up,to,the,number,of,consumers,according,to,the,maximum,value
JmsActivationSpecConfig -> public void setConcurrency(String concurrency);1397718966;Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple_upper limit String, e.g. "10"._<p>JCA listener containers will always scale from zero to the given upper limit._A specified lower limit will effectively be ignored._<p>This property is primarily supported for configuration compatibility with_{@link org.springframework.jms.listener.DefaultMessageListenerContainer}._For this activation config, generally use {@link #setMaxConcurrency} instead.;public void setConcurrency(String concurrency) {_		try {_			int separatorIndex = concurrency.indexOf('-')__			if (separatorIndex != -1) {_				setMaxConcurrency(Integer.parseInt(concurrency.substring(separatorIndex + 1, concurrency.length())))__			}_			else {_				setMaxConcurrency(Integer.parseInt(concurrency))__			}_		}_		catch (NumberFormatException ex) {_			throw new IllegalArgumentException("Invalid concurrency value [" + concurrency + "]: only " +_					"single maximum integer (e.g. \"5\") and minimum-maximum combo (e.g. \"3-5\") supported. " +_					"Note that JmsActivationSpecConfig will effectively ignore the minimum value and " +_					"scale from zero up to the number of consumers according to the maximum value.")__		}_	};specify,concurrency,limits,via,a,lower,upper,string,e,g,5,10,or,a,simple,upper,limit,string,e,g,10,p,jca,listener,containers,will,always,scale,from,zero,to,the,given,upper,limit,a,specified,lower,limit,will,effectively,be,ignored,p,this,property,is,primarily,supported,for,configuration,compatibility,with,link,org,springframework,jms,listener,default,message,listener,container,for,this,activation,config,generally,use,link,set,max,concurrency,instead;public,void,set,concurrency,string,concurrency,try,int,separator,index,concurrency,index,of,if,separator,index,1,set,max,concurrency,integer,parse,int,concurrency,substring,separator,index,1,concurrency,length,else,set,max,concurrency,integer,parse,int,concurrency,catch,number,format,exception,ex,throw,new,illegal,argument,exception,invalid,concurrency,value,concurrency,only,single,maximum,integer,e,g,5,and,minimum,maximum,combo,e,g,3,5,supported,note,that,jms,activation,spec,config,will,effectively,ignore,the,minimum,value,and,scale,from,zero,up,to,the,number,of,consumers,according,to,the,maximum,value
JmsActivationSpecConfig -> public void setConcurrency(String concurrency);1405696881;Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple_upper limit String, e.g. "10"._<p>JCA listener containers will always scale from zero to the given upper limit._A specified lower limit will effectively be ignored._<p>This property is primarily supported for configuration compatibility with_{@link org.springframework.jms.listener.DefaultMessageListenerContainer}._For this activation config, generally use {@link #setMaxConcurrency} instead.;public void setConcurrency(String concurrency) {_		try {_			int separatorIndex = concurrency.indexOf('-')__			if (separatorIndex != -1) {_				setMaxConcurrency(Integer.parseInt(concurrency.substring(separatorIndex + 1, concurrency.length())))__			}_			else {_				setMaxConcurrency(Integer.parseInt(concurrency))__			}_		}_		catch (NumberFormatException ex) {_			throw new IllegalArgumentException("Invalid concurrency value [" + concurrency + "]: only " +_					"single maximum integer (e.g. \"5\") and minimum-maximum combo (e.g. \"3-5\") supported. " +_					"Note that JmsActivationSpecConfig will effectively ignore the minimum value and " +_					"scale from zero up to the number of consumers according to the maximum value.")__		}_	};specify,concurrency,limits,via,a,lower,upper,string,e,g,5,10,or,a,simple,upper,limit,string,e,g,10,p,jca,listener,containers,will,always,scale,from,zero,to,the,given,upper,limit,a,specified,lower,limit,will,effectively,be,ignored,p,this,property,is,primarily,supported,for,configuration,compatibility,with,link,org,springframework,jms,listener,default,message,listener,container,for,this,activation,config,generally,use,link,set,max,concurrency,instead;public,void,set,concurrency,string,concurrency,try,int,separator,index,concurrency,index,of,if,separator,index,1,set,max,concurrency,integer,parse,int,concurrency,substring,separator,index,1,concurrency,length,else,set,max,concurrency,integer,parse,int,concurrency,catch,number,format,exception,ex,throw,new,illegal,argument,exception,invalid,concurrency,value,concurrency,only,single,maximum,integer,e,g,5,and,minimum,maximum,combo,e,g,3,5,supported,note,that,jms,activation,spec,config,will,effectively,ignore,the,minimum,value,and,scale,from,zero,up,to,the,number,of,consumers,according,to,the,maximum,value
JmsActivationSpecConfig -> public void setConcurrency(String concurrency);1429198188;Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple_upper limit String, e.g. "10"._<p>JCA listener containers will always scale from zero to the given upper limit._A specified lower limit will effectively be ignored._<p>This property is primarily supported for configuration compatibility with_{@link org.springframework.jms.listener.DefaultMessageListenerContainer}._For this activation config, generally use {@link #setMaxConcurrency} instead.;public void setConcurrency(String concurrency) {_		try {_			int separatorIndex = concurrency.indexOf('-')__			if (separatorIndex != -1) {_				setMaxConcurrency(Integer.parseInt(concurrency.substring(separatorIndex + 1, concurrency.length())))__			}_			else {_				setMaxConcurrency(Integer.parseInt(concurrency))__			}_		}_		catch (NumberFormatException ex) {_			throw new IllegalArgumentException("Invalid concurrency value [" + concurrency + "]: only " +_					"single maximum integer (e.g. \"5\") and minimum-maximum combo (e.g. \"3-5\") supported. " +_					"Note that JmsActivationSpecConfig will effectively ignore the minimum value and " +_					"scale from zero up to the number of consumers according to the maximum value.")__		}_	};specify,concurrency,limits,via,a,lower,upper,string,e,g,5,10,or,a,simple,upper,limit,string,e,g,10,p,jca,listener,containers,will,always,scale,from,zero,to,the,given,upper,limit,a,specified,lower,limit,will,effectively,be,ignored,p,this,property,is,primarily,supported,for,configuration,compatibility,with,link,org,springframework,jms,listener,default,message,listener,container,for,this,activation,config,generally,use,link,set,max,concurrency,instead;public,void,set,concurrency,string,concurrency,try,int,separator,index,concurrency,index,of,if,separator,index,1,set,max,concurrency,integer,parse,int,concurrency,substring,separator,index,1,concurrency,length,else,set,max,concurrency,integer,parse,int,concurrency,catch,number,format,exception,ex,throw,new,illegal,argument,exception,invalid,concurrency,value,concurrency,only,single,maximum,integer,e,g,5,and,minimum,maximum,combo,e,g,3,5,supported,note,that,jms,activation,spec,config,will,effectively,ignore,the,minimum,value,and,scale,from,zero,up,to,the,number,of,consumers,according,to,the,maximum,value
JmsActivationSpecConfig -> public void setConcurrency(String concurrency);1492514138;Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple_upper limit String, e.g. "10"._<p>JCA listener containers will always scale from zero to the given upper limit._A specified lower limit will effectively be ignored._<p>This property is primarily supported for configuration compatibility with_{@link org.springframework.jms.listener.DefaultMessageListenerContainer}._For this activation config, generally use {@link #setMaxConcurrency} instead.;public void setConcurrency(String concurrency) {_		try {_			int separatorIndex = concurrency.indexOf('-')__			if (separatorIndex != -1) {_				setMaxConcurrency(Integer.parseInt(concurrency.substring(separatorIndex + 1, concurrency.length())))__			}_			else {_				setMaxConcurrency(Integer.parseInt(concurrency))__			}_		}_		catch (NumberFormatException ex) {_			throw new IllegalArgumentException("Invalid concurrency value [" + concurrency + "]: only " +_					"single maximum integer (e.g. \"5\") and minimum-maximum combo (e.g. \"3-5\") supported. " +_					"Note that JmsActivationSpecConfig will effectively ignore the minimum value and " +_					"scale from zero up to the number of consumers according to the maximum value.")__		}_	};specify,concurrency,limits,via,a,lower,upper,string,e,g,5,10,or,a,simple,upper,limit,string,e,g,10,p,jca,listener,containers,will,always,scale,from,zero,to,the,given,upper,limit,a,specified,lower,limit,will,effectively,be,ignored,p,this,property,is,primarily,supported,for,configuration,compatibility,with,link,org,springframework,jms,listener,default,message,listener,container,for,this,activation,config,generally,use,link,set,max,concurrency,instead;public,void,set,concurrency,string,concurrency,try,int,separator,index,concurrency,index,of,if,separator,index,1,set,max,concurrency,integer,parse,int,concurrency,substring,separator,index,1,concurrency,length,else,set,max,concurrency,integer,parse,int,concurrency,catch,number,format,exception,ex,throw,new,illegal,argument,exception,invalid,concurrency,value,concurrency,only,single,maximum,integer,e,g,5,and,minimum,maximum,combo,e,g,3,5,supported,note,that,jms,activation,spec,config,will,effectively,ignore,the,minimum,value,and,scale,from,zero,up,to,the,number,of,consumers,according,to,the,maximum,value
JmsActivationSpecConfig -> public void setConcurrency(String concurrency);1495868221;Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple_upper limit String, e.g. "10"._<p>JCA listener containers will always scale from zero to the given upper limit._A specified lower limit will effectively be ignored._<p>This property is primarily supported for configuration compatibility with_{@link org.springframework.jms.listener.DefaultMessageListenerContainer}._For this activation config, generally use {@link #setMaxConcurrency} instead.;public void setConcurrency(String concurrency) {_		try {_			int separatorIndex = concurrency.indexOf('-')__			if (separatorIndex != -1) {_				setMaxConcurrency(Integer.parseInt(concurrency.substring(separatorIndex + 1, concurrency.length())))__			}_			else {_				setMaxConcurrency(Integer.parseInt(concurrency))__			}_		}_		catch (NumberFormatException ex) {_			throw new IllegalArgumentException("Invalid concurrency value [" + concurrency + "]: only " +_					"single maximum integer (e.g. \"5\") and minimum-maximum combo (e.g. \"3-5\") supported. " +_					"Note that JmsActivationSpecConfig will effectively ignore the minimum value and " +_					"scale from zero up to the number of consumers according to the maximum value.")__		}_	};specify,concurrency,limits,via,a,lower,upper,string,e,g,5,10,or,a,simple,upper,limit,string,e,g,10,p,jca,listener,containers,will,always,scale,from,zero,to,the,given,upper,limit,a,specified,lower,limit,will,effectively,be,ignored,p,this,property,is,primarily,supported,for,configuration,compatibility,with,link,org,springframework,jms,listener,default,message,listener,container,for,this,activation,config,generally,use,link,set,max,concurrency,instead;public,void,set,concurrency,string,concurrency,try,int,separator,index,concurrency,index,of,if,separator,index,1,set,max,concurrency,integer,parse,int,concurrency,substring,separator,index,1,concurrency,length,else,set,max,concurrency,integer,parse,int,concurrency,catch,number,format,exception,ex,throw,new,illegal,argument,exception,invalid,concurrency,value,concurrency,only,single,maximum,integer,e,g,5,and,minimum,maximum,combo,e,g,3,5,supported,note,that,jms,activation,spec,config,will,effectively,ignore,the,minimum,value,and,scale,from,zero,up,to,the,number,of,consumers,according,to,the,maximum,value
JmsActivationSpecConfig -> public void setConcurrency(String concurrency);1496837955;Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple_upper limit String, e.g. "10"._<p>JCA listener containers will always scale from zero to the given upper limit._A specified lower limit will effectively be ignored._<p>This property is primarily supported for configuration compatibility with_{@link org.springframework.jms.listener.DefaultMessageListenerContainer}._For this activation config, generally use {@link #setMaxConcurrency} instead.;public void setConcurrency(String concurrency) {_		try {_			int separatorIndex = concurrency.indexOf('-')__			if (separatorIndex != -1) {_				setMaxConcurrency(Integer.parseInt(concurrency.substring(separatorIndex + 1, concurrency.length())))__			}_			else {_				setMaxConcurrency(Integer.parseInt(concurrency))__			}_		}_		catch (NumberFormatException ex) {_			throw new IllegalArgumentException("Invalid concurrency value [" + concurrency + "]: only " +_					"single maximum integer (e.g. \"5\") and minimum-maximum combo (e.g. \"3-5\") supported. " +_					"Note that JmsActivationSpecConfig will effectively ignore the minimum value and " +_					"scale from zero up to the number of consumers according to the maximum value.")__		}_	};specify,concurrency,limits,via,a,lower,upper,string,e,g,5,10,or,a,simple,upper,limit,string,e,g,10,p,jca,listener,containers,will,always,scale,from,zero,to,the,given,upper,limit,a,specified,lower,limit,will,effectively,be,ignored,p,this,property,is,primarily,supported,for,configuration,compatibility,with,link,org,springframework,jms,listener,default,message,listener,container,for,this,activation,config,generally,use,link,set,max,concurrency,instead;public,void,set,concurrency,string,concurrency,try,int,separator,index,concurrency,index,of,if,separator,index,1,set,max,concurrency,integer,parse,int,concurrency,substring,separator,index,1,concurrency,length,else,set,max,concurrency,integer,parse,int,concurrency,catch,number,format,exception,ex,throw,new,illegal,argument,exception,invalid,concurrency,value,concurrency,only,single,maximum,integer,e,g,5,and,minimum,maximum,combo,e,g,3,5,supported,note,that,jms,activation,spec,config,will,effectively,ignore,the,minimum,value,and,scale,from,zero,up,to,the,number,of,consumers,according,to,the,maximum,value
JmsActivationSpecConfig -> public void setConcurrency(String concurrency);1498780456;Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple_upper limit String, e.g. "10"._<p>JCA listener containers will always scale from zero to the given upper limit._A specified lower limit will effectively be ignored._<p>This property is primarily supported for configuration compatibility with_{@link org.springframework.jms.listener.DefaultMessageListenerContainer}._For this activation config, generally use {@link #setMaxConcurrency} instead.;public void setConcurrency(String concurrency) {_		try {_			int separatorIndex = concurrency.indexOf('-')__			if (separatorIndex != -1) {_				setMaxConcurrency(Integer.parseInt(concurrency.substring(separatorIndex + 1, concurrency.length())))__			}_			else {_				setMaxConcurrency(Integer.parseInt(concurrency))__			}_		}_		catch (NumberFormatException ex) {_			throw new IllegalArgumentException("Invalid concurrency value [" + concurrency + "]: only " +_					"single maximum integer (e.g. \"5\") and minimum-maximum combo (e.g. \"3-5\") supported. " +_					"Note that JmsActivationSpecConfig will effectively ignore the minimum value and " +_					"scale from zero up to the number of consumers according to the maximum value.")__		}_	};specify,concurrency,limits,via,a,lower,upper,string,e,g,5,10,or,a,simple,upper,limit,string,e,g,10,p,jca,listener,containers,will,always,scale,from,zero,to,the,given,upper,limit,a,specified,lower,limit,will,effectively,be,ignored,p,this,property,is,primarily,supported,for,configuration,compatibility,with,link,org,springframework,jms,listener,default,message,listener,container,for,this,activation,config,generally,use,link,set,max,concurrency,instead;public,void,set,concurrency,string,concurrency,try,int,separator,index,concurrency,index,of,if,separator,index,1,set,max,concurrency,integer,parse,int,concurrency,substring,separator,index,1,concurrency,length,else,set,max,concurrency,integer,parse,int,concurrency,catch,number,format,exception,ex,throw,new,illegal,argument,exception,invalid,concurrency,value,concurrency,only,single,maximum,integer,e,g,5,and,minimum,maximum,combo,e,g,3,5,supported,note,that,jms,activation,spec,config,will,effectively,ignore,the,minimum,value,and,scale,from,zero,up,to,the,number,of,consumers,according,to,the,maximum,value
JmsActivationSpecConfig -> public void setConcurrency(String concurrency);1500448076;Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple_upper limit String, e.g. "10"._<p>JCA listener containers will always scale from zero to the given upper limit._A specified lower limit will effectively be ignored._<p>This property is primarily supported for configuration compatibility with_{@link org.springframework.jms.listener.DefaultMessageListenerContainer}._For this activation config, generally use {@link #setMaxConcurrency} instead.;public void setConcurrency(String concurrency) {_		try {_			int separatorIndex = concurrency.indexOf('-')__			if (separatorIndex != -1) {_				setMaxConcurrency(Integer.parseInt(concurrency.substring(separatorIndex + 1, concurrency.length())))__			}_			else {_				setMaxConcurrency(Integer.parseInt(concurrency))__			}_		}_		catch (NumberFormatException ex) {_			throw new IllegalArgumentException("Invalid concurrency value [" + concurrency + "]: only " +_					"single maximum integer (e.g. \"5\") and minimum-maximum combo (e.g. \"3-5\") supported. " +_					"Note that JmsActivationSpecConfig will effectively ignore the minimum value and " +_					"scale from zero up to the number of consumers according to the maximum value.")__		}_	};specify,concurrency,limits,via,a,lower,upper,string,e,g,5,10,or,a,simple,upper,limit,string,e,g,10,p,jca,listener,containers,will,always,scale,from,zero,to,the,given,upper,limit,a,specified,lower,limit,will,effectively,be,ignored,p,this,property,is,primarily,supported,for,configuration,compatibility,with,link,org,springframework,jms,listener,default,message,listener,container,for,this,activation,config,generally,use,link,set,max,concurrency,instead;public,void,set,concurrency,string,concurrency,try,int,separator,index,concurrency,index,of,if,separator,index,1,set,max,concurrency,integer,parse,int,concurrency,substring,separator,index,1,concurrency,length,else,set,max,concurrency,integer,parse,int,concurrency,catch,number,format,exception,ex,throw,new,illegal,argument,exception,invalid,concurrency,value,concurrency,only,single,maximum,integer,e,g,5,and,minimum,maximum,combo,e,g,3,5,supported,note,that,jms,activation,spec,config,will,effectively,ignore,the,minimum,value,and,scale,from,zero,up,to,the,number,of,consumers,according,to,the,maximum,value
JmsActivationSpecConfig -> public void setConcurrency(String concurrency);1530174524;Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple_upper limit String, e.g. "10"._<p>JCA listener containers will always scale from zero to the given upper limit._A specified lower limit will effectively be ignored._<p>This property is primarily supported for configuration compatibility with_{@link org.springframework.jms.listener.DefaultMessageListenerContainer}._For this activation config, generally use {@link #setMaxConcurrency} instead.;public void setConcurrency(String concurrency) {_		try {_			int separatorIndex = concurrency.indexOf('-')__			if (separatorIndex != -1) {_				setMaxConcurrency(Integer.parseInt(concurrency.substring(separatorIndex + 1, concurrency.length())))__			}_			else {_				setMaxConcurrency(Integer.parseInt(concurrency))__			}_		}_		catch (NumberFormatException ex) {_			throw new IllegalArgumentException("Invalid concurrency value [" + concurrency + "]: only " +_					"single maximum integer (e.g. \"5\") and minimum-maximum combo (e.g. \"3-5\") supported. " +_					"Note that JmsActivationSpecConfig will effectively ignore the minimum value and " +_					"scale from zero up to the number of consumers according to the maximum value.")__		}_	};specify,concurrency,limits,via,a,lower,upper,string,e,g,5,10,or,a,simple,upper,limit,string,e,g,10,p,jca,listener,containers,will,always,scale,from,zero,to,the,given,upper,limit,a,specified,lower,limit,will,effectively,be,ignored,p,this,property,is,primarily,supported,for,configuration,compatibility,with,link,org,springframework,jms,listener,default,message,listener,container,for,this,activation,config,generally,use,link,set,max,concurrency,instead;public,void,set,concurrency,string,concurrency,try,int,separator,index,concurrency,index,of,if,separator,index,1,set,max,concurrency,integer,parse,int,concurrency,substring,separator,index,1,concurrency,length,else,set,max,concurrency,integer,parse,int,concurrency,catch,number,format,exception,ex,throw,new,illegal,argument,exception,invalid,concurrency,value,concurrency,only,single,maximum,integer,e,g,5,and,minimum,maximum,combo,e,g,3,5,supported,note,that,jms,activation,spec,config,will,effectively,ignore,the,minimum,value,and,scale,from,zero,up,to,the,number,of,consumers,according,to,the,maximum,value
JmsActivationSpecConfig -> public int getMaxConcurrency();1328020251;Return the maximum number of consumers/sessions to use.;public int getMaxConcurrency() {_		return this.maxConcurrency__	};return,the,maximum,number,of,consumers,sessions,to,use;public,int,get,max,concurrency,return,this,max,concurrency
JmsActivationSpecConfig -> public int getMaxConcurrency();1397718966;Return the maximum number of consumers/sessions to use.;public int getMaxConcurrency() {_		return this.maxConcurrency__	};return,the,maximum,number,of,consumers,sessions,to,use;public,int,get,max,concurrency,return,this,max,concurrency
JmsActivationSpecConfig -> public int getMaxConcurrency();1405696881;Return the maximum number of consumers/sessions to use.;public int getMaxConcurrency() {_		return this.maxConcurrency__	};return,the,maximum,number,of,consumers,sessions,to,use;public,int,get,max,concurrency,return,this,max,concurrency
JmsActivationSpecConfig -> public int getMaxConcurrency();1429198188;Return the maximum number of consumers/sessions to use.;public int getMaxConcurrency() {_		return this.maxConcurrency__	};return,the,maximum,number,of,consumers,sessions,to,use;public,int,get,max,concurrency,return,this,max,concurrency
JmsActivationSpecConfig -> public int getMaxConcurrency();1492514138;Return the maximum number of consumers/sessions to use.;public int getMaxConcurrency() {_		return this.maxConcurrency__	};return,the,maximum,number,of,consumers,sessions,to,use;public,int,get,max,concurrency,return,this,max,concurrency
JmsActivationSpecConfig -> public int getMaxConcurrency();1495868221;Return the maximum number of consumers/sessions to use.;public int getMaxConcurrency() {_		return this.maxConcurrency__	};return,the,maximum,number,of,consumers,sessions,to,use;public,int,get,max,concurrency,return,this,max,concurrency
JmsActivationSpecConfig -> public int getMaxConcurrency();1496837955;Return the maximum number of consumers/sessions to use.;public int getMaxConcurrency() {_		return this.maxConcurrency__	};return,the,maximum,number,of,consumers,sessions,to,use;public,int,get,max,concurrency,return,this,max,concurrency
JmsActivationSpecConfig -> public int getMaxConcurrency();1498780456;Return the maximum number of consumers/sessions to use.;public int getMaxConcurrency() {_		return this.maxConcurrency__	};return,the,maximum,number,of,consumers,sessions,to,use;public,int,get,max,concurrency,return,this,max,concurrency
JmsActivationSpecConfig -> public int getMaxConcurrency();1500448076;Return the maximum number of consumers/sessions to use.;public int getMaxConcurrency() {_		return this.maxConcurrency__	};return,the,maximum,number,of,consumers,sessions,to,use;public,int,get,max,concurrency,return,this,max,concurrency
JmsActivationSpecConfig -> public int getMaxConcurrency();1530174524;Return the maximum number of consumers/sessions to use.;public int getMaxConcurrency() {_		return this.maxConcurrency__	};return,the,maximum,number,of,consumers,sessions,to,use;public,int,get,max,concurrency,return,this,max,concurrency
JmsActivationSpecConfig -> @Nullable 	public MessageConverter getMessageConverter();1495868221;Return the {@link MessageConverter} to use, if any.;@Nullable_	public MessageConverter getMessageConverter() {_		return this.messageConverter__	};return,the,link,message,converter,to,use,if,any;nullable,public,message,converter,get,message,converter,return,this,message,converter
JmsActivationSpecConfig -> @Nullable 	public MessageConverter getMessageConverter();1496837955;Return the {@link MessageConverter} to use, if any.;@Nullable_	public MessageConverter getMessageConverter() {_		return this.messageConverter__	};return,the,link,message,converter,to,use,if,any;nullable,public,message,converter,get,message,converter,return,this,message,converter
JmsActivationSpecConfig -> @Nullable 	public MessageConverter getMessageConverter();1498780456;Return the {@link MessageConverter} to use, if any.;@Nullable_	public MessageConverter getMessageConverter() {_		return this.messageConverter__	};return,the,link,message,converter,to,use,if,any;nullable,public,message,converter,get,message,converter,return,this,message,converter
JmsActivationSpecConfig -> @Nullable 	public MessageConverter getMessageConverter();1500448076;Return the {@link MessageConverter} to use, if any.;@Nullable_	public MessageConverter getMessageConverter() {_		return this.messageConverter__	};return,the,link,message,converter,to,use,if,any;nullable,public,message,converter,get,message,converter,return,this,message,converter
JmsActivationSpecConfig -> @Nullable 	public MessageConverter getMessageConverter();1530174524;Return the {@link MessageConverter} to use, if any.;@Nullable_	public MessageConverter getMessageConverter() {_		return this.messageConverter__	};return,the,link,message,converter,to,use,if,any;nullable,public,message,converter,get,message,converter,return,this,message,converter
JmsActivationSpecConfig -> public void setAcknowledgeModeName(String constantName);1328020251;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>Note that JCA resource adapters generally only support auto and dups-ok_(see Spring's {@link StandardJmsActivationSpecFactory}). ActiveMQ also_supports "SESSION_TRANSACTED" in the form of RA-managed transactions_(automatically translated by Spring's {@link DefaultJmsActivationSpecFactory}._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED_@see StandardJmsActivationSpecFactory_@see DefaultJmsActivationSpecFactory;public void setAcknowledgeModeName(String constantName) {_		setAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,note,that,jca,resource,adapters,generally,only,support,auto,and,dups,ok,see,spring,s,link,standard,jms,activation,spec,factory,active,mq,also,supports,in,the,form,of,ra,managed,transactions,automatically,translated,by,spring,s,link,default,jms,activation,spec,factory,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,standard,jms,activation,spec,factory,see,default,jms,activation,spec,factory;public,void,set,acknowledge,mode,name,string,constant,name,set,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsActivationSpecConfig -> public void setAcknowledgeModeName(String constantName);1397718966;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>Note that JCA resource adapters generally only support auto and dups-ok_(see Spring's {@link StandardJmsActivationSpecFactory}). ActiveMQ also_supports "SESSION_TRANSACTED" in the form of RA-managed transactions_(automatically translated by Spring's {@link DefaultJmsActivationSpecFactory}._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED_@see StandardJmsActivationSpecFactory_@see DefaultJmsActivationSpecFactory;public void setAcknowledgeModeName(String constantName) {_		setAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,note,that,jca,resource,adapters,generally,only,support,auto,and,dups,ok,see,spring,s,link,standard,jms,activation,spec,factory,active,mq,also,supports,in,the,form,of,ra,managed,transactions,automatically,translated,by,spring,s,link,default,jms,activation,spec,factory,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,standard,jms,activation,spec,factory,see,default,jms,activation,spec,factory;public,void,set,acknowledge,mode,name,string,constant,name,set,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsActivationSpecConfig -> public void setAcknowledgeModeName(String constantName);1405696881;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>Note that JCA resource adapters generally only support auto and dups-ok_(see Spring's {@link StandardJmsActivationSpecFactory}). ActiveMQ also_supports "SESSION_TRANSACTED" in the form of RA-managed transactions_(automatically translated by Spring's {@link DefaultJmsActivationSpecFactory}._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED_@see StandardJmsActivationSpecFactory_@see DefaultJmsActivationSpecFactory;public void setAcknowledgeModeName(String constantName) {_		setAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,note,that,jca,resource,adapters,generally,only,support,auto,and,dups,ok,see,spring,s,link,standard,jms,activation,spec,factory,active,mq,also,supports,in,the,form,of,ra,managed,transactions,automatically,translated,by,spring,s,link,default,jms,activation,spec,factory,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,standard,jms,activation,spec,factory,see,default,jms,activation,spec,factory;public,void,set,acknowledge,mode,name,string,constant,name,set,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsActivationSpecConfig -> public void setAcknowledgeModeName(String constantName);1429198188;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>Note that JCA resource adapters generally only support auto and dups-ok_(see Spring's {@link StandardJmsActivationSpecFactory}). ActiveMQ also_supports "SESSION_TRANSACTED" in the form of RA-managed transactions_(automatically translated by Spring's {@link DefaultJmsActivationSpecFactory}._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED_@see StandardJmsActivationSpecFactory_@see DefaultJmsActivationSpecFactory;public void setAcknowledgeModeName(String constantName) {_		setAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,note,that,jca,resource,adapters,generally,only,support,auto,and,dups,ok,see,spring,s,link,standard,jms,activation,spec,factory,active,mq,also,supports,in,the,form,of,ra,managed,transactions,automatically,translated,by,spring,s,link,default,jms,activation,spec,factory,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,standard,jms,activation,spec,factory,see,default,jms,activation,spec,factory;public,void,set,acknowledge,mode,name,string,constant,name,set,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsActivationSpecConfig -> public void setAcknowledgeModeName(String constantName);1492514138;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>Note that JCA resource adapters generally only support auto and dups-ok_(see Spring's {@link StandardJmsActivationSpecFactory}). ActiveMQ also_supports "SESSION_TRANSACTED" in the form of RA-managed transactions_(automatically translated by Spring's {@link DefaultJmsActivationSpecFactory}._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED_@see StandardJmsActivationSpecFactory_@see DefaultJmsActivationSpecFactory;public void setAcknowledgeModeName(String constantName) {_		setAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,note,that,jca,resource,adapters,generally,only,support,auto,and,dups,ok,see,spring,s,link,standard,jms,activation,spec,factory,active,mq,also,supports,in,the,form,of,ra,managed,transactions,automatically,translated,by,spring,s,link,default,jms,activation,spec,factory,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,standard,jms,activation,spec,factory,see,default,jms,activation,spec,factory;public,void,set,acknowledge,mode,name,string,constant,name,set,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsActivationSpecConfig -> public void setAcknowledgeModeName(String constantName);1495868221;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>Note that JCA resource adapters generally only support auto and dups-ok_(see Spring's {@link StandardJmsActivationSpecFactory}). ActiveMQ also_supports "SESSION_TRANSACTED" in the form of RA-managed transactions_(automatically translated by Spring's {@link DefaultJmsActivationSpecFactory}._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED_@see StandardJmsActivationSpecFactory_@see DefaultJmsActivationSpecFactory;public void setAcknowledgeModeName(String constantName) {_		setAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,note,that,jca,resource,adapters,generally,only,support,auto,and,dups,ok,see,spring,s,link,standard,jms,activation,spec,factory,active,mq,also,supports,in,the,form,of,ra,managed,transactions,automatically,translated,by,spring,s,link,default,jms,activation,spec,factory,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,standard,jms,activation,spec,factory,see,default,jms,activation,spec,factory;public,void,set,acknowledge,mode,name,string,constant,name,set,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsActivationSpecConfig -> public void setAcknowledgeModeName(String constantName);1496837955;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>Note that JCA resource adapters generally only support auto and dups-ok_(see Spring's {@link StandardJmsActivationSpecFactory}). ActiveMQ also_supports "SESSION_TRANSACTED" in the form of RA-managed transactions_(automatically translated by Spring's {@link DefaultJmsActivationSpecFactory}._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED_@see StandardJmsActivationSpecFactory_@see DefaultJmsActivationSpecFactory;public void setAcknowledgeModeName(String constantName) {_		setAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,note,that,jca,resource,adapters,generally,only,support,auto,and,dups,ok,see,spring,s,link,standard,jms,activation,spec,factory,active,mq,also,supports,in,the,form,of,ra,managed,transactions,automatically,translated,by,spring,s,link,default,jms,activation,spec,factory,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,standard,jms,activation,spec,factory,see,default,jms,activation,spec,factory;public,void,set,acknowledge,mode,name,string,constant,name,set,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsActivationSpecConfig -> public void setAcknowledgeModeName(String constantName);1498780456;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>Note that JCA resource adapters generally only support auto and dups-ok_(see Spring's {@link StandardJmsActivationSpecFactory}). ActiveMQ also_supports "SESSION_TRANSACTED" in the form of RA-managed transactions_(automatically translated by Spring's {@link DefaultJmsActivationSpecFactory}._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED_@see StandardJmsActivationSpecFactory_@see DefaultJmsActivationSpecFactory;public void setAcknowledgeModeName(String constantName) {_		setAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,note,that,jca,resource,adapters,generally,only,support,auto,and,dups,ok,see,spring,s,link,standard,jms,activation,spec,factory,active,mq,also,supports,in,the,form,of,ra,managed,transactions,automatically,translated,by,spring,s,link,default,jms,activation,spec,factory,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,standard,jms,activation,spec,factory,see,default,jms,activation,spec,factory;public,void,set,acknowledge,mode,name,string,constant,name,set,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsActivationSpecConfig -> public void setAcknowledgeModeName(String constantName);1500448076;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>Note that JCA resource adapters generally only support auto and dups-ok_(see Spring's {@link StandardJmsActivationSpecFactory}). ActiveMQ also_supports "SESSION_TRANSACTED" in the form of RA-managed transactions_(automatically translated by Spring's {@link DefaultJmsActivationSpecFactory}._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED_@see StandardJmsActivationSpecFactory_@see DefaultJmsActivationSpecFactory;public void setAcknowledgeModeName(String constantName) {_		setAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,note,that,jca,resource,adapters,generally,only,support,auto,and,dups,ok,see,spring,s,link,standard,jms,activation,spec,factory,active,mq,also,supports,in,the,form,of,ra,managed,transactions,automatically,translated,by,spring,s,link,default,jms,activation,spec,factory,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,standard,jms,activation,spec,factory,see,default,jms,activation,spec,factory;public,void,set,acknowledge,mode,name,string,constant,name,set,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsActivationSpecConfig -> public void setAcknowledgeModeName(String constantName);1530174524;Set the JMS acknowledgement mode by the name of the corresponding constant_in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE"._<p>Note that JCA resource adapters generally only support auto and dups-ok_(see Spring's {@link StandardJmsActivationSpecFactory}). ActiveMQ also_supports "SESSION_TRANSACTED" in the form of RA-managed transactions_(automatically translated by Spring's {@link DefaultJmsActivationSpecFactory}._@param constantName the name of the {@link Session} acknowledge mode constant_@see javax.jms.Session#AUTO_ACKNOWLEDGE_@see javax.jms.Session#CLIENT_ACKNOWLEDGE_@see javax.jms.Session#DUPS_OK_ACKNOWLEDGE_@see javax.jms.Session#SESSION_TRANSACTED_@see StandardJmsActivationSpecFactory_@see DefaultJmsActivationSpecFactory;public void setAcknowledgeModeName(String constantName) {_		setAcknowledgeMode(sessionConstants.asNumber(constantName).intValue())__	};set,the,jms,acknowledgement,mode,by,the,name,of,the,corresponding,constant,in,the,jms,link,session,interface,e,g,p,note,that,jca,resource,adapters,generally,only,support,auto,and,dups,ok,see,spring,s,link,standard,jms,activation,spec,factory,active,mq,also,supports,in,the,form,of,ra,managed,transactions,automatically,translated,by,spring,s,link,default,jms,activation,spec,factory,param,constant,name,the,name,of,the,link,session,acknowledge,mode,constant,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,javax,jms,session,see,standard,jms,activation,spec,factory,see,default,jms,activation,spec,factory;public,void,set,acknowledge,mode,name,string,constant,name,set,acknowledge,mode,session,constants,as,number,constant,name,int,value
JmsActivationSpecConfig -> public void setPrefetchSize(int prefetchSize);1328020251;Specify the maximum number of messages to load into a session_(a kind of batch size).;public void setPrefetchSize(int prefetchSize) {_		this.prefetchSize = prefetchSize__	};specify,the,maximum,number,of,messages,to,load,into,a,session,a,kind,of,batch,size;public,void,set,prefetch,size,int,prefetch,size,this,prefetch,size,prefetch,size
JmsActivationSpecConfig -> public void setPrefetchSize(int prefetchSize);1397718966;Specify the maximum number of messages to load into a session_(a kind of batch size).;public void setPrefetchSize(int prefetchSize) {_		this.prefetchSize = prefetchSize__	};specify,the,maximum,number,of,messages,to,load,into,a,session,a,kind,of,batch,size;public,void,set,prefetch,size,int,prefetch,size,this,prefetch,size,prefetch,size
JmsActivationSpecConfig -> public void setPrefetchSize(int prefetchSize);1405696881;Specify the maximum number of messages to load into a session_(a kind of batch size).;public void setPrefetchSize(int prefetchSize) {_		this.prefetchSize = prefetchSize__	};specify,the,maximum,number,of,messages,to,load,into,a,session,a,kind,of,batch,size;public,void,set,prefetch,size,int,prefetch,size,this,prefetch,size,prefetch,size
JmsActivationSpecConfig -> public void setPrefetchSize(int prefetchSize);1429198188;Specify the maximum number of messages to load into a session_(a kind of batch size).;public void setPrefetchSize(int prefetchSize) {_		this.prefetchSize = prefetchSize__	};specify,the,maximum,number,of,messages,to,load,into,a,session,a,kind,of,batch,size;public,void,set,prefetch,size,int,prefetch,size,this,prefetch,size,prefetch,size
JmsActivationSpecConfig -> public void setPrefetchSize(int prefetchSize);1492514138;Specify the maximum number of messages to load into a session_(a kind of batch size).;public void setPrefetchSize(int prefetchSize) {_		this.prefetchSize = prefetchSize__	};specify,the,maximum,number,of,messages,to,load,into,a,session,a,kind,of,batch,size;public,void,set,prefetch,size,int,prefetch,size,this,prefetch,size,prefetch,size
JmsActivationSpecConfig -> public void setPrefetchSize(int prefetchSize);1495868221;Specify the maximum number of messages to load into a session_(a kind of batch size).;public void setPrefetchSize(int prefetchSize) {_		this.prefetchSize = prefetchSize__	};specify,the,maximum,number,of,messages,to,load,into,a,session,a,kind,of,batch,size;public,void,set,prefetch,size,int,prefetch,size,this,prefetch,size,prefetch,size
JmsActivationSpecConfig -> public void setPrefetchSize(int prefetchSize);1496837955;Specify the maximum number of messages to load into a session_(a kind of batch size).;public void setPrefetchSize(int prefetchSize) {_		this.prefetchSize = prefetchSize__	};specify,the,maximum,number,of,messages,to,load,into,a,session,a,kind,of,batch,size;public,void,set,prefetch,size,int,prefetch,size,this,prefetch,size,prefetch,size
JmsActivationSpecConfig -> public void setPrefetchSize(int prefetchSize);1498780456;Specify the maximum number of messages to load into a session_(a kind of batch size).;public void setPrefetchSize(int prefetchSize) {_		this.prefetchSize = prefetchSize__	};specify,the,maximum,number,of,messages,to,load,into,a,session,a,kind,of,batch,size;public,void,set,prefetch,size,int,prefetch,size,this,prefetch,size,prefetch,size
JmsActivationSpecConfig -> public void setPrefetchSize(int prefetchSize);1500448076;Specify the maximum number of messages to load into a session_(a kind of batch size).;public void setPrefetchSize(int prefetchSize) {_		this.prefetchSize = prefetchSize__	};specify,the,maximum,number,of,messages,to,load,into,a,session,a,kind,of,batch,size;public,void,set,prefetch,size,int,prefetch,size,this,prefetch,size,prefetch,size
JmsActivationSpecConfig -> public void setPrefetchSize(int prefetchSize);1530174524;Specify the maximum number of messages to load into a session_(a kind of batch size).;public void setPrefetchSize(int prefetchSize) {_		this.prefetchSize = prefetchSize__	};specify,the,maximum,number,of,messages,to,load,into,a,session,a,kind,of,batch,size;public,void,set,prefetch,size,int,prefetch,size,this,prefetch,size,prefetch,size
JmsActivationSpecConfig -> public void setMessageConverter(MessageConverter messageConverter);1397718966;Set the {@link MessageConverter} strategy for converting JMS Messages._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
JmsActivationSpecConfig -> public void setMessageConverter(MessageConverter messageConverter);1405696881;Set the {@link MessageConverter} strategy for converting JMS Messages._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
JmsActivationSpecConfig -> public void setMessageConverter(MessageConverter messageConverter);1429198188;Set the {@link MessageConverter} strategy for converting JMS Messages._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
JmsActivationSpecConfig -> public void setMessageConverter(MessageConverter messageConverter);1492514138;Set the {@link MessageConverter} strategy for converting JMS Messages._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
JmsActivationSpecConfig -> public void setMessageConverter(MessageConverter messageConverter);1495868221;Set the {@link MessageConverter} strategy for converting JMS Messages._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
JmsActivationSpecConfig -> public void setMessageConverter(MessageConverter messageConverter);1496837955;Set the {@link MessageConverter} strategy for converting JMS Messages._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
JmsActivationSpecConfig -> public void setMessageConverter(MessageConverter messageConverter);1498780456;Set the {@link MessageConverter} strategy for converting JMS Messages._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		this.messageConverter = messageConverter__	};set,the,link,message,converter,strategy,for,converting,jms,messages,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,this,message,converter,message,converter
JmsActivationSpecConfig -> public MessageConverter getMessageConverter();1397718966;Return the {@link MessageConverter} to use, if any.;public MessageConverter getMessageConverter() {_		return messageConverter__	};return,the,link,message,converter,to,use,if,any;public,message,converter,get,message,converter,return,message,converter
JmsActivationSpecConfig -> public MessageConverter getMessageConverter();1405696881;Return the {@link MessageConverter} to use, if any.;public MessageConverter getMessageConverter() {_		return this.messageConverter__	};return,the,link,message,converter,to,use,if,any;public,message,converter,get,message,converter,return,this,message,converter
JmsActivationSpecConfig -> public MessageConverter getMessageConverter();1429198188;Return the {@link MessageConverter} to use, if any.;public MessageConverter getMessageConverter() {_		return this.messageConverter__	};return,the,link,message,converter,to,use,if,any;public,message,converter,get,message,converter,return,this,message,converter
JmsActivationSpecConfig -> public MessageConverter getMessageConverter();1492514138;Return the {@link MessageConverter} to use, if any.;public MessageConverter getMessageConverter() {_		return this.messageConverter__	};return,the,link,message,converter,to,use,if,any;public,message,converter,get,message,converter,return,this,message,converter
JmsActivationSpecConfig -> public int getPrefetchSize();1328020251;Return the maximum number of messages to load into a session.;public int getPrefetchSize() {_		return this.prefetchSize__	};return,the,maximum,number,of,messages,to,load,into,a,session;public,int,get,prefetch,size,return,this,prefetch,size
JmsActivationSpecConfig -> public int getPrefetchSize();1397718966;Return the maximum number of messages to load into a session.;public int getPrefetchSize() {_		return this.prefetchSize__	};return,the,maximum,number,of,messages,to,load,into,a,session;public,int,get,prefetch,size,return,this,prefetch,size
JmsActivationSpecConfig -> public int getPrefetchSize();1405696881;Return the maximum number of messages to load into a session.;public int getPrefetchSize() {_		return this.prefetchSize__	};return,the,maximum,number,of,messages,to,load,into,a,session;public,int,get,prefetch,size,return,this,prefetch,size
JmsActivationSpecConfig -> public int getPrefetchSize();1429198188;Return the maximum number of messages to load into a session.;public int getPrefetchSize() {_		return this.prefetchSize__	};return,the,maximum,number,of,messages,to,load,into,a,session;public,int,get,prefetch,size,return,this,prefetch,size
JmsActivationSpecConfig -> public int getPrefetchSize();1492514138;Return the maximum number of messages to load into a session.;public int getPrefetchSize() {_		return this.prefetchSize__	};return,the,maximum,number,of,messages,to,load,into,a,session;public,int,get,prefetch,size,return,this,prefetch,size
JmsActivationSpecConfig -> public int getPrefetchSize();1495868221;Return the maximum number of messages to load into a session.;public int getPrefetchSize() {_		return this.prefetchSize__	};return,the,maximum,number,of,messages,to,load,into,a,session;public,int,get,prefetch,size,return,this,prefetch,size
JmsActivationSpecConfig -> public int getPrefetchSize();1496837955;Return the maximum number of messages to load into a session.;public int getPrefetchSize() {_		return this.prefetchSize__	};return,the,maximum,number,of,messages,to,load,into,a,session;public,int,get,prefetch,size,return,this,prefetch,size
JmsActivationSpecConfig -> public int getPrefetchSize();1498780456;Return the maximum number of messages to load into a session.;public int getPrefetchSize() {_		return this.prefetchSize__	};return,the,maximum,number,of,messages,to,load,into,a,session;public,int,get,prefetch,size,return,this,prefetch,size
JmsActivationSpecConfig -> public int getPrefetchSize();1500448076;Return the maximum number of messages to load into a session.;public int getPrefetchSize() {_		return this.prefetchSize__	};return,the,maximum,number,of,messages,to,load,into,a,session;public,int,get,prefetch,size,return,this,prefetch,size
JmsActivationSpecConfig -> public int getPrefetchSize();1530174524;Return the maximum number of messages to load into a session.;public int getPrefetchSize() {_		return this.prefetchSize__	};return,the,maximum,number,of,messages,to,load,into,a,session;public,int,get,prefetch,size,return,this,prefetch,size
