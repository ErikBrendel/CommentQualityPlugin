commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setDestinationName(@Nullable String destinationName) {     this.destinationName = destinationName. }
false;public;0;4;;@Nullable public String getDestinationName() {     return this.destinationName. }
false;public;1;3;;public void setPubSubDomain(boolean pubSubDomain) {     this.pubSubDomain = pubSubDomain. }
false;public;0;3;;public boolean isPubSubDomain() {     return this.pubSubDomain. }
false;public;1;3;;public void setReplyPubSubDomain(boolean replyPubSubDomain) {     this.replyPubSubDomain = replyPubSubDomain. }
false;public;0;8;;public boolean isReplyPubSubDomain() {     if (this.replyPubSubDomain != null) {         return this.replyPubSubDomain.     } else {         return isPubSubDomain().     } }
false;public;1;3;;public void setReplyQosSettings(@Nullable QosSettings replyQosSettings) {     this.replyQosSettings = replyQosSettings. }
false;public;0;4;;@Nullable public QosSettings getReplyQosSettings() {     return this.replyQosSettings. }
false;public;1;6;;public void setSubscriptionDurable(boolean subscriptionDurable) {     this.subscriptionDurable = subscriptionDurable.     if (subscriptionDurable) {         this.pubSubDomain = true.     } }
false;public;0;3;;public boolean isSubscriptionDurable() {     return this.subscriptionDurable. }
false;public;1;6;;public void setSubscriptionShared(boolean subscriptionShared) {     this.subscriptionShared = subscriptionShared.     if (subscriptionShared) {         this.pubSubDomain = true.     } }
false;public;0;3;;public boolean isSubscriptionShared() {     return this.subscriptionShared. }
false;public;1;3;;public void setSubscriptionName(@Nullable String subscriptionName) {     this.subscriptionName = subscriptionName. }
false;public;0;4;;@Nullable public String getSubscriptionName() {     return this.subscriptionName. }
false;public;1;4;;public void setDurableSubscriptionName(@Nullable String durableSubscriptionName) {     this.subscriptionName = durableSubscriptionName.     this.subscriptionDurable = (durableSubscriptionName != null). }
false;public;0;4;;@Nullable public String getDurableSubscriptionName() {     return (this.subscriptionDurable ? this.subscriptionName : null). }
false;public;1;3;;public void setClientId(@Nullable String clientId) {     this.clientId = clientId. }
false;public;0;4;;@Nullable public String getClientId() {     return this.clientId. }
false;public;1;3;;public void setMessageSelector(@Nullable String messageSelector) {     this.messageSelector = messageSelector. }
false;public;0;4;;@Nullable public String getMessageSelector() {     return this.messageSelector. }
true;public;1;3;/**  * Set the JMS acknowledgement mode by the name of the corresponding constant  * in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE".  * <p>Note that JCA resource adapters generally only support auto and dups-ok  * (see Spring's {@link StandardJmsActivationSpecFactory}). ActiveMQ also  * supports "SESSION_TRANSACTED" in the form of RA-managed transactions  * (automatically translated by Spring's {@link DefaultJmsActivationSpecFactory}.  * @param constantName the name of the {@link Session} acknowledge mode constant  * @see javax.jms.Session#AUTO_ACKNOWLEDGE  * @see javax.jms.Session#CLIENT_ACKNOWLEDGE  * @see javax.jms.Session#DUPS_OK_ACKNOWLEDGE  * @see javax.jms.Session#SESSION_TRANSACTED  * @see StandardJmsActivationSpecFactory  * @see DefaultJmsActivationSpecFactory  */ ;/**  * Set the JMS acknowledgement mode by the name of the corresponding constant  * in the JMS {@link Session} interface, e.g. "CLIENT_ACKNOWLEDGE".  * <p>Note that JCA resource adapters generally only support auto and dups-ok  * (see Spring's {@link StandardJmsActivationSpecFactory}). ActiveMQ also  * supports "SESSION_TRANSACTED" in the form of RA-managed transactions  * (automatically translated by Spring's {@link DefaultJmsActivationSpecFactory}.  * @param constantName the name of the {@link Session} acknowledge mode constant  * @see javax.jms.Session#AUTO_ACKNOWLEDGE  * @see javax.jms.Session#CLIENT_ACKNOWLEDGE  * @see javax.jms.Session#DUPS_OK_ACKNOWLEDGE  * @see javax.jms.Session#SESSION_TRANSACTED  * @see StandardJmsActivationSpecFactory  * @see DefaultJmsActivationSpecFactory  */ public void setAcknowledgeModeName(String constantName) {     setAcknowledgeMode(sessionConstants.asNumber(constantName).intValue()). }
true;public;1;3;/**  * Set the JMS acknowledgement mode to use.  * @see javax.jms.Session#AUTO_ACKNOWLEDGE  * @see javax.jms.Session#CLIENT_ACKNOWLEDGE  * @see javax.jms.Session#DUPS_OK_ACKNOWLEDGE  * @see javax.jms.Session#SESSION_TRANSACTED  */ ;/**  * Set the JMS acknowledgement mode to use.  * @see javax.jms.Session#AUTO_ACKNOWLEDGE  * @see javax.jms.Session#CLIENT_ACKNOWLEDGE  * @see javax.jms.Session#DUPS_OK_ACKNOWLEDGE  * @see javax.jms.Session#SESSION_TRANSACTED  */ public void setAcknowledgeMode(int acknowledgeMode) {     this.acknowledgeMode = acknowledgeMode. }
true;public;0;3;/**  * Return the JMS acknowledgement mode to use.  */ ;/**  * Return the JMS acknowledgement mode to use.  */ public int getAcknowledgeMode() {     return this.acknowledgeMode. }
true;public;1;17;/**  * Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple  * upper limit String, e.g. "10".  * <p>JCA listener containers will always scale from zero to the given upper limit.  * A specified lower limit will effectively be ignored.  * <p>This property is primarily supported for configuration compatibility with  * {@link org.springframework.jms.listener.DefaultMessageListenerContainer}.  * For this activation config, generally use {@link #setMaxConcurrency} instead.  */ ;/**  * Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple  * upper limit String, e.g. "10".  * <p>JCA listener containers will always scale from zero to the given upper limit.  * A specified lower limit will effectively be ignored.  * <p>This property is primarily supported for configuration compatibility with  * {@link org.springframework.jms.listener.DefaultMessageListenerContainer}.  * For this activation config, generally use {@link #setMaxConcurrency} instead.  */ public void setConcurrency(String concurrency) {     try {         int separatorIndex = concurrency.indexOf('-').         if (separatorIndex != -1) {             setMaxConcurrency(Integer.parseInt(concurrency.substring(separatorIndex + 1, concurrency.length()))).         } else {             setMaxConcurrency(Integer.parseInt(concurrency)).         }     } catch (NumberFormatException ex) {         throw new IllegalArgumentException("Invalid concurrency value [" + concurrency + "]: only " + "single maximum integer (e.g. \"5\") and minimum-maximum combo (e.g. \"3-5\") supported. " + "Note that JmsActivationSpecConfig will effectively ignore the minimum value and " + "scale from zero up to the number of consumers according to the maximum value.").     } }
true;public;1;3;/**  * Specify the maximum number of consumers/sessions to use, effectively  * controlling the number of concurrent invocations on the target listener.  */ ;/**  * Specify the maximum number of consumers/sessions to use, effectively  * controlling the number of concurrent invocations on the target listener.  */ public void setMaxConcurrency(int maxConcurrency) {     this.maxConcurrency = maxConcurrency. }
true;public;0;3;/**  * Return the maximum number of consumers/sessions to use.  */ ;/**  * Return the maximum number of consumers/sessions to use.  */ public int getMaxConcurrency() {     return this.maxConcurrency. }
true;public;1;3;/**  * Specify the maximum number of messages to load into a session  * (a kind of batch size).  */ ;/**  * Specify the maximum number of messages to load into a session  * (a kind of batch size).  */ public void setPrefetchSize(int prefetchSize) {     this.prefetchSize = prefetchSize. }
true;public;0;3;/**  * Return the maximum number of messages to load into a session.  */ ;/**  * Return the maximum number of messages to load into a session.  */ public int getPrefetchSize() {     return this.prefetchSize. }
true;public;1;3;/**  * Set the {@link MessageConverter} strategy for converting JMS Messages.  * @param messageConverter the message converter to use  */ ;/**  * Set the {@link MessageConverter} strategy for converting JMS Messages.  * @param messageConverter the message converter to use  */ public void setMessageConverter(@Nullable MessageConverter messageConverter) {     this.messageConverter = messageConverter. }
true;public;0;4;/**  * Return the {@link MessageConverter} to use, if any.  */ ;/**  * Return the {@link MessageConverter} to use, if any.  */ @Nullable public MessageConverter getMessageConverter() {     return this.messageConverter. }
