# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionAwareConnectionFactoryProxy -> public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed);1328020251;Set whether to allow for a local JMS transaction that is synchronized with a_Spring-managed transaction (where the main transaction might be a JDBC-based_one for a specific DataSource, for example), with the JMS transaction committing_right after the main transaction. If not allowed, the given ConnectionFactory_needs to handle transaction enlistment underneath the covers._<p>Default is "false": If not within a managed transaction that encompasses_the underlying JMS ConnectionFactory, standard Sessions will be returned._Turn this flag on to allow participation in any Spring-managed transaction,_with a local JMS transaction synchronized with the main transaction.;public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed) {_		this.synchedLocalTransactionAllowed = synchedLocalTransactionAllowed__	};set,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction,where,the,main,transaction,might,be,a,jdbc,based,one,for,a,specific,data,source,for,example,with,the,jms,transaction,committing,right,after,the,main,transaction,if,not,allowed,the,given,connection,factory,needs,to,handle,transaction,enlistment,underneath,the,covers,p,default,is,false,if,not,within,a,managed,transaction,that,encompasses,the,underlying,jms,connection,factory,standard,sessions,will,be,returned,turn,this,flag,on,to,allow,participation,in,any,spring,managed,transaction,with,a,local,jms,transaction,synchronized,with,the,main,transaction;public,void,set,synched,local,transaction,allowed,boolean,synched,local,transaction,allowed,this,synched,local,transaction,allowed,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed);1356735495;Set whether to allow for a local JMS transaction that is synchronized with a_Spring-managed transaction (where the main transaction might be a JDBC-based_one for a specific DataSource, for example), with the JMS transaction committing_right after the main transaction. If not allowed, the given ConnectionFactory_needs to handle transaction enlistment underneath the covers._<p>Default is "false": If not within a managed transaction that encompasses_the underlying JMS ConnectionFactory, standard Sessions will be returned._Turn this flag on to allow participation in any Spring-managed transaction,_with a local JMS transaction synchronized with the main transaction.;public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed) {_		this.synchedLocalTransactionAllowed = synchedLocalTransactionAllowed__	};set,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction,where,the,main,transaction,might,be,a,jdbc,based,one,for,a,specific,data,source,for,example,with,the,jms,transaction,committing,right,after,the,main,transaction,if,not,allowed,the,given,connection,factory,needs,to,handle,transaction,enlistment,underneath,the,covers,p,default,is,false,if,not,within,a,managed,transaction,that,encompasses,the,underlying,jms,connection,factory,standard,sessions,will,be,returned,turn,this,flag,on,to,allow,participation,in,any,spring,managed,transaction,with,a,local,jms,transaction,synchronized,with,the,main,transaction;public,void,set,synched,local,transaction,allowed,boolean,synched,local,transaction,allowed,this,synched,local,transaction,allowed,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed);1357119239;Set whether to allow for a local JMS transaction that is synchronized with a_Spring-managed transaction (where the main transaction might be a JDBC-based_one for a specific DataSource, for example), with the JMS transaction committing_right after the main transaction. If not allowed, the given ConnectionFactory_needs to handle transaction enlistment underneath the covers._<p>Default is "false": If not within a managed transaction that encompasses_the underlying JMS ConnectionFactory, standard Sessions will be returned._Turn this flag on to allow participation in any Spring-managed transaction,_with a local JMS transaction synchronized with the main transaction.;public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed) {_		this.synchedLocalTransactionAllowed = synchedLocalTransactionAllowed__	};set,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction,where,the,main,transaction,might,be,a,jdbc,based,one,for,a,specific,data,source,for,example,with,the,jms,transaction,committing,right,after,the,main,transaction,if,not,allowed,the,given,connection,factory,needs,to,handle,transaction,enlistment,underneath,the,covers,p,default,is,false,if,not,within,a,managed,transaction,that,encompasses,the,underlying,jms,connection,factory,standard,sessions,will,be,returned,turn,this,flag,on,to,allow,participation,in,any,spring,managed,transaction,with,a,local,jms,transaction,synchronized,with,the,main,transaction;public,void,set,synched,local,transaction,allowed,boolean,synched,local,transaction,allowed,this,synched,local,transaction,allowed,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed);1368482696;Set whether to allow for a local JMS transaction that is synchronized with a_Spring-managed transaction (where the main transaction might be a JDBC-based_one for a specific DataSource, for example), with the JMS transaction committing_right after the main transaction. If not allowed, the given ConnectionFactory_needs to handle transaction enlistment underneath the covers._<p>Default is "false": If not within a managed transaction that encompasses_the underlying JMS ConnectionFactory, standard Sessions will be returned._Turn this flag on to allow participation in any Spring-managed transaction,_with a local JMS transaction synchronized with the main transaction.;public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed) {_		this.synchedLocalTransactionAllowed = synchedLocalTransactionAllowed__	};set,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction,where,the,main,transaction,might,be,a,jdbc,based,one,for,a,specific,data,source,for,example,with,the,jms,transaction,committing,right,after,the,main,transaction,if,not,allowed,the,given,connection,factory,needs,to,handle,transaction,enlistment,underneath,the,covers,p,default,is,false,if,not,within,a,managed,transaction,that,encompasses,the,underlying,jms,connection,factory,standard,sessions,will,be,returned,turn,this,flag,on,to,allow,participation,in,any,spring,managed,transaction,with,a,local,jms,transaction,synchronized,with,the,main,transaction;public,void,set,synched,local,transaction,allowed,boolean,synched,local,transaction,allowed,this,synched,local,transaction,allowed,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed);1385412762;Set whether to allow for a local JMS transaction that is synchronized with a_Spring-managed transaction (where the main transaction might be a JDBC-based_one for a specific DataSource, for example), with the JMS transaction committing_right after the main transaction. If not allowed, the given ConnectionFactory_needs to handle transaction enlistment underneath the covers._<p>Default is "false": If not within a managed transaction that encompasses_the underlying JMS ConnectionFactory, standard Sessions will be returned._Turn this flag on to allow participation in any Spring-managed transaction,_with a local JMS transaction synchronized with the main transaction.;public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed) {_		this.synchedLocalTransactionAllowed = synchedLocalTransactionAllowed__	};set,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction,where,the,main,transaction,might,be,a,jdbc,based,one,for,a,specific,data,source,for,example,with,the,jms,transaction,committing,right,after,the,main,transaction,if,not,allowed,the,given,connection,factory,needs,to,handle,transaction,enlistment,underneath,the,covers,p,default,is,false,if,not,within,a,managed,transaction,that,encompasses,the,underlying,jms,connection,factory,standard,sessions,will,be,returned,turn,this,flag,on,to,allow,participation,in,any,spring,managed,transaction,with,a,local,jms,transaction,synchronized,with,the,main,transaction;public,void,set,synched,local,transaction,allowed,boolean,synched,local,transaction,allowed,this,synched,local,transaction,allowed,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed);1432125256;Set whether to allow for a local JMS transaction that is synchronized with a_Spring-managed transaction (where the main transaction might be a JDBC-based_one for a specific DataSource, for example), with the JMS transaction committing_right after the main transaction. If not allowed, the given ConnectionFactory_needs to handle transaction enlistment underneath the covers._<p>Default is "false": If not within a managed transaction that encompasses_the underlying JMS ConnectionFactory, standard Sessions will be returned._Turn this flag on to allow participation in any Spring-managed transaction,_with a local JMS transaction synchronized with the main transaction.;public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed) {_		this.synchedLocalTransactionAllowed = synchedLocalTransactionAllowed__	};set,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction,where,the,main,transaction,might,be,a,jdbc,based,one,for,a,specific,data,source,for,example,with,the,jms,transaction,committing,right,after,the,main,transaction,if,not,allowed,the,given,connection,factory,needs,to,handle,transaction,enlistment,underneath,the,covers,p,default,is,false,if,not,within,a,managed,transaction,that,encompasses,the,underlying,jms,connection,factory,standard,sessions,will,be,returned,turn,this,flag,on,to,allow,participation,in,any,spring,managed,transaction,with,a,local,jms,transaction,synchronized,with,the,main,transaction;public,void,set,synched,local,transaction,allowed,boolean,synched,local,transaction,allowed,this,synched,local,transaction,allowed,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed);1438003976;Set whether to allow for a local JMS transaction that is synchronized with a_Spring-managed transaction (where the main transaction might be a JDBC-based_one for a specific DataSource, for example), with the JMS transaction committing_right after the main transaction. If not allowed, the given ConnectionFactory_needs to handle transaction enlistment underneath the covers._<p>Default is "false": If not within a managed transaction that encompasses_the underlying JMS ConnectionFactory, standard Sessions will be returned._Turn this flag on to allow participation in any Spring-managed transaction,_with a local JMS transaction synchronized with the main transaction.;public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed) {_		this.synchedLocalTransactionAllowed = synchedLocalTransactionAllowed__	};set,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction,where,the,main,transaction,might,be,a,jdbc,based,one,for,a,specific,data,source,for,example,with,the,jms,transaction,committing,right,after,the,main,transaction,if,not,allowed,the,given,connection,factory,needs,to,handle,transaction,enlistment,underneath,the,covers,p,default,is,false,if,not,within,a,managed,transaction,that,encompasses,the,underlying,jms,connection,factory,standard,sessions,will,be,returned,turn,this,flag,on,to,allow,participation,in,any,spring,managed,transaction,with,a,local,jms,transaction,synchronized,with,the,main,transaction;public,void,set,synched,local,transaction,allowed,boolean,synched,local,transaction,allowed,this,synched,local,transaction,allowed,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed);1467730834;Set whether to allow for a local JMS transaction that is synchronized with a_Spring-managed transaction (where the main transaction might be a JDBC-based_one for a specific DataSource, for example), with the JMS transaction committing_right after the main transaction. If not allowed, the given ConnectionFactory_needs to handle transaction enlistment underneath the covers._<p>Default is "false": If not within a managed transaction that encompasses_the underlying JMS ConnectionFactory, standard Sessions will be returned._Turn this flag on to allow participation in any Spring-managed transaction,_with a local JMS transaction synchronized with the main transaction.;public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed) {_		this.synchedLocalTransactionAllowed = synchedLocalTransactionAllowed__	};set,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction,where,the,main,transaction,might,be,a,jdbc,based,one,for,a,specific,data,source,for,example,with,the,jms,transaction,committing,right,after,the,main,transaction,if,not,allowed,the,given,connection,factory,needs,to,handle,transaction,enlistment,underneath,the,covers,p,default,is,false,if,not,within,a,managed,transaction,that,encompasses,the,underlying,jms,connection,factory,standard,sessions,will,be,returned,turn,this,flag,on,to,allow,participation,in,any,spring,managed,transaction,with,a,local,jms,transaction,synchronized,with,the,main,transaction;public,void,set,synched,local,transaction,allowed,boolean,synched,local,transaction,allowed,this,synched,local,transaction,allowed,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed);1467749899;Set whether to allow for a local JMS transaction that is synchronized with a_Spring-managed transaction (where the main transaction might be a JDBC-based_one for a specific DataSource, for example), with the JMS transaction committing_right after the main transaction. If not allowed, the given ConnectionFactory_needs to handle transaction enlistment underneath the covers._<p>Default is "false": If not within a managed transaction that encompasses_the underlying JMS ConnectionFactory, standard Sessions will be returned._Turn this flag on to allow participation in any Spring-managed transaction,_with a local JMS transaction synchronized with the main transaction.;public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed) {_		this.synchedLocalTransactionAllowed = synchedLocalTransactionAllowed__	};set,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction,where,the,main,transaction,might,be,a,jdbc,based,one,for,a,specific,data,source,for,example,with,the,jms,transaction,committing,right,after,the,main,transaction,if,not,allowed,the,given,connection,factory,needs,to,handle,transaction,enlistment,underneath,the,covers,p,default,is,false,if,not,within,a,managed,transaction,that,encompasses,the,underlying,jms,connection,factory,standard,sessions,will,be,returned,turn,this,flag,on,to,allow,participation,in,any,spring,managed,transaction,with,a,local,jms,transaction,synchronized,with,the,main,transaction;public,void,set,synched,local,transaction,allowed,boolean,synched,local,transaction,allowed,this,synched,local,transaction,allowed,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed);1496837955;Set whether to allow for a local JMS transaction that is synchronized with a_Spring-managed transaction (where the main transaction might be a JDBC-based_one for a specific DataSource, for example), with the JMS transaction committing_right after the main transaction. If not allowed, the given ConnectionFactory_needs to handle transaction enlistment underneath the covers._<p>Default is "false": If not within a managed transaction that encompasses_the underlying JMS ConnectionFactory, standard Sessions will be returned._Turn this flag on to allow participation in any Spring-managed transaction,_with a local JMS transaction synchronized with the main transaction.;public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed) {_		this.synchedLocalTransactionAllowed = synchedLocalTransactionAllowed__	};set,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction,where,the,main,transaction,might,be,a,jdbc,based,one,for,a,specific,data,source,for,example,with,the,jms,transaction,committing,right,after,the,main,transaction,if,not,allowed,the,given,connection,factory,needs,to,handle,transaction,enlistment,underneath,the,covers,p,default,is,false,if,not,within,a,managed,transaction,that,encompasses,the,underlying,jms,connection,factory,standard,sessions,will,be,returned,turn,this,flag,on,to,allow,participation,in,any,spring,managed,transaction,with,a,local,jms,transaction,synchronized,with,the,main,transaction;public,void,set,synched,local,transaction,allowed,boolean,synched,local,transaction,allowed,this,synched,local,transaction,allowed,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed);1500448076;Set whether to allow for a local JMS transaction that is synchronized with a_Spring-managed transaction (where the main transaction might be a JDBC-based_one for a specific DataSource, for example), with the JMS transaction committing_right after the main transaction. If not allowed, the given ConnectionFactory_needs to handle transaction enlistment underneath the covers._<p>Default is "false": If not within a managed transaction that encompasses_the underlying JMS ConnectionFactory, standard Sessions will be returned._Turn this flag on to allow participation in any Spring-managed transaction,_with a local JMS transaction synchronized with the main transaction.;public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed) {_		this.synchedLocalTransactionAllowed = synchedLocalTransactionAllowed__	};set,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction,where,the,main,transaction,might,be,a,jdbc,based,one,for,a,specific,data,source,for,example,with,the,jms,transaction,committing,right,after,the,main,transaction,if,not,allowed,the,given,connection,factory,needs,to,handle,transaction,enlistment,underneath,the,covers,p,default,is,false,if,not,within,a,managed,transaction,that,encompasses,the,underlying,jms,connection,factory,standard,sessions,will,be,returned,turn,this,flag,on,to,allow,participation,in,any,spring,managed,transaction,with,a,local,jms,transaction,synchronized,with,the,main,transaction;public,void,set,synched,local,transaction,allowed,boolean,synched,local,transaction,allowed,this,synched,local,transaction,allowed,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed);1500457438;Set whether to allow for a local JMS transaction that is synchronized with a_Spring-managed transaction (where the main transaction might be a JDBC-based_one for a specific DataSource, for example), with the JMS transaction committing_right after the main transaction. If not allowed, the given ConnectionFactory_needs to handle transaction enlistment underneath the covers._<p>Default is "false": If not within a managed transaction that encompasses_the underlying JMS ConnectionFactory, standard Sessions will be returned._Turn this flag on to allow participation in any Spring-managed transaction,_with a local JMS transaction synchronized with the main transaction.;public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed) {_		this.synchedLocalTransactionAllowed = synchedLocalTransactionAllowed__	};set,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction,where,the,main,transaction,might,be,a,jdbc,based,one,for,a,specific,data,source,for,example,with,the,jms,transaction,committing,right,after,the,main,transaction,if,not,allowed,the,given,connection,factory,needs,to,handle,transaction,enlistment,underneath,the,covers,p,default,is,false,if,not,within,a,managed,transaction,that,encompasses,the,underlying,jms,connection,factory,standard,sessions,will,be,returned,turn,this,flag,on,to,allow,participation,in,any,spring,managed,transaction,with,a,local,jms,transaction,synchronized,with,the,main,transaction;public,void,set,synched,local,transaction,allowed,boolean,synched,local,transaction,allowed,this,synched,local,transaction,allowed,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed);1519295386;Set whether to allow for a local JMS transaction that is synchronized with a_Spring-managed transaction (where the main transaction might be a JDBC-based_one for a specific DataSource, for example), with the JMS transaction committing_right after the main transaction. If not allowed, the given ConnectionFactory_needs to handle transaction enlistment underneath the covers._<p>Default is "false": If not within a managed transaction that encompasses_the underlying JMS ConnectionFactory, standard Sessions will be returned._Turn this flag on to allow participation in any Spring-managed transaction,_with a local JMS transaction synchronized with the main transaction.;public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed) {_		this.synchedLocalTransactionAllowed = synchedLocalTransactionAllowed__	};set,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction,where,the,main,transaction,might,be,a,jdbc,based,one,for,a,specific,data,source,for,example,with,the,jms,transaction,committing,right,after,the,main,transaction,if,not,allowed,the,given,connection,factory,needs,to,handle,transaction,enlistment,underneath,the,covers,p,default,is,false,if,not,within,a,managed,transaction,that,encompasses,the,underlying,jms,connection,factory,standard,sessions,will,be,returned,turn,this,flag,on,to,allow,participation,in,any,spring,managed,transaction,with,a,local,jms,transaction,synchronized,with,the,main,transaction;public,void,set,synched,local,transaction,allowed,boolean,synched,local,transaction,allowed,this,synched,local,transaction,allowed,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed);1544613334;Set whether to allow for a local JMS transaction that is synchronized with a_Spring-managed transaction (where the main transaction might be a JDBC-based_one for a specific DataSource, for example), with the JMS transaction committing_right after the main transaction. If not allowed, the given ConnectionFactory_needs to handle transaction enlistment underneath the covers._<p>Default is "false": If not within a managed transaction that encompasses_the underlying JMS ConnectionFactory, standard Sessions will be returned._Turn this flag on to allow participation in any Spring-managed transaction,_with a local JMS transaction synchronized with the main transaction.;public void setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed) {_		this.synchedLocalTransactionAllowed = synchedLocalTransactionAllowed__	};set,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction,where,the,main,transaction,might,be,a,jdbc,based,one,for,a,specific,data,source,for,example,with,the,jms,transaction,committing,right,after,the,main,transaction,if,not,allowed,the,given,connection,factory,needs,to,handle,transaction,enlistment,underneath,the,covers,p,default,is,false,if,not,within,a,managed,transaction,that,encompasses,the,underlying,jms,connection,factory,standard,sessions,will,be,returned,turn,this,flag,on,to,allow,participation,in,any,spring,managed,transaction,with,a,local,jms,transaction,synchronized,with,the,main,transaction;public,void,set,synched,local,transaction,allowed,boolean,synched,local,transaction,allowed,this,synched,local,transaction,allowed,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1328020251;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "targetConnectionFactory must not be nul")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,final,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,nul,this,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1356735495;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "targetConnectionFactory must not be nul")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,final,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,nul,this,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1357119239;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "targetConnectionFactory must not be nul")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,final,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,nul,this,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1368482696;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "targetConnectionFactory must not be nul")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,final,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,nul,this,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1385412762;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "targetConnectionFactory must not be nul")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,final,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,nul,this,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1432125256;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "targetConnectionFactory must not be nul")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,final,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,nul,this,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1438003976;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "targetConnectionFactory must not be nul")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,final,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,nul,this,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1467730834;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "targetConnectionFactory must not be nul")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,final,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,nul,this,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1467749899;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,final,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1496837955;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,final,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1500457438;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,final,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1519295386;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,final,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1544613334;Set the target ConnectionFactory that this ConnectionFactory should delegate to.;public final void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,that,this,connection,factory,should,delegate,to;public,final,void,set,target,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory);1328020251;Create a new TransactionAwareConnectionFactoryProxy._@param targetConnectionFactory the target ConnectionFactory;public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory) {_		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,transaction,aware,connection,factory,proxy,param,target,connection,factory,the,target,connection,factory;public,transaction,aware,connection,factory,proxy,connection,factory,target,connection,factory,set,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory);1356735495;Create a new TransactionAwareConnectionFactoryProxy._@param targetConnectionFactory the target ConnectionFactory;public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory) {_		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,transaction,aware,connection,factory,proxy,param,target,connection,factory,the,target,connection,factory;public,transaction,aware,connection,factory,proxy,connection,factory,target,connection,factory,set,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory);1357119239;Create a new TransactionAwareConnectionFactoryProxy._@param targetConnectionFactory the target ConnectionFactory;public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory) {_		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,transaction,aware,connection,factory,proxy,param,target,connection,factory,the,target,connection,factory;public,transaction,aware,connection,factory,proxy,connection,factory,target,connection,factory,set,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory);1368482696;Create a new TransactionAwareConnectionFactoryProxy._@param targetConnectionFactory the target ConnectionFactory;public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory) {_		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,transaction,aware,connection,factory,proxy,param,target,connection,factory,the,target,connection,factory;public,transaction,aware,connection,factory,proxy,connection,factory,target,connection,factory,set,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory);1385412762;Create a new TransactionAwareConnectionFactoryProxy._@param targetConnectionFactory the target ConnectionFactory;public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory) {_		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,transaction,aware,connection,factory,proxy,param,target,connection,factory,the,target,connection,factory;public,transaction,aware,connection,factory,proxy,connection,factory,target,connection,factory,set,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory);1432125256;Create a new TransactionAwareConnectionFactoryProxy._@param targetConnectionFactory the target ConnectionFactory;public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory) {_		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,transaction,aware,connection,factory,proxy,param,target,connection,factory,the,target,connection,factory;public,transaction,aware,connection,factory,proxy,connection,factory,target,connection,factory,set,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory);1438003976;Create a new TransactionAwareConnectionFactoryProxy._@param targetConnectionFactory the target ConnectionFactory;public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory) {_		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,transaction,aware,connection,factory,proxy,param,target,connection,factory,the,target,connection,factory;public,transaction,aware,connection,factory,proxy,connection,factory,target,connection,factory,set,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory);1467730834;Create a new TransactionAwareConnectionFactoryProxy._@param targetConnectionFactory the target ConnectionFactory;public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory) {_		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,transaction,aware,connection,factory,proxy,param,target,connection,factory,the,target,connection,factory;public,transaction,aware,connection,factory,proxy,connection,factory,target,connection,factory,set,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory);1467749899;Create a new TransactionAwareConnectionFactoryProxy._@param targetConnectionFactory the target ConnectionFactory;public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory) {_		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,transaction,aware,connection,factory,proxy,param,target,connection,factory,the,target,connection,factory;public,transaction,aware,connection,factory,proxy,connection,factory,target,connection,factory,set,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory);1496837955;Create a new TransactionAwareConnectionFactoryProxy._@param targetConnectionFactory the target ConnectionFactory;public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory) {_		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,transaction,aware,connection,factory,proxy,param,target,connection,factory,the,target,connection,factory;public,transaction,aware,connection,factory,proxy,connection,factory,target,connection,factory,set,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory);1500448076;Create a new TransactionAwareConnectionFactoryProxy._@param targetConnectionFactory the target ConnectionFactory;public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory) {_		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,transaction,aware,connection,factory,proxy,param,target,connection,factory,the,target,connection,factory;public,transaction,aware,connection,factory,proxy,connection,factory,target,connection,factory,set,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory);1500457438;Create a new TransactionAwareConnectionFactoryProxy._@param targetConnectionFactory the target ConnectionFactory;public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory) {_		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,transaction,aware,connection,factory,proxy,param,target,connection,factory,the,target,connection,factory;public,transaction,aware,connection,factory,proxy,connection,factory,target,connection,factory,set,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory);1519295386;Create a new TransactionAwareConnectionFactoryProxy._@param targetConnectionFactory the target ConnectionFactory;public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory) {_		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,transaction,aware,connection,factory,proxy,param,target,connection,factory,the,target,connection,factory;public,transaction,aware,connection,factory,proxy,connection,factory,target,connection,factory,set,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory);1544613334;Create a new TransactionAwareConnectionFactoryProxy._@param targetConnectionFactory the target ConnectionFactory;public TransactionAwareConnectionFactoryProxy(ConnectionFactory targetConnectionFactory) {_		setTargetConnectionFactory(targetConnectionFactory)__	};create,a,new,transaction,aware,connection,factory,proxy,param,target,connection,factory,the,target,connection,factory;public,transaction,aware,connection,factory,proxy,connection,factory,target,connection,factory,set,target,connection,factory,target,connection,factory
TransactionAwareConnectionFactoryProxy -> protected ConnectionFactory getTargetConnectionFactory();1328020251;Return the target ConnectionFactory that this ConnectionFactory should delegate to.;protected ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,that,this,connection,factory,should,delegate,to;protected,connection,factory,get,target,connection,factory,return,this,target,connection,factory
TransactionAwareConnectionFactoryProxy -> protected ConnectionFactory getTargetConnectionFactory();1356735495;Return the target ConnectionFactory that this ConnectionFactory should delegate to.;protected ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,that,this,connection,factory,should,delegate,to;protected,connection,factory,get,target,connection,factory,return,this,target,connection,factory
TransactionAwareConnectionFactoryProxy -> protected ConnectionFactory getTargetConnectionFactory();1357119239;Return the target ConnectionFactory that this ConnectionFactory should delegate to.;protected ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,that,this,connection,factory,should,delegate,to;protected,connection,factory,get,target,connection,factory,return,this,target,connection,factory
TransactionAwareConnectionFactoryProxy -> protected ConnectionFactory getTargetConnectionFactory();1368482696;Return the target ConnectionFactory that this ConnectionFactory should delegate to.;protected ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,that,this,connection,factory,should,delegate,to;protected,connection,factory,get,target,connection,factory,return,this,target,connection,factory
TransactionAwareConnectionFactoryProxy -> protected ConnectionFactory getTargetConnectionFactory();1385412762;Return the target ConnectionFactory that this ConnectionFactory should delegate to.;protected ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,that,this,connection,factory,should,delegate,to;protected,connection,factory,get,target,connection,factory,return,this,target,connection,factory
TransactionAwareConnectionFactoryProxy -> protected ConnectionFactory getTargetConnectionFactory();1432125256;Return the target ConnectionFactory that this ConnectionFactory should delegate to.;protected ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,that,this,connection,factory,should,delegate,to;protected,connection,factory,get,target,connection,factory,return,this,target,connection,factory
TransactionAwareConnectionFactoryProxy -> protected ConnectionFactory getTargetConnectionFactory();1438003976;Return the target ConnectionFactory that this ConnectionFactory should delegate to.;protected ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,that,this,connection,factory,should,delegate,to;protected,connection,factory,get,target,connection,factory,return,this,target,connection,factory
TransactionAwareConnectionFactoryProxy -> protected ConnectionFactory getTargetConnectionFactory();1467730834;Return the target ConnectionFactory that this ConnectionFactory should delegate to.;protected ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,that,this,connection,factory,should,delegate,to;protected,connection,factory,get,target,connection,factory,return,this,target,connection,factory
TransactionAwareConnectionFactoryProxy -> protected ConnectionFactory getTargetConnectionFactory();1467749899;Return the target ConnectionFactory that this ConnectionFactory should delegate to.;protected ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,that,this,connection,factory,should,delegate,to;protected,connection,factory,get,target,connection,factory,return,this,target,connection,factory
TransactionAwareConnectionFactoryProxy -> protected ConnectionFactory getTargetConnectionFactory();1500457438;Return the target ConnectionFactory that this ConnectionFactory should delegate to.;protected ConnectionFactory getTargetConnectionFactory() {_		ConnectionFactory target = this.targetConnectionFactory__		Assert.state(target != null, "'targetConnectionFactory' is required")__		return target__	};return,the,target,connection,factory,that,this,connection,factory,should,delegate,to;protected,connection,factory,get,target,connection,factory,connection,factory,target,this,target,connection,factory,assert,state,target,null,target,connection,factory,is,required,return,target
TransactionAwareConnectionFactoryProxy -> protected ConnectionFactory getTargetConnectionFactory();1519295386;Return the target ConnectionFactory that this ConnectionFactory should delegate to.;protected ConnectionFactory getTargetConnectionFactory() {_		ConnectionFactory target = this.targetConnectionFactory__		Assert.state(target != null, "'targetConnectionFactory' is required")__		return target__	};return,the,target,connection,factory,that,this,connection,factory,should,delegate,to;protected,connection,factory,get,target,connection,factory,connection,factory,target,this,target,connection,factory,assert,state,target,null,target,connection,factory,is,required,return,target
TransactionAwareConnectionFactoryProxy -> protected ConnectionFactory getTargetConnectionFactory();1544613334;Return the target ConnectionFactory that this ConnectionFactory should delegate to.;protected ConnectionFactory getTargetConnectionFactory() {_		ConnectionFactory target = this.targetConnectionFactory__		Assert.state(target != null, "'targetConnectionFactory' is required")__		return target__	};return,the,target,connection,factory,that,this,connection,factory,should,delegate,to;protected,connection,factory,get,target,connection,factory,connection,factory,target,this,target,connection,factory,assert,state,target,null,target,connection,factory,is,required,return,target
TransactionAwareConnectionFactoryProxy -> @Nullable 	protected ConnectionFactory getTargetConnectionFactory();1496837955;Return the target ConnectionFactory that this ConnectionFactory should delegate to.;@Nullable_	protected ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,that,this,connection,factory,should,delegate,to;nullable,protected,connection,factory,get,target,connection,factory,return,this,target,connection,factory
TransactionAwareConnectionFactoryProxy -> @Nullable 	protected ConnectionFactory getTargetConnectionFactory();1500448076;Return the target ConnectionFactory that this ConnectionFactory should delegate to.;@Nullable_	protected ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,that,this,connection,factory,should,delegate,to;nullable,protected,connection,factory,get,target,connection,factory,return,this,target,connection,factory
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy();1328020251;Create a new TransactionAwareConnectionFactoryProxy.;public TransactionAwareConnectionFactoryProxy() {_	};create,a,new,transaction,aware,connection,factory,proxy;public,transaction,aware,connection,factory,proxy
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy();1356735495;Create a new TransactionAwareConnectionFactoryProxy.;public TransactionAwareConnectionFactoryProxy() {_	};create,a,new,transaction,aware,connection,factory,proxy;public,transaction,aware,connection,factory,proxy
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy();1357119239;Create a new TransactionAwareConnectionFactoryProxy.;public TransactionAwareConnectionFactoryProxy() {_	};create,a,new,transaction,aware,connection,factory,proxy;public,transaction,aware,connection,factory,proxy
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy();1368482696;Create a new TransactionAwareConnectionFactoryProxy.;public TransactionAwareConnectionFactoryProxy() {_	};create,a,new,transaction,aware,connection,factory,proxy;public,transaction,aware,connection,factory,proxy
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy();1385412762;Create a new TransactionAwareConnectionFactoryProxy.;public TransactionAwareConnectionFactoryProxy() {_	};create,a,new,transaction,aware,connection,factory,proxy;public,transaction,aware,connection,factory,proxy
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy();1432125256;Create a new TransactionAwareConnectionFactoryProxy.;public TransactionAwareConnectionFactoryProxy() {_	};create,a,new,transaction,aware,connection,factory,proxy;public,transaction,aware,connection,factory,proxy
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy();1438003976;Create a new TransactionAwareConnectionFactoryProxy.;public TransactionAwareConnectionFactoryProxy() {_	};create,a,new,transaction,aware,connection,factory,proxy;public,transaction,aware,connection,factory,proxy
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy();1467730834;Create a new TransactionAwareConnectionFactoryProxy.;public TransactionAwareConnectionFactoryProxy() {_	};create,a,new,transaction,aware,connection,factory,proxy;public,transaction,aware,connection,factory,proxy
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy();1467749899;Create a new TransactionAwareConnectionFactoryProxy.;public TransactionAwareConnectionFactoryProxy() {_	};create,a,new,transaction,aware,connection,factory,proxy;public,transaction,aware,connection,factory,proxy
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy();1496837955;Create a new TransactionAwareConnectionFactoryProxy.;public TransactionAwareConnectionFactoryProxy() {_	};create,a,new,transaction,aware,connection,factory,proxy;public,transaction,aware,connection,factory,proxy
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy();1500448076;Create a new TransactionAwareConnectionFactoryProxy.;public TransactionAwareConnectionFactoryProxy() {_	};create,a,new,transaction,aware,connection,factory,proxy;public,transaction,aware,connection,factory,proxy
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy();1500457438;Create a new TransactionAwareConnectionFactoryProxy.;public TransactionAwareConnectionFactoryProxy() {_	};create,a,new,transaction,aware,connection,factory,proxy;public,transaction,aware,connection,factory,proxy
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy();1519295386;Create a new TransactionAwareConnectionFactoryProxy.;public TransactionAwareConnectionFactoryProxy() {_	};create,a,new,transaction,aware,connection,factory,proxy;public,transaction,aware,connection,factory,proxy
TransactionAwareConnectionFactoryProxy -> public TransactionAwareConnectionFactoryProxy();1544613334;Create a new TransactionAwareConnectionFactoryProxy.;public TransactionAwareConnectionFactoryProxy() {_	};create,a,new,transaction,aware,connection,factory,proxy;public,transaction,aware,connection,factory,proxy
TransactionAwareConnectionFactoryProxy -> protected boolean isSynchedLocalTransactionAllowed();1328020251;Return whether to allow for a local JMS transaction that is synchronized_with a Spring-managed transaction.;protected boolean isSynchedLocalTransactionAllowed() {_		return this.synchedLocalTransactionAllowed__	};return,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction;protected,boolean,is,synched,local,transaction,allowed,return,this,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> protected boolean isSynchedLocalTransactionAllowed();1356735495;Return whether to allow for a local JMS transaction that is synchronized_with a Spring-managed transaction.;protected boolean isSynchedLocalTransactionAllowed() {_		return this.synchedLocalTransactionAllowed__	};return,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction;protected,boolean,is,synched,local,transaction,allowed,return,this,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> protected boolean isSynchedLocalTransactionAllowed();1357119239;Return whether to allow for a local JMS transaction that is synchronized_with a Spring-managed transaction.;protected boolean isSynchedLocalTransactionAllowed() {_		return this.synchedLocalTransactionAllowed__	};return,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction;protected,boolean,is,synched,local,transaction,allowed,return,this,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> protected boolean isSynchedLocalTransactionAllowed();1368482696;Return whether to allow for a local JMS transaction that is synchronized_with a Spring-managed transaction.;protected boolean isSynchedLocalTransactionAllowed() {_		return this.synchedLocalTransactionAllowed__	};return,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction;protected,boolean,is,synched,local,transaction,allowed,return,this,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> protected boolean isSynchedLocalTransactionAllowed();1385412762;Return whether to allow for a local JMS transaction that is synchronized_with a Spring-managed transaction.;protected boolean isSynchedLocalTransactionAllowed() {_		return this.synchedLocalTransactionAllowed__	};return,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction;protected,boolean,is,synched,local,transaction,allowed,return,this,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> protected boolean isSynchedLocalTransactionAllowed();1432125256;Return whether to allow for a local JMS transaction that is synchronized_with a Spring-managed transaction.;protected boolean isSynchedLocalTransactionAllowed() {_		return this.synchedLocalTransactionAllowed__	};return,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction;protected,boolean,is,synched,local,transaction,allowed,return,this,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> protected boolean isSynchedLocalTransactionAllowed();1438003976;Return whether to allow for a local JMS transaction that is synchronized_with a Spring-managed transaction.;protected boolean isSynchedLocalTransactionAllowed() {_		return this.synchedLocalTransactionAllowed__	};return,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction;protected,boolean,is,synched,local,transaction,allowed,return,this,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> protected boolean isSynchedLocalTransactionAllowed();1467730834;Return whether to allow for a local JMS transaction that is synchronized_with a Spring-managed transaction.;protected boolean isSynchedLocalTransactionAllowed() {_		return this.synchedLocalTransactionAllowed__	};return,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction;protected,boolean,is,synched,local,transaction,allowed,return,this,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> protected boolean isSynchedLocalTransactionAllowed();1467749899;Return whether to allow for a local JMS transaction that is synchronized_with a Spring-managed transaction.;protected boolean isSynchedLocalTransactionAllowed() {_		return this.synchedLocalTransactionAllowed__	};return,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction;protected,boolean,is,synched,local,transaction,allowed,return,this,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> protected boolean isSynchedLocalTransactionAllowed();1496837955;Return whether to allow for a local JMS transaction that is synchronized_with a Spring-managed transaction.;protected boolean isSynchedLocalTransactionAllowed() {_		return this.synchedLocalTransactionAllowed__	};return,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction;protected,boolean,is,synched,local,transaction,allowed,return,this,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> protected boolean isSynchedLocalTransactionAllowed();1500448076;Return whether to allow for a local JMS transaction that is synchronized_with a Spring-managed transaction.;protected boolean isSynchedLocalTransactionAllowed() {_		return this.synchedLocalTransactionAllowed__	};return,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction;protected,boolean,is,synched,local,transaction,allowed,return,this,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> protected boolean isSynchedLocalTransactionAllowed();1500457438;Return whether to allow for a local JMS transaction that is synchronized_with a Spring-managed transaction.;protected boolean isSynchedLocalTransactionAllowed() {_		return this.synchedLocalTransactionAllowed__	};return,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction;protected,boolean,is,synched,local,transaction,allowed,return,this,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> protected boolean isSynchedLocalTransactionAllowed();1519295386;Return whether to allow for a local JMS transaction that is synchronized_with a Spring-managed transaction.;protected boolean isSynchedLocalTransactionAllowed() {_		return this.synchedLocalTransactionAllowed__	};return,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction;protected,boolean,is,synched,local,transaction,allowed,return,this,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> protected boolean isSynchedLocalTransactionAllowed();1544613334;Return whether to allow for a local JMS transaction that is synchronized_with a Spring-managed transaction.;protected boolean isSynchedLocalTransactionAllowed() {_		return this.synchedLocalTransactionAllowed__	};return,whether,to,allow,for,a,local,jms,transaction,that,is,synchronized,with,a,spring,managed,transaction;protected,boolean,is,synched,local,transaction,allowed,return,this,synched,local,transaction,allowed
TransactionAwareConnectionFactoryProxy -> protected Connection getTransactionAwareConnectionProxy(Connection target);1328020251;Wrap the given Connection with a proxy that delegates every method call to it_but handles Session lookup in a transaction-aware fashion._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getTransactionAwareConnectionProxy(Connection target) {_		List<Class> classes = new ArrayList<Class>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class[classes.size()]),_				new TransactionAwareConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,handles,session,lookup,in,a,transaction,aware,fashion,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,transaction,aware,connection,proxy,connection,target,list,class,classes,new,array,list,class,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,transaction,aware,connection,invocation,handler,target
TransactionAwareConnectionFactoryProxy -> protected Connection getTransactionAwareConnectionProxy(Connection target);1356735495;Wrap the given Connection with a proxy that delegates every method call to it_but handles Session lookup in a transaction-aware fashion._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getTransactionAwareConnectionProxy(Connection target) {_		List<Class> classes = new ArrayList<Class>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class[classes.size()]),_				new TransactionAwareConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,handles,session,lookup,in,a,transaction,aware,fashion,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,transaction,aware,connection,proxy,connection,target,list,class,classes,new,array,list,class,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,transaction,aware,connection,invocation,handler,target
TransactionAwareConnectionFactoryProxy -> protected Connection getTransactionAwareConnectionProxy(Connection target);1357119239;Wrap the given Connection with a proxy that delegates every method call to it_but handles Session lookup in a transaction-aware fashion._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getTransactionAwareConnectionProxy(Connection target) {_		List<Class> classes = new ArrayList<Class>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class[classes.size()]),_				new TransactionAwareConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,handles,session,lookup,in,a,transaction,aware,fashion,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,transaction,aware,connection,proxy,connection,target,list,class,classes,new,array,list,class,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,transaction,aware,connection,invocation,handler,target
TransactionAwareConnectionFactoryProxy -> protected Connection getTransactionAwareConnectionProxy(Connection target);1368482696;Wrap the given Connection with a proxy that delegates every method call to it_but handles Session lookup in a transaction-aware fashion._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getTransactionAwareConnectionProxy(Connection target) {_		List<Class> classes = new ArrayList<Class>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class[classes.size()]),_				new TransactionAwareConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,handles,session,lookup,in,a,transaction,aware,fashion,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,transaction,aware,connection,proxy,connection,target,list,class,classes,new,array,list,class,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,transaction,aware,connection,invocation,handler,target
TransactionAwareConnectionFactoryProxy -> protected Connection getTransactionAwareConnectionProxy(Connection target);1385412762;Wrap the given Connection with a proxy that delegates every method call to it_but handles Session lookup in a transaction-aware fashion._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getTransactionAwareConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<Class<?>>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new TransactionAwareConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,handles,session,lookup,in,a,transaction,aware,fashion,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,transaction,aware,connection,proxy,connection,target,list,class,classes,new,array,list,class,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,transaction,aware,connection,invocation,handler,target
TransactionAwareConnectionFactoryProxy -> protected Connection getTransactionAwareConnectionProxy(Connection target);1432125256;Wrap the given Connection with a proxy that delegates every method call to it_but handles Session lookup in a transaction-aware fashion._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getTransactionAwareConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<Class<?>>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new TransactionAwareConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,handles,session,lookup,in,a,transaction,aware,fashion,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,transaction,aware,connection,proxy,connection,target,list,class,classes,new,array,list,class,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,transaction,aware,connection,invocation,handler,target
TransactionAwareConnectionFactoryProxy -> protected Connection getTransactionAwareConnectionProxy(Connection target);1438003976;Wrap the given Connection with a proxy that delegates every method call to it_but handles Session lookup in a transaction-aware fashion._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getTransactionAwareConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<Class<?>>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new TransactionAwareConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,handles,session,lookup,in,a,transaction,aware,fashion,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,transaction,aware,connection,proxy,connection,target,list,class,classes,new,array,list,class,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,transaction,aware,connection,invocation,handler,target
TransactionAwareConnectionFactoryProxy -> protected Connection getTransactionAwareConnectionProxy(Connection target);1467730834;Wrap the given Connection with a proxy that delegates every method call to it_but handles Session lookup in a transaction-aware fashion._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getTransactionAwareConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new TransactionAwareConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,handles,session,lookup,in,a,transaction,aware,fashion,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,transaction,aware,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,transaction,aware,connection,invocation,handler,target
TransactionAwareConnectionFactoryProxy -> protected Connection getTransactionAwareConnectionProxy(Connection target);1467749899;Wrap the given Connection with a proxy that delegates every method call to it_but handles Session lookup in a transaction-aware fashion._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getTransactionAwareConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new TransactionAwareConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,handles,session,lookup,in,a,transaction,aware,fashion,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,transaction,aware,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,transaction,aware,connection,invocation,handler,target
TransactionAwareConnectionFactoryProxy -> protected Connection getTransactionAwareConnectionProxy(Connection target);1496837955;Wrap the given Connection with a proxy that delegates every method call to it_but handles Session lookup in a transaction-aware fashion._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getTransactionAwareConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new TransactionAwareConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,handles,session,lookup,in,a,transaction,aware,fashion,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,transaction,aware,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,transaction,aware,connection,invocation,handler,target
TransactionAwareConnectionFactoryProxy -> protected Connection getTransactionAwareConnectionProxy(Connection target);1500448076;Wrap the given Connection with a proxy that delegates every method call to it_but handles Session lookup in a transaction-aware fashion._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getTransactionAwareConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new TransactionAwareConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,handles,session,lookup,in,a,transaction,aware,fashion,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,transaction,aware,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,transaction,aware,connection,invocation,handler,target
TransactionAwareConnectionFactoryProxy -> protected Connection getTransactionAwareConnectionProxy(Connection target);1500457438;Wrap the given Connection with a proxy that delegates every method call to it_but handles Session lookup in a transaction-aware fashion._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getTransactionAwareConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new TransactionAwareConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,handles,session,lookup,in,a,transaction,aware,fashion,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,transaction,aware,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,transaction,aware,connection,invocation,handler,target
TransactionAwareConnectionFactoryProxy -> protected Connection getTransactionAwareConnectionProxy(Connection target);1519295386;Wrap the given Connection with a proxy that delegates every method call to it_but handles Session lookup in a transaction-aware fashion._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getTransactionAwareConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(Connection.class.getClassLoader(),_				ClassUtils.toClassArray(classes), new TransactionAwareConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,handles,session,lookup,in,a,transaction,aware,fashion,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,transaction,aware,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,class,utils,to,class,array,classes,new,transaction,aware,connection,invocation,handler,target
TransactionAwareConnectionFactoryProxy -> protected Connection getTransactionAwareConnectionProxy(Connection target);1544613334;Wrap the given Connection with a proxy that delegates every method call to it_but handles Session lookup in a transaction-aware fashion._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getTransactionAwareConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(Connection.class.getClassLoader(),_				ClassUtils.toClassArray(classes), new TransactionAwareConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,handles,session,lookup,in,a,transaction,aware,fashion,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,transaction,aware,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,class,utils,to,class,array,classes,new,transaction,aware,connection,invocation,handler,target
