commented;modifiers;parameterAmount;loc;comment;code
true;public;1;11;/**  * Set the JMS ConnectionFactory that this instance should manage transactions for.  */ ;/**  * Set the JMS ConnectionFactory that this instance should manage transactions for.  */ public void setConnectionFactory(@Nullable ConnectionFactory cf) {     if (cf instanceof TransactionAwareConnectionFactoryProxy) {         // If we got a TransactionAwareConnectionFactoryProxy, we need to perform transactions         // for its underlying target ConnectionFactory, else JMS access code won't see         // properly exposed transactions (i.e. transactions for the target ConnectionFactory).         this.connectionFactory = ((TransactionAwareConnectionFactoryProxy) cf).getTargetConnectionFactory().     } else {         this.connectionFactory = cf.     } }
true;public;0;4;/**  * Return the JMS ConnectionFactory that this instance should manage transactions for.  */ ;/**  * Return the JMS ConnectionFactory that this instance should manage transactions for.  */ @Nullable public ConnectionFactory getConnectionFactory() {     return this.connectionFactory. }
true;protected,final;0;5;/**  * Obtain the ConnectionFactory for actual use.  * @return the ConnectionFactory (never {@code null})  * @throws IllegalStateException in case of no ConnectionFactory set  * @since 5.0  */ ;/**  * Obtain the ConnectionFactory for actual use.  * @return the ConnectionFactory (never {@code null})  * @throws IllegalStateException in case of no ConnectionFactory set  * @since 5.0  */ protected final ConnectionFactory obtainConnectionFactory() {     ConnectionFactory connectionFactory = getConnectionFactory().     Assert.state(connectionFactory != null, "No ConnectionFactory set").     return connectionFactory. }
true;public;1;3;/**  * Specify whether this transaction manager should lazily retrieve a JMS  * Connection and Session on access within a transaction ({@code true}).  * By default, it will eagerly create a JMS Connection and Session at  * transaction begin ({@code false}).  * @since 5.1.6  * @see JmsResourceHolder#getConnection()  * @see JmsResourceHolder#getSession()  */ ;/**  * Specify whether this transaction manager should lazily retrieve a JMS  * Connection and Session on access within a transaction ({@code true}).  * By default, it will eagerly create a JMS Connection and Session at  * transaction begin ({@code false}).  * @since 5.1.6  * @see JmsResourceHolder#getConnection()  * @see JmsResourceHolder#getSession()  */ public void setLazyResourceRetrieval(boolean lazyResourceRetrieval) {     this.lazyResourceRetrieval = lazyResourceRetrieval. }
true;public;0;6;/**  * Make sure the ConnectionFactory has been set.  */ ;/**  * Make sure the ConnectionFactory has been set.  */ @Override public void afterPropertiesSet() {     if (getConnectionFactory() == null) {         throw new IllegalArgumentException("Property 'connectionFactory' is required").     } }
false;public;0;4;;@Override public Object getResourceFactory() {     return obtainConnectionFactory(). }
false;protected;0;7;;@Override protected Object doGetTransaction() {     JmsTransactionObject txObject = new JmsTransactionObject().     txObject.setResourceHolder((JmsResourceHolder) TransactionSynchronizationManager.getResource(obtainConnectionFactory())).     return txObject. }
false;protected;1;5;;@Override protected boolean isExistingTransaction(Object transaction) {     JmsTransactionObject txObject = (JmsTransactionObject) transaction.     return txObject.hasResourceHolder(). }
false;protected;2;51;;@Override protected void doBegin(Object transaction, TransactionDefinition definition) {     if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {         throw new InvalidIsolationLevelException("JMS does not support an isolation level concept").     }     ConnectionFactory connectionFactory = obtainConnectionFactory().     JmsTransactionObject txObject = (JmsTransactionObject) transaction.     Connection con = null.     Session session = null.     try {         JmsResourceHolder resourceHolder.         if (this.lazyResourceRetrieval) {             resourceHolder = new LazyJmsResourceHolder(connectionFactory).         } else {             con = createConnection().             session = createSession(con).             if (logger.isDebugEnabled()) {                 logger.debug("Created JMS transaction on Session [" + session + "] from Connection [" + con + "]").             }             resourceHolder = new JmsResourceHolder(connectionFactory, con, session).         }         resourceHolder.setSynchronizedWithTransaction(true).         int timeout = determineTimeout(definition).         if (timeout != TransactionDefinition.TIMEOUT_DEFAULT) {             resourceHolder.setTimeoutInSeconds(timeout).         }         txObject.setResourceHolder(resourceHolder).         TransactionSynchronizationManager.bindResource(connectionFactory, resourceHolder).     } catch (Throwable ex) {         if (session != null) {             try {                 session.close().             } catch (Throwable ex2) {             // ignore             }         }         if (con != null) {             try {                 con.close().             } catch (Throwable ex2) {             // ignore             }         }         throw new CannotCreateTransactionException("Could not create JMS transaction", ex).     } }
false;protected;1;6;;@Override protected Object doSuspend(Object transaction) {     JmsTransactionObject txObject = (JmsTransactionObject) transaction.     txObject.setResourceHolder(null).     return TransactionSynchronizationManager.unbindResource(obtainConnectionFactory()). }
false;protected;2;4;;@Override protected void doResume(@Nullable Object transaction, Object suspendedResources) {     TransactionSynchronizationManager.bindResource(obtainConnectionFactory(), suspendedResources). }
false;protected;1;19;;@Override protected void doCommit(DefaultTransactionStatus status) {     JmsTransactionObject txObject = (JmsTransactionObject) status.getTransaction().     Session session = txObject.getResourceHolder().getOriginalSession().     if (session != null) {         try {             if (status.isDebug()) {                 logger.debug("Committing JMS transaction on Session [" + session + "]").             }             session.commit().         } catch (TransactionRolledBackException ex) {             throw new UnexpectedRollbackException("JMS transaction rolled back", ex).         } catch (JMSException ex) {             throw new TransactionSystemException("Could not commit JMS transaction", ex).         }     } }
false;protected;1;16;;@Override protected void doRollback(DefaultTransactionStatus status) {     JmsTransactionObject txObject = (JmsTransactionObject) status.getTransaction().     Session session = txObject.getResourceHolder().getOriginalSession().     if (session != null) {         try {             if (status.isDebug()) {                 logger.debug("Rolling back JMS transaction on Session [" + session + "]").             }             session.rollback().         } catch (JMSException ex) {             throw new TransactionSystemException("Could not roll back JMS transaction", ex).         }     } }
false;protected;1;5;;@Override protected void doSetRollbackOnly(DefaultTransactionStatus status) {     JmsTransactionObject txObject = (JmsTransactionObject) status.getTransaction().     txObject.getResourceHolder().setRollbackOnly(). }
false;protected;1;7;;@Override protected void doCleanupAfterCompletion(Object transaction) {     JmsTransactionObject txObject = (JmsTransactionObject) transaction.     TransactionSynchronizationManager.unbindResource(obtainConnectionFactory()).     txObject.getResourceHolder().closeAll().     txObject.getResourceHolder().clear(). }
true;protected;0;3;/**  * Create a JMS Connection via this template's ConnectionFactory.  * <p>This implementation uses JMS 1.1 API.  * @return the new JMS Connection  * @throws javax.jms.JMSException if thrown by JMS API methods  */ ;/**  * Create a JMS Connection via this template's ConnectionFactory.  * <p>This implementation uses JMS 1.1 API.  * @return the new JMS Connection  * @throws javax.jms.JMSException if thrown by JMS API methods  */ protected Connection createConnection() throws JMSException {     return obtainConnectionFactory().createConnection(). }
true;protected;1;3;/**  * Create a JMS Session for the given Connection.  * <p>This implementation uses JMS 1.1 API.  * @param con the JMS Connection to create a Session for  * @return the new JMS Session  * @throws javax.jms.JMSException if thrown by JMS API methods  */ ;/**  * Create a JMS Session for the given Connection.  * <p>This implementation uses JMS 1.1 API.  * @param con the JMS Connection to create a Session for  * @return the new JMS Session  * @throws javax.jms.JMSException if thrown by JMS API methods  */ protected Session createSession(Connection con) throws JMSException {     return con.createSession(true, Session.AUTO_ACKNOWLEDGE). }
false;public;0;6;;@Override @Nullable public Connection getConnection() {     initializeConnection().     return super.getConnection(). }
false;public;1;6;;@Override @Nullable public <C extends Connection> C getConnection(Class<C> connectionType) {     initializeConnection().     return super.getConnection(connectionType). }
false;public;0;6;;@Override @Nullable public Session getSession() {     initializeSession().     return super.getSession(). }
false;public;1;6;;@Override @Nullable public <S extends Session> S getSession(Class<S> sessionType) {     initializeSession().     return super.getSession(sessionType). }
false;public;2;6;;@Override @Nullable public <S extends Session> S getSession(Class<S> sessionType, @Nullable Connection connection) {     initializeSession().     return super.getSession(sessionType, connection). }
false;private;0;12;;private void initializeConnection() {     if (!this.connectionInitialized) {         try {             addConnection(createConnection()).         } catch (JMSException ex) {             throw new CannotCreateTransactionException("Failed to lazily initialize JMS Connection for transaction", ex).         }         this.connectionInitialized = true.     } }
false;private;0;14;;private void initializeSession() {     if (!this.sessionInitialized) {         Connection con = getConnection().         Assert.state(con != null, "No transactional JMS Connection").         try {             addSession(createSession(con), con).         } catch (JMSException ex) {             throw new CannotCreateTransactionException("Failed to lazily initialize JMS Session for transaction", ex).         }         this.sessionInitialized = true.     } }
false;public;1;3;;public void setResourceHolder(@Nullable JmsResourceHolder resourceHolder) {     this.resourceHolder = resourceHolder. }
false;public;0;4;;public JmsResourceHolder getResourceHolder() {     Assert.state(this.resourceHolder != null, "No JmsResourceHolder available").     return this.resourceHolder. }
false;public;0;3;;public boolean hasResourceHolder() {     return (this.resourceHolder != null). }
false;public;0;4;;@Override public boolean isRollbackOnly() {     return (this.resourceHolder != null && this.resourceHolder.isRollbackOnly()). }
false;public;0;4;;@Override public void flush() { // no-op }
