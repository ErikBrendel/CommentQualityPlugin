# id;timestamp;commentText;codeText;commentWords;codeWords
SingleConnectionFactory -> @org.springframework.lang.Nullable 	public ConnectionFactory getTargetConnectionFactory();1495868221;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;@org.springframework.lang.Nullable_	public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;org,springframework,lang,nullable,public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> @org.springframework.lang.Nullable 	public ConnectionFactory getTargetConnectionFactory();1496837955;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;@org.springframework.lang.Nullable_	public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;org,springframework,lang,nullable,public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> @org.springframework.lang.Nullable 	public ConnectionFactory getTargetConnectionFactory();1498780456;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;@org.springframework.lang.Nullable_	public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;org,springframework,lang,nullable,public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> @org.springframework.lang.Nullable 	public ConnectionFactory getTargetConnectionFactory();1499453049;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;@org.springframework.lang.Nullable_	public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;org,springframework,lang,nullable,public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1328020251;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1356735495;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1357119239;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1364391982;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1368482696;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1385412762;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1405696891;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1414619028;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1441205709;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1467730834;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1467749899;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1495868221;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1496837955;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1498780456;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory);1499453049;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> @Override 	public void destroy();1356735495;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1368482696;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1385412762;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1405696891;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1414619028;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons._@see #resetConnection();@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons,see,reset,connection;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1441205709;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons._@see #resetConnection();@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons,see,reset,connection;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1467730834;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons._@see #resetConnection();@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons,see,reset,connection;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1467749899;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons._@see #resetConnection();@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons,see,reset,connection;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1495868221;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons._@see #resetConnection();@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons,see,reset,connection;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1496837955;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons._@see #resetConnection();@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons,see,reset,connection;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1498780456;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons._@see #resetConnection();@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons,see,reset,connection;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1499453049;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons._@see #resetConnection();@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons,see,reset,connection;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1500448076;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons._@see #resetConnection();@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons,see,reset,connection;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1519295386;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons._@see #resetConnection();@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons,see,reset,connection;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1530174524;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons._@see #resetConnection();@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons,see,reset,connection;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1532091916;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons._@see #resetConnection();@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons,see,reset,connection;override,public,void,destroy,reset,connection
SingleConnectionFactory -> @Override 	public void destroy();1544613334;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons._@see #resetConnection();@Override_	public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons,see,reset,connection;override,public,void,destroy,reset,connection
SingleConnectionFactory -> public SingleConnectionFactory();1328020251;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1356735495;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1357119239;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1364391982;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1368482696;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1385412762;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1405696891;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1414619028;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1441205709;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1467730834;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1467749899;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1495868221;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1496837955;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1498780456;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1499453049;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1500448076;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1519295386;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1530174524;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1532091916;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory();1544613334;Create a new SingleConnectionFactory for bean-style usage._@see #setTargetConnectionFactory;public SingleConnectionFactory() {_	};create,a,new,single,connection,factory,for,bean,style,usage,see,set,target,connection,factory;public,single,connection,factory
SingleConnectionFactory -> protected Session getSession(Connection con, Integer mode) throws JMSException;1328020251;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns <code>null</code>._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_(<code>Session.TRANSACTED</code> or one of the common modes)_@return the Session to use, or <code>null</code> to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,code,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,code,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,code,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> protected Session getSession(Connection con, Integer mode) throws JMSException;1356735495;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> protected Session getSession(Connection con, Integer mode) throws JMSException;1357119239;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> protected Session getSession(Connection con, Integer mode) throws JMSException;1364391982;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> protected Session getSession(Connection con, Integer mode) throws JMSException;1368482696;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> protected Session getSession(Connection con, Integer mode) throws JMSException;1385412762;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> protected Session getSession(Connection con, Integer mode) throws JMSException;1405696891;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> protected Session getSession(Connection con, Integer mode) throws JMSException;1414619028;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> protected Session getSession(Connection con, Integer mode) throws JMSException;1441205709;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> protected Session getSession(Connection con, Integer mode) throws JMSException;1467730834;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> protected Session getSession(Connection con, Integer mode) throws JMSException;1467749899;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> public void destroy();1328020251;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;public,void,destroy,reset,connection
SingleConnectionFactory -> public void destroy();1357119239;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;public,void,destroy,reset,connection
SingleConnectionFactory -> public void destroy();1364391982;Close the underlying shared connection._The provider of this ConnectionFactory needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;public void destroy() {_		resetConnection()__	};close,the,underlying,shared,connection,the,provider,of,this,connection,factory,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;public,void,destroy,reset,connection
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1328020251;Create a new SingleConnectionFactory that always returns a single_Connection that it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1356735495;Create a new SingleConnectionFactory that always returns a single_Connection that it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1357119239;Create a new SingleConnectionFactory that always returns a single_Connection that it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1364391982;Create a new SingleConnectionFactory that always returns a single_Connection that it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1368482696;Create a new SingleConnectionFactory that always returns a single_Connection that it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1385412762;Create a new SingleConnectionFactory that always returns a single_Connection that it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1405696891;Create a new SingleConnectionFactory that always returns a single_Connection that it will lazily create via the given target_ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1414619028;Create a new SingleConnectionFactory that always returns a single Connection_that it will lazily create via the given target ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1441205709;Create a new SingleConnectionFactory that always returns a single Connection_that it will lazily create via the given target ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1467730834;Create a new SingleConnectionFactory that always returns a single Connection_that it will lazily create via the given target ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1467749899;Create a new SingleConnectionFactory that always returns a single Connection_that it will lazily create via the given target ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1495868221;Create a new SingleConnectionFactory that always returns a single Connection_that it will lazily create via the given target ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1496837955;Create a new SingleConnectionFactory that always returns a single Connection_that it will lazily create via the given target ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1498780456;Create a new SingleConnectionFactory that always returns a single Connection_that it will lazily create via the given target ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1499453049;Create a new SingleConnectionFactory that always returns a single Connection_that it will lazily create via the given target ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1500448076;Create a new SingleConnectionFactory that always returns a single Connection_that it will lazily create via the given target ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1519295386;Create a new SingleConnectionFactory that always returns a single Connection_that it will lazily create via the given target ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1530174524;Create a new SingleConnectionFactory that always returns a single Connection_that it will lazily create via the given target ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1532091916;Create a new SingleConnectionFactory that always returns a single Connection_that it will lazily create via the given target ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public SingleConnectionFactory(ConnectionFactory targetConnectionFactory);1544613334;Create a new SingleConnectionFactory that always returns a single Connection_that it will lazily create via the given target ConnectionFactory._@param targetConnectionFactory the target ConnectionFactory;public SingleConnectionFactory(ConnectionFactory targetConnectionFactory) {_		Assert.notNull(targetConnectionFactory, "Target ConnectionFactory must not be null")__		this.targetConnectionFactory = targetConnectionFactory__	};create,a,new,single,connection,factory,that,always,returns,a,single,connection,that,it,will,lazily,create,via,the,given,target,connection,factory,param,target,connection,factory,the,target,connection,factory;public,single,connection,factory,connection,factory,target,connection,factory,assert,not,null,target,connection,factory,target,connection,factory,must,not,be,null,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setClientId(String clientId);1328020251;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(String clientId);1356735495;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(String clientId);1357119239;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(String clientId);1364391982;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(String clientId);1368482696;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(String clientId);1385412762;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(String clientId);1405696891;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(String clientId);1414619028;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(String clientId);1441205709;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(String clientId);1467730834;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(String clientId);1467749899;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(String clientId);1495868221;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(String clientId);1496837955;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(String clientId);1498780456;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(String clientId);1499453049;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,string,client,id,this,client,id,client,id
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1328020251;Create a default Session for this ConnectionFactory,_adaptign to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_(<code>Session.TRANSACTED</code> or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adaptign,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,code,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1356735495;Create a default Session for this ConnectionFactory,_adaptign to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adaptign,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1357119239;Create a default Session for this ConnectionFactory,_adaptign to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adaptign,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1364391982;Create a default Session for this ConnectionFactory,_adaptign to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adaptign,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1368482696;Create a default Session for this ConnectionFactory,_adaptign to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adaptign,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1385412762;Create a default Session for this ConnectionFactory,_adaptign to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adaptign,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1405696891;Create a default Session for this ConnectionFactory,_adapting to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adapting,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1414619028;Create a default Session for this ConnectionFactory,_adapting to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adapting,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1441205709;Create a default Session for this ConnectionFactory,_adapting to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adapting,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1467730834;Create a default Session for this ConnectionFactory,_adapting to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adapting,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1467749899;Create a default Session for this ConnectionFactory,_adapting to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adapting,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1495868221;Create a default Session for this ConnectionFactory,_adapting to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adapting,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1496837955;Create a default Session for this ConnectionFactory,_adapting to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adapting,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1498780456;Create a default Session for this ConnectionFactory,_adapting to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adapting,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1499453049;Create a default Session for this ConnectionFactory,_adapting to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adapting,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1500448076;Create a default Session for this ConnectionFactory,_adapting to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adapting,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1519295386;Create a default Session for this ConnectionFactory,_adapting to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adapting,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1530174524;Create a default Session for this ConnectionFactory,_adapting to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adapting,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1532091916;Create a default Session for this ConnectionFactory,_adapting to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adapting,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected Session createSession(Connection con, Integer mode) throws JMSException;1544613334;Create a default Session for this ConnectionFactory,_adapting to JMS 1.0.2 style queue/topic mode if necessary._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the newly created Session_@throws JMSException if thrown by the JMS API;protected Session createSession(Connection con, Integer mode) throws JMSException {_		_		boolean transacted = (mode == Session.SESSION_TRANSACTED)__		int ackMode = (transacted ? Session.AUTO_ACKNOWLEDGE : mode)__		_		if (Boolean.FALSE.equals(this.pubSubMode) && con instanceof QueueConnection) {_			return ((QueueConnection) con).createQueueSession(transacted, ackMode)__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && con instanceof TopicConnection) {_			return ((TopicConnection) con).createTopicSession(transacted, ackMode)__		}_		else {_			return con.createSession(transacted, ackMode)__		}_	};create,a,default,session,for,this,connection,factory,adapting,to,jms,1,0,2,style,queue,topic,mode,if,necessary,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,newly,created,session,throws,jmsexception,if,thrown,by,the,jms,api;protected,session,create,session,connection,con,integer,mode,throws,jmsexception,boolean,transacted,mode,session,int,ack,mode,transacted,session,mode,if,boolean,false,equals,this,pub,sub,mode,con,instanceof,queue,connection,return,queue,connection,con,create,queue,session,transacted,ack,mode,else,if,boolean,true,equals,this,pub,sub,mode,con,instanceof,topic,connection,return,topic,connection,con,create,topic,session,transacted,ack,mode,else,return,con,create,session,transacted,ack,mode
SingleConnectionFactory -> protected ExceptionListener getExceptionListener();1328020251;Return the JMS ExceptionListener implementation that should be registered_with with the single Connection created by this factory, if any.;protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,with,the,single,connection,created,by,this,factory,if,any;protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> protected ExceptionListener getExceptionListener();1356735495;Return the JMS ExceptionListener implementation that should be registered_with with the single Connection created by this factory, if any.;protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,with,the,single,connection,created,by,this,factory,if,any;protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> protected ExceptionListener getExceptionListener();1357119239;Return the JMS ExceptionListener implementation that should be registered_with with the single Connection created by this factory, if any.;protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,with,the,single,connection,created,by,this,factory,if,any;protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> protected ExceptionListener getExceptionListener();1364391982;Return the JMS ExceptionListener implementation that should be registered_with with the single Connection created by this factory, if any.;protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,with,the,single,connection,created,by,this,factory,if,any;protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> protected ExceptionListener getExceptionListener();1368482696;Return the JMS ExceptionListener implementation that should be registered_with with the single Connection created by this factory, if any.;protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,with,the,single,connection,created,by,this,factory,if,any;protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> protected ExceptionListener getExceptionListener();1385412762;Return the JMS ExceptionListener implementation that should be registered_with with the single Connection created by this factory, if any.;protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,with,the,single,connection,created,by,this,factory,if,any;protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> protected ExceptionListener getExceptionListener();1405696891;Return the JMS ExceptionListener implementation that should be registered_with with the single Connection created by this factory, if any.;protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,with,the,single,connection,created,by,this,factory,if,any;protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> protected ExceptionListener getExceptionListener();1414619028;Return the JMS ExceptionListener implementation that should be registered_with the single Connection created by this factory, if any.;protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,if,any;protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> protected ExceptionListener getExceptionListener();1441205709;Return the JMS ExceptionListener implementation that should be registered_with the single Connection created by this factory, if any.;protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,if,any;protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> protected ExceptionListener getExceptionListener();1467730834;Return the JMS ExceptionListener implementation that should be registered_with the single Connection created by this factory, if any.;protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,if,any;protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> protected ExceptionListener getExceptionListener();1467749899;Return the JMS ExceptionListener implementation that should be registered_with the single Connection created by this factory, if any.;protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,if,any;protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1328020251;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				listenerToUse = new InternalChainedExceptionListener(this, listenerToUse)__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,listener,to,use,new,internal,chained,exception,listener,this,listener,to,use,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1356735495;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				listenerToUse = new InternalChainedExceptionListener(this, listenerToUse)__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,listener,to,use,new,internal,chained,exception,listener,this,listener,to,use,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1357119239;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				listenerToUse = new InternalChainedExceptionListener(this, listenerToUse)__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,listener,to,use,new,internal,chained,exception,listener,this,listener,to,use,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1364391982;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				listenerToUse = new InternalChainedExceptionListener(this, listenerToUse)__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,listener,to,use,new,internal,chained,exception,listener,this,listener,to,use,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1368482696;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				listenerToUse = new InternalChainedExceptionListener(this, listenerToUse)__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,listener,to,use,new,internal,chained,exception,listener,this,listener,to,use,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1385412762;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				listenerToUse = new InternalChainedExceptionListener(this, listenerToUse)__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,listener,to,use,new,internal,chained,exception,listener,this,listener,to,use,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1405696891;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				listenerToUse = new InternalChainedExceptionListener(this, listenerToUse)__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,listener,to,use,new,internal,chained,exception,listener,this,listener,to,use,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1414619028;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (this.aggregatedExceptionListener != null) {_			con.setExceptionListener(this.aggregatedExceptionListener)__		}_		else if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				this.aggregatedExceptionListener = new AggregatedExceptionListener()__				this.aggregatedExceptionListener.delegates.add(this)__				if (listenerToUse != null) {_					this.aggregatedExceptionListener.delegates.add(listenerToUse)__				}_				listenerToUse = this.aggregatedExceptionListener__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,this,aggregated,exception,listener,null,con,set,exception,listener,this,aggregated,exception,listener,else,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,this,aggregated,exception,listener,new,aggregated,exception,listener,this,aggregated,exception,listener,delegates,add,this,if,listener,to,use,null,this,aggregated,exception,listener,delegates,add,listener,to,use,listener,to,use,this,aggregated,exception,listener,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1441205709;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (this.aggregatedExceptionListener != null) {_			con.setExceptionListener(this.aggregatedExceptionListener)__		}_		else if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				this.aggregatedExceptionListener = new AggregatedExceptionListener()__				this.aggregatedExceptionListener.delegates.add(this)__				if (listenerToUse != null) {_					this.aggregatedExceptionListener.delegates.add(listenerToUse)__				}_				listenerToUse = this.aggregatedExceptionListener__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,this,aggregated,exception,listener,null,con,set,exception,listener,this,aggregated,exception,listener,else,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,this,aggregated,exception,listener,new,aggregated,exception,listener,this,aggregated,exception,listener,delegates,add,this,if,listener,to,use,null,this,aggregated,exception,listener,delegates,add,listener,to,use,listener,to,use,this,aggregated,exception,listener,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1467730834;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (this.aggregatedExceptionListener != null) {_			con.setExceptionListener(this.aggregatedExceptionListener)__		}_		else if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				this.aggregatedExceptionListener = new AggregatedExceptionListener()__				this.aggregatedExceptionListener.delegates.add(this)__				if (listenerToUse != null) {_					this.aggregatedExceptionListener.delegates.add(listenerToUse)__				}_				listenerToUse = this.aggregatedExceptionListener__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,this,aggregated,exception,listener,null,con,set,exception,listener,this,aggregated,exception,listener,else,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,this,aggregated,exception,listener,new,aggregated,exception,listener,this,aggregated,exception,listener,delegates,add,this,if,listener,to,use,null,this,aggregated,exception,listener,delegates,add,listener,to,use,listener,to,use,this,aggregated,exception,listener,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1467749899;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (this.aggregatedExceptionListener != null) {_			con.setExceptionListener(this.aggregatedExceptionListener)__		}_		else if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				this.aggregatedExceptionListener = new AggregatedExceptionListener()__				this.aggregatedExceptionListener.delegates.add(this)__				if (listenerToUse != null) {_					this.aggregatedExceptionListener.delegates.add(listenerToUse)__				}_				listenerToUse = this.aggregatedExceptionListener__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,this,aggregated,exception,listener,null,con,set,exception,listener,this,aggregated,exception,listener,else,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,this,aggregated,exception,listener,new,aggregated,exception,listener,this,aggregated,exception,listener,delegates,add,this,if,listener,to,use,null,this,aggregated,exception,listener,delegates,add,listener,to,use,listener,to,use,this,aggregated,exception,listener,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1495868221;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (this.aggregatedExceptionListener != null) {_			con.setExceptionListener(this.aggregatedExceptionListener)__		}_		else if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				this.aggregatedExceptionListener = new AggregatedExceptionListener()__				this.aggregatedExceptionListener.delegates.add(this)__				if (listenerToUse != null) {_					this.aggregatedExceptionListener.delegates.add(listenerToUse)__				}_				listenerToUse = this.aggregatedExceptionListener__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,this,aggregated,exception,listener,null,con,set,exception,listener,this,aggregated,exception,listener,else,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,this,aggregated,exception,listener,new,aggregated,exception,listener,this,aggregated,exception,listener,delegates,add,this,if,listener,to,use,null,this,aggregated,exception,listener,delegates,add,listener,to,use,listener,to,use,this,aggregated,exception,listener,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1496837955;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (this.aggregatedExceptionListener != null) {_			con.setExceptionListener(this.aggregatedExceptionListener)__		}_		else if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				this.aggregatedExceptionListener = new AggregatedExceptionListener()__				this.aggregatedExceptionListener.delegates.add(this)__				if (listenerToUse != null) {_					this.aggregatedExceptionListener.delegates.add(listenerToUse)__				}_				listenerToUse = this.aggregatedExceptionListener__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,this,aggregated,exception,listener,null,con,set,exception,listener,this,aggregated,exception,listener,else,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,this,aggregated,exception,listener,new,aggregated,exception,listener,this,aggregated,exception,listener,delegates,add,this,if,listener,to,use,null,this,aggregated,exception,listener,delegates,add,listener,to,use,listener,to,use,this,aggregated,exception,listener,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1498780456;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (this.aggregatedExceptionListener != null) {_			con.setExceptionListener(this.aggregatedExceptionListener)__		}_		else if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				this.aggregatedExceptionListener = new AggregatedExceptionListener()__				this.aggregatedExceptionListener.delegates.add(this)__				if (listenerToUse != null) {_					this.aggregatedExceptionListener.delegates.add(listenerToUse)__				}_				listenerToUse = this.aggregatedExceptionListener__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,this,aggregated,exception,listener,null,con,set,exception,listener,this,aggregated,exception,listener,else,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,this,aggregated,exception,listener,new,aggregated,exception,listener,this,aggregated,exception,listener,delegates,add,this,if,listener,to,use,null,this,aggregated,exception,listener,delegates,add,listener,to,use,listener,to,use,this,aggregated,exception,listener,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1499453049;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (this.aggregatedExceptionListener != null) {_			con.setExceptionListener(this.aggregatedExceptionListener)__		}_		else if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				this.aggregatedExceptionListener = new AggregatedExceptionListener()__				this.aggregatedExceptionListener.delegates.add(this)__				if (listenerToUse != null) {_					this.aggregatedExceptionListener.delegates.add(listenerToUse)__				}_				listenerToUse = this.aggregatedExceptionListener__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,this,aggregated,exception,listener,null,con,set,exception,listener,this,aggregated,exception,listener,else,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,this,aggregated,exception,listener,new,aggregated,exception,listener,this,aggregated,exception,listener,delegates,add,this,if,listener,to,use,null,this,aggregated,exception,listener,delegates,add,listener,to,use,listener,to,use,this,aggregated,exception,listener,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1500448076;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (this.aggregatedExceptionListener != null) {_			con.setExceptionListener(this.aggregatedExceptionListener)__		}_		else if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				this.aggregatedExceptionListener = new AggregatedExceptionListener()__				this.aggregatedExceptionListener.delegates.add(this)__				if (listenerToUse != null) {_					this.aggregatedExceptionListener.delegates.add(listenerToUse)__				}_				listenerToUse = this.aggregatedExceptionListener__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,this,aggregated,exception,listener,null,con,set,exception,listener,this,aggregated,exception,listener,else,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,this,aggregated,exception,listener,new,aggregated,exception,listener,this,aggregated,exception,listener,delegates,add,this,if,listener,to,use,null,this,aggregated,exception,listener,delegates,add,listener,to,use,listener,to,use,this,aggregated,exception,listener,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1519295386;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (this.aggregatedExceptionListener != null) {_			con.setExceptionListener(this.aggregatedExceptionListener)__		}_		else if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				this.aggregatedExceptionListener = new AggregatedExceptionListener()__				this.aggregatedExceptionListener.delegates.add(this)__				if (listenerToUse != null) {_					this.aggregatedExceptionListener.delegates.add(listenerToUse)__				}_				listenerToUse = this.aggregatedExceptionListener__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,this,aggregated,exception,listener,null,con,set,exception,listener,this,aggregated,exception,listener,else,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,this,aggregated,exception,listener,new,aggregated,exception,listener,this,aggregated,exception,listener,delegates,add,this,if,listener,to,use,null,this,aggregated,exception,listener,delegates,add,listener,to,use,listener,to,use,this,aggregated,exception,listener,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1530174524;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (this.aggregatedExceptionListener != null) {_			con.setExceptionListener(this.aggregatedExceptionListener)__		}_		else if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				this.aggregatedExceptionListener = new AggregatedExceptionListener()__				this.aggregatedExceptionListener.delegates.add(this)__				if (listenerToUse != null) {_					this.aggregatedExceptionListener.delegates.add(listenerToUse)__				}_				listenerToUse = this.aggregatedExceptionListener__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,this,aggregated,exception,listener,null,con,set,exception,listener,this,aggregated,exception,listener,else,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,this,aggregated,exception,listener,new,aggregated,exception,listener,this,aggregated,exception,listener,delegates,add,this,if,listener,to,use,null,this,aggregated,exception,listener,delegates,add,listener,to,use,listener,to,use,this,aggregated,exception,listener,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1532091916;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (this.aggregatedExceptionListener != null) {_			con.setExceptionListener(this.aggregatedExceptionListener)__		}_		else if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				this.aggregatedExceptionListener = new AggregatedExceptionListener()__				this.aggregatedExceptionListener.delegates.add(this)__				if (listenerToUse != null) {_					this.aggregatedExceptionListener.delegates.add(listenerToUse)__				}_				listenerToUse = this.aggregatedExceptionListener__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,this,aggregated,exception,listener,null,con,set,exception,listener,this,aggregated,exception,listener,else,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,this,aggregated,exception,listener,new,aggregated,exception,listener,this,aggregated,exception,listener,delegates,add,this,if,listener,to,use,null,this,aggregated,exception,listener,delegates,add,listener,to,use,listener,to,use,this,aggregated,exception,listener,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> protected void prepareConnection(Connection con) throws JMSException;1544613334;Prepare the given Connection before it is exposed._<p>The default implementation applies ExceptionListener and client id._Can be overridden in subclasses._@param con the Connection to prepare_@throws JMSException if thrown by JMS API methods_@see #setExceptionListener_@see #setReconnectOnException;protected void prepareConnection(Connection con) throws JMSException {_		if (getClientId() != null) {_			con.setClientID(getClientId())__		}_		if (this.aggregatedExceptionListener != null) {_			con.setExceptionListener(this.aggregatedExceptionListener)__		}_		else if (getExceptionListener() != null || isReconnectOnException()) {_			ExceptionListener listenerToUse = getExceptionListener()__			if (isReconnectOnException()) {_				this.aggregatedExceptionListener = new AggregatedExceptionListener()__				this.aggregatedExceptionListener.delegates.add(this)__				if (listenerToUse != null) {_					this.aggregatedExceptionListener.delegates.add(listenerToUse)__				}_				listenerToUse = this.aggregatedExceptionListener__			}_			con.setExceptionListener(listenerToUse)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,exception,listener,and,client,id,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,throws,jmsexception,if,thrown,by,jms,api,methods,see,set,exception,listener,see,set,reconnect,on,exception;protected,void,prepare,connection,connection,con,throws,jmsexception,if,get,client,id,null,con,set,client,id,get,client,id,if,this,aggregated,exception,listener,null,con,set,exception,listener,this,aggregated,exception,listener,else,if,get,exception,listener,null,is,reconnect,on,exception,exception,listener,listener,to,use,get,exception,listener,if,is,reconnect,on,exception,this,aggregated,exception,listener,new,aggregated,exception,listener,this,aggregated,exception,listener,delegates,add,this,if,listener,to,use,null,this,aggregated,exception,listener,delegates,add,listener,to,use,listener,to,use,this,aggregated,exception,listener,con,set,exception,listener,listener,to,use
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1356735495;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1368482696;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1385412762;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1405696891;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1414619028;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Target Connection or ConnectionFactory is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,target,connection,or,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1441205709;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Target Connection or ConnectionFactory is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,target,connection,or,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1467730834;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Target Connection or ConnectionFactory is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,target,connection,or,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1467749899;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Target Connection or ConnectionFactory is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,target,connection,or,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1495868221;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Target Connection or ConnectionFactory is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,target,connection,or,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1496837955;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Target Connection or ConnectionFactory is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,target,connection,or,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1498780456;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Target Connection or ConnectionFactory is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,target,connection,or,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1499453049;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Target Connection or ConnectionFactory is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,target,connection,or,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1500448076;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Target Connection or ConnectionFactory is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,target,connection,or,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1519295386;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Target Connection or ConnectionFactory is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,target,connection,or,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1530174524;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Target Connection or ConnectionFactory is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,target,connection,or,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1532091916;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Target Connection or ConnectionFactory is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,target,connection,or,connection,factory,is,required
SingleConnectionFactory -> @Override 	public void afterPropertiesSet();1544613334;Make sure a Connection or ConnectionFactory has been set.;@Override_	public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Target Connection or ConnectionFactory is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;override,public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,target,connection,or,connection,factory,is,required
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1328020251;Create a new SingleConnectionFactory that always returns the given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getSharedConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,shared,connection,proxy,target
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1356735495;Create a new SingleConnectionFactory that always returns the given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getSharedConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,shared,connection,proxy,target
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1357119239;Create a new SingleConnectionFactory that always returns the given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getSharedConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,shared,connection,proxy,target
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1364391982;Create a new SingleConnectionFactory that always returns the given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getSharedConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,shared,connection,proxy,target
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1368482696;Create a new SingleConnectionFactory that always returns the given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getSharedConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,shared,connection,proxy,target
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1385412762;Create a new SingleConnectionFactory that always returns the given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getSharedConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,shared,connection,proxy,target
SingleConnectionFactory -> public SingleConnectionFactory(Connection target);1405696891;Create a new SingleConnectionFactory that always returns the given Connection._@param target the single Connection;public SingleConnectionFactory(Connection target) {_		Assert.notNull(target, "Target Connection must not be null")__		this.target = target__		this.connection = getSharedConnectionProxy(target)__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,the,single,connection;public,single,connection,factory,connection,target,assert,not,null,target,target,connection,must,not,be,null,this,target,target,this,connection,get,shared,connection,proxy,target
SingleConnectionFactory -> public ConnectionFactory getTargetConnectionFactory();1328020251;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> public ConnectionFactory getTargetConnectionFactory();1356735495;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> public ConnectionFactory getTargetConnectionFactory();1357119239;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> public ConnectionFactory getTargetConnectionFactory();1364391982;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> public ConnectionFactory getTargetConnectionFactory();1368482696;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> public ConnectionFactory getTargetConnectionFactory();1385412762;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> public ConnectionFactory getTargetConnectionFactory();1405696891;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> public ConnectionFactory getTargetConnectionFactory();1414619028;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> public ConnectionFactory getTargetConnectionFactory();1441205709;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> public ConnectionFactory getTargetConnectionFactory();1467730834;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> public ConnectionFactory getTargetConnectionFactory();1467749899;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> @Nullable 	protected ExceptionListener getExceptionListener();1495868221;Return the JMS ExceptionListener implementation that should be registered_with the single Connection created by this factory, if any.;@Nullable_	protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,if,any;nullable,protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> @Nullable 	protected ExceptionListener getExceptionListener();1496837955;Return the JMS ExceptionListener implementation that should be registered_with the single Connection created by this factory, if any.;@Nullable_	protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,if,any;nullable,protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> @Nullable 	protected ExceptionListener getExceptionListener();1498780456;Return the JMS ExceptionListener implementation that should be registered_with the single Connection created by this factory, if any.;@Nullable_	protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,if,any;nullable,protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> @Nullable 	protected ExceptionListener getExceptionListener();1499453049;Return the JMS ExceptionListener implementation that should be registered_with the single Connection created by this factory, if any.;@Nullable_	protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,if,any;nullable,protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> @Nullable 	protected ExceptionListener getExceptionListener();1500448076;Return the JMS ExceptionListener implementation that should be registered_with the single Connection created by this factory, if any.;@Nullable_	protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,if,any;nullable,protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> @Nullable 	protected ExceptionListener getExceptionListener();1519295386;Return the JMS ExceptionListener implementation that should be registered_with the single Connection created by this factory, if any.;@Nullable_	protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,if,any;nullable,protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> @Nullable 	protected ExceptionListener getExceptionListener();1530174524;Return the JMS ExceptionListener implementation that should be registered_with the single Connection created by this factory, if any.;@Nullable_	protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,if,any;nullable,protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> @Nullable 	protected ExceptionListener getExceptionListener();1532091916;Return the JMS ExceptionListener implementation that should be registered_with the single Connection created by this factory, if any.;@Nullable_	protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,if,any;nullable,protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> @Nullable 	protected ExceptionListener getExceptionListener();1544613334;Return the JMS ExceptionListener implementation that should be registered_with the single Connection created by this factory, if any.;@Nullable_	protected ExceptionListener getExceptionListener() {_		return this.exceptionListener__	};return,the,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,if,any;nullable,protected,exception,listener,get,exception,listener,return,this,exception,listener
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1328020251;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return getTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,get,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1356735495;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return getTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,get,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1357119239;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return getTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,get,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1364391982;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return getTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,get,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1368482696;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return getTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,get,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1385412762;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return getTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,get,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1405696891;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return getTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,get,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1414619028;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return getTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,get,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1441205709;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return getTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,get,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1467730834;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return getTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,get,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1467749899;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return getTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,get,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1495868221;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return getTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,get,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1496837955;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return obtainTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,obtain,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1498780456;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return obtainTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,obtain,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1499453049;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return obtainTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,obtain,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1500448076;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return obtainTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,obtain,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1519295386;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return obtainTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,obtain,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1530174524;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return obtainTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,obtain,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1532091916;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return obtainTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,obtain,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection doCreateConnection() throws JMSException;1544613334;Create a JMS Connection via this template's ConnectionFactory._@return the new JMS Connection_@throws javax.jms.JMSException if thrown by JMS API methods;protected Connection doCreateConnection() throws JMSException {_		ConnectionFactory cf = getTargetConnectionFactory()__		if (Boolean.FALSE.equals(this.pubSubMode) && cf instanceof QueueConnectionFactory) {_			return ((QueueConnectionFactory) cf).createQueueConnection()__		}_		else if (Boolean.TRUE.equals(this.pubSubMode) && cf instanceof TopicConnectionFactory) {_			return ((TopicConnectionFactory) cf).createTopicConnection()__		}_		else {_			return obtainTargetConnectionFactory().createConnection()__		}_	};create,a,jms,connection,via,this,template,s,connection,factory,return,the,new,jms,connection,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,connection,do,create,connection,throws,jmsexception,connection,factory,cf,get,target,connection,factory,if,boolean,false,equals,this,pub,sub,mode,cf,instanceof,queue,connection,factory,return,queue,connection,factory,cf,create,queue,connection,else,if,boolean,true,equals,this,pub,sub,mode,cf,instanceof,topic,connection,factory,return,topic,connection,factory,cf,create,topic,connection,else,return,obtain,target,connection,factory,create,connection
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1328020251;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class> classes = new ArrayList<Class>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class[classes.size()]),_				new SharedConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,class,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,shared,connection,invocation,handler,target
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1356735495;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class> classes = new ArrayList<Class>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class[classes.size()]),_				new SharedConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,class,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,shared,connection,invocation,handler,target
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1357119239;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class> classes = new ArrayList<Class>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class[classes.size()]),_				new SharedConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,class,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,shared,connection,invocation,handler,target
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1364391982;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class> classes = new ArrayList<Class>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class[classes.size()]),_				new SharedConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,class,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,shared,connection,invocation,handler,target
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1368482696;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class> classes = new ArrayList<Class>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class[classes.size()]),_				new SharedConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,class,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,shared,connection,invocation,handler,target
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1385412762;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<Class<?>>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new SharedConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,class,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,shared,connection,invocation,handler,target
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1405696891;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<Class<?>>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new SharedConnectionInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,class,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,shared,connection,invocation,handler,target
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1414619028;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<Class<?>>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new SharedConnectionInvocationHandler())__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,class,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,shared,connection,invocation,handler
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1441205709;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<Class<?>>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new SharedConnectionInvocationHandler())__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,class,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,shared,connection,invocation,handler
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1467730834;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new SharedConnectionInvocationHandler())__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,shared,connection,invocation,handler
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1467749899;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new SharedConnectionInvocationHandler())__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,shared,connection,invocation,handler
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1495868221;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new SharedConnectionInvocationHandler())__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,shared,connection,invocation,handler
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1496837955;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new SharedConnectionInvocationHandler())__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,shared,connection,invocation,handler
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1498780456;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new SharedConnectionInvocationHandler())__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,shared,connection,invocation,handler
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1499453049;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new SharedConnectionInvocationHandler())__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,shared,connection,invocation,handler
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1500448076;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(_				Connection.class.getClassLoader(),_				classes.toArray(new Class<?>[classes.size()]),_				new SharedConnectionInvocationHandler())__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,classes,to,array,new,class,classes,size,new,shared,connection,invocation,handler
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1519295386;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(Connection.class.getClassLoader(),_				ClassUtils.toClassArray(classes), new SharedConnectionInvocationHandler())__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,class,utils,to,class,array,classes,new,shared,connection,invocation,handler
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1530174524;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(Connection.class.getClassLoader(),_				ClassUtils.toClassArray(classes), new SharedConnectionInvocationHandler())__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,class,utils,to,class,array,classes,new,shared,connection,invocation,handler
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1532091916;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(Connection.class.getClassLoader(),_				ClassUtils.toClassArray(classes), new SharedConnectionInvocationHandler())__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,class,utils,to,class,array,classes,new,shared,connection,invocation,handler
SingleConnectionFactory -> protected Connection getSharedConnectionProxy(Connection target);1544613334;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls. This is useful for allowing application code to_handle a special framework Connection just like an ordinary Connection from a_JMS ConnectionFactory._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getSharedConnectionProxy(Connection target) {_		List<Class<?>> classes = new ArrayList<>(3)__		classes.add(Connection.class)__		if (target instanceof QueueConnection) {_			classes.add(QueueConnection.class)__		}_		if (target instanceof TopicConnection) {_			classes.add(TopicConnection.class)__		}_		return (Connection) Proxy.newProxyInstance(Connection.class.getClassLoader(),_				ClassUtils.toClassArray(classes), new SharedConnectionInvocationHandler())__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,this,is,useful,for,allowing,application,code,to,handle,a,special,framework,connection,just,like,an,ordinary,connection,from,a,jms,connection,factory,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,shared,connection,proxy,connection,target,list,class,classes,new,array,list,3,classes,add,connection,class,if,target,instanceof,queue,connection,classes,add,queue,connection,class,if,target,instanceof,topic,connection,classes,add,topic,connection,class,return,connection,proxy,new,proxy,instance,connection,class,get,class,loader,class,utils,to,class,array,classes,new,shared,connection,invocation,handler
SingleConnectionFactory -> @Nullable 	protected String getClientId();1500448076;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;@Nullable_	protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;nullable,protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> @Nullable 	protected String getClientId();1519295386;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;@Nullable_	protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;nullable,protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> @Nullable 	protected String getClientId();1530174524;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;@Nullable_	protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;nullable,protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> @Nullable 	protected String getClientId();1532091916;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;@Nullable_	protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;nullable,protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> @Nullable 	protected String getClientId();1544613334;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;@Nullable_	protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;nullable,protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> public void initConnection() throws JMSException;1328020251;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.target)__			}_			this.connection = getSharedConnectionProxy(this.target)__		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,target,this,connection,get,shared,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws JMSException;1356735495;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.target)__			}_			this.connection = getSharedConnectionProxy(this.target)__		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,target,this,connection,get,shared,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws JMSException;1357119239;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.target)__			}_			this.connection = getSharedConnectionProxy(this.target)__		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,target,this,connection,get,shared,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws JMSException;1364391982;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.target)__			}_			this.connection = getSharedConnectionProxy(this.target)__		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,target,this,connection,get,shared,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws JMSException;1368482696;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.target)__			}_			this.connection = getSharedConnectionProxy(this.target)__		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,target,this,connection,get,shared,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws JMSException;1385412762;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.target)__			}_			this.connection = getSharedConnectionProxy(this.target)__		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,target,this,connection,get,shared,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws JMSException;1405696891;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = doCreateConnection()__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.target)__			}_			this.connection = getSharedConnectionProxy(this.target)__		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,do,create,connection,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,target,this,connection,get,shared,connection,proxy,this,target
SingleConnectionFactory -> public void initConnection() throws JMSException;1414619028;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods_@see #prepareConnection;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = doCreateConnection()__			prepareConnection(this.connection)__			if (this.startedCount > 0) {_				this.connection.start()__			}_			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.connection)__			}_		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,prepare,connection;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,do,create,connection,prepare,connection,this,connection,if,this,started,count,0,this,connection,start,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,connection
SingleConnectionFactory -> public void initConnection() throws JMSException;1441205709;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods_@see #prepareConnection;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = doCreateConnection()__			prepareConnection(this.connection)__			if (this.startedCount > 0) {_				this.connection.start()__			}_			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.connection)__			}_		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,prepare,connection;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,do,create,connection,prepare,connection,this,connection,if,this,started,count,0,this,connection,start,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,connection
SingleConnectionFactory -> public void initConnection() throws JMSException;1467730834;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods_@see #prepareConnection;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = doCreateConnection()__			prepareConnection(this.connection)__			if (this.startedCount > 0) {_				this.connection.start()__			}_			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.connection)__			}_		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,prepare,connection;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,do,create,connection,prepare,connection,this,connection,if,this,started,count,0,this,connection,start,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,connection
SingleConnectionFactory -> public void initConnection() throws JMSException;1467749899;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods_@see #prepareConnection;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = doCreateConnection()__			prepareConnection(this.connection)__			if (this.startedCount > 0) {_				this.connection.start()__			}_			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.connection)__			}_		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,prepare,connection;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,do,create,connection,prepare,connection,this,connection,if,this,started,count,0,this,connection,start,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,connection
SingleConnectionFactory -> public void initConnection() throws JMSException;1495868221;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods_@see #prepareConnection;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = doCreateConnection()__			prepareConnection(this.connection)__			if (this.startedCount > 0) {_				this.connection.start()__			}_			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.connection)__			}_		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,prepare,connection;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,do,create,connection,prepare,connection,this,connection,if,this,started,count,0,this,connection,start,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,connection
SingleConnectionFactory -> public void initConnection() throws JMSException;1496837955;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods_@see #prepareConnection;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = doCreateConnection()__			prepareConnection(this.connection)__			if (this.startedCount > 0) {_				this.connection.start()__			}_			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.connection)__			}_		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,prepare,connection;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,do,create,connection,prepare,connection,this,connection,if,this,started,count,0,this,connection,start,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,connection
SingleConnectionFactory -> public void initConnection() throws JMSException;1498780456;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods_@see #prepareConnection;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = doCreateConnection()__			prepareConnection(this.connection)__			if (this.startedCount > 0) {_				this.connection.start()__			}_			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.connection)__			}_		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,prepare,connection;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,do,create,connection,prepare,connection,this,connection,if,this,started,count,0,this,connection,start,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,connection
SingleConnectionFactory -> public void initConnection() throws JMSException;1499453049;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods_@see #prepareConnection;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = doCreateConnection()__			prepareConnection(this.connection)__			if (this.startedCount > 0) {_				this.connection.start()__			}_			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.connection)__			}_		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,prepare,connection;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,do,create,connection,prepare,connection,this,connection,if,this,started,count,0,this,connection,start,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,connection
SingleConnectionFactory -> public void initConnection() throws JMSException;1500448076;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods_@see #prepareConnection;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = doCreateConnection()__			prepareConnection(this.connection)__			if (this.startedCount > 0) {_				this.connection.start()__			}_			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.connection)__			}_		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,prepare,connection;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,do,create,connection,prepare,connection,this,connection,if,this,started,count,0,this,connection,start,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,connection
SingleConnectionFactory -> public void initConnection() throws JMSException;1519295386;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods_@see #prepareConnection;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = doCreateConnection()__			prepareConnection(this.connection)__			if (this.startedCount > 0) {_				this.connection.start()__			}_			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.connection)__			}_		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,prepare,connection;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,do,create,connection,prepare,connection,this,connection,if,this,started,count,0,this,connection,start,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,connection
SingleConnectionFactory -> public void initConnection() throws JMSException;1530174524;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods_@see #prepareConnection;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = doCreateConnection()__			prepareConnection(this.connection)__			if (this.startedCount > 0) {_				this.connection.start()__			}_			if (logger.isInfoEnabled()) {_				logger.info("Established shared JMS Connection: " + this.connection)__			}_		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,prepare,connection;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,do,create,connection,prepare,connection,this,connection,if,this,started,count,0,this,connection,start,if,logger,is,info,enabled,logger,info,established,shared,jms,connection,this,connection
SingleConnectionFactory -> public void initConnection() throws JMSException;1532091916;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods_@see #prepareConnection;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = doCreateConnection()__			prepareConnection(this.connection)__			if (this.startedCount > 0) {_				this.connection.start()__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Established shared JMS Connection: " + this.connection)__			}_		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,prepare,connection;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,do,create,connection,prepare,connection,this,connection,if,this,started,count,0,this,connection,start,if,logger,is,debug,enabled,logger,debug,established,shared,jms,connection,this,connection
SingleConnectionFactory -> public void initConnection() throws JMSException;1544613334;Initialize the underlying shared Connection._<p>Closes and reinitializes the Connection if an underlying_Connection is present already._@throws javax.jms.JMSException if thrown by JMS API methods_@see #prepareConnection;public void initConnection() throws JMSException {_		if (getTargetConnectionFactory() == null) {_			throw new IllegalStateException(_					"'targetConnectionFactory' is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = doCreateConnection()__			prepareConnection(this.connection)__			if (this.startedCount > 0) {_				this.connection.start()__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Established shared JMS Connection: " + this.connection)__			}_		}_	};initialize,the,underlying,shared,connection,p,closes,and,reinitializes,the,connection,if,an,underlying,connection,is,present,already,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,prepare,connection;public,void,init,connection,throws,jmsexception,if,get,target,connection,factory,null,throw,new,illegal,state,exception,target,connection,factory,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,do,create,connection,prepare,connection,this,connection,if,this,started,count,0,this,connection,start,if,logger,is,debug,enabled,logger,debug,established,shared,jms,connection,this,connection
SingleConnectionFactory -> @Nullable 	protected Session getSession(Connection con, Integer mode) throws JMSException;1495868221;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;@Nullable_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;nullable,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> @Nullable 	protected Session getSession(Connection con, Integer mode) throws JMSException;1496837955;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;@Nullable_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;nullable,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> @Nullable 	protected Session getSession(Connection con, Integer mode) throws JMSException;1498780456;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;@Nullable_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;nullable,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> @Nullable 	protected Session getSession(Connection con, Integer mode) throws JMSException;1499453049;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;@Nullable_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;nullable,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> @Nullable 	protected Session getSession(Connection con, Integer mode) throws JMSException;1500448076;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;@Nullable_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;nullable,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> @Nullable 	protected Session getSession(Connection con, Integer mode) throws JMSException;1519295386;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;@Nullable_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;nullable,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> @Nullable 	protected Session getSession(Connection con, Integer mode) throws JMSException;1530174524;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;@Nullable_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;nullable,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> @Nullable 	protected Session getSession(Connection con, Integer mode) throws JMSException;1532091916;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;@Nullable_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;nullable,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> @Nullable 	protected Session getSession(Connection con, Integer mode) throws JMSException;1544613334;Template method for obtaining a (potentially cached) Session._<p>The default implementation always returns {@code null}._Subclasses may override this for exposing specific Session handles,_possibly delegating to {@link #createSession} for the creation of raw_Session objects that will then get wrapped and returned from here._@param con the JMS Connection to operate on_@param mode the Session acknowledgement mode_({@code Session.TRANSACTED} or one of the common modes)_@return the Session to use, or {@code null} to indicate_creation of a raw standard Session_@throws JMSException if thrown by the JMS API;@Nullable_	protected Session getSession(Connection con, Integer mode) throws JMSException {_		return null__	};template,method,for,obtaining,a,potentially,cached,session,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,for,exposing,specific,session,handles,possibly,delegating,to,link,create,session,for,the,creation,of,raw,session,objects,that,will,then,get,wrapped,and,returned,from,here,param,con,the,jms,connection,to,operate,on,param,mode,the,session,acknowledgement,mode,code,session,transacted,or,one,of,the,common,modes,return,the,session,to,use,or,code,null,to,indicate,creation,of,a,raw,standard,session,throws,jmsexception,if,thrown,by,the,jms,api;nullable,protected,session,get,session,connection,con,integer,mode,throws,jmsexception,return,null
SingleConnectionFactory -> public void setTargetConnectionFactory(@Nullable ConnectionFactory targetConnectionFactory);1500448076;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(@Nullable ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,nullable,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(@Nullable ConnectionFactory targetConnectionFactory);1519295386;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(@Nullable ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,nullable,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(@Nullable ConnectionFactory targetConnectionFactory);1530174524;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(@Nullable ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,nullable,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(@Nullable ConnectionFactory targetConnectionFactory);1532091916;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(@Nullable ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,nullable,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setTargetConnectionFactory(@Nullable ConnectionFactory targetConnectionFactory);1544613334;Set the target ConnectionFactory which will be used to lazily_create a single Connection.;public void setTargetConnectionFactory(@Nullable ConnectionFactory targetConnectionFactory) {_		this.targetConnectionFactory = targetConnectionFactory__	};set,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection;public,void,set,target,connection,factory,nullable,connection,factory,target,connection,factory,this,target,connection,factory,target,connection,factory
SingleConnectionFactory -> public void setExceptionListener(@Nullable ExceptionListener exceptionListener);1500448076;Specify an JMS ExceptionListener implementation that should be_registered with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(@Nullable ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,nullable,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(@Nullable ExceptionListener exceptionListener);1519295386;Specify an JMS ExceptionListener implementation that should be_registered with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(@Nullable ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,nullable,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(@Nullable ExceptionListener exceptionListener);1530174524;Specify an JMS ExceptionListener implementation that should be_registered with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(@Nullable ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,nullable,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(@Nullable ExceptionListener exceptionListener);1532091916;Specify an JMS ExceptionListener implementation that should be_registered with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(@Nullable ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,nullable,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(@Nullable ExceptionListener exceptionListener);1544613334;Specify an JMS ExceptionListener implementation that should be_registered with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(@Nullable ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,nullable,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1356735495;Exception listener callback that renews the underlying single Connection.;@Override_	public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection;override,public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1368482696;Exception listener callback that renews the underlying single Connection.;@Override_	public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection;override,public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1385412762;Exception listener callback that renews the underlying single Connection.;@Override_	public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection;override,public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1405696891;Exception listener callback that renews the underlying single Connection.;@Override_	public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection;override,public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1414619028;Exception listener callback that renews the underlying single Connection._@see #resetConnection();@Override_	public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection,see,reset,connection;override,public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1441205709;Exception listener callback that renews the underlying single Connection._@see #resetConnection();@Override_	public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection,see,reset,connection;override,public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1467730834;Exception listener callback that renews the underlying single Connection._@see #resetConnection();@Override_	public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection,see,reset,connection;override,public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1467749899;Exception listener callback that renews the underlying single Connection._@see #resetConnection();@Override_	public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection,see,reset,connection;override,public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1495868221;Exception listener callback that renews the underlying single Connection._@see #resetConnection();@Override_	public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection,see,reset,connection;override,public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1496837955;Exception listener callback that renews the underlying single Connection._@see #resetConnection();@Override_	public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection,see,reset,connection;override,public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1498780456;Exception listener callback that renews the underlying single Connection._@see #resetConnection();@Override_	public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection,see,reset,connection;override,public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1499453049;Exception listener callback that renews the underlying single Connection._@see #resetConnection();@Override_	public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection,see,reset,connection;override,public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1500448076;Exception listener callback that renews the underlying single Connection._@see #resetConnection();@Override_	public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection,see,reset,connection;override,public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1519295386;Exception listener callback that renews the underlying single Connection._@see #resetConnection();@Override_	public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection,see,reset,connection;override,public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1530174524;Exception listener callback that renews the underlying single Connection._@see #resetConnection();@Override_	public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection,see,reset,connection;override,public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1532091916;Exception listener callback that renews the underlying single Connection._@see #resetConnection();@Override_	public void onException(JMSException ex) {_		logger.info("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection,see,reset,connection;override,public,void,on,exception,jmsexception,ex,logger,info,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @Override 	public void onException(JMSException ex);1544613334;Exception listener callback that renews the underlying single Connection._@see #resetConnection();@Override_	public void onException(JMSException ex) {_		logger.info("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection,see,reset,connection;override,public,void,on,exception,jmsexception,ex,logger,info,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> @org.springframework.lang.Nullable 	protected String getClientId();1495868221;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;@org.springframework.lang.Nullable_	protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;org,springframework,lang,nullable,protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> @org.springframework.lang.Nullable 	protected String getClientId();1496837955;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;@org.springframework.lang.Nullable_	protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;org,springframework,lang,nullable,protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> @org.springframework.lang.Nullable 	protected String getClientId();1498780456;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;@org.springframework.lang.Nullable_	protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;org,springframework,lang,nullable,protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> @org.springframework.lang.Nullable 	protected String getClientId();1499453049;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;@org.springframework.lang.Nullable_	protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;org,springframework,lang,nullable,protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> public void setClientId(@Nullable String clientId);1500448076;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(@Nullable String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,nullable,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(@Nullable String clientId);1519295386;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(@Nullable String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,nullable,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(@Nullable String clientId);1530174524;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(@Nullable String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,nullable,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(@Nullable String clientId);1532091916;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(@Nullable String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,nullable,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setClientId(@Nullable String clientId);1544613334;Specify a JMS client ID for the single Connection created and exposed_by this ConnectionFactory._<p>Note that client IDs need to be unique among all active Connections_of the underlying JMS provider. Furthermore, a client ID can only be_assigned if the original ConnectionFactory hasn't already assigned one._@see javax.jms.Connection#setClientID_@see #setTargetConnectionFactory;public void setClientId(@Nullable String clientId) {_		this.clientId = clientId__	};specify,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,p,note,that,client,ids,need,to,be,unique,among,all,active,connections,of,the,underlying,jms,provider,furthermore,a,client,id,can,only,be,assigned,if,the,original,connection,factory,hasn,t,already,assigned,one,see,javax,jms,connection,set,client,id,see,set,target,connection,factory;public,void,set,client,id,nullable,string,client,id,this,client,id,client,id
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1328020251;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1356735495;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1357119239;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1364391982;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1368482696;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1385412762;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1405696891;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1414619028;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1441205709;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1467730834;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1467749899;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1495868221;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1496837955;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1498780456;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1499453049;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1500448076;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1519295386;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1530174524;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1532091916;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void setReconnectOnException(boolean reconnectOnException);1544613334;Specify whether the single Connection should be reset (to be subsequently renewed)_when a JMSException is reported by the underlying Connection._<p>Default is "false". Switch this to "true" to automatically trigger_recovery based on your JMS provider's exception notifications._<p>Internally, this will lead to a special JMS ExceptionListener_(this SingleConnectionFactory itself) being registered with the_underlying Connection. This can also be combined with a_user-specified ExceptionListener, if desired._@see #setExceptionListener;public void setReconnectOnException(boolean reconnectOnException) {_		this.reconnectOnException = reconnectOnException__	};specify,whether,the,single,connection,should,be,reset,to,be,subsequently,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection,p,default,is,false,switch,this,to,true,to,automatically,trigger,recovery,based,on,your,jms,provider,s,exception,notifications,p,internally,this,will,lead,to,a,special,jms,exception,listener,this,single,connection,factory,itself,being,registered,with,the,underlying,connection,this,can,also,be,combined,with,a,user,specified,exception,listener,if,desired,see,set,exception,listener;public,void,set,reconnect,on,exception,boolean,reconnect,on,exception,this,reconnect,on,exception,reconnect,on,exception
SingleConnectionFactory -> public void resetConnection();1328020251;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1356735495;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1357119239;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1364391982;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1368482696;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1385412762;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1405696891;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.target != null) {_				closeConnection(this.target)__			}_			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,if,this,target,null,close,connection,this,target,this,target,null,this,connection,null
SingleConnectionFactory -> public void resetConnection();1414619028;Reset the underlying shared Connection, to be reinitialized on next access._@see #closeConnection;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access,see,close,connection;public,void,reset,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,null
SingleConnectionFactory -> public void resetConnection();1441205709;Reset the underlying shared Connection, to be reinitialized on next access._@see #closeConnection;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access,see,close,connection;public,void,reset,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,null
SingleConnectionFactory -> public void resetConnection();1467730834;Reset the underlying shared Connection, to be reinitialized on next access._@see #closeConnection;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access,see,close,connection;public,void,reset,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,null
SingleConnectionFactory -> public void resetConnection();1467749899;Reset the underlying shared Connection, to be reinitialized on next access._@see #closeConnection;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access,see,close,connection;public,void,reset,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,null
SingleConnectionFactory -> public void resetConnection();1495868221;Reset the underlying shared Connection, to be reinitialized on next access._@see #closeConnection;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access,see,close,connection;public,void,reset,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,null
SingleConnectionFactory -> public void resetConnection();1496837955;Reset the underlying shared Connection, to be reinitialized on next access._@see #closeConnection;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access,see,close,connection;public,void,reset,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,null
SingleConnectionFactory -> public void resetConnection();1498780456;Reset the underlying shared Connection, to be reinitialized on next access._@see #closeConnection;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access,see,close,connection;public,void,reset,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,null
SingleConnectionFactory -> public void resetConnection();1499453049;Reset the underlying shared Connection, to be reinitialized on next access._@see #closeConnection;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access,see,close,connection;public,void,reset,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,null
SingleConnectionFactory -> public void resetConnection();1500448076;Reset the underlying shared Connection, to be reinitialized on next access._@see #closeConnection;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access,see,close,connection;public,void,reset,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,null
SingleConnectionFactory -> public void resetConnection();1519295386;Reset the underlying shared Connection, to be reinitialized on next access._@see #closeConnection;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access,see,close,connection;public,void,reset,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,null
SingleConnectionFactory -> public void resetConnection();1530174524;Reset the underlying shared Connection, to be reinitialized on next access._@see #closeConnection;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access,see,close,connection;public,void,reset,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,null
SingleConnectionFactory -> public void resetConnection();1532091916;Reset the underlying shared Connection, to be reinitialized on next access._@see #closeConnection;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access,see,close,connection;public,void,reset,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,null
SingleConnectionFactory -> public void resetConnection();1544613334;Reset the underlying shared Connection, to be reinitialized on next access._@see #closeConnection;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			if (this.connection != null) {_				closeConnection(this.connection)__			}_			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access,see,close,connection;public,void,reset,connection,synchronized,this,connection,monitor,if,this,connection,null,close,connection,this,connection,this,connection,null
SingleConnectionFactory -> protected boolean isReconnectOnException();1328020251;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1356735495;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1357119239;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1364391982;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1368482696;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1385412762;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1405696891;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1414619028;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1441205709;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1467730834;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1467749899;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1495868221;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1496837955;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1498780456;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1499453049;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1500448076;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1519295386;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1530174524;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1532091916;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> protected boolean isReconnectOnException();1544613334;Return whether the single Connection should be renewed when_a JMSException is reported by the underlying Connection.;protected boolean isReconnectOnException() {_		return this.reconnectOnException__	};return,whether,the,single,connection,should,be,renewed,when,a,jmsexception,is,reported,by,the,underlying,connection;protected,boolean,is,reconnect,on,exception,return,this,reconnect,on,exception
SingleConnectionFactory -> public void setExceptionListener(ExceptionListener exceptionListener);1328020251;Specify an JMS ExceptionListener implementation that should be_registered with with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(ExceptionListener exceptionListener);1356735495;Specify an JMS ExceptionListener implementation that should be_registered with with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(ExceptionListener exceptionListener);1357119239;Specify an JMS ExceptionListener implementation that should be_registered with with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(ExceptionListener exceptionListener);1364391982;Specify an JMS ExceptionListener implementation that should be_registered with with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(ExceptionListener exceptionListener);1368482696;Specify an JMS ExceptionListener implementation that should be_registered with with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(ExceptionListener exceptionListener);1385412762;Specify an JMS ExceptionListener implementation that should be_registered with with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(ExceptionListener exceptionListener);1405696891;Specify an JMS ExceptionListener implementation that should be_registered with with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(ExceptionListener exceptionListener);1414619028;Specify an JMS ExceptionListener implementation that should be_registered with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(ExceptionListener exceptionListener);1441205709;Specify an JMS ExceptionListener implementation that should be_registered with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(ExceptionListener exceptionListener);1467730834;Specify an JMS ExceptionListener implementation that should be_registered with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(ExceptionListener exceptionListener);1467749899;Specify an JMS ExceptionListener implementation that should be_registered with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(ExceptionListener exceptionListener);1495868221;Specify an JMS ExceptionListener implementation that should be_registered with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(ExceptionListener exceptionListener);1496837955;Specify an JMS ExceptionListener implementation that should be_registered with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(ExceptionListener exceptionListener);1498780456;Specify an JMS ExceptionListener implementation that should be_registered with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> public void setExceptionListener(ExceptionListener exceptionListener);1499453049;Specify an JMS ExceptionListener implementation that should be_registered with the single Connection created by this factory._@see #setReconnectOnException;public void setExceptionListener(ExceptionListener exceptionListener) {_		this.exceptionListener = exceptionListener__	};specify,an,jms,exception,listener,implementation,that,should,be,registered,with,the,single,connection,created,by,this,factory,see,set,reconnect,on,exception;public,void,set,exception,listener,exception,listener,exception,listener,this,exception,listener,exception,listener
SingleConnectionFactory -> @Nullable 	public ConnectionFactory getTargetConnectionFactory();1500448076;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;@Nullable_	public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;nullable,public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> @Nullable 	public ConnectionFactory getTargetConnectionFactory();1519295386;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;@Nullable_	public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;nullable,public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> @Nullable 	public ConnectionFactory getTargetConnectionFactory();1530174524;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;@Nullable_	public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;nullable,public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> @Nullable 	public ConnectionFactory getTargetConnectionFactory();1532091916;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;@Nullable_	public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;nullable,public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> @Nullable 	public ConnectionFactory getTargetConnectionFactory();1544613334;Return the target ConnectionFactory which will be used to lazily_create a single Connection, if any.;@Nullable_	public ConnectionFactory getTargetConnectionFactory() {_		return this.targetConnectionFactory__	};return,the,target,connection,factory,which,will,be,used,to,lazily,create,a,single,connection,if,any;nullable,public,connection,factory,get,target,connection,factory,return,this,target,connection,factory
SingleConnectionFactory -> protected String getClientId();1328020251;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> protected String getClientId();1356735495;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> protected String getClientId();1357119239;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> protected String getClientId();1364391982;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> protected String getClientId();1368482696;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> protected String getClientId();1385412762;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> protected String getClientId();1405696891;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> protected String getClientId();1414619028;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> protected String getClientId();1441205709;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> protected String getClientId();1467730834;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> protected String getClientId();1467749899;Return a JMS client ID for the single Connection created and exposed_by this ConnectionFactory, if any.;protected String getClientId() {_		return this.clientId__	};return,a,jms,client,id,for,the,single,connection,created,and,exposed,by,this,connection,factory,if,any;protected,string,get,client,id,return,this,client,id
SingleConnectionFactory -> public void onException(JMSException ex);1328020251;Exception listener callback that renews the underlying single Connection.;public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection;public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> public void onException(JMSException ex);1357119239;Exception listener callback that renews the underlying single Connection.;public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection;public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> public void onException(JMSException ex);1364391982;Exception listener callback that renews the underlying single Connection.;public void onException(JMSException ex) {_		logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex)__		resetConnection()__	};exception,listener,callback,that,renews,the,underlying,single,connection;public,void,on,exception,jmsexception,ex,logger,warn,encountered,a,jmsexception,resetting,the,underlying,jms,connection,ex,reset,connection
SingleConnectionFactory -> protected void closeConnection(Connection con);1328020251;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + this.target)__		}_		try {_			try {_				if (this.started) {_					this.started = false__					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,this,target,try,try,if,this,started,this,started,false,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1356735495;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + this.target)__		}_		try {_			try {_				if (this.started) {_					this.started = false__					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,this,target,try,try,if,this,started,this,started,false,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1357119239;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + this.target)__		}_		try {_			try {_				if (this.started) {_					this.started = false__					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,this,target,try,try,if,this,started,this,started,false,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1364391982;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + this.target)__		}_		try {_			try {_				if (this.started) {_					this.started = false__					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,this,target,try,try,if,this,started,this,started,false,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1368482696;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + this.target)__		}_		try {_			try {_				if (this.started) {_					this.started = false__					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,this,target,try,try,if,this,started,this,started,false,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1385412762;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + this.target)__		}_		try {_			try {_				if (this.started) {_					this.started = false__					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,this,target,try,try,if,this,started,this,started,false,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1405696891;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + this.target)__		}_		try {_			try {_				if (this.started) {_					this.started = false__					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,this,target,try,try,if,this,started,this,started,false,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1414619028;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + con)__		}_		try {_			try {_				if (this.startedCount > 0) {_					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,con,try,try,if,this,started,count,0,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1441205709;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + con)__		}_		try {_			try {_				if (this.startedCount > 0) {_					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,con,try,try,if,this,started,count,0,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1467730834;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + con)__		}_		try {_			try {_				if (this.startedCount > 0) {_					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,con,try,try,if,this,started,count,0,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1467749899;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + con)__		}_		try {_			try {_				if (this.startedCount > 0) {_					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,con,try,try,if,this,started,count,0,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1495868221;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + con)__		}_		try {_			try {_				if (this.startedCount > 0) {_					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,con,try,try,if,this,started,count,0,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1496837955;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + con)__		}_		try {_			try {_				if (this.startedCount > 0) {_					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,con,try,try,if,this,started,count,0,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1498780456;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + con)__		}_		try {_			try {_				if (this.startedCount > 0) {_					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,con,try,try,if,this,started,count,0,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1499453049;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + con)__		}_		try {_			try {_				if (this.startedCount > 0) {_					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,con,try,try,if,this,started,count,0,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1500448076;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + con)__		}_		try {_			try {_				if (this.startedCount > 0) {_					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,con,try,try,if,this,started,count,0,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1519295386;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + con)__		}_		try {_			try {_				if (this.startedCount > 0) {_					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,con,try,try,if,this,started,count,0,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1530174524;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + con)__		}_		try {_			try {_				if (this.startedCount > 0) {_					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,con,try,try,if,this,started,count,0,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1532091916;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + con)__		}_		try {_			try {_				if (this.startedCount > 0) {_					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,con,try,try,if,this,started,count,0,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected void closeConnection(Connection con);1544613334;Close the given Connection._@param con the Connection to close;protected void closeConnection(Connection con) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing shared JMS Connection: " + con)__		}_		try {_			try {_				if (this.startedCount > 0) {_					con.stop()__				}_			}_			finally {_				con.close()__			}_		}_		catch (javax.jms.IllegalStateException ex) {_			logger.debug("Ignoring Connection state exception - assuming already closed: " + ex)__		}_		catch (Throwable ex) {_			logger.debug("Could not close shared JMS Connection", ex)__		}_	};close,the,given,connection,param,con,the,connection,to,close;protected,void,close,connection,connection,con,if,logger,is,debug,enabled,logger,debug,closing,shared,jms,connection,con,try,try,if,this,started,count,0,con,stop,finally,con,close,catch,javax,jms,illegal,state,exception,ex,logger,debug,ignoring,connection,state,exception,assuming,already,closed,ex,catch,throwable,ex,logger,debug,could,not,close,shared,jms,connection,ex
SingleConnectionFactory -> protected Connection getConnection() throws JMSException;1414619028;Obtain an initialized shared Connection._@return the Connection (never {@code null})_@throws javax.jms.JMSException if thrown by JMS API methods_@see #initConnection();protected Connection getConnection() throws JMSException {_		synchronized (this.connectionMonitor) {_			if (this.connection == null) {_				initConnection()__			}_			return this.connection__		}_	};obtain,an,initialized,shared,connection,return,the,connection,never,code,null,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,init,connection;protected,connection,get,connection,throws,jmsexception,synchronized,this,connection,monitor,if,this,connection,null,init,connection,return,this,connection
SingleConnectionFactory -> protected Connection getConnection() throws JMSException;1441205709;Obtain an initialized shared Connection._@return the Connection (never {@code null})_@throws javax.jms.JMSException if thrown by JMS API methods_@see #initConnection();protected Connection getConnection() throws JMSException {_		synchronized (this.connectionMonitor) {_			if (this.connection == null) {_				initConnection()__			}_			return this.connection__		}_	};obtain,an,initialized,shared,connection,return,the,connection,never,code,null,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,init,connection;protected,connection,get,connection,throws,jmsexception,synchronized,this,connection,monitor,if,this,connection,null,init,connection,return,this,connection
SingleConnectionFactory -> protected Connection getConnection() throws JMSException;1467730834;Obtain an initialized shared Connection._@return the Connection (never {@code null})_@throws javax.jms.JMSException if thrown by JMS API methods_@see #initConnection();protected Connection getConnection() throws JMSException {_		synchronized (this.connectionMonitor) {_			if (this.connection == null) {_				initConnection()__			}_			return this.connection__		}_	};obtain,an,initialized,shared,connection,return,the,connection,never,code,null,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,init,connection;protected,connection,get,connection,throws,jmsexception,synchronized,this,connection,monitor,if,this,connection,null,init,connection,return,this,connection
SingleConnectionFactory -> protected Connection getConnection() throws JMSException;1467749899;Obtain an initialized shared Connection._@return the Connection (never {@code null})_@throws javax.jms.JMSException if thrown by JMS API methods_@see #initConnection();protected Connection getConnection() throws JMSException {_		synchronized (this.connectionMonitor) {_			if (this.connection == null) {_				initConnection()__			}_			return this.connection__		}_	};obtain,an,initialized,shared,connection,return,the,connection,never,code,null,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,init,connection;protected,connection,get,connection,throws,jmsexception,synchronized,this,connection,monitor,if,this,connection,null,init,connection,return,this,connection
SingleConnectionFactory -> protected Connection getConnection() throws JMSException;1495868221;Obtain an initialized shared Connection._@return the Connection (never {@code null})_@throws javax.jms.JMSException if thrown by JMS API methods_@see #initConnection();protected Connection getConnection() throws JMSException {_		synchronized (this.connectionMonitor) {_			if (this.connection == null) {_				initConnection()__			}_			return this.connection__		}_	};obtain,an,initialized,shared,connection,return,the,connection,never,code,null,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,init,connection;protected,connection,get,connection,throws,jmsexception,synchronized,this,connection,monitor,if,this,connection,null,init,connection,return,this,connection
SingleConnectionFactory -> protected Connection getConnection() throws JMSException;1496837955;Obtain an initialized shared Connection._@return the Connection (never {@code null})_@throws javax.jms.JMSException if thrown by JMS API methods_@see #initConnection();protected Connection getConnection() throws JMSException {_		synchronized (this.connectionMonitor) {_			if (this.connection == null) {_				initConnection()__			}_			return this.connection__		}_	};obtain,an,initialized,shared,connection,return,the,connection,never,code,null,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,init,connection;protected,connection,get,connection,throws,jmsexception,synchronized,this,connection,monitor,if,this,connection,null,init,connection,return,this,connection
SingleConnectionFactory -> protected Connection getConnection() throws JMSException;1498780456;Obtain an initialized shared Connection._@return the Connection (never {@code null})_@throws javax.jms.JMSException if thrown by JMS API methods_@see #initConnection();protected Connection getConnection() throws JMSException {_		synchronized (this.connectionMonitor) {_			if (this.connection == null) {_				initConnection()__			}_			return this.connection__		}_	};obtain,an,initialized,shared,connection,return,the,connection,never,code,null,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,init,connection;protected,connection,get,connection,throws,jmsexception,synchronized,this,connection,monitor,if,this,connection,null,init,connection,return,this,connection
SingleConnectionFactory -> protected Connection getConnection() throws JMSException;1499453049;Obtain an initialized shared Connection._@return the Connection (never {@code null})_@throws javax.jms.JMSException if thrown by JMS API methods_@see #initConnection();protected Connection getConnection() throws JMSException {_		synchronized (this.connectionMonitor) {_			if (this.connection == null) {_				initConnection()__			}_			return this.connection__		}_	};obtain,an,initialized,shared,connection,return,the,connection,never,code,null,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,init,connection;protected,connection,get,connection,throws,jmsexception,synchronized,this,connection,monitor,if,this,connection,null,init,connection,return,this,connection
SingleConnectionFactory -> protected Connection getConnection() throws JMSException;1500448076;Obtain an initialized shared Connection._@return the Connection (never {@code null})_@throws javax.jms.JMSException if thrown by JMS API methods_@see #initConnection();protected Connection getConnection() throws JMSException {_		synchronized (this.connectionMonitor) {_			if (this.connection == null) {_				initConnection()__			}_			return this.connection__		}_	};obtain,an,initialized,shared,connection,return,the,connection,never,code,null,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,init,connection;protected,connection,get,connection,throws,jmsexception,synchronized,this,connection,monitor,if,this,connection,null,init,connection,return,this,connection
SingleConnectionFactory -> protected Connection getConnection() throws JMSException;1519295386;Obtain an initialized shared Connection._@return the Connection (never {@code null})_@throws javax.jms.JMSException if thrown by JMS API methods_@see #initConnection();protected Connection getConnection() throws JMSException {_		synchronized (this.connectionMonitor) {_			if (this.connection == null) {_				initConnection()__			}_			return this.connection__		}_	};obtain,an,initialized,shared,connection,return,the,connection,never,code,null,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,init,connection;protected,connection,get,connection,throws,jmsexception,synchronized,this,connection,monitor,if,this,connection,null,init,connection,return,this,connection
SingleConnectionFactory -> protected Connection getConnection() throws JMSException;1530174524;Obtain an initialized shared Connection._@return the Connection (never {@code null})_@throws javax.jms.JMSException if thrown by JMS API methods_@see #initConnection();protected Connection getConnection() throws JMSException {_		synchronized (this.connectionMonitor) {_			if (this.connection == null) {_				initConnection()__			}_			return this.connection__		}_	};obtain,an,initialized,shared,connection,return,the,connection,never,code,null,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,init,connection;protected,connection,get,connection,throws,jmsexception,synchronized,this,connection,monitor,if,this,connection,null,init,connection,return,this,connection
SingleConnectionFactory -> protected Connection getConnection() throws JMSException;1532091916;Obtain an initialized shared Connection._@return the Connection (never {@code null})_@throws javax.jms.JMSException if thrown by JMS API methods_@see #initConnection();protected Connection getConnection() throws JMSException {_		synchronized (this.connectionMonitor) {_			if (this.connection == null) {_				initConnection()__			}_			return this.connection__		}_	};obtain,an,initialized,shared,connection,return,the,connection,never,code,null,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,init,connection;protected,connection,get,connection,throws,jmsexception,synchronized,this,connection,monitor,if,this,connection,null,init,connection,return,this,connection
SingleConnectionFactory -> protected Connection getConnection() throws JMSException;1544613334;Obtain an initialized shared Connection._@return the Connection (never {@code null})_@throws javax.jms.JMSException if thrown by JMS API methods_@see #initConnection();protected Connection getConnection() throws JMSException {_		synchronized (this.connectionMonitor) {_			if (this.connection == null) {_				initConnection()__			}_			return this.connection__		}_	};obtain,an,initialized,shared,connection,return,the,connection,never,code,null,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods,see,init,connection;protected,connection,get,connection,throws,jmsexception,synchronized,this,connection,monitor,if,this,connection,null,init,connection,return,this,connection
SingleConnectionFactory -> public SingleConnectionFactory(Connection targetConnection);1414619028;Create a new SingleConnectionFactory that always returns the given Connection._@param targetConnection the single Connection;public SingleConnectionFactory(Connection targetConnection) {_		Assert.notNull(targetConnection, "Target Connection must not be null")__		this.connection = targetConnection__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,connection,the,single,connection;public,single,connection,factory,connection,target,connection,assert,not,null,target,connection,target,connection,must,not,be,null,this,connection,target,connection
SingleConnectionFactory -> public SingleConnectionFactory(Connection targetConnection);1441205709;Create a new SingleConnectionFactory that always returns the given Connection._@param targetConnection the single Connection;public SingleConnectionFactory(Connection targetConnection) {_		Assert.notNull(targetConnection, "Target Connection must not be null")__		this.connection = targetConnection__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,connection,the,single,connection;public,single,connection,factory,connection,target,connection,assert,not,null,target,connection,target,connection,must,not,be,null,this,connection,target,connection
SingleConnectionFactory -> public SingleConnectionFactory(Connection targetConnection);1467730834;Create a new SingleConnectionFactory that always returns the given Connection._@param targetConnection the single Connection;public SingleConnectionFactory(Connection targetConnection) {_		Assert.notNull(targetConnection, "Target Connection must not be null")__		this.connection = targetConnection__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,connection,the,single,connection;public,single,connection,factory,connection,target,connection,assert,not,null,target,connection,target,connection,must,not,be,null,this,connection,target,connection
SingleConnectionFactory -> public SingleConnectionFactory(Connection targetConnection);1467749899;Create a new SingleConnectionFactory that always returns the given Connection._@param targetConnection the single Connection;public SingleConnectionFactory(Connection targetConnection) {_		Assert.notNull(targetConnection, "Target Connection must not be null")__		this.connection = targetConnection__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,connection,the,single,connection;public,single,connection,factory,connection,target,connection,assert,not,null,target,connection,target,connection,must,not,be,null,this,connection,target,connection
SingleConnectionFactory -> public SingleConnectionFactory(Connection targetConnection);1495868221;Create a new SingleConnectionFactory that always returns the given Connection._@param targetConnection the single Connection;public SingleConnectionFactory(Connection targetConnection) {_		Assert.notNull(targetConnection, "Target Connection must not be null")__		this.connection = targetConnection__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,connection,the,single,connection;public,single,connection,factory,connection,target,connection,assert,not,null,target,connection,target,connection,must,not,be,null,this,connection,target,connection
SingleConnectionFactory -> public SingleConnectionFactory(Connection targetConnection);1496837955;Create a new SingleConnectionFactory that always returns the given Connection._@param targetConnection the single Connection;public SingleConnectionFactory(Connection targetConnection) {_		Assert.notNull(targetConnection, "Target Connection must not be null")__		this.connection = targetConnection__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,connection,the,single,connection;public,single,connection,factory,connection,target,connection,assert,not,null,target,connection,target,connection,must,not,be,null,this,connection,target,connection
SingleConnectionFactory -> public SingleConnectionFactory(Connection targetConnection);1498780456;Create a new SingleConnectionFactory that always returns the given Connection._@param targetConnection the single Connection;public SingleConnectionFactory(Connection targetConnection) {_		Assert.notNull(targetConnection, "Target Connection must not be null")__		this.connection = targetConnection__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,connection,the,single,connection;public,single,connection,factory,connection,target,connection,assert,not,null,target,connection,target,connection,must,not,be,null,this,connection,target,connection
SingleConnectionFactory -> public SingleConnectionFactory(Connection targetConnection);1499453049;Create a new SingleConnectionFactory that always returns the given Connection._@param targetConnection the single Connection;public SingleConnectionFactory(Connection targetConnection) {_		Assert.notNull(targetConnection, "Target Connection must not be null")__		this.connection = targetConnection__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,connection,the,single,connection;public,single,connection,factory,connection,target,connection,assert,not,null,target,connection,target,connection,must,not,be,null,this,connection,target,connection
SingleConnectionFactory -> public SingleConnectionFactory(Connection targetConnection);1500448076;Create a new SingleConnectionFactory that always returns the given Connection._@param targetConnection the single Connection;public SingleConnectionFactory(Connection targetConnection) {_		Assert.notNull(targetConnection, "Target Connection must not be null")__		this.connection = targetConnection__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,connection,the,single,connection;public,single,connection,factory,connection,target,connection,assert,not,null,target,connection,target,connection,must,not,be,null,this,connection,target,connection
SingleConnectionFactory -> public SingleConnectionFactory(Connection targetConnection);1519295386;Create a new SingleConnectionFactory that always returns the given Connection._@param targetConnection the single Connection;public SingleConnectionFactory(Connection targetConnection) {_		Assert.notNull(targetConnection, "Target Connection must not be null")__		this.connection = targetConnection__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,connection,the,single,connection;public,single,connection,factory,connection,target,connection,assert,not,null,target,connection,target,connection,must,not,be,null,this,connection,target,connection
SingleConnectionFactory -> public SingleConnectionFactory(Connection targetConnection);1530174524;Create a new SingleConnectionFactory that always returns the given Connection._@param targetConnection the single Connection;public SingleConnectionFactory(Connection targetConnection) {_		Assert.notNull(targetConnection, "Target Connection must not be null")__		this.connection = targetConnection__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,connection,the,single,connection;public,single,connection,factory,connection,target,connection,assert,not,null,target,connection,target,connection,must,not,be,null,this,connection,target,connection
SingleConnectionFactory -> public SingleConnectionFactory(Connection targetConnection);1532091916;Create a new SingleConnectionFactory that always returns the given Connection._@param targetConnection the single Connection;public SingleConnectionFactory(Connection targetConnection) {_		Assert.notNull(targetConnection, "Target Connection must not be null")__		this.connection = targetConnection__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,connection,the,single,connection;public,single,connection,factory,connection,target,connection,assert,not,null,target,connection,target,connection,must,not,be,null,this,connection,target,connection
SingleConnectionFactory -> public SingleConnectionFactory(Connection targetConnection);1544613334;Create a new SingleConnectionFactory that always returns the given Connection._@param targetConnection the single Connection;public SingleConnectionFactory(Connection targetConnection) {_		Assert.notNull(targetConnection, "Target Connection must not be null")__		this.connection = targetConnection__	};create,a,new,single,connection,factory,that,always,returns,the,given,connection,param,target,connection,the,single,connection;public,single,connection,factory,connection,target,connection,assert,not,null,target,connection,target,connection,must,not,be,null,this,connection,target,connection
SingleConnectionFactory -> public void afterPropertiesSet();1328020251;Make sure a Connection or ConnectionFactory has been set.;public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> public void afterPropertiesSet();1357119239;Make sure a Connection or ConnectionFactory has been set.;public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
SingleConnectionFactory -> public void afterPropertiesSet();1364391982;Make sure a Connection or ConnectionFactory has been set.;public void afterPropertiesSet() {_		if (this.connection == null && getTargetConnectionFactory() == null) {_			throw new IllegalArgumentException("Connection or 'targetConnectionFactory' is required")__		}_	};make,sure,a,connection,or,connection,factory,has,been,set;public,void,after,properties,set,if,this,connection,null,get,target,connection,factory,null,throw,new,illegal,argument,exception,connection,or,target,connection,factory,is,required
