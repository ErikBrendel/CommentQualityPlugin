# id;timestamp;commentText;codeText;commentWords;codeWords
JmsDestinationAccessor -> public boolean isPubSubDomain();1328020251;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used._Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues}) is used.;public boolean isPubSubDomain() {_		return this.pubSubDomain__	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used;public,boolean,is,pub,sub,domain,return,this,pub,sub,domain
JmsDestinationAccessor -> public boolean isPubSubDomain();1356735495;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used._Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues}) is used.;public boolean isPubSubDomain() {_		return this.pubSubDomain__	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used;public,boolean,is,pub,sub,domain,return,this,pub,sub,domain
JmsDestinationAccessor -> public boolean isPubSubDomain();1405696891;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used._Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues}) is used.;public boolean isPubSubDomain() {_		return this.pubSubDomain__	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used;public,boolean,is,pub,sub,domain,return,this,pub,sub,domain
JmsDestinationAccessor -> public boolean isPubSubDomain();1461683397;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used._Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues}) is used.;public boolean isPubSubDomain() {_		return this.pubSubDomain__	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used;public,boolean,is,pub,sub,domain,return,this,pub,sub,domain
JmsDestinationAccessor -> public boolean isPubSubDomain();1495868221;Return whether the Publish/Subscribe domain ({@link javax.jms.Topic Topics}) is used._Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues}) is used.;public boolean isPubSubDomain() {_		return this.pubSubDomain__	};return,whether,the,publish,subscribe,domain,link,javax,jms,topic,topics,is,used,otherwise,the,point,to,point,domain,link,javax,jms,queue,queues,is,used;public,boolean,is,pub,sub,domain,return,this,pub,sub,domain
JmsDestinationAccessor -> public DestinationResolver getDestinationResolver();1328020251;Return the DestinationResolver for this accessor (never <code>null</code>).;public DestinationResolver getDestinationResolver() {_		return this.destinationResolver__	};return,the,destination,resolver,for,this,accessor,never,code,null,code;public,destination,resolver,get,destination,resolver,return,this,destination,resolver
JmsDestinationAccessor -> public DestinationResolver getDestinationResolver();1356735495;Return the DestinationResolver for this accessor (never {@code null}).;public DestinationResolver getDestinationResolver() {_		return this.destinationResolver__	};return,the,destination,resolver,for,this,accessor,never,code,null;public,destination,resolver,get,destination,resolver,return,this,destination,resolver
JmsDestinationAccessor -> public DestinationResolver getDestinationResolver();1405696891;Return the DestinationResolver for this accessor (never {@code null}).;public DestinationResolver getDestinationResolver() {_		return this.destinationResolver__	};return,the,destination,resolver,for,this,accessor,never,code,null;public,destination,resolver,get,destination,resolver,return,this,destination,resolver
JmsDestinationAccessor -> public DestinationResolver getDestinationResolver();1461683397;Return the DestinationResolver for this accessor (never {@code null}).;public DestinationResolver getDestinationResolver() {_		return this.destinationResolver__	};return,the,destination,resolver,for,this,accessor,never,code,null;public,destination,resolver,get,destination,resolver,return,this,destination,resolver
JmsDestinationAccessor -> public DestinationResolver getDestinationResolver();1495868221;Return the DestinationResolver for this accessor (never {@code null}).;public DestinationResolver getDestinationResolver() {_		return this.destinationResolver__	};return,the,destination,resolver,for,this,accessor,never,code,null;public,destination,resolver,get,destination,resolver,return,this,destination,resolver
JmsDestinationAccessor -> public void setPubSubDomain(boolean pubSubDomain);1328020251;Configure the destination accessor with knowledge of the JMS domain used._Default is Point-to-Point (Queues)._<p>For JMS 1.0.2 based accessors, this tells the JMS provider which class hierarchy_to use in the implementation of its operations. For JMS 1.1 based accessors, this_setting does usually not affect operations. However, for both JMS versions, this_setting tells what type of destination to resolve if dynamic destinations are enabled._@param pubSubDomain "true" for the Publish/Subscribe domain ({@link javax.jms.Topic Topics}),_"false" for the Point-to-Point domain ({@link javax.jms.Queue Queues})_@see #setDestinationResolver;public void setPubSubDomain(boolean pubSubDomain) {_		this.pubSubDomain = pubSubDomain__	};configure,the,destination,accessor,with,knowledge,of,the,jms,domain,used,default,is,point,to,point,queues,p,for,jms,1,0,2,based,accessors,this,tells,the,jms,provider,which,class,hierarchy,to,use,in,the,implementation,of,its,operations,for,jms,1,1,based,accessors,this,setting,does,usually,not,affect,operations,however,for,both,jms,versions,this,setting,tells,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,pub,sub,domain,true,for,the,publish,subscribe,domain,link,javax,jms,topic,topics,false,for,the,point,to,point,domain,link,javax,jms,queue,queues,see,set,destination,resolver;public,void,set,pub,sub,domain,boolean,pub,sub,domain,this,pub,sub,domain,pub,sub,domain
JmsDestinationAccessor -> public void setPubSubDomain(boolean pubSubDomain);1356735495;Configure the destination accessor with knowledge of the JMS domain used._Default is Point-to-Point (Queues)._<p>For JMS 1.0.2 based accessors, this tells the JMS provider which class hierarchy_to use in the implementation of its operations. For JMS 1.1 based accessors, this_setting does usually not affect operations. However, for both JMS versions, this_setting tells what type of destination to resolve if dynamic destinations are enabled._@param pubSubDomain "true" for the Publish/Subscribe domain ({@link javax.jms.Topic Topics}),_"false" for the Point-to-Point domain ({@link javax.jms.Queue Queues})_@see #setDestinationResolver;public void setPubSubDomain(boolean pubSubDomain) {_		this.pubSubDomain = pubSubDomain__	};configure,the,destination,accessor,with,knowledge,of,the,jms,domain,used,default,is,point,to,point,queues,p,for,jms,1,0,2,based,accessors,this,tells,the,jms,provider,which,class,hierarchy,to,use,in,the,implementation,of,its,operations,for,jms,1,1,based,accessors,this,setting,does,usually,not,affect,operations,however,for,both,jms,versions,this,setting,tells,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,pub,sub,domain,true,for,the,publish,subscribe,domain,link,javax,jms,topic,topics,false,for,the,point,to,point,domain,link,javax,jms,queue,queues,see,set,destination,resolver;public,void,set,pub,sub,domain,boolean,pub,sub,domain,this,pub,sub,domain,pub,sub,domain
JmsDestinationAccessor -> public void setPubSubDomain(boolean pubSubDomain);1405696891;Configure the destination accessor with knowledge of the JMS domain used._Default is Point-to-Point (Queues)._<p>This setting primarily indicates what type of destination to resolve_if dynamic destinations are enabled._@param pubSubDomain "true" for the Publish/Subscribe domain ({@link javax.jms.Topic Topics}),_"false" for the Point-to-Point domain ({@link javax.jms.Queue Queues})_@see #setDestinationResolver;public void setPubSubDomain(boolean pubSubDomain) {_		this.pubSubDomain = pubSubDomain__	};configure,the,destination,accessor,with,knowledge,of,the,jms,domain,used,default,is,point,to,point,queues,p,this,setting,primarily,indicates,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,pub,sub,domain,true,for,the,publish,subscribe,domain,link,javax,jms,topic,topics,false,for,the,point,to,point,domain,link,javax,jms,queue,queues,see,set,destination,resolver;public,void,set,pub,sub,domain,boolean,pub,sub,domain,this,pub,sub,domain,pub,sub,domain
JmsDestinationAccessor -> public void setPubSubDomain(boolean pubSubDomain);1461683397;Configure the destination accessor with knowledge of the JMS domain used._Default is Point-to-Point (Queues)._<p>This setting primarily indicates what type of destination to resolve_if dynamic destinations are enabled._@param pubSubDomain "true" for the Publish/Subscribe domain ({@link javax.jms.Topic Topics}),_"false" for the Point-to-Point domain ({@link javax.jms.Queue Queues})_@see #setDestinationResolver;public void setPubSubDomain(boolean pubSubDomain) {_		this.pubSubDomain = pubSubDomain__	};configure,the,destination,accessor,with,knowledge,of,the,jms,domain,used,default,is,point,to,point,queues,p,this,setting,primarily,indicates,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,pub,sub,domain,true,for,the,publish,subscribe,domain,link,javax,jms,topic,topics,false,for,the,point,to,point,domain,link,javax,jms,queue,queues,see,set,destination,resolver;public,void,set,pub,sub,domain,boolean,pub,sub,domain,this,pub,sub,domain,pub,sub,domain
JmsDestinationAccessor -> public void setPubSubDomain(boolean pubSubDomain);1495868221;Configure the destination accessor with knowledge of the JMS domain used._Default is Point-to-Point (Queues)._<p>This setting primarily indicates what type of destination to resolve_if dynamic destinations are enabled._@param pubSubDomain "true" for the Publish/Subscribe domain ({@link javax.jms.Topic Topics}),_"false" for the Point-to-Point domain ({@link javax.jms.Queue Queues})_@see #setDestinationResolver;public void setPubSubDomain(boolean pubSubDomain) {_		this.pubSubDomain = pubSubDomain__	};configure,the,destination,accessor,with,knowledge,of,the,jms,domain,used,default,is,point,to,point,queues,p,this,setting,primarily,indicates,what,type,of,destination,to,resolve,if,dynamic,destinations,are,enabled,param,pub,sub,domain,true,for,the,publish,subscribe,domain,link,javax,jms,topic,topics,false,for,the,point,to,point,domain,link,javax,jms,queue,queues,see,set,destination,resolver;public,void,set,pub,sub,domain,boolean,pub,sub,domain,this,pub,sub,domain,pub,sub,domain
JmsDestinationAccessor -> public void setDestinationResolver(DestinationResolver destinationResolver);1328020251;Set the {@link DestinationResolver} that is to be used to resolve_{@link javax.jms.Destination} references for this accessor._<p>The default resolver is a DynamicDestinationResolver. Specify a_JndiDestinationResolver for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		Assert.notNull(destinationResolver, "'destinationResolver' must not be null")__		this.destinationResolver = destinationResolver__	};set,the,link,destination,resolver,that,is,to,be,used,to,resolve,link,javax,jms,destination,references,for,this,accessor,p,the,default,resolver,is,a,dynamic,destination,resolver,specify,a,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,assert,not,null,destination,resolver,destination,resolver,must,not,be,null,this,destination,resolver,destination,resolver
JmsDestinationAccessor -> public void setDestinationResolver(DestinationResolver destinationResolver);1356735495;Set the {@link DestinationResolver} that is to be used to resolve_{@link javax.jms.Destination} references for this accessor._<p>The default resolver is a DynamicDestinationResolver. Specify a_JndiDestinationResolver for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		Assert.notNull(destinationResolver, "'destinationResolver' must not be null")__		this.destinationResolver = destinationResolver__	};set,the,link,destination,resolver,that,is,to,be,used,to,resolve,link,javax,jms,destination,references,for,this,accessor,p,the,default,resolver,is,a,dynamic,destination,resolver,specify,a,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,assert,not,null,destination,resolver,destination,resolver,must,not,be,null,this,destination,resolver,destination,resolver
JmsDestinationAccessor -> public void setDestinationResolver(DestinationResolver destinationResolver);1405696891;Set the {@link DestinationResolver} that is to be used to resolve_{@link javax.jms.Destination} references for this accessor._<p>The default resolver is a DynamicDestinationResolver. Specify a_JndiDestinationResolver for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		Assert.notNull(destinationResolver, "'destinationResolver' must not be null")__		this.destinationResolver = destinationResolver__	};set,the,link,destination,resolver,that,is,to,be,used,to,resolve,link,javax,jms,destination,references,for,this,accessor,p,the,default,resolver,is,a,dynamic,destination,resolver,specify,a,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,assert,not,null,destination,resolver,destination,resolver,must,not,be,null,this,destination,resolver,destination,resolver
JmsDestinationAccessor -> public void setDestinationResolver(DestinationResolver destinationResolver);1461683397;Set the {@link DestinationResolver} that is to be used to resolve_{@link javax.jms.Destination} references for this accessor._<p>The default resolver is a DynamicDestinationResolver. Specify a_JndiDestinationResolver for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		Assert.notNull(destinationResolver, "'destinationResolver' must not be null")__		this.destinationResolver = destinationResolver__	};set,the,link,destination,resolver,that,is,to,be,used,to,resolve,link,javax,jms,destination,references,for,this,accessor,p,the,default,resolver,is,a,dynamic,destination,resolver,specify,a,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,assert,not,null,destination,resolver,destination,resolver,must,not,be,null,this,destination,resolver,destination,resolver
JmsDestinationAccessor -> public void setDestinationResolver(DestinationResolver destinationResolver);1495868221;Set the {@link DestinationResolver} that is to be used to resolve_{@link javax.jms.Destination} references for this accessor._<p>The default resolver is a DynamicDestinationResolver. Specify a_JndiDestinationResolver for resolving destination names as JNDI locations._@see org.springframework.jms.support.destination.DynamicDestinationResolver_@see org.springframework.jms.support.destination.JndiDestinationResolver;public void setDestinationResolver(DestinationResolver destinationResolver) {_		Assert.notNull(destinationResolver, "'destinationResolver' must not be null")__		this.destinationResolver = destinationResolver__	};set,the,link,destination,resolver,that,is,to,be,used,to,resolve,link,javax,jms,destination,references,for,this,accessor,p,the,default,resolver,is,a,dynamic,destination,resolver,specify,a,jndi,destination,resolver,for,resolving,destination,names,as,jndi,locations,see,org,springframework,jms,support,destination,dynamic,destination,resolver,see,org,springframework,jms,support,destination,jndi,destination,resolver;public,void,set,destination,resolver,destination,resolver,destination,resolver,assert,not,null,destination,resolver,destination,resolver,must,not,be,null,this,destination,resolver,destination,resolver
JmsDestinationAccessor -> protected Destination resolveDestinationName(Session session, String destinationName) throws JMSException;1328020251;Resolve the given destination name into a JMS {@link Destination},_via this accessor's {@link DestinationResolver}._@param session the current JMS {@link Session}_@param destinationName the name of the destination_@return the located {@link Destination}_@throws javax.jms.JMSException if resolution failed_@see #setDestinationResolver;protected Destination resolveDestinationName(Session session, String destinationName) throws JMSException {_		return getDestinationResolver().resolveDestinationName(session, destinationName, isPubSubDomain())__	};resolve,the,given,destination,name,into,a,jms,link,destination,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,link,session,param,destination,name,the,name,of,the,destination,return,the,located,link,destination,throws,javax,jms,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,destination,resolve,destination,name,session,session,string,destination,name,throws,jmsexception,return,get,destination,resolver,resolve,destination,name,session,destination,name,is,pub,sub,domain
JmsDestinationAccessor -> protected Destination resolveDestinationName(Session session, String destinationName) throws JMSException;1356735495;Resolve the given destination name into a JMS {@link Destination},_via this accessor's {@link DestinationResolver}._@param session the current JMS {@link Session}_@param destinationName the name of the destination_@return the located {@link Destination}_@throws javax.jms.JMSException if resolution failed_@see #setDestinationResolver;protected Destination resolveDestinationName(Session session, String destinationName) throws JMSException {_		return getDestinationResolver().resolveDestinationName(session, destinationName, isPubSubDomain())__	};resolve,the,given,destination,name,into,a,jms,link,destination,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,link,session,param,destination,name,the,name,of,the,destination,return,the,located,link,destination,throws,javax,jms,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,destination,resolve,destination,name,session,session,string,destination,name,throws,jmsexception,return,get,destination,resolver,resolve,destination,name,session,destination,name,is,pub,sub,domain
JmsDestinationAccessor -> protected Destination resolveDestinationName(Session session, String destinationName) throws JMSException;1405696891;Resolve the given destination name into a JMS {@link Destination},_via this accessor's {@link DestinationResolver}._@param session the current JMS {@link Session}_@param destinationName the name of the destination_@return the located {@link Destination}_@throws javax.jms.JMSException if resolution failed_@see #setDestinationResolver;protected Destination resolveDestinationName(Session session, String destinationName) throws JMSException {_		return getDestinationResolver().resolveDestinationName(session, destinationName, isPubSubDomain())__	};resolve,the,given,destination,name,into,a,jms,link,destination,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,link,session,param,destination,name,the,name,of,the,destination,return,the,located,link,destination,throws,javax,jms,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,destination,resolve,destination,name,session,session,string,destination,name,throws,jmsexception,return,get,destination,resolver,resolve,destination,name,session,destination,name,is,pub,sub,domain
JmsDestinationAccessor -> protected Destination resolveDestinationName(Session session, String destinationName) throws JMSException;1461683397;Resolve the given destination name into a JMS {@link Destination},_via this accessor's {@link DestinationResolver}._@param session the current JMS {@link Session}_@param destinationName the name of the destination_@return the located {@link Destination}_@throws javax.jms.JMSException if resolution failed_@see #setDestinationResolver;protected Destination resolveDestinationName(Session session, String destinationName) throws JMSException {_		return getDestinationResolver().resolveDestinationName(session, destinationName, isPubSubDomain())__	};resolve,the,given,destination,name,into,a,jms,link,destination,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,link,session,param,destination,name,the,name,of,the,destination,return,the,located,link,destination,throws,javax,jms,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,destination,resolve,destination,name,session,session,string,destination,name,throws,jmsexception,return,get,destination,resolver,resolve,destination,name,session,destination,name,is,pub,sub,domain
JmsDestinationAccessor -> protected Destination resolveDestinationName(Session session, String destinationName) throws JMSException;1495868221;Resolve the given destination name into a JMS {@link Destination},_via this accessor's {@link DestinationResolver}._@param session the current JMS {@link Session}_@param destinationName the name of the destination_@return the located {@link Destination}_@throws javax.jms.JMSException if resolution failed_@see #setDestinationResolver;protected Destination resolveDestinationName(Session session, String destinationName) throws JMSException {_		return getDestinationResolver().resolveDestinationName(session, destinationName, isPubSubDomain())__	};resolve,the,given,destination,name,into,a,jms,link,destination,via,this,accessor,s,link,destination,resolver,param,session,the,current,jms,link,session,param,destination,name,the,name,of,the,destination,return,the,located,link,destination,throws,javax,jms,jmsexception,if,resolution,failed,see,set,destination,resolver;protected,destination,resolve,destination,name,session,session,string,destination,name,throws,jmsexception,return,get,destination,resolver,resolve,destination,name,session,destination,name,is,pub,sub,domain
