# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractPollingMessageListenerContainer -> @Nullable 	protected Connection getConnection(JmsResourceHolder holder);1495868221;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;@Nullable_	protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;nullable,protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> @Nullable 	protected Connection getConnection(JmsResourceHolder holder);1496837955;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;@Nullable_	protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;nullable,protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> @Nullable 	protected Connection getConnection(JmsResourceHolder holder);1498780456;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;@Nullable_	protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;nullable,protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> @Nullable 	protected Connection getConnection(JmsResourceHolder holder);1500448076;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;@Nullable_	protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;nullable,protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> @Nullable 	protected Connection getConnection(JmsResourceHolder holder);1502974979;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;@Nullable_	protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;nullable,protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> @Nullable 	protected Connection getConnection(JmsResourceHolder holder);1533725446;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;@Nullable_	protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;nullable,protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1328020251;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		_		_		_		if (isPubSubDomain()) {_			if (isSubscriptionDurable() && destination instanceof Topic) {_				return session.createDurableSubscriber(_						(Topic) destination, getDurableSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,if,is,subscription,durable,destination,instanceof,topic,return,session,create,durable,subscriber,topic,destination,get,durable,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractPollingMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1356735495;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		_		_		_		if (isPubSubDomain()) {_			if (isSubscriptionDurable() && destination instanceof Topic) {_				return session.createDurableSubscriber(_						(Topic) destination, getDurableSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,if,is,subscription,durable,destination,instanceof,topic,return,session,create,durable,subscriber,topic,destination,get,durable,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractPollingMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1357119239;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		_		_		_		if (isPubSubDomain()) {_			if (isSubscriptionDurable() && destination instanceof Topic) {_				return session.createDurableSubscriber(_						(Topic) destination, getDurableSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,if,is,subscription,durable,destination,instanceof,topic,return,session,create,durable,subscriber,topic,destination,get,durable,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractPollingMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1368482696;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		_		_		_		if (isPubSubDomain()) {_			if (isSubscriptionDurable() && destination instanceof Topic) {_				return session.createDurableSubscriber(_						(Topic) destination, getDurableSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,if,is,subscription,durable,destination,instanceof,topic,return,session,create,durable,subscriber,topic,destination,get,durable,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractPollingMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1385423968;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		_		_		_		if (isPubSubDomain()) {_			if (isSubscriptionDurable() && destination instanceof Topic) {_				return session.createDurableSubscriber(_						(Topic) destination, getDurableSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,if,is,subscription,durable,destination,instanceof,topic,return,session,create,durable,subscriber,topic,destination,get,durable,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractPollingMessageListenerContainer -> protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException;1401724323;Create a JMS MessageConsumer for the given Session and Destination._<p>This implementation uses JMS 1.1 API._@param session the JMS Session to create a MessageConsumer for_@param destination the JMS Destination to create a MessageConsumer for_@return the new JMS MessageConsumer_@throws javax.jms.JMSException if thrown by JMS API methods;protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {_		_		_		_		if (isPubSubDomain()) {_			if (isSubscriptionDurable() && destination instanceof Topic) {_				return session.createDurableSubscriber(_						(Topic) destination, getDurableSubscriptionName(), getMessageSelector(), isPubSubNoLocal())__			}_			else {_				return session.createConsumer(destination, getMessageSelector(), isPubSubNoLocal())__			}_		}_		else {_			return session.createConsumer(destination, getMessageSelector())__		}_	};create,a,jms,message,consumer,for,the,given,session,and,destination,p,this,implementation,uses,jms,1,1,api,param,session,the,jms,session,to,create,a,message,consumer,for,param,destination,the,jms,destination,to,create,a,message,consumer,for,return,the,new,jms,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,api,methods;protected,message,consumer,create,consumer,session,session,destination,destination,throws,jmsexception,if,is,pub,sub,domain,if,is,subscription,durable,destination,instanceof,topic,return,session,create,durable,subscriber,topic,destination,get,durable,subscription,name,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector,is,pub,sub,no,local,else,return,session,create,consumer,destination,get,message,selector
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1328020251;Determine whether to trigger a commit after no message has been received._This is a good idea on any JMS provider other than Tibco, which is what_this default implementation checks for._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		if (this.commitAfterNoMessageReceived == null) {_			Session target = ConnectionFactoryUtils.getTargetSession(session)__			this.commitAfterNoMessageReceived = !target.getClass().getName().startsWith("com.tibco.tibjms.")__		}_		return this.commitAfterNoMessageReceived__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,jms,provider,other,than,tibco,which,is,what,this,default,implementation,checks,for,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,if,this,commit,after,no,message,received,null,session,target,connection,factory,utils,get,target,session,session,this,commit,after,no,message,received,target,get,class,get,name,starts,with,com,tibco,tibjms,return,this,commit,after,no,message,received
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1356735495;Determine whether to trigger a commit after no message has been received._This is a good idea on any JMS provider other than Tibco, which is what_this default implementation checks for._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		if (this.commitAfterNoMessageReceived == null) {_			Session target = ConnectionFactoryUtils.getTargetSession(session)__			this.commitAfterNoMessageReceived = !target.getClass().getName().startsWith("com.tibco.tibjms.")__		}_		return this.commitAfterNoMessageReceived__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,jms,provider,other,than,tibco,which,is,what,this,default,implementation,checks,for,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,if,this,commit,after,no,message,received,null,session,target,connection,factory,utils,get,target,session,session,this,commit,after,no,message,received,target,get,class,get,name,starts,with,com,tibco,tibjms,return,this,commit,after,no,message,received
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1357119239;Determine whether to trigger a commit after no message has been received._This is a good idea on any JMS provider other than Tibco, which is what_this default implementation checks for._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		if (this.commitAfterNoMessageReceived == null) {_			Session target = ConnectionFactoryUtils.getTargetSession(session)__			this.commitAfterNoMessageReceived = !target.getClass().getName().startsWith("com.tibco.tibjms.")__		}_		return this.commitAfterNoMessageReceived__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,jms,provider,other,than,tibco,which,is,what,this,default,implementation,checks,for,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,if,this,commit,after,no,message,received,null,session,target,connection,factory,utils,get,target,session,session,this,commit,after,no,message,received,target,get,class,get,name,starts,with,com,tibco,tibjms,return,this,commit,after,no,message,received
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1368482696;Determine whether to trigger a commit after no message has been received._This is a good idea on any JMS provider other than Tibco, which is what_this default implementation checks for._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		if (this.commitAfterNoMessageReceived == null) {_			Session target = ConnectionFactoryUtils.getTargetSession(session)__			this.commitAfterNoMessageReceived = !target.getClass().getName().startsWith("com.tibco.tibjms.")__		}_		return this.commitAfterNoMessageReceived__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,jms,provider,other,than,tibco,which,is,what,this,default,implementation,checks,for,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,if,this,commit,after,no,message,received,null,session,target,connection,factory,utils,get,target,session,session,this,commit,after,no,message,received,target,get,class,get,name,starts,with,com,tibco,tibjms,return,this,commit,after,no,message,received
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1385423968;Determine whether to trigger a commit after no message has been received._This is a good idea on any JMS provider other than Tibco, which is what_this default implementation checks for._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		if (this.commitAfterNoMessageReceived == null) {_			Session target = ConnectionFactoryUtils.getTargetSession(session)__			this.commitAfterNoMessageReceived = !target.getClass().getName().startsWith("com.tibco.tibjms.")__		}_		return this.commitAfterNoMessageReceived__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,jms,provider,other,than,tibco,which,is,what,this,default,implementation,checks,for,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,if,this,commit,after,no,message,received,null,session,target,connection,factory,utils,get,target,session,session,this,commit,after,no,message,received,target,get,class,get,name,starts,with,com,tibco,tibjms,return,this,commit,after,no,message,received
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1401724323;Determine whether to trigger a commit after no message has been received._This is a good idea on any JMS provider other than Tibco, which is what_this default implementation checks for._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		if (this.commitAfterNoMessageReceived == null) {_			Session target = ConnectionFactoryUtils.getTargetSession(session)__			this.commitAfterNoMessageReceived = !target.getClass().getName().startsWith("com.tibco.tibjms.")__		}_		return this.commitAfterNoMessageReceived__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,jms,provider,other,than,tibco,which,is,what,this,default,implementation,checks,for,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,if,this,commit,after,no,message,received,null,session,target,connection,factory,utils,get,target,session,session,this,commit,after,no,message,received,target,get,class,get,name,starts,with,com,tibco,tibjms,return,this,commit,after,no,message,received
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1405696881;Determine whether to trigger a commit after no message has been received._This is a good idea on any JMS provider other than Tibco, which is what_this default implementation checks for._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		if (this.commitAfterNoMessageReceived == null) {_			Session target = ConnectionFactoryUtils.getTargetSession(session)__			this.commitAfterNoMessageReceived = !target.getClass().getName().startsWith("com.tibco.tibjms.")__		}_		return this.commitAfterNoMessageReceived__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,jms,provider,other,than,tibco,which,is,what,this,default,implementation,checks,for,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,if,this,commit,after,no,message,received,null,session,target,connection,factory,utils,get,target,session,session,this,commit,after,no,message,received,target,get,class,get,name,starts,with,com,tibco,tibjms,return,this,commit,after,no,message,received
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1407154420;Determine whether to trigger a commit after no message has been received._This is a good idea on any JMS provider other than Tibco, which is what_this default implementation checks for._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		if (this.commitAfterNoMessageReceived == null) {_			Session target = ConnectionFactoryUtils.getTargetSession(session)__			this.commitAfterNoMessageReceived = !target.getClass().getName().startsWith("com.tibco.tibjms.")__		}_		return this.commitAfterNoMessageReceived__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,jms,provider,other,than,tibco,which,is,what,this,default,implementation,checks,for,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,if,this,commit,after,no,message,received,null,session,target,connection,factory,utils,get,target,session,session,this,commit,after,no,message,received,target,get,class,get,name,starts,with,com,tibco,tibjms,return,this,commit,after,no,message,received
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1429217385;Determine whether to trigger a commit after no message has been received._This is a good idea on any JMS provider other than Tibco, which is what_this default implementation checks for._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		if (this.commitAfterNoMessageReceived == null) {_			Session target = ConnectionFactoryUtils.getTargetSession(session)__			this.commitAfterNoMessageReceived = !target.getClass().getName().startsWith("com.tibco.tibjms.")__		}_		return this.commitAfterNoMessageReceived__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,jms,provider,other,than,tibco,which,is,what,this,default,implementation,checks,for,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,if,this,commit,after,no,message,received,null,session,target,connection,factory,utils,get,target,session,session,this,commit,after,no,message,received,target,get,class,get,name,starts,with,com,tibco,tibjms,return,this,commit,after,no,message,received
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1438003976;Determine whether to trigger a commit after no message has been received._This is a good idea on any JMS provider other than Tibco, which is what_this default implementation checks for._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		if (this.commitAfterNoMessageReceived == null) {_			Session target = ConnectionFactoryUtils.getTargetSession(session)__			this.commitAfterNoMessageReceived = !target.getClass().getName().startsWith("com.tibco.tibjms.")__		}_		return this.commitAfterNoMessageReceived__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,jms,provider,other,than,tibco,which,is,what,this,default,implementation,checks,for,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,if,this,commit,after,no,message,received,null,session,target,connection,factory,utils,get,target,session,session,this,commit,after,no,message,received,target,get,class,get,name,starts,with,com,tibco,tibjms,return,this,commit,after,no,message,received
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1461683397;Determine whether to trigger a commit after no message has been received._This is a good idea on any JMS provider other than Tibco, which is what_this default implementation checks for._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		if (this.commitAfterNoMessageReceived == null) {_			Session target = ConnectionFactoryUtils.getTargetSession(session)__			this.commitAfterNoMessageReceived = !target.getClass().getName().startsWith("com.tibco.tibjms.")__		}_		return this.commitAfterNoMessageReceived__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,jms,provider,other,than,tibco,which,is,what,this,default,implementation,checks,for,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,if,this,commit,after,no,message,received,null,session,target,connection,factory,utils,get,target,session,session,this,commit,after,no,message,received,target,get,class,get,name,starts,with,com,tibco,tibjms,return,this,commit,after,no,message,received
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1473795287;Determine whether to trigger a commit after no message has been received._This is a good idea on any modern-day JMS provider._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		return true__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,modern,day,jms,provider,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,return,true
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1495868221;Determine whether to trigger a commit after no message has been received._This is a good idea on any modern-day JMS provider._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		return true__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,modern,day,jms,provider,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,return,true
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1496837955;Determine whether to trigger a commit after no message has been received._This is a good idea on any modern-day JMS provider._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		return true__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,modern,day,jms,provider,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,return,true
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1498780456;Determine whether to trigger a commit after no message has been received._This is a good idea on any modern-day JMS provider._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		return true__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,modern,day,jms,provider,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,return,true
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1500448076;Determine whether to trigger a commit after no message has been received._This is a good idea on any modern-day JMS provider._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		return true__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,modern,day,jms,provider,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,return,true
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1502974979;Determine whether to trigger a commit after no message has been received._This is a good idea on any modern-day JMS provider._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		return true__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,modern,day,jms,provider,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,return,true
AbstractPollingMessageListenerContainer -> protected boolean shouldCommitAfterNoMessageReceived(Session session);1533725446;Determine whether to trigger a commit after no message has been received._This is a good idea on any modern-day JMS provider._@param session the current JMS Session which received no message_@return whether to call {@link #commitIfNecessary} on the given Session;protected boolean shouldCommitAfterNoMessageReceived(Session session) {_		return true__	};determine,whether,to,trigger,a,commit,after,no,message,has,been,received,this,is,a,good,idea,on,any,modern,day,jms,provider,param,session,the,current,jms,session,which,received,no,message,return,whether,to,call,link,commit,if,necessary,on,the,given,session;protected,boolean,should,commit,after,no,message,received,session,session,return,true
AbstractPollingMessageListenerContainer -> protected long getReceiveTimeout();1429217385;Return the receive timeout (ms) configured for this listener container._@since 4.2;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,receive,timeout,ms,configured,for,this,listener,container,since,4,2;protected,long,get,receive,timeout,return,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected long getReceiveTimeout();1438003976;Return the receive timeout (ms) configured for this listener container._@since 4.2;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,receive,timeout,ms,configured,for,this,listener,container,since,4,2;protected,long,get,receive,timeout,return,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected long getReceiveTimeout();1461683397;Return the receive timeout (ms) configured for this listener container._@since 4.2;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,receive,timeout,ms,configured,for,this,listener,container,since,4,2;protected,long,get,receive,timeout,return,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected long getReceiveTimeout();1473795287;Return the receive timeout (ms) configured for this listener container._@since 4.2;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,receive,timeout,ms,configured,for,this,listener,container,since,4,2;protected,long,get,receive,timeout,return,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected long getReceiveTimeout();1495868221;Return the receive timeout (ms) configured for this listener container._@since 4.2;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,receive,timeout,ms,configured,for,this,listener,container,since,4,2;protected,long,get,receive,timeout,return,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected long getReceiveTimeout();1496837955;Return the receive timeout (ms) configured for this listener container._@since 4.2;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,receive,timeout,ms,configured,for,this,listener,container,since,4,2;protected,long,get,receive,timeout,return,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected long getReceiveTimeout();1498780456;Return the receive timeout (ms) configured for this listener container._@since 4.2;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,receive,timeout,ms,configured,for,this,listener,container,since,4,2;protected,long,get,receive,timeout,return,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected long getReceiveTimeout();1500448076;Return the receive timeout (ms) configured for this listener container._@since 4.2;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,receive,timeout,ms,configured,for,this,listener,container,since,4,2;protected,long,get,receive,timeout,return,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected long getReceiveTimeout();1502974979;Return the receive timeout (ms) configured for this listener container._@since 4.2;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,receive,timeout,ms,configured,for,this,listener,container,since,4,2;protected,long,get,receive,timeout,return,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected long getReceiveTimeout();1533725446;Return the receive timeout (ms) configured for this listener container._@since 4.2;protected long getReceiveTimeout() {_		return this.receiveTimeout__	};return,the,receive,timeout,ms,configured,for,this,listener,container,since,4,2;protected,long,get,receive,timeout,return,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected boolean isPubSubNoLocal();1328020251;Return whether to inhibit the delivery of messages published by its own connection.;protected boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection;protected,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractPollingMessageListenerContainer -> protected boolean isPubSubNoLocal();1356735495;Return whether to inhibit the delivery of messages published by its own connection.;protected boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection;protected,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractPollingMessageListenerContainer -> protected boolean isPubSubNoLocal();1357119239;Return whether to inhibit the delivery of messages published by its own connection.;protected boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection;protected,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractPollingMessageListenerContainer -> protected boolean isPubSubNoLocal();1368482696;Return whether to inhibit the delivery of messages published by its own connection.;protected boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection;protected,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractPollingMessageListenerContainer -> protected boolean isPubSubNoLocal();1385423968;Return whether to inhibit the delivery of messages published by its own connection.;protected boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection;protected,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractPollingMessageListenerContainer -> protected boolean isPubSubNoLocal();1401724323;Return whether to inhibit the delivery of messages published by its own connection.;protected boolean isPubSubNoLocal() {_		return this.pubSubNoLocal__	};return,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection;protected,boolean,is,pub,sub,no,local,return,this,pub,sub,no,local
AbstractPollingMessageListenerContainer -> protected Session getSession(JmsResourceHolder holder);1328020251;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or <code>null</code> if none found;protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,code,if,none,found;protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> protected Session getSession(JmsResourceHolder holder);1356735495;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> protected Session getSession(JmsResourceHolder holder);1357119239;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> protected Session getSession(JmsResourceHolder holder);1368482696;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> protected Session getSession(JmsResourceHolder holder);1385423968;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> protected Session getSession(JmsResourceHolder holder);1401724323;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> protected Session getSession(JmsResourceHolder holder);1405696881;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> protected Session getSession(JmsResourceHolder holder);1407154420;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> protected Session getSession(JmsResourceHolder holder);1429217385;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> protected Session getSession(JmsResourceHolder holder);1438003976;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> protected Session getSession(JmsResourceHolder holder);1461683397;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> protected Session getSession(JmsResourceHolder holder);1473795287;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> protected Connection getConnection(JmsResourceHolder holder);1328020251;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or <code>null</code> if none found;protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,code,if,none,found;protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> protected Connection getConnection(JmsResourceHolder holder);1356735495;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> protected Connection getConnection(JmsResourceHolder holder);1357119239;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> protected Connection getConnection(JmsResourceHolder holder);1368482696;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> protected Connection getConnection(JmsResourceHolder holder);1385423968;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> protected Connection getConnection(JmsResourceHolder holder);1401724323;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> protected Connection getConnection(JmsResourceHolder holder);1405696881;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> protected Connection getConnection(JmsResourceHolder holder);1407154420;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> protected Connection getConnection(JmsResourceHolder holder);1429217385;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> protected Connection getConnection(JmsResourceHolder holder);1438003976;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> protected Connection getConnection(JmsResourceHolder holder);1461683397;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> protected Connection getConnection(JmsResourceHolder holder);1473795287;Fetch an appropriate Connection from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Connection._@param holder the JmsResourceHolder_@return an appropriate Connection fetched from the holder,_or {@code null} if none found;protected Connection getConnection(JmsResourceHolder holder) {_		return holder.getConnection()__	};fetch,an,appropriate,connection,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,connection,param,holder,the,jms,resource,holder,return,an,appropriate,connection,fetched,from,the,holder,or,code,null,if,none,found;protected,connection,get,connection,jms,resource,holder,holder,return,holder,get,connection
AbstractPollingMessageListenerContainer -> @Nullable 	protected Session getSession(JmsResourceHolder holder);1495868221;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;@Nullable_	protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;nullable,protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> @Nullable 	protected Session getSession(JmsResourceHolder holder);1496837955;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;@Nullable_	protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;nullable,protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> @Nullable 	protected Session getSession(JmsResourceHolder holder);1498780456;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;@Nullable_	protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;nullable,protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> @Nullable 	protected Session getSession(JmsResourceHolder holder);1500448076;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;@Nullable_	protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;nullable,protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> @Nullable 	protected Session getSession(JmsResourceHolder holder);1502974979;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;@Nullable_	protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;nullable,protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> @Nullable 	protected Session getSession(JmsResourceHolder holder);1533725446;Fetch an appropriate Session from the given JmsResourceHolder._<p>This implementation accepts any JMS 1.1 Session._@param holder the JmsResourceHolder_@return an appropriate Session fetched from the holder,_or {@code null} if none found;@Nullable_	protected Session getSession(JmsResourceHolder holder) {_		return holder.getSession()__	};fetch,an,appropriate,session,from,the,given,jms,resource,holder,p,this,implementation,accepts,any,jms,1,1,session,param,holder,the,jms,resource,holder,return,an,appropriate,session,fetched,from,the,holder,or,code,null,if,none,found;nullable,protected,session,get,session,jms,resource,holder,holder,return,holder,get,session
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute( 			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status) 			throws JMSException;1328020251;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be <code>null</code>)_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(_			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						getConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(getConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							getConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(getConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, message)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,code,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,session,session,message,consumer,consumer,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,get,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,get,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,get,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,get,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,message,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute( 			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status) 			throws JMSException;1356735495;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be {@code null})_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(_			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						getConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(getConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							getConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(getConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, message)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,session,session,message,consumer,consumer,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,get,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,get,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,get,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,get,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,message,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute( 			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status) 			throws JMSException;1357119239;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be {@code null})_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(_			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						getConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(getConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							getConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(getConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, message)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,session,session,message,consumer,consumer,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,get,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,get,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,get,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,get,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,message,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute( 			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status) 			throws JMSException;1368482696;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be {@code null})_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(_			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						getConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(getConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							getConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(getConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, message)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,session,session,message,consumer,consumer,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,get,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,get,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,get,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,get,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,message,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute( 			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status) 			throws JMSException;1385423968;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be {@code null})_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(_			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						getConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(getConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							getConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(getConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, message)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,session,session,message,consumer,consumer,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,get,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,get,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,get,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,get,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,message,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute( 			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status) 			throws JMSException;1401724323;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be {@code null})_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(_			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						getConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(getConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							getConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(getConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, message)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,session,session,message,consumer,consumer,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,get,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,get,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,get,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,get,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,message,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute( 			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status) 			throws JMSException;1405696881;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be {@code null})_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(_			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						getConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(getConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							getConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(getConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, message)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,session,session,message,consumer,consumer,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,get,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,get,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,get,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,get,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,message,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute( 			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status) 			throws JMSException;1407154420;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be {@code null})_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(_			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						getConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(getConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							getConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(getConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, message)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,session,session,message,consumer,consumer,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,get,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,get,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,get,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,get,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,message,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute( 			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status) 			throws JMSException;1429217385;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be {@code null})_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(_			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						getConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(getConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							getConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(getConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, message)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,session,session,message,consumer,consumer,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,get,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,get,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,get,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,get,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,message,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute( 			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status) 			throws JMSException;1438003976;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be {@code null})_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(_			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						getConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(getConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							getConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(getConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, message)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,session,session,message,consumer,consumer,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,get,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,get,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,get,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,get,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,message,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute( 			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status) 			throws JMSException;1461683397;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be {@code null})_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(_			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						getConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(getConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							getConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(getConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, message)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,session,session,message,consumer,consumer,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,get,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,get,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,get,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,get,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,message,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute( 			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status) 			throws JMSException;1473795287;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be {@code null})_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(_			Object invoker, Session session, MessageConsumer consumer, TransactionStatus status)_			throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						getConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(getConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							getConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(getConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, message)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,session,session,message,consumer,consumer,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,get,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,get,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,get,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,get,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,message,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> protected final PlatformTransactionManager getTransactionManager();1328020251;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> protected final PlatformTransactionManager getTransactionManager();1356735495;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> protected final PlatformTransactionManager getTransactionManager();1357119239;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> protected final PlatformTransactionManager getTransactionManager();1368482696;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> protected final PlatformTransactionManager getTransactionManager();1385423968;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> protected final PlatformTransactionManager getTransactionManager();1401724323;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> protected final PlatformTransactionManager getTransactionManager();1405696881;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> protected final PlatformTransactionManager getTransactionManager();1407154420;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> protected final PlatformTransactionManager getTransactionManager();1429217385;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> protected final PlatformTransactionManager getTransactionManager();1438003976;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> protected final PlatformTransactionManager getTransactionManager();1461683397;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> protected final PlatformTransactionManager getTransactionManager();1473795287;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> protected final PlatformTransactionManager getTransactionManager();1495868221;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> private void rollbackOnException(TransactionStatus status, Throwable ex);1328020251;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,this,transaction,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> private void rollbackOnException(TransactionStatus status, Throwable ex);1356735495;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,this,transaction,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> private void rollbackOnException(TransactionStatus status, Throwable ex);1357119239;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,this,transaction,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> private void rollbackOnException(TransactionStatus status, Throwable ex);1368482696;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,this,transaction,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> private void rollbackOnException(TransactionStatus status, Throwable ex);1385423968;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,this,transaction,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> private void rollbackOnException(TransactionStatus status, Throwable ex);1401724323;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,this,transaction,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> private void rollbackOnException(TransactionStatus status, Throwable ex);1405696881;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,this,transaction,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> private void rollbackOnException(TransactionStatus status, Throwable ex);1407154420;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,this,transaction,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> private void rollbackOnException(TransactionStatus status, Throwable ex);1429217385;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,this,transaction,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> private void rollbackOnException(TransactionStatus status, Throwable ex);1438003976;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,this,transaction,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> private void rollbackOnException(TransactionStatus status, Throwable ex);1461683397;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,this,transaction,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> private void rollbackOnException(TransactionStatus status, Throwable ex);1473795287;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,this,transaction,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> private void rollbackOnException(TransactionStatus status, Throwable ex);1495868221;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,this,transaction,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> private void rollbackOnException(TransactionStatus status, Throwable ex);1496837955;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,this,transaction,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> @Nullable 	protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1496837955;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;@Nullable_	protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return receiveFromConsumer(consumer, getReceiveTimeout())__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;nullable,protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,receive,from,consumer,consumer,get,receive,timeout
AbstractPollingMessageListenerContainer -> @Nullable 	protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1498780456;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;@Nullable_	protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return receiveFromConsumer(consumer, getReceiveTimeout())__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;nullable,protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,receive,from,consumer,consumer,get,receive,timeout
AbstractPollingMessageListenerContainer -> @Nullable 	protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1500448076;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;@Nullable_	protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return receiveFromConsumer(consumer, getReceiveTimeout())__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;nullable,protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,receive,from,consumer,consumer,get,receive,timeout
AbstractPollingMessageListenerContainer -> @Nullable 	protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1502974979;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;@Nullable_	protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return receiveFromConsumer(consumer, getReceiveTimeout())__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;nullable,protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,receive,from,consumer,consumer,get,receive,timeout
AbstractPollingMessageListenerContainer -> @Nullable 	protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1533725446;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;@Nullable_	protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return receiveFromConsumer(consumer, getReceiveTimeout())__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;nullable,protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,receive,from,consumer,consumer,get,receive,timeout
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1328020251;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1356735495;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1357119239;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1368482696;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1385423968;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1401724323;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1405696881;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1407154420;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1429217385;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1438003976;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1461683397;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1473795287;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1495868221;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1496837955;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1498780456;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1500448076;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1502974979;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void messageReceived(Object invoker, Session session);1533725446;Template method that gets called right when a new message has been received,_before attempting to process it. Allows subclasses to react to the event_of an actual incoming message, for example adapting their consumer count._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void messageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,right,when,a,new,message,has,been,received,before,attempting,to,process,it,allows,subclasses,to,react,to,the,event,of,an,actual,incoming,message,for,example,adapting,their,consumer,count,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute(Object invoker, @Nullable Session session, 			@Nullable MessageConsumer consumer, @Nullable TransactionStatus status) throws JMSException;1496837955;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be {@code null})_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(Object invoker, @Nullable Session session,_			@Nullable MessageConsumer consumer, @Nullable TransactionStatus status) throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						obtainConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(obtainConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							obtainConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(obtainConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, null)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,nullable,session,session,nullable,message,consumer,consumer,nullable,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,obtain,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,obtain,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,obtain,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,obtain,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,null,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute(Object invoker, @Nullable Session session, 			@Nullable MessageConsumer consumer, @Nullable TransactionStatus status) throws JMSException;1498780456;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be {@code null})_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(Object invoker, @Nullable Session session,_			@Nullable MessageConsumer consumer, @Nullable TransactionStatus status) throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						obtainConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(obtainConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							obtainConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(obtainConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, null)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,nullable,session,session,nullable,message,consumer,consumer,nullable,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,obtain,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,obtain,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,obtain,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,obtain,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,null,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute(Object invoker, @Nullable Session session, 			@Nullable MessageConsumer consumer, @Nullable TransactionStatus status) throws JMSException;1500448076;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be {@code null})_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(Object invoker, @Nullable Session session,_			@Nullable MessageConsumer consumer, @Nullable TransactionStatus status) throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						obtainConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(obtainConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							obtainConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(obtainConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, null)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,nullable,session,session,nullable,message,consumer,consumer,nullable,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,obtain,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,obtain,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,obtain,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,obtain,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,null,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute(Object invoker, @Nullable Session session, 			@Nullable MessageConsumer consumer, @Nullable TransactionStatus status) throws JMSException;1502974979;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be {@code null})_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(Object invoker, @Nullable Session session,_			@Nullable MessageConsumer consumer, @Nullable TransactionStatus status) throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						obtainConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(obtainConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							obtainConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(obtainConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, null)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,nullable,session,session,nullable,message,consumer,consumer,nullable,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,obtain,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,obtain,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,obtain,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,obtain,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,null,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> protected boolean doReceiveAndExecute(Object invoker, @Nullable Session session, 			@Nullable MessageConsumer consumer, @Nullable TransactionStatus status) throws JMSException;1533725446;Actually execute the listener for a message received from the given consumer,_fetching all requires resources and invoking the listener._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@param status the TransactionStatus (may be {@code null})_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doExecuteListener(javax.jms.Session, javax.jms.Message);protected boolean doReceiveAndExecute(Object invoker, @Nullable Session session,_			@Nullable MessageConsumer consumer, @Nullable TransactionStatus status) throws JMSException {__		Connection conToClose = null__		Session sessionToClose = null__		MessageConsumer consumerToClose = null__		try {_			Session sessionToUse = session__			boolean transactional = false__			if (sessionToUse == null) {_				sessionToUse = ConnectionFactoryUtils.doGetTransactionalSession(_						obtainConnectionFactory(), this.transactionalResourceFactory, true)__				transactional = (sessionToUse != null)__			}_			if (sessionToUse == null) {_				Connection conToUse__				if (sharedConnectionEnabled()) {_					conToUse = getSharedConnection()__				}_				else {_					conToUse = createConnection()__					conToClose = conToUse__					conToUse.start()__				}_				sessionToUse = createSession(conToUse)__				sessionToClose = sessionToUse__			}_			MessageConsumer consumerToUse = consumer__			if (consumerToUse == null) {_				consumerToUse = createListenerConsumer(sessionToUse)__				consumerToClose = consumerToUse__			}_			Message message = receiveMessage(consumerToUse)__			if (message != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Received message of type [" + message.getClass() + "] from consumer [" +_							consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" +_							sessionToUse + "]")__				}_				messageReceived(invoker, sessionToUse)__				boolean exposeResource = (!transactional && isExposeListenerSession() &&_						!TransactionSynchronizationManager.hasResource(obtainConnectionFactory()))__				if (exposeResource) {_					TransactionSynchronizationManager.bindResource(_							obtainConnectionFactory(), new LocallyExposedJmsResourceHolder(sessionToUse))__				}_				try {_					doExecuteListener(sessionToUse, message)__				}_				catch (Throwable ex) {_					if (status != null) {_						if (logger.isDebugEnabled()) {_							logger.debug("Rolling back transaction because of listener exception thrown: " + ex)__						}_						status.setRollbackOnly()__					}_					handleListenerException(ex)__					_					_					if (ex instanceof JMSException) {_						throw (JMSException) ex__					}_				}_				finally {_					if (exposeResource) {_						TransactionSynchronizationManager.unbindResource(obtainConnectionFactory())__					}_				}_				_				return true__			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") +_							"session [" + sessionToUse + "] did not receive a message")__				}_				noMessageReceived(invoker, sessionToUse)__				_				if (shouldCommitAfterNoMessageReceived(sessionToUse)) {_					commitIfNecessary(sessionToUse, null)__				}_				_				return false__			}_		}_		finally {_			JmsUtils.closeMessageConsumer(consumerToClose)__			JmsUtils.closeSession(sessionToClose)__			ConnectionFactoryUtils.releaseConnection(conToClose, getConnectionFactory(), true)__		}_	};actually,execute,the,listener,for,a,message,received,from,the,given,consumer,fetching,all,requires,resources,and,invoking,the,listener,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,param,status,the,transaction,status,may,be,code,null,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,execute,listener,javax,jms,session,javax,jms,message;protected,boolean,do,receive,and,execute,object,invoker,nullable,session,session,nullable,message,consumer,consumer,nullable,transaction,status,status,throws,jmsexception,connection,con,to,close,null,session,session,to,close,null,message,consumer,consumer,to,close,null,try,session,session,to,use,session,boolean,transactional,false,if,session,to,use,null,session,to,use,connection,factory,utils,do,get,transactional,session,obtain,connection,factory,this,transactional,resource,factory,true,transactional,session,to,use,null,if,session,to,use,null,connection,con,to,use,if,shared,connection,enabled,con,to,use,get,shared,connection,else,con,to,use,create,connection,con,to,close,con,to,use,con,to,use,start,session,to,use,create,session,con,to,use,session,to,close,session,to,use,message,consumer,consumer,to,use,consumer,if,consumer,to,use,null,consumer,to,use,create,listener,consumer,session,to,use,consumer,to,close,consumer,to,use,message,message,receive,message,consumer,to,use,if,message,null,if,logger,is,debug,enabled,logger,debug,received,message,of,type,message,get,class,from,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,message,received,invoker,session,to,use,boolean,expose,resource,transactional,is,expose,listener,session,transaction,synchronization,manager,has,resource,obtain,connection,factory,if,expose,resource,transaction,synchronization,manager,bind,resource,obtain,connection,factory,new,locally,exposed,jms,resource,holder,session,to,use,try,do,execute,listener,session,to,use,message,catch,throwable,ex,if,status,null,if,logger,is,debug,enabled,logger,debug,rolling,back,transaction,because,of,listener,exception,thrown,ex,status,set,rollback,only,handle,listener,exception,ex,if,ex,instanceof,jmsexception,throw,jmsexception,ex,finally,if,expose,resource,transaction,synchronization,manager,unbind,resource,obtain,connection,factory,return,true,else,if,logger,is,trace,enabled,logger,trace,consumer,consumer,to,use,of,transactional,transactional,session,session,to,use,did,not,receive,a,message,no,message,received,invoker,session,to,use,if,should,commit,after,no,message,received,session,to,use,commit,if,necessary,session,to,use,null,return,false,finally,jms,utils,close,message,consumer,consumer,to,close,jms,utils,close,session,session,to,close,connection,factory,utils,release,connection,con,to,close,get,connection,factory,true
AbstractPollingMessageListenerContainer -> public void setTransactionManager(PlatformTransactionManager transactionManager);1328020251;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message)._Alternatively, a {@link org.springframework.jms.connection.JmsTransactionManager}_may be used for fully synchronized Spring transactions based on local JMS_transactions. Check {@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,alternatively,a,link,org,springframework,jms,connection,jms,transaction,manager,may,be,used,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> public void setTransactionManager(PlatformTransactionManager transactionManager);1356735495;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message)._Alternatively, a {@link org.springframework.jms.connection.JmsTransactionManager}_may be used for fully synchronized Spring transactions based on local JMS_transactions. Check {@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,alternatively,a,link,org,springframework,jms,connection,jms,transaction,manager,may,be,used,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> public void setTransactionManager(PlatformTransactionManager transactionManager);1357119239;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message)._Alternatively, a {@link org.springframework.jms.connection.JmsTransactionManager}_may be used for fully synchronized Spring transactions based on local JMS_transactions. Check {@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,alternatively,a,link,org,springframework,jms,connection,jms,transaction,manager,may,be,used,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> public void setTransactionManager(PlatformTransactionManager transactionManager);1368482696;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message)._Alternatively, a {@link org.springframework.jms.connection.JmsTransactionManager}_may be used for fully synchronized Spring transactions based on local JMS_transactions. Check {@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,alternatively,a,link,org,springframework,jms,connection,jms,transaction,manager,may,be,used,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> public void setTransactionManager(PlatformTransactionManager transactionManager);1385423968;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message)._Alternatively, a {@link org.springframework.jms.connection.JmsTransactionManager}_may be used for fully synchronized Spring transactions based on local JMS_transactions. Check {@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,alternatively,a,link,org,springframework,jms,connection,jms,transaction,manager,may,be,used,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> public void setTransactionManager(PlatformTransactionManager transactionManager);1401724323;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message). This_allows for fully synchronized Spring transactions based on local JMS_transactions, similar to what_{@link org.springframework.jms.connection.JmsTransactionManager} provides. Check_{@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see #setSessionTransacted(boolean)_@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,this,allows,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,similar,to,what,link,org,springframework,jms,connection,jms,transaction,manager,provides,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,set,session,transacted,boolean,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> public void setTransactionManager(PlatformTransactionManager transactionManager);1405696881;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message). This_allows for fully synchronized Spring transactions based on local JMS_transactions, similar to what_{@link org.springframework.jms.connection.JmsTransactionManager} provides. Check_{@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see #setSessionTransacted(boolean)_@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,this,allows,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,similar,to,what,link,org,springframework,jms,connection,jms,transaction,manager,provides,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,set,session,transacted,boolean,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> public void setTransactionManager(PlatformTransactionManager transactionManager);1407154420;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message). This_allows for fully synchronized Spring transactions based on local JMS_transactions, similar to what_{@link org.springframework.jms.connection.JmsTransactionManager} provides. Check_{@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see #setSessionTransacted(boolean)_@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,this,allows,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,similar,to,what,link,org,springframework,jms,connection,jms,transaction,manager,provides,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,set,session,transacted,boolean,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> public void setTransactionManager(PlatformTransactionManager transactionManager);1429217385;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message). This_allows for fully synchronized Spring transactions based on local JMS_transactions, similar to what_{@link org.springframework.jms.connection.JmsTransactionManager} provides. Check_{@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see #setSessionTransacted(boolean)_@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,this,allows,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,similar,to,what,link,org,springframework,jms,connection,jms,transaction,manager,provides,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,set,session,transacted,boolean,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> public void setTransactionManager(PlatformTransactionManager transactionManager);1438003976;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message). This_allows for fully synchronized Spring transactions based on local JMS_transactions, similar to what_{@link org.springframework.jms.connection.JmsTransactionManager} provides. Check_{@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see #setSessionTransacted(boolean)_@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,this,allows,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,similar,to,what,link,org,springframework,jms,connection,jms,transaction,manager,provides,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,set,session,transacted,boolean,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> public void setTransactionManager(PlatformTransactionManager transactionManager);1461683397;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message). This_allows for fully synchronized Spring transactions based on local JMS_transactions, similar to what_{@link org.springframework.jms.connection.JmsTransactionManager} provides. Check_{@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see #setSessionTransacted(boolean)_@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,this,allows,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,similar,to,what,link,org,springframework,jms,connection,jms,transaction,manager,provides,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,set,session,transacted,boolean,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> public void setTransactionManager(PlatformTransactionManager transactionManager);1473795287;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message). This_allows for fully synchronized Spring transactions based on local JMS_transactions, similar to what_{@link org.springframework.jms.connection.JmsTransactionManager} provides. Check_{@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see #setSessionTransacted(boolean)_@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,this,allows,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,similar,to,what,link,org,springframework,jms,connection,jms,transaction,manager,provides,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,set,session,transacted,boolean,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> public void setTransactionManager(PlatformTransactionManager transactionManager);1495868221;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message). This_allows for fully synchronized Spring transactions based on local JMS_transactions, similar to what_{@link org.springframework.jms.connection.JmsTransactionManager} provides. Check_{@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see #setSessionTransacted(boolean)_@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,this,allows,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,similar,to,what,link,org,springframework,jms,connection,jms,transaction,manager,provides,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,set,session,transacted,boolean,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> public void setTransactionManager(PlatformTransactionManager transactionManager);1496837955;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message). This_allows for fully synchronized Spring transactions based on local JMS_transactions, similar to what_{@link org.springframework.jms.connection.JmsTransactionManager} provides. Check_{@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see #setSessionTransacted(boolean)_@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,this,allows,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,similar,to,what,link,org,springframework,jms,connection,jms,transaction,manager,provides,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,set,session,transacted,boolean,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> public void setTransactionManager(PlatformTransactionManager transactionManager);1498780456;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message). This_allows for fully synchronized Spring transactions based on local JMS_transactions, similar to what_{@link org.springframework.jms.connection.JmsTransactionManager} provides. Check_{@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see #setSessionTransacted(boolean)_@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,this,allows,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,similar,to,what,link,org,springframework,jms,connection,jms,transaction,manager,provides,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,set,session,transacted,boolean,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> private void rollbackOnException(PlatformTransactionManager manager, TransactionStatus status, Throwable ex);1498780456;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(PlatformTransactionManager manager, TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			manager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,platform,transaction,manager,manager,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> private void rollbackOnException(PlatformTransactionManager manager, TransactionStatus status, Throwable ex);1500448076;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(PlatformTransactionManager manager, TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			manager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,platform,transaction,manager,manager,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> private void rollbackOnException(PlatformTransactionManager manager, TransactionStatus status, Throwable ex);1502974979;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(PlatformTransactionManager manager, TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			manager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,platform,transaction,manager,manager,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> private void rollbackOnException(PlatformTransactionManager manager, TransactionStatus status, Throwable ex);1533725446;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown listener exception or error;private void rollbackOnException(PlatformTransactionManager manager, TransactionStatus status, Throwable ex) {_		logger.debug("Initiating transaction rollback on listener exception", ex)__		try {_			manager.rollback(status)__		}_		catch (RuntimeException ex2) {_			logger.error("Listener exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Listener exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,listener,exception,or,error;private,void,rollback,on,exception,platform,transaction,manager,manager,transaction,status,status,throwable,ex,logger,debug,initiating,transaction,rollback,on,listener,exception,ex,try,manager,rollback,status,catch,runtime,exception,ex2,logger,error,listener,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,listener,exception,overridden,by,rollback,error,ex,throw,err
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1328020251;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1356735495;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1357119239;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1368482696;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1385423968;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1401724323;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1405696881;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1407154420;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1429217385;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1438003976;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1461683397;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1473795287;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1495868221;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1496837955;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1498780456;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1500448076;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1502974979;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> public void setTransactionTimeout(int transactionTimeout);1533725446;Specify the transaction timeout to use for transactional wrapping, in <b>seconds</b>._Default is none, using the transaction manager's default timeout._@see org.springframework.transaction.TransactionDefinition#getTimeout()_@see #setReceiveTimeout;public void setTransactionTimeout(int transactionTimeout) {_		this.transactionDefinition.setTimeout(transactionTimeout)__	};specify,the,transaction,timeout,to,use,for,transactional,wrapping,in,b,seconds,b,default,is,none,using,the,transaction,manager,s,default,timeout,see,org,springframework,transaction,transaction,definition,get,timeout,see,set,receive,timeout;public,void,set,transaction,timeout,int,transaction,timeout,this,transaction,definition,set,timeout,transaction,timeout
AbstractPollingMessageListenerContainer -> protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1328020251;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or <code>null</code> if none_@throws JMSException if thrown by JMS methods;protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return (this.receiveTimeout < 0 ? consumer.receive() : consumer.receive(this.receiveTimeout))__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,code,if,none,throws,jmsexception,if,thrown,by,jms,methods;protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,this,receive,timeout,0,consumer,receive,consumer,receive,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1356735495;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return (this.receiveTimeout < 0 ? consumer.receive() : consumer.receive(this.receiveTimeout))__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,this,receive,timeout,0,consumer,receive,consumer,receive,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1357119239;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return (this.receiveTimeout < 0 ? consumer.receive() : consumer.receive(this.receiveTimeout))__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,this,receive,timeout,0,consumer,receive,consumer,receive,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1368482696;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return (this.receiveTimeout < 0 ? consumer.receive() : consumer.receive(this.receiveTimeout))__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,this,receive,timeout,0,consumer,receive,consumer,receive,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1385423968;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return (this.receiveTimeout < 0 ? consumer.receive() : consumer.receive(this.receiveTimeout))__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,this,receive,timeout,0,consumer,receive,consumer,receive,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1401724323;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return (this.receiveTimeout < 0 ? consumer.receive() : consumer.receive(this.receiveTimeout))__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,this,receive,timeout,0,consumer,receive,consumer,receive,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1405696881;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return (this.receiveTimeout < 0 ? consumer.receive() : consumer.receive(this.receiveTimeout))__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,this,receive,timeout,0,consumer,receive,consumer,receive,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1407154420;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return (this.receiveTimeout < 0 ? consumer.receive() : consumer.receive(this.receiveTimeout))__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,this,receive,timeout,0,consumer,receive,consumer,receive,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1429217385;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return (this.receiveTimeout < 0 ? consumer.receive() : consumer.receive(this.receiveTimeout))__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,this,receive,timeout,0,consumer,receive,consumer,receive,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1438003976;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return (this.receiveTimeout < 0 ? consumer.receive() : consumer.receive(this.receiveTimeout))__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,this,receive,timeout,0,consumer,receive,consumer,receive,this,receive,timeout
AbstractPollingMessageListenerContainer -> protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1461683397;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return receiveFromConsumer(consumer, getReceiveTimeout())__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,receive,from,consumer,consumer,get,receive,timeout
AbstractPollingMessageListenerContainer -> protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1473795287;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return receiveFromConsumer(consumer, getReceiveTimeout())__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,receive,from,consumer,consumer,get,receive,timeout
AbstractPollingMessageListenerContainer -> protected Message receiveMessage(MessageConsumer consumer) throws JMSException;1495868221;Receive a message from the given consumer._@param consumer the MessageConsumer to use_@return the Message, or {@code null} if none_@throws JMSException if thrown by JMS methods;protected Message receiveMessage(MessageConsumer consumer) throws JMSException {_		return receiveFromConsumer(consumer, getReceiveTimeout())__	};receive,a,message,from,the,given,consumer,param,consumer,the,message,consumer,to,use,return,the,message,or,code,null,if,none,throws,jmsexception,if,thrown,by,jms,methods;protected,message,receive,message,message,consumer,consumer,throws,jmsexception,return,receive,from,consumer,consumer,get,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1328020251;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). -1 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,1,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1356735495;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). -1 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,1,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1357119239;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). -1 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,1,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1368482696;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). -1 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,1,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1385423968;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). -1 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,1,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1401724323;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). -1 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,1,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1405696881;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). -1 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,1,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1407154420;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). -1 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,1,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1429217385;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). -1 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,1,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1438003976;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). -1 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager._@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,1,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1461683397;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). 0 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager and generally_discouraged since such a listener container cannot cleanly shut down._A negative value such as -1 indicates a no-wait receive operation._@see #receiveFromConsumer(MessageConsumer, long)_@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receiveNoWait()_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,0,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,and,generally,discouraged,since,such,a,listener,container,cannot,cleanly,shut,down,a,negative,value,such,as,1,indicates,a,no,wait,receive,operation,see,receive,from,consumer,message,consumer,long,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,no,wait,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1473795287;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). 0 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager and generally_discouraged since such a listener container cannot cleanly shut down._A negative value such as -1 indicates a no-wait receive operation._@see #receiveFromConsumer(MessageConsumer, long)_@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receiveNoWait()_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,0,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,and,generally,discouraged,since,such,a,listener,container,cannot,cleanly,shut,down,a,negative,value,such,as,1,indicates,a,no,wait,receive,operation,see,receive,from,consumer,message,consumer,long,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,no,wait,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1495868221;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). 0 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager and generally_discouraged since such a listener container cannot cleanly shut down._A negative value such as -1 indicates a no-wait receive operation._@see #receiveFromConsumer(MessageConsumer, long)_@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receiveNoWait()_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,0,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,and,generally,discouraged,since,such,a,listener,container,cannot,cleanly,shut,down,a,negative,value,such,as,1,indicates,a,no,wait,receive,operation,see,receive,from,consumer,message,consumer,long,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,no,wait,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1496837955;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). 0 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager and generally_discouraged since such a listener container cannot cleanly shut down._A negative value such as -1 indicates a no-wait receive operation._@see #receiveFromConsumer(MessageConsumer, long)_@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receiveNoWait()_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,0,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,and,generally,discouraged,since,such,a,listener,container,cannot,cleanly,shut,down,a,negative,value,such,as,1,indicates,a,no,wait,receive,operation,see,receive,from,consumer,message,consumer,long,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,no,wait,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1498780456;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). 0 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager and generally_discouraged since such a listener container cannot cleanly shut down._A negative value such as -1 indicates a no-wait receive operation._@see #receiveFromConsumer(MessageConsumer, long)_@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receiveNoWait()_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,0,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,and,generally,discouraged,since,such,a,listener,container,cannot,cleanly,shut,down,a,negative,value,such,as,1,indicates,a,no,wait,receive,operation,see,receive,from,consumer,message,consumer,long,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,no,wait,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1500448076;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). 0 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager and generally_discouraged since such a listener container cannot cleanly shut down._A negative value such as -1 indicates a no-wait receive operation._@see #receiveFromConsumer(MessageConsumer, long)_@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receiveNoWait()_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,0,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,and,generally,discouraged,since,such,a,listener,container,cannot,cleanly,shut,down,a,negative,value,such,as,1,indicates,a,no,wait,receive,operation,see,receive,from,consumer,message,consumer,long,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,no,wait,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1502974979;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). 0 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager and generally_discouraged since such a listener container cannot cleanly shut down._A negative value such as -1 indicates a no-wait receive operation._@see #receiveFromConsumer(MessageConsumer, long)_@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receiveNoWait()_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,0,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,and,generally,discouraged,since,such,a,listener,container,cannot,cleanly,shut,down,a,negative,value,such,as,1,indicates,a,no,wait,receive,operation,see,receive,from,consumer,message,consumer,long,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,no,wait,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> public void setReceiveTimeout(long receiveTimeout);1533725446;Set the timeout to use for receive calls, in <b>milliseconds</b>._The default is 1000 ms, that is, 1 second._<p><b>NOTE:</b> This value needs to be smaller than the transaction_timeout used by the transaction manager (in the appropriate unit,_of course). 0 indicates no timeout at all_ however, this is only_feasible if not running within a transaction manager and generally_discouraged since such a listener container cannot cleanly shut down._A negative value such as -1 indicates a no-wait receive operation._@see #receiveFromConsumer(MessageConsumer, long)_@see javax.jms.MessageConsumer#receive(long)_@see javax.jms.MessageConsumer#receiveNoWait()_@see javax.jms.MessageConsumer#receive()_@see #setTransactionTimeout;public void setReceiveTimeout(long receiveTimeout) {_		this.receiveTimeout = receiveTimeout__	};set,the,timeout,to,use,for,receive,calls,in,b,milliseconds,b,the,default,is,1000,ms,that,is,1,second,p,b,note,b,this,value,needs,to,be,smaller,than,the,transaction,timeout,used,by,the,transaction,manager,in,the,appropriate,unit,of,course,0,indicates,no,timeout,at,all,however,this,is,only,feasible,if,not,running,within,a,transaction,manager,and,generally,discouraged,since,such,a,listener,container,cannot,cleanly,shut,down,a,negative,value,such,as,1,indicates,a,no,wait,receive,operation,see,receive,from,consumer,message,consumer,long,see,javax,jms,message,consumer,receive,long,see,javax,jms,message,consumer,receive,no,wait,see,javax,jms,message,consumer,receive,see,set,transaction,timeout;public,void,set,receive,timeout,long,receive,timeout,this,receive,timeout,receive,timeout
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1328020251;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(getConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,get,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1356735495;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(getConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,get,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1357119239;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(getConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,get,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1368482696;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(getConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,get,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1385423968;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(getConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,get,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1401724323;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(getConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,get,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1405696881;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(getConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,get,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1407154420;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(getConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,get,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1429217385;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(getConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,get,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1438003976;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(getConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,get,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1461683397;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(getConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,get,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1473795287;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(getConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,get,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1495868221;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(getConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,get,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1496837955;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(obtainConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,obtain,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1498780456;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(obtainConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,obtain,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1500448076;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(obtainConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,obtain,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1502974979;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(obtainConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,obtain,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Override 	protected boolean isSessionLocallyTransacted(Session session);1533725446;This implementation checks whether the Session is externally synchronized._In this case, the Session is not locally transacted, despite the listener_container's "sessionTransacted" flag being set to "true"._@see org.springframework.jms.connection.JmsResourceHolder;@Override_	protected boolean isSessionLocallyTransacted(Session session) {_		if (!super.isSessionLocallyTransacted(session)) {_			return false__		}_		JmsResourceHolder resourceHolder =_				(JmsResourceHolder) TransactionSynchronizationManager.getResource(obtainConnectionFactory())__		return (resourceHolder == null || resourceHolder instanceof LocallyExposedJmsResourceHolder ||_				!resourceHolder.containsSession(session))__	};this,implementation,checks,whether,the,session,is,externally,synchronized,in,this,case,the,session,is,not,locally,transacted,despite,the,listener,container,s,session,transacted,flag,being,set,to,true,see,org,springframework,jms,connection,jms,resource,holder;override,protected,boolean,is,session,locally,transacted,session,session,if,super,is,session,locally,transacted,session,return,false,jms,resource,holder,resource,holder,jms,resource,holder,transaction,synchronization,manager,get,resource,obtain,connection,factory,return,resource,holder,null,resource,holder,instanceof,locally,exposed,jms,resource,holder,resource,holder,contains,session,session
AbstractPollingMessageListenerContainer -> @Nullable 	protected final PlatformTransactionManager getTransactionManager();1496837955;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;@Nullable_	protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;nullable,protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> @Nullable 	protected final PlatformTransactionManager getTransactionManager();1498780456;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;@Nullable_	protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;nullable,protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> @Nullable 	protected final PlatformTransactionManager getTransactionManager();1500448076;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;@Nullable_	protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;nullable,protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> @Nullable 	protected final PlatformTransactionManager getTransactionManager();1502974979;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;@Nullable_	protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;nullable,protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> @Nullable 	protected final PlatformTransactionManager getTransactionManager();1533725446;Return the Spring PlatformTransactionManager to use for transactional_wrapping of message reception plus listener execution.;@Nullable_	protected final PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,spring,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution;nullable,protected,final,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute( 			Object invoker, @Nullable Session session, @Nullable MessageConsumer consumer) 			throws JMSException;1498780456;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(_			Object invoker, @Nullable Session session, @Nullable MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException | RuntimeException | Error ex) {_				rollbackOnException(this.transactionManager, status, ex)__				throw ex__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,nullable,session,session,nullable,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,runtime,exception,error,ex,rollback,on,exception,this,transaction,manager,status,ex,throw,ex,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute( 			Object invoker, @Nullable Session session, @Nullable MessageConsumer consumer) 			throws JMSException;1500448076;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(_			Object invoker, @Nullable Session session, @Nullable MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException | RuntimeException | Error ex) {_				rollbackOnException(this.transactionManager, status, ex)__				throw ex__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,nullable,session,session,nullable,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,runtime,exception,error,ex,rollback,on,exception,this,transaction,manager,status,ex,throw,ex,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute( 			Object invoker, @Nullable Session session, @Nullable MessageConsumer consumer) 			throws JMSException;1502974979;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(_			Object invoker, @Nullable Session session, @Nullable MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException | RuntimeException | Error ex) {_				rollbackOnException(this.transactionManager, status, ex)__				throw ex__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,nullable,session,session,nullable,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,runtime,exception,error,ex,rollback,on,exception,this,transaction,manager,status,ex,throw,ex,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute( 			Object invoker, @Nullable Session session, @Nullable MessageConsumer consumer) 			throws JMSException;1533725446;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(_			Object invoker, @Nullable Session session, @Nullable MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException | RuntimeException | Error ex) {_				rollbackOnException(this.transactionManager, status, ex)__				throw ex__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,nullable,session,session,nullable,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,runtime,exception,error,ex,rollback,on,exception,this,transaction,manager,status,ex,throw,ex,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1328020251;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			destination = resolveDestinationName(session, getDestinationName())__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,destination,resolve,destination,name,session,get,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1356735495;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			destination = resolveDestinationName(session, getDestinationName())__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,destination,resolve,destination,name,session,get,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1357119239;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			destination = resolveDestinationName(session, getDestinationName())__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,destination,resolve,destination,name,session,get,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1368482696;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			destination = resolveDestinationName(session, getDestinationName())__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,destination,resolve,destination,name,session,get,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1385423968;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			destination = resolveDestinationName(session, getDestinationName())__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,destination,resolve,destination,name,session,get,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1401724323;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			destination = resolveDestinationName(session, getDestinationName())__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,destination,resolve,destination,name,session,get,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1405696881;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			destination = resolveDestinationName(session, getDestinationName())__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,destination,resolve,destination,name,session,get,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1407154420;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			destination = resolveDestinationName(session, getDestinationName())__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,destination,resolve,destination,name,session,get,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1429217385;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			destination = resolveDestinationName(session, getDestinationName())__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,destination,resolve,destination,name,session,get,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1438003976;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			destination = resolveDestinationName(session, getDestinationName())__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,destination,resolve,destination,name,session,get,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1461683397;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			destination = resolveDestinationName(session, getDestinationName())__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,destination,resolve,destination,name,session,get,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1473795287;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			destination = resolveDestinationName(session, getDestinationName())__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,destination,resolve,destination,name,session,get,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1495868221;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			destination = resolveDestinationName(session, getDestinationName())__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,destination,resolve,destination,name,session,get,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1496837955;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			String destinationName = getDestinationName()__			Assert.state(destinationName != null, "No destination set")__			destination = resolveDestinationName(session, destinationName)__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,string,destination,name,get,destination,name,assert,state,destination,name,null,no,destination,set,destination,resolve,destination,name,session,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1498780456;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			String destinationName = getDestinationName()__			Assert.state(destinationName != null, "No destination set")__			destination = resolveDestinationName(session, destinationName)__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,string,destination,name,get,destination,name,assert,state,destination,name,null,no,destination,set,destination,resolve,destination,name,session,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1500448076;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			String destinationName = getDestinationName()__			Assert.state(destinationName != null, "No destination set")__			destination = resolveDestinationName(session, destinationName)__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,string,destination,name,get,destination,name,assert,state,destination,name,null,no,destination,set,destination,resolve,destination,name,session,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1502974979;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			String destinationName = getDestinationName()__			Assert.state(destinationName != null, "No destination set")__			destination = resolveDestinationName(session, destinationName)__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,string,destination,name,get,destination,name,assert,state,destination,name,null,no,destination,set,destination,resolve,destination,name,session,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> protected MessageConsumer createListenerConsumer(Session session) throws JMSException;1533725446;Create a MessageConsumer for the given JMS Session,_registering a MessageListener for the specified listener._@param session the JMS Session to work on_@return the MessageConsumer_@throws javax.jms.JMSException if thrown by JMS methods_@see #receiveAndExecute;protected MessageConsumer createListenerConsumer(Session session) throws JMSException {_		Destination destination = getDestination()__		if (destination == null) {_			String destinationName = getDestinationName()__			Assert.state(destinationName != null, "No destination set")__			destination = resolveDestinationName(session, destinationName)__		}_		return createConsumer(session, destination)__	};create,a,message,consumer,for,the,given,jms,session,registering,a,message,listener,for,the,specified,listener,param,session,the,jms,session,to,work,on,return,the,message,consumer,throws,javax,jms,jmsexception,if,thrown,by,jms,methods,see,receive,and,execute;protected,message,consumer,create,listener,consumer,session,session,throws,jmsexception,destination,destination,get,destination,if,destination,null,string,destination,name,get,destination,name,assert,state,destination,name,null,no,destination,set,destination,resolve,destination,name,session,destination,name,return,create,consumer,session,destination
AbstractPollingMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1328020251;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@see javax.jms.TopicSession#createSubscriber(javax.jms.Topic, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,see,javax,jms,topic,session,create,subscriber,javax,jms,topic,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractPollingMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1356735495;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@see javax.jms.TopicSession#createSubscriber(javax.jms.Topic, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,see,javax,jms,topic,session,create,subscriber,javax,jms,topic,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractPollingMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1357119239;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@see javax.jms.TopicSession#createSubscriber(javax.jms.Topic, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,see,javax,jms,topic,session,create,subscriber,javax,jms,topic,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractPollingMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1368482696;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@see javax.jms.TopicSession#createSubscriber(javax.jms.Topic, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,see,javax,jms,topic,session,create,subscriber,javax,jms,topic,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractPollingMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1385423968;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@see javax.jms.TopicSession#createSubscriber(javax.jms.Topic, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,see,javax,jms,topic,session,create,subscriber,javax,jms,topic,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractPollingMessageListenerContainer -> public void setPubSubNoLocal(boolean pubSubNoLocal);1401724323;Set whether to inhibit the delivery of messages published by its own connection._Default is "false"._@see javax.jms.TopicSession#createSubscriber(javax.jms.Topic, String, boolean);public void setPubSubNoLocal(boolean pubSubNoLocal) {_		this.pubSubNoLocal = pubSubNoLocal__	};set,whether,to,inhibit,the,delivery,of,messages,published,by,its,own,connection,default,is,false,see,javax,jms,topic,session,create,subscriber,javax,jms,topic,string,boolean;public,void,set,pub,sub,no,local,boolean,pub,sub,no,local,this,pub,sub,no,local,pub,sub,no,local
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1328020251;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1356735495;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1357119239;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1368482696;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1385423968;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1401724323;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1405696881;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1407154420;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1429217385;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1438003976;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1461683397;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1473795287;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1495868221;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1496837955;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1498780456;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1500448076;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1502974979;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> protected void noMessageReceived(Object invoker, Session session);1533725446;Template method that gets called when <i>no</i> message has been received,_before returning to the receive loop again. Allows subclasses to react to_the event of no incoming message, for example marking the invoker as idle._@param invoker the invoker object (passed through)_@param session the receiving JMS Session;protected void noMessageReceived(Object invoker, Session session) {_	};template,method,that,gets,called,when,i,no,i,message,has,been,received,before,returning,to,the,receive,loop,again,allows,subclasses,to,react,to,the,event,of,no,incoming,message,for,example,marking,the,invoker,as,idle,param,invoker,the,invoker,object,passed,through,param,session,the,receiving,jms,session;protected,void,no,message,received,object,invoker,session,session
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1328020251;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1356735495;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1357119239;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1368482696;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1385423968;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1401724323;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1405696881;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1407154420;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1429217385;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1438003976;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1461683397;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1473795287;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1495868221;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1496837955;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1498780456;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1500448076;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1502974979;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionName(String transactionName);1533725446;Specify the transaction name to use for transactional wrapping._Default is the bean name of this listener container, if any._@see org.springframework.transaction.TransactionDefinition#getName();public void setTransactionName(String transactionName) {_		this.transactionDefinition.setName(transactionName)__	};specify,the,transaction,name,to,use,for,transactional,wrapping,default,is,the,bean,name,of,this,listener,container,if,any,see,org,springframework,transaction,transaction,definition,get,name;public,void,set,transaction,name,string,transaction,name,this,transaction,definition,set,name,transaction,name
AbstractPollingMessageListenerContainer -> public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager);1500448076;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message). This_allows for fully synchronized Spring transactions based on local JMS_transactions, similar to what_{@link org.springframework.jms.connection.JmsTransactionManager} provides. Check_{@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see #setSessionTransacted(boolean)_@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,this,allows,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,similar,to,what,link,org,springframework,jms,connection,jms,transaction,manager,provides,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,set,session,transacted,boolean,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,nullable,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager);1502974979;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message). This_allows for fully synchronized Spring transactions based on local JMS_transactions, similar to what_{@link org.springframework.jms.connection.JmsTransactionManager} provides. Check_{@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see #setSessionTransacted(boolean)_@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,this,allows,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,similar,to,what,link,org,springframework,jms,connection,jms,transaction,manager,provides,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,set,session,transacted,boolean,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,nullable,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager);1533725446;Specify the Spring {@link org.springframework.transaction.PlatformTransactionManager}_to use for transactional wrapping of message reception plus listener execution._<p>Default is none, not performing any transactional wrapping._If specified, this will usually be a Spring_{@link org.springframework.transaction.jta.JtaTransactionManager} or one_of its subclasses, in combination with a JTA-aware ConnectionFactory that_this message listener container obtains its Connections from._<p><b>Note: Consider the use of local JMS transactions instead.</b>_Simply switch the {@link #setSessionTransacted "sessionTransacted"} flag_to "true" in order to use a locally transacted JMS Session for the entire_receive processing, including any Session operations performed by a_{@link SessionAwareMessageListener} (e.g. sending a response message). This_allows for fully synchronized Spring transactions based on local JMS_transactions, similar to what_{@link org.springframework.jms.connection.JmsTransactionManager} provides. Check_{@link AbstractMessageListenerContainer}'s javadoc for_a discussion of transaction choices and message redelivery scenarios._@see #setSessionTransacted(boolean)_@see org.springframework.transaction.jta.JtaTransactionManager_@see org.springframework.jms.connection.JmsTransactionManager;public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};specify,the,spring,link,org,springframework,transaction,platform,transaction,manager,to,use,for,transactional,wrapping,of,message,reception,plus,listener,execution,p,default,is,none,not,performing,any,transactional,wrapping,if,specified,this,will,usually,be,a,spring,link,org,springframework,transaction,jta,jta,transaction,manager,or,one,of,its,subclasses,in,combination,with,a,jta,aware,connection,factory,that,this,message,listener,container,obtains,its,connections,from,p,b,note,consider,the,use,of,local,jms,transactions,instead,b,simply,switch,the,link,set,session,transacted,session,transacted,flag,to,true,in,order,to,use,a,locally,transacted,jms,session,for,the,entire,receive,processing,including,any,session,operations,performed,by,a,link,session,aware,message,listener,e,g,sending,a,response,message,this,allows,for,fully,synchronized,spring,transactions,based,on,local,jms,transactions,similar,to,what,link,org,springframework,jms,connection,jms,transaction,manager,provides,check,link,abstract,message,listener,container,s,javadoc,for,a,discussion,of,transaction,choices,and,message,redelivery,scenarios,see,set,session,transacted,boolean,see,org,springframework,transaction,jta,jta,transaction,manager,see,org,springframework,jms,connection,jms,transaction,manager;public,void,set,transaction,manager,nullable,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer) 			throws JMSException;1328020251;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (RuntimeException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (Error err) {_				rollbackOnException(status, err)__				throw err__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,session,session,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,ex,rollback,on,exception,status,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,status,ex,throw,ex,catch,error,err,rollback,on,exception,status,err,throw,err,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer) 			throws JMSException;1356735495;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (RuntimeException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (Error err) {_				rollbackOnException(status, err)__				throw err__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,session,session,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,ex,rollback,on,exception,status,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,status,ex,throw,ex,catch,error,err,rollback,on,exception,status,err,throw,err,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer) 			throws JMSException;1357119239;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (RuntimeException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (Error err) {_				rollbackOnException(status, err)__				throw err__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,session,session,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,ex,rollback,on,exception,status,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,status,ex,throw,ex,catch,error,err,rollback,on,exception,status,err,throw,err,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer) 			throws JMSException;1368482696;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (RuntimeException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (Error err) {_				rollbackOnException(status, err)__				throw err__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,session,session,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,ex,rollback,on,exception,status,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,status,ex,throw,ex,catch,error,err,rollback,on,exception,status,err,throw,err,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer) 			throws JMSException;1385423968;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (RuntimeException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (Error err) {_				rollbackOnException(status, err)__				throw err__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,session,session,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,ex,rollback,on,exception,status,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,status,ex,throw,ex,catch,error,err,rollback,on,exception,status,err,throw,err,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer) 			throws JMSException;1401724323;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (RuntimeException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (Error err) {_				rollbackOnException(status, err)__				throw err__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,session,session,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,ex,rollback,on,exception,status,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,status,ex,throw,ex,catch,error,err,rollback,on,exception,status,err,throw,err,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer) 			throws JMSException;1405696881;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (RuntimeException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (Error err) {_				rollbackOnException(status, err)__				throw err__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,session,session,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,ex,rollback,on,exception,status,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,status,ex,throw,ex,catch,error,err,rollback,on,exception,status,err,throw,err,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer) 			throws JMSException;1407154420;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (RuntimeException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (Error err) {_				rollbackOnException(status, err)__				throw err__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,session,session,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,ex,rollback,on,exception,status,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,status,ex,throw,ex,catch,error,err,rollback,on,exception,status,err,throw,err,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer) 			throws JMSException;1429217385;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (RuntimeException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (Error err) {_				rollbackOnException(status, err)__				throw err__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,session,session,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,ex,rollback,on,exception,status,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,status,ex,throw,ex,catch,error,err,rollback,on,exception,status,err,throw,err,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer) 			throws JMSException;1438003976;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (RuntimeException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (Error err) {_				rollbackOnException(status, err)__				throw err__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,session,session,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,ex,rollback,on,exception,status,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,status,ex,throw,ex,catch,error,err,rollback,on,exception,status,err,throw,err,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer) 			throws JMSException;1461683397;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (RuntimeException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (Error err) {_				rollbackOnException(status, err)__				throw err__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,session,session,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,ex,rollback,on,exception,status,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,status,ex,throw,ex,catch,error,err,rollback,on,exception,status,err,throw,err,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer) 			throws JMSException;1473795287;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (RuntimeException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (Error err) {_				rollbackOnException(status, err)__				throw err__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,session,session,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,ex,rollback,on,exception,status,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,status,ex,throw,ex,catch,error,err,rollback,on,exception,status,err,throw,err,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer) 			throws JMSException;1495868221;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (RuntimeException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (Error err) {_				rollbackOnException(status, err)__				throw err__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,session,session,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,ex,rollback,on,exception,status,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,status,ex,throw,ex,catch,error,err,rollback,on,exception,status,err,throw,err,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
AbstractPollingMessageListenerContainer -> protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer) 			throws JMSException;1496837955;Execute the listener for a message received from the given consumer,_wrapping the entire operation in an external transaction if demanded._@param session the JMS Session to work on_@param consumer the MessageConsumer to work on_@return whether a message has been received_@throws JMSException if thrown by JMS methods_@see #doReceiveAndExecute;protected boolean receiveAndExecute(Object invoker, Session session, MessageConsumer consumer)_			throws JMSException {__		if (this.transactionManager != null) {_			_			TransactionStatus status = this.transactionManager.getTransaction(this.transactionDefinition)__			boolean messageReceived__			try {_				messageReceived = doReceiveAndExecute(invoker, session, consumer, status)__			}_			catch (JMSException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (RuntimeException ex) {_				rollbackOnException(status, ex)__				throw ex__			}_			catch (Error err) {_				rollbackOnException(status, err)__				throw err__			}_			this.transactionManager.commit(status)__			return messageReceived__		}__		else {_			_			return doReceiveAndExecute(invoker, session, consumer, null)__		}_	};execute,the,listener,for,a,message,received,from,the,given,consumer,wrapping,the,entire,operation,in,an,external,transaction,if,demanded,param,session,the,jms,session,to,work,on,param,consumer,the,message,consumer,to,work,on,return,whether,a,message,has,been,received,throws,jmsexception,if,thrown,by,jms,methods,see,do,receive,and,execute;protected,boolean,receive,and,execute,object,invoker,session,session,message,consumer,consumer,throws,jmsexception,if,this,transaction,manager,null,transaction,status,status,this,transaction,manager,get,transaction,this,transaction,definition,boolean,message,received,try,message,received,do,receive,and,execute,invoker,session,consumer,status,catch,jmsexception,ex,rollback,on,exception,status,ex,throw,ex,catch,runtime,exception,ex,rollback,on,exception,status,ex,throw,ex,catch,error,err,rollback,on,exception,status,err,throw,err,this,transaction,manager,commit,status,return,message,received,else,return,do,receive,and,execute,invoker,session,consumer,null
