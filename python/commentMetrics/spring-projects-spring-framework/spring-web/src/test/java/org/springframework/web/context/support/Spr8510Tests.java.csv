commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void abstractRefreshableWAC_respectsProgrammaticConfigLocations() {     XmlWebApplicationContext ctx = new XmlWebApplicationContext().     ctx.setConfigLocation("programmatic.xml").     ContextLoaderListener cll = new ContextLoaderListener(ctx).     MockServletContext sc = new MockServletContext().     try {         cll.contextInitialized(new ServletContextEvent(sc)).         fail("expected exception").     } catch (Throwable t) {         // assert that an attempt was made to load the correct XML         assertTrue(t.getMessage(), t.getMessage().endsWith("Could not open ServletContext resource [/programmatic.xml]")).     } }
true;public;0;19;/**  * If a contextConfigLocation init-param has been specified for the ContextLoaderListener,  * then it should take precedence. This is generally not a recommended practice, but  * when it does happen, the init-param should be considered more specific than the  * programmatic configuration, given that it still quite possibly externalized in  * hybrid web.xml + WebApplicationInitializer cases.  */ ;/**  * If a contextConfigLocation init-param has been specified for the ContextLoaderListener,  * then it should take precedence. This is generally not a recommended practice, but  * when it does happen, the init-param should be considered more specific than the  * programmatic configuration, given that it still quite possibly externalized in  * hybrid web.xml + WebApplicationInitializer cases.  */ @Test public void abstractRefreshableWAC_respectsInitParam_overProgrammaticConfigLocations() {     XmlWebApplicationContext ctx = new XmlWebApplicationContext().     ctx.setConfigLocation("programmatic.xml").     ContextLoaderListener cll = new ContextLoaderListener(ctx).     MockServletContext sc = new MockServletContext().     sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, "from-init-param.xml").     try {         cll.contextInitialized(new ServletContextEvent(sc)).         fail("expected exception").     } catch (Throwable t) {         // assert that an attempt was made to load the correct XML         assertTrue(t.getMessage(), t.getMessage().endsWith("Could not open ServletContext resource [/from-init-param.xml]")).     } }
true;public;0;19;/**  * If setConfigLocation has not been called explicitly against the application context,  * then fall back to the ContextLoaderListener init-param if present.  */ ;/**  * If setConfigLocation has not been called explicitly against the application context,  * then fall back to the ContextLoaderListener init-param if present.  */ @Test public void abstractRefreshableWAC_fallsBackToInitParam() {     XmlWebApplicationContext ctx = new XmlWebApplicationContext().     // ctx.setConfigLocation("programmatic.xml"). // nothing set programmatically     ContextLoaderListener cll = new ContextLoaderListener(ctx).     MockServletContext sc = new MockServletContext().     sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, "from-init-param.xml").     try {         cll.contextInitialized(new ServletContextEvent(sc)).         fail("expected exception").     } catch (Throwable t) {         // assert that an attempt was made to load the correct XML         assertTrue(t.getMessage().endsWith("Could not open ServletContext resource [/from-init-param.xml]")).     } }
false;protected;0;4;;@Override protected String[] getDefaultConfigLocations() {     return new String[] { "/WEB-INF/custom.xml" }. }
true;public;0;25;/**  * Ensure that any custom default locations are still respected.  */ ;/**  * Ensure that any custom default locations are still respected.  */ @Test public void customAbstractRefreshableWAC_fallsBackToInitParam() {     XmlWebApplicationContext ctx = new XmlWebApplicationContext() {          @Override         protected String[] getDefaultConfigLocations() {             return new String[] { "/WEB-INF/custom.xml" }.         }     }.     // ctx.setConfigLocation("programmatic.xml"). // nothing set programmatically     ContextLoaderListener cll = new ContextLoaderListener(ctx).     MockServletContext sc = new MockServletContext().     sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM, "from-init-param.xml").     try {         cll.contextInitialized(new ServletContextEvent(sc)).         fail("expected exception").     } catch (Throwable t) {         // assert that an attempt was made to load the correct XML         System.out.println(t.getMessage()).         assertTrue(t.getMessage().endsWith("Could not open ServletContext resource [/from-init-param.xml]")).     } }
true;public;0;21;/**  * If context config locations have been specified neither against the application  * context nor the context loader listener, then fall back to default values.  */ ;/**  * If context config locations have been specified neither against the application  * context nor the context loader listener, then fall back to default values.  */ @Test public void abstractRefreshableWAC_fallsBackToConventionBasedNaming() {     XmlWebApplicationContext ctx = new XmlWebApplicationContext().     // ctx.setConfigLocation("programmatic.xml"). // nothing set programmatically     ContextLoaderListener cll = new ContextLoaderListener(ctx).     MockServletContext sc = new MockServletContext().     try {         cll.contextInitialized(new ServletContextEvent(sc)).         fail("expected exception").     } catch (Throwable t) {         // assert that an attempt was made to load the correct XML         System.out.println(t.getMessage()).         assertTrue(t.getMessage().endsWith("Could not open ServletContext resource [/WEB-INF/applicationContext.xml]")).     } }
true;public;0;10;/**  * Ensure that ContextLoaderListener and GenericWebApplicationContext interact nicely.  */ ;/**  * Ensure that ContextLoaderListener and GenericWebApplicationContext interact nicely.  */ @Test public void genericWAC() {     GenericWebApplicationContext ctx = new GenericWebApplicationContext().     ContextLoaderListener cll = new ContextLoaderListener(ctx).     ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(ctx).     scanner.scan("bogus.pkg").     cll.contextInitialized(new ServletContextEvent(new MockServletContext())). }
true;public;0;9;/**  * Ensure that ContextLoaderListener and AnnotationConfigApplicationContext interact nicely.  */ ;/**  * Ensure that ContextLoaderListener and AnnotationConfigApplicationContext interact nicely.  */ @Test public void annotationConfigWAC() {     AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext().     ctx.scan("does.not.matter").     ContextLoaderListener cll = new ContextLoaderListener(ctx).     cll.contextInitialized(new ServletContextEvent(new MockServletContext())). }
