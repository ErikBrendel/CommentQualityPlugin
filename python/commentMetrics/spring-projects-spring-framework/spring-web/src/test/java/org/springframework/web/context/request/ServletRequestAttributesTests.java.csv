commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void ctorRejectsNullArg() throws Exception {     new ServletRequestAttributes(null). }
false;public;0;8;;@Test public void setRequestScopedAttribute() throws Exception {     MockHttpServletRequest request = new MockHttpServletRequest().     ServletRequestAttributes attrs = new ServletRequestAttributes(request).     attrs.setAttribute(KEY, VALUE, RequestAttributes.SCOPE_REQUEST).     Object value = request.getAttribute(KEY).     assertSame(VALUE, value). }
false;public;0;13;;@Test public void setRequestScopedAttributeAfterCompletion() throws Exception {     MockHttpServletRequest request = new MockHttpServletRequest().     ServletRequestAttributes attrs = new ServletRequestAttributes(request).     request.close().     try {         attrs.setAttribute(KEY, VALUE, RequestAttributes.SCOPE_REQUEST).         fail("Should have thrown IllegalStateException").     } catch (IllegalStateException ex) {     // expected     } }
false;public;0;10;;@Test public void setSessionScopedAttribute() throws Exception {     MockHttpSession session = new MockHttpSession().     session.setAttribute(KEY, VALUE).     MockHttpServletRequest request = new MockHttpServletRequest().     request.setSession(session).     ServletRequestAttributes attrs = new ServletRequestAttributes(request).     attrs.setAttribute(KEY, VALUE, RequestAttributes.SCOPE_SESSION).     assertSame(VALUE, session.getAttribute(KEY)). }
false;public;0;13;;@Test public void setSessionScopedAttributeAfterCompletion() throws Exception {     MockHttpSession session = new MockHttpSession().     session.setAttribute(KEY, VALUE).     MockHttpServletRequest request = new MockHttpServletRequest().     request.setSession(session).     ServletRequestAttributes attrs = new ServletRequestAttributes(request).     assertSame(VALUE, attrs.getAttribute(KEY, RequestAttributes.SCOPE_SESSION)).     attrs.requestCompleted().     request.close().     attrs.setAttribute(KEY, VALUE, RequestAttributes.SCOPE_SESSION).     assertSame(VALUE, session.getAttribute(KEY)). }
false;public;0;9;;@Test public void getSessionScopedAttributeDoesNotForceCreationOfSession() throws Exception {     HttpServletRequest request = mock(HttpServletRequest.class).     ServletRequestAttributes attrs = new ServletRequestAttributes(request).     Object value = attrs.getAttribute(KEY, RequestAttributes.SCOPE_SESSION).     assertNull(value).     verify(request).getSession(false). }
false;public;0;11;;@Test public void removeSessionScopedAttribute() throws Exception {     MockHttpSession session = new MockHttpSession().     session.setAttribute(KEY, VALUE).     MockHttpServletRequest request = new MockHttpServletRequest().     request.setSession(session).     ServletRequestAttributes attrs = new ServletRequestAttributes(request).     attrs.removeAttribute(KEY, RequestAttributes.SCOPE_SESSION).     Object value = session.getAttribute(KEY).     assertNull(value). }
false;public;0;8;;@Test public void removeSessionScopedAttributeDoesNotForceCreationOfSession() throws Exception {     HttpServletRequest request = mock(HttpServletRequest.class).     ServletRequestAttributes attrs = new ServletRequestAttributes(request).     attrs.removeAttribute(KEY, RequestAttributes.SCOPE_SESSION).     verify(request).getSession(false). }
false;public;0;15;;@Test public void updateAccessedAttributes() throws Exception {     HttpServletRequest request = mock(HttpServletRequest.class).     HttpSession session = mock(HttpSession.class).     given(request.getSession(anyBoolean())).willReturn(session).     given(session.getAttribute(KEY)).willReturn(VALUE).     ServletRequestAttributes attrs = new ServletRequestAttributes(request).     assertSame(VALUE, attrs.getAttribute(KEY, RequestAttributes.SCOPE_SESSION)).     attrs.requestCompleted().     verify(session, times(2)).getAttribute(KEY).     verify(session).setAttribute(KEY, VALUE).     verifyNoMoreInteractions(session). }
false;public;0;4;;@Test public void skipImmutableString() {     doSkipImmutableValue("someString"). }
false;public;0;4;;@Test public void skipImmutableCharacter() {     doSkipImmutableValue(new Character('x')). }
false;public;0;4;;@Test public void skipImmutableBoolean() {     doSkipImmutableValue(Boolean.TRUE). }
false;public;0;4;;@Test public void skipImmutableInteger() {     doSkipImmutableValue(new Integer(1)). }
false;public;0;4;;@Test public void skipImmutableFloat() {     doSkipImmutableValue(new Float(1.1)). }
false;public;0;4;;@Test public void skipImmutableBigInteger() {     doSkipImmutableValue(new BigInteger("1")). }
false;private;1;13;;private void doSkipImmutableValue(Object immutableValue) {     HttpServletRequest request = mock(HttpServletRequest.class).     HttpSession session = mock(HttpSession.class).     given(request.getSession(anyBoolean())).willReturn(session).     given(session.getAttribute(KEY)).willReturn(immutableValue).     ServletRequestAttributes attrs = new ServletRequestAttributes(request).     attrs.getAttribute(KEY, RequestAttributes.SCOPE_SESSION).     attrs.requestCompleted().     verify(session, times(2)).getAttribute(KEY).     verifyNoMoreInteractions(session). }
