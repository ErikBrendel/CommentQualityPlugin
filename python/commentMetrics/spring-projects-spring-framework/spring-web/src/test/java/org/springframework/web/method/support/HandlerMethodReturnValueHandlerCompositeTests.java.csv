commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before public void setUp() throws Exception {     this.integerType = new MethodParameter(getClass().getDeclaredMethod("handleInteger"), -1).     this.stringType = new MethodParameter(getClass().getDeclaredMethod("handleString"), -1).     this.integerHandler = mock(HandlerMethodReturnValueHandler.class).     when(this.integerHandler.supportsReturnType(this.integerType)).thenReturn(true).     this.handlers = new HandlerMethodReturnValueHandlerComposite().     this.handlers.addHandler(this.integerHandler).     mavContainer = new ModelAndViewContainer(). }
false;public;0;5;;@Test public void supportsReturnType() throws Exception {     assertTrue(this.handlers.supportsReturnType(this.integerType)).     assertFalse(this.handlers.supportsReturnType(this.stringType)). }
false;public;0;5;;@Test public void handleReturnValue() throws Exception {     this.handlers.handleReturnValue(55, this.integerType, this.mavContainer, null).     verify(this.integerHandler).handleReturnValue(55, this.integerType, this.mavContainer, null). }
false;public;0;10;;@Test public void handleReturnValueWithMultipleHandlers() throws Exception {     HandlerMethodReturnValueHandler anotherIntegerHandler = mock(HandlerMethodReturnValueHandler.class).     when(anotherIntegerHandler.supportsReturnType(this.integerType)).thenReturn(true).     this.handlers.handleReturnValue(55, this.integerType, this.mavContainer, null).     verify(this.integerHandler).handleReturnValue(55, this.integerType, this.mavContainer, null).     verifyNoMoreInteractions(anotherIntegerHandler). }
false;public;0;23;;// SPR-13083 @Test public void handleReturnValueWithAsyncHandler() throws Exception {     Promise<Integer> promise = new Promise<>().     MethodParameter promiseType = new MethodParameter(getClass().getDeclaredMethod("handlePromise"), -1).     HandlerMethodReturnValueHandler responseBodyHandler = mock(HandlerMethodReturnValueHandler.class).     when(responseBodyHandler.supportsReturnType(promiseType)).thenReturn(true).     this.handlers.addHandler(responseBodyHandler).     AsyncHandlerMethodReturnValueHandler promiseHandler = mock(AsyncHandlerMethodReturnValueHandler.class).     when(promiseHandler.supportsReturnType(promiseType)).thenReturn(true).     when(promiseHandler.isAsyncReturnValue(promise, promiseType)).thenReturn(true).     this.handlers.addHandler(promiseHandler).     this.handlers.handleReturnValue(promise, promiseType, this.mavContainer, null).     verify(promiseHandler).isAsyncReturnValue(promise, promiseType).     verify(promiseHandler).supportsReturnType(promiseType).     verify(promiseHandler).handleReturnValue(promise, promiseType, this.mavContainer, null).     verifyNoMoreInteractions(promiseHandler).     verifyNoMoreInteractions(responseBodyHandler). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void noSuitableReturnValueHandler() throws Exception {     this.handlers.handleReturnValue("value", this.stringType, null, null). }
false;private;0;3;;private Integer handleInteger() {     return null. }
false;private;0;3;;private String handleString() {     return null. }
false;private;0;3;;private Promise<Integer> handlePromise() {     return null. }
