commented;modifiers;parameterAmount;loc;comment;code
false;static,public;0;7;;@Parameters(name = "{0}") static public Iterable<Object[]> safeMethods() {     return Arrays.asList(new Object[][] { { HttpMethod.GET }, { HttpMethod.HEAD } }). }
false;public;0;6;;@Before public void setup() throws URISyntaxException {     this.currentDate = Instant.now().truncatedTo(ChronoUnit.SECONDS).     this.dateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US).     this.dateFormat.setTimeZone(TimeZone.getTimeZone("GMT")). }
false;public;0;10;;@Test public void checkNotModifiedNon2xxStatus() {     MockServerHttpRequest request = get("/").ifModifiedSince(this.currentDate.toEpochMilli()).build().     MockServerWebExchange exchange = MockServerWebExchange.from(request).     exchange.getResponse().setStatusCode(HttpStatus.NOT_MODIFIED).     assertFalse(exchange.checkNotModified(this.currentDate)).     assertEquals(304, exchange.getResponse().getStatusCode().value()).     assertEquals(-1, exchange.getResponse().getHeaders().getLastModified()). }
false;public;0;8;;// SPR-14559 @Test public void checkNotModifiedInvalidIfNoneMatchHeader() {     String eTag = "\"etagvalue\"".     MockServerWebExchange exchange = MockServerWebExchange.from(get("/").ifNoneMatch("missingquotes")).     assertFalse(exchange.checkNotModified(eTag)).     assertNull(exchange.getResponse().getStatusCode()).     assertEquals(eTag, exchange.getResponse().getHeaders().getETag()). }
false;public;0;11;;@Test public void checkNotModifiedHeaderAlreadySet() {     MockServerHttpRequest request = get("/").ifModifiedSince(currentDate.toEpochMilli()).build().     MockServerWebExchange exchange = MockServerWebExchange.from(request).     exchange.getResponse().getHeaders().add("Last-Modified", CURRENT_TIME).     assertTrue(exchange.checkNotModified(currentDate)).     assertEquals(304, exchange.getResponse().getStatusCode().value()).     assertEquals(1, exchange.getResponse().getHeaders().get("Last-Modified").size()).     assertEquals(CURRENT_TIME, exchange.getResponse().getHeaders().getFirst("Last-Modified")). }
false;public;0;10;;@Test public void checkNotModifiedTimestamp() throws Exception {     MockServerHttpRequest request = get("/").ifModifiedSince(currentDate.toEpochMilli()).build().     MockServerWebExchange exchange = MockServerWebExchange.from(request).     assertTrue(exchange.checkNotModified(currentDate)).     assertEquals(304, exchange.getResponse().getStatusCode().value()).     assertEquals(currentDate.toEpochMilli(), exchange.getResponse().getHeaders().getLastModified()). }
false;public;0;11;;@Test public void checkModifiedTimestamp() {     Instant oneMinuteAgo = currentDate.minusSeconds(60).     MockServerHttpRequest request = get("/").ifModifiedSince(oneMinuteAgo.toEpochMilli()).build().     MockServerWebExchange exchange = MockServerWebExchange.from(request).     assertFalse(exchange.checkNotModified(currentDate)).     assertNull(exchange.getResponse().getStatusCode()).     assertEquals(currentDate.toEpochMilli(), exchange.getResponse().getHeaders().getLastModified()). }
false;public;0;10;;@Test public void checkNotModifiedETag() {     String eTag = "\"Foo\"".     MockServerWebExchange exchange = MockServerWebExchange.from(get("/").ifNoneMatch(eTag)).     assertTrue(exchange.checkNotModified(eTag)).     assertEquals(304, exchange.getResponse().getStatusCode().value()).     assertEquals(eTag, exchange.getResponse().getHeaders().getETag()). }
false;public;0;10;;@Test public void checkNotModifiedETagWithSeparatorChars() {     String eTag = "\"Foo, Bar\"".     MockServerWebExchange exchange = MockServerWebExchange.from(get("/").ifNoneMatch(eTag)).     assertTrue(exchange.checkNotModified(eTag)).     assertEquals(304, exchange.getResponse().getStatusCode().value()).     assertEquals(eTag, exchange.getResponse().getHeaders().getETag()). }
false;public;0;11;;@Test public void checkModifiedETag() {     String currentETag = "\"Foo\"".     String oldEtag = "Bar".     MockServerWebExchange exchange = MockServerWebExchange.from(get("/").ifNoneMatch(oldEtag)).     assertFalse(exchange.checkNotModified(currentETag)).     assertNull(exchange.getResponse().getStatusCode()).     assertEquals(currentETag, exchange.getResponse().getHeaders().getETag()). }
false;public;0;11;;@Test public void checkNotModifiedUnpaddedETag() {     String eTag = "Foo".     String paddedEtag = String.format("\"%s\"", eTag).     MockServerWebExchange exchange = MockServerWebExchange.from(get("/").ifNoneMatch(paddedEtag)).     assertTrue(exchange.checkNotModified(eTag)).     assertEquals(304, exchange.getResponse().getStatusCode().value()).     assertEquals(paddedEtag, exchange.getResponse().getHeaders().getETag()). }
false;public;0;11;;@Test public void checkModifiedUnpaddedETag() {     String currentETag = "Foo".     String oldEtag = "Bar".     MockServerWebExchange exchange = MockServerWebExchange.from(get("/").ifNoneMatch(oldEtag)).     assertFalse(exchange.checkNotModified(currentETag)).     assertNull(exchange.getResponse().getStatusCode()).     assertEquals(String.format("\"%s\"", currentETag), exchange.getResponse().getHeaders().getETag()). }
false;public;0;9;;@Test public void checkNotModifiedWildcardIsIgnored() {     String eTag = "\"Foo\"".     MockServerWebExchange exchange = MockServerWebExchange.from(get("/").ifNoneMatch("*")).     assertFalse(exchange.checkNotModified(eTag)).     assertNull(exchange.getResponse().getStatusCode()).     assertEquals(eTag, exchange.getResponse().getHeaders().getETag()). }
false;public;0;13;;@Test public void checkNotModifiedETagAndTimestamp() {     String eTag = "\"Foo\"".     long time = currentDate.toEpochMilli().     MockServerHttpRequest request = get("/").ifNoneMatch(eTag).ifModifiedSince(time).build().     MockServerWebExchange exchange = MockServerWebExchange.from(request).     assertTrue(exchange.checkNotModified(eTag, currentDate)).     assertEquals(304, exchange.getResponse().getStatusCode().value()).     assertEquals(eTag, exchange.getResponse().getHeaders().getETag()).     assertEquals(time, exchange.getResponse().getHeaders().getLastModified()). }
true;public;0;15;// SPR-14224 ;// SPR-14224 @Test public void checkNotModifiedETagAndModifiedTimestamp() {     String eTag = "\"Foo\"".     Instant oneMinuteAgo = currentDate.minusSeconds(60).     MockServerWebExchange exchange = MockServerWebExchange.from(get("/").ifNoneMatch(eTag).ifModifiedSince(oneMinuteAgo.toEpochMilli())).     assertTrue(exchange.checkNotModified(eTag, currentDate)).     assertEquals(304, exchange.getResponse().getStatusCode().value()).     assertEquals(eTag, exchange.getResponse().getHeaders().getETag()).     assertEquals(currentDate.toEpochMilli(), exchange.getResponse().getHeaders().getLastModified()). }
false;public;0;14;;@Test public void checkModifiedETagAndNotModifiedTimestamp() throws Exception {     String currentETag = "\"Foo\"".     String oldEtag = "\"Bar\"".     long time = currentDate.toEpochMilli().     MockServerHttpRequest request = get("/").ifNoneMatch(oldEtag).ifModifiedSince(time).build().     MockServerWebExchange exchange = MockServerWebExchange.from(request).     assertFalse(exchange.checkNotModified(currentETag, currentDate)).     assertNull(exchange.getResponse().getStatusCode()).     assertEquals(currentETag, exchange.getResponse().getHeaders().getETag()).     assertEquals(time, exchange.getResponse().getHeaders().getLastModified()). }
false;public;0;11;;@Test public void checkNotModifiedETagWeakStrong() {     String eTag = "\"Foo\"".     String weakEtag = String.format("W/%s", eTag).     MockServerWebExchange exchange = MockServerWebExchange.from(get("/").ifNoneMatch(eTag)).     assertTrue(exchange.checkNotModified(weakEtag)).     assertEquals(304, exchange.getResponse().getStatusCode().value()).     assertEquals(weakEtag, exchange.getResponse().getHeaders().getETag()). }
false;public;0;11;;@Test public void checkNotModifiedETagStrongWeak() {     String eTag = "\"Foo\"".     MockServerHttpRequest request = get("/").ifNoneMatch(String.format("W/%s", eTag)).build().     MockServerWebExchange exchange = MockServerWebExchange.from(request).     assertTrue(exchange.checkNotModified(eTag)).     assertEquals(304, exchange.getResponse().getStatusCode().value()).     assertEquals(eTag, exchange.getResponse().getHeaders().getETag()). }
false;public;0;11;;@Test public void checkNotModifiedMultipleETags() {     String eTag = "\"Bar\"".     String multipleETags = String.format("\"Foo\", %s", eTag).     MockServerWebExchange exchange = MockServerWebExchange.from(get("/").ifNoneMatch(multipleETags)).     assertTrue(exchange.checkNotModified(eTag)).     assertEquals(304, exchange.getResponse().getStatusCode().value()).     assertEquals(eTag, exchange.getResponse().getHeaders().getETag()). }
false;public;0;12;;@Test public void checkNotModifiedTimestampWithLengthPart() throws Exception {     long epochTime = dateFormat.parse(CURRENT_TIME).getTime().     String header = "Wed, 09 Apr 2014 09:57:42 GMT. length=13774".     MockServerHttpRequest request = get("/").header("If-Modified-Since", header).build().     MockServerWebExchange exchange = MockServerWebExchange.from(request).     assertTrue(exchange.checkNotModified(Instant.ofEpochMilli(epochTime))).     assertEquals(304, exchange.getResponse().getStatusCode().value()).     assertEquals(epochTime, exchange.getResponse().getHeaders().getLastModified()). }
false;public;0;12;;@Test public void checkModifiedTimestampWithLengthPart() throws Exception {     long epochTime = dateFormat.parse(CURRENT_TIME).getTime().     String header = "Tue, 08 Apr 2014 09:57:42 GMT. length=13774".     MockServerHttpRequest request = get("/").header("If-Modified-Since", header).build().     MockServerWebExchange exchange = MockServerWebExchange.from(request).     assertFalse(exchange.checkNotModified(Instant.ofEpochMilli(epochTime))).     assertNull(exchange.getResponse().getStatusCode()).     assertEquals(epochTime, exchange.getResponse().getHeaders().getLastModified()). }
false;public;0;11;;@Test public void checkNotModifiedTimestampConditionalPut() throws Exception {     Instant oneMinuteAgo = currentDate.minusSeconds(60).     long millis = currentDate.toEpochMilli().     MockServerHttpRequest request = MockServerHttpRequest.put("/").ifUnmodifiedSince(millis).build().     MockServerWebExchange exchange = MockServerWebExchange.from(request).     assertFalse(exchange.checkNotModified(oneMinuteAgo)).     assertNull(exchange.getResponse().getStatusCode()).     assertEquals(-1, exchange.getResponse().getHeaders().getLastModified()). }
false;public;0;11;;@Test public void checkNotModifiedTimestampConditionalPutConflict() throws Exception {     Instant oneMinuteAgo = currentDate.minusSeconds(60).     long millis = oneMinuteAgo.toEpochMilli().     MockServerHttpRequest request = MockServerHttpRequest.put("/").ifUnmodifiedSince(millis).build().     MockServerWebExchange exchange = MockServerWebExchange.from(request).     assertTrue(exchange.checkNotModified(currentDate)).     assertEquals(412, exchange.getResponse().getStatusCode().value()).     assertEquals(-1, exchange.getResponse().getHeaders().getLastModified()). }
