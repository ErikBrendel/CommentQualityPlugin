commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;// SPR-15074 @Test public void orderedWebFilterBeans() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(OrderedWebFilterBeanConfig.class).     context.refresh().     HttpHandler httpHandler = WebHttpHandlerBuilder.applicationContext(context).build().     assertTrue(httpHandler instanceof HttpWebHandlerAdapter).     assertSame(context, ((HttpWebHandlerAdapter) httpHandler).getApplicationContext()).     MockServerHttpRequest request = MockServerHttpRequest.get("/").build().     MockServerHttpResponse response = new MockServerHttpResponse().     httpHandler.handle(request, response).block(ofMillis(5000)).     assertEquals("FilterB::FilterA", response.getBodyAsString().block(ofMillis(5000))). }
false;public;0;10;;@Test public void forwardedHeaderFilter() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(ForwardedHeaderFilterConfig.class).     context.refresh().     WebHttpHandlerBuilder builder = WebHttpHandlerBuilder.applicationContext(context).     builder.filters(filters -> assertEquals(Collections.emptyList(), filters)).     assertTrue(builder.hasForwardedHeaderTransformer()). }
false;public;0;13;;// SPR-15074 @Test public void orderedWebExceptionHandlerBeans() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(OrderedExceptionHandlerBeanConfig.class).     context.refresh().     HttpHandler httpHandler = WebHttpHandlerBuilder.applicationContext(context).build().     MockServerHttpRequest request = MockServerHttpRequest.get("/").build().     MockServerHttpResponse response = new MockServerHttpResponse().     httpHandler.handle(request, response).block(ofMillis(5000)).     assertEquals("ExceptionHandlerB", response.getBodyAsString().block(ofMillis(5000))). }
false;public;0;13;;@Test public void configWithoutFilters() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(NoFilterConfig.class).     context.refresh().     HttpHandler httpHandler = WebHttpHandlerBuilder.applicationContext(context).build().     MockServerHttpRequest request = MockServerHttpRequest.get("/").build().     MockServerHttpResponse response = new MockServerHttpResponse().     httpHandler.handle(request, response).block(ofMillis(5000)).     assertEquals("handled", response.getBodyAsString().block(ofMillis(5000))). }
false;public;0;10;;// SPR-16972 @Test public void cloneWithApplicationContext() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(NoFilterConfig.class).     context.refresh().     WebHttpHandlerBuilder builder = WebHttpHandlerBuilder.applicationContext(context).     assertSame(context, ((HttpWebHandlerAdapter) builder.build()).getApplicationContext()).     assertSame(context, ((HttpWebHandlerAdapter) builder.clone().build()).getApplicationContext()). }
false;private,static;2;5;;private static Mono<Void> writeToResponse(ServerWebExchange exchange, String value) {     byte[] bytes = value.getBytes(StandardCharsets.UTF_8).     DataBuffer buffer = new DefaultDataBufferFactory().wrap(bytes).     return exchange.getResponse().writeWith(Flux.just(buffer)). }
false;public;0;4;;@Bean @Order(2) public WebFilter filterA() {     return createFilter("FilterA"). }
false;public;0;4;;@Bean @Order(1) public WebFilter filterB() {     return createFilter("FilterB"). }
false;private;1;8;;private WebFilter createFilter(String name) {     return (exchange, chain) -> {         String value = exchange.getAttribute(ATTRIBUTE).         value = (value != null ? value + "::" + name : name).         exchange.getAttributes().put(ATTRIBUTE, value).         return chain.filter(exchange).     }. }
false;public;0;7;;@Bean public WebHandler webHandler() {     return exchange -> {         String value = exchange.getAttributeOrDefault(ATTRIBUTE, "none").         return writeToResponse(exchange, value).     }. }
false;public;0;5;;@Bean @Order(2) public WebExceptionHandler exceptionHandlerA() {     return (exchange, ex) -> writeToResponse(exchange, "ExceptionHandlerA"). }
false;public;0;5;;@Bean @Order(1) public WebExceptionHandler exceptionHandlerB() {     return (exchange, ex) -> writeToResponse(exchange, "ExceptionHandlerB"). }
false;public;0;4;;@Bean public WebHandler webHandler() {     return exchange -> Mono.error(new Exception()). }
false;public;0;5;;@Bean @SuppressWarnings("deprecation") public WebFilter forwardedHeaderFilter() {     return new org.springframework.web.filter.reactive.ForwardedHeaderFilter(). }
false;public;0;4;;@Bean public WebHandler webHandler() {     return exchange -> Mono.error(new Exception()). }
false;public;0;4;;@Bean public WebHandler webHandler() {     return exchange -> writeToResponse(exchange, "handled"). }
