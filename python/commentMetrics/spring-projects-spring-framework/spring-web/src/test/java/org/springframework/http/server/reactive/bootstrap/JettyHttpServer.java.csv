commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;18;;@Override protected void initServer() throws Exception {     this.jettyServer = new Server().     ServletHttpHandlerAdapter servlet = createServletAdapter().     ServletHolder servletHolder = new ServletHolder(servlet).     servletHolder.setAsyncSupported(true).     this.contextHandler = new ServletContextHandler(this.jettyServer, "", false, false).     this.contextHandler.addServlet(servletHolder, "/").     this.contextHandler.start().     ServerConnector connector = new ServerConnector(this.jettyServer).     connector.setHost(getHost()).     connector.setPort(getPort()).     this.jettyServer.addConnector(connector). }
false;private;0;3;;private ServletHttpHandlerAdapter createServletAdapter() {     return new JettyHttpHandlerAdapter(resolveHttpHandler()). }
false;protected;0;5;;@Override protected void startInternal() throws Exception {     this.jettyServer.start().     setPort(((ServerConnector) this.jettyServer.getConnectors()[0]).getLocalPort()). }
false;protected;0;20;;@Override protected void stopInternal() throws Exception {     try {         if (this.contextHandler.isRunning()) {             this.contextHandler.stop().         }     } finally {         try {             if (this.jettyServer.isRunning()) {                 this.jettyServer.setStopTimeout(5000).                 this.jettyServer.stop().                 this.jettyServer.destroy().             }         } catch (Exception ex) {         // ignore         }     } }
false;protected;0;17;;@Override protected void resetInternal() {     try {         if (this.jettyServer.isRunning()) {             this.jettyServer.setStopTimeout(5000).             this.jettyServer.stop().             this.jettyServer.destroy().         }     } catch (Exception ex) {         throw new IllegalStateException(ex).     } finally {         this.jettyServer = null.         this.contextHandler = null.     } }
