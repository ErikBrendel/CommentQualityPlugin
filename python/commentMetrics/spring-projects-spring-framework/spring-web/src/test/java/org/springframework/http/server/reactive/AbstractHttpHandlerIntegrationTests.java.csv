commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;10;;@Parameterized.Parameters(name = "server [{0}]") public static Object[][] arguments() {     File base = new File(System.getProperty("java.io.tmpdir")).     return new Object[][] { { new JettyHttpServer() }, { new ReactorHttpServer() }, { new TomcatHttpServer(base.getAbsolutePath()) }, { new UndertowHttpServer() } }. }
false;public;0;9;;@Before public void setup() throws Exception {     this.server.setHandler(createHttpHandler()).     this.server.afterPropertiesSet().     this.server.start().     // Set dynamically chosen port     this.port = this.server.getPort(). }
false;public;0;5;;@After public void tearDown() throws Exception {     this.server.stop().     this.port = 0. }
false;protected,abstract;0;1;;protected abstract HttpHandler createHttpHandler().
true;public,static;2;3;/**  * Return an interval stream of N number of ticks and buffer the emissions  * to avoid back pressure failures (e.g. on slow CI server).  *  * <p>Use this method as follows:  * <ul>  * <li>Tests that verify N number of items followed by verifyOnComplete()  * should set the number of emissions to N.  * <li>Tests that verify N number of items followed by thenCancel() should  * set the number of buffered to an arbitrary number greater than N.  * </ul>  */ ;/**  * Return an interval stream of N number of ticks and buffer the emissions  * to avoid back pressure failures (e.g. on slow CI server).  *  * <p>Use this method as follows:  * <ul>  * <li>Tests that verify N number of items followed by verifyOnComplete()  * should set the number of emissions to N.  * <li>Tests that verify N number of items followed by thenCancel() should  * set the number of buffered to an arbitrary number greater than N.  * </ul>  */ public static Flux<Long> testInterval(Duration period, int count) {     return Flux.interval(period).take(count).onBackpressureBuffer(count). }
