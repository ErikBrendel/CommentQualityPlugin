commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void canRead() {     MediaType mediaType = new MediaType("foo", "bar").     HttpMessageConverter<MyType> converter = new MyHttpMessageConverter<>(mediaType).     assertTrue(converter.canRead(MyType.class, mediaType)).     assertFalse(converter.canRead(MyType.class, new MediaType("foo", "*"))).     assertFalse(converter.canRead(MyType.class, MediaType.ALL)). }
false;public;0;9;;@Test public void canReadWithWildcardSubtype() {     MediaType mediaType = new MediaType("foo").     HttpMessageConverter<MyType> converter = new MyHttpMessageConverter<>(mediaType).     assertTrue(converter.canRead(MyType.class, new MediaType("foo", "bar"))).     assertTrue(converter.canRead(MyType.class, new MediaType("foo", "*"))).     assertFalse(converter.canRead(MyType.class, MediaType.ALL)). }
false;public;0;9;;@Test public void canWrite() {     MediaType mediaType = new MediaType("foo", "bar").     HttpMessageConverter<MyType> converter = new MyHttpMessageConverter<>(mediaType).     assertTrue(converter.canWrite(MyType.class, mediaType)).     assertTrue(converter.canWrite(MyType.class, new MediaType("foo", "*"))).     assertTrue(converter.canWrite(MyType.class, MediaType.ALL)). }
false;public;0;9;;@Test public void canWriteWithWildcardInSupportedSubtype() {     MediaType mediaType = new MediaType("foo").     HttpMessageConverter<MyType> converter = new MyHttpMessageConverter<>(mediaType).     assertTrue(converter.canWrite(MyType.class, new MediaType("foo", "bar"))).     assertTrue(converter.canWrite(MyType.class, new MediaType("foo", "*"))).     assertTrue(converter.canWrite(MyType.class, MediaType.ALL)). }
false;protected;1;4;;@Override protected boolean supports(Class<?> clazz) {     return MyType.class.equals(clazz). }
false;protected;2;6;;@Override protected T readInternal(Class<? extends T> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {     fail("Not expected").     return null. }
false;protected;2;5;;@Override protected void writeInternal(T t, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {     fail("Not expected"). }
