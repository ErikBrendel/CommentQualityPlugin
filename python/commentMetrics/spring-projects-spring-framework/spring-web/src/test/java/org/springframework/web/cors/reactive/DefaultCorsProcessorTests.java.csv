commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     this.conf = new CorsConfiguration().     this.processor = new DefaultCorsProcessor(). }
false;public;0;11;;@Test public void actualRequestWithOriginHeader() throws Exception {     ServerWebExchange exchange = actualRequest().     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertFalse(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode()). }
false;public;0;9;;@Test public void actualRequestWithOriginHeaderAndNullConfig() throws Exception {     ServerWebExchange exchange = actualRequest().     this.processor.process(null, exchange).     ServerHttpResponse response = exchange.getResponse().     assertFalse(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertNull(response.getStatusCode()). }
false;public;0;15;;@Test public void actualRequestWithOriginHeaderAndAllowedOrigin() throws Exception {     ServerWebExchange exchange = actualRequest().     this.conf.addAllowedOrigin("*").     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertEquals("*", response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertFalse(response.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_MAX_AGE)).     assertFalse(response.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS)).     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertNull(response.getStatusCode()). }
false;public;0;18;;@Test public void actualRequestCredentials() throws Exception {     ServerWebExchange exchange = actualRequest().     this.conf.addAllowedOrigin("http://domain1.com").     this.conf.addAllowedOrigin("http://domain2.com").     this.conf.addAllowedOrigin("http://domain3.com").     this.conf.setAllowCredentials(true).     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertEquals("http://domain2.com", response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertTrue(response.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS)).     assertEquals("true", response.getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS)).     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertNull(response.getStatusCode()). }
false;public;0;16;;@Test public void actualRequestCredentialsWithOriginWildcard() throws Exception {     ServerWebExchange exchange = actualRequest().     this.conf.addAllowedOrigin("*").     this.conf.setAllowCredentials(true).     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertEquals("http://domain2.com", response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertTrue(response.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS)).     assertEquals("true", response.getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS)).     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertNull(response.getStatusCode()). }
false;public;0;12;;@Test public void actualRequestCaseInsensitiveOriginMatch() throws Exception {     ServerWebExchange exchange = actualRequest().     this.conf.addAllowedOrigin("http://DOMAIN2.com").     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertNull(response.getStatusCode()). }
false;public;0;18;;@Test public void actualRequestExposedHeaders() throws Exception {     ServerWebExchange exchange = actualRequest().     this.conf.addExposedHeader("header1").     this.conf.addExposedHeader("header2").     this.conf.addAllowedOrigin("http://domain2.com").     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertEquals("http://domain2.com", response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertTrue(response.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS)).     assertTrue(response.getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS).contains("header1")).     assertTrue(response.getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS).contains("header2")).     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertNull(response.getStatusCode()). }
false;public;0;12;;@Test public void preflightRequestAllOriginsAllowed() throws Exception {     ServerWebExchange exchange = MockServerWebExchange.from(preFlightRequest().header(ACCESS_CONTROL_REQUEST_METHOD, "GET")).     this.conf.addAllowedOrigin("*").     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertNull(response.getStatusCode()). }
false;public;0;12;;@Test public void preflightRequestWrongAllowedMethod() throws Exception {     ServerWebExchange exchange = MockServerWebExchange.from(preFlightRequest().header(ACCESS_CONTROL_REQUEST_METHOD, "DELETE")).     this.conf.addAllowedOrigin("*").     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode()). }
false;public;0;13;;@Test public void preflightRequestMatchedAllowedMethod() throws Exception {     ServerWebExchange exchange = MockServerWebExchange.from(preFlightRequest().header(ACCESS_CONTROL_REQUEST_METHOD, "GET")).     this.conf.addAllowedOrigin("*").     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertNull(response.getStatusCode()).     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertEquals("GET,HEAD", response.getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS)). }
false;public;0;11;;@Test public void preflightRequestTestWithOriginButWithoutOtherHeaders() throws Exception {     ServerWebExchange exchange = MockServerWebExchange.from(preFlightRequest()).     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertFalse(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode()). }
false;public;0;12;;@Test public void preflightRequestWithoutRequestMethod() throws Exception {     ServerWebExchange exchange = MockServerWebExchange.from(preFlightRequest().header(ACCESS_CONTROL_REQUEST_HEADERS, "Header1")).     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertFalse(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode()). }
false;public;0;14;;@Test public void preflightRequestWithRequestAndMethodHeaderButNoConfig() throws Exception {     ServerWebExchange exchange = MockServerWebExchange.from(preFlightRequest().header(ACCESS_CONTROL_REQUEST_METHOD, "GET").header(ACCESS_CONTROL_REQUEST_HEADERS, "Header1")).     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertFalse(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode()). }
false;public;0;24;;@Test public void preflightRequestValidRequestAndConfig() throws Exception {     ServerWebExchange exchange = MockServerWebExchange.from(preFlightRequest().header(ACCESS_CONTROL_REQUEST_METHOD, "GET").header(ACCESS_CONTROL_REQUEST_HEADERS, "Header1")).     this.conf.addAllowedOrigin("*").     this.conf.addAllowedMethod("GET").     this.conf.addAllowedMethod("PUT").     this.conf.addAllowedHeader("header1").     this.conf.addAllowedHeader("header2").     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertEquals("*", response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertTrue(response.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS)).     assertEquals("GET,PUT", response.getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS)).     assertFalse(response.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_MAX_AGE)).     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertNull(response.getStatusCode()). }
false;public;0;23;;@Test public void preflightRequestCredentials() throws Exception {     ServerWebExchange exchange = MockServerWebExchange.from(preFlightRequest().header(ACCESS_CONTROL_REQUEST_METHOD, "GET").header(ACCESS_CONTROL_REQUEST_HEADERS, "Header1")).     this.conf.addAllowedOrigin("http://domain1.com").     this.conf.addAllowedOrigin("http://domain2.com").     this.conf.addAllowedOrigin("http://domain3.com").     this.conf.addAllowedHeader("Header1").     this.conf.setAllowCredentials(true).     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertEquals("http://domain2.com", response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertTrue(response.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS)).     assertEquals("true", response.getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS)).     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertNull(response.getStatusCode()). }
false;public;0;21;;@Test public void preflightRequestCredentialsWithOriginWildcard() throws Exception {     ServerWebExchange exchange = MockServerWebExchange.from(preFlightRequest().header(ACCESS_CONTROL_REQUEST_METHOD, "GET").header(ACCESS_CONTROL_REQUEST_HEADERS, "Header1")).     this.conf.addAllowedOrigin("http://domain1.com").     this.conf.addAllowedOrigin("*").     this.conf.addAllowedOrigin("http://domain3.com").     this.conf.addAllowedHeader("Header1").     this.conf.setAllowCredentials(true).     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertEquals("http://domain2.com", response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertNull(response.getStatusCode()). }
false;public;0;23;;@Test public void preflightRequestAllowedHeaders() throws Exception {     ServerWebExchange exchange = MockServerWebExchange.from(preFlightRequest().header(ACCESS_CONTROL_REQUEST_METHOD, "GET").header(ACCESS_CONTROL_REQUEST_HEADERS, "Header1, Header2")).     this.conf.addAllowedHeader("Header1").     this.conf.addAllowedHeader("Header2").     this.conf.addAllowedHeader("Header3").     this.conf.addAllowedOrigin("http://domain2.com").     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_HEADERS)).     assertTrue(response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_HEADERS).contains("Header1")).     assertTrue(response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_HEADERS).contains("Header2")).     assertFalse(response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_HEADERS).contains("Header3")).     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertNull(response.getStatusCode()). }
false;public;0;21;;@Test public void preflightRequestAllowsAllHeaders() throws Exception {     ServerWebExchange exchange = MockServerWebExchange.from(preFlightRequest().header(ACCESS_CONTROL_REQUEST_METHOD, "GET").header(ACCESS_CONTROL_REQUEST_HEADERS, "Header1, Header2")).     this.conf.addAllowedHeader("*").     this.conf.addAllowedOrigin("http://domain2.com").     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_HEADERS)).     assertTrue(response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_HEADERS).contains("Header1")).     assertTrue(response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_HEADERS).contains("Header2")).     assertFalse(response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_HEADERS).contains("*")).     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertNull(response.getStatusCode()). }
false;public;0;18;;@Test public void preflightRequestWithEmptyHeaders() throws Exception {     ServerWebExchange exchange = MockServerWebExchange.from(preFlightRequest().header(ACCESS_CONTROL_REQUEST_METHOD, "GET").header(ACCESS_CONTROL_REQUEST_HEADERS, "")).     this.conf.addAllowedHeader("*").     this.conf.addAllowedOrigin("http://domain2.com").     this.processor.process(this.conf, exchange).     ServerHttpResponse response = exchange.getResponse().     assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertFalse(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_HEADERS)).     assertThat(response.getHeaders().get(VARY), contains(ORIGIN, ACCESS_CONTROL_REQUEST_METHOD, ACCESS_CONTROL_REQUEST_HEADERS)).     assertNull(response.getStatusCode()). }
false;public;0;11;;@Test public void preflightRequestWithNullConfig() throws Exception {     ServerWebExchange exchange = MockServerWebExchange.from(preFlightRequest().header(ACCESS_CONTROL_REQUEST_METHOD, "GET")).     this.conf.addAllowedOrigin("*").     this.processor.process(null, exchange).     ServerHttpResponse response = exchange.getResponse().     assertFalse(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN)).     assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode()). }
false;private;0;3;;private ServerWebExchange actualRequest() {     return MockServerWebExchange.from(corsRequest(HttpMethod.GET)). }
false;private;0;3;;private MockServerHttpRequest.BaseBuilder<?> preFlightRequest() {     return corsRequest(HttpMethod.OPTIONS). }
false;private;1;5;;private MockServerHttpRequest.BaseBuilder<?> corsRequest(HttpMethod method) {     return MockServerHttpRequest.method(method, "http://localhost/test.html").header(HttpHeaders.ORIGIN, "http://domain2.com"). }
