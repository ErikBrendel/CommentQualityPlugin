# id;timestamp;commentText;codeText;commentWords;codeWords
MockServerHttpResponse -> public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler);1486522658;Configure a custom handler for writing the request body.__<p>The default write handler consumes and caches the request body so it_may be accessed subsequently, e.g. in test assertions. Use this property_when the request body is an infinite stream.__@param writeHandler the write handler to use returning {@code Mono<Void>}_when the body has been "written" (i.e. consumed).;public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler) {_		Assert.notNull(writeHandler, "'writeHandler' is required")__		this.writeHandler = writeHandler__	};configure,a,custom,handler,for,writing,the,request,body,p,the,default,write,handler,consumes,and,caches,the,request,body,so,it,may,be,accessed,subsequently,e,g,in,test,assertions,use,this,property,when,the,request,body,is,an,infinite,stream,param,write,handler,the,write,handler,to,use,returning,code,mono,void,when,the,body,has,been,written,i,e,consumed;public,void,set,write,handler,function,flux,data,buffer,mono,void,write,handler,assert,not,null,write,handler,write,handler,is,required,this,write,handler,write,handler
MockServerHttpResponse -> public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler);1496156415;Configure a custom handler to consume the response body._<p>By default, response body content is consumed in full and cached for_subsequent access in tests. Use this option to take control over how the_response body is consumed._@param writeHandler the write handler to use returning {@code Mono<Void>}_when the body has been "written" (i.e. consumed).;public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler) {_		Assert.notNull(writeHandler, "'writeHandler' is required")__		this.body = Flux.error(new IllegalStateException("Not available with custom write handler."))__		this.writeHandler = writeHandler__	};configure,a,custom,handler,to,consume,the,response,body,p,by,default,response,body,content,is,consumed,in,full,and,cached,for,subsequent,access,in,tests,use,this,option,to,take,control,over,how,the,response,body,is,consumed,param,write,handler,the,write,handler,to,use,returning,code,mono,void,when,the,body,has,been,written,i,e,consumed;public,void,set,write,handler,function,flux,data,buffer,mono,void,write,handler,assert,not,null,write,handler,write,handler,is,required,this,body,flux,error,new,illegal,state,exception,not,available,with,custom,write,handler,this,write,handler,write,handler
MockServerHttpResponse -> public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler);1496156415;Configure a custom handler to consume the response body._<p>By default, response body content is consumed in full and cached for_subsequent access in tests. Use this option to take control over how the_response body is consumed._@param writeHandler the write handler to use returning {@code Mono<Void>}_when the body has been "written" (i.e. consumed).;public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler) {_		Assert.notNull(writeHandler, "'writeHandler' is required")__		this.body = Flux.error(new IllegalStateException("Not available with custom write handler."))__		this.writeHandler = writeHandler__	};configure,a,custom,handler,to,consume,the,response,body,p,by,default,response,body,content,is,consumed,in,full,and,cached,for,subsequent,access,in,tests,use,this,option,to,take,control,over,how,the,response,body,is,consumed,param,write,handler,the,write,handler,to,use,returning,code,mono,void,when,the,body,has,been,written,i,e,consumed;public,void,set,write,handler,function,flux,data,buffer,mono,void,write,handler,assert,not,null,write,handler,write,handler,is,required,this,body,flux,error,new,illegal,state,exception,not,available,with,custom,write,handler,this,write,handler,write,handler
MockServerHttpResponse -> public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler);1506704643;Configure a custom handler to consume the response body._<p>By default, response body content is consumed in full and cached for_subsequent access in tests. Use this option to take control over how the_response body is consumed._@param writeHandler the write handler to use returning {@code Mono<Void>}_when the body has been "written" (i.e. consumed).;public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler) {_		Assert.notNull(writeHandler, "'writeHandler' is required")__		this.body = Flux.error(new IllegalStateException("Not available with custom write handler."))__		this.writeHandler = writeHandler__	};configure,a,custom,handler,to,consume,the,response,body,p,by,default,response,body,content,is,consumed,in,full,and,cached,for,subsequent,access,in,tests,use,this,option,to,take,control,over,how,the,response,body,is,consumed,param,write,handler,the,write,handler,to,use,returning,code,mono,void,when,the,body,has,been,written,i,e,consumed;public,void,set,write,handler,function,flux,data,buffer,mono,void,write,handler,assert,not,null,write,handler,write,handler,is,required,this,body,flux,error,new,illegal,state,exception,not,available,with,custom,write,handler,this,write,handler,write,handler
MockServerHttpResponse -> public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler);1540462383;Configure a custom handler to consume the response body._<p>By default, response body content is consumed in full and cached for_subsequent access in tests. Use this option to take control over how the_response body is consumed._@param writeHandler the write handler to use returning {@code Mono<Void>}_when the body has been "written" (i.e. consumed).;public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler) {_		Assert.notNull(writeHandler, "'writeHandler' is required")__		this.body = Flux.error(new IllegalStateException("Not available with custom write handler."))__		this.writeHandler = writeHandler__	};configure,a,custom,handler,to,consume,the,response,body,p,by,default,response,body,content,is,consumed,in,full,and,cached,for,subsequent,access,in,tests,use,this,option,to,take,control,over,how,the,response,body,is,consumed,param,write,handler,the,write,handler,to,use,returning,code,mono,void,when,the,body,has,been,written,i,e,consumed;public,void,set,write,handler,function,flux,data,buffer,mono,void,write,handler,assert,not,null,write,handler,write,handler,is,required,this,body,flux,error,new,illegal,state,exception,not,available,with,custom,write,handler,this,write,handler,write,handler
MockServerHttpResponse -> public Flux<DataBuffer> getBody();1484338986;Return the output Publisher used to write to the response.;public Flux<DataBuffer> getBody() {_		return this.body__	};return,the,output,publisher,used,to,write,to,the,response;public,flux,data,buffer,get,body,return,this,body
MockServerHttpResponse -> public Flux<DataBuffer> getBody();1486522658;Return the request body, or an error stream if the body was never set_or when {@link #setWriteHandler} is configured.;public Flux<DataBuffer> getBody() {_		return this.body__	};return,the,request,body,or,an,error,stream,if,the,body,was,never,set,or,when,link,set,write,handler,is,configured;public,flux,data,buffer,get,body,return,this,body
MockServerHttpResponse -> public Flux<DataBuffer> getBody();1496156415;Return the response body or an error stream if the body was not set.;public Flux<DataBuffer> getBody() {_		return this.body__	};return,the,response,body,or,an,error,stream,if,the,body,was,not,set;public,flux,data,buffer,get,body,return,this,body
MockServerHttpResponse -> public Flux<DataBuffer> getBody();1496156415;Return the response body or an error stream if the body was not set.;public Flux<DataBuffer> getBody() {_		return this.body__	};return,the,response,body,or,an,error,stream,if,the,body,was,not,set;public,flux,data,buffer,get,body,return,this,body
MockServerHttpResponse -> public Flux<DataBuffer> getBody();1506704643;Return the response body or an error stream if the body was not set.;public Flux<DataBuffer> getBody() {_		return this.body__	};return,the,response,body,or,an,error,stream,if,the,body,was,not,set;public,flux,data,buffer,get,body,return,this,body
MockServerHttpResponse -> public Flux<DataBuffer> getBody();1540462383;Return the response body or an error stream if the body was not set.;public Flux<DataBuffer> getBody() {_		return this.body__	};return,the,response,body,or,an,error,stream,if,the,body,was,not,set;public,flux,data,buffer,get,body,return,this,body
MockServerHttpResponse -> public Mono<String> getBodyAsString();1476479832;Return the body of the response aggregated and converted to a String_using the charset of the Content-Type response or otherwise defaulting_to "UTF-8".;public Mono<String> getBodyAsString() {_		Charset charset = getCharset()__		Charset charsetToUse = (charset != null ? charset : StandardCharsets.UTF_8)__		return Flux.from(this.body)_				.reduce(this.bufferFactory.allocateBuffer(), (previous, current) -> {_					previous.write(current)__					DataBufferUtils.release(current)__					return previous__				})_				.map(buffer -> DataBufferTestUtils.dumpString(buffer, charsetToUse))__	};return,the,body,of,the,response,aggregated,and,converted,to,a,string,using,the,charset,of,the,content,type,response,or,otherwise,defaulting,to,utf,8;public,mono,string,get,body,as,string,charset,charset,get,charset,charset,charset,to,use,charset,null,charset,standard,charsets,return,flux,from,this,body,reduce,this,buffer,factory,allocate,buffer,previous,current,previous,write,current,data,buffer,utils,release,current,return,previous,map,buffer,data,buffer,test,utils,dump,string,buffer,charset,to,use
MockServerHttpResponse -> public Mono<String> getBodyAsString();1480064373;Return the body of the response aggregated and converted to a String_using the charset of the Content-Type response or otherwise defaulting_to "UTF-8".;public Mono<String> getBodyAsString() {_		Charset charset = getCharset()__		Charset charsetToUse = (charset != null ? charset : StandardCharsets.UTF_8)__		return Flux.from(this.body)_				.reduce(this.bufferFactory.allocateBuffer(), (previous, current) -> {_					previous.write(current)__					DataBufferUtils.release(current)__					return previous__				})_				.map(buffer -> DataBufferTestUtils.dumpString(buffer, charsetToUse))__	};return,the,body,of,the,response,aggregated,and,converted,to,a,string,using,the,charset,of,the,content,type,response,or,otherwise,defaulting,to,utf,8;public,mono,string,get,body,as,string,charset,charset,get,charset,charset,charset,to,use,charset,null,charset,standard,charsets,return,flux,from,this,body,reduce,this,buffer,factory,allocate,buffer,previous,current,previous,write,current,data,buffer,utils,release,current,return,previous,map,buffer,data,buffer,test,utils,dump,string,buffer,charset,to,use
MockServerHttpResponse -> public Mono<String> getBodyAsString();1480066393;Return the body of the response aggregated and converted to a String_using the charset of the Content-Type response or otherwise defaulting_to "UTF-8".;public Mono<String> getBodyAsString() {_		Charset charset = getCharset()__		Charset charsetToUse = (charset != null ? charset : StandardCharsets.UTF_8)__		return Flux.from(this.body)_				.reduce(this.bufferFactory.allocateBuffer(), (previous, current) -> {_					previous.write(current)__					DataBufferUtils.release(current)__					return previous__				})_				.map(buffer -> DataBufferTestUtils.dumpString(buffer, charsetToUse))__	};return,the,body,of,the,response,aggregated,and,converted,to,a,string,using,the,charset,of,the,content,type,response,or,otherwise,defaulting,to,utf,8;public,mono,string,get,body,as,string,charset,charset,get,charset,charset,charset,to,use,charset,null,charset,standard,charsets,return,flux,from,this,body,reduce,this,buffer,factory,allocate,buffer,previous,current,previous,write,current,data,buffer,utils,release,current,return,previous,map,buffer,data,buffer,test,utils,dump,string,buffer,charset,to,use
MockServerHttpResponse -> public Mono<String> getBodyAsString();1480074888;Return the body of the response aggregated and converted to a String_using the charset of the Content-Type response or otherwise defaulting_to "UTF-8".;public Mono<String> getBodyAsString() {_		Charset charset = getCharset()__		Charset charsetToUse = (charset != null ? charset : StandardCharsets.UTF_8)__		return Flux.from(this.body)_				.reduce(this.bufferFactory.allocateBuffer(), (previous, current) -> {_					previous.write(current)__					DataBufferUtils.release(current)__					return previous__				})_				.map(buffer -> DataBufferTestUtils.dumpString(buffer, charsetToUse))__	};return,the,body,of,the,response,aggregated,and,converted,to,a,string,using,the,charset,of,the,content,type,response,or,otherwise,defaulting,to,utf,8;public,mono,string,get,body,as,string,charset,charset,get,charset,charset,charset,to,use,charset,null,charset,standard,charsets,return,flux,from,this,body,reduce,this,buffer,factory,allocate,buffer,previous,current,previous,write,current,data,buffer,utils,release,current,return,previous,map,buffer,data,buffer,test,utils,dump,string,buffer,charset,to,use
MockServerHttpResponse -> public Mono<String> getBodyAsString();1481669991;Return the body of the response aggregated and converted to a String_using the charset of the Content-Type response or otherwise defaulting_to "UTF-8".;public Mono<String> getBodyAsString() {_		Charset charset = getCharset()__		Charset charsetToUse = (charset != null ? charset : StandardCharsets.UTF_8)__		return Flux.from(this.body)_				.reduce(this.bufferFactory.allocateBuffer(), (previous, current) -> {_					previous.write(current)__					DataBufferUtils.release(current)__					return previous__				})_				.map(buffer -> DataBufferTestUtils.dumpString(buffer, charsetToUse))__	};return,the,body,of,the,response,aggregated,and,converted,to,a,string,using,the,charset,of,the,content,type,response,or,otherwise,defaulting,to,utf,8;public,mono,string,get,body,as,string,charset,charset,get,charset,charset,charset,to,use,charset,null,charset,standard,charsets,return,flux,from,this,body,reduce,this,buffer,factory,allocate,buffer,previous,current,previous,write,current,data,buffer,utils,release,current,return,previous,map,buffer,data,buffer,test,utils,dump,string,buffer,charset,to,use
MockServerHttpResponse -> public Mono<String> getBodyAsString();1481712893;Return the body of the response aggregated and converted to a String_using the charset of the Content-Type response or otherwise defaulting_to "UTF-8".;public Mono<String> getBodyAsString() {_		Charset charset = getCharset()__		return Flux.from(getBody())_				.reduce(bufferFactory().allocateBuffer(), (previous, current) -> {_					previous.write(current)__					DataBufferUtils.release(current)__					return previous__				})_				.map(buffer -> DataBufferTestUtils.dumpString(buffer, charset))__	};return,the,body,of,the,response,aggregated,and,converted,to,a,string,using,the,charset,of,the,content,type,response,or,otherwise,defaulting,to,utf,8;public,mono,string,get,body,as,string,charset,charset,get,charset,return,flux,from,get,body,reduce,buffer,factory,allocate,buffer,previous,current,previous,write,current,data,buffer,utils,release,current,return,previous,map,buffer,data,buffer,test,utils,dump,string,buffer,charset
MockServerHttpResponse -> public Mono<String> getBodyAsString();1484338986;Return the response body aggregated and converted to a String using the_charset of the Content-Type response or otherwise as "UTF-8".;public Mono<String> getBodyAsString() {_		Charset charset = getCharset()__		return getBody()_				.reduce(bufferFactory().allocateBuffer(), (previous, current) -> {_					previous.write(current)__					DataBufferUtils.release(current)__					return previous__				})_				.map(buffer -> bufferToString(buffer, charset))__	};return,the,response,body,aggregated,and,converted,to,a,string,using,the,charset,of,the,content,type,response,or,otherwise,as,utf,8;public,mono,string,get,body,as,string,charset,charset,get,charset,return,get,body,reduce,buffer,factory,allocate,buffer,previous,current,previous,write,current,data,buffer,utils,release,current,return,previous,map,buffer,buffer,to,string,buffer,charset
MockServerHttpResponse -> public Mono<String> getBodyAsString();1486522658;Shortcut method that delegates to {@link #getBody()} and then aggregates_the data buffers and converts to a String using the charset of the_Content-Type header or falling back on "UTF-8" by default.;public Mono<String> getBodyAsString() {_		Charset charset = getCharset()__		return getBody()_				.reduce(bufferFactory().allocateBuffer(), (previous, current) -> {_					previous.write(current)__					DataBufferUtils.release(current)__					return previous__				})_				.map(buffer -> bufferToString(buffer, charset))__	};shortcut,method,that,delegates,to,link,get,body,and,then,aggregates,the,data,buffers,and,converts,to,a,string,using,the,charset,of,the,content,type,header,or,falling,back,on,utf,8,by,default;public,mono,string,get,body,as,string,charset,charset,get,charset,return,get,body,reduce,buffer,factory,allocate,buffer,previous,current,previous,write,current,data,buffer,utils,release,current,return,previous,map,buffer,buffer,to,string,buffer,charset
MockServerHttpResponse -> public Mono<String> getBodyAsString();1496156415;Aggregate response data and convert to a String using the "Content-Type"_charset or "UTF-8" by default.;public Mono<String> getBodyAsString() {__		Charset charset = Optional.ofNullable(getHeaders().getContentType()).map(MimeType::getCharset)_				.orElse(StandardCharsets.UTF_8)___		return getBody()_				.reduce(bufferFactory().allocateBuffer(), (previous, current) -> {_					previous.write(current)__					DataBufferUtils.release(current)__					return previous__				})_				.map(buffer -> bufferToString(buffer, charset))__	};aggregate,response,data,and,convert,to,a,string,using,the,content,type,charset,or,utf,8,by,default;public,mono,string,get,body,as,string,charset,charset,optional,of,nullable,get,headers,get,content,type,map,mime,type,get,charset,or,else,standard,charsets,return,get,body,reduce,buffer,factory,allocate,buffer,previous,current,previous,write,current,data,buffer,utils,release,current,return,previous,map,buffer,buffer,to,string,buffer,charset
MockServerHttpResponse -> public Mono<String> getBodyAsString();1496156415;Aggregate response data and convert to a String using the "Content-Type"_charset or "UTF-8" by default.;public Mono<String> getBodyAsString() {__		Charset charset = Optional.ofNullable(getHeaders().getContentType()).map(MimeType::getCharset)_				.orElse(StandardCharsets.UTF_8)___		return getBody()_				.reduce(bufferFactory().allocateBuffer(), (previous, current) -> {_					previous.write(current)__					DataBufferUtils.release(current)__					return previous__				})_				.map(buffer -> bufferToString(buffer, charset))__	};aggregate,response,data,and,convert,to,a,string,using,the,content,type,charset,or,utf,8,by,default;public,mono,string,get,body,as,string,charset,charset,optional,of,nullable,get,headers,get,content,type,map,mime,type,get,charset,or,else,standard,charsets,return,get,body,reduce,buffer,factory,allocate,buffer,previous,current,previous,write,current,data,buffer,utils,release,current,return,previous,map,buffer,buffer,to,string,buffer,charset
MockServerHttpResponse -> public Mono<String> getBodyAsString();1506704643;Aggregate response data and convert to a String using the "Content-Type"_charset or "UTF-8" by default.;public Mono<String> getBodyAsString() {__		Charset charset = Optional.ofNullable(getHeaders().getContentType()).map(MimeType::getCharset)_				.orElse(StandardCharsets.UTF_8)___		return getBody()_				.reduce(bufferFactory().allocateBuffer(), (previous, current) -> {_					previous.write(current)__					DataBufferUtils.release(current)__					return previous__				})_				.map(buffer -> bufferToString(buffer, charset))__	};aggregate,response,data,and,convert,to,a,string,using,the,content,type,charset,or,utf,8,by,default;public,mono,string,get,body,as,string,charset,charset,optional,of,nullable,get,headers,get,content,type,map,mime,type,get,charset,or,else,standard,charsets,return,get,body,reduce,buffer,factory,allocate,buffer,previous,current,previous,write,current,data,buffer,utils,release,current,return,previous,map,buffer,buffer,to,string,buffer,charset
MockServerHttpResponse -> public Mono<String> getBodyAsString();1540462383;Aggregate response data and convert to a String using the "Content-Type"_charset or "UTF-8" by default.;public Mono<String> getBodyAsString() {__		Charset charset = Optional.ofNullable(getHeaders().getContentType()).map(MimeType::getCharset)_				.orElse(StandardCharsets.UTF_8)___		return getBody()_				.reduce(bufferFactory().allocateBuffer(), (previous, current) -> {_					previous.write(current)__					DataBufferUtils.release(current)__					return previous__				})_				.map(buffer -> bufferToString(buffer, charset))__	};aggregate,response,data,and,convert,to,a,string,using,the,content,type,charset,or,utf,8,by,default;public,mono,string,get,body,as,string,charset,charset,optional,of,nullable,get,headers,get,content,type,map,mime,type,get,charset,or,else,standard,charsets,return,get,body,reduce,buffer,factory,allocate,buffer,previous,current,previous,write,current,data,buffer,utils,release,current,return,previous,map,buffer,buffer,to,string,buffer,charset
