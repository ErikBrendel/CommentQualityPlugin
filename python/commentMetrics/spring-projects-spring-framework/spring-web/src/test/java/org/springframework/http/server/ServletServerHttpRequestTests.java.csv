commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void create() {     mockRequest = new MockHttpServletRequest().     request = new ServletServerHttpRequest(mockRequest). }
false;public;0;5;;@Test public void getMethod() {     mockRequest.setMethod("POST").     assertEquals("Invalid method", HttpMethod.POST, request.getMethod()). }
false;public;0;9;;@Test public void getUriForSimplePath() throws URISyntaxException {     URI uri = new URI("http://example.com/path").     mockRequest.setServerName(uri.getHost()).     mockRequest.setServerPort(uri.getPort()).     mockRequest.setRequestURI(uri.getPath()).     mockRequest.setQueryString(uri.getQuery()).     assertEquals(uri, request.getURI()). }
false;public;0;9;;@Test public void getUriWithQueryString() throws URISyntaxException {     URI uri = new URI("http://example.com/path?query").     mockRequest.setServerName(uri.getHost()).     mockRequest.setServerPort(uri.getPort()).     mockRequest.setRequestURI(uri.getPath()).     mockRequest.setQueryString(uri.getQuery()).     assertEquals(uri, request.getURI()). }
false;public;0;7;;// SPR-16414 @Test public void getUriWithQueryParam() throws URISyntaxException {     mockRequest.setServerName("example.com").     mockRequest.setRequestURI("/path").     mockRequest.setQueryString("query=foo").     assertEquals(new URI("http://example.com/path?query=foo"), request.getURI()). }
false;public;0;7;;// SPR-16414 @Test public void getUriWithMalformedQueryParam() throws URISyntaxException {     mockRequest.setServerName("example.com").     mockRequest.setRequestURI("/path").     mockRequest.setQueryString("query=foo%%x").     assertEquals(new URI("http://example.com/path"), request.getURI()). }
false;public;0;11;;// SPR-13876 @Test public void getUriWithEncoding() throws URISyntaxException {     URI uri = new URI("https://example.com/%E4%B8%AD%E6%96%87" + "?redirect=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-framework").     mockRequest.setScheme(uri.getScheme()).     mockRequest.setServerName(uri.getHost()).     mockRequest.setServerPort(uri.getPort()).     mockRequest.setRequestURI(uri.getRawPath()).     mockRequest.setQueryString(uri.getRawQuery()).     assertEquals(uri, request.getURI()). }
false;public;0;20;;@Test public void getHeaders() {     String headerName = "MyHeader".     String headerValue1 = "value1".     String headerValue2 = "value2".     mockRequest.addHeader(headerName, headerValue1).     mockRequest.addHeader(headerName, headerValue2).     mockRequest.setContentType("text/plain").     mockRequest.setCharacterEncoding("UTF-8").     HttpHeaders headers = request.getHeaders().     assertNotNull("No HttpHeaders returned", headers).     assertTrue("Invalid headers returned", headers.containsKey(headerName)).     List<String> headerValues = headers.get(headerName).     assertEquals("Invalid header values returned", 2, headerValues.size()).     assertTrue("Invalid header values returned", headerValues.contains(headerValue1)).     assertTrue("Invalid header values returned", headerValues.contains(headerValue2)).     assertEquals("Invalid Content-Type", new MediaType("text", "plain", StandardCharsets.UTF_8), headers.getContentType()). }
false;public;0;19;;@Test public void getHeadersWithEmptyContentTypeAndEncoding() {     String headerName = "MyHeader".     String headerValue1 = "value1".     String headerValue2 = "value2".     mockRequest.addHeader(headerName, headerValue1).     mockRequest.addHeader(headerName, headerValue2).     mockRequest.setContentType("").     mockRequest.setCharacterEncoding("").     HttpHeaders headers = request.getHeaders().     assertNotNull("No HttpHeaders returned", headers).     assertTrue("Invalid headers returned", headers.containsKey(headerName)).     List<String> headerValues = headers.get(headerName).     assertEquals("Invalid header values returned", 2, headerValues.size()).     assertTrue("Invalid header values returned", headerValues.contains(headerValue1)).     assertTrue("Invalid header values returned", headerValues.contains(headerValue2)).     assertNull(headers.getContentType()). }
false;public;0;8;;@Test public void getBody() throws IOException {     byte[] content = "Hello World".getBytes("UTF-8").     mockRequest.setContent(content).     byte[] result = FileCopyUtils.copyToByteArray(request.getBody()).     assertArrayEquals("Invalid content returned", content, result). }
false;public;0;13;;@Test public void getFormBody() throws IOException {     // Charset (SPR-8676)     mockRequest.setContentType("application/x-www-form-urlencoded. charset=UTF-8").     mockRequest.setMethod("POST").     mockRequest.addParameter("name 1", "value 1").     mockRequest.addParameter("name 2", new String[] { "value 2+1", "value 2+2" }).     mockRequest.addParameter("name 3", (String) null).     byte[] result = FileCopyUtils.copyToByteArray(request.getBody()).     byte[] content = "name+1=value+1&name+2=value+2%2B1&name+2=value+2%2B2&name+3".getBytes("UTF-8").     assertArrayEquals("Invalid content returned", content, result). }
