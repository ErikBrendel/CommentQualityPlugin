commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void canRead() {     assertTrue(converter.canRead(MyBean.class, new MediaType("application", "json"))).     assertTrue(converter.canRead(Map.class, new MediaType("application", "json"))). }
false;public;0;5;;@Test public void canWrite() {     assertTrue(converter.canWrite(MyBean.class, new MediaType("application", "json"))).     assertTrue(converter.canWrite(Map.class, new MediaType("application", "json"))). }
false;public;0;5;;// SPR-7905 @Test public void canReadAndWriteMicroformats() {     assertTrue(converter.canRead(MyBean.class, new MediaType("application", "vnd.test-micro-type+json"))).     assertTrue(converter.canWrite(MyBean.class, new MediaType("application", "vnd.test-micro-type+json"))). }
false;public;0;19;;@Test public void readTyped() throws IOException {     String body = "{" + "\"bytes\":\"AQI=\"," + "\"array\":[\"Foo\",\"Bar\"]," + "\"number\":42," + "\"string\":\"Foo\"," + "\"bool\":true," + "\"fraction\":42.0}".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "json")).     MyBean result = (MyBean) converter.read(MyBean.class, inputMessage).     assertEquals("Foo", result.getString()).     assertEquals(42, result.getNumber()).     assertEquals(42F, result.getFraction(), 0F).     assertArrayEquals(new String[] { "Foo", "Bar" }, result.getArray()).     assertTrue(result.isBool()).     assertArrayEquals(new byte[] { 0x1, 0x2 }, result.getBytes()). }
false;public;0;23;;@Test @SuppressWarnings("unchecked") public void readUntyped() throws IOException {     String body = "{" + "\"bytes\":\"AQI=\"," + "\"array\":[\"Foo\",\"Bar\"]," + "\"number\":42," + "\"string\":\"Foo\"," + "\"bool\":true," + "\"fraction\":42.0}".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "json")).     HashMap<String, Object> result = (HashMap<String, Object>) converter.read(HashMap.class, inputMessage).     assertEquals("Foo", result.get("string")).     assertEquals(42, result.get("number")).     assertEquals(42D, (Double) result.get("fraction"), 0D).     List<String> array = new ArrayList<>().     array.add("Foo").     array.add("Bar").     assertEquals(array, result.get("array")).     assertEquals(Boolean.TRUE, result.get("bool")).     assertEquals("AQI=", result.get("bytes")). }
false;public;0;21;;@Test public void write() throws IOException {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     MyBean body = new MyBean().     body.setString("Foo").     body.setNumber(42).     body.setFraction(42F).     body.setArray(new String[] { "Foo", "Bar" }).     body.setBool(true).     body.setBytes(new byte[] { 0x1, 0x2 }).     converter.write(body, null, outputMessage).     String result = outputMessage.getBodyAsString(StandardCharsets.UTF_8).     assertTrue(result.contains("\"string\":\"Foo\"")).     assertTrue(result.contains("\"number\":42")).     assertTrue(result.contains("fraction\":42.0")).     assertTrue(result.contains("\"array\":[\"Foo\",\"Bar\"]")).     assertTrue(result.contains("\"bool\":true")).     assertTrue(result.contains("\"bytes\":\"AQI=\"")).     assertEquals("Invalid content-type", new MediaType("application", "json", StandardCharsets.UTF_8), outputMessage.getHeaders().getContentType()). }
false;public;0;21;;@Test public void writeWithBaseType() throws IOException {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     MyBean body = new MyBean().     body.setString("Foo").     body.setNumber(42).     body.setFraction(42F).     body.setArray(new String[] { "Foo", "Bar" }).     body.setBool(true).     body.setBytes(new byte[] { 0x1, 0x2 }).     converter.write(body, MyBase.class, null, outputMessage).     String result = outputMessage.getBodyAsString(StandardCharsets.UTF_8).     assertTrue(result.contains("\"string\":\"Foo\"")).     assertTrue(result.contains("\"number\":42")).     assertTrue(result.contains("fraction\":42.0")).     assertTrue(result.contains("\"array\":[\"Foo\",\"Bar\"]")).     assertTrue(result.contains("\"bool\":true")).     assertTrue(result.contains("\"bytes\":\"AQI=\"")).     assertEquals("Invalid content-type", new MediaType("application", "json", StandardCharsets.UTF_8), outputMessage.getHeaders().getContentType()). }
false;public;0;9;;@Test public void writeUTF16() throws IOException {     MediaType contentType = new MediaType("application", "json", StandardCharsets.UTF_16BE).     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     String body = "H\u00e9llo W\u00f6rld".     converter.write(body, contentType, outputMessage).     assertEquals("Invalid result", "\"" + body + "\"", outputMessage.getBodyAsString(StandardCharsets.UTF_16BE)).     assertEquals("Invalid content-type", contentType, outputMessage.getHeaders().getContentType()). }
false;public;0;7;;@Test(expected = HttpMessageNotReadableException.class) public void readInvalidJson() throws IOException {     String body = "FooBar".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "json")).     converter.read(MyBean.class, inputMessage). }
false;public;0;8;;@Test public void readValidJsonWithUnknownProperty() throws IOException {     String body = "{\"string\":\"string\",\"unknownProperty\":\"value\"}".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "json")).     converter.read(MyBean.class, inputMessage). // Assert no HttpMessageNotReadableException is thrown }
false;protected;2;9;;@Override protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass) {     if (type instanceof Class && List.class.isAssignableFrom((Class<?>) type)) {         return new ObjectMapper().getTypeFactory().constructCollectionType(ArrayList.class, MyBean.class).     } else {         return super.getJavaType(type, contextClass).     } }
false;public;0;38;;@Test @SuppressWarnings("unchecked") public void readAndWriteGenerics() throws Exception {     MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter() {          @Override         protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass) {             if (type instanceof Class && List.class.isAssignableFrom((Class<?>) type)) {                 return new ObjectMapper().getTypeFactory().constructCollectionType(ArrayList.class, MyBean.class).             } else {                 return super.getJavaType(type, contextClass).             }         }     }.     String body = "[{" + "\"bytes\":\"AQI=\"," + "\"array\":[\"Foo\",\"Bar\"]," + "\"number\":42," + "\"string\":\"Foo\"," + "\"bool\":true," + "\"fraction\":42.0}]".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "json")).     List<MyBean> results = (List<MyBean>) converter.read(List.class, inputMessage).     assertEquals(1, results.size()).     MyBean result = results.get(0).     assertEquals("Foo", result.getString()).     assertEquals(42, result.getNumber()).     assertEquals(42F, result.getFraction(), 0F).     assertArrayEquals(new String[] { "Foo", "Bar" }, result.getArray()).     assertTrue(result.isBool()).     assertArrayEquals(new byte[] { 0x1, 0x2 }, result.getBytes()).     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     converter.write(results, new MediaType("application", "json"), outputMessage).     JSONAssert.assertEquals(body, outputMessage.getBodyAsString(StandardCharsets.UTF_8), true). }
false;public;0;30;;@Test @SuppressWarnings("unchecked") public void readAndWriteParameterizedType() throws Exception {     ParameterizedTypeReference<List<MyBean>> beansList = new ParameterizedTypeReference<List<MyBean>>() {     }.     String body = "[{" + "\"bytes\":\"AQI=\"," + "\"array\":[\"Foo\",\"Bar\"]," + "\"number\":42," + "\"string\":\"Foo\"," + "\"bool\":true," + "\"fraction\":42.0}]".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "json")).     MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter().     List<MyBean> results = (List<MyBean>) converter.read(beansList.getType(), null, inputMessage).     assertEquals(1, results.size()).     MyBean result = results.get(0).     assertEquals("Foo", result.getString()).     assertEquals(42, result.getNumber()).     assertEquals(42F, result.getFraction(), 0F).     assertArrayEquals(new String[] { "Foo", "Bar" }, result.getArray()).     assertTrue(result.isBool()).     assertArrayEquals(new byte[] { 0x1, 0x2 }, result.getBytes()).     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     converter.write(results, beansList.getType(), new MediaType("application", "json"), outputMessage).     JSONAssert.assertEquals(body, outputMessage.getBodyAsString(StandardCharsets.UTF_8), true). }
false;public;0;31;;@Test @SuppressWarnings("unchecked") public void writeParameterizedBaseType() throws Exception {     ParameterizedTypeReference<List<MyBean>> beansList = new ParameterizedTypeReference<List<MyBean>>() {     }.     ParameterizedTypeReference<List<MyBase>> baseList = new ParameterizedTypeReference<List<MyBase>>() {     }.     String body = "[{" + "\"bytes\":\"AQI=\"," + "\"array\":[\"Foo\",\"Bar\"]," + "\"number\":42," + "\"string\":\"Foo\"," + "\"bool\":true," + "\"fraction\":42.0}]".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "json")).     MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter().     List<MyBean> results = (List<MyBean>) converter.read(beansList.getType(), null, inputMessage).     assertEquals(1, results.size()).     MyBean result = results.get(0).     assertEquals("Foo", result.getString()).     assertEquals(42, result.getNumber()).     assertEquals(42F, result.getFraction(), 0F).     assertArrayEquals(new String[] { "Foo", "Bar" }, result.getArray()).     assertTrue(result.isBool()).     assertArrayEquals(new byte[] { 0x1, 0x2 }, result.getBytes()).     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     converter.write(results, baseList.getType(), new MediaType("application", "json"), outputMessage).     JSONAssert.assertEquals(body, outputMessage.getBodyAsString(StandardCharsets.UTF_8), true). }
false;public;0;13;;@Test public void prettyPrint() throws Exception {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     PrettyPrintBean bean = new PrettyPrintBean().     bean.setName("Jason").     this.converter.setPrettyPrint(true).     this.converter.writeInternal(bean, null, outputMessage).     String result = outputMessage.getBodyAsString(StandardCharsets.UTF_8).     assertEquals("{" + NEWLINE_SYSTEM_PROPERTY + "  \"name\" : \"Jason\"" + NEWLINE_SYSTEM_PROPERTY + "}", result). }
false;public;0;13;;@Test public void prettyPrintWithSse() throws Exception {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     outputMessage.getHeaders().setContentType(MediaType.TEXT_EVENT_STREAM).     PrettyPrintBean bean = new PrettyPrintBean().     bean.setName("Jason").     this.converter.setPrettyPrint(true).     this.converter.writeInternal(bean, null, outputMessage).     String result = outputMessage.getBodyAsString(StandardCharsets.UTF_8).     assertEquals("{\ndata:  \"name\" : \"Jason\"\ndata:}", result). }
false;public;0;8;;@Test public void prefixJson() throws Exception {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     this.converter.setPrefixJson(true).     this.converter.writeInternal("foo", null, outputMessage).     assertEquals(")]}', \"foo\"", outputMessage.getBodyAsString(StandardCharsets.UTF_8)). }
false;public;0;8;;@Test public void prefixJsonCustom() throws Exception {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     this.converter.setJsonPrefix(")))").     this.converter.writeInternal("foo", null, outputMessage).     assertEquals(")))\"foo\"", outputMessage.getBodyAsString(StandardCharsets.UTF_8)). }
false;public;0;17;;@Test public void fieldLevelJsonView() throws Exception {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     JacksonViewBean bean = new JacksonViewBean().     bean.setWithView1("with").     bean.setWithView2("with").     bean.setWithoutView("without").     MappingJacksonValue jacksonValue = new MappingJacksonValue(bean).     jacksonValue.setSerializationView(MyJacksonView1.class).     this.converter.writeInternal(jacksonValue, null, outputMessage).     String result = outputMessage.getBodyAsString(StandardCharsets.UTF_8).     assertThat(result, containsString("\"withView1\":\"with\"")).     assertThat(result, not(containsString("\"withView2\":\"with\""))).     assertThat(result, not(containsString("\"withoutView\":\"without\""))). }
false;public;0;17;;@Test public void classLevelJsonView() throws Exception {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     JacksonViewBean bean = new JacksonViewBean().     bean.setWithView1("with").     bean.setWithView2("with").     bean.setWithoutView("without").     MappingJacksonValue jacksonValue = new MappingJacksonValue(bean).     jacksonValue.setSerializationView(MyJacksonView3.class).     this.converter.writeInternal(jacksonValue, null, outputMessage).     String result = outputMessage.getBodyAsString(StandardCharsets.UTF_8).     assertThat(result, not(containsString("\"withView1\":\"with\""))).     assertThat(result, not(containsString("\"withView2\":\"with\""))).     assertThat(result, containsString("\"withoutView\":\"without\"")). }
false;public;0;17;;@Test public void filters() throws Exception {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     JacksonFilteredBean bean = new JacksonFilteredBean().     bean.setProperty1("value").     bean.setProperty2("value").     MappingJacksonValue jacksonValue = new MappingJacksonValue(bean).     FilterProvider filters = new SimpleFilterProvider().addFilter("myJacksonFilter", SimpleBeanPropertyFilter.serializeAllExcept("property2")).     jacksonValue.setFilters(filters).     this.converter.writeInternal(jacksonValue, null, outputMessage).     String result = outputMessage.getBodyAsString(StandardCharsets.UTF_8).     assertThat(result, containsString("\"property1\":\"value\"")).     assertThat(result, not(containsString("\"property2\":\"value\""))). }
false;public;0;13;;// SPR-13318 @Test public void writeSubType() throws Exception {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     MyBean bean = new MyBean().     bean.setString("Foo").     bean.setNumber(42).     this.converter.writeInternal(bean, MyInterface.class, outputMessage).     String result = outputMessage.getBodyAsString(StandardCharsets.UTF_8).     assertTrue(result.contains("\"string\":\"Foo\"")).     assertTrue(result.contains("\"number\":42")). }
false;public;0;23;;// SPR-13318 @Test public void writeSubTypeList() throws Exception {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     List<MyBean> beans = new ArrayList<>().     MyBean foo = new MyBean().     foo.setString("Foo").     foo.setNumber(42).     beans.add(foo).     MyBean bar = new MyBean().     bar.setString("Bar").     bar.setNumber(123).     beans.add(bar).     ParameterizedTypeReference<List<MyInterface>> typeReference = new ParameterizedTypeReference<List<MyInterface>>() {     }.     this.converter.writeInternal(beans, typeReference.getType(), outputMessage).     String result = outputMessage.getBodyAsString(StandardCharsets.UTF_8).     assertTrue(result.contains("\"string\":\"Foo\"")).     assertTrue(result.contains("\"number\":42")).     assertTrue(result.contains("\"string\":\"Bar\"")).     assertTrue(result.contains("\"number\":123")). }
false;public;0;14;;@Test public void readWithNoDefaultConstructor() throws Exception {     String body = "{\"property1\":\"foo\",\"property2\":\"bar\"}".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "json")).     try {         converter.read(BeanWithNoDefaultConstructor.class, inputMessage).     } catch (HttpMessageConversionException ex) {         assertTrue(ex.getMessage(), ex.getMessage().startsWith("Type definition error:")).         return.     }     fail(). }
false;;0;1;;String getString().
false;;1;1;;void setString(String string).
false;public;0;3;;public String getString() {     return string. }
false;public;1;3;;public void setString(String string) {     this.string = string. }
false;public;0;3;;public int getNumber() {     return number. }
false;public;1;3;;public void setNumber(int number) {     this.number = number. }
false;public;0;3;;public float getFraction() {     return fraction. }
false;public;1;3;;public void setFraction(float fraction) {     this.fraction = fraction. }
false;public;0;3;;public String[] getArray() {     return array. }
false;public;1;3;;public void setArray(String[] array) {     this.array = array. }
false;public;0;3;;public boolean isBool() {     return bool. }
false;public;1;3;;public void setBool(boolean bool) {     this.bool = bool. }
false;public;0;3;;public byte[] getBytes() {     return bytes. }
false;public;1;3;;public void setBytes(byte[] bytes) {     this.bytes = bytes. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getWithView1() {     return withView1. }
false;public;1;3;;public void setWithView1(String withView1) {     this.withView1 = withView1. }
false;public;0;3;;public String getWithView2() {     return withView2. }
false;public;1;3;;public void setWithView2(String withView2) {     this.withView2 = withView2. }
false;public;0;3;;public String getWithoutView() {     return withoutView. }
false;public;1;3;;public void setWithoutView(String withoutView) {     this.withoutView = withoutView. }
false;public;0;3;;public String getProperty1() {     return property1. }
false;public;1;3;;public void setProperty1(String property1) {     this.property1 = property1. }
false;public;0;3;;public String getProperty2() {     return property2. }
false;public;1;3;;public void setProperty2(String property2) {     this.property2 = property2. }
false;public;0;3;;public String getProperty1() {     return property1. }
false;public;0;3;;public String getProperty2() {     return property2. }
