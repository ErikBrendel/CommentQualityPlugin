commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setHost(String host) {     this.host = host. }
false;public;0;3;;public String getHost() {     return host. }
false;public;1;4;;@Override public void setPort(int port) {     this.port = port. }
false;public;0;4;;@Override public int getPort() {     return this.port. }
false;public;1;4;;@Override public void setHandler(HttpHandler handler) {     this.httpHandler = handler. }
false;public;0;3;;public HttpHandler getHttpHandler() {     return this.httpHandler. }
false;public;2;6;;public void registerHttpHandler(String contextPath, HttpHandler handler) {     if (this.handlerMap == null) {         this.handlerMap = new LinkedHashMap<>().     }     this.handlerMap.put(contextPath, handler). }
false;public;0;3;;public Map<String, HttpHandler> getHttpHandlerMap() {     return this.handlerMap. }
false;protected;0;4;;protected HttpHandler resolveHttpHandler() {     return (getHttpHandlerMap() != null ? new ContextPathCompositeHandler(getHttpHandlerMap()) : getHttpHandler()). }
false;public,final;0;11;;// InitializingBean @Override public final void afterPropertiesSet() throws Exception {     Assert.notNull(this.host, "Host must not be null").     Assert.isTrue(this.port >= 0, "Port must not be a negative number").     Assert.isTrue(this.httpHandler != null || this.handlerMap != null, "No HttpHandler configured").     Assert.state(!this.running, "Cannot reconfigure while running").     synchronized (this.lifecycleMonitor) {         initServer().     } }
false;protected,abstract;0;1;;protected abstract void initServer() throws Exception.
false;public,final;0;25;;// Lifecycle @Override public final void start() {     synchronized (this.lifecycleMonitor) {         if (!isRunning()) {             String serverName = getClass().getSimpleName().             if (logger.isDebugEnabled()) {                 logger.debug("Starting " + serverName + "...").             }             this.running = true.             try {                 StopWatch stopWatch = new StopWatch().                 stopWatch.start().                 startInternal().                 long millis = stopWatch.getTotalTimeMillis().                 if (logger.isDebugEnabled()) {                     logger.debug("Server started on port " + getPort() + "(" + millis + " millis).").                 }             } catch (Throwable ex) {                 throw new IllegalStateException(ex).             }         }     } }
false;protected,abstract;0;1;;protected abstract void startInternal() throws Exception.
false;public,final;0;22;;@Override public final void stop() {     synchronized (this.lifecycleMonitor) {         if (isRunning()) {             String serverName = getClass().getSimpleName().             logger.debug("Stopping " + serverName + "...").             this.running = false.             try {                 StopWatch stopWatch = new StopWatch().                 stopWatch.start().                 stopInternal().                 logger.debug("Server stopped (" + stopWatch.getTotalTimeMillis() + " millis).").             } catch (Throwable ex) {                 throw new IllegalStateException(ex).             } finally {                 reset().             }         }     } }
false;protected,abstract;0;1;;protected abstract void stopInternal() throws Exception.
false;public;0;4;;@Override public boolean isRunning() {     return this.running. }
false;private;0;7;;private void reset() {     this.host = "0.0.0.0".     this.port = 0.     this.httpHandler = null.     this.handlerMap = null.     resetInternal(). }
false;protected,abstract;0;1;;protected abstract void resetInternal().
