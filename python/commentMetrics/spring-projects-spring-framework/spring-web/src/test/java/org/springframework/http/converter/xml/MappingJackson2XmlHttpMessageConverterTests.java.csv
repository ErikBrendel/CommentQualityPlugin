commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void canRead() {     assertTrue(converter.canRead(MyBean.class, new MediaType("application", "xml"))).     assertTrue(converter.canRead(MyBean.class, new MediaType("text", "xml"))).     assertTrue(converter.canRead(MyBean.class, new MediaType("application", "soap+xml"))). }
false;public;0;6;;@Test public void canWrite() {     assertTrue(converter.canWrite(MyBean.class, new MediaType("application", "xml"))).     assertTrue(converter.canWrite(MyBean.class, new MediaType("text", "xml"))).     assertTrue(converter.canWrite(MyBean.class, new MediaType("application", "soap+xml"))). }
false;public;0;20;;@Test public void read() throws IOException {     String body = "<MyBean>" + "<string>Foo</string>" + "<number>42</number>" + "<fraction>42.0</fraction>" + "<array><array>Foo</array>" + "<array>Bar</array></array>" + "<bool>true</bool>" + "<bytes>AQI=</bytes></MyBean>".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "xml")).     MyBean result = (MyBean) converter.read(MyBean.class, inputMessage).     assertEquals("Foo", result.getString()).     assertEquals(42, result.getNumber()).     assertEquals(42F, result.getFraction(), 0F).     assertArrayEquals(new String[] { "Foo", "Bar" }, result.getArray()).     assertTrue(result.isBool()).     assertArrayEquals(new byte[] { 0x1, 0x2 }, result.getBytes()). }
false;public;0;21;;@Test public void write() throws IOException {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     MyBean body = new MyBean().     body.setString("Foo").     body.setNumber(42).     body.setFraction(42F).     body.setArray(new String[] { "Foo", "Bar" }).     body.setBool(true).     body.setBytes(new byte[] { 0x1, 0x2 }).     converter.write(body, null, outputMessage).     String result = outputMessage.getBodyAsString(StandardCharsets.UTF_8).     assertTrue(result.contains("<string>Foo</string>")).     assertTrue(result.contains("<number>42</number>")).     assertTrue(result.contains("<fraction>42.0</fraction>")).     assertTrue(result.contains("<array><array>Foo</array><array>Bar</array></array>")).     assertTrue(result.contains("<bool>true</bool>")).     assertTrue(result.contains("<bytes>AQI=</bytes>")).     assertEquals("Invalid content-type", new MediaType("application", "xml", StandardCharsets.UTF_8), outputMessage.getHeaders().getContentType()). }
false;public;0;8;;@Test public void readInvalidXml() throws IOException {     String body = "FooBar".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "xml")).     this.thrown.expect(HttpMessageNotReadableException.class).     converter.read(MyBean.class, inputMessage). }
false;public;0;8;;@Test public void readValidXmlWithUnknownProperty() throws IOException {     String body = "<MyBean><string>string</string><unknownProperty>value</unknownProperty></MyBean>".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "xml")).     converter.read(MyBean.class, inputMessage). // Assert no HttpMessageNotReadableException is thrown }
false;public;0;17;;@Test public void jsonView() throws Exception {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     JacksonViewBean bean = new JacksonViewBean().     bean.setWithView1("with").     bean.setWithView2("with").     bean.setWithoutView("without").     MappingJacksonValue jacksonValue = new MappingJacksonValue(bean).     jacksonValue.setSerializationView(MyJacksonView1.class).     this.converter.write(jacksonValue, null, outputMessage).     String result = outputMessage.getBodyAsString(StandardCharsets.UTF_8).     assertThat(result, containsString("<withView1>with</withView1>")).     assertThat(result, not(containsString("<withView2>with</withView2>"))).     assertThat(result, not(containsString("<withoutView>without</withoutView>"))). }
false;public;0;5;;@Test public void customXmlMapper() {     new MappingJackson2XmlHttpMessageConverter(new MyXmlMapper()). // Assert no exception is thrown }
false;public;0;14;;@Test public void readWithExternalReference() throws IOException {     String body = "<!DOCTYPE MyBean SYSTEM \"http://192.168.28.42/1.jsp\" [" + "  <!ELEMENT root ANY >\n" + "  <!ENTITY ext SYSTEM \"" + new ClassPathResource("external.txt", getClass()).getURI() + "\" >]><MyBean><string>&ext.</string></MyBean>".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "xml")).     this.thrown.expect(HttpMessageNotReadableException.class).     this.converter.read(MyBean.class, inputMessage). }
false;public;0;26;;@Test public void readWithXmlBomb() throws IOException {     // https://en.wikipedia.org/wiki/Billion_laughs     // https://msdn.microsoft.com/en-us/magazine/ee335713.aspx     String body = "<?xml version=\"1.0\"?>\n" + "<!DOCTYPE lolz [\n" + " <!ENTITY lol \"lol\">\n" + " <!ELEMENT lolz (#PCDATA)>\n" + " <!ENTITY lol1 \"&lol.&lol.&lol.&lol.&lol.&lol.&lol.&lol.&lol.&lol.\">\n" + " <!ENTITY lol2 \"&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.\">\n" + " <!ENTITY lol3 \"&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.\">\n" + " <!ENTITY lol4 \"&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.\">\n" + " <!ENTITY lol5 \"&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.\">\n" + " <!ENTITY lol6 \"&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.\">\n" + " <!ENTITY lol7 \"&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.\">\n" + " <!ENTITY lol8 \"&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.\">\n" + " <!ENTITY lol9 \"&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.\">\n" + "]>\n" + "<MyBean>&lol9.</MyBean>".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "xml")).     this.thrown.expect(HttpMessageNotReadableException.class).     this.converter.read(MyBean.class, inputMessage). }
false;public;0;3;;public byte[] getBytes() {     return bytes. }
false;public;1;3;;public void setBytes(byte[] bytes) {     this.bytes = bytes. }
false;public;0;3;;public boolean isBool() {     return bool. }
false;public;1;3;;public void setBool(boolean bool) {     this.bool = bool. }
false;public;0;3;;public String getString() {     return string. }
false;public;1;3;;public void setString(String string) {     this.string = string. }
false;public;0;3;;public int getNumber() {     return number. }
false;public;1;3;;public void setNumber(int number) {     this.number = number. }
false;public;0;3;;public float getFraction() {     return fraction. }
false;public;1;3;;public void setFraction(float fraction) {     this.fraction = fraction. }
false;public;0;3;;public String[] getArray() {     return array. }
false;public;1;3;;public void setArray(String[] array) {     this.array = array. }
false;public;0;3;;public String getWithView1() {     return withView1. }
false;public;1;3;;public void setWithView1(String withView1) {     this.withView1 = withView1. }
false;public;0;3;;public String getWithView2() {     return withView2. }
false;public;1;3;;public void setWithView2(String withView2) {     this.withView2 = withView2. }
false;public;0;3;;public String getWithoutView() {     return withoutView. }
false;public;1;3;;public void setWithoutView(String withoutView) {     this.withoutView = withoutView. }
