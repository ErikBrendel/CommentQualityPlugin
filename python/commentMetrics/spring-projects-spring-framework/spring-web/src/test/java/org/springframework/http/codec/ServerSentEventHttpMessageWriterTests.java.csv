commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() {     this.outputMessage = new MockServerHttpResponse(this.bufferFactory). }
false;public;0;12;;@Test public void canWrite() {     assertTrue(this.messageWriter.canWrite(forClass(Object.class), null)).     assertFalse(this.messageWriter.canWrite(forClass(Object.class), new MediaType("foo", "bar"))).     assertTrue(this.messageWriter.canWrite(null, MediaType.TEXT_EVENT_STREAM)).     assertTrue(this.messageWriter.canWrite(forClass(ServerSentEvent.class), new MediaType("foo", "bar"))).     // SPR-15464     assertTrue(this.messageWriter.canWrite(ResolvableType.NONE, MediaType.TEXT_EVENT_STREAM)).     assertFalse(this.messageWriter.canWrite(ResolvableType.NONE, new MediaType("foo", "bar"))). }
false;public;0;15;;@Test public void writeServerSentEvent() {     ServerSentEvent<?> event = ServerSentEvent.builder().data("bar").id("c42").event("foo").comment("bla\nbla bla\nbla bla bla").retry(Duration.ofMillis(123L)).build().     Mono<ServerSentEvent> source = Mono.just(event).     testWrite(source, outputMessage, ServerSentEvent.class).     StepVerifier.create(outputMessage.getBody()).consumeNextWith(stringConsumer("id:c42\nevent:foo\nretry:123\n:bla\n:bla bla\n:bla bla bla\ndata:")).consumeNextWith(stringConsumer("bar\n")).consumeNextWith(stringConsumer("\n")).expectComplete().verify(). }
false;public;0;15;;@Test public void writeString() {     Flux<String> source = Flux.just("foo", "bar").     testWrite(source, outputMessage, String.class).     StepVerifier.create(outputMessage.getBody()).consumeNextWith(stringConsumer("data:")).consumeNextWith(stringConsumer("foo\n")).consumeNextWith(stringConsumer("\n")).consumeNextWith(stringConsumer("data:")).consumeNextWith(stringConsumer("bar\n")).consumeNextWith(stringConsumer("\n")).expectComplete().verify(). }
false;public;0;15;;@Test public void writeMultiLineString() {     Flux<String> source = Flux.just("foo\nbar", "foo\nbaz").     testWrite(source, outputMessage, String.class).     StepVerifier.create(outputMessage.getBody()).consumeNextWith(stringConsumer("data:")).consumeNextWith(stringConsumer("foo\ndata:bar\n")).consumeNextWith(stringConsumer("\n")).consumeNextWith(stringConsumer("data:")).consumeNextWith(stringConsumer("foo\ndata:baz\n")).consumeNextWith(stringConsumer("\n")).expectComplete().verify(). }
false;public;0;20;;// SPR-16516 @Test public void writeStringWithCustomCharset() {     Flux<String> source = Flux.just("\u00A3").     Charset charset = StandardCharsets.ISO_8859_1.     MediaType mediaType = new MediaType("text", "event-stream", charset).     testWrite(source, mediaType, outputMessage, String.class).     assertEquals(mediaType, outputMessage.getHeaders().getContentType()).     StepVerifier.create(outputMessage.getBody()).consumeNextWith(stringConsumer("data:")).consumeNextWith(dataBuffer -> {         String value = DataBufferTestUtils.dumpString(dataBuffer, charset).         DataBufferUtils.release(dataBuffer).         assertEquals("\u00A3\n", value).     }).consumeNextWith(stringConsumer("\n")).expectComplete().verify(). }
false;public;0;17;;@Test public void writePojo() {     Flux<Pojo> source = Flux.just(new Pojo("foofoo", "barbar"), new Pojo("foofoofoo", "barbarbar")).     testWrite(source, outputMessage, Pojo.class).     StepVerifier.create(outputMessage.getBody()).consumeNextWith(stringConsumer("data:")).consumeNextWith(stringConsumer("{\"foo\":\"foofoo\",\"bar\":\"barbar\"}")).consumeNextWith(stringConsumer("\n")).consumeNextWith(stringConsumer("\n")).consumeNextWith(stringConsumer("data:")).consumeNextWith(stringConsumer("{\"foo\":\"foofoofoo\",\"bar\":\"barbarbar\"}")).consumeNextWith(stringConsumer("\n")).consumeNextWith(stringConsumer("\n")).expectComplete().verify(). }
false;public;0;24;;// SPR-14899 @Test public void writePojoWithPrettyPrint() {     ObjectMapper mapper = Jackson2ObjectMapperBuilder.json().indentOutput(true).build().     this.messageWriter = new ServerSentEventHttpMessageWriter(new Jackson2JsonEncoder(mapper)).     Flux<Pojo> source = Flux.just(new Pojo("foofoo", "barbar"), new Pojo("foofoofoo", "barbarbar")).     testWrite(source, outputMessage, Pojo.class).     StepVerifier.create(outputMessage.getBody()).consumeNextWith(stringConsumer("data:")).consumeNextWith(stringConsumer("{\n" + "data:  \"foo\" : \"foofoo\",\n" + "data:  \"bar\" : \"barbar\"\n" + "data:}")).consumeNextWith(stringConsumer("\n")).consumeNextWith(stringConsumer("\n")).consumeNextWith(stringConsumer("data:")).consumeNextWith(stringConsumer("{\n" + "data:  \"foo\" : \"foofoofoo\",\n" + "data:  \"bar\" : \"barbarbar\"\n" + "data:}")).consumeNextWith(stringConsumer("\n")).consumeNextWith(stringConsumer("\n")).expectComplete().verify(). }
false;public;0;35;;// SPR-16516, SPR-16539 @Test public void writePojoWithCustomEncoding() {     Flux<Pojo> source = Flux.just(new Pojo("foo\uD834\uDD1E", "bar\uD834\uDD1E")).     Charset charset = StandardCharsets.UTF_16LE.     MediaType mediaType = new MediaType("text", "event-stream", charset).     testWrite(source, mediaType, outputMessage, Pojo.class).     assertEquals(mediaType, outputMessage.getHeaders().getContentType()).     StepVerifier.create(outputMessage.getBody()).consumeNextWith(dataBuffer1 -> {         String value1 = DataBufferTestUtils.dumpString(dataBuffer1, charset).         DataBufferUtils.release(dataBuffer1).         assertEquals("data:", value1).     }).consumeNextWith(dataBuffer -> {         String value = DataBufferTestUtils.dumpString(dataBuffer, charset).         DataBufferUtils.release(dataBuffer).         assertEquals("{\"foo\":\"foo\uD834\uDD1E\",\"bar\":\"bar\uD834\uDD1E\"}", value).     }).consumeNextWith(dataBuffer2 -> {         String value2 = DataBufferTestUtils.dumpString(dataBuffer2, charset).         DataBufferUtils.release(dataBuffer2).         assertEquals("\n", value2).     }).consumeNextWith(dataBuffer3 -> {         String value3 = DataBufferTestUtils.dumpString(dataBuffer3, charset).         DataBufferUtils.release(dataBuffer3).         assertEquals("\n", value3).     }).expectComplete().verify(). }
false;private;3;3;;private <T> void testWrite(Publisher<T> source, MockServerHttpResponse response, Class<T> clazz) {     testWrite(source, MediaType.TEXT_EVENT_STREAM, response, clazz). }
false;private;4;9;;private <T> void testWrite(Publisher<T> source, MediaType mediaType, MockServerHttpResponse response, Class<T> clazz) {     Mono<Void> result = this.messageWriter.write(source, forClass(clazz), mediaType, response, HINTS).     StepVerifier.create(result).verifyComplete(). }
