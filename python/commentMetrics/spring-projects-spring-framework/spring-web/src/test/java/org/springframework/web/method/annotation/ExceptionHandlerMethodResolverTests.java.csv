commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void resolveMethodFromAnnotation() {     ExceptionHandlerMethodResolver resolver = new ExceptionHandlerMethodResolver(ExceptionController.class).     IOException exception = new IOException().     assertEquals("handleIOException", resolver.resolveMethod(exception).getName()). }
false;public;0;6;;@Test public void resolveMethodFromArgument() {     ExceptionHandlerMethodResolver resolver = new ExceptionHandlerMethodResolver(ExceptionController.class).     IllegalArgumentException exception = new IllegalArgumentException().     assertEquals("handleIllegalArgumentException", resolver.resolveMethod(exception).getName()). }
false;public;0;8;;@Test public void resolveMethodExceptionSubType() {     ExceptionHandlerMethodResolver resolver = new ExceptionHandlerMethodResolver(ExceptionController.class).     IOException ioException = new FileNotFoundException().     assertEquals("handleIOException", resolver.resolveMethod(ioException).getName()).     SocketException bindException = new BindException().     assertEquals("handleSocketException", resolver.resolveMethod(bindException).getName()). }
false;public;0;6;;@Test public void resolveMethodBestMatch() {     ExceptionHandlerMethodResolver resolver = new ExceptionHandlerMethodResolver(ExceptionController.class).     SocketException exception = new SocketException().     assertEquals("handleSocketException", resolver.resolveMethod(exception).getName()). }
false;public;0;7;;@Test public void resolveMethodNoMatch() {     ExceptionHandlerMethodResolver resolver = new ExceptionHandlerMethodResolver(ExceptionController.class).     Exception exception = new Exception().     assertNull("1st lookup", resolver.resolveMethod(exception)).     assertNull("2nd lookup from cache", resolver.resolveMethod(exception)). }
false;public;0;6;;@Test public void resolveMethodInherited() {     ExceptionHandlerMethodResolver resolver = new ExceptionHandlerMethodResolver(InheritedController.class).     IOException exception = new IOException().     assertEquals("handleIOException", resolver.resolveMethod(exception).getName()). }
false;public;0;4;;@Test(expected = IllegalStateException.class) public void ambiguousExceptionMapping() {     new ExceptionHandlerMethodResolver(AmbiguousController.class). }
false;public;0;4;;@Test(expected = IllegalStateException.class) public void noExceptionMapping() {     new ExceptionHandlerMethodResolver(NoExceptionController.class). }
false;public;0;1;;public void handle() { }
false;public;0;3;;@ExceptionHandler(IOException.class) public void handleIOException() { }
false;public;0;3;;@ExceptionHandler(SocketException.class) public void handleSocketException() { }
false;public;1;3;;@ExceptionHandler public void handleIllegalArgumentException(IllegalArgumentException exception) { }
false;public;0;3;;@Override public void handleIOException() { }
false;public;0;1;;public void handle() { }
false;public;3;5;;@ExceptionHandler({ BindException.class, IllegalArgumentException.class }) public String handle1(Exception ex, HttpServletRequest request, HttpServletResponse response) throws IOException {     return ClassUtils.getShortName(ex.getClass()). }
false;public;1;4;;@ExceptionHandler public String handle2(IllegalArgumentException ex) {     return ClassUtils.getShortName(ex.getClass()). }
false;public;0;3;;@ExceptionHandler public void handle() { }
