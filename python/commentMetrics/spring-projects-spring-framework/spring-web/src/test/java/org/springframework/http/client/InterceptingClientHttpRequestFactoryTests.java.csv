commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void basic() throws Exception {     List<ClientHttpRequestInterceptor> interceptors = new ArrayList<>().     interceptors.add(new NoOpInterceptor()).     interceptors.add(new NoOpInterceptor()).     interceptors.add(new NoOpInterceptor()).     requestFactory = new InterceptingClientHttpRequestFactory(requestFactoryMock, interceptors).     ClientHttpRequest request = requestFactory.createRequest(new URI("http://example.com"), HttpMethod.GET).     ClientHttpResponse response = request.execute().     assertTrue(((NoOpInterceptor) interceptors.get(0)).invoked).     assertTrue(((NoOpInterceptor) interceptors.get(1)).invoked).     assertTrue(((NoOpInterceptor) interceptors.get(2)).invoked).     assertTrue(requestMock.executed).     assertSame(responseMock, response). }
false;public;3;5;;@Override public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {     return responseMock. }
false;public;0;21;;@Test public void noExecution() throws Exception {     List<ClientHttpRequestInterceptor> interceptors = new ArrayList<>().     interceptors.add(new ClientHttpRequestInterceptor() {          @Override         public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {             return responseMock.         }     }).     interceptors.add(new NoOpInterceptor()).     requestFactory = new InterceptingClientHttpRequestFactory(requestFactoryMock, interceptors).     ClientHttpRequest request = requestFactory.createRequest(new URI("http://example.com"), HttpMethod.GET).     ClientHttpResponse response = request.execute().     assertFalse(((NoOpInterceptor) interceptors.get(1)).invoked).     assertFalse(requestMock.executed).     assertSame(responseMock, response). }
false;public;3;7;;@Override public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {     HttpRequestWrapper wrapper = new HttpRequestWrapper(request).     wrapper.getHeaders().add(headerName, otherValue).     return execution.execute(wrapper, body). }
false;public;0;8;;@Override public ClientHttpResponse execute() throws IOException {     List<String> headerValues = getHeaders().get(headerName).     assertEquals(2, headerValues.size()).     assertEquals(headerValue, headerValues.get(0)).     assertEquals(otherValue, headerValues.get(1)).     return super.execute(). }
false;public;0;34;;@Test public void changeHeaders() throws Exception {     final String headerName = "Foo".     final String headerValue = "Bar".     final String otherValue = "Baz".     ClientHttpRequestInterceptor interceptor = new ClientHttpRequestInterceptor() {          @Override         public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {             HttpRequestWrapper wrapper = new HttpRequestWrapper(request).             wrapper.getHeaders().add(headerName, otherValue).             return execution.execute(wrapper, body).         }     }.     requestMock = new RequestMock() {          @Override         public ClientHttpResponse execute() throws IOException {             List<String> headerValues = getHeaders().get(headerName).             assertEquals(2, headerValues.size()).             assertEquals(headerValue, headerValues.get(0)).             assertEquals(otherValue, headerValues.get(1)).             return super.execute().         }     }.     requestMock.getHeaders().add(headerName, headerValue).     requestFactory = new InterceptingClientHttpRequestFactory(requestFactoryMock, Collections.singletonList(interceptor)).     ClientHttpRequest request = requestFactory.createRequest(new URI("http://example.com"), HttpMethod.GET).     request.execute(). }
false;public;0;4;;@Override public URI getURI() {     return changedUri. }
false;public;3;11;;@Override public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {     return execution.execute(new HttpRequestWrapper(request) {          @Override         public URI getURI() {             return changedUri.         }     }, body). }
false;public;2;5;;@Override public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {     assertEquals(changedUri, uri).     return super.createRequest(uri, httpMethod). }
false;public;0;32;;@Test public void changeURI() throws Exception {     final URI changedUri = new URI("http://example.com/2").     ClientHttpRequestInterceptor interceptor = new ClientHttpRequestInterceptor() {          @Override         public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {             return execution.execute(new HttpRequestWrapper(request) {                  @Override                 public URI getURI() {                     return changedUri.                 }             }, body).         }     }.     requestFactoryMock = new RequestFactoryMock() {          @Override         public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {             assertEquals(changedUri, uri).             return super.createRequest(uri, httpMethod).         }     }.     requestFactory = new InterceptingClientHttpRequestFactory(requestFactoryMock, Collections.singletonList(interceptor)).     ClientHttpRequest request = requestFactory.createRequest(new URI("http://example.com"), HttpMethod.GET).     request.execute(). }
false;public;0;4;;@Override public HttpMethod getMethod() {     return changedMethod. }
false;public;3;11;;@Override public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {     return execution.execute(new HttpRequestWrapper(request) {          @Override         public HttpMethod getMethod() {             return changedMethod.         }     }, body). }
false;public;2;5;;@Override public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {     assertEquals(changedMethod, httpMethod).     return super.createRequest(uri, httpMethod). }
false;public;0;32;;@Test public void changeMethod() throws Exception {     final HttpMethod changedMethod = HttpMethod.POST.     ClientHttpRequestInterceptor interceptor = new ClientHttpRequestInterceptor() {          @Override         public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {             return execution.execute(new HttpRequestWrapper(request) {                  @Override                 public HttpMethod getMethod() {                     return changedMethod.                 }             }, body).         }     }.     requestFactoryMock = new RequestFactoryMock() {          @Override         public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {             assertEquals(changedMethod, httpMethod).             return super.createRequest(uri, httpMethod).         }     }.     requestFactory = new InterceptingClientHttpRequestFactory(requestFactoryMock, Collections.singletonList(interceptor)).     ClientHttpRequest request = requestFactory.createRequest(new URI("http://example.com"), HttpMethod.GET).     request.execute(). }
false;public;3;5;;@Override public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {     return execution.execute(request, changedBody). }
false;public;0;19;;@Test public void changeBody() throws Exception {     final byte[] changedBody = "Foo".getBytes().     ClientHttpRequestInterceptor interceptor = new ClientHttpRequestInterceptor() {          @Override         public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {             return execution.execute(request, changedBody).         }     }.     requestFactory = new InterceptingClientHttpRequestFactory(requestFactoryMock, Collections.singletonList(interceptor)).     ClientHttpRequest request = requestFactory.createRequest(new URI("http://example.com"), HttpMethod.GET).     request.execute().     assertTrue(Arrays.equals(changedBody, requestMock.body.toByteArray())). }
false;public;3;6;;@Override public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {     invoked = true.     return execution.execute(request, body). }
false;public;2;6;;@Override public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {     requestMock.setURI(uri).     requestMock.setMethod(httpMethod).     return requestMock. }
false;public;0;4;;@Override public URI getURI() {     return uri. }
false;public;1;3;;public void setURI(URI uri) {     this.uri = uri. }
false;public;0;4;;@Override public HttpMethod getMethod() {     return method. }
false;public;0;4;;@Override public String getMethodValue() {     return method.name(). }
false;public;1;3;;public void setMethod(HttpMethod method) {     this.method = method. }
false;public;0;4;;@Override public HttpHeaders getHeaders() {     return headers. }
false;public;0;4;;@Override public OutputStream getBody() throws IOException {     return body. }
false;public;0;5;;@Override public ClientHttpResponse execute() throws IOException {     executed = true.     return responseMock. }
false;public;0;4;;@Override public HttpStatus getStatusCode() throws IOException {     return statusCode. }
false;public;0;4;;@Override public int getRawStatusCode() throws IOException {     return statusCode.value(). }
false;public;0;4;;@Override public String getStatusText() throws IOException {     return statusText. }
false;public;0;4;;@Override public HttpHeaders getHeaders() {     return headers. }
false;public;0;4;;@Override public InputStream getBody() throws IOException {     return null. }
false;public;0;3;;@Override public void close() { }
