commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;// Method parameter predicates public static ModelAttributePredicate modelAttribute() {     return new ModelAttributePredicate(). }
false;public,static;0;3;;public static RequestBodyPredicate requestBody() {     return new RequestBodyPredicate(). }
false;public,static;0;3;;public static RequestParamPredicate requestParam() {     return new RequestParamPredicate(). }
false;public,static;0;3;;public static RequestPartPredicate requestPart() {     return new RequestPartPredicate(). }
false;public,static;0;3;;public static RequestAttributePredicate requestAttribute() {     return new RequestAttributePredicate(). }
false;public,static;0;3;;public static MatrixVariablePredicate matrixAttribute() {     return new MatrixVariablePredicate(). }
false;public,static;0;3;;// Method predicates public static ModelAttributeMethodPredicate modelMethod() {     return new ModelAttributeMethodPredicate(). }
false;public,static;0;3;;public static ResponseStatusPredicate responseStatus() {     return new ResponseStatusPredicate(). }
false;public,static;1;3;;public static ResponseStatusPredicate responseStatus(HttpStatus code) {     return new ResponseStatusPredicate(code). }
false;public,static;1;3;;public static RequestMappingPredicate requestMapping(String... path) {     return new RequestMappingPredicate(path). }
false;public,static;1;3;;public static RequestMappingPredicate getMapping(String... path) {     return new RequestMappingPredicate(path).method(RequestMethod.GET). }
false;public,static;1;3;;public static RequestMappingPredicate postMapping(String... path) {     return new RequestMappingPredicate(path).method(RequestMethod.POST). }
false;public,static;1;3;;public static RequestMappingPredicate putMapping(String... path) {     return new RequestMappingPredicate(path).method(RequestMethod.PUT). }
false;public,static;1;3;;public static RequestMappingPredicate deleteMapping(String... path) {     return new RequestMappingPredicate(path).method(RequestMethod.DELETE). }
false;public,static;1;3;;public static RequestMappingPredicate optionsMapping(String... path) {     return new RequestMappingPredicate(path).method(RequestMethod.OPTIONS). }
false;public,static;1;3;;public static RequestMappingPredicate headMapping(String... path) {     return new RequestMappingPredicate(path).method(RequestMethod.HEAD). }
false;public;1;4;;public ModelAttributePredicate name(String name) {     this.name = name.     return this. }
false;public;0;4;;public ModelAttributePredicate noName() {     this.name = "".     return this. }
false;public;0;4;;public ModelAttributePredicate noBinding() {     this.binding = false.     return this. }
false;public;1;7;;@Override public boolean test(MethodParameter parameter) {     ModelAttribute annotation = parameter.getParameterAnnotation(ModelAttribute.class).     return annotation != null && (this.name == null || annotation.name().equals(this.name)) && annotation.binding() == this.binding. }
false;public;0;4;;public RequestBodyPredicate notRequired() {     this.required = false.     return this. }
false;public;1;5;;@Override public boolean test(MethodParameter parameter) {     RequestBody annotation = parameter.getParameterAnnotation(RequestBody.class).     return annotation != null && annotation.required() == this.required. }
false;public;1;4;;public RequestParamPredicate name(String name) {     this.name = name.     return this. }
false;public;0;4;;public RequestParamPredicate noName() {     this.name = "".     return this. }
false;public;0;4;;public RequestParamPredicate notRequired() {     this.required = false.     return this. }
false;public;1;4;;public RequestParamPredicate notRequired(String defaultValue) {     this.defaultValue = defaultValue.     return this. }
false;public;1;8;;@Override public boolean test(MethodParameter parameter) {     RequestParam annotation = parameter.getParameterAnnotation(RequestParam.class).     return annotation != null && (this.name == null || annotation.name().equals(this.name)) && annotation.required() == this.required && annotation.defaultValue().equals(this.defaultValue). }
false;public;1;4;;public RequestPartPredicate name(String name) {     this.name = name.     return this. }
false;public;0;4;;public RequestPartPredicate noName() {     this.name = "".     return this. }
false;public;0;4;;public RequestPartPredicate notRequired() {     this.required = false.     return this. }
false;public;1;7;;@Override public boolean test(MethodParameter parameter) {     RequestPart annotation = parameter.getParameterAnnotation(RequestPart.class).     return annotation != null && (this.name == null || annotation.name().equals(this.name)) && annotation.required() == this.required. }
false;public;1;4;;public ModelAttributeMethodPredicate name(String name) {     this.name = name.     return this. }
false;public;0;4;;public ModelAttributeMethodPredicate noName() {     this.name = "".     return this. }
false;public;1;5;;@Override public boolean test(Method method) {     ModelAttribute annot = AnnotatedElementUtils.findMergedAnnotation(method, ModelAttribute.class).     return annot != null && (this.name == null || annot.name().equals(this.name)). }
false;public;1;4;;public RequestAttributePredicate name(String name) {     this.name = name.     return this. }
false;public;0;4;;public RequestAttributePredicate noName() {     this.name = "".     return this. }
false;public;0;4;;public RequestAttributePredicate notRequired() {     this.required = false.     return this. }
false;public;1;7;;@Override public boolean test(MethodParameter parameter) {     RequestAttribute annotation = parameter.getParameterAnnotation(RequestAttribute.class).     return annotation != null && (this.name == null || annotation.name().equals(this.name)) && annotation.required() == this.required. }
false;public;1;5;;@Override public boolean test(Method method) {     ResponseStatus annot = AnnotatedElementUtils.findMergedAnnotation(method, ResponseStatus.class).     return annot != null && annot.code().equals(this.code). }
false;public;1;4;;public RequestMappingPredicate method(RequestMethod... methods) {     this.method = methods.     return this. }
false;public;1;4;;public RequestMappingPredicate params(String... params) {     this.params = params.     return this. }
false;public;1;8;;@Override public boolean test(Method method) {     RequestMapping annot = AnnotatedElementUtils.findMergedAnnotation(method, RequestMapping.class).     return annot != null && Arrays.equals(this.path, annot.path()) && Arrays.equals(this.method, annot.method()) && (this.params == null || Arrays.equals(this.params, annot.params())). }
false;public;1;4;;public MatrixVariablePredicate name(String name) {     this.name = name.     return this. }
false;public;0;4;;public MatrixVariablePredicate noName() {     this.name = "".     return this. }
false;public;1;4;;public MatrixVariablePredicate pathVar(String name) {     this.pathVar = name.     return this. }
false;public;0;4;;public MatrixVariablePredicate noPathVar() {     this.pathVar = ValueConstants.DEFAULT_NONE.     return this. }
false;public;1;7;;@Override public boolean test(MethodParameter parameter) {     MatrixVariable annotation = parameter.getParameterAnnotation(MatrixVariable.class).     return annotation != null && (this.name == null || this.name.equalsIgnoreCase(annotation.name())) && (this.pathVar == null || this.pathVar.equalsIgnoreCase(annotation.pathVar())). }
