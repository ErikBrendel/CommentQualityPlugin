commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void expandAndEncode() {     UriComponents uri = UriComponentsBuilder.fromPath("/hotel list/{city} specials").queryParam("q", "{value}").build().expand("Z\u00fcrich", "a+b").encode().     assertEquals("/hotel%20list/Z%C3%BCrich%20specials?q=a+b", uri.toString()). }
false;public;0;9;;@Test public void encodeAndExpand() {     UriComponents uri = UriComponentsBuilder.fromPath("/hotel list/{city} specials").queryParam("q", "{value}").encode().build().expand("Z\u00fcrich", "a+b").     assertEquals("/hotel%20list/Z%C3%BCrich%20specials?q=a%2Bb", uri.toString()). }
false;public;0;10;;@Test public void encodeAndExpandPartially() {     UriComponents uri = UriComponentsBuilder.fromPath("/hotel list/{city} specials").queryParam("q", "{value}").encode().uriVariables(Collections.singletonMap("city", "Z\u00fcrich")).build().     assertEquals("/hotel%20list/Z%C3%BCrich%20specials?q=a%2Bb", uri.expand("a+b").toString()). }
false;public;0;5;;// SPR-17168 @Test public void encodeAndExpandWithDollarSign() {     UriComponents uri = UriComponentsBuilder.fromPath("/path").queryParam("q", "{value}").encode().build().     assertEquals("/path?q=JavaClass%241.class", uri.expand("JavaClass$1.class").toString()). }
false;public;0;6;;@Test public void toUriEncoded() throws URISyntaxException {     UriComponents uriComponents = UriComponentsBuilder.fromUriString("http://example.com/hotel list/Z\u00fcrich").build().     assertEquals(new URI("http://example.com/hotel%20list/Z%C3%BCrich"), uriComponents.encode().toUri()). }
false;public;0;6;;@Test public void toUriNotEncoded() throws URISyntaxException {     UriComponents uriComponents = UriComponentsBuilder.fromUriString("http://example.com/hotel list/Z\u00fcrich").build().     assertEquals(new URI("http://example.com/hotel%20list/Z\u00fcrich"), uriComponents.toUri()). }
false;public;0;7;;@Test public void toUriAlreadyEncoded() throws URISyntaxException {     UriComponents uriComponents = UriComponentsBuilder.fromUriString("http://example.com/hotel%20list/Z%C3%BCrich").build(true).     UriComponents encoded = uriComponents.encode().     assertEquals(new URI("http://example.com/hotel%20list/Z%C3%BCrich"), encoded.toUri()). }
false;public;0;7;;@Test public void toUriWithIpv6HostAlreadyEncoded() throws URISyntaxException {     UriComponents uriComponents = UriComponentsBuilder.fromUriString("http://[1abc:2abc:3abc::5ABC:6abc]:8080/hotel%20list/Z%C3%BCrich").build(true).     UriComponents encoded = uriComponents.encode().     assertEquals(new URI("http://[1abc:2abc:3abc::5ABC:6abc]:8080/hotel%20list/Z%C3%BCrich"), encoded.toUri()). }
false;public;0;8;;@Test public void expand() {     UriComponents uriComponents = UriComponentsBuilder.fromUriString("http://example.com").path("/{foo} {bar}").build().     uriComponents = uriComponents.expand("1 2", "3 4").     assertEquals("/1 2 3 4", uriComponents.getPath()).     assertEquals("http://example.com/1 2 3 4", uriComponents.toUriString()). }
false;public;0;7;;// SPR-13311 @Test public void expandWithRegexVar() {     String template = "/myurl/{name:[a-z]{1,5}}/show".     UriComponents uriComponents = UriComponentsBuilder.fromUriString(template).build().     uriComponents = uriComponents.expand(Collections.singletonMap("name", "test")).     assertEquals("/myurl/test/show", uriComponents.getPath()). }
false;public;0;5;;// SPR-17630 @Test public void uirTemplateExpandWithMismatchedCurlyBraces() {     assertEquals("/myurl/?q=%7B%7B%7B%7B", UriComponentsBuilder.fromUriString("/myurl/?q={{{{").encode().build().toUriString()). }
false;public;0;15;;// SPR-12123 @Test public void port() {     UriComponents uri1 = fromUriString("http://example.com:8080/bar").build().     UriComponents uri2 = fromUriString("http://example.com/bar").port(8080).build().     UriComponents uri3 = fromUriString("http://example.com/bar").port("{port}").build().expand(8080).     UriComponents uri4 = fromUriString("http://example.com/bar").port("808{digit}").build().expand(0).     assertEquals(8080, uri1.getPort()).     assertEquals("http://example.com:8080/bar", uri1.toUriString()).     assertEquals(8080, uri2.getPort()).     assertEquals("http://example.com:8080/bar", uri2.toUriString()).     assertEquals(8080, uri3.getPort()).     assertEquals("http://example.com:8080/bar", uri3.toUriString()).     assertEquals(8080, uri4.getPort()).     assertEquals("http://example.com:8080/bar", uri4.toUriString()). }
false;public;0;4;;@Test(expected = IllegalStateException.class) public void expandEncoded() {     UriComponentsBuilder.fromPath("/{foo}").build().encode().expand("bar"). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void invalidCharacters() {     UriComponentsBuilder.fromPath("/{foo}").build(true). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void invalidEncodedSequence() {     UriComponentsBuilder.fromPath("/fo%2o").build(true). }
false;public;0;5;;@Test public void normalize() {     UriComponents uriComponents = UriComponentsBuilder.fromUriString("http://example.com/foo/../bar").build().     assertEquals("http://example.com/bar", uriComponents.normalize().toString()). }
false;public;0;11;;@Test public void serializable() throws Exception {     UriComponents uriComponents = UriComponentsBuilder.fromUriString("http://example.com").path("/{foo}").query("bar={baz}").build().     ByteArrayOutputStream bos = new ByteArrayOutputStream().     ObjectOutputStream oos = new ObjectOutputStream(bos).     oos.writeObject(uriComponents).     ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray())).     UriComponents readObject = (UriComponents) ois.readObject().     assertThat(uriComponents.toString(), equalTo(readObject.toString())). }
false;public;0;9;;@Test public void copyToUriComponentsBuilder() {     UriComponents source = UriComponentsBuilder.fromPath("/foo/bar").pathSegment("ba/z").build().     UriComponentsBuilder targetBuilder = UriComponentsBuilder.newInstance().     source.copyToUriComponentsBuilder(targetBuilder).     UriComponents result = targetBuilder.build().encode().     assertEquals("/foo/bar/ba%2Fz", result.getPath()).     assertEquals(Arrays.asList("foo", "bar", "ba%2Fz"), result.getPathSegments()). }
false;public;0;11;;@Test public void equalsHierarchicalUriComponents() {     String url = "http://example.com".     UriComponents uric1 = UriComponentsBuilder.fromUriString(url).path("/{foo}").query("bar={baz}").build().     UriComponents uric2 = UriComponentsBuilder.fromUriString(url).path("/{foo}").query("bar={baz}").build().     UriComponents uric3 = UriComponentsBuilder.fromUriString(url).path("/{foo}").query("bin={baz}").build().     assertThat(uric1, instanceOf(HierarchicalUriComponents.class)).     assertThat(uric1, equalTo(uric1)).     assertThat(uric1, equalTo(uric2)).     assertThat(uric1, not(equalTo(uric3))). }
false;public;0;11;;@Test public void equalsOpaqueUriComponents() {     String baseUrl = "http:example.com".     UriComponents uric1 = UriComponentsBuilder.fromUriString(baseUrl + "/foo/bar").build().     UriComponents uric2 = UriComponentsBuilder.fromUriString(baseUrl + "/foo/bar").build().     UriComponents uric3 = UriComponentsBuilder.fromUriString(baseUrl + "/foo/bin").build().     assertThat(uric1, instanceOf(OpaqueUriComponents.class)).     assertThat(uric1, equalTo(uric1)).     assertThat(uric1, equalTo(uric2)).     assertThat(uric1, not(equalTo(uric3))). }
