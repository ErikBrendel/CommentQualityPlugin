commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;10;;@SuppressWarnings("deprecation") @Parameters public static Iterable<? extends ClientHttpRequestFactory> data() {     return Arrays.asList(new SimpleClientHttpRequestFactory(), new HttpComponentsClientHttpRequestFactory(), new Netty4ClientHttpRequestFactory(), new OkHttp3ClientHttpRequestFactory()). }
false;public;0;4;;@Before public void setupClient() {     this.template = new RestTemplate(this.clientHttpRequestFactory). }
false;public;0;5;;@Test public void getString() {     String s = template.getForObject(baseUrl + "/{method}", String.class, "get").     assertEquals("Invalid content", helloWorld, s). }
false;public;0;8;;@Test public void getEntity() {     ResponseEntity<String> entity = template.getForEntity(baseUrl + "/{method}", String.class, "get").     assertEquals("Invalid content", helloWorld, entity.getBody()).     assertFalse("No headers", entity.getHeaders().isEmpty()).     assertEquals("Invalid content-type", textContentType, entity.getHeaders().getContentType()).     assertEquals("Invalid status code", HttpStatus.OK, entity.getStatusCode()). }
false;public;0;5;;@Test public void getNoResponse() {     String s = template.getForObject(baseUrl + "/get/nothing", String.class).     assertNull("Invalid content", s). }
false;public;0;5;;@Test public void getNoContentTypeHeader() throws UnsupportedEncodingException {     byte[] bytes = template.getForObject(baseUrl + "/get/nocontenttype", byte[].class).     assertArrayEquals("Invalid content", helloWorld.getBytes("UTF-8"), bytes). }
false;public;0;9;;@Test public void getNoContent() {     String s = template.getForObject(baseUrl + "/status/nocontent", String.class).     assertNull("Invalid content", s).     ResponseEntity<String> entity = template.getForEntity(baseUrl + "/status/nocontent", String.class).     assertEquals("Invalid response code", HttpStatus.NO_CONTENT, entity.getStatusCode()).     assertNull("Invalid content", entity.getBody()). }
false;public;0;9;;@Test public void getNotModified() {     String s = template.getForObject(baseUrl + "/status/notmodified", String.class).     assertNull("Invalid content", s).     ResponseEntity<String> entity = template.getForEntity(baseUrl + "/status/notmodified", String.class).     assertEquals("Invalid response code", HttpStatus.NOT_MODIFIED, entity.getStatusCode()).     assertNull("Invalid content", entity.getBody()). }
false;public;0;5;;@Test public void postForLocation() throws URISyntaxException {     URI location = template.postForLocation(baseUrl + "/{method}", helloWorld, "post").     assertEquals("Invalid location", new URI(baseUrl + "/post/1"), location). }
false;public;0;8;;@Test public void postForLocationEntity() throws URISyntaxException {     HttpHeaders entityHeaders = new HttpHeaders().     entityHeaders.setContentType(new MediaType("text", "plain", StandardCharsets.ISO_8859_1)).     HttpEntity<String> entity = new HttpEntity<>(helloWorld, entityHeaders).     URI location = template.postForLocation(baseUrl + "/{method}", entity, "post").     assertEquals("Invalid location", new URI(baseUrl + "/post/1"), location). }
false;public;0;5;;@Test public void postForObject() throws URISyntaxException {     String s = template.postForObject(baseUrl + "/{method}", helloWorld, String.class, "post").     assertEquals("Invalid content", helloWorld, s). }
false;public;0;8;;@Test public void patchForObject() throws URISyntaxException {     // JDK client does not support the PATCH method     Assume.assumeThat(this.clientHttpRequestFactory, Matchers.not(Matchers.instanceOf(SimpleClientHttpRequestFactory.class))).     String s = template.patchForObject(baseUrl + "/{method}", helloWorld, String.class, "patch").     assertEquals("Invalid content", helloWorld, s). }
false;public;0;12;;@Test public void notFound() {     try {         template.execute(baseUrl + "/status/notfound", HttpMethod.GET, null, null).         fail("HttpClientErrorException expected").     } catch (HttpClientErrorException ex) {         assertEquals(HttpStatus.NOT_FOUND, ex.getStatusCode()).         assertNotNull(ex.getStatusText()).         assertNotNull(ex.getResponseBodyAsString()).     } }
false;public;0;11;;@Test public void badRequest() {     try {         template.execute(baseUrl + "/status/badrequest", HttpMethod.GET, null, null).         fail("HttpClientErrorException.BadRequest expected").     } catch (HttpClientErrorException.BadRequest ex) {         assertEquals(HttpStatus.BAD_REQUEST, ex.getStatusCode()).         assertEquals("400 Client Error", ex.getMessage()).     } }
false;public;0;12;;@Test public void serverError() {     try {         template.execute(baseUrl + "/status/server", HttpMethod.GET, null, null).         fail("HttpServerErrorException expected").     } catch (HttpServerErrorException ex) {         assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, ex.getStatusCode()).         assertNotNull(ex.getStatusText()).         assertNotNull(ex.getResponseBodyAsString()).     } }
false;public;0;6;;@Test public void optionsForAllow() throws URISyntaxException {     Set<HttpMethod> allowed = template.optionsForAllow(new URI(baseUrl + "/get")).     assertEquals("Invalid response", EnumSet.of(HttpMethod.GET, HttpMethod.OPTIONS, HttpMethod.HEAD, HttpMethod.TRACE), allowed). }
false;public;0;11;;@Test public void uri() throws InterruptedException, URISyntaxException {     String result = template.getForObject(baseUrl + "/uri/{query}", String.class, "Z\u00fcrich").     assertEquals("Invalid request URI", "/uri/Z%C3%BCrich", result).     result = template.getForObject(baseUrl + "/uri/query={query}", String.class, "foo@bar").     assertEquals("Invalid request URI", "/uri/query=foo@bar", result).     result = template.getForObject(baseUrl + "/uri/query={query}", String.class, "T\u014dky\u014d").     assertEquals("Invalid request URI", "/uri/query=T%C5%8Dky%C5%8D", result). }
false;public;0;11;;@Test public void multipart() throws UnsupportedEncodingException {     MultiValueMap<String, Object> parts = new LinkedMultiValueMap<>().     parts.add("name 1", "value 1").     parts.add("name 2", "value 2+1").     parts.add("name 2", "value 2+2").     Resource logo = new ClassPathResource("/org/springframework/http/converter/logo.jpg").     parts.add("logo", logo).     template.postForLocation(baseUrl + "/multipart", parts). }
false;public;0;9;;@Test public void form() throws UnsupportedEncodingException {     MultiValueMap<String, String> form = new LinkedMultiValueMap<>().     form.add("name 1", "value 1").     form.add("name 2", "value 2+1").     form.add("name 2", "value 2+2").     template.postForLocation(baseUrl + "/form", form). }
false;public;0;9;;@Test public void exchangeGet() throws Exception {     HttpHeaders requestHeaders = new HttpHeaders().     requestHeaders.set("MyHeader", "MyValue").     HttpEntity<String> requestEntity = new HttpEntity<>(requestHeaders).     ResponseEntity<String> response = template.exchange(baseUrl + "/{method}", HttpMethod.GET, requestEntity, String.class, "get").     assertEquals("Invalid content", helloWorld, response.getBody()). }
false;public;0;10;;@Test public void exchangePost() throws Exception {     HttpHeaders requestHeaders = new HttpHeaders().     requestHeaders.set("MyHeader", "MyValue").     requestHeaders.setContentType(MediaType.TEXT_PLAIN).     HttpEntity<String> entity = new HttpEntity<>(helloWorld, requestHeaders).     HttpEntity<Void> result = template.exchange(baseUrl + "/{method}", POST, entity, Void.class, "post").     assertEquals("Invalid location", new URI(baseUrl + "/post/1"), result.getHeaders().getLocation()).     assertFalse(result.hasBody()). }
false;public;0;14;;@Test public void jsonPostForObject() throws URISyntaxException {     HttpHeaders entityHeaders = new HttpHeaders().     entityHeaders.setContentType(new MediaType("application", "json", StandardCharsets.UTF_8)).     MySampleBean bean = new MySampleBean().     bean.setWith1("with").     bean.setWith2("with").     bean.setWithout("without").     HttpEntity<MySampleBean> entity = new HttpEntity<>(bean, entityHeaders).     String s = template.postForObject(baseUrl + "/jsonpost", entity, String.class).     assertTrue(s.contains("\"with1\":\"with\"")).     assertTrue(s.contains("\"with2\":\"with\"")).     assertTrue(s.contains("\"without\":\"without\"")). }
false;public;0;13;;@Test public void jsonPostForObjectWithJacksonView() throws URISyntaxException {     HttpHeaders entityHeaders = new HttpHeaders().     entityHeaders.setContentType(new MediaType("application", "json", StandardCharsets.UTF_8)).     MySampleBean bean = new MySampleBean("with", "with", "without").     MappingJacksonValue jacksonValue = new MappingJacksonValue(bean).     jacksonValue.setSerializationView(MyJacksonView1.class).     HttpEntity<MappingJacksonValue> entity = new HttpEntity<>(jacksonValue, entityHeaders).     String s = template.postForObject(baseUrl + "/jsonpost", entity, String.class).     assertTrue(s.contains("\"with1\":\"with\"")).     assertFalse(s.contains("\"with2\":\"with\"")).     assertFalse(s.contains("\"without\":\"without\"")). }
false;public;0;5;;// SPR-12123 @Test public void serverPort() {     String s = template.getForObject("http://localhost:{port}/get", String.class, port).     assertEquals("Invalid content", helloWorld, s). }
false;public;0;14;;// SPR-13154 @Test public void jsonPostForObjectWithJacksonTypeInfoList() throws URISyntaxException {     List<ParentClass> list = new ArrayList<>().     list.add(new Foo("foo")).     list.add(new Bar("bar")).     ParameterizedTypeReference<?> typeReference = new ParameterizedTypeReference<List<ParentClass>>() {     }.     RequestEntity<List<ParentClass>> entity = RequestEntity.post(new URI(baseUrl + "/jsonpost")).contentType(new MediaType("application", "json", StandardCharsets.UTF_8)).body(list, typeReference.getType()).     String content = template.exchange(entity, String.class).getBody().     assertTrue(content.contains("\"type\":\"foo\"")).     assertTrue(content.contains("\"type\":\"bar\"")). }
false;public;0;4;;// SPR-15015 @Test public void postWithoutBody() throws Exception {     assertNull(template.postForObject(baseUrl + "/jsonpost", null, String.class)). }
false;public;0;3;;public String getWith1() {     return with1. }
false;public;1;3;;public void setWith1(String with1) {     this.with1 = with1. }
false;public;0;3;;public String getWith2() {     return with2. }
false;public;1;3;;public void setWith2(String with2) {     this.with2 = with2. }
false;public;0;3;;public String getWithout() {     return without. }
false;public;1;3;;public void setWithout(String without) {     this.without = without. }
false;public;0;3;;public String getParentProperty() {     return parentProperty. }
false;public;1;3;;public void setParentProperty(String parentProperty) {     this.parentProperty = parentProperty. }
