commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void handleErrorSignal() throws Exception {     createWebHandler(new BadRequestExceptionHandler()).handle(this.exchange).block().     assertEquals(HttpStatus.BAD_REQUEST, this.exchange.getResponse().getStatusCode()). }
false;public;0;10;;@Test public void handleErrorSignalWithMultipleHttpErrorHandlers() throws Exception {     createWebHandler(new UnresolvedExceptionHandler(), new UnresolvedExceptionHandler(), new BadRequestExceptionHandler(), new UnresolvedExceptionHandler()).handle(this.exchange).block().     assertEquals(HttpStatus.BAD_REQUEST, this.exchange.getResponse().getStatusCode()). }
false;public;0;6;;@Test public void unresolvedException() throws Exception {     Mono<Void> mono = createWebHandler(new UnresolvedExceptionHandler()).handle(this.exchange).     StepVerifier.create(mono).expectErrorMessage("boo").verify().     assertNull(this.exchange.getResponse().getStatusCode()). }
false;public;0;10;;@Test public void unresolvedExceptionWithWebHttpHandlerAdapter() throws Exception {     // HttpWebHandlerAdapter handles unresolved errors     new HttpWebHandlerAdapter(createWebHandler(new UnresolvedExceptionHandler())).handle(this.exchange.getRequest(), this.exchange.getResponse()).block().     assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, this.exchange.getResponse().getStatusCode()). }
false;public;0;5;;@Test public void thrownExceptionBecomesErrorSignal() throws Exception {     createWebHandler(new BadRequestExceptionHandler()).handle(this.exchange).block().     assertEquals(HttpStatus.BAD_REQUEST, this.exchange.getResponse().getStatusCode()). }
false;private;1;3;;private WebHandler createWebHandler(WebExceptionHandler... handlers) {     return new ExceptionHandlingWebHandler(this.targetHandler, Arrays.asList(handlers)). }
false;public;1;7;;@Override public Mono<Void> handle(ServerWebExchange exchange) {     if (this.raise) {         throw this.exception.     }     return Mono.error(this.exception). }
false;public;2;5;;@Override public Mono<Void> handle(ServerWebExchange exchange, Throwable ex) {     exchange.getResponse().setStatusCode(HttpStatus.BAD_REQUEST).     return Mono.empty(). }
false;public;2;4;;@Override public Mono<Void> handle(ServerWebExchange exchange, Throwable ex) {     return Mono.error(ex). }
