commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public HttpMethod getMethod() {     return this.httpMethod. }
false;public;0;4;;@Override public String getMethodValue() {     return this.httpMethod.name(). }
false;public;0;5;;@Override @Nullable public InetSocketAddress getRemoteAddress() {     return this.remoteAddress. }
false;protected;0;5;;@Nullable @Override protected SslInfo initSslInfo() {     return this.sslInfo. }
false;public;0;4;;@Override public Flux<DataBuffer> getBody() {     return this.body. }
false;protected;0;4;;@Override protected MultiValueMap<String, HttpCookie> initCookies() {     return this.cookies. }
false;public;0;4;;@Override public <T> T getNativeRequest() {     throw new IllegalStateException("This is a mock. No running server, no native request."). }
true;public,static;2;3;/**  * Create a builder with the given HTTP method and a {@link URI}.  * @param method the HTTP method (GET, POST, etc)  * @param url the URL  * @return the created builder  */ ;// Static builder methods /**  * Create a builder with the given HTTP method and a {@link URI}.  * @param method the HTTP method (GET, POST, etc)  * @param url the URL  * @return the created builder  */ public static BodyBuilder method(HttpMethod method, URI url) {     return new DefaultBodyBuilder(method, url). }
true;public,static;3;4;/**  * Alternative to {@link #method(HttpMethod, URI)} that accepts a URI template.  * The given URI may contain query parameters, or those may be added later via  * {@link BaseBuilder#queryParam queryParam} builder methods.  * @param method the HTTP method (GET, POST, etc)  * @param urlTemplate the URL template  * @param vars variables to expand into the template  * @return the created builder  */ ;/**  * Alternative to {@link #method(HttpMethod, URI)} that accepts a URI template.  * The given URI may contain query parameters, or those may be added later via  * {@link BaseBuilder#queryParam queryParam} builder methods.  * @param method the HTTP method (GET, POST, etc)  * @param urlTemplate the URL template  * @param vars variables to expand into the template  * @return the created builder  */ public static BodyBuilder method(HttpMethod method, String urlTemplate, Object... vars) {     URI url = UriComponentsBuilder.fromUriString(urlTemplate).buildAndExpand(vars).encode().toUri().     return new DefaultBodyBuilder(method, url). }
true;public,static;2;3;/**  * Create an HTTP GET builder with the given URI template. The given URI may  * contain query parameters, or those may be added later via  * {@link BaseBuilder#queryParam queryParam} builder methods.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @return the created builder  */ ;/**  * Create an HTTP GET builder with the given URI template. The given URI may  * contain query parameters, or those may be added later via  * {@link BaseBuilder#queryParam queryParam} builder methods.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @return the created builder  */ public static BaseBuilder<?> get(String urlTemplate, Object... uriVars) {     return method(HttpMethod.GET, urlTemplate, uriVars). }
true;public,static;2;3;/**  * HTTP HEAD variant. See {@link #get(String, Object...)} for general info.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @return the created builder  */ ;/**  * HTTP HEAD variant. See {@link #get(String, Object...)} for general info.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @return the created builder  */ public static BaseBuilder<?> head(String urlTemplate, Object... uriVars) {     return method(HttpMethod.HEAD, urlTemplate, uriVars). }
true;public,static;2;3;/**  * HTTP POST variant. See {@link #get(String, Object...)} for general info.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @return the created builder  */ ;/**  * HTTP POST variant. See {@link #get(String, Object...)} for general info.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @return the created builder  */ public static BodyBuilder post(String urlTemplate, Object... uriVars) {     return method(HttpMethod.POST, urlTemplate, uriVars). }
true;public,static;2;3;/**  * HTTP PUT variant. See {@link #get(String, Object...)} for general info.  * {@link BaseBuilder#queryParam queryParam} builder methods.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @return the created builder  */ ;/**  * HTTP PUT variant. See {@link #get(String, Object...)} for general info.  * {@link BaseBuilder#queryParam queryParam} builder methods.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @return the created builder  */ public static BodyBuilder put(String urlTemplate, Object... uriVars) {     return method(HttpMethod.PUT, urlTemplate, uriVars). }
true;public,static;2;3;/**  * HTTP PATCH variant. See {@link #get(String, Object...)} for general info.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @return the created builder  */ ;/**  * HTTP PATCH variant. See {@link #get(String, Object...)} for general info.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @return the created builder  */ public static BodyBuilder patch(String urlTemplate, Object... uriVars) {     return method(HttpMethod.PATCH, urlTemplate, uriVars). }
true;public,static;2;3;/**  * HTTP DELETE variant. See {@link #get(String, Object...)} for general info.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @return the created builder  */ ;/**  * HTTP DELETE variant. See {@link #get(String, Object...)} for general info.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @return the created builder  */ public static BaseBuilder<?> delete(String urlTemplate, Object... uriVars) {     return method(HttpMethod.DELETE, urlTemplate, uriVars). }
true;public,static;2;3;/**  * HTTP OPTIONS variant. See {@link #get(String, Object...)} for general info.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @return the created builder  */ ;/**  * HTTP OPTIONS variant. See {@link #get(String, Object...)} for general info.  * @param urlTemplate a URL template. the resulting URL will be encoded  * @param uriVars zero or more URI variables  * @return the created builder  */ public static BaseBuilder<?> options(String urlTemplate, Object... uriVars) {     return method(HttpMethod.OPTIONS, urlTemplate, uriVars). }
true;;1;1;/**  * Set the contextPath to return.  */ ;/**  * Set the contextPath to return.  */ B contextPath(String contextPath).
true;;2;1;/**  * Append the given query parameter to the existing query parameters.  * If no values are given, the resulting URI will contain the query  * parameter name only (i.e. {@code ?foo} instead of {@code ?foo=bar}).  * <p>The provided query name and values will be encoded.  * @param name the query parameter name  * @param values the query parameter values  * @return this UriComponentsBuilder  */ ;/**  * Append the given query parameter to the existing query parameters.  * If no values are given, the resulting URI will contain the query  * parameter name only (i.e. {@code ?foo} instead of {@code ?foo=bar}).  * <p>The provided query name and values will be encoded.  * @param name the query parameter name  * @param values the query parameter values  * @return this UriComponentsBuilder  */ B queryParam(String name, Object... values).
true;;1;1;/**  * Add the given query parameters and values. The provided query name  * and corresponding values will be encoded.  * @param params the params  * @return this UriComponentsBuilder  */ ;/**  * Add the given query parameters and values. The provided query name  * and corresponding values will be encoded.  * @param params the params  * @return this UriComponentsBuilder  */ B queryParams(MultiValueMap<String, String> params).
true;;1;1;/**  * Set the remote address to return.  */ ;/**  * Set the remote address to return.  */ B remoteAddress(InetSocketAddress remoteAddress).
true;;1;1;/**  * Set SSL session information and certificates.  */ ;/**  * Set SSL session information and certificates.  */ void sslInfo(SslInfo sslInfo).
true;;1;1;/**  * Add one or more cookies.  */ ;/**  * Add one or more cookies.  */ B cookie(HttpCookie... cookie).
true;;1;1;/**  * Add the given cookies.  * @param cookies the cookies.  */ ;/**  * Add the given cookies.  * @param cookies the cookies.  */ B cookies(MultiValueMap<String, HttpCookie> cookies).
true;;2;1;/**  * Add the given, single header value under the given name.  * @param headerName  the header name  * @param headerValues the header value(s)  * @see HttpHeaders#add(String, String)  */ ;/**  * Add the given, single header value under the given name.  * @param headerName  the header name  * @param headerValues the header value(s)  * @see HttpHeaders#add(String, String)  */ B header(String headerName, String... headerValues).
true;;1;1;/**  * Add the given header values.  * @param headers the header values  */ ;/**  * Add the given header values.  * @param headers the header values  */ B headers(MultiValueMap<String, String> headers).
true;;1;1;/**  * Set the list of acceptable {@linkplain MediaType media types}, as  * specified by the {@code Accept} header.  * @param acceptableMediaTypes the acceptable media types  */ ;/**  * Set the list of acceptable {@linkplain MediaType media types}, as  * specified by the {@code Accept} header.  * @param acceptableMediaTypes the acceptable media types  */ B accept(MediaType... acceptableMediaTypes).
true;;1;1;/**  * Set the list of acceptable {@linkplain Charset charsets}, as specified  * by the {@code Accept-Charset} header.  * @param acceptableCharsets the acceptable charsets  */ ;/**  * Set the list of acceptable {@linkplain Charset charsets}, as specified  * by the {@code Accept-Charset} header.  * @param acceptableCharsets the acceptable charsets  */ B acceptCharset(Charset... acceptableCharsets).
true;;1;1;/**  * Set the list of acceptable {@linkplain Locale locales}, as specified  * by the {@code Accept-Languages} header.  * @param acceptableLocales the acceptable locales  */ ;/**  * Set the list of acceptable {@linkplain Locale locales}, as specified  * by the {@code Accept-Languages} header.  * @param acceptableLocales the acceptable locales  */ B acceptLanguageAsLocales(Locale... acceptableLocales).
true;;1;1;/**  * Set the value of the {@code If-Modified-Since} header.  * <p>The date should be specified as the number of milliseconds since  * January 1, 1970 GMT.  * @param ifModifiedSince the new value of the header  */ ;/**  * Set the value of the {@code If-Modified-Since} header.  * <p>The date should be specified as the number of milliseconds since  * January 1, 1970 GMT.  * @param ifModifiedSince the new value of the header  */ B ifModifiedSince(long ifModifiedSince).
true;;1;1;/**  * Set the (new) value of the {@code If-Unmodified-Since} header.  * <p>The date should be specified as the number of milliseconds since  * January 1, 1970 GMT.  * @param ifUnmodifiedSince the new value of the header  * @see HttpHeaders#setIfUnmodifiedSince(long)  */ ;/**  * Set the (new) value of the {@code If-Unmodified-Since} header.  * <p>The date should be specified as the number of milliseconds since  * January 1, 1970 GMT.  * @param ifUnmodifiedSince the new value of the header  * @see HttpHeaders#setIfUnmodifiedSince(long)  */ B ifUnmodifiedSince(long ifUnmodifiedSince).
true;;1;1;/**  * Set the values of the {@code If-None-Match} header.  * @param ifNoneMatches the new value of the header  */ ;/**  * Set the values of the {@code If-None-Match} header.  * @param ifNoneMatches the new value of the header  */ B ifNoneMatch(String... ifNoneMatches).
true;;1;1;/**  * Set the (new) value of the Range header.  * @param ranges the HTTP ranges  * @see HttpHeaders#setRange(List)  */ ;/**  * Set the (new) value of the Range header.  * @param ranges the HTTP ranges  * @see HttpHeaders#setRange(List)  */ B range(HttpRange... ranges).
true;;0;1;/**  * Builds the request with no body.  * @return the request  * @see BodyBuilder#body(Publisher)  * @see BodyBuilder#body(String)  */ ;/**  * Builds the request with no body.  * @return the request  * @see BodyBuilder#body(Publisher)  * @see BodyBuilder#body(String)  */ MockServerHttpRequest build().
true;;1;1;/**  * Set the length of the body in bytes, as specified by the  * {@code Content-Length} header.  * @param contentLength the content length  * @return this builder  * @see HttpHeaders#setContentLength(long)  */ ;/**  * Set the length of the body in bytes, as specified by the  * {@code Content-Length} header.  * @param contentLength the content length  * @return this builder  * @see HttpHeaders#setContentLength(long)  */ BodyBuilder contentLength(long contentLength).
true;;1;1;/**  * Set the {@linkplain MediaType media type} of the body, as specified  * by the {@code Content-Type} header.  * @param contentType the content type  * @return this builder  * @see HttpHeaders#setContentType(MediaType)  */ ;/**  * Set the {@linkplain MediaType media type} of the body, as specified  * by the {@code Content-Type} header.  * @param contentType the content type  * @return this builder  * @see HttpHeaders#setContentType(MediaType)  */ BodyBuilder contentType(MediaType contentType).
true;;1;1;/**  * Set the body of the request and build it.  * @param body the body  * @return the built request entity  */ ;/**  * Set the body of the request and build it.  * @param body the body  * @return the built request entity  */ MockServerHttpRequest body(Publisher<? extends DataBuffer> body).
true;;1;1;/**  * Set the body of the request and build it.  * <p>The String is assumed to be UTF-8 encoded unless the request has a  * "content-type" header with a charset attribute.  * @param body the body as text  * @return the built request entity  */ ;/**  * Set the body of the request and build it.  * <p>The String is assumed to be UTF-8 encoded unless the request has a  * "content-type" header with a charset attribute.  * @param body the body as text  * @return the built request entity  */ MockServerHttpRequest body(String body).
false;public;1;5;;@Override public BodyBuilder contextPath(String contextPath) {     this.contextPath = contextPath.     return this. }
false;public;2;5;;@Override public BodyBuilder queryParam(String name, Object... values) {     this.queryParamsBuilder.queryParam(name, values).     return this. }
false;public;1;5;;@Override public BodyBuilder queryParams(MultiValueMap<String, String> params) {     this.queryParamsBuilder.queryParams(params).     return this. }
false;public;1;5;;@Override public BodyBuilder remoteAddress(InetSocketAddress remoteAddress) {     this.remoteAddress = remoteAddress.     return this. }
false;public;1;4;;@Override public void sslInfo(SslInfo sslInfo) {     this.sslInfo = sslInfo. }
false;public;1;5;;@Override public BodyBuilder cookie(HttpCookie... cookies) {     Arrays.stream(cookies).forEach(cookie -> this.cookies.add(cookie.getName(), cookie)).     return this. }
false;public;1;5;;@Override public BodyBuilder cookies(MultiValueMap<String, HttpCookie> cookies) {     this.cookies.putAll(cookies).     return this. }
false;public;2;7;;@Override public BodyBuilder header(String headerName, String... headerValues) {     for (String headerValue : headerValues) {         this.headers.add(headerName, headerValue).     }     return this. }
false;public;1;5;;@Override public BodyBuilder headers(MultiValueMap<String, String> headers) {     this.headers.putAll(headers).     return this. }
false;public;1;5;;@Override public BodyBuilder accept(MediaType... acceptableMediaTypes) {     this.headers.setAccept(Arrays.asList(acceptableMediaTypes)).     return this. }
false;public;1;5;;@Override public BodyBuilder acceptCharset(Charset... acceptableCharsets) {     this.headers.setAcceptCharset(Arrays.asList(acceptableCharsets)).     return this. }
false;public;1;5;;@Override public BodyBuilder acceptLanguageAsLocales(Locale... acceptableLocales) {     this.headers.setAcceptLanguageAsLocales(Arrays.asList(acceptableLocales)).     return this. }
false;public;1;5;;@Override public BodyBuilder contentLength(long contentLength) {     this.headers.setContentLength(contentLength).     return this. }
false;public;1;5;;@Override public BodyBuilder contentType(MediaType contentType) {     this.headers.setContentType(contentType).     return this. }
false;public;1;5;;@Override public BodyBuilder ifModifiedSince(long ifModifiedSince) {     this.headers.setIfModifiedSince(ifModifiedSince).     return this. }
false;public;1;5;;@Override public BodyBuilder ifUnmodifiedSince(long ifUnmodifiedSince) {     this.headers.setIfUnmodifiedSince(ifUnmodifiedSince).     return this. }
false;public;1;5;;@Override public BodyBuilder ifNoneMatch(String... ifNoneMatches) {     this.headers.setIfNoneMatch(Arrays.asList(ifNoneMatches)).     return this. }
false;public;1;5;;@Override public BodyBuilder range(HttpRange... ranges) {     this.headers.setRange(Arrays.asList(ranges)).     return this. }
false;public;0;4;;@Override public MockServerHttpRequest build() {     return body(Flux.empty()). }
false;public;1;4;;@Override public MockServerHttpRequest body(String body) {     return body(Flux.just(BUFFER_FACTORY.wrap(body.getBytes(getCharset())))). }
false;private;0;4;;private Charset getCharset() {     return Optional.ofNullable(this.headers.getContentType()).map(MimeType::getCharset).orElse(StandardCharsets.UTF_8). }
false;public;1;6;;@Override public MockServerHttpRequest body(Publisher<? extends DataBuffer> body) {     applyCookiesIfNecessary().     return new MockServerHttpRequest(this.method, getUrlToUse(), this.contextPath, this.headers, this.cookies, this.remoteAddress, this.sslInfo, body). }
false;private;0;6;;private void applyCookiesIfNecessary() {     if (this.headers.get(HttpHeaders.COOKIE) == null) {         this.cookies.values().stream().flatMap(Collection::stream).forEach(cookie -> this.headers.add(HttpHeaders.COOKIE, cookie.toString())).     } }
false;private;0;10;;private URI getUrlToUse() {     MultiValueMap<String, String> params = this.queryParamsBuilder.buildAndExpand().encode().getQueryParams().     if (!params.isEmpty()) {         return UriComponentsBuilder.fromUri(this.url).queryParams(params).build(true).toUri().     }     return this.url. }
