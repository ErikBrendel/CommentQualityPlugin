commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.handler = createResponseStatusExceptionHandler(). }
false;protected;0;3;;protected ResponseStatusExceptionHandler createResponseStatusExceptionHandler() {     return new ResponseStatusExceptionHandler(). }
false;public;0;6;;@Test public void handleResponseStatusException() {     Throwable ex = new ResponseStatusException(HttpStatus.BAD_REQUEST, "").     this.handler.handle(this.exchange, ex).block(Duration.ofSeconds(5)).     assertEquals(HttpStatus.BAD_REQUEST, this.exchange.getResponse().getStatusCode()). }
false;public;0;6;;@Test public void handleNestedResponseStatusException() {     Throwable ex = new Exception(new ResponseStatusException(HttpStatus.BAD_REQUEST, "")).     this.handler.handle(this.exchange, ex).block(Duration.ofSeconds(5)).     assertEquals(HttpStatus.BAD_REQUEST, this.exchange.getResponse().getStatusCode()). }
false;public;0;6;;@Test public void unresolvedException() {     Throwable expected = new IllegalStateException().     Mono<Void> mono = this.handler.handle(this.exchange, expected).     StepVerifier.create(mono).consumeErrorWith(actual -> assertSame(expected, actual)).verify(). }
false;public;0;8;;// SPR-16231 @Test public void responseCommitted() {     Throwable ex = new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Oops").     this.exchange.getResponse().setStatusCode(HttpStatus.CREATED).     Mono<Void> mono = this.exchange.getResponse().setComplete().then(Mono.defer(() -> this.handler.handle(this.exchange, ex))).     StepVerifier.create(mono).consumeErrorWith(actual -> assertSame(ex, actual)).verify(). }
