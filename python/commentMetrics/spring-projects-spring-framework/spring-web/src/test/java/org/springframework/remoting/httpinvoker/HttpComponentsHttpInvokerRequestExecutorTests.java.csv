commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void customizeConnectionTimeout() throws IOException {     HttpComponentsHttpInvokerRequestExecutor executor = new HttpComponentsHttpInvokerRequestExecutor().     executor.setConnectTimeout(5000).     HttpInvokerClientConfiguration config = mockHttpInvokerClientConfiguration("http://fake-service").     HttpPost httpPost = executor.createHttpPost(config).     assertEquals(5000, httpPost.getConfig().getConnectTimeout()). }
false;public;0;9;;@Test public void customizeConnectionRequestTimeout() throws IOException {     HttpComponentsHttpInvokerRequestExecutor executor = new HttpComponentsHttpInvokerRequestExecutor().     executor.setConnectionRequestTimeout(7000).     HttpInvokerClientConfiguration config = mockHttpInvokerClientConfiguration("http://fake-service").     HttpPost httpPost = executor.createHttpPost(config).     assertEquals(7000, httpPost.getConfig().getConnectionRequestTimeout()). }
false;public;0;9;;@Test public void customizeReadTimeout() throws IOException {     HttpComponentsHttpInvokerRequestExecutor executor = new HttpComponentsHttpInvokerRequestExecutor().     executor.setReadTimeout(10000).     HttpInvokerClientConfiguration config = mockHttpInvokerClientConfiguration("http://fake-service").     HttpPost httpPost = executor.createHttpPost(config).     assertEquals(10000, httpPost.getConfig().getSocketTimeout()). }
false;public;0;21;;@Test public void defaultSettingsOfHttpClientMergedOnExecutorCustomization() throws IOException {     RequestConfig defaultConfig = RequestConfig.custom().setConnectTimeout(1234).build().     CloseableHttpClient client = mock(CloseableHttpClient.class, withSettings().extraInterfaces(Configurable.class)).     Configurable configurable = (Configurable) client.     when(configurable.getConfig()).thenReturn(defaultConfig).     HttpComponentsHttpInvokerRequestExecutor executor = new HttpComponentsHttpInvokerRequestExecutor(client).     HttpInvokerClientConfiguration config = mockHttpInvokerClientConfiguration("http://fake-service").     HttpPost httpPost = executor.createHttpPost(config).     assertSame("Default client configuration is expected", defaultConfig, httpPost.getConfig()).     executor.setConnectionRequestTimeout(4567).     HttpPost httpPost2 = executor.createHttpPost(config).     assertNotNull(httpPost2.getConfig()).     assertEquals(4567, httpPost2.getConfig().getConnectionRequestTimeout()).     // Default connection timeout merged     assertEquals(1234, httpPost2.getConfig().getConnectTimeout()). }
false;public;0;20;;@Test public void localSettingsOverrideClientDefaultSettings() throws Exception {     RequestConfig defaultConfig = RequestConfig.custom().setConnectTimeout(1234).setConnectionRequestTimeout(6789).build().     CloseableHttpClient client = mock(CloseableHttpClient.class, withSettings().extraInterfaces(Configurable.class)).     Configurable configurable = (Configurable) client.     when(configurable.getConfig()).thenReturn(defaultConfig).     HttpComponentsHttpInvokerRequestExecutor executor = new HttpComponentsHttpInvokerRequestExecutor(client).     executor.setConnectTimeout(5000).     HttpInvokerClientConfiguration config = mockHttpInvokerClientConfiguration("http://fake-service").     HttpPost httpPost = executor.createHttpPost(config).     RequestConfig requestConfig = httpPost.getConfig().     assertEquals(5000, requestConfig.getConnectTimeout()).     assertEquals(6789, requestConfig.getConnectionRequestTimeout()).     assertEquals(-1, requestConfig.getSocketTimeout()). }
false;public;0;4;;@Override public HttpClient getHttpClient() {     return client. }
false;public;0;35;;@Test public void mergeBasedOnCurrentHttpClient() throws Exception {     RequestConfig defaultConfig = RequestConfig.custom().setSocketTimeout(1234).build().     final CloseableHttpClient client = mock(CloseableHttpClient.class, withSettings().extraInterfaces(Configurable.class)).     Configurable configurable = (Configurable) client.     when(configurable.getConfig()).thenReturn(defaultConfig).     HttpComponentsHttpInvokerRequestExecutor executor = new HttpComponentsHttpInvokerRequestExecutor() {          @Override         public HttpClient getHttpClient() {             return client.         }     }.     executor.setReadTimeout(5000).     HttpInvokerClientConfiguration config = mockHttpInvokerClientConfiguration("http://fake-service").     HttpPost httpPost = executor.createHttpPost(config).     RequestConfig requestConfig = httpPost.getConfig().     assertEquals(-1, requestConfig.getConnectTimeout()).     assertEquals(-1, requestConfig.getConnectionRequestTimeout()).     assertEquals(5000, requestConfig.getSocketTimeout()).     // Update the Http client so that it returns an updated  config     RequestConfig updatedDefaultConfig = RequestConfig.custom().setConnectTimeout(1234).build().     when(configurable.getConfig()).thenReturn(updatedDefaultConfig).     executor.setReadTimeout(7000).     HttpPost httpPost2 = executor.createHttpPost(config).     RequestConfig requestConfig2 = httpPost2.getConfig().     assertEquals(1234, requestConfig2.getConnectTimeout()).     assertEquals(-1, requestConfig2.getConnectionRequestTimeout()).     assertEquals(7000, requestConfig2.getSocketTimeout()). }
false;protected;1;4;;@Override protected RequestConfig createRequestConfig(HttpInvokerClientConfiguration config) {     return null. }
false;public;0;14;;@Test public void ignoreFactorySettings() throws IOException {     CloseableHttpClient httpClient = HttpClientBuilder.create().build().     HttpComponentsHttpInvokerRequestExecutor executor = new HttpComponentsHttpInvokerRequestExecutor(httpClient) {          @Override         protected RequestConfig createRequestConfig(HttpInvokerClientConfiguration config) {             return null.         }     }.     HttpInvokerClientConfiguration config = mockHttpInvokerClientConfiguration("http://fake-service").     HttpPost httpPost = executor.createHttpPost(config).     assertNull("custom request config should not be set", httpPost.getConfig()). }
false;private;1;5;;private HttpInvokerClientConfiguration mockHttpInvokerClientConfiguration(String serviceUrl) {     HttpInvokerClientConfiguration config = mock(HttpInvokerClientConfiguration.class).     when(config.getServiceUrl()).thenReturn(serviceUrl).     return config. }
