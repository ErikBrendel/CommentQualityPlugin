commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected HttpHandler createHttpHandler() {     return this.handler. }
false;public;0;16;;@Test public void zeroCopy() throws Exception {     // Zero-copy only does not support servlet     assumeTrue(server instanceof ReactorHttpServer || server instanceof UndertowHttpServer).     URI url = new URI("http://localhost:" + port).     RequestEntity<?> request = RequestEntity.get(url).build().     ResponseEntity<byte[]> response = new RestTemplate().exchange(request, byte[].class).     Resource logo = new ClassPathResource("spring.png", ZeroCopyIntegrationTests.class).     assertTrue(response.hasBody()).     assertEquals(logo.contentLength(), response.getHeaders().getContentLength()).     assertEquals(logo.contentLength(), response.getBody().length).     assertEquals(MediaType.IMAGE_PNG, response.getHeaders().getContentType()). }
false;public;2;14;;@Override public Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {     try {         ZeroCopyHttpOutputMessage zeroCopyResponse = (ZeroCopyHttpOutputMessage) response.         Resource logo = new ClassPathResource("spring.png", ZeroCopyIntegrationTests.class).         File logoFile = logo.getFile().         zeroCopyResponse.getHeaders().setContentType(MediaType.IMAGE_PNG).         zeroCopyResponse.getHeaders().setContentLength(logoFile.length()).         return zeroCopyResponse.writeWith(logoFile, 0, logoFile.length()).     } catch (Throwable ex) {         return Mono.error(ex).     } }
