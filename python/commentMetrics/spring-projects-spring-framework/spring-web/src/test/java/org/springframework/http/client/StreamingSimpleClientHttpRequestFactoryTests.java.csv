commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected ClientHttpRequestFactory createRequestFactory() {     SimpleClientHttpRequestFactory factory = new SimpleClientHttpRequestFactory().     factory.setBufferRequestBody(false).     return factory. }
false;public;0;25;;// SPR-8809 @Test public void interceptor() throws Exception {     final String headerName = "MyHeader".     final String headerValue = "MyValue".     ClientHttpRequestInterceptor interceptor = (request, body, execution) -> {         request.getHeaders().add(headerName, headerValue).         return execution.execute(request, body).     }.     InterceptingClientHttpRequestFactory factory = new InterceptingClientHttpRequestFactory(createRequestFactory(), Collections.singletonList(interceptor)).     ClientHttpResponse response = null.     try {         ClientHttpRequest request = factory.createRequest(new URI(baseUrl + "/echo"), HttpMethod.GET).         response = request.execute().         assertEquals("Invalid response status", HttpStatus.OK, response.getStatusCode()).         HttpHeaders responseHeaders = response.getHeaders().         assertEquals("Custom header invalid", headerValue, responseHeaders.getFirst(headerName)).     } finally {         if (response != null) {             response.close().         }     } }
false;public;0;26;;@Test @Ignore public void largeFileUpload() throws Exception {     Random rnd = new Random().     ClientHttpResponse response = null.     try {         ClientHttpRequest request = factory.createRequest(new URI(baseUrl + "/methods/post"), HttpMethod.POST).         final int BUF_SIZE = 4096.         final int ITERATIONS = Integer.MAX_VALUE / BUF_SIZE.         // final int contentLength = ITERATIONS * BUF_SIZE.         // request.getHeaders().setContentLength(contentLength).         OutputStream body = request.getBody().         for (int i = 0. i < ITERATIONS. i++) {             byte[] buffer = new byte[BUF_SIZE].             rnd.nextBytes(buffer).             body.write(buffer).         }         response = request.execute().         assertEquals("Invalid response status", HttpStatus.OK, response.getStatusCode()).     } finally {         if (response != null) {             response.close().         }     } }
