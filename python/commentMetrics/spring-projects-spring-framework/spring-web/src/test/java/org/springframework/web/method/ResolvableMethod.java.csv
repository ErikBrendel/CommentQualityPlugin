# id;timestamp;commentText;codeText;commentWords;codeWords
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annot(Predicate<MethodParameter>... filters);1488809997;Filter on method arguments with annotations._See {@link MvcAnnotationPredicates}.;@SafeVarargs_		public final ArgResolver annot(Predicate<MethodParameter>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,method,arguments,with,annotations,see,link,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annot(Predicate<MethodParameter>... filters);1491599707;Filter on method arguments with annotations._See {@link MvcAnnotationPredicates}.;@SafeVarargs_		public final ArgResolver annot(Predicate<MethodParameter>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,method,arguments,with,annotations,see,link,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annot(Predicate<MethodParameter>... filters);1505924929;Filter on method arguments with annotations._See {@link MvcAnnotationPredicates}.;@SafeVarargs_		public final ArgResolver annot(Predicate<MethodParameter>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,method,arguments,with,annotations,see,link,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annot(Predicate<MethodParameter>... filters);1517571703;Filter on method arguments with annotations._See {@link MvcAnnotationPredicates}.;@SafeVarargs_		public final ArgResolver annot(Predicate<MethodParameter>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,method,arguments,with,annotations,see,link,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annot(Predicate<MethodParameter>... filters);1530190293;Filter on method arguments with annotations._See {@link MvcAnnotationPredicates}.;@SafeVarargs_		public final ArgResolver annot(Predicate<MethodParameter>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,method,arguments,with,annotations,see,link,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annot(Predicate<MethodParameter>... filters);1540931761;Filter on method arguments with annotations._See {@link MvcAnnotationPredicates}.;@SafeVarargs_		public final ArgResolver annot(Predicate<MethodParameter>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,method,arguments,with,annotations,see,link,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annot(Predicate<MethodParameter>... filters);1541442804;Filter on method arguments with annotations._See {@link MvcAnnotationPredicates}.;@SafeVarargs_		public final ArgResolver annot(Predicate<MethodParameter>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,method,arguments,with,annotations,see,link,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annot(Predicate<MethodParameter>... filters);1541455173;Filter on method arguments with annotations._See {@link MvcAnnotationPredicates}.;@SafeVarargs_		public final ArgResolver annot(Predicate<MethodParameter>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,method,arguments,with,annotations,see,link,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annot(Predicate<MethodParameter>... filters);1541701761;Filter on method arguments with annotations._See {@link org.springframework.web.method.MvcAnnotationPredicates}.;@SafeVarargs_		public final ArgResolver annot(Predicate<MethodParameter>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,method,arguments,with,annotations,see,link,org,springframework,web,method,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> Builder -> public Builder<T> argTypes(Class<?>... argTypes);1540931761;Filter on methods with the given parameter types.;public Builder<T> argTypes(Class<?>... argTypes) {_			addFilter("argTypes=" + Arrays.toString(argTypes), m ->_					ObjectUtils.isEmpty(argTypes) ?_							m.getParameterTypes().length == 0 : Arrays.equals(m.getParameterTypes(), argTypes))__			return this__		};filter,on,methods,with,the,given,parameter,types;public,builder,t,arg,types,class,arg,types,add,filter,arg,types,arrays,to,string,arg,types,m,object,utils,is,empty,arg,types,m,get,parameter,types,length,0,arrays,equals,m,get,parameter,types,arg,types,return,this
ResolvableMethod -> Builder -> public Builder<T> argTypes(Class<?>... argTypes);1541442804;Filter on methods with the given parameter types.;public Builder<T> argTypes(Class<?>... argTypes) {_			addFilter("argTypes=" + Arrays.toString(argTypes), m ->_					ObjectUtils.isEmpty(argTypes) ?_							m.getParameterTypes().length == 0 : Arrays.equals(m.getParameterTypes(), argTypes))__			return this__		};filter,on,methods,with,the,given,parameter,types;public,builder,t,arg,types,class,arg,types,add,filter,arg,types,arrays,to,string,arg,types,m,object,utils,is,empty,arg,types,m,get,parameter,types,length,0,arrays,equals,m,get,parameter,types,arg,types,return,this
ResolvableMethod -> Builder -> public Builder<T> argTypes(Class<?>... argTypes);1541455173;Filter on methods with the given parameter types._@since 5.1;public Builder<T> argTypes(Class<?>... argTypes) {_			addFilter("argTypes=" + Arrays.toString(argTypes), method ->_					ObjectUtils.isEmpty(argTypes) ? method.getParameterCount() == 0 :_							Arrays.equals(method.getParameterTypes(), argTypes))__			return this__		};filter,on,methods,with,the,given,parameter,types,since,5,1;public,builder,t,arg,types,class,arg,types,add,filter,arg,types,arrays,to,string,arg,types,method,object,utils,is,empty,arg,types,method,get,parameter,count,0,arrays,equals,method,get,parameter,types,arg,types,return,this
ResolvableMethod -> Builder -> public Builder<T> argTypes(Class<?>... argTypes);1541701761;Filter on methods with the given parameter types.;public Builder<T> argTypes(Class<?>... argTypes) {_			addFilter("argTypes=" + Arrays.toString(argTypes), method ->_					ObjectUtils.isEmpty(argTypes) ? method.getParameterCount() == 0 :_							Arrays.equals(method.getParameterTypes(), argTypes))__			return this__		};filter,on,methods,with,the,given,parameter,types;public,builder,t,arg,types,class,arg,types,add,filter,arg,types,arrays,to,string,arg,types,method,object,utils,is,empty,arg,types,method,get,parameter,count,0,arrays,equals,method,get,parameter,types,arg,types,return,this
ResolvableMethod -> Builder -> public final MethodParameter resolveReturnType();1488597153;Resolve and return the declared return type equivalent to:_<p>{@code build().returnType()};public final MethodParameter resolveReturnType() {_			return build().returnType()__		};resolve,and,return,the,declared,return,type,equivalent,to,p,code,build,return,type;public,final,method,parameter,resolve,return,type,return,build,return,type
ResolvableMethod -> Builder -> public final MethodParameter resolveReturnType();1488602581;Resolve and return the declared return type equivalent to:_<p>{@code build().returnType()};public final MethodParameter resolveReturnType() {_			return build().returnType()__		};resolve,and,return,the,declared,return,type,equivalent,to,p,code,build,return,type;public,final,method,parameter,resolve,return,type,return,build,return,type
ResolvableMethod -> Builder -> public final MethodParameter resolveReturnType();1488809997;Resolve and return the declared return type equivalent to:_<p>{@code build().returnType()};public final MethodParameter resolveReturnType() {_			return build().returnType()__		};resolve,and,return,the,declared,return,type,equivalent,to,p,code,build,return,type;public,final,method,parameter,resolve,return,type,return,build,return,type
ResolvableMethod -> Builder -> public final MethodParameter resolveReturnType();1488809997;Resolve and return the declared return type equivalent to:_<p>{@code build().returnType()};public final MethodParameter resolveReturnType() {_			return build().returnType()__		};resolve,and,return,the,declared,return,type,equivalent,to,p,code,build,return,type;public,final,method,parameter,resolve,return,type,return,build,return,type
ResolvableMethod -> Builder -> public final MethodParameter resolveReturnType();1491599707;Resolve and return the declared return type equivalent to:_<p>{@code build().returnType()};public final MethodParameter resolveReturnType() {_			return build().returnType()__		};resolve,and,return,the,declared,return,type,equivalent,to,p,code,build,return,type;public,final,method,parameter,resolve,return,type,return,build,return,type
ResolvableMethod -> Builder -> public final MethodParameter resolveReturnType();1505924929;Resolve and return the declared return type equivalent to:_<p>{@code build().returnType()};public final MethodParameter resolveReturnType() {_			return build().returnType()__		};resolve,and,return,the,declared,return,type,equivalent,to,p,code,build,return,type;public,final,method,parameter,resolve,return,type,return,build,return,type
ResolvableMethod -> Builder -> public final MethodParameter resolveReturnType();1517571703;Resolve and return the declared return type equivalent to:_<p>{@code build().returnType()};public final MethodParameter resolveReturnType() {_			return build().returnType()__		};resolve,and,return,the,declared,return,type,equivalent,to,p,code,build,return,type;public,final,method,parameter,resolve,return,type,return,build,return,type
ResolvableMethod -> Builder -> public final MethodParameter resolveReturnType();1530190293;Resolve and return the declared return type equivalent to:_<p>{@code build().returnType()};public final MethodParameter resolveReturnType() {_			return build().returnType()__		};resolve,and,return,the,declared,return,type,equivalent,to,p,code,build,return,type;public,final,method,parameter,resolve,return,type,return,build,return,type
ResolvableMethod -> Builder -> public final MethodParameter resolveReturnType();1540931761;Resolve and return the declared return type equivalent to:_<p>{@code build().returnType()};public final MethodParameter resolveReturnType() {_			return build().returnType()__		};resolve,and,return,the,declared,return,type,equivalent,to,p,code,build,return,type;public,final,method,parameter,resolve,return,type,return,build,return,type
ResolvableMethod -> Builder -> public final MethodParameter resolveReturnType();1541442804;Resolve and return the declared return type equivalent to:_<p>{@code build().returnType()};public final MethodParameter resolveReturnType() {_			return build().returnType()__		};resolve,and,return,the,declared,return,type,equivalent,to,p,code,build,return,type;public,final,method,parameter,resolve,return,type,return,build,return,type
ResolvableMethod -> Builder -> public final MethodParameter resolveReturnType();1541455173;Resolve and return the declared return type equivalent to:_<p>{@code build().returnType()};public final MethodParameter resolveReturnType() {_			return build().returnType()__		};resolve,and,return,the,declared,return,type,equivalent,to,p,code,build,return,type;public,final,method,parameter,resolve,return,type,return,build,return,type
ResolvableMethod -> Builder -> public final MethodParameter resolveReturnType();1541701761;Resolve and return the declared return type equivalent to:_<p>{@code build().returnType()};public final MethodParameter resolveReturnType() {_			return build().returnType()__		};resolve,and,return,the,declared,return,type,equivalent,to,p,code,build,return,type;public,final,method,parameter,resolve,return,type,return,build,return,type
ResolvableMethod -> public static <T> Builder<T> on(Class<T> objectClass);1488597153;Main entry point providing access to a {@code ResolvableMethod} builder.;public static <T> Builder<T> on(Class<T> objectClass) {_		return new Builder<>(objectClass)__	};main,entry,point,providing,access,to,a,code,resolvable,method,builder;public,static,t,builder,t,on,class,t,object,class,return,new,builder,object,class
ResolvableMethod -> public static <T> Builder<T> on(Class<T> objectClass);1488602581;Main entry point providing access to a {@code ResolvableMethod} builder.;public static <T> Builder<T> on(Class<T> objectClass) {_		return new Builder<>(objectClass)__	};main,entry,point,providing,access,to,a,code,resolvable,method,builder;public,static,t,builder,t,on,class,t,object,class,return,new,builder,object,class
ResolvableMethod -> public static <T> Builder<T> on(Class<T> objectClass);1488809997;Main entry point providing access to a {@code ResolvableMethod} builder.;public static <T> Builder<T> on(Class<T> objectClass) {_		return new Builder<>(objectClass)__	};main,entry,point,providing,access,to,a,code,resolvable,method,builder;public,static,t,builder,t,on,class,t,object,class,return,new,builder,object,class
ResolvableMethod -> public static <T> Builder<T> on(Class<T> objectClass);1488809997;Main entry point providing access to a {@code ResolvableMethod} builder.;public static <T> Builder<T> on(Class<T> objectClass) {_		return new Builder<>(objectClass)__	};main,entry,point,providing,access,to,a,code,resolvable,method,builder;public,static,t,builder,t,on,class,t,object,class,return,new,builder,object,class
ResolvableMethod -> public static <T> Builder<T> on(Class<T> objectClass);1491599707;Main entry point providing access to a {@code ResolvableMethod} builder.;public static <T> Builder<T> on(Class<T> objectClass) {_		return new Builder<>(objectClass)__	};main,entry,point,providing,access,to,a,code,resolvable,method,builder;public,static,t,builder,t,on,class,t,object,class,return,new,builder,object,class
ResolvableMethod -> public static <T> Builder<T> on(Class<T> objectClass);1505924929;Main entry point providing access to a {@code ResolvableMethod} builder.;public static <T> Builder<T> on(Class<T> objectClass) {_		return new Builder<>(objectClass)__	};main,entry,point,providing,access,to,a,code,resolvable,method,builder;public,static,t,builder,t,on,class,t,object,class,return,new,builder,object,class
ResolvableMethod -> public static <T> Builder<T> on(Class<T> objectClass);1517571703;Main entry point providing access to a {@code ResolvableMethod} builder.;public static <T> Builder<T> on(Class<T> objectClass) {_		return new Builder<>(objectClass)__	};main,entry,point,providing,access,to,a,code,resolvable,method,builder;public,static,t,builder,t,on,class,t,object,class,return,new,builder,object,class
ResolvableMethod -> public static <T> Builder<T> on(Class<T> objectClass);1530190293;Main entry point providing access to a {@code ResolvableMethod} builder.;public static <T> Builder<T> on(Class<T> objectClass) {_		return new Builder<>(objectClass)__	};main,entry,point,providing,access,to,a,code,resolvable,method,builder;public,static,t,builder,t,on,class,t,object,class,return,new,builder,object,class
ResolvableMethod -> public static <T> Builder<T> on(Class<T> objectClass);1540931761;Create a {@code ResolvableMethod} builder for the given handler class.;public static <T> Builder<T> on(Class<T> objectClass) {_		return new Builder<>(objectClass)__	};create,a,code,resolvable,method,builder,for,the,given,handler,class;public,static,t,builder,t,on,class,t,object,class,return,new,builder,object,class
ResolvableMethod -> public static <T> Builder<T> on(Class<T> objectClass);1541442804;Create a {@code ResolvableMethod} builder for the given handler class.;public static <T> Builder<T> on(Class<T> objectClass) {_		return new Builder<>(objectClass)__	};create,a,code,resolvable,method,builder,for,the,given,handler,class;public,static,t,builder,t,on,class,t,object,class,return,new,builder,object,class
ResolvableMethod -> public static <T> Builder<T> on(Class<T> objectClass);1541455173;Create a {@code ResolvableMethod} builder for the given handler class.;public static <T> Builder<T> on(Class<T> objectClass) {_		return new Builder<>(objectClass)__	};create,a,code,resolvable,method,builder,for,the,given,handler,class;public,static,t,builder,t,on,class,t,object,class,return,new,builder,object,class
ResolvableMethod -> public static <T> Builder<T> on(Class<T> objectClass);1541701761;Create a {@code ResolvableMethod} builder for the given handler class.;public static <T> Builder<T> on(Class<T> objectClass) {_		return new Builder<>(objectClass)__	};create,a,code,resolvable,method,builder,for,the,given,handler,class;public,static,t,builder,t,on,class,t,object,class,return,new,builder,object,class
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annotNotPresent(Class<? extends Annotation>... annotationTypes);1491599707;Filter on methods not annotated with the given annotation type.;@SafeVarargs_		public final Builder<T> annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			String message = "annotationNotPresent=" + Arrays.toString(annotationTypes)__			addFilter(message, method -> {_				if (annotationTypes.length != 0) {_					return Arrays.stream(annotationTypes).noneMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null)__				}_				else {_					return method.getAnnotations().length == 0__				}_			})__			return this__		};filter,on,methods,not,annotated,with,the,given,annotation,type;safe,varargs,public,final,builder,t,annot,not,present,class,extends,annotation,annotation,types,string,message,annotation,not,present,arrays,to,string,annotation,types,add,filter,message,method,if,annotation,types,length,0,return,arrays,stream,annotation,types,none,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,else,return,method,get,annotations,length,0,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annotNotPresent(Class<? extends Annotation>... annotationTypes);1505924929;Filter on methods not annotated with the given annotation type.;@SafeVarargs_		public final Builder<T> annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			String message = "annotationNotPresent=" + Arrays.toString(annotationTypes)__			addFilter(message, method -> {_				if (annotationTypes.length != 0) {_					return Arrays.stream(annotationTypes).noneMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null)__				}_				else {_					return method.getAnnotations().length == 0__				}_			})__			return this__		};filter,on,methods,not,annotated,with,the,given,annotation,type;safe,varargs,public,final,builder,t,annot,not,present,class,extends,annotation,annotation,types,string,message,annotation,not,present,arrays,to,string,annotation,types,add,filter,message,method,if,annotation,types,length,0,return,arrays,stream,annotation,types,none,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,else,return,method,get,annotations,length,0,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annotNotPresent(Class<? extends Annotation>... annotationTypes);1517571703;Filter on methods not annotated with the given annotation type.;@SafeVarargs_		public final Builder<T> annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			String message = "annotationNotPresent=" + Arrays.toString(annotationTypes)__			addFilter(message, method -> {_				if (annotationTypes.length != 0) {_					return Arrays.stream(annotationTypes).noneMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null)__				}_				else {_					return method.getAnnotations().length == 0__				}_			})__			return this__		};filter,on,methods,not,annotated,with,the,given,annotation,type;safe,varargs,public,final,builder,t,annot,not,present,class,extends,annotation,annotation,types,string,message,annotation,not,present,arrays,to,string,annotation,types,add,filter,message,method,if,annotation,types,length,0,return,arrays,stream,annotation,types,none,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,else,return,method,get,annotations,length,0,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annotNotPresent(Class<? extends Annotation>... annotationTypes);1530190293;Filter on methods not annotated with the given annotation type.;@SafeVarargs_		public final Builder<T> annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			String message = "annotationNotPresent=" + Arrays.toString(annotationTypes)__			addFilter(message, method -> {_				if (annotationTypes.length != 0) {_					return Arrays.stream(annotationTypes).noneMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null)__				}_				else {_					return method.getAnnotations().length == 0__				}_			})__			return this__		};filter,on,methods,not,annotated,with,the,given,annotation,type;safe,varargs,public,final,builder,t,annot,not,present,class,extends,annotation,annotation,types,string,message,annotation,not,present,arrays,to,string,annotation,types,add,filter,message,method,if,annotation,types,length,0,return,arrays,stream,annotation,types,none,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,else,return,method,get,annotations,length,0,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annotNotPresent(Class<? extends Annotation>... annotationTypes);1540931761;Filter on methods not annotated with the given annotation type.;@SafeVarargs_		public final Builder<T> annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			String message = "annotationNotPresent=" + Arrays.toString(annotationTypes)__			addFilter(message, method -> {_				if (annotationTypes.length != 0) {_					return Arrays.stream(annotationTypes).noneMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null)__				}_				else {_					return method.getAnnotations().length == 0__				}_			})__			return this__		};filter,on,methods,not,annotated,with,the,given,annotation,type;safe,varargs,public,final,builder,t,annot,not,present,class,extends,annotation,annotation,types,string,message,annotation,not,present,arrays,to,string,annotation,types,add,filter,message,method,if,annotation,types,length,0,return,arrays,stream,annotation,types,none,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,else,return,method,get,annotations,length,0,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annotNotPresent(Class<? extends Annotation>... annotationTypes);1541442804;Filter on methods not annotated with the given annotation type.;@SafeVarargs_		public final Builder<T> annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			String message = "annotationNotPresent=" + Arrays.toString(annotationTypes)__			addFilter(message, method -> {_				if (annotationTypes.length != 0) {_					return Arrays.stream(annotationTypes).noneMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null)__				}_				else {_					return method.getAnnotations().length == 0__				}_			})__			return this__		};filter,on,methods,not,annotated,with,the,given,annotation,type;safe,varargs,public,final,builder,t,annot,not,present,class,extends,annotation,annotation,types,string,message,annotation,not,present,arrays,to,string,annotation,types,add,filter,message,method,if,annotation,types,length,0,return,arrays,stream,annotation,types,none,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,else,return,method,get,annotations,length,0,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annotNotPresent(Class<? extends Annotation>... annotationTypes);1541455173;Filter on methods not annotated with the given annotation type.;@SafeVarargs_		public final Builder<T> annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			String message = "annotationNotPresent=" + Arrays.toString(annotationTypes)__			addFilter(message, method -> {_				if (annotationTypes.length != 0) {_					return Arrays.stream(annotationTypes).noneMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null)__				}_				else {_					return method.getAnnotations().length == 0__				}_			})__			return this__		};filter,on,methods,not,annotated,with,the,given,annotation,type;safe,varargs,public,final,builder,t,annot,not,present,class,extends,annotation,annotation,types,string,message,annotation,not,present,arrays,to,string,annotation,types,add,filter,message,method,if,annotation,types,length,0,return,arrays,stream,annotation,types,none,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,else,return,method,get,annotations,length,0,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annotNotPresent(Class<? extends Annotation>... annotationTypes);1541701761;Filter on methods not annotated with the given annotation type.;@SafeVarargs_		public final Builder<T> annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			String message = "annotationNotPresent=" + Arrays.toString(annotationTypes)__			addFilter(message, method -> {_				if (annotationTypes.length != 0) {_					return Arrays.stream(annotationTypes).noneMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null)__				}_				else {_					return method.getAnnotations().length == 0__				}_			})__			return this__		};filter,on,methods,not,annotated,with,the,given,annotation,type;safe,varargs,public,final,builder,t,annot,not,present,class,extends,annotation,annotation,types,string,message,annotation,not,present,arrays,to,string,annotation,types,add,filter,message,method,if,annotation,types,length,0,return,arrays,stream,annotation,types,none,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,else,return,method,get,annotations,length,0,return,this
ResolvableMethod -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1488809997;Find a unique argument matching the given type._@param type the expected type_@param generic at least one generic type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_		return new ArgResolver().arg(type, generic, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generic,at,least,one,generic,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,new,arg,resolver,arg,type,generic,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1488809997;Find a unique argument matching the given type._@param type the expected type_@param generic at least one generic type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_		return new ArgResolver().arg(type, generic, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generic,at,least,one,generic,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,new,arg,resolver,arg,type,generic,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1491599707;Find a unique argument matching the given type._@param type the expected type_@param generic at least one generic type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_		return new ArgResolver().arg(type, generic, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generic,at,least,one,generic,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,new,arg,resolver,arg,type,generic,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1505924929;Find a unique argument matching the given type._@param type the expected type_@param generic at least one generic type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_		return new ArgResolver().arg(type, generic, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generic,at,least,one,generic,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,new,arg,resolver,arg,type,generic,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1517571703;Find a unique argument matching the given type._@param type the expected type_@param generic at least one generic type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_		return new ArgResolver().arg(type, generic, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generic,at,least,one,generic,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,new,arg,resolver,arg,type,generic,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1530190293;Find a unique argument matching the given type._@param type the expected type_@param generic at least one generic type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_		return new ArgResolver().arg(type, generic, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generic,at,least,one,generic,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,new,arg,resolver,arg,type,generic,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1540931761;Find a unique argument matching the given type._@param type the expected type_@param generic at least one generic type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_		return new ArgResolver().arg(type, generic, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generic,at,least,one,generic,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,new,arg,resolver,arg,type,generic,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1541442804;Find a unique argument matching the given type._@param type the expected type_@param generic at least one generic type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_		return new ArgResolver().arg(type, generic, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generic,at,least,one,generic,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,new,arg,resolver,arg,type,generic,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1541455173;Find a unique argument matching the given type._@param type the expected type_@param generic at least one generic type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_		return new ArgResolver().arg(type, generic, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generic,at,least,one,generic,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,new,arg,resolver,arg,type,generic,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1541701761;Find a unique argument matching the given type._@param type the expected type_@param generic at least one generic type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_		return new ArgResolver().arg(type, generic, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generic,at,least,one,generic,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,new,arg,resolver,arg,type,generic,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(ResolvableType type);1488597153;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_			this.filters.add(p -> type.toString().equals(ResolvableType.forMethodParameter(p).toString()))__			return arg()__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,this,filters,add,p,type,to,string,equals,resolvable,type,for,method,parameter,p,to,string,return,arg
ResolvableMethod -> ArgResolver -> public MethodParameter arg(ResolvableType type);1488602581;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_			this.filters.add(p -> type.toString().equals(ResolvableType.forMethodParameter(p).toString()))__			return arg()__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,this,filters,add,p,type,to,string,equals,resolvable,type,for,method,parameter,p,to,string,return,arg
ResolvableMethod -> ArgResolver -> public MethodParameter arg(ResolvableType type);1488809997;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_			this.filters.add(p -> type.toString().equals(ResolvableType.forMethodParameter(p).toString()))__			return arg()__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,this,filters,add,p,type,to,string,equals,resolvable,type,for,method,parameter,p,to,string,return,arg
ResolvableMethod -> ArgResolver -> public MethodParameter arg(ResolvableType type);1488809997;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_			this.filters.add(p -> type.toString().equals(ResolvableType.forMethodParameter(p).toString()))__			return arg()__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,this,filters,add,p,type,to,string,equals,resolvable,type,for,method,parameter,p,to,string,return,arg
ResolvableMethod -> ArgResolver -> public MethodParameter arg(ResolvableType type);1491599707;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_			this.filters.add(p -> type.toString().equals(ResolvableType.forMethodParameter(p).toString()))__			return arg()__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,this,filters,add,p,type,to,string,equals,resolvable,type,for,method,parameter,p,to,string,return,arg
ResolvableMethod -> ArgResolver -> public MethodParameter arg(ResolvableType type);1505924929;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_			this.filters.add(p -> type.toString().equals(ResolvableType.forMethodParameter(p).toString()))__			return arg()__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,this,filters,add,p,type,to,string,equals,resolvable,type,for,method,parameter,p,to,string,return,arg
ResolvableMethod -> ArgResolver -> public MethodParameter arg(ResolvableType type);1517571703;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_			this.filters.add(p -> type.toString().equals(ResolvableType.forMethodParameter(p).toString()))__			return arg()__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,this,filters,add,p,type,to,string,equals,resolvable,type,for,method,parameter,p,to,string,return,arg
ResolvableMethod -> ArgResolver -> public MethodParameter arg(ResolvableType type);1530190293;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_			this.filters.add(p -> type.toString().equals(ResolvableType.forMethodParameter(p).toString()))__			return arg()__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,this,filters,add,p,type,to,string,equals,resolvable,type,for,method,parameter,p,to,string,return,arg
ResolvableMethod -> ArgResolver -> public MethodParameter arg(ResolvableType type);1540931761;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_			this.filters.add(p -> type.toString().equals(ResolvableType.forMethodParameter(p).toString()))__			return arg()__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,this,filters,add,p,type,to,string,equals,resolvable,type,for,method,parameter,p,to,string,return,arg
ResolvableMethod -> ArgResolver -> public MethodParameter arg(ResolvableType type);1541442804;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_			this.filters.add(p -> type.toString().equals(ResolvableType.forMethodParameter(p).toString()))__			return arg()__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,this,filters,add,p,type,to,string,equals,resolvable,type,for,method,parameter,p,to,string,return,arg
ResolvableMethod -> ArgResolver -> public MethodParameter arg(ResolvableType type);1541455173;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_			this.filters.add(p -> type.toString().equals(ResolvableType.forMethodParameter(p).toString()))__			return arg()__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,this,filters,add,p,type,to,string,equals,resolvable,type,for,method,parameter,p,to,string,return,arg
ResolvableMethod -> ArgResolver -> public MethodParameter arg(ResolvableType type);1541701761;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_			this.filters.add(p -> type.toString().equals(ResolvableType.forMethodParameter(p).toString()))__			return arg()__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,this,filters,add,p,type,to,string,equals,resolvable,type,for,method,parameter,p,to,string,return,arg
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1488809997;Filter on method arguments that don't have the given annotations._@param annotationTypes the annotation types;@SafeVarargs_		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param ->_					(annotationTypes.length != 0) ?_							Arrays.stream(annotationTypes).noneMatch(param::hasParameterAnnotation) :_							param.getParameterAnnotations().length == 0)__			return this__		};filter,on,method,arguments,that,don,t,have,the,given,annotations,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,this,filters,add,param,annotation,types,length,0,arrays,stream,annotation,types,none,match,param,has,parameter,annotation,param,get,parameter,annotations,length,0,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1491599707;Filter on method arguments that don't have the given annotations._@param annotationTypes the annotation types;@SafeVarargs_		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param ->_					(annotationTypes.length != 0) ?_							Arrays.stream(annotationTypes).noneMatch(param::hasParameterAnnotation) :_							param.getParameterAnnotations().length == 0)__			return this__		};filter,on,method,arguments,that,don,t,have,the,given,annotations,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,this,filters,add,param,annotation,types,length,0,arrays,stream,annotation,types,none,match,param,has,parameter,annotation,param,get,parameter,annotations,length,0,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1505924929;Filter on method arguments that don't have the given annotations._@param annotationTypes the annotation types;@SafeVarargs_		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param ->_					(annotationTypes.length != 0) ?_							Arrays.stream(annotationTypes).noneMatch(param::hasParameterAnnotation) :_							param.getParameterAnnotations().length == 0)__			return this__		};filter,on,method,arguments,that,don,t,have,the,given,annotations,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,this,filters,add,param,annotation,types,length,0,arrays,stream,annotation,types,none,match,param,has,parameter,annotation,param,get,parameter,annotations,length,0,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1517571703;Filter on method arguments that don't have the given annotations._@param annotationTypes the annotation types;@SafeVarargs_		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param ->_					(annotationTypes.length != 0) ?_							Arrays.stream(annotationTypes).noneMatch(param::hasParameterAnnotation) :_							param.getParameterAnnotations().length == 0)__			return this__		};filter,on,method,arguments,that,don,t,have,the,given,annotations,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,this,filters,add,param,annotation,types,length,0,arrays,stream,annotation,types,none,match,param,has,parameter,annotation,param,get,parameter,annotations,length,0,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1530190293;Filter on method arguments that don't have the given annotations._@param annotationTypes the annotation types;@SafeVarargs_		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param ->_					(annotationTypes.length > 0 ?_							Arrays.stream(annotationTypes).noneMatch(param::hasParameterAnnotation) :_							param.getParameterAnnotations().length == 0))__			return this__		};filter,on,method,arguments,that,don,t,have,the,given,annotations,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,this,filters,add,param,annotation,types,length,0,arrays,stream,annotation,types,none,match,param,has,parameter,annotation,param,get,parameter,annotations,length,0,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1540931761;Filter on method arguments that don't have the given annotations._@param annotationTypes the annotation types;@SafeVarargs_		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param ->_					(annotationTypes.length > 0 ?_							Arrays.stream(annotationTypes).noneMatch(param::hasParameterAnnotation) :_							param.getParameterAnnotations().length == 0))__			return this__		};filter,on,method,arguments,that,don,t,have,the,given,annotations,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,this,filters,add,param,annotation,types,length,0,arrays,stream,annotation,types,none,match,param,has,parameter,annotation,param,get,parameter,annotations,length,0,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1541442804;Filter on method arguments that don't have the given annotations._@param annotationTypes the annotation types;@SafeVarargs_		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param ->_					(annotationTypes.length > 0 ?_							Arrays.stream(annotationTypes).noneMatch(param::hasParameterAnnotation) :_							param.getParameterAnnotations().length == 0))__			return this__		};filter,on,method,arguments,that,don,t,have,the,given,annotations,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,this,filters,add,param,annotation,types,length,0,arrays,stream,annotation,types,none,match,param,has,parameter,annotation,param,get,parameter,annotations,length,0,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1541455173;Filter on method arguments that don't have the given annotations._@param annotationTypes the annotation types;@SafeVarargs_		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param ->_					(annotationTypes.length > 0 ?_							Arrays.stream(annotationTypes).noneMatch(param::hasParameterAnnotation) :_							param.getParameterAnnotations().length == 0))__			return this__		};filter,on,method,arguments,that,don,t,have,the,given,annotations,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,this,filters,add,param,annotation,types,length,0,arrays,stream,annotation,types,none,match,param,has,parameter,annotation,param,get,parameter,annotations,length,0,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1541701761;Filter on method arguments that don't have the given annotations._@param annotationTypes the annotation types;@SafeVarargs_		public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param ->_					(annotationTypes.length > 0 ?_							Arrays.stream(annotationTypes).noneMatch(param::hasParameterAnnotation) :_							param.getParameterAnnotations().length == 0))__			return this__		};filter,on,method,arguments,that,don,t,have,the,given,annotations,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,this,filters,add,param,annotation,types,length,0,arrays,stream,annotation,types,none,match,param,has,parameter,annotation,param,get,parameter,annotations,length,0,return,this
ResolvableMethod -> Builder -> public Builder<T> returning(Class<?> returnType, Class<?>... generics);1491599707;Filter on methods returning the given type._@param returnType the return type_@param generics optional array of generic types;public Builder<T> returning(Class<?> returnType, Class<?>... generics) {_			return returning(toResolvableType(returnType, generics))__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,builder,t,returning,class,return,type,class,generics,return,returning,to,resolvable,type,return,type,generics
ResolvableMethod -> Builder -> public Builder<T> returning(Class<?> returnType, Class<?>... generics);1505924929;Filter on methods returning the given type._@param returnType the return type_@param generics optional array of generic types;public Builder<T> returning(Class<?> returnType, Class<?>... generics) {_			return returning(toResolvableType(returnType, generics))__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,builder,t,returning,class,return,type,class,generics,return,returning,to,resolvable,type,return,type,generics
ResolvableMethod -> Builder -> public Builder<T> returning(Class<?> returnType, Class<?>... generics);1517571703;Filter on methods returning the given type._@param returnType the return type_@param generics optional array of generic types;public Builder<T> returning(Class<?> returnType, Class<?>... generics) {_			return returning(toResolvableType(returnType, generics))__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,builder,t,returning,class,return,type,class,generics,return,returning,to,resolvable,type,return,type,generics
ResolvableMethod -> Builder -> public Builder<T> returning(Class<?> returnType, Class<?>... generics);1530190293;Filter on methods returning the given type._@param returnType the return type_@param generics optional array of generic types;public Builder<T> returning(Class<?> returnType, Class<?>... generics) {_			return returning(toResolvableType(returnType, generics))__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,builder,t,returning,class,return,type,class,generics,return,returning,to,resolvable,type,return,type,generics
ResolvableMethod -> Builder -> public Builder<T> returning(Class<?> returnType, Class<?>... generics);1540931761;Filter on methods returning the given type._@param returnType the return type_@param generics optional array of generic types;public Builder<T> returning(Class<?> returnType, Class<?>... generics) {_			return returning(toResolvableType(returnType, generics))__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,builder,t,returning,class,return,type,class,generics,return,returning,to,resolvable,type,return,type,generics
ResolvableMethod -> Builder -> public Builder<T> returning(Class<?> returnType, Class<?>... generics);1541442804;Filter on methods returning the given type._@param returnType the return type_@param generics optional array of generic types;public Builder<T> returning(Class<?> returnType, Class<?>... generics) {_			return returning(toResolvableType(returnType, generics))__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,builder,t,returning,class,return,type,class,generics,return,returning,to,resolvable,type,return,type,generics
ResolvableMethod -> Builder -> public Builder<T> returning(Class<?> returnType, Class<?>... generics);1541455173;Filter on methods returning the given type._@param returnType the return type_@param generics optional array of generic types;public Builder<T> returning(Class<?> returnType, Class<?>... generics) {_			return returning(toResolvableType(returnType, generics))__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,builder,t,returning,class,return,type,class,generics,return,returning,to,resolvable,type,return,type,generics
ResolvableMethod -> Builder -> public Builder<T> returning(Class<?> returnType, Class<?>... generics);1541701761;Filter on methods returning the given type._@param returnType the return type_@param generics optional array of generic types;public Builder<T> returning(Class<?> returnType, Class<?>... generics) {_			return returning(toResolvableType(returnType, generics))__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,builder,t,returning,class,return,type,class,generics,return,returning,to,resolvable,type,return,type,generics
ResolvableMethod -> @SafeVarargs 	public final ArgResolver filtered(Predicate<MethodParameter>... filter);1488597153;Filter on method arguments using customer predicates.;@SafeVarargs_	public final ArgResolver filtered(Predicate<MethodParameter>... filter) {_		return new ArgResolver().filtered(filter)__	};filter,on,method,arguments,using,customer,predicates;safe,varargs,public,final,arg,resolver,filtered,predicate,method,parameter,filter,return,new,arg,resolver,filtered,filter
ResolvableMethod -> @SafeVarargs 	public final ArgResolver filtered(Predicate<MethodParameter>... filter);1488602581;Filter on method arguments using customer predicates.;@SafeVarargs_	public final ArgResolver filtered(Predicate<MethodParameter>... filter) {_		return new ArgResolver().filtered(filter)__	};filter,on,method,arguments,using,customer,predicates;safe,varargs,public,final,arg,resolver,filtered,predicate,method,parameter,filter,return,new,arg,resolver,filtered,filter
ResolvableMethod -> @SafeVarargs 	public final ArgResolver filtered(Predicate<MethodParameter>... filter);1488809997;Filter on method arguments using customer predicates.;@SafeVarargs_	public final ArgResolver filtered(Predicate<MethodParameter>... filter) {_		return new ArgResolver().filtered(filter)__	};filter,on,method,arguments,using,customer,predicates;safe,varargs,public,final,arg,resolver,filtered,predicate,method,parameter,filter,return,new,arg,resolver,filtered,filter
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annotPresent(Class<? extends Annotation>... annotationTypes);1491599707;Filter on methods annotated with the given annotation type._@see #annot(Predicate[])_@see MvcAnnotationPredicates;@SafeVarargs_		public final Builder<T> annotPresent(Class<? extends Annotation>... annotationTypes) {_			String message = "annotationPresent=" + Arrays.toString(annotationTypes)__			addFilter(message, method ->_					Arrays.stream(annotationTypes).allMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null))__			return this__		};filter,on,methods,annotated,with,the,given,annotation,type,see,annot,predicate,see,mvc,annotation,predicates;safe,varargs,public,final,builder,t,annot,present,class,extends,annotation,annotation,types,string,message,annotation,present,arrays,to,string,annotation,types,add,filter,message,method,arrays,stream,annotation,types,all,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annotPresent(Class<? extends Annotation>... annotationTypes);1505924929;Filter on methods annotated with the given annotation type._@see #annot(Predicate[])_@see MvcAnnotationPredicates;@SafeVarargs_		public final Builder<T> annotPresent(Class<? extends Annotation>... annotationTypes) {_			String message = "annotationPresent=" + Arrays.toString(annotationTypes)__			addFilter(message, method ->_					Arrays.stream(annotationTypes).allMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null))__			return this__		};filter,on,methods,annotated,with,the,given,annotation,type,see,annot,predicate,see,mvc,annotation,predicates;safe,varargs,public,final,builder,t,annot,present,class,extends,annotation,annotation,types,string,message,annotation,present,arrays,to,string,annotation,types,add,filter,message,method,arrays,stream,annotation,types,all,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annotPresent(Class<? extends Annotation>... annotationTypes);1517571703;Filter on methods annotated with the given annotation type._@see #annot(Predicate[])_@see MvcAnnotationPredicates;@SafeVarargs_		public final Builder<T> annotPresent(Class<? extends Annotation>... annotationTypes) {_			String message = "annotationPresent=" + Arrays.toString(annotationTypes)__			addFilter(message, method ->_					Arrays.stream(annotationTypes).allMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null))__			return this__		};filter,on,methods,annotated,with,the,given,annotation,type,see,annot,predicate,see,mvc,annotation,predicates;safe,varargs,public,final,builder,t,annot,present,class,extends,annotation,annotation,types,string,message,annotation,present,arrays,to,string,annotation,types,add,filter,message,method,arrays,stream,annotation,types,all,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annotPresent(Class<? extends Annotation>... annotationTypes);1530190293;Filter on methods annotated with the given annotation type._@see #annot(Predicate[])_@see MvcAnnotationPredicates;@SafeVarargs_		public final Builder<T> annotPresent(Class<? extends Annotation>... annotationTypes) {_			String message = "annotationPresent=" + Arrays.toString(annotationTypes)__			addFilter(message, method ->_					Arrays.stream(annotationTypes).allMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null))__			return this__		};filter,on,methods,annotated,with,the,given,annotation,type,see,annot,predicate,see,mvc,annotation,predicates;safe,varargs,public,final,builder,t,annot,present,class,extends,annotation,annotation,types,string,message,annotation,present,arrays,to,string,annotation,types,add,filter,message,method,arrays,stream,annotation,types,all,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annotPresent(Class<? extends Annotation>... annotationTypes);1540931761;Filter on methods annotated with the given annotation type._@see #annot(Predicate[])_@see MvcAnnotationPredicates;@SafeVarargs_		public final Builder<T> annotPresent(Class<? extends Annotation>... annotationTypes) {_			String message = "annotationPresent=" + Arrays.toString(annotationTypes)__			addFilter(message, method ->_					Arrays.stream(annotationTypes).allMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null))__			return this__		};filter,on,methods,annotated,with,the,given,annotation,type,see,annot,predicate,see,mvc,annotation,predicates;safe,varargs,public,final,builder,t,annot,present,class,extends,annotation,annotation,types,string,message,annotation,present,arrays,to,string,annotation,types,add,filter,message,method,arrays,stream,annotation,types,all,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annotPresent(Class<? extends Annotation>... annotationTypes);1541442804;Filter on methods annotated with the given annotation type._@see #annot(Predicate[])_@see MvcAnnotationPredicates;@SafeVarargs_		public final Builder<T> annotPresent(Class<? extends Annotation>... annotationTypes) {_			String message = "annotationPresent=" + Arrays.toString(annotationTypes)__			addFilter(message, method ->_					Arrays.stream(annotationTypes).allMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null))__			return this__		};filter,on,methods,annotated,with,the,given,annotation,type,see,annot,predicate,see,mvc,annotation,predicates;safe,varargs,public,final,builder,t,annot,present,class,extends,annotation,annotation,types,string,message,annotation,present,arrays,to,string,annotation,types,add,filter,message,method,arrays,stream,annotation,types,all,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annotPresent(Class<? extends Annotation>... annotationTypes);1541455173;Filter on methods annotated with the given annotation type._@see #annot(Predicate[])_@see MvcAnnotationPredicates;@SafeVarargs_		public final Builder<T> annotPresent(Class<? extends Annotation>... annotationTypes) {_			String message = "annotationPresent=" + Arrays.toString(annotationTypes)__			addFilter(message, method ->_					Arrays.stream(annotationTypes).allMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null))__			return this__		};filter,on,methods,annotated,with,the,given,annotation,type,see,annot,predicate,see,mvc,annotation,predicates;safe,varargs,public,final,builder,t,annot,present,class,extends,annotation,annotation,types,string,message,annotation,present,arrays,to,string,annotation,types,add,filter,message,method,arrays,stream,annotation,types,all,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annotPresent(Class<? extends Annotation>... annotationTypes);1541701761;Filter on methods annotated with the given annotation type._@see #annot(Predicate[])_See {@link org.springframework.web.method.MvcAnnotationPredicates}.;@SafeVarargs_		public final Builder<T> annotPresent(Class<? extends Annotation>... annotationTypes) {_			String message = "annotationPresent=" + Arrays.toString(annotationTypes)__			addFilter(message, method ->_					Arrays.stream(annotationTypes).allMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null))__			return this__		};filter,on,methods,annotated,with,the,given,annotation,type,see,annot,predicate,see,link,org,springframework,web,method,mvc,annotation,predicates;safe,varargs,public,final,builder,t,annot,present,class,extends,annotation,annotation,types,string,message,annotation,present,arrays,to,string,annotation,types,add,filter,message,method,arrays,stream,annotation,types,all,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,return,this
ResolvableMethod -> Builder -> public final Builder notAnnotated(Class<? extends Annotation>... annotationTypes);1488602581;Filter on methods not annotated with the given annotation type.;public final Builder notAnnotated(Class<? extends Annotation>... annotationTypes) {_			String message = "notAnnotated=" + Arrays.toString(annotationTypes)__			addFilter(message, method -> {_				if (annotationTypes.length != 0) {_					return Arrays.stream(annotationTypes).noneMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null)__				}_				else {_					return method.getAnnotations().length == 0__				}_			})__			return this__		};filter,on,methods,not,annotated,with,the,given,annotation,type;public,final,builder,not,annotated,class,extends,annotation,annotation,types,string,message,not,annotated,arrays,to,string,annotation,types,add,filter,message,method,if,annotation,types,length,0,return,arrays,stream,annotation,types,none,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,else,return,method,get,annotations,length,0,return,this
ResolvableMethod -> Builder -> public final Builder notAnnotated(Class<? extends Annotation>... annotationTypes);1488809997;Filter on methods not annotated with the given annotation type.;public final Builder notAnnotated(Class<? extends Annotation>... annotationTypes) {_			String message = "notAnnotated=" + Arrays.toString(annotationTypes)__			addFilter(message, method -> {_				if (annotationTypes.length != 0) {_					return Arrays.stream(annotationTypes).noneMatch(annotType ->_							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null)__				}_				else {_					return method.getAnnotations().length == 0__				}_			})__			return this__		};filter,on,methods,not,annotated,with,the,given,annotation,type;public,final,builder,not,annotated,class,extends,annotation,annotation,types,string,message,not,annotated,arrays,to,string,annotation,types,add,filter,message,method,if,annotation,types,length,0,return,arrays,stream,annotation,types,none,match,annot,type,annotated,element,utils,find,merged,annotation,method,annot,type,null,else,return,method,get,annotations,length,0,return,this
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType);1488597153;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()};public MethodParameter resolveReturnType(Class<?> returnType) {_			return returning(returnType).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type;public,method,parameter,resolve,return,type,class,return,type,return,returning,return,type,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType);1488602581;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()};public MethodParameter resolveReturnType(Class<?> returnType) {_			return returning(returnType).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type;public,method,parameter,resolve,return,type,class,return,type,return,returning,return,type,build,return,type
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annot(Predicate<Method>... filters);1491599707;Filter on annotated methods._See {@link MvcAnnotationPredicates}.;@SafeVarargs_		public final Builder<T> annot(Predicate<Method>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,annotated,methods,see,link,mvc,annotation,predicates;safe,varargs,public,final,builder,t,annot,predicate,method,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annot(Predicate<Method>... filters);1505924929;Filter on annotated methods._See {@link MvcAnnotationPredicates}.;@SafeVarargs_		public final Builder<T> annot(Predicate<Method>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,annotated,methods,see,link,mvc,annotation,predicates;safe,varargs,public,final,builder,t,annot,predicate,method,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annot(Predicate<Method>... filters);1517571703;Filter on annotated methods._See {@link MvcAnnotationPredicates}.;@SafeVarargs_		public final Builder<T> annot(Predicate<Method>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,annotated,methods,see,link,mvc,annotation,predicates;safe,varargs,public,final,builder,t,annot,predicate,method,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annot(Predicate<Method>... filters);1530190293;Filter on annotated methods._See {@link MvcAnnotationPredicates}.;@SafeVarargs_		public final Builder<T> annot(Predicate<Method>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,annotated,methods,see,link,mvc,annotation,predicates;safe,varargs,public,final,builder,t,annot,predicate,method,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annot(Predicate<Method>... filters);1540931761;Filter on annotated methods._See {@link MvcAnnotationPredicates}.;@SafeVarargs_		public final Builder<T> annot(Predicate<Method>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,annotated,methods,see,link,mvc,annotation,predicates;safe,varargs,public,final,builder,t,annot,predicate,method,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annot(Predicate<Method>... filters);1541442804;Filter on annotated methods._See {@link MvcAnnotationPredicates}.;@SafeVarargs_		public final Builder<T> annot(Predicate<Method>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,annotated,methods,see,link,mvc,annotation,predicates;safe,varargs,public,final,builder,t,annot,predicate,method,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annot(Predicate<Method>... filters);1541455173;Filter on annotated methods._See {@link MvcAnnotationPredicates}.;@SafeVarargs_		public final Builder<T> annot(Predicate<Method>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,annotated,methods,see,link,mvc,annotation,predicates;safe,varargs,public,final,builder,t,annot,predicate,method,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder<T> annot(Predicate<Method>... filters);1541701761;Filter on annotated methods._See {@link org.springframework.web.method.MvcAnnotationPredicates}.;@SafeVarargs_		public final Builder<T> annot(Predicate<Method>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};filter,on,annotated,methods,see,link,org,springframework,web,method,mvc,annotation,predicates;safe,varargs,public,final,builder,t,annot,predicate,method,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> public Method method();1488597153;Return the resolved method.;public Method method() {_		return this.method__	};return,the,resolved,method;public,method,method,return,this,method
ResolvableMethod -> public Method method();1488602581;Return the resolved method.;public Method method() {_		return this.method__	};return,the,resolved,method;public,method,method,return,this,method
ResolvableMethod -> public Method method();1488809997;Return the resolved method.;public Method method() {_		return this.method__	};return,the,resolved,method;public,method,method,return,this,method
ResolvableMethod -> public Method method();1488809997;Return the resolved method.;public Method method() {_		return this.method__	};return,the,resolved,method;public,method,method,return,this,method
ResolvableMethod -> public Method method();1491599707;Return the resolved method.;public Method method() {_		return this.method__	};return,the,resolved,method;public,method,method,return,this,method
ResolvableMethod -> public Method method();1505924929;Return the resolved method.;public Method method() {_		return this.method__	};return,the,resolved,method;public,method,method,return,this,method
ResolvableMethod -> public Method method();1517571703;Return the resolved method.;public Method method() {_		return this.method__	};return,the,resolved,method;public,method,method,return,this,method
ResolvableMethod -> public Method method();1530190293;Return the resolved method.;public Method method() {_		return this.method__	};return,the,resolved,method;public,method,method,return,this,method
ResolvableMethod -> public Method method();1540931761;Return the resolved method.;public Method method() {_		return this.method__	};return,the,resolved,method;public,method,method,return,this,method
ResolvableMethod -> public Method method();1541442804;Return the resolved method.;public Method method() {_		return this.method__	};return,the,resolved,method;public,method,method,return,this,method
ResolvableMethod -> public Method method();1541455173;Return the resolved method.;public Method method() {_		return this.method__	};return,the,resolved,method;public,method,method,return,this,method
ResolvableMethod -> public Method method();1541701761;Return the resolved method.;public Method method() {_		return this.method__	};return,the,resolved,method;public,method,method,return,this,method
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver filtered(Predicate<MethodParameter>... filter);1488597153;Filter on method arguments using customer predicates.;@SafeVarargs_		public final ArgResolver filtered(Predicate<MethodParameter>... filter) {_			this.filters.addAll(Arrays.asList(filter))__			return this__		};filter,on,method,arguments,using,customer,predicates;safe,varargs,public,final,arg,resolver,filtered,predicate,method,parameter,filter,this,filters,add,all,arrays,as,list,filter,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver filtered(Predicate<MethodParameter>... filter);1488602581;Filter on method arguments using customer predicates.;@SafeVarargs_		public final ArgResolver filtered(Predicate<MethodParameter>... filter) {_			this.filters.addAll(Arrays.asList(filter))__			return this__		};filter,on,method,arguments,using,customer,predicates;safe,varargs,public,final,arg,resolver,filtered,predicate,method,parameter,filter,this,filters,add,all,arrays,as,list,filter,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver filtered(Predicate<MethodParameter>... filter);1488809997;Filter on method arguments using customer predicates.;@SafeVarargs_		public final ArgResolver filtered(Predicate<MethodParameter>... filter) {_			this.filters.addAll(Arrays.asList(filter))__			return this__		};filter,on,method,arguments,using,customer,predicates;safe,varargs,public,final,arg,resolver,filtered,predicate,method,parameter,filter,this,filters,add,all,arrays,as,list,filter,return,this
ResolvableMethod -> Builder -> public Builder<T> returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics);1491599707;Filter on methods returning the given type with generics._@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public Builder<T> returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics) {_			return returning(toResolvableType(returnType, generic, generics))__		};filter,on,methods,returning,the,given,type,with,generics,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,builder,t,returning,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,to,resolvable,type,return,type,generic,generics
ResolvableMethod -> Builder -> public Builder<T> returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics);1505924929;Filter on methods returning the given type with generics._@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public Builder<T> returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics) {_			return returning(toResolvableType(returnType, generic, generics))__		};filter,on,methods,returning,the,given,type,with,generics,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,builder,t,returning,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,to,resolvable,type,return,type,generic,generics
ResolvableMethod -> Builder -> public Builder<T> returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics);1517571703;Filter on methods returning the given type with generics._@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public Builder<T> returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics) {_			return returning(toResolvableType(returnType, generic, generics))__		};filter,on,methods,returning,the,given,type,with,generics,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,builder,t,returning,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,to,resolvable,type,return,type,generic,generics
ResolvableMethod -> Builder -> public Builder<T> returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics);1530190293;Filter on methods returning the given type with generics._@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public Builder<T> returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics) {_			return returning(toResolvableType(returnType, generic, generics))__		};filter,on,methods,returning,the,given,type,with,generics,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,builder,t,returning,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,to,resolvable,type,return,type,generic,generics
ResolvableMethod -> Builder -> public Builder<T> returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics);1540931761;Filter on methods returning the given type with generics._@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public Builder<T> returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics) {_			return returning(toResolvableType(returnType, generic, generics))__		};filter,on,methods,returning,the,given,type,with,generics,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,builder,t,returning,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,to,resolvable,type,return,type,generic,generics
ResolvableMethod -> Builder -> public Builder<T> returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics);1541442804;Filter on methods returning the given type with generics._@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public Builder<T> returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics) {_			return returning(toResolvableType(returnType, generic, generics))__		};filter,on,methods,returning,the,given,type,with,generics,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,builder,t,returning,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,to,resolvable,type,return,type,generic,generics
ResolvableMethod -> Builder -> public Builder<T> returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics);1541455173;Filter on methods returning the given type with generics._@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public Builder<T> returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics) {_			return returning(toResolvableType(returnType, generic, generics))__		};filter,on,methods,returning,the,given,type,with,generics,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,builder,t,returning,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,to,resolvable,type,return,type,generic,generics
ResolvableMethod -> Builder -> public Builder<T> returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics);1541701761;Filter on methods returning the given type with generics._@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public Builder<T> returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics) {_			return returning(toResolvableType(returnType, generic, generics))__		};filter,on,methods,returning,the,given,type,with,generics,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,builder,t,returning,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,to,resolvable,type,return,type,generic,generics
ResolvableMethod -> Builder -> public Builder named(String methodName);1488597153;Filter on methods with the given name.;public Builder named(String methodName) {_			addFilter("methodName=" + methodName, m -> m.getName().equals(methodName))__			return this__		};filter,on,methods,with,the,given,name;public,builder,named,string,method,name,add,filter,method,name,method,name,m,m,get,name,equals,method,name,return,this
ResolvableMethod -> Builder -> public Builder named(String methodName);1488602581;Filter on methods with the given name.;public Builder named(String methodName) {_			addFilter("methodName=" + methodName, m -> m.getName().equals(methodName))__			return this__		};filter,on,methods,with,the,given,name;public,builder,named,string,method,name,add,filter,method,name,method,name,m,m,get,name,equals,method,name,return,this
ResolvableMethod -> Builder -> public Builder named(String methodName);1488809997;Filter on methods with the given name.;public Builder named(String methodName) {_			addFilter("methodName=" + methodName, m -> m.getName().equals(methodName))__			return this__		};filter,on,methods,with,the,given,name;public,builder,named,string,method,name,add,filter,method,name,method,name,m,m,get,name,equals,method,name,return,this
ResolvableMethod -> Builder -> public Builder named(String methodName);1488809997;Filter on methods with the given name.;public Builder named(String methodName) {_			addFilter("methodName=" + methodName, m -> m.getName().equals(methodName))__			return this__		};filter,on,methods,with,the,given,name;public,builder,named,string,method,name,add,filter,method,name,method,name,m,m,get,name,equals,method,name,return,this
ResolvableMethod -> Builder -> public final Method resolveMethod();1488597153;Resolve and return the {@code Method} equivalent to:_<p>{@code build().method()};public final Method resolveMethod() {_			return build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,build,method;public,final,method,resolve,method,return,build,method
ResolvableMethod -> Builder -> public final Method resolveMethod();1488602581;Resolve and return the {@code Method} equivalent to:_<p>{@code build().method()};public final Method resolveMethod() {_			return build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,build,method;public,final,method,resolve,method,return,build,method
ResolvableMethod -> Builder -> public final Method resolveMethod();1488809997;Resolve and return the {@code Method} equivalent to:_<p>{@code build().method()};public final Method resolveMethod() {_			return build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,build,method;public,final,method,resolve,method,return,build,method
ResolvableMethod -> Builder -> public final Method resolveMethod();1488809997;Resolve and return the {@code Method} equivalent to:_<p>{@code build().method()};public final Method resolveMethod() {_			return build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,build,method;public,final,method,resolve,method,return,build,method
ResolvableMethod -> Builder -> public final Method resolveMethod();1491599707;Resolve and return the {@code Method} equivalent to:_<p>{@code build().method()};public final Method resolveMethod() {_			return build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,build,method;public,final,method,resolve,method,return,build,method
ResolvableMethod -> Builder -> public final Method resolveMethod();1505924929;Resolve and return the {@code Method} equivalent to:_<p>{@code build().method()};public final Method resolveMethod() {_			return build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,build,method;public,final,method,resolve,method,return,build,method
ResolvableMethod -> Builder -> public final Method resolveMethod();1517571703;Resolve and return the {@code Method} equivalent to:_<p>{@code build().method()};public final Method resolveMethod() {_			return build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,build,method;public,final,method,resolve,method,return,build,method
ResolvableMethod -> Builder -> public final Method resolveMethod();1530190293;Resolve and return the {@code Method} equivalent to:_<p>{@code build().method()};public final Method resolveMethod() {_			return build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,build,method;public,final,method,resolve,method,return,build,method
ResolvableMethod -> Builder -> public final Method resolveMethod();1540931761;Resolve and return the {@code Method} equivalent to:_<p>{@code build().method()};public final Method resolveMethod() {_			return build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,build,method;public,final,method,resolve,method,return,build,method
ResolvableMethod -> Builder -> public final Method resolveMethod();1541442804;Resolve and return the {@code Method} equivalent to:_<p>{@code build().method()};public final Method resolveMethod() {_			return build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,build,method;public,final,method,resolve,method,return,build,method
ResolvableMethod -> Builder -> public final Method resolveMethod();1541455173;Resolve and return the {@code Method} equivalent to:_<p>{@code build().method()};public final Method resolveMethod() {_			return build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,build,method;public,final,method,resolve,method,return,build,method
ResolvableMethod -> Builder -> public final Method resolveMethod();1541701761;Resolve and return the {@code Method} equivalent to:_<p>{@code build().method()};public final Method resolveMethod() {_			return build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,build,method;public,final,method,resolve,method,return,build,method
ResolvableMethod -> public MethodParameter arg(Class<?> type);1488597153;Find a unique argument matching the given type._@param type the expected type;public MethodParameter arg(Class<?> type) {_		return new ArgResolver().arg(type)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,return,new,arg,resolver,arg,type
ResolvableMethod -> public MethodParameter arg(Class<?> type);1488602581;Find a unique argument matching the given type._@param type the expected type;public MethodParameter arg(Class<?> type) {_		return new ArgResolver().arg(type)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,return,new,arg,resolver,arg,type
ResolvableMethod -> Builder -> public Builder returning(ResolvableType returnType);1488809997;Filter on methods returning the given type._@param returnType the return type;public Builder returning(ResolvableType returnType) {_			String expected = returnType.toString()__			String message = "returnType=" + expected__			addFilter(message, m -> expected.equals(ResolvableType.forMethodReturnType(m).toString()))__			return this__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type;public,builder,returning,resolvable,type,return,type,string,expected,return,type,to,string,string,message,return,type,expected,add,filter,message,m,expected,equals,resolvable,type,for,method,return,type,m,to,string,return,this
ResolvableMethod -> Builder -> public Builder returning(ResolvableType returnType);1488809997;Filter on methods returning the given type._@param returnType the return type;public Builder returning(ResolvableType returnType) {_			String expected = returnType.toString()__			String message = "returnType=" + expected__			addFilter(message, m -> expected.equals(ResolvableType.forMethodReturnType(m).toString()))__			return this__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type;public,builder,returning,resolvable,type,return,type,string,expected,return,type,to,string,string,message,return,type,expected,add,filter,message,m,expected,equals,resolvable,type,for,method,return,type,m,to,string,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final <A extends Annotation> ArgResolver annotated(Class<A> annotationType, Predicate<A>... filter);1488597153;Filter on method arguments that have the given annotation._@param annotationType the annotation type_@param filter optional filters on the annotation;@SafeVarargs_		public final <A extends Annotation> ArgResolver annotated(Class<A> annotationType, Predicate<A>... filter) {_			this.filters.add(param -> {_				A annot = param.getParameterAnnotation(annotationType)__				return (annot != null && Arrays.stream(filter).allMatch(f -> f.test(annot)))__			})__			return this__		};filter,on,method,arguments,that,have,the,given,annotation,param,annotation,type,the,annotation,type,param,filter,optional,filters,on,the,annotation;safe,varargs,public,final,a,extends,annotation,arg,resolver,annotated,class,a,annotation,type,predicate,a,filter,this,filters,add,param,a,annot,param,get,parameter,annotation,annotation,type,return,annot,null,arrays,stream,filter,all,match,f,f,test,annot,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final <A extends Annotation> ArgResolver annotated(Class<A> annotationType, Predicate<A>... filter);1488602581;Filter on method arguments that have the given annotation._@param annotationType the annotation type_@param filter optional filters on the annotation;@SafeVarargs_		public final <A extends Annotation> ArgResolver annotated(Class<A> annotationType, Predicate<A>... filter) {_			this.filters.add(param -> {_				A annot = param.getParameterAnnotation(annotationType)__				return (annot != null && Arrays.stream(filter).allMatch(f -> f.test(annot)))__			})__			return this__		};filter,on,method,arguments,that,have,the,given,annotation,param,annotation,type,the,annotation,type,param,filter,optional,filters,on,the,annotation;safe,varargs,public,final,a,extends,annotation,arg,resolver,annotated,class,a,annotation,type,predicate,a,filter,this,filters,add,param,a,annot,param,get,parameter,annotation,annotation,type,return,annot,null,arrays,stream,filter,all,match,f,f,test,annot,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final <A extends Annotation> ArgResolver annotated(Class<A> annotationType, Predicate<A>... filter);1488809997;Filter on method arguments that have the given annotation._@param annotationType the annotation type_@param filter optional filters on the annotation;@SafeVarargs_		public final <A extends Annotation> ArgResolver annotated(Class<A> annotationType, Predicate<A>... filter) {_			this.filters.add(param -> {_				A annot = param.getParameterAnnotation(annotationType)__				return (annot != null && Arrays.stream(filter).allMatch(f -> f.test(annot)))__			})__			return this__		};filter,on,method,arguments,that,have,the,given,annotation,param,annotation,type,the,annotation,type,param,filter,optional,filters,on,the,annotation;safe,varargs,public,final,a,extends,annotation,arg,resolver,annotated,class,a,annotation,type,predicate,a,filter,this,filters,add,param,a,annot,param,get,parameter,annotation,annotation,type,return,annot,null,arrays,stream,filter,all,match,f,f,test,annot,return,this
ResolvableMethod -> Builder -> public Method resolveMethod(String methodName);1488597153;Resolve and return the {@code Method} equivalent to:_<p>{@code named(methodName).build().method()};public Method resolveMethod(String methodName) {_			return named(methodName).build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,named,method,name,build,method;public,method,resolve,method,string,method,name,return,named,method,name,build,method
ResolvableMethod -> Builder -> public Method resolveMethod(String methodName);1488602581;Resolve and return the {@code Method} equivalent to:_<p>{@code named(methodName).build().method()};public Method resolveMethod(String methodName) {_			return named(methodName).build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,named,method,name,build,method;public,method,resolve,method,string,method,name,return,named,method,name,build,method
ResolvableMethod -> Builder -> public Method resolveMethod(String methodName);1488809997;Resolve and return the {@code Method} equivalent to:_<p>{@code named(methodName).build().method()};public Method resolveMethod(String methodName) {_			return named(methodName).build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,named,method,name,build,method;public,method,resolve,method,string,method,name,return,named,method,name,build,method
ResolvableMethod -> Builder -> public Method resolveMethod(String methodName);1488809997;Resolve and return the {@code Method} equivalent to:_<p>{@code named(methodName).build().method()};public Method resolveMethod(String methodName) {_			return named(methodName).build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,named,method,name,build,method;public,method,resolve,method,string,method,name,return,named,method,name,build,method
ResolvableMethod -> Builder -> public Method resolveMethod(String methodName);1491599707;Resolve and return the {@code Method} equivalent to:_<p>{@code named(methodName).build().method()};public Method resolveMethod(String methodName) {_			return named(methodName).build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,named,method,name,build,method;public,method,resolve,method,string,method,name,return,named,method,name,build,method
ResolvableMethod -> Builder -> public Method resolveMethod(String methodName);1505924929;Resolve and return the {@code Method} equivalent to:_<p>{@code named(methodName).build().method()};public Method resolveMethod(String methodName) {_			return named(methodName).build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,named,method,name,build,method;public,method,resolve,method,string,method,name,return,named,method,name,build,method
ResolvableMethod -> Builder -> public Method resolveMethod(String methodName);1517571703;Resolve and return the {@code Method} equivalent to:_<p>{@code named(methodName).build().method()};public Method resolveMethod(String methodName) {_			return named(methodName).build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,named,method,name,build,method;public,method,resolve,method,string,method,name,return,named,method,name,build,method
ResolvableMethod -> Builder -> public Method resolveMethod(String methodName);1530190293;Resolve and return the {@code Method} equivalent to:_<p>{@code named(methodName).build().method()};public Method resolveMethod(String methodName) {_			return named(methodName).build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,named,method,name,build,method;public,method,resolve,method,string,method,name,return,named,method,name,build,method
ResolvableMethod -> Builder -> public Method resolveMethod(String methodName);1540931761;Resolve and return the {@code Method} equivalent to:_<p>{@code named(methodName).build().method()};public Method resolveMethod(String methodName) {_			return named(methodName).build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,named,method,name,build,method;public,method,resolve,method,string,method,name,return,named,method,name,build,method
ResolvableMethod -> Builder -> public Method resolveMethod(String methodName);1541442804;Resolve and return the {@code Method} equivalent to:_<p>{@code named(methodName).build().method()};public Method resolveMethod(String methodName) {_			return named(methodName).build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,named,method,name,build,method;public,method,resolve,method,string,method,name,return,named,method,name,build,method
ResolvableMethod -> Builder -> public Method resolveMethod(String methodName);1541455173;Resolve and return the {@code Method} equivalent to:_<p>{@code named(methodName).build().method()};public Method resolveMethod(String methodName) {_			return named(methodName).build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,named,method,name,build,method;public,method,resolve,method,string,method,name,return,named,method,name,build,method
ResolvableMethod -> Builder -> public Method resolveMethod(String methodName);1541701761;Resolve and return the {@code Method} equivalent to:_<p>{@code named(methodName).build().method()};public Method resolveMethod(String methodName) {_			return named(methodName).build().method()__		};resolve,and,return,the,code,method,equivalent,to,p,code,named,method,name,build,method;public,method,resolve,method,string,method,name,return,named,method,name,build,method
ResolvableMethod -> Builder -> public Builder<T> returning(ResolvableType returnType);1491599707;Filter on methods returning the given type._@param returnType the return type;public Builder<T> returning(ResolvableType returnType) {_			String expected = returnType.toString()__			String message = "returnType=" + expected__			addFilter(message, m -> expected.equals(ResolvableType.forMethodReturnType(m).toString()))__			return this__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type;public,builder,t,returning,resolvable,type,return,type,string,expected,return,type,to,string,string,message,return,type,expected,add,filter,message,m,expected,equals,resolvable,type,for,method,return,type,m,to,string,return,this
ResolvableMethod -> Builder -> public Builder<T> returning(ResolvableType returnType);1505924929;Filter on methods returning the given type._@param returnType the return type;public Builder<T> returning(ResolvableType returnType) {_			String expected = returnType.toString()__			String message = "returnType=" + expected__			addFilter(message, m -> expected.equals(ResolvableType.forMethodReturnType(m).toString()))__			return this__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type;public,builder,t,returning,resolvable,type,return,type,string,expected,return,type,to,string,string,message,return,type,expected,add,filter,message,m,expected,equals,resolvable,type,for,method,return,type,m,to,string,return,this
ResolvableMethod -> Builder -> public Builder<T> returning(ResolvableType returnType);1517571703;Filter on methods returning the given type._@param returnType the return type;public Builder<T> returning(ResolvableType returnType) {_			String expected = returnType.toString()__			String message = "returnType=" + expected__			addFilter(message, m -> expected.equals(ResolvableType.forMethodReturnType(m).toString()))__			return this__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type;public,builder,t,returning,resolvable,type,return,type,string,expected,return,type,to,string,string,message,return,type,expected,add,filter,message,m,expected,equals,resolvable,type,for,method,return,type,m,to,string,return,this
ResolvableMethod -> Builder -> public Builder<T> returning(ResolvableType returnType);1530190293;Filter on methods returning the given type._@param returnType the return type;public Builder<T> returning(ResolvableType returnType) {_			String expected = returnType.toString()__			String message = "returnType=" + expected__			addFilter(message, m -> expected.equals(ResolvableType.forMethodReturnType(m).toString()))__			return this__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type;public,builder,t,returning,resolvable,type,return,type,string,expected,return,type,to,string,string,message,return,type,expected,add,filter,message,m,expected,equals,resolvable,type,for,method,return,type,m,to,string,return,this
ResolvableMethod -> Builder -> public Builder<T> returning(ResolvableType returnType);1540931761;Filter on methods returning the given type._@param returnType the return type;public Builder<T> returning(ResolvableType returnType) {_			String expected = returnType.toString()__			String message = "returnType=" + expected__			addFilter(message, m -> expected.equals(ResolvableType.forMethodReturnType(m).toString()))__			return this__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type;public,builder,t,returning,resolvable,type,return,type,string,expected,return,type,to,string,string,message,return,type,expected,add,filter,message,m,expected,equals,resolvable,type,for,method,return,type,m,to,string,return,this
ResolvableMethod -> Builder -> public Builder<T> returning(ResolvableType returnType);1541442804;Filter on methods returning the given type._@param returnType the return type;public Builder<T> returning(ResolvableType returnType) {_			String expected = returnType.toString()__			String message = "returnType=" + expected__			addFilter(message, m -> expected.equals(ResolvableType.forMethodReturnType(m).toString()))__			return this__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type;public,builder,t,returning,resolvable,type,return,type,string,expected,return,type,to,string,string,message,return,type,expected,add,filter,message,m,expected,equals,resolvable,type,for,method,return,type,m,to,string,return,this
ResolvableMethod -> Builder -> public Builder<T> returning(ResolvableType returnType);1541455173;Filter on methods returning the given type._@param returnType the return type;public Builder<T> returning(ResolvableType returnType) {_			String expected = returnType.toString()__			String message = "returnType=" + expected__			addFilter(message, m -> expected.equals(ResolvableType.forMethodReturnType(m).toString()))__			return this__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type;public,builder,t,returning,resolvable,type,return,type,string,expected,return,type,to,string,string,message,return,type,expected,add,filter,message,m,expected,equals,resolvable,type,for,method,return,type,m,to,string,return,this
ResolvableMethod -> Builder -> public Builder<T> returning(ResolvableType returnType);1541701761;Filter on methods returning the given type._@param returnType the return type;public Builder<T> returning(ResolvableType returnType) {_			String expected = returnType.toString()__			String message = "returnType=" + expected__			addFilter(message, m -> expected.equals(ResolvableType.forMethodReturnType(m).toString()))__			return this__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type;public,builder,t,returning,resolvable,type,return,type,string,expected,return,type,to,string,string,message,return,type,expected,add,filter,message,m,expected,equals,resolvable,type,for,method,return,type,m,to,string,return,this
ResolvableMethod -> Builder -> public Builder returning(Class<?> returnType);1488597153;Filter on methods returning the given type.;public Builder returning(Class<?> returnType) {_			return returning(ResolvableType.forClass(returnType))__		};filter,on,methods,returning,the,given,type;public,builder,returning,class,return,type,return,returning,resolvable,type,for,class,return,type
ResolvableMethod -> Builder -> public Builder returning(Class<?> returnType);1488602581;Filter on methods returning the given type.;public Builder returning(Class<?> returnType) {_			return returning(ResolvableType.forClass(returnType))__		};filter,on,methods,returning,the,given,type;public,builder,returning,class,return,type,return,returning,resolvable,type,for,class,return,type
ResolvableMethod -> ArgResolver -> public final MethodParameter arg();1488597153;Resolve the argument.;public final MethodParameter arg() {_			List<MethodParameter> matches = applyFilters()__			Assert.state(!matches.isEmpty(), () -> "No matching arg in method\n" + formatMethod())__			Assert.state(matches.size() == 1, () -> "Multiple matching args in method\n" + formatMethod())__			return matches.get(0)__		};resolve,the,argument;public,final,method,parameter,arg,list,method,parameter,matches,apply,filters,assert,state,matches,is,empty,no,matching,arg,in,method,n,format,method,assert,state,matches,size,1,multiple,matching,args,in,method,n,format,method,return,matches,get,0
ResolvableMethod -> ArgResolver -> public final MethodParameter arg();1488602581;Resolve the argument.;public final MethodParameter arg() {_			List<MethodParameter> matches = applyFilters()__			Assert.state(!matches.isEmpty(), () -> "No matching arg in method\n" + formatMethod())__			Assert.state(matches.size() == 1, () -> "Multiple matching args in method\n" + formatMethod())__			return matches.get(0)__		};resolve,the,argument;public,final,method,parameter,arg,list,method,parameter,matches,apply,filters,assert,state,matches,is,empty,no,matching,arg,in,method,n,format,method,assert,state,matches,size,1,multiple,matching,args,in,method,n,format,method,return,matches,get,0
ResolvableMethod -> ArgResolver -> public final MethodParameter arg();1488809997;Resolve the argument.;public final MethodParameter arg() {_			List<MethodParameter> matches = applyFilters()__			Assert.state(!matches.isEmpty(), () -> "No matching arg in method\n" + formatMethod())__			Assert.state(matches.size() == 1, () -> "Multiple matching args in method\n" + formatMethod())__			return matches.get(0)__		};resolve,the,argument;public,final,method,parameter,arg,list,method,parameter,matches,apply,filters,assert,state,matches,is,empty,no,matching,arg,in,method,n,format,method,assert,state,matches,size,1,multiple,matching,args,in,method,n,format,method,return,matches,get,0
ResolvableMethod -> ArgResolver -> public final MethodParameter arg();1488809997;Resolve the argument.;public final MethodParameter arg() {_			List<MethodParameter> matches = applyFilters()__			Assert.state(!matches.isEmpty(), () ->_					"No matching arg in method\n" + formatMethod())__			Assert.state(matches.size() == 1, () ->_					"Multiple matching args in method\n" + formatMethod() + "\nMatches:\n\t" + matches)__			return matches.get(0)__		};resolve,the,argument;public,final,method,parameter,arg,list,method,parameter,matches,apply,filters,assert,state,matches,is,empty,no,matching,arg,in,method,n,format,method,assert,state,matches,size,1,multiple,matching,args,in,method,n,format,method,n,matches,n,t,matches,return,matches,get,0
ResolvableMethod -> ArgResolver -> public final MethodParameter arg();1491599707;Resolve the argument.;public final MethodParameter arg() {_			List<MethodParameter> matches = applyFilters()__			Assert.state(!matches.isEmpty(), () ->_					"No matching arg in method\n" + formatMethod())__			Assert.state(matches.size() == 1, () ->_					"Multiple matching args in method\n" + formatMethod() + "\nMatches:\n\t" + matches)__			return matches.get(0)__		};resolve,the,argument;public,final,method,parameter,arg,list,method,parameter,matches,apply,filters,assert,state,matches,is,empty,no,matching,arg,in,method,n,format,method,assert,state,matches,size,1,multiple,matching,args,in,method,n,format,method,n,matches,n,t,matches,return,matches,get,0
ResolvableMethod -> ArgResolver -> public final MethodParameter arg();1505924929;Resolve the argument.;public final MethodParameter arg() {_			List<MethodParameter> matches = applyFilters()__			Assert.state(!matches.isEmpty(), () ->_					"No matching arg in method\n" + formatMethod())__			Assert.state(matches.size() == 1, () ->_					"Multiple matching args in method\n" + formatMethod() + "\nMatches:\n\t" + matches)__			return matches.get(0)__		};resolve,the,argument;public,final,method,parameter,arg,list,method,parameter,matches,apply,filters,assert,state,matches,is,empty,no,matching,arg,in,method,n,format,method,assert,state,matches,size,1,multiple,matching,args,in,method,n,format,method,n,matches,n,t,matches,return,matches,get,0
ResolvableMethod -> ArgResolver -> public final MethodParameter arg();1517571703;Resolve the argument.;public final MethodParameter arg() {_			List<MethodParameter> matches = applyFilters()__			Assert.state(!matches.isEmpty(), () ->_					"No matching arg in method\n" + formatMethod())__			Assert.state(matches.size() == 1, () ->_					"Multiple matching args in method\n" + formatMethod() + "\nMatches:\n\t" + matches)__			return matches.get(0)__		};resolve,the,argument;public,final,method,parameter,arg,list,method,parameter,matches,apply,filters,assert,state,matches,is,empty,no,matching,arg,in,method,n,format,method,assert,state,matches,size,1,multiple,matching,args,in,method,n,format,method,n,matches,n,t,matches,return,matches,get,0
ResolvableMethod -> ArgResolver -> public final MethodParameter arg();1530190293;Resolve the argument.;public final MethodParameter arg() {_			List<MethodParameter> matches = applyFilters()__			Assert.state(!matches.isEmpty(), () ->_					"No matching arg in method\n" + formatMethod())__			Assert.state(matches.size() == 1, () ->_					"Multiple matching args in method\n" + formatMethod() + "\nMatches:\n\t" + matches)__			return matches.get(0)__		};resolve,the,argument;public,final,method,parameter,arg,list,method,parameter,matches,apply,filters,assert,state,matches,is,empty,no,matching,arg,in,method,n,format,method,assert,state,matches,size,1,multiple,matching,args,in,method,n,format,method,n,matches,n,t,matches,return,matches,get,0
ResolvableMethod -> ArgResolver -> public final MethodParameter arg();1540931761;Resolve the argument.;public final MethodParameter arg() {_			List<MethodParameter> matches = applyFilters()__			Assert.state(!matches.isEmpty(), () ->_					"No matching arg in method\n" + formatMethod())__			Assert.state(matches.size() == 1, () ->_					"Multiple matching args in method\n" + formatMethod() + "\nMatches:\n\t" + matches)__			return matches.get(0)__		};resolve,the,argument;public,final,method,parameter,arg,list,method,parameter,matches,apply,filters,assert,state,matches,is,empty,no,matching,arg,in,method,n,format,method,assert,state,matches,size,1,multiple,matching,args,in,method,n,format,method,n,matches,n,t,matches,return,matches,get,0
ResolvableMethod -> ArgResolver -> public final MethodParameter arg();1541442804;Resolve the argument.;public final MethodParameter arg() {_			List<MethodParameter> matches = applyFilters()__			Assert.state(!matches.isEmpty(), () ->_					"No matching arg in method\n" + formatMethod())__			Assert.state(matches.size() == 1, () ->_					"Multiple matching args in method\n" + formatMethod() + "\nMatches:\n\t" + matches)__			return matches.get(0)__		};resolve,the,argument;public,final,method,parameter,arg,list,method,parameter,matches,apply,filters,assert,state,matches,is,empty,no,matching,arg,in,method,n,format,method,assert,state,matches,size,1,multiple,matching,args,in,method,n,format,method,n,matches,n,t,matches,return,matches,get,0
ResolvableMethod -> ArgResolver -> public final MethodParameter arg();1541455173;Resolve the argument.;public final MethodParameter arg() {_			List<MethodParameter> matches = applyFilters()__			Assert.state(!matches.isEmpty(), () ->_					"No matching arg in method\n" + formatMethod())__			Assert.state(matches.size() == 1, () ->_					"Multiple matching args in method\n" + formatMethod() + "\nMatches:\n\t" + matches)__			return matches.get(0)__		};resolve,the,argument;public,final,method,parameter,arg,list,method,parameter,matches,apply,filters,assert,state,matches,is,empty,no,matching,arg,in,method,n,format,method,assert,state,matches,size,1,multiple,matching,args,in,method,n,format,method,n,matches,n,t,matches,return,matches,get,0
ResolvableMethod -> ArgResolver -> public final MethodParameter arg();1541701761;Resolve the argument.;public final MethodParameter arg() {_			List<MethodParameter> matches = applyFilters()__			Assert.state(!matches.isEmpty(), () ->_					"No matching arg in method\n" + formatMethod())__			Assert.state(matches.size() == 1, () ->_					"Multiple matching args in method\n" + formatMethod() + "\nMatches:\n\t" + matches)__			return matches.get(0)__		};resolve,the,argument;public,final,method,parameter,arg,list,method,parameter,matches,apply,filters,assert,state,matches,is,empty,no,matching,arg,in,method,n,format,method,assert,state,matches,size,1,multiple,matching,args,in,method,n,format,method,n,matches,n,t,matches,return,matches,get,0
ResolvableMethod -> @SafeVarargs 	public final <A extends Annotation> ArgResolver annotated(Class<A> annotationType, Predicate<A>... filter);1488597153;Filter on method arguments that have the given annotation._@param annotationType the annotation type_@param filter optional filters on the annotation;@SafeVarargs_	public final <A extends Annotation> ArgResolver annotated(Class<A> annotationType, Predicate<A>... filter) {_		return new ArgResolver().annotated(annotationType, filter)__	};filter,on,method,arguments,that,have,the,given,annotation,param,annotation,type,the,annotation,type,param,filter,optional,filters,on,the,annotation;safe,varargs,public,final,a,extends,annotation,arg,resolver,annotated,class,a,annotation,type,predicate,a,filter,return,new,arg,resolver,annotated,annotation,type,filter
ResolvableMethod -> @SafeVarargs 	public final <A extends Annotation> ArgResolver annotated(Class<A> annotationType, Predicate<A>... filter);1488602581;Filter on method arguments that have the given annotation._@param annotationType the annotation type_@param filter optional filters on the annotation;@SafeVarargs_	public final <A extends Annotation> ArgResolver annotated(Class<A> annotationType, Predicate<A>... filter) {_		return new ArgResolver().annotated(annotationType, filter)__	};filter,on,method,arguments,that,have,the,given,annotation,param,annotation,type,the,annotation,type,param,filter,optional,filters,on,the,annotation;safe,varargs,public,final,a,extends,annotation,arg,resolver,annotated,class,a,annotation,type,predicate,a,filter,return,new,arg,resolver,annotated,annotation,type,filter
ResolvableMethod -> @SafeVarargs 	public final <A extends Annotation> ArgResolver annotated(Class<A> annotationType, Predicate<A>... filter);1488809997;Filter on method arguments that have the given annotation._@param annotationType the annotation type_@param filter optional filters on the annotation;@SafeVarargs_	public final <A extends Annotation> ArgResolver annotated(Class<A> annotationType, Predicate<A>... filter) {_		return new ArgResolver().annotated(annotationType, filter)__	};filter,on,method,arguments,that,have,the,given,annotation,param,annotation,type,the,annotation,type,param,filter,optional,filters,on,the,annotation;safe,varargs,public,final,a,extends,annotation,arg,resolver,annotated,class,a,annotation,type,predicate,a,filter,return,new,arg,resolver,annotated,annotation,type,filter
ResolvableMethod -> public MethodParameter arg(Class<?> type, Class<?>... generics);1488809997;Find a unique argument matching the given type._@param type the expected type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, Class<?>... generics) {_		return new ArgResolver().arg(type, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,class,generics,return,new,arg,resolver,arg,type,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, Class<?>... generics);1488809997;Find a unique argument matching the given type._@param type the expected type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, Class<?>... generics) {_		return new ArgResolver().arg(type, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,class,generics,return,new,arg,resolver,arg,type,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, Class<?>... generics);1491599707;Find a unique argument matching the given type._@param type the expected type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, Class<?>... generics) {_		return new ArgResolver().arg(type, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,class,generics,return,new,arg,resolver,arg,type,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, Class<?>... generics);1505924929;Find a unique argument matching the given type._@param type the expected type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, Class<?>... generics) {_		return new ArgResolver().arg(type, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,class,generics,return,new,arg,resolver,arg,type,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, Class<?>... generics);1517571703;Find a unique argument matching the given type._@param type the expected type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, Class<?>... generics) {_		return new ArgResolver().arg(type, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,class,generics,return,new,arg,resolver,arg,type,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, Class<?>... generics);1530190293;Find a unique argument matching the given type._@param type the expected type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, Class<?>... generics) {_		return new ArgResolver().arg(type, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,class,generics,return,new,arg,resolver,arg,type,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, Class<?>... generics);1540931761;Find a unique argument matching the given type._@param type the expected type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, Class<?>... generics) {_		return new ArgResolver().arg(type, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,class,generics,return,new,arg,resolver,arg,type,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, Class<?>... generics);1541442804;Find a unique argument matching the given type._@param type the expected type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, Class<?>... generics) {_		return new ArgResolver().arg(type, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,class,generics,return,new,arg,resolver,arg,type,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, Class<?>... generics);1541455173;Find a unique argument matching the given type._@param type the expected type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, Class<?>... generics) {_		return new ArgResolver().arg(type, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,class,generics,return,new,arg,resolver,arg,type,generics
ResolvableMethod -> public MethodParameter arg(Class<?> type, Class<?>... generics);1541701761;Find a unique argument matching the given type._@param type the expected type_@param generics optional array of generic types;public MethodParameter arg(Class<?> type, Class<?>... generics) {_		return new ArgResolver().arg(type, generics)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type,param,generics,optional,array,of,generic,types;public,method,parameter,arg,class,type,class,generics,return,new,arg,resolver,arg,type,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, Class<?>... generics);1488809997;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, Class<?>... generics) {_			return arg(toResolvableType(type, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,class,generics,return,arg,to,resolvable,type,type,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, Class<?>... generics);1488809997;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, Class<?>... generics) {_			return arg(toResolvableType(type, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,class,generics,return,arg,to,resolvable,type,type,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, Class<?>... generics);1491599707;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, Class<?>... generics) {_			return arg(toResolvableType(type, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,class,generics,return,arg,to,resolvable,type,type,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, Class<?>... generics);1505924929;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, Class<?>... generics) {_			return arg(toResolvableType(type, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,class,generics,return,arg,to,resolvable,type,type,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, Class<?>... generics);1517571703;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, Class<?>... generics) {_			return arg(toResolvableType(type, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,class,generics,return,arg,to,resolvable,type,type,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, Class<?>... generics);1530190293;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, Class<?>... generics) {_			return arg(toResolvableType(type, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,class,generics,return,arg,to,resolvable,type,type,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, Class<?>... generics);1540931761;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, Class<?>... generics) {_			return arg(toResolvableType(type, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,class,generics,return,arg,to,resolvable,type,type,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, Class<?>... generics);1541442804;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, Class<?>... generics) {_			return arg(toResolvableType(type, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,class,generics,return,arg,to,resolvable,type,type,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, Class<?>... generics);1541455173;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, Class<?>... generics) {_			return arg(toResolvableType(type, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,class,generics,return,arg,to,resolvable,type,type,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, Class<?>... generics);1541701761;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, Class<?>... generics) {_			return arg(toResolvableType(type, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,class,generics,return,arg,to,resolvable,type,type,generics
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic, 				ResolvableType... generics);1488809997;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic,_				ResolvableType... generics) {__			return returning(returnType, generic, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,method,parameter,resolve,return,type,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,return,type,generic,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic, 				ResolvableType... generics);1488809997;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic,_				ResolvableType... generics) {__			return returning(returnType, generic, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,method,parameter,resolve,return,type,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,return,type,generic,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic, 				ResolvableType... generics);1491599707;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic,_				ResolvableType... generics) {__			return returning(returnType, generic, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,method,parameter,resolve,return,type,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,return,type,generic,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic, 				ResolvableType... generics);1505924929;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic,_				ResolvableType... generics) {__			return returning(returnType, generic, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,method,parameter,resolve,return,type,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,return,type,generic,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic, 				ResolvableType... generics);1517571703;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic,_				ResolvableType... generics) {__			return returning(returnType, generic, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,method,parameter,resolve,return,type,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,return,type,generic,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic, 				ResolvableType... generics);1530190293;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic,_				ResolvableType... generics) {__			return returning(returnType, generic, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,method,parameter,resolve,return,type,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,return,type,generic,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic, 				ResolvableType... generics);1540931761;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic,_				ResolvableType... generics) {__			return returning(returnType, generic, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,method,parameter,resolve,return,type,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,return,type,generic,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic, 				ResolvableType... generics);1541442804;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic,_				ResolvableType... generics) {__			return returning(returnType, generic, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,method,parameter,resolve,return,type,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,return,type,generic,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic, 				ResolvableType... generics);1541455173;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic,_				ResolvableType... generics) {__			return returning(returnType, generic, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,method,parameter,resolve,return,type,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,return,type,generic,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic, 				ResolvableType... generics);1541701761;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public MethodParameter resolveReturnType(Class<?> returnType, ResolvableType generic,_				ResolvableType... generics) {__			return returning(returnType, generic, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,method,parameter,resolve,return,type,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,return,type,generic,generics,build,return,type
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annot(Predicate<MethodParameter>... filter);1488809997;Filter on method arguments with annotation._See {@link MvcAnnotationPredicates}.;@SafeVarargs_	public final ArgResolver annot(Predicate<MethodParameter>... filter) {_		return new ArgResolver(filter)__	};filter,on,method,arguments,with,annotation,see,link,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filter,return,new,arg,resolver,filter
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annot(Predicate<MethodParameter>... filter);1491599707;Filter on method arguments with annotation._See {@link MvcAnnotationPredicates}.;@SafeVarargs_	public final ArgResolver annot(Predicate<MethodParameter>... filter) {_		return new ArgResolver(filter)__	};filter,on,method,arguments,with,annotation,see,link,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filter,return,new,arg,resolver,filter
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annot(Predicate<MethodParameter>... filter);1505924929;Filter on method arguments with annotation._See {@link MvcAnnotationPredicates}.;@SafeVarargs_	public final ArgResolver annot(Predicate<MethodParameter>... filter) {_		return new ArgResolver(filter)__	};filter,on,method,arguments,with,annotation,see,link,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filter,return,new,arg,resolver,filter
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annot(Predicate<MethodParameter>... filter);1517571703;Filter on method arguments with annotation._See {@link MvcAnnotationPredicates}.;@SafeVarargs_	public final ArgResolver annot(Predicate<MethodParameter>... filter) {_		return new ArgResolver(filter)__	};filter,on,method,arguments,with,annotation,see,link,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filter,return,new,arg,resolver,filter
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annot(Predicate<MethodParameter>... filter);1530190293;Filter on method arguments with annotation._See {@link MvcAnnotationPredicates}.;@SafeVarargs_	public final ArgResolver annot(Predicate<MethodParameter>... filter) {_		return new ArgResolver(filter)__	};filter,on,method,arguments,with,annotation,see,link,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filter,return,new,arg,resolver,filter
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annot(Predicate<MethodParameter>... filter);1540931761;Filter on method arguments with annotation._See {@link MvcAnnotationPredicates}.;@SafeVarargs_	public final ArgResolver annot(Predicate<MethodParameter>... filter) {_		return new ArgResolver(filter)__	};filter,on,method,arguments,with,annotation,see,link,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filter,return,new,arg,resolver,filter
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annot(Predicate<MethodParameter>... filter);1541442804;Filter on method arguments with annotation._See {@link MvcAnnotationPredicates}.;@SafeVarargs_	public final ArgResolver annot(Predicate<MethodParameter>... filter) {_		return new ArgResolver(filter)__	};filter,on,method,arguments,with,annotation,see,link,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filter,return,new,arg,resolver,filter
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annot(Predicate<MethodParameter>... filter);1541455173;Filter on method arguments with annotation._See {@link MvcAnnotationPredicates}.;@SafeVarargs_	public final ArgResolver annot(Predicate<MethodParameter>... filter) {_		return new ArgResolver(filter)__	};filter,on,method,arguments,with,annotation,see,link,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filter,return,new,arg,resolver,filter
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annot(Predicate<MethodParameter>... filter);1541701761;Filter on method arguments with annotation._See {@link org.springframework.web.method.MvcAnnotationPredicates}.;@SafeVarargs_	public final ArgResolver annot(Predicate<MethodParameter>... filter) {_		return new ArgResolver(filter)__	};filter,on,method,arguments,with,annotation,see,link,org,springframework,web,method,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,predicate,method,parameter,filter,return,new,arg,resolver,filter
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type);1488597153;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type) {_			this.filters.add(p -> type.equals(p.getParameterType()))__			return arg(ResolvableType.forClass(type))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,this,filters,add,p,type,equals,p,get,parameter,type,return,arg,resolvable,type,for,class,type
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type);1488602581;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type) {_			this.filters.add(p -> type.equals(p.getParameterType()))__			return arg(ResolvableType.forClass(type))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,this,filters,add,p,type,equals,p,get,parameter,type,return,arg,resolvable,type,for,class,type
ResolvableMethod -> Builder -> public Builder returning(Class<?> returnType, Class<?>... generics);1488809997;Filter on methods returning the given type._@param returnType the return type_@param generics optional array of generic types;public Builder returning(Class<?> returnType, Class<?>... generics) {_			return returning(toResolvableType(returnType, generics))__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,builder,returning,class,return,type,class,generics,return,returning,to,resolvable,type,return,type,generics
ResolvableMethod -> Builder -> public Builder returning(Class<?> returnType, Class<?>... generics);1488809997;Filter on methods returning the given type._@param returnType the return type_@param generics optional array of generic types;public Builder returning(Class<?> returnType, Class<?>... generics) {_			return returning(toResolvableType(returnType, generics))__		};filter,on,methods,returning,the,given,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,builder,returning,class,return,type,class,generics,return,returning,to,resolvable,type,return,type,generics
ResolvableMethod -> Builder -> @SafeVarargs 		public final <A extends Annotation> Builder annotated(Class<A> annotationType, Predicate<A>... filter);1488597153;Filter on methods with the given annotation type._@param annotationType the expected annotation type_@param filter optional filters on the actual annotation;@SafeVarargs_		public final <A extends Annotation> Builder annotated(Class<A> annotationType, Predicate<A>... filter) {_			String message = "annotated=" + annotationType.getName()__			addFilter(message, m -> {_				A annot = AnnotatedElementUtils.findMergedAnnotation(m, annotationType)__				return (annot != null && Arrays.stream(filter).allMatch(f -> f.test(annot)))__			})__			return this__		};filter,on,methods,with,the,given,annotation,type,param,annotation,type,the,expected,annotation,type,param,filter,optional,filters,on,the,actual,annotation;safe,varargs,public,final,a,extends,annotation,builder,annotated,class,a,annotation,type,predicate,a,filter,string,message,annotated,annotation,type,get,name,add,filter,message,m,a,annot,annotated,element,utils,find,merged,annotation,m,annotation,type,return,annot,null,arrays,stream,filter,all,match,f,f,test,annot,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final <A extends Annotation> Builder annotated(Class<A> annotationType, Predicate<A>... filter);1488602581;Filter on methods with the given annotation type._@param annotationType the expected annotation type_@param filter optional filters on the actual annotation;@SafeVarargs_		public final <A extends Annotation> Builder annotated(Class<A> annotationType, Predicate<A>... filter) {_			String message = "annotated=" + annotationType.getName()__			addFilter(message, m -> {_				A annot = AnnotatedElementUtils.findMergedAnnotation(m, annotationType)__				return (annot != null && Arrays.stream(filter).allMatch(f -> f.test(annot)))__			})__			return this__		};filter,on,methods,with,the,given,annotation,type,param,annotation,type,the,expected,annotation,type,param,filter,optional,filters,on,the,actual,annotation;safe,varargs,public,final,a,extends,annotation,builder,annotated,class,a,annotation,type,predicate,a,filter,string,message,annotated,annotation,type,get,name,add,filter,message,m,a,annot,annotated,element,utils,find,merged,annotation,m,annotation,type,return,annot,null,arrays,stream,filter,all,match,f,f,test,annot,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final <A extends Annotation> Builder annotated(Class<A> annotationType, Predicate<A>... filter);1488809997;Filter on methods with the given annotation type._@param annotationType the expected annotation type_@param filter optional filters on the actual annotation;@SafeVarargs_		public final <A extends Annotation> Builder annotated(Class<A> annotationType, Predicate<A>... filter) {_			String message = "annotated=" + annotationType.getName()__			addFilter(message, m -> {_				A annot = AnnotatedElementUtils.findMergedAnnotation(m, annotationType)__				return (annot != null && Arrays.stream(filter).allMatch(f -> f.test(annot)))__			})__			return this__		};filter,on,methods,with,the,given,annotation,type,param,annotation,type,the,expected,annotation,type,param,filter,optional,filters,on,the,actual,annotation;safe,varargs,public,final,a,extends,annotation,builder,annotated,class,a,annotation,type,predicate,a,filter,string,message,annotated,annotation,type,get,name,add,filter,message,m,a,annot,annotated,element,utils,find,merged,annotation,m,annotation,type,return,annot,null,arrays,stream,filter,all,match,f,f,test,annot,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder filtered(Predicate<Method>... filters);1488597153;Add custom filters for matching methods.;@SafeVarargs_		public final Builder filtered(Predicate<Method>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};add,custom,filters,for,matching,methods;safe,varargs,public,final,builder,filtered,predicate,method,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder filtered(Predicate<Method>... filters);1488602581;Add custom filters for matching methods.;@SafeVarargs_		public final Builder filtered(Predicate<Method>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};add,custom,filters,for,matching,methods;safe,varargs,public,final,builder,filtered,predicate,method,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> Builder -> @SafeVarargs 		public final Builder filtered(Predicate<Method>... filters);1488809997;Add custom filters for matching methods.;@SafeVarargs_		public final Builder filtered(Predicate<Method>... filters) {_			this.filters.addAll(Arrays.asList(filters))__			return this__		};add,custom,filters,for,matching,methods;safe,varargs,public,final,builder,filtered,predicate,method,filters,this,filters,add,all,arrays,as,list,filters,return,this
ResolvableMethod -> public MethodParameter arg(ResolvableType type);1488597153;Find a unique argument matching the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_		return new ArgResolver().arg(type)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,return,new,arg,resolver,arg,type
ResolvableMethod -> public MethodParameter arg(ResolvableType type);1488602581;Find a unique argument matching the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_		return new ArgResolver().arg(type)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,return,new,arg,resolver,arg,type
ResolvableMethod -> public MethodParameter arg(ResolvableType type);1488809997;Find a unique argument matching the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_		return new ArgResolver().arg(type)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,return,new,arg,resolver,arg,type
ResolvableMethod -> public MethodParameter arg(ResolvableType type);1488809997;Find a unique argument matching the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_		return new ArgResolver().arg(type)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,return,new,arg,resolver,arg,type
ResolvableMethod -> public MethodParameter arg(ResolvableType type);1491599707;Find a unique argument matching the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_		return new ArgResolver().arg(type)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,return,new,arg,resolver,arg,type
ResolvableMethod -> public MethodParameter arg(ResolvableType type);1505924929;Find a unique argument matching the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_		return new ArgResolver().arg(type)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,return,new,arg,resolver,arg,type
ResolvableMethod -> public MethodParameter arg(ResolvableType type);1517571703;Find a unique argument matching the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_		return new ArgResolver().arg(type)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,return,new,arg,resolver,arg,type
ResolvableMethod -> public MethodParameter arg(ResolvableType type);1530190293;Find a unique argument matching the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_		return new ArgResolver().arg(type)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,return,new,arg,resolver,arg,type
ResolvableMethod -> public MethodParameter arg(ResolvableType type);1540931761;Find a unique argument matching the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_		return new ArgResolver().arg(type)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,return,new,arg,resolver,arg,type
ResolvableMethod -> public MethodParameter arg(ResolvableType type);1541442804;Find a unique argument matching the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_		return new ArgResolver().arg(type)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,return,new,arg,resolver,arg,type
ResolvableMethod -> public MethodParameter arg(ResolvableType type);1541455173;Find a unique argument matching the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_		return new ArgResolver().arg(type)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,return,new,arg,resolver,arg,type
ResolvableMethod -> public MethodParameter arg(ResolvableType type);1541701761;Find a unique argument matching the given type._@param type the expected type;public MethodParameter arg(ResolvableType type) {_		return new ArgResolver().arg(type)__	};find,a,unique,argument,matching,the,given,type,param,type,the,expected,type;public,method,parameter,arg,resolvable,type,type,return,new,arg,resolver,arg,type
ResolvableMethod -> Builder -> public Builder<T> named(String methodName);1491599707;Filter on methods with the given name.;public Builder<T> named(String methodName) {_			addFilter("methodName=" + methodName, m -> m.getName().equals(methodName))__			return this__		};filter,on,methods,with,the,given,name;public,builder,t,named,string,method,name,add,filter,method,name,method,name,m,m,get,name,equals,method,name,return,this
ResolvableMethod -> Builder -> public Builder<T> named(String methodName);1505924929;Filter on methods with the given name.;public Builder<T> named(String methodName) {_			addFilter("methodName=" + methodName, m -> m.getName().equals(methodName))__			return this__		};filter,on,methods,with,the,given,name;public,builder,t,named,string,method,name,add,filter,method,name,method,name,m,m,get,name,equals,method,name,return,this
ResolvableMethod -> Builder -> public Builder<T> named(String methodName);1517571703;Filter on methods with the given name.;public Builder<T> named(String methodName) {_			addFilter("methodName=" + methodName, m -> m.getName().equals(methodName))__			return this__		};filter,on,methods,with,the,given,name;public,builder,t,named,string,method,name,add,filter,method,name,method,name,m,m,get,name,equals,method,name,return,this
ResolvableMethod -> Builder -> public Builder<T> named(String methodName);1530190293;Filter on methods with the given name.;public Builder<T> named(String methodName) {_			addFilter("methodName=" + methodName, m -> m.getName().equals(methodName))__			return this__		};filter,on,methods,with,the,given,name;public,builder,t,named,string,method,name,add,filter,method,name,method,name,m,m,get,name,equals,method,name,return,this
ResolvableMethod -> Builder -> public Builder<T> named(String methodName);1540931761;Filter on methods with the given name.;public Builder<T> named(String methodName) {_			addFilter("methodName=" + methodName, m -> m.getName().equals(methodName))__			return this__		};filter,on,methods,with,the,given,name;public,builder,t,named,string,method,name,add,filter,method,name,method,name,m,m,get,name,equals,method,name,return,this
ResolvableMethod -> Builder -> public Builder<T> named(String methodName);1541442804;Filter on methods with the given name.;public Builder<T> named(String methodName) {_			addFilter("methodName=" + methodName, m -> m.getName().equals(methodName))__			return this__		};filter,on,methods,with,the,given,name;public,builder,t,named,string,method,name,add,filter,method,name,method,name,m,m,get,name,equals,method,name,return,this
ResolvableMethod -> Builder -> public Builder<T> named(String methodName);1541455173;Filter on methods with the given name.;public Builder<T> named(String methodName) {_			addFilter("methodName=" + methodName, method -> method.getName().equals(methodName))__			return this__		};filter,on,methods,with,the,given,name;public,builder,t,named,string,method,name,add,filter,method,name,method,name,method,method,get,name,equals,method,name,return,this
ResolvableMethod -> Builder -> public Builder<T> named(String methodName);1541701761;Filter on methods with the given name.;public Builder<T> named(String methodName) {_			addFilter("methodName=" + methodName, method -> method.getName().equals(methodName))__			return this__		};filter,on,methods,with,the,given,name;public,builder,t,named,string,method,name,add,filter,method,name,method,name,method,method,get,name,equals,method,name,return,this
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics);1488809997;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generics optional array of generic types;public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics) {_			return returning(returnType, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,method,parameter,resolve,return,type,class,return,type,class,generics,return,returning,return,type,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics);1488809997;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generics optional array of generic types;public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics) {_			return returning(returnType, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,method,parameter,resolve,return,type,class,return,type,class,generics,return,returning,return,type,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics);1491599707;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generics optional array of generic types;public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics) {_			return returning(returnType, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,method,parameter,resolve,return,type,class,return,type,class,generics,return,returning,return,type,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics);1505924929;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generics optional array of generic types;public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics) {_			return returning(returnType, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,method,parameter,resolve,return,type,class,return,type,class,generics,return,returning,return,type,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics);1517571703;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generics optional array of generic types;public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics) {_			return returning(returnType, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,method,parameter,resolve,return,type,class,return,type,class,generics,return,returning,return,type,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics);1530190293;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generics optional array of generic types;public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics) {_			return returning(returnType, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,method,parameter,resolve,return,type,class,return,type,class,generics,return,returning,return,type,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics);1540931761;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generics optional array of generic types;public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics) {_			return returning(returnType, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,method,parameter,resolve,return,type,class,return,type,class,generics,return,returning,return,type,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics);1541442804;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generics optional array of generic types;public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics) {_			return returning(returnType, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,method,parameter,resolve,return,type,class,return,type,class,generics,return,returning,return,type,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics);1541455173;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generics optional array of generic types;public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics) {_			return returning(returnType, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,method,parameter,resolve,return,type,class,return,type,class,generics,return,returning,return,type,generics,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics);1541701761;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()}_@param returnType the return type_@param generics optional array of generic types;public MethodParameter resolveReturnType(Class<?> returnType, Class<?>... generics) {_			return returning(returnType, generics).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type,param,return,type,the,return,type,param,generics,optional,array,of,generic,types;public,method,parameter,resolve,return,type,class,return,type,class,generics,return,returning,return,type,generics,build,return,type
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1488809997;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_			return arg(toResolvableType(type, generic, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,arg,to,resolvable,type,type,generic,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1488809997;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_			return arg(toResolvableType(type, generic, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,arg,to,resolvable,type,type,generic,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1491599707;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_			return arg(toResolvableType(type, generic, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,arg,to,resolvable,type,type,generic,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1505924929;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_			return arg(toResolvableType(type, generic, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,arg,to,resolvable,type,type,generic,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1517571703;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_			return arg(toResolvableType(type, generic, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,arg,to,resolvable,type,type,generic,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1530190293;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_			return arg(toResolvableType(type, generic, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,arg,to,resolvable,type,type,generic,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1540931761;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_			return arg(toResolvableType(type, generic, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,arg,to,resolvable,type,type,generic,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1541442804;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_			return arg(toResolvableType(type, generic, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,arg,to,resolvable,type,type,generic,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1541455173;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_			return arg(toResolvableType(type, generic, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,arg,to,resolvable,type,type,generic,generics
ResolvableMethod -> ArgResolver -> public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics);1541701761;Resolve the argument also matching to the given type._@param type the expected type;public MethodParameter arg(Class<?> type, ResolvableType generic, ResolvableType... generics) {_			return arg(toResolvableType(type, generic, generics))__		};resolve,the,argument,also,matching,to,the,given,type,param,type,the,expected,type;public,method,parameter,arg,class,type,resolvable,type,generic,resolvable,type,generics,return,arg,to,resolvable,type,type,generic,generics
ResolvableMethod -> Builder -> public Builder returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics);1488809997;Filter on methods returning the given type with generics._@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public Builder returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics) {_			return returning(toResolvableType(returnType, generic, generics))__		};filter,on,methods,returning,the,given,type,with,generics,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,builder,returning,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,to,resolvable,type,return,type,generic,generics
ResolvableMethod -> Builder -> public Builder returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics);1488809997;Filter on methods returning the given type with generics._@param returnType the return type_@param generic at least one generic type_@param generics optional extra generic types;public Builder returning(Class<?> returnType, ResolvableType generic, ResolvableType... generics) {_			return returning(toResolvableType(returnType, generic, generics))__		};filter,on,methods,returning,the,given,type,with,generics,param,return,type,the,return,type,param,generic,at,least,one,generic,type,param,generics,optional,extra,generic,types;public,builder,returning,class,return,type,resolvable,type,generic,resolvable,type,generics,return,returning,to,resolvable,type,return,type,generic,generics
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1488809997;Filter on method arguments that don't have the given annotation type(s)._@param annotationTypes the annotation types;@SafeVarargs_	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_		return new ArgResolver().annotNotPresent(annotationTypes)__	};filter,on,method,arguments,that,don,t,have,the,given,annotation,type,s,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,return,new,arg,resolver,annot,not,present,annotation,types
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1491599707;Filter on method arguments that don't have the given annotation type(s)._@param annotationTypes the annotation types;@SafeVarargs_	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_		return new ArgResolver().annotNotPresent(annotationTypes)__	};filter,on,method,arguments,that,don,t,have,the,given,annotation,type,s,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,return,new,arg,resolver,annot,not,present,annotation,types
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1505924929;Filter on method arguments that don't have the given annotation type(s)._@param annotationTypes the annotation types;@SafeVarargs_	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_		return new ArgResolver().annotNotPresent(annotationTypes)__	};filter,on,method,arguments,that,don,t,have,the,given,annotation,type,s,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,return,new,arg,resolver,annot,not,present,annotation,types
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1517571703;Filter on method arguments that don't have the given annotation type(s)._@param annotationTypes the annotation types;@SafeVarargs_	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_		return new ArgResolver().annotNotPresent(annotationTypes)__	};filter,on,method,arguments,that,don,t,have,the,given,annotation,type,s,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,return,new,arg,resolver,annot,not,present,annotation,types
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1530190293;Filter on method arguments that don't have the given annotation type(s)._@param annotationTypes the annotation types;@SafeVarargs_	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_		return new ArgResolver().annotNotPresent(annotationTypes)__	};filter,on,method,arguments,that,don,t,have,the,given,annotation,type,s,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,return,new,arg,resolver,annot,not,present,annotation,types
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1540931761;Filter on method arguments that don't have the given annotation type(s)._@param annotationTypes the annotation types;@SafeVarargs_	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_		return new ArgResolver().annotNotPresent(annotationTypes)__	};filter,on,method,arguments,that,don,t,have,the,given,annotation,type,s,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,return,new,arg,resolver,annot,not,present,annotation,types
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1541442804;Filter on method arguments that don't have the given annotation type(s)._@param annotationTypes the annotation types;@SafeVarargs_	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_		return new ArgResolver().annotNotPresent(annotationTypes)__	};filter,on,method,arguments,that,don,t,have,the,given,annotation,type,s,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,return,new,arg,resolver,annot,not,present,annotation,types
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1541455173;Filter on method arguments that don't have the given annotation type(s)._@param annotationTypes the annotation types;@SafeVarargs_	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_		return new ArgResolver().annotNotPresent(annotationTypes)__	};filter,on,method,arguments,that,don,t,have,the,given,annotation,type,s,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,return,new,arg,resolver,annot,not,present,annotation,types
ResolvableMethod -> @SafeVarargs 	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes);1541701761;Filter on method arguments that don't have the given annotation type(s)._@param annotationTypes the annotation types;@SafeVarargs_	public final ArgResolver annotNotPresent(Class<? extends Annotation>... annotationTypes) {_		return new ArgResolver().annotNotPresent(annotationTypes)__	};filter,on,method,arguments,that,don,t,have,the,given,annotation,type,s,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,annot,not,present,class,extends,annotation,annotation,types,return,new,arg,resolver,annot,not,present,annotation,types
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver notAnnotated(Class<? extends Annotation>... annotationTypes);1488597153;Filter on method arguments that don't have the given annotations._@param annotationTypes the annotation types;@SafeVarargs_		public final ArgResolver notAnnotated(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(p -> Arrays.stream(annotationTypes).noneMatch(p::hasParameterAnnotation))__			return this__		};filter,on,method,arguments,that,don,t,have,the,given,annotations,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,not,annotated,class,extends,annotation,annotation,types,this,filters,add,p,arrays,stream,annotation,types,none,match,p,has,parameter,annotation,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver notAnnotated(Class<? extends Annotation>... annotationTypes);1488602581;Filter on method arguments that don't have the given annotations._@param annotationTypes the annotation types;@SafeVarargs_		public final ArgResolver notAnnotated(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param ->_					(annotationTypes.length != 0) ?_							Arrays.stream(annotationTypes).noneMatch(param::hasParameterAnnotation) :_							param.getParameterAnnotations().length == 0)__			return this__		};filter,on,method,arguments,that,don,t,have,the,given,annotations,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,not,annotated,class,extends,annotation,annotation,types,this,filters,add,param,annotation,types,length,0,arrays,stream,annotation,types,none,match,param,has,parameter,annotation,param,get,parameter,annotations,length,0,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver notAnnotated(Class<? extends Annotation>... annotationTypes);1488809997;Filter on method arguments that don't have the given annotations._@param annotationTypes the annotation types;@SafeVarargs_		public final ArgResolver notAnnotated(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param ->_					(annotationTypes.length != 0) ?_							Arrays.stream(annotationTypes).noneMatch(param::hasParameterAnnotation) :_							param.getParameterAnnotations().length == 0)__			return this__		};filter,on,method,arguments,that,don,t,have,the,given,annotations,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,not,annotated,class,extends,annotation,annotation,types,this,filters,add,param,annotation,types,length,0,arrays,stream,annotation,types,none,match,param,has,parameter,annotation,param,get,parameter,annotations,length,0,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes);1488809997;Filter on method arguments that have the given annotations._@param annotationTypes the annotation types_@see #annot(Predicate[])_@see MvcAnnotationPredicates;@SafeVarargs_		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param -> Arrays.stream(annotationTypes).allMatch(param::hasParameterAnnotation))__			return this__		};filter,on,method,arguments,that,have,the,given,annotations,param,annotation,types,the,annotation,types,see,annot,predicate,see,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,present,class,extends,annotation,annotation,types,this,filters,add,param,arrays,stream,annotation,types,all,match,param,has,parameter,annotation,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes);1491599707;Filter on method arguments that have the given annotations._@param annotationTypes the annotation types_@see #annot(Predicate[])_@see MvcAnnotationPredicates;@SafeVarargs_		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param -> Arrays.stream(annotationTypes).allMatch(param::hasParameterAnnotation))__			return this__		};filter,on,method,arguments,that,have,the,given,annotations,param,annotation,types,the,annotation,types,see,annot,predicate,see,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,present,class,extends,annotation,annotation,types,this,filters,add,param,arrays,stream,annotation,types,all,match,param,has,parameter,annotation,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes);1505924929;Filter on method arguments that have the given annotations._@param annotationTypes the annotation types_@see #annot(Predicate[])_@see MvcAnnotationPredicates;@SafeVarargs_		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param -> Arrays.stream(annotationTypes).allMatch(param::hasParameterAnnotation))__			return this__		};filter,on,method,arguments,that,have,the,given,annotations,param,annotation,types,the,annotation,types,see,annot,predicate,see,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,present,class,extends,annotation,annotation,types,this,filters,add,param,arrays,stream,annotation,types,all,match,param,has,parameter,annotation,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes);1517571703;Filter on method arguments that have the given annotations._@param annotationTypes the annotation types_@see #annot(Predicate[])_@see MvcAnnotationPredicates;@SafeVarargs_		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param -> Arrays.stream(annotationTypes).allMatch(param::hasParameterAnnotation))__			return this__		};filter,on,method,arguments,that,have,the,given,annotations,param,annotation,types,the,annotation,types,see,annot,predicate,see,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,present,class,extends,annotation,annotation,types,this,filters,add,param,arrays,stream,annotation,types,all,match,param,has,parameter,annotation,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes);1530190293;Filter on method arguments that have the given annotations._@param annotationTypes the annotation types_@see #annot(Predicate[])_@see MvcAnnotationPredicates;@SafeVarargs_		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param -> Arrays.stream(annotationTypes).allMatch(param::hasParameterAnnotation))__			return this__		};filter,on,method,arguments,that,have,the,given,annotations,param,annotation,types,the,annotation,types,see,annot,predicate,see,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,present,class,extends,annotation,annotation,types,this,filters,add,param,arrays,stream,annotation,types,all,match,param,has,parameter,annotation,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes);1540931761;Filter on method arguments that have the given annotations._@param annotationTypes the annotation types_@see #annot(Predicate[])_@see MvcAnnotationPredicates;@SafeVarargs_		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param -> Arrays.stream(annotationTypes).allMatch(param::hasParameterAnnotation))__			return this__		};filter,on,method,arguments,that,have,the,given,annotations,param,annotation,types,the,annotation,types,see,annot,predicate,see,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,present,class,extends,annotation,annotation,types,this,filters,add,param,arrays,stream,annotation,types,all,match,param,has,parameter,annotation,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes);1541442804;Filter on method arguments that have the given annotations._@param annotationTypes the annotation types_@see #annot(Predicate[])_@see MvcAnnotationPredicates;@SafeVarargs_		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param -> Arrays.stream(annotationTypes).allMatch(param::hasParameterAnnotation))__			return this__		};filter,on,method,arguments,that,have,the,given,annotations,param,annotation,types,the,annotation,types,see,annot,predicate,see,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,present,class,extends,annotation,annotation,types,this,filters,add,param,arrays,stream,annotation,types,all,match,param,has,parameter,annotation,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes);1541455173;Filter on method arguments that have the given annotations._@param annotationTypes the annotation types_@see #annot(Predicate[])_@see MvcAnnotationPredicates;@SafeVarargs_		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param -> Arrays.stream(annotationTypes).allMatch(param::hasParameterAnnotation))__			return this__		};filter,on,method,arguments,that,have,the,given,annotations,param,annotation,types,the,annotation,types,see,annot,predicate,see,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,present,class,extends,annotation,annotation,types,this,filters,add,param,arrays,stream,annotation,types,all,match,param,has,parameter,annotation,return,this
ResolvableMethod -> ArgResolver -> @SafeVarargs 		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes);1541701761;Filter on method arguments that have the given annotations._@param annotationTypes the annotation types_@see #annot(Predicate[])_See {@link org.springframework.web.method.MvcAnnotationPredicates}.;@SafeVarargs_		public final ArgResolver annotPresent(Class<? extends Annotation>... annotationTypes) {_			this.filters.add(param -> Arrays.stream(annotationTypes).allMatch(param::hasParameterAnnotation))__			return this__		};filter,on,method,arguments,that,have,the,given,annotations,param,annotation,types,the,annotation,types,see,annot,predicate,see,link,org,springframework,web,method,mvc,annotation,predicates;safe,varargs,public,final,arg,resolver,annot,present,class,extends,annotation,annotation,types,this,filters,add,param,arrays,stream,annotation,types,all,match,param,has,parameter,annotation,return,this
ResolvableMethod -> Builder -> public ResolvableMethod build();1488597153;Build a {@code ResolvableMethod} from the provided filters which must_resolve to a unique, single method.__<p>See additional resolveXxx shortcut methods going directly to_{@link Method} or return type parameter.__@throws IllegalStateException for no match or multiple matches;public ResolvableMethod build() {_			Set<Method> methods = MethodIntrospector.selectMethods(this.objectClass, this::isMatch)__			Assert.state(!methods.isEmpty(), "No matching method: " + this)__			Assert.state(methods.size() == 1, "Multiple matching methods: " + this + formatMethods(methods))__			return new ResolvableMethod(methods.iterator().next())__		};build,a,code,resolvable,method,from,the,provided,filters,which,must,resolve,to,a,unique,single,method,p,see,additional,resolve,xxx,shortcut,methods,going,directly,to,link,method,or,return,type,parameter,throws,illegal,state,exception,for,no,match,or,multiple,matches;public,resolvable,method,build,set,method,methods,method,introspector,select,methods,this,object,class,this,is,match,assert,state,methods,is,empty,no,matching,method,this,assert,state,methods,size,1,multiple,matching,methods,this,format,methods,methods,return,new,resolvable,method,methods,iterator,next
ResolvableMethod -> Builder -> public ResolvableMethod build();1488602581;Build a {@code ResolvableMethod} from the provided filters which must_resolve to a unique, single method.__<p>See additional resolveXxx shortcut methods going directly to_{@link Method} or return type parameter.__@throws IllegalStateException for no match or multiple matches;public ResolvableMethod build() {_			Set<Method> methods = MethodIntrospector.selectMethods(this.objectClass, this::isMatch)__			Assert.state(!methods.isEmpty(), "No matching method: " + this)__			Assert.state(methods.size() == 1, "Multiple matching methods: " + this + formatMethods(methods))__			return new ResolvableMethod(methods.iterator().next())__		};build,a,code,resolvable,method,from,the,provided,filters,which,must,resolve,to,a,unique,single,method,p,see,additional,resolve,xxx,shortcut,methods,going,directly,to,link,method,or,return,type,parameter,throws,illegal,state,exception,for,no,match,or,multiple,matches;public,resolvable,method,build,set,method,methods,method,introspector,select,methods,this,object,class,this,is,match,assert,state,methods,is,empty,no,matching,method,this,assert,state,methods,size,1,multiple,matching,methods,this,format,methods,methods,return,new,resolvable,method,methods,iterator,next
ResolvableMethod -> Builder -> public ResolvableMethod build();1488809997;Build a {@code ResolvableMethod} from the provided filters which must_resolve to a unique, single method.__<p>See additional resolveXxx shortcut methods going directly to_{@link Method} or return type parameter.__@throws IllegalStateException for no match or multiple matches;public ResolvableMethod build() {_			Set<Method> methods = MethodIntrospector.selectMethods(this.objectClass, this::isMatch)__			Assert.state(!methods.isEmpty(), "No matching method: " + this)__			Assert.state(methods.size() == 1, "Multiple matching methods: " + this + formatMethods(methods))__			return new ResolvableMethod(methods.iterator().next())__		};build,a,code,resolvable,method,from,the,provided,filters,which,must,resolve,to,a,unique,single,method,p,see,additional,resolve,xxx,shortcut,methods,going,directly,to,link,method,or,return,type,parameter,throws,illegal,state,exception,for,no,match,or,multiple,matches;public,resolvable,method,build,set,method,methods,method,introspector,select,methods,this,object,class,this,is,match,assert,state,methods,is,empty,no,matching,method,this,assert,state,methods,size,1,multiple,matching,methods,this,format,methods,methods,return,new,resolvable,method,methods,iterator,next
ResolvableMethod -> Builder -> public ResolvableMethod build();1488809997;Build a {@code ResolvableMethod} from the provided filters which must_resolve to a unique, single method.__<p>See additional resolveXxx shortcut methods going directly to_{@link Method} or return type parameter.__@throws IllegalStateException for no match or multiple matches;public ResolvableMethod build() {_			Set<Method> methods = MethodIntrospector.selectMethods(this.objectClass, this::isMatch)__			Assert.state(!methods.isEmpty(), "No matching method: " + this)__			Assert.state(methods.size() == 1, "Multiple matching methods: " + this + formatMethods(methods))__			return new ResolvableMethod(methods.iterator().next())__		};build,a,code,resolvable,method,from,the,provided,filters,which,must,resolve,to,a,unique,single,method,p,see,additional,resolve,xxx,shortcut,methods,going,directly,to,link,method,or,return,type,parameter,throws,illegal,state,exception,for,no,match,or,multiple,matches;public,resolvable,method,build,set,method,methods,method,introspector,select,methods,this,object,class,this,is,match,assert,state,methods,is,empty,no,matching,method,this,assert,state,methods,size,1,multiple,matching,methods,this,format,methods,methods,return,new,resolvable,method,methods,iterator,next
ResolvableMethod -> Builder -> public ResolvableMethod build();1491599707;Build a {@code ResolvableMethod} from the provided filters which must_resolve to a unique, single method.__<p>See additional resolveXxx shortcut methods going directly to_{@link Method} or return type parameter.__@throws IllegalStateException for no match or multiple matches;public ResolvableMethod build() {_			Set<Method> methods = MethodIntrospector.selectMethods(this.objectClass, this::isMatch)__			Assert.state(!methods.isEmpty(), "No matching method: " + this)__			Assert.state(methods.size() == 1, "Multiple matching methods: " + this + formatMethods(methods))__			return new ResolvableMethod(methods.iterator().next())__		};build,a,code,resolvable,method,from,the,provided,filters,which,must,resolve,to,a,unique,single,method,p,see,additional,resolve,xxx,shortcut,methods,going,directly,to,link,method,or,return,type,parameter,throws,illegal,state,exception,for,no,match,or,multiple,matches;public,resolvable,method,build,set,method,methods,method,introspector,select,methods,this,object,class,this,is,match,assert,state,methods,is,empty,no,matching,method,this,assert,state,methods,size,1,multiple,matching,methods,this,format,methods,methods,return,new,resolvable,method,methods,iterator,next
ResolvableMethod -> Builder -> public ResolvableMethod build();1505924929;Build a {@code ResolvableMethod} from the provided filters which must_resolve to a unique, single method.__<p>See additional resolveXxx shortcut methods going directly to_{@link Method} or return type parameter.__@throws IllegalStateException for no match or multiple matches;public ResolvableMethod build() {_			Set<Method> methods = MethodIntrospector.selectMethods(this.objectClass, this::isMatch)__			Assert.state(!methods.isEmpty(), "No matching method: " + this)__			Assert.state(methods.size() == 1, "Multiple matching methods: " + this + formatMethods(methods))__			return new ResolvableMethod(methods.iterator().next())__		};build,a,code,resolvable,method,from,the,provided,filters,which,must,resolve,to,a,unique,single,method,p,see,additional,resolve,xxx,shortcut,methods,going,directly,to,link,method,or,return,type,parameter,throws,illegal,state,exception,for,no,match,or,multiple,matches;public,resolvable,method,build,set,method,methods,method,introspector,select,methods,this,object,class,this,is,match,assert,state,methods,is,empty,no,matching,method,this,assert,state,methods,size,1,multiple,matching,methods,this,format,methods,methods,return,new,resolvable,method,methods,iterator,next
ResolvableMethod -> Builder -> public ResolvableMethod build();1517571703;Build a {@code ResolvableMethod} from the provided filters which must_resolve to a unique, single method._<p>See additional resolveXxx shortcut methods going directly to_{@link Method} or return type parameter._@throws IllegalStateException for no match or multiple matches;public ResolvableMethod build() {_			Set<Method> methods = MethodIntrospector.selectMethods(this.objectClass, this::isMatch)__			Assert.state(!methods.isEmpty(), () -> "No matching method: " + this)__			Assert.state(methods.size() == 1, () -> "Multiple matching methods: " + this + formatMethods(methods))__			return new ResolvableMethod(methods.iterator().next())__		};build,a,code,resolvable,method,from,the,provided,filters,which,must,resolve,to,a,unique,single,method,p,see,additional,resolve,xxx,shortcut,methods,going,directly,to,link,method,or,return,type,parameter,throws,illegal,state,exception,for,no,match,or,multiple,matches;public,resolvable,method,build,set,method,methods,method,introspector,select,methods,this,object,class,this,is,match,assert,state,methods,is,empty,no,matching,method,this,assert,state,methods,size,1,multiple,matching,methods,this,format,methods,methods,return,new,resolvable,method,methods,iterator,next
ResolvableMethod -> Builder -> public ResolvableMethod build();1530190293;Build a {@code ResolvableMethod} from the provided filters which must_resolve to a unique, single method._<p>See additional resolveXxx shortcut methods going directly to_{@link Method} or return type parameter._@throws IllegalStateException for no match or multiple matches;public ResolvableMethod build() {_			Set<Method> methods = MethodIntrospector.selectMethods(this.objectClass, this::isMatch)__			Assert.state(!methods.isEmpty(), () -> "No matching method: " + this)__			Assert.state(methods.size() == 1, () -> "Multiple matching methods: " + this + formatMethods(methods))__			return new ResolvableMethod(methods.iterator().next())__		};build,a,code,resolvable,method,from,the,provided,filters,which,must,resolve,to,a,unique,single,method,p,see,additional,resolve,xxx,shortcut,methods,going,directly,to,link,method,or,return,type,parameter,throws,illegal,state,exception,for,no,match,or,multiple,matches;public,resolvable,method,build,set,method,methods,method,introspector,select,methods,this,object,class,this,is,match,assert,state,methods,is,empty,no,matching,method,this,assert,state,methods,size,1,multiple,matching,methods,this,format,methods,methods,return,new,resolvable,method,methods,iterator,next
ResolvableMethod -> Builder -> public ResolvableMethod build();1540931761;Build a {@code ResolvableMethod} from the provided filters which must_resolve to a unique, single method._<p>See additional resolveXxx shortcut methods going directly to_{@link Method} or return type parameter._@throws IllegalStateException for no match or multiple matches;public ResolvableMethod build() {_			Set<Method> methods = MethodIntrospector.selectMethods(this.objectClass, this::isMatch)__			Assert.state(!methods.isEmpty(), () -> "No matching method: " + this)__			Assert.state(methods.size() == 1, () -> "Multiple matching methods: " + this + formatMethods(methods))__			return new ResolvableMethod(methods.iterator().next())__		};build,a,code,resolvable,method,from,the,provided,filters,which,must,resolve,to,a,unique,single,method,p,see,additional,resolve,xxx,shortcut,methods,going,directly,to,link,method,or,return,type,parameter,throws,illegal,state,exception,for,no,match,or,multiple,matches;public,resolvable,method,build,set,method,methods,method,introspector,select,methods,this,object,class,this,is,match,assert,state,methods,is,empty,no,matching,method,this,assert,state,methods,size,1,multiple,matching,methods,this,format,methods,methods,return,new,resolvable,method,methods,iterator,next
ResolvableMethod -> Builder -> public ResolvableMethod build();1541442804;Build a {@code ResolvableMethod} from the provided filters which must_resolve to a unique, single method._<p>See additional resolveXxx shortcut methods going directly to_{@link Method} or return type parameter._@throws IllegalStateException for no match or multiple matches;public ResolvableMethod build() {_			Set<Method> methods = MethodIntrospector.selectMethods(this.objectClass, this::isMatch)__			Assert.state(!methods.isEmpty(), () -> "No matching method: " + this)__			Assert.state(methods.size() == 1, () -> "Multiple matching methods: " + this + formatMethods(methods))__			return new ResolvableMethod(methods.iterator().next())__		};build,a,code,resolvable,method,from,the,provided,filters,which,must,resolve,to,a,unique,single,method,p,see,additional,resolve,xxx,shortcut,methods,going,directly,to,link,method,or,return,type,parameter,throws,illegal,state,exception,for,no,match,or,multiple,matches;public,resolvable,method,build,set,method,methods,method,introspector,select,methods,this,object,class,this,is,match,assert,state,methods,is,empty,no,matching,method,this,assert,state,methods,size,1,multiple,matching,methods,this,format,methods,methods,return,new,resolvable,method,methods,iterator,next
ResolvableMethod -> Builder -> public ResolvableMethod build();1541455173;Build a {@code ResolvableMethod} from the provided filters which must_resolve to a unique, single method._<p>See additional resolveXxx shortcut methods going directly to_{@link Method} or return type parameter._@throws IllegalStateException for no match or multiple matches;public ResolvableMethod build() {_			Set<Method> methods = MethodIntrospector.selectMethods(this.objectClass, this::isMatch)__			Assert.state(!methods.isEmpty(), () -> "No matching method: " + this)__			Assert.state(methods.size() == 1, () -> "Multiple matching methods: " + this + formatMethods(methods))__			return new ResolvableMethod(methods.iterator().next())__		};build,a,code,resolvable,method,from,the,provided,filters,which,must,resolve,to,a,unique,single,method,p,see,additional,resolve,xxx,shortcut,methods,going,directly,to,link,method,or,return,type,parameter,throws,illegal,state,exception,for,no,match,or,multiple,matches;public,resolvable,method,build,set,method,methods,method,introspector,select,methods,this,object,class,this,is,match,assert,state,methods,is,empty,no,matching,method,this,assert,state,methods,size,1,multiple,matching,methods,this,format,methods,methods,return,new,resolvable,method,methods,iterator,next
ResolvableMethod -> Builder -> public ResolvableMethod build();1541701761;Build a {@code ResolvableMethod} from the provided filters which must_resolve to a unique, single method._<p>See additional resolveXxx shortcut methods going directly to_{@link Method} or return type parameter._@throws IllegalStateException for no match or multiple matches;public ResolvableMethod build() {_			Set<Method> methods = MethodIntrospector.selectMethods(this.objectClass, this::isMatch)__			Assert.state(!methods.isEmpty(), () -> "No matching method: " + this)__			Assert.state(methods.size() == 1, () -> "Multiple matching methods: " + this + formatMethods(methods))__			return new ResolvableMethod(methods.iterator().next())__		};build,a,code,resolvable,method,from,the,provided,filters,which,must,resolve,to,a,unique,single,method,p,see,additional,resolve,xxx,shortcut,methods,going,directly,to,link,method,or,return,type,parameter,throws,illegal,state,exception,for,no,match,or,multiple,matches;public,resolvable,method,build,set,method,methods,method,introspector,select,methods,this,object,class,this,is,match,assert,state,methods,is,empty,no,matching,method,this,assert,state,methods,size,1,multiple,matching,methods,this,format,methods,methods,return,new,resolvable,method,methods,iterator,next
ResolvableMethod -> @SafeVarargs 	public final ArgResolver notAnnotated(Class<? extends Annotation>... annotationTypes);1488597153;Filter on method arguments that don't have the given annotation type(s)._@param annotationTypes the annotation types;@SafeVarargs_	public final ArgResolver notAnnotated(Class<? extends Annotation>... annotationTypes) {_		return new ArgResolver().notAnnotated(annotationTypes)__	};filter,on,method,arguments,that,don,t,have,the,given,annotation,type,s,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,not,annotated,class,extends,annotation,annotation,types,return,new,arg,resolver,not,annotated,annotation,types
ResolvableMethod -> @SafeVarargs 	public final ArgResolver notAnnotated(Class<? extends Annotation>... annotationTypes);1488602581;Filter on method arguments that don't have the given annotation type(s)._@param annotationTypes the annotation types;@SafeVarargs_	public final ArgResolver notAnnotated(Class<? extends Annotation>... annotationTypes) {_		return new ArgResolver().notAnnotated(annotationTypes)__	};filter,on,method,arguments,that,don,t,have,the,given,annotation,type,s,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,not,annotated,class,extends,annotation,annotation,types,return,new,arg,resolver,not,annotated,annotation,types
ResolvableMethod -> @SafeVarargs 	public final ArgResolver notAnnotated(Class<? extends Annotation>... annotationTypes);1488809997;Filter on method arguments that don't have the given annotation type(s)._@param annotationTypes the annotation types;@SafeVarargs_	public final ArgResolver notAnnotated(Class<? extends Annotation>... annotationTypes) {_		return new ArgResolver().notAnnotated(annotationTypes)__	};filter,on,method,arguments,that,don,t,have,the,given,annotation,type,s,param,annotation,types,the,annotation,types;safe,varargs,public,final,arg,resolver,not,annotated,class,extends,annotation,annotation,types,return,new,arg,resolver,not,annotated,annotation,types
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(ResolvableType returnType);1488597153;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()};public MethodParameter resolveReturnType(ResolvableType returnType) {_			return returning(returnType).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type;public,method,parameter,resolve,return,type,resolvable,type,return,type,return,returning,return,type,build,return,type
ResolvableMethod -> Builder -> public MethodParameter resolveReturnType(ResolvableType returnType);1488602581;Shortcut to the unique return type equivalent to:_<p>{@code returning(returnType).build().returnType()};public MethodParameter resolveReturnType(ResolvableType returnType) {_			return returning(returnType).build().returnType()__		};shortcut,to,the,unique,return,type,equivalent,to,p,code,returning,return,type,build,return,type;public,method,parameter,resolve,return,type,resolvable,type,return,type,return,returning,return,type,build,return,type
ResolvableMethod -> public MethodParameter returnType();1488597153;Return the declared return type of the resolved method.;public MethodParameter returnType() {_		return new MethodParameter(this.method, -1)__	};return,the,declared,return,type,of,the,resolved,method;public,method,parameter,return,type,return,new,method,parameter,this,method,1
ResolvableMethod -> public MethodParameter returnType();1488602581;Return the declared return type of the resolved method.;public MethodParameter returnType() {_		return new SynthesizingMethodParameter(this.method, -1)__	};return,the,declared,return,type,of,the,resolved,method;public,method,parameter,return,type,return,new,synthesizing,method,parameter,this,method,1
ResolvableMethod -> public MethodParameter returnType();1488809997;Return the declared return type of the resolved method.;public MethodParameter returnType() {_		return new SynthesizingMethodParameter(this.method, -1)__	};return,the,declared,return,type,of,the,resolved,method;public,method,parameter,return,type,return,new,synthesizing,method,parameter,this,method,1
ResolvableMethod -> public MethodParameter returnType();1488809997;Return the declared return type of the resolved method.;public MethodParameter returnType() {_		return new SynthesizingMethodParameter(this.method, -1)__	};return,the,declared,return,type,of,the,resolved,method;public,method,parameter,return,type,return,new,synthesizing,method,parameter,this,method,1
ResolvableMethod -> public MethodParameter returnType();1491599707;Return the declared return type of the resolved method.;public MethodParameter returnType() {_		return new SynthesizingMethodParameter(this.method, -1)__	};return,the,declared,return,type,of,the,resolved,method;public,method,parameter,return,type,return,new,synthesizing,method,parameter,this,method,1
ResolvableMethod -> public MethodParameter returnType();1505924929;Return the declared return type of the resolved method.;public MethodParameter returnType() {_		return new SynthesizingMethodParameter(this.method, -1)__	};return,the,declared,return,type,of,the,resolved,method;public,method,parameter,return,type,return,new,synthesizing,method,parameter,this,method,1
ResolvableMethod -> public MethodParameter returnType();1517571703;Return the declared return type of the resolved method.;public MethodParameter returnType() {_		return new SynthesizingMethodParameter(this.method, -1)__	};return,the,declared,return,type,of,the,resolved,method;public,method,parameter,return,type,return,new,synthesizing,method,parameter,this,method,1
ResolvableMethod -> public MethodParameter returnType();1530190293;Return the declared return type of the resolved method.;public MethodParameter returnType() {_		return new SynthesizingMethodParameter(this.method, -1)__	};return,the,declared,return,type,of,the,resolved,method;public,method,parameter,return,type,return,new,synthesizing,method,parameter,this,method,1
ResolvableMethod -> public MethodParameter returnType();1540931761;Return the declared return type of the resolved method.;public MethodParameter returnType() {_		return new SynthesizingMethodParameter(this.method, -1)__	};return,the,declared,return,type,of,the,resolved,method;public,method,parameter,return,type,return,new,synthesizing,method,parameter,this,method,1
ResolvableMethod -> public MethodParameter returnType();1541442804;Return the declared return type of the resolved method.;public MethodParameter returnType() {_		return new SynthesizingMethodParameter(this.method, -1)__	};return,the,declared,return,type,of,the,resolved,method;public,method,parameter,return,type,return,new,synthesizing,method,parameter,this,method,1
ResolvableMethod -> public MethodParameter returnType();1541455173;Return the declared return type of the resolved method.;public MethodParameter returnType() {_		return new SynthesizingMethodParameter(this.method, -1)__	};return,the,declared,return,type,of,the,resolved,method;public,method,parameter,return,type,return,new,synthesizing,method,parameter,this,method,1
ResolvableMethod -> public MethodParameter returnType();1541701761;Return the declared return type of the resolved method.;public MethodParameter returnType() {_		return new SynthesizingMethodParameter(this.method, -1)__	};return,the,declared,return,type,of,the,resolved,method;public,method,parameter,return,type,return,new,synthesizing,method,parameter,this,method,1
ResolvableMethod -> Builder -> public Builder returning(ResolvableType resolvableType);1488597153;Filter on methods returning the given type.;public Builder returning(ResolvableType resolvableType) {_			String expected = resolvableType.toString()__			String message = "returnType=" + expected__			addFilter(message, m -> expected.equals(ResolvableType.forMethodReturnType(m).toString()))__			return this__		};filter,on,methods,returning,the,given,type;public,builder,returning,resolvable,type,resolvable,type,string,expected,resolvable,type,to,string,string,message,return,type,expected,add,filter,message,m,expected,equals,resolvable,type,for,method,return,type,m,to,string,return,this
ResolvableMethod -> Builder -> public Builder returning(ResolvableType resolvableType);1488602581;Filter on methods returning the given type.;public Builder returning(ResolvableType resolvableType) {_			String expected = resolvableType.toString()__			String message = "returnType=" + expected__			addFilter(message, m -> expected.equals(ResolvableType.forMethodReturnType(m).toString()))__			return this__		};filter,on,methods,returning,the,given,type;public,builder,returning,resolvable,type,resolvable,type,string,expected,resolvable,type,to,string,string,message,return,type,expected,add,filter,message,m,expected,equals,resolvable,type,for,method,return,type,m,to,string,return,this
