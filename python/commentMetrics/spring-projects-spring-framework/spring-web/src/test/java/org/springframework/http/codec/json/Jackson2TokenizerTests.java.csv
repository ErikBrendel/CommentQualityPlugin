commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void createParser() {     this.jsonFactory = new JsonFactory().     this.objectMapper = new ObjectMapper(this.jsonFactory). }
false;public;0;51;;@Test public void doNotTokenizeArrayElements() {     testTokenize(singletonList("{\"foo\": \"foofoo\", \"bar\": \"barbar\"}"), singletonList("{\"foo\": \"foofoo\", \"bar\": \"barbar\"}"), false).     testTokenize(asList("{\"foo\": \"foofoo\"", ", \"bar\": \"barbar\"}"), singletonList("{\"foo\":\"foofoo\",\"bar\":\"barbar\"}"), false).     testTokenize(singletonList("[" + "{\"foo\": \"foofoo\", \"bar\": \"barbar\"}," + "{\"foo\": \"foofoofoo\", \"bar\": \"barbarbar\"}]"), singletonList("[" + "{\"foo\": \"foofoo\", \"bar\": \"barbar\"}," + "{\"foo\": \"foofoofoo\", \"bar\": \"barbarbar\"}]"), false).     testTokenize(singletonList("[{\"foo\": \"bar\"},{\"foo\": \"baz\"}]"), singletonList("[{\"foo\": \"bar\"},{\"foo\": \"baz\"}]"), false).     testTokenize(asList("[" + "{\"foo\": \"foofoo\", \"bar\"", ": \"barbar\"}," + "{\"foo\": \"foofoofoo\", \"bar\": \"barbarbar\"}]"), singletonList("[" + "{\"foo\": \"foofoo\", \"bar\": \"barbar\"}," + "{\"foo\": \"foofoofoo\", \"bar\": \"barbarbar\"}]"), false).     testTokenize(asList("[", "{\"id\":1,\"name\":\"Robert\"}", ",", "{\"id\":2,\"name\":\"Raide\"}", ",", "{\"id\":3,\"name\":\"Ford\"}", "]"), singletonList("[" + "{\"id\":1,\"name\":\"Robert\"}," + "{\"id\":2,\"name\":\"Raide\"}," + "{\"id\":3,\"name\":\"Ford\"}]"), false).     // SPR-16166: top-level JSON values     testTokenize(asList("\"foo", "bar\""), singletonList("\"foobar\""), false).     testTokenize(asList("12", "34"), singletonList("1234"), false).     testTokenize(asList("12.", "34"), singletonList("12.34"), false). // note that we do not test for null, true, or false, which are also valid top-level values, // but are unsupported by JSONassert }
false;public;0;69;;@Test public void tokenizeArrayElements() {     testTokenize(singletonList("{\"foo\": \"foofoo\", \"bar\": \"barbar\"}"), singletonList("{\"foo\": \"foofoo\", \"bar\": \"barbar\"}"), true).     testTokenize(asList("{\"foo\": \"foofoo\"", ", \"bar\": \"barbar\"}"), singletonList("{\"foo\":\"foofoo\",\"bar\":\"barbar\"}"), true).     testTokenize(singletonList("[" + "{\"foo\": \"foofoo\", \"bar\": \"barbar\"}," + "{\"foo\": \"foofoofoo\", \"bar\": \"barbarbar\"}]"), asList("{\"foo\": \"foofoo\", \"bar\": \"barbar\"}", "{\"foo\": \"foofoofoo\", \"bar\": \"barbarbar\"}"), true).     testTokenize(singletonList("[{\"foo\": \"bar\"},{\"foo\": \"baz\"}]"), asList("{\"foo\": \"bar\"}", "{\"foo\": \"baz\"}"), true).     // SPR-15803: nested array     testTokenize(singletonList("[" + "{\"id\":\"0\",\"start\":[-999999999,1,1],\"end\":[999999999,12,31]}," + "{\"id\":\"1\",\"start\":[-999999999,1,1],\"end\":[999999999,12,31]}," + "{\"id\":\"2\",\"start\":[-999999999,1,1],\"end\":[999999999,12,31]}" + "]"), asList("{\"id\":\"0\",\"start\":[-999999999,1,1],\"end\":[999999999,12,31]}", "{\"id\":\"1\",\"start\":[-999999999,1,1],\"end\":[999999999,12,31]}", "{\"id\":\"2\",\"start\":[-999999999,1,1],\"end\":[999999999,12,31]}"), true).     // SPR-15803: nested array, no top-level array     testTokenize(singletonList("{\"speakerIds\":[\"tastapod\"],\"language\":\"ENGLISH\"}"), singletonList("{\"speakerIds\":[\"tastapod\"],\"language\":\"ENGLISH\"}"), true).     testTokenize(asList("[" + "{\"foo\": \"foofoo\", \"bar\"", ": \"barbar\"}," + "{\"foo\": \"foofoofoo\", \"bar\": \"barbarbar\"}]"), asList("{\"foo\": \"foofoo\", \"bar\": \"barbar\"}", "{\"foo\": \"foofoofoo\", \"bar\": \"barbarbar\"}"), true).     testTokenize(asList("[", "{\"id\":1,\"name\":\"Robert\"}", ",", "{\"id\":2,\"name\":\"Raide\"}", ",", "{\"id\":3,\"name\":\"Ford\"}", "]"), asList("{\"id\":1,\"name\":\"Robert\"}", "{\"id\":2,\"name\":\"Raide\"}", "{\"id\":3,\"name\":\"Ford\"}"), true).     // SPR-16166: top-level JSON values     testTokenize(asList("\"foo", "bar\""), singletonList("\"foobar\""), true).     testTokenize(asList("12", "34"), singletonList("1234"), true).     testTokenize(asList("12.", "34"), singletonList("12.34"), true).     // SPR-16407     testTokenize(asList("[1", ",2,", "3]"), asList("1", "2", "3"), true). }
false;public;0;12;;@Test public void errorInStream() {     DataBuffer buffer = stringBuffer("{\"id\":1,\"name\":").     Flux<DataBuffer> source = Flux.just(buffer).concatWith(Flux.error(new RuntimeException())).     Flux<TokenBuffer> result = Jackson2Tokenizer.tokenize(source, this.jsonFactory, true).     StepVerifier.create(result).expectError(RuntimeException.class).verify(). }
false;public;0;9;;// SPR-16521 @Test public void jsonEOFExceptionIsWrappedAsDecodingError() {     Flux<DataBuffer> source = Flux.just(stringBuffer("{\"status\": \"noClosingQuote}")).     Flux<TokenBuffer> tokens = Jackson2Tokenizer.tokenize(source, this.jsonFactory, false).     StepVerifier.create(tokens).expectError(DecodingException.class).verify(). }
false;private;3;22;;private void testTokenize(List<String> source, List<String> expected, boolean tokenizeArrayElements) {     Flux<TokenBuffer> tokenBufferFlux = Jackson2Tokenizer.tokenize(Flux.fromIterable(source).map(this::stringBuffer), this.jsonFactory, tokenizeArrayElements).     Flux<String> result = tokenBufferFlux.map(tokenBuffer -> {         try {             TreeNode root = this.objectMapper.readTree(tokenBuffer.asParser()).             return this.objectMapper.writeValueAsString(root).         } catch (IOException ex) {             throw new UncheckedIOException(ex).         }     }).     StepVerifier.FirstStep<String> builder = StepVerifier.create(result).     expected.forEach(s -> builder.assertNext(new JSONAssertConsumer(s))).     builder.verifyComplete(). }
false;private;1;6;;private DataBuffer stringBuffer(String value) {     byte[] bytes = value.getBytes(StandardCharsets.UTF_8).     DataBuffer buffer = this.bufferFactory.allocateBuffer(bytes.length).     buffer.write(bytes).     return buffer. }
false;public;1;9;;@Override public void accept(String s) {     try {         JSONAssert.assertEquals(this.expected, s, true).     } catch (JSONException ex) {         throw new RuntimeException(ex).     } }
