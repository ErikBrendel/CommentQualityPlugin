commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void queryParamsNone() throws Exception {     MultiValueMap<String, String> params = createHttpRequest("/path").getQueryParams().     assertEquals(0, params.size()). }
false;public;0;7;;@Test public void queryParams() throws Exception {     MultiValueMap<String, String> params = createHttpRequest("/path?a=A&b=B").getQueryParams().     assertEquals(2, params.size()).     assertEquals(Collections.singletonList("A"), params.get("a")).     assertEquals(Collections.singletonList("B"), params.get("b")). }
false;public;0;6;;@Test public void queryParamsWithMultipleValues() throws Exception {     MultiValueMap<String, String> params = createHttpRequest("/path?a=1&a=2").getQueryParams().     assertEquals(1, params.size()).     assertEquals(Arrays.asList("1", "2"), params.get("a")). }
false;public;0;6;;// SPR-15140 @Test public void queryParamsWithEncodedValue() throws Exception {     MultiValueMap<String, String> params = createHttpRequest("/path?a=%20%2B+%C3%A0").getQueryParams().     assertEquals(1, params.size()).     assertEquals(Collections.singletonList(" + \u00e0"), params.get("a")). }
false;public;0;6;;@Test public void queryParamsWithEmptyValue() throws Exception {     MultiValueMap<String, String> params = createHttpRequest("/path?a=").getQueryParams().     assertEquals(1, params.size()).     assertEquals(Collections.singletonList(""), params.get("a")). }
false;public;0;6;;@Test public void queryParamsWithNoValue() throws Exception {     MultiValueMap<String, String> params = createHttpRequest("/path?a").getQueryParams().     assertEquals(1, params.size()).     assertEquals(Collections.singletonList(null), params.get("a")). }
false;public;0;22;;@Test public void mutateRequest() throws Exception {     SslInfo sslInfo = mock(SslInfo.class).     ServerHttpRequest request = createHttpRequest("/").mutate().sslInfo(sslInfo).build().     assertSame(sslInfo, request.getSslInfo()).     request = createHttpRequest("/").mutate().method(HttpMethod.DELETE).build().     assertEquals(HttpMethod.DELETE, request.getMethod()).     String baseUri = "http://aaa.org:8080/a".     request = createHttpRequest(baseUri).mutate().uri(URI.create("http://bbb.org:9090/b")).build().     assertEquals("http://bbb.org:9090/b", request.getURI().toString()).     request = createHttpRequest(baseUri).mutate().path("/b/c/d").build().     assertEquals("http://aaa.org:8080/b/c/d", request.getURI().toString()).     request = createHttpRequest(baseUri).mutate().path("/app/b/c/d").contextPath("/app").build().     assertEquals("http://aaa.org:8080/app/b/c/d", request.getURI().toString()).     assertEquals("/app", request.getPath().contextPath().value()). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void mutateWithInvalidPath() throws Exception {     createHttpRequest("/").mutate().path("foo-bar"). }
false;public;0;8;;// SPR-16434 @Test public void mutatePathWithEncodedQueryParams() throws Exception {     ServerHttpRequest request = createHttpRequest("/path?name=%E6%89%8E%E6%A0%B9").     request = request.mutate().path("/mutatedPath").build().     assertEquals("/mutatedPath", request.getURI().getRawPath()).     assertEquals("name=%E6%89%8E%E6%A0%B9", request.getURI().getRawQuery()). }
false;private;1;6;;private ServerHttpRequest createHttpRequest(String uriString) throws Exception {     URI uri = URI.create(uriString).     MockHttpServletRequest request = new TestHttpServletRequest(uri).     AsyncContext asyncContext = new MockAsyncContext(request, new MockHttpServletResponse()).     return new ServletServerHttpRequest(request, asyncContext, "", new DefaultDataBufferFactory(), 1024). }
false;public;1;4;;@Override public void setReadListener(ReadListener readListener) { // Ignore }
false;public;0;9;;@Override public ServletInputStream getInputStream() {     return new DelegatingServletInputStream(new ByteArrayInputStream(new byte[0])) {          @Override         public void setReadListener(ReadListener readListener) {         // Ignore         }     }. }
