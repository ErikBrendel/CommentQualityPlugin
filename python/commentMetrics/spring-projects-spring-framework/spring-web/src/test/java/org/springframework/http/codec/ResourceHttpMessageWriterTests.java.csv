commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void getWritableMediaTypes() throws Exception {     assertThat(this.writer.getWritableMediaTypes(), containsInAnyOrder(MimeTypeUtils.APPLICATION_OCTET_STREAM, MimeTypeUtils.ALL)). }
false;public;0;12;;@Test public void writeResource() throws Exception {     testWrite(get("/").build()).     assertThat(this.response.getHeaders().getContentType(), is(TEXT_PLAIN)).     assertThat(this.response.getHeaders().getContentLength(), is(39L)).     assertThat(this.response.getHeaders().getFirst(HttpHeaders.ACCEPT_RANGES), is("bytes")).     String content = "Spring Framework test resource content.".     StepVerifier.create(this.response.getBodyAsString()).expectNext(content).expectComplete().verify(). }
false;public;0;11;;@Test public void writeSingleRegion() throws Exception {     testWrite(get("/").range(of(0, 5)).build()).     assertThat(this.response.getHeaders().getContentType(), is(TEXT_PLAIN)).     assertThat(this.response.getHeaders().getFirst(HttpHeaders.CONTENT_RANGE), is("bytes 0-5/39")).     assertThat(this.response.getHeaders().getContentLength(), is(6L)).     StepVerifier.create(this.response.getBodyAsString()).expectNext("Spring").expectComplete().verify(). }
false;public;0;38;;@Test public void writeMultipleRegions() throws Exception {     testWrite(get("/").range(of(0, 5), of(7, 15), of(17, 20), of(22, 38)).build()).     HttpHeaders headers = this.response.getHeaders().     String contentType = headers.getContentType().toString().     String boundary = contentType.substring(30).     assertThat(contentType, startsWith("multipart/byteranges.boundary=")).     StepVerifier.create(this.response.getBodyAsString()).consumeNextWith(content -> {         String[] actualRanges = StringUtils.tokenizeToStringArray(content, "\r\n", false, true).         String[] expected = new String[] { "--" + boundary, "Content-Type: text/plain", "Content-Range: bytes 0-5/39", "Spring", "--" + boundary, "Content-Type: text/plain", "Content-Range: bytes 7-15/39", "Framework", "--" + boundary, "Content-Type: text/plain", "Content-Range: bytes 17-20/39", "test", "--" + boundary, "Content-Type: text/plain", "Content-Range: bytes 22-38/39", "resource content.", "--" + boundary + "--" }.         assertArrayEquals(expected, actualRanges).     }).expectComplete().verify(). }
false;public;0;8;;@Test public void invalidRange() throws Exception {     testWrite(get("/").header(HttpHeaders.RANGE, "invalid").build()).     assertThat(this.response.getHeaders().getFirst(HttpHeaders.ACCEPT_RANGES), is("bytes")).     assertThat(this.response.getStatusCode(), is(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE)). }
false;private;1;4;;private void testWrite(MockServerHttpRequest request) {     Mono<Void> mono = this.writer.write(this.input, null, null, TEXT_PLAIN, request, this.response, HINTS).     StepVerifier.create(mono).expectComplete().verify(). }
false;private,static;2;3;;private static HttpRange of(int first, int last) {     return HttpRange.createByteRange(first, last). }
