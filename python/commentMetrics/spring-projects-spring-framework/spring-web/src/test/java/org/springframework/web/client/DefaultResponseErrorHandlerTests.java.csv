commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void hasErrorTrue() throws Exception {     given(response.getRawStatusCode()).willReturn(HttpStatus.NOT_FOUND.value()).     assertTrue(handler.hasError(response)). }
false;public;0;5;;@Test public void hasErrorFalse() throws Exception {     given(response.getRawStatusCode()).willReturn(HttpStatus.OK.value()).     assertFalse(handler.hasError(response)). }
false;public;0;18;;@Test public void handleError() throws Exception {     HttpHeaders headers = new HttpHeaders().     headers.setContentType(MediaType.TEXT_PLAIN).     given(response.getRawStatusCode()).willReturn(HttpStatus.NOT_FOUND.value()).     given(response.getStatusText()).willReturn("Not Found").     given(response.getHeaders()).willReturn(headers).     given(response.getBody()).willReturn(new ByteArrayInputStream("Hello World".getBytes(StandardCharsets.UTF_8))).     try {         handler.handleError(response).         fail("expected HttpClientErrorException").     } catch (HttpClientErrorException ex) {         assertSame(headers, ex.getResponseHeaders()).     } }
false;public;0;12;;@Test(expected = HttpClientErrorException.class) public void handleErrorIOException() throws Exception {     HttpHeaders headers = new HttpHeaders().     headers.setContentType(MediaType.TEXT_PLAIN).     given(response.getRawStatusCode()).willReturn(HttpStatus.NOT_FOUND.value()).     given(response.getStatusText()).willReturn("Not Found").     given(response.getHeaders()).willReturn(headers).     given(response.getBody()).willThrow(new IOException()).     handler.handleError(response). }
false;public;0;11;;@Test(expected = HttpClientErrorException.class) public void handleErrorNullResponse() throws Exception {     HttpHeaders headers = new HttpHeaders().     headers.setContentType(MediaType.TEXT_PLAIN).     given(response.getRawStatusCode()).willReturn(HttpStatus.NOT_FOUND.value()).     given(response.getStatusText()).willReturn("Not Found").     given(response.getHeaders()).willReturn(headers).     handler.handleError(response). }
false;public;0;11;;// SPR-16108 @Test public void hasErrorForUnknownStatusCode() throws Exception {     HttpHeaders headers = new HttpHeaders().     headers.setContentType(MediaType.TEXT_PLAIN).     given(response.getRawStatusCode()).willReturn(999).     given(response.getStatusText()).willReturn("Custom status code").     given(response.getHeaders()).willReturn(headers).     assertFalse(handler.hasError(response)). }
false;public;0;11;;// SPR-9406 @Test(expected = UnknownHttpStatusCodeException.class) public void handleErrorUnknownStatusCode() throws Exception {     HttpHeaders headers = new HttpHeaders().     headers.setContentType(MediaType.TEXT_PLAIN).     given(response.getRawStatusCode()).willReturn(999).     given(response.getStatusText()).willReturn("Custom status code").     given(response.getHeaders()).willReturn(headers).     handler.handleError(response). }
false;public;0;11;;// SPR-17461 @Test public void hasErrorForCustomClientError() throws Exception {     HttpHeaders headers = new HttpHeaders().     headers.setContentType(MediaType.TEXT_PLAIN).     given(response.getRawStatusCode()).willReturn(499).     given(response.getStatusText()).willReturn("Custom status code").     given(response.getHeaders()).willReturn(headers).     assertTrue(handler.hasError(response)). }
false;public;0;11;;@Test(expected = UnknownHttpStatusCodeException.class) public void handleErrorForCustomClientError() throws Exception {     HttpHeaders headers = new HttpHeaders().     headers.setContentType(MediaType.TEXT_PLAIN).     given(response.getRawStatusCode()).willReturn(499).     given(response.getStatusText()).willReturn("Custom status code").     given(response.getHeaders()).willReturn(headers).     handler.handleError(response). }
false;public;0;11;;// SPR-17461 @Test public void hasErrorForCustomServerError() throws Exception {     HttpHeaders headers = new HttpHeaders().     headers.setContentType(MediaType.TEXT_PLAIN).     given(response.getRawStatusCode()).willReturn(599).     given(response.getStatusText()).willReturn("Custom status code").     given(response.getHeaders()).willReturn(headers).     assertTrue(handler.hasError(response)). }
false;public;0;11;;@Test(expected = UnknownHttpStatusCodeException.class) public void handleErrorForCustomServerError() throws Exception {     HttpHeaders headers = new HttpHeaders().     headers.setContentType(MediaType.TEXT_PLAIN).     given(response.getRawStatusCode()).willReturn(599).     given(response.getStatusText()).willReturn("Custom status code").     given(response.getHeaders()).willReturn(headers).     handler.handleError(response). }
false;public;0;15;;// SPR-16604 @Test public void bodyAvailableAfterHasErrorForUnknownStatusCode() throws Exception {     HttpHeaders headers = new HttpHeaders().     headers.setContentType(MediaType.TEXT_PLAIN).     TestByteArrayInputStream body = new TestByteArrayInputStream("Hello World".getBytes(StandardCharsets.UTF_8)).     given(response.getRawStatusCode()).willReturn(999).     given(response.getStatusText()).willReturn("Custom status code").     given(response.getHeaders()).willReturn(headers).     given(response.getBody()).willReturn(body).     assertFalse(handler.hasError(response)).     assertFalse(body.isClosed()).     assertEquals("Hello World", StreamUtils.copyToString(response.getBody(), StandardCharsets.UTF_8)). }
false;public;0;3;;public boolean isClosed() {     return closed. }
false;public;0;4;;@Override public boolean markSupported() {     return false. }
false;public,synchronized;1;4;;@Override public synchronized void mark(int readlimit) {     throw new UnsupportedOperationException("mark/reset not supported"). }
false;public,synchronized;0;4;;@Override public synchronized void reset() {     throw new UnsupportedOperationException("mark/reset not supported"). }
false;public;0;5;;@Override public void close() throws IOException {     super.close().     this.closed = true. }
