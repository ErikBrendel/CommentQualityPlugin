commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;11;;@Parameterized.Parameters(name = "headers [{0}]") public static Object[][] arguments() {     return new Object[][] { { CollectionUtils.toMultiValueMap(new LinkedCaseInsensitiveMap<>(8, Locale.ENGLISH)) }, { new NettyHeadersAdapter(new DefaultHttpHeaders()) }, { new TomcatHeadersAdapter(new MimeHeaders()) }, { new UndertowHeadersAdapter(new HeaderMap()) }, { new JettyHeadersAdapter(new HttpFields()) } }. }
false;public;0;4;;@After public void tearDown() {     this.headers.clear(). }
false;public;0;4;;@Test public void getWithUnknownHeaderShouldReturnNull() {     assertNull(this.headers.get("Unknown")). }
false;public;0;4;;@Test public void getFirstWithUnknownHeaderShouldReturnNull() {     assertNull(this.headers.getFirst("Unknown")). }
false;public;0;6;;@Test public void sizeWithMultipleValuesForHeaderShouldCountHeaders() {     this.headers.add("TestHeader", "first").     this.headers.add("TestHeader", "second").     assertEquals(1, this.headers.size()). }
false;public;0;7;;@Test public void keySetShouldNotDuplicateHeaderNames() {     this.headers.add("TestHeader", "first").     this.headers.add("OtherHeader", "test").     this.headers.add("TestHeader", "second").     assertEquals(2, this.headers.keySet().size()). }
false;public;0;5;;@Test public void containsKeyShouldBeCaseInsensitive() {     this.headers.add("TestHeader", "first").     assertTrue(this.headers.containsKey("testheader")). }
false;public;0;7;;@Test public void addShouldKeepOrdering() {     this.headers.add("TestHeader", "first").     this.headers.add("TestHeader", "second").     assertEquals("first", this.headers.getFirst("TestHeader")).     assertEquals("first", this.headers.get("TestHeader").get(0)). }
false;public;0;7;;@Test public void putShouldOverrideExisting() {     this.headers.add("TestHeader", "first").     this.headers.put("TestHeader", Arrays.asList("override")).     assertEquals("override", this.headers.getFirst("TestHeader")).     assertEquals(1, this.headers.get("TestHeader").size()). }
