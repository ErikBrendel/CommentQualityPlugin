commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     this.sessionAttributeStore = new DefaultSessionAttributeStore().     this.webRequest = new ServletWebRequest(new MockHttpServletRequest(), new MockHttpServletResponse()).     this.mavContainer = new ModelAndViewContainer().     this.mavContainer.addAttribute("methods", new ArrayList<String>()). }
false;public;0;10;;@Test public void straightLineDependency() throws Exception {     runTest(new StraightLineDependencyController()).     assertInvokedBefore("getA", "getB1", "getB2", "getC1", "getC2", "getC3", "getC4").     assertInvokedBefore("getB1", "getB2", "getC1", "getC2", "getC3", "getC4").     assertInvokedBefore("getB2", "getC1", "getC2", "getC3", "getC4").     assertInvokedBefore("getC1", "getC2", "getC3", "getC4").     assertInvokedBefore("getC2", "getC3", "getC4").     assertInvokedBefore("getC3", "getC4"). }
false;public;0;7;;@Test public void treeDependency() throws Exception {     runTest(new TreeDependencyController()).     assertInvokedBefore("getA", "getB1", "getB2", "getC1", "getC2", "getC3", "getC4").     assertInvokedBefore("getB1", "getC1", "getC2").     assertInvokedBefore("getB2", "getC3", "getC4"). }
false;public;0;10;;@Test public void InvertedTreeDependency() throws Exception {     runTest(new InvertedTreeDependencyController()).     assertInvokedBefore("getC1", "getA", "getB1").     assertInvokedBefore("getC2", "getA", "getB1").     assertInvokedBefore("getC3", "getA", "getB2").     assertInvokedBefore("getC4", "getA", "getB2").     assertInvokedBefore("getB1", "getA").     assertInvokedBefore("getB2", "getA"). }
false;public;0;8;;@Test public void unresolvedDependency() throws Exception {     runTest(new UnresolvedDependencyController()).     assertInvokedBefore("getA", "getC1", "getC2", "getC3", "getC4"). // No other order guarantees for methods with unresolvable dependencies (and methods that depend on them), // Required dependencies will be created via default constructor. }
false;private;1;28;;private void runTest(Object controller) throws Exception {     HandlerMethodArgumentResolverComposite resolvers = new HandlerMethodArgumentResolverComposite().     resolvers.addResolver(new ModelAttributeMethodProcessor(false)).     resolvers.addResolver(new ModelMethodProcessor()).     WebDataBinderFactory dataBinderFactory = new DefaultDataBinderFactory(null).     Class<?> type = controller.getClass().     Set<Method> methods = MethodIntrospector.selectMethods(type, METHOD_FILTER).     List<InvocableHandlerMethod> modelMethods = new ArrayList<>().     for (Method method : methods) {         InvocableHandlerMethod modelMethod = new InvocableHandlerMethod(controller, method).         modelMethod.setHandlerMethodArgumentResolvers(resolvers).         modelMethod.setDataBinderFactory(dataBinderFactory).         modelMethods.add(modelMethod).     }     Collections.shuffle(modelMethods).     SessionAttributesHandler sessionHandler = new SessionAttributesHandler(type, this.sessionAttributeStore).     ModelFactory factory = new ModelFactory(modelMethods, dataBinderFactory, sessionHandler).     factory.initModel(this.webRequest, this.mavContainer, new HandlerMethod(controller, "handle")).     if (logger.isDebugEnabled()) {         StringBuilder sb = new StringBuilder().         for (String name : getInvokedMethods()) {             sb.append(" >> ").append(name).         }         logger.debug(sb).     } }
false;private;2;7;;private void assertInvokedBefore(String beforeMethod, String... afterMethods) {     List<String> actual = getInvokedMethods().     for (String afterMethod : afterMethods) {         assertTrue(beforeMethod + " should be before " + afterMethod + ". Actual order: " + actual.toString(), actual.indexOf(beforeMethod) < actual.indexOf(afterMethod)).     } }
false;private;0;4;;@SuppressWarnings("unchecked") private List<String> getInvokedMethods() {     return (List<String>) this.mavContainer.getModel().get("methods"). }
false;public;0;3;;@RequestMapping public void handle() { }
false;;3;5;;@SuppressWarnings("unchecked") <T> T updateAndReturn(Model model, String methodName, T returnValue) throws IOException {     ((List<String>) model.asMap().get("methods")).add(methodName).     return returnValue. }
false;public;1;4;;@ModelAttribute public A getA(Model model) throws IOException {     return updateAndReturn(model, "getA", new A()). }
false;public;2;4;;@ModelAttribute public B1 getB1(@ModelAttribute A a, Model model) throws IOException {     return updateAndReturn(model, "getB1", new B1()). }
false;public;2;4;;@ModelAttribute public B2 getB2(@ModelAttribute B1 b1, Model model) throws IOException {     return updateAndReturn(model, "getB2", new B2()). }
false;public;2;4;;@ModelAttribute public C1 getC1(@ModelAttribute B2 b2, Model model) throws IOException {     return updateAndReturn(model, "getC1", new C1()). }
false;public;2;4;;@ModelAttribute public C2 getC2(@ModelAttribute C1 c1, Model model) throws IOException {     return updateAndReturn(model, "getC2", new C2()). }
false;public;2;4;;@ModelAttribute public C3 getC3(@ModelAttribute C2 c2, Model model) throws IOException {     return updateAndReturn(model, "getC3", new C3()). }
false;public;2;4;;@ModelAttribute public C4 getC4(@ModelAttribute C3 c3, Model model) throws IOException {     return updateAndReturn(model, "getC4", new C4()). }
false;public;1;4;;@ModelAttribute public A getA(Model model) throws IOException {     return updateAndReturn(model, "getA", new A()). }
false;public;2;4;;@ModelAttribute public B1 getB1(@ModelAttribute A a, Model model) throws IOException {     return updateAndReturn(model, "getB1", new B1()). }
false;public;2;4;;@ModelAttribute public B2 getB2(@ModelAttribute A a, Model model) throws IOException {     return updateAndReturn(model, "getB2", new B2()). }
false;public;2;4;;@ModelAttribute public C1 getC1(@ModelAttribute B1 b1, Model model) throws IOException {     return updateAndReturn(model, "getC1", new C1()). }
false;public;2;4;;@ModelAttribute public C2 getC2(@ModelAttribute B1 b1, Model model) throws IOException {     return updateAndReturn(model, "getC2", new C2()). }
false;public;2;4;;@ModelAttribute public C3 getC3(@ModelAttribute B2 b2, Model model) throws IOException {     return updateAndReturn(model, "getC3", new C3()). }
false;public;2;4;;@ModelAttribute public C4 getC4(@ModelAttribute B2 b2, Model model) throws IOException {     return updateAndReturn(model, "getC4", new C4()). }
false;public;1;4;;@ModelAttribute public C1 getC1(Model model) throws IOException {     return updateAndReturn(model, "getC1", new C1()). }
false;public;1;4;;@ModelAttribute public C2 getC2(Model model) throws IOException {     return updateAndReturn(model, "getC2", new C2()). }
false;public;1;4;;@ModelAttribute public C3 getC3(Model model) throws IOException {     return updateAndReturn(model, "getC3", new C3()). }
false;public;1;4;;@ModelAttribute public C4 getC4(Model model) throws IOException {     return updateAndReturn(model, "getC4", new C4()). }
false;public;3;4;;@ModelAttribute public B1 getB1(@ModelAttribute C1 c1, @ModelAttribute C2 c2, Model model) throws IOException {     return updateAndReturn(model, "getB1", new B1()). }
false;public;3;4;;@ModelAttribute public B2 getB2(@ModelAttribute C3 c3, @ModelAttribute C4 c4, Model model) throws IOException {     return updateAndReturn(model, "getB2", new B2()). }
false;public;3;4;;@ModelAttribute public A getA(@ModelAttribute B1 b1, @ModelAttribute B2 b2, Model model) throws IOException {     return updateAndReturn(model, "getA", new A()). }
false;public;1;4;;@ModelAttribute public A getA(Model model) throws IOException {     return updateAndReturn(model, "getA", new A()). }
false;public;2;4;;@ModelAttribute public C1 getC1(@ModelAttribute B1 b1, Model model) throws IOException {     return updateAndReturn(model, "getC1", new C1()). }
false;public;2;4;;@ModelAttribute public C2 getC2(@ModelAttribute B1 b1, Model model) throws IOException {     return updateAndReturn(model, "getC2", new C2()). }
false;public;2;4;;@ModelAttribute public C3 getC3(@ModelAttribute B2 b2, Model model) throws IOException {     return updateAndReturn(model, "getC3", new C3()). }
false;public;2;4;;@ModelAttribute public C4 getC4(@ModelAttribute B2 b2, Model model) throws IOException {     return updateAndReturn(model, "getC4", new C4()). }
false;public;1;5;;@Override public boolean matches(Method method) {     return ((AnnotationUtils.findAnnotation(method, RequestMapping.class) == null) && (AnnotationUtils.findAnnotation(method, ModelAttribute.class) != null)). }
