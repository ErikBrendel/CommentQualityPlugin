commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void getScopeSunnyDay() {     assertEquals("page", TagUtils.SCOPE_PAGE).     assertEquals("application", TagUtils.SCOPE_APPLICATION).     assertEquals("session", TagUtils.SCOPE_SESSION).     assertEquals("request", TagUtils.SCOPE_REQUEST).     assertEquals(PageContext.PAGE_SCOPE, TagUtils.getScope("page")).     assertEquals(PageContext.REQUEST_SCOPE, TagUtils.getScope("request")).     assertEquals(PageContext.SESSION_SCOPE, TagUtils.getScope("session")).     assertEquals(PageContext.APPLICATION_SCOPE, TagUtils.getScope("application")).     // non-existent scope     assertEquals("TagUtils.getScope(..) with a non-existent scope argument must " + "just return the default scope (PageContext.PAGE_SCOPE).", PageContext.PAGE_SCOPE, TagUtils.getScope("bla")). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void getScopeWithNullScopeArgument() {     TagUtils.getScope(null). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void hasAncestorOfTypeWhereAncestorTagIsNotATagType() throws Exception {     assertFalse(TagUtils.hasAncestorOfType(new TagSupport(), String.class)). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void hasAncestorOfTypeWithNullTagArgument() throws Exception {     assertFalse(TagUtils.hasAncestorOfType(null, TagSupport.class)). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void hasAncestorOfTypeWithNullAncestorTagClassArgument() throws Exception {     assertFalse(TagUtils.hasAncestorOfType(new TagSupport(), null)). }
false;public;0;11;;@Test public void hasAncestorOfTypeTrueScenario() throws Exception {     Tag a = new TagA().     Tag b = new TagB().     Tag c = new TagC().     a.setParent(b).     b.setParent(c).     assertTrue(TagUtils.hasAncestorOfType(a, TagC.class)). }
false;public;0;11;;@Test public void hasAncestorOfTypeFalseScenario() throws Exception {     Tag a = new TagA().     Tag b = new TagB().     Tag anotherB = new TagB().     a.setParent(b).     b.setParent(anotherB).     assertFalse(TagUtils.hasAncestorOfType(a, TagC.class)). }
false;public;0;4;;@Test public void hasAncestorOfTypeWhenTagHasNoParent() throws Exception {     assertFalse(TagUtils.hasAncestorOfType(new TagA(), TagC.class)). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void assertHasAncestorOfTypeWithNullTagName() throws Exception {     TagUtils.assertHasAncestorOfType(new TagA(), TagC.class, null, "c"). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void assertHasAncestorOfTypeWithNullAncestorTagName() throws Exception {     TagUtils.assertHasAncestorOfType(new TagA(), TagC.class, "a", null). }
false;public;0;11;;@Test(expected = IllegalStateException.class) public void assertHasAncestorOfTypeThrowsExceptionOnFail() throws Exception {     Tag a = new TagA().     Tag b = new TagB().     Tag anotherB = new TagB().     a.setParent(b).     b.setParent(anotherB).     TagUtils.assertHasAncestorOfType(a, TagC.class, "a", "c"). }
false;public;0;11;;@Test public void testAssertHasAncestorOfTypeDoesNotThrowExceptionOnPass() throws Exception {     Tag a = new TagA().     Tag b = new TagB().     Tag c = new TagC().     a.setParent(b).     b.setParent(c).     TagUtils.assertHasAncestorOfType(a, TagC.class, "a", "c"). }
