commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() throws Exception {     this.testBean = new TestBean().     this.binder = new WebExchangeDataBinder(this.testBean, "person").     this.binder.registerCustomEditor(ITestBean.class, new TestBeanPropertyEditor()). }
false;public;0;10;;@Test public void testBindingWithNestedObjectCreation() throws Exception {     MultiValueMap<String, String> formData = new LinkedMultiValueMap<>().     formData.add("spouse", "someValue").     formData.add("spouse.name", "test").     this.binder.bind(exchange(formData)).block(Duration.ofMillis(5000)).     assertNotNull(this.testBean.getSpouse()).     assertEquals("test", testBean.getSpouse().getName()). }
false;public;0;12;;@Test public void testFieldPrefixCausesFieldReset() throws Exception {     MultiValueMap<String, String> formData = new LinkedMultiValueMap<>().     formData.add("_postProcessed", "visible").     formData.add("postProcessed", "on").     this.binder.bind(exchange(formData)).block(Duration.ofMillis(5000)).     assertTrue(this.testBean.isPostProcessed()).     formData.remove("postProcessed").     this.binder.bind(exchange(formData)).block(Duration.ofMillis(5000)).     assertFalse(this.testBean.isPostProcessed()). }
false;public;0;14;;@Test public void testFieldPrefixCausesFieldResetWithIgnoreUnknownFields() throws Exception {     this.binder.setIgnoreUnknownFields(false).     MultiValueMap<String, String> formData = new LinkedMultiValueMap<>().     formData.add("_postProcessed", "visible").     formData.add("postProcessed", "on").     this.binder.bind(exchange(formData)).block(Duration.ofMillis(5000)).     assertTrue(this.testBean.isPostProcessed()).     formData.remove("postProcessed").     this.binder.bind(exchange(formData)).block(Duration.ofMillis(5000)).     assertFalse(this.testBean.isPostProcessed()). }
false;public;0;12;;@Test public void testFieldDefault() throws Exception {     MultiValueMap<String, String> formData = new LinkedMultiValueMap<>().     formData.add("!postProcessed", "off").     formData.add("postProcessed", "on").     this.binder.bind(exchange(formData)).block(Duration.ofMillis(5000)).     assertTrue(this.testBean.isPostProcessed()).     formData.remove("postProcessed").     this.binder.bind(exchange(formData)).block(Duration.ofMillis(5000)).     assertFalse(this.testBean.isPostProcessed()). }
false;public;0;17;;@Test public void testFieldDefaultPreemptsFieldMarker() throws Exception {     MultiValueMap<String, String> formData = new LinkedMultiValueMap<>().     formData.add("!postProcessed", "on").     formData.add("_postProcessed", "visible").     formData.add("postProcessed", "on").     this.binder.bind(exchange(formData)).block(Duration.ofMillis(5000)).     assertTrue(this.testBean.isPostProcessed()).     formData.remove("postProcessed").     this.binder.bind(exchange(formData)).block(Duration.ofMillis(5000)).     assertTrue(this.testBean.isPostProcessed()).     formData.remove("!postProcessed").     this.binder.bind(exchange(formData)).block(Duration.ofMillis(5000)).     assertFalse(this.testBean.isPostProcessed()). }
false;public;0;12;;@Test public void testFieldDefaultNonBoolean() throws Exception {     MultiValueMap<String, String> formData = new LinkedMultiValueMap<>().     formData.add("!name", "anonymous").     formData.add("name", "Scott").     this.binder.bind(exchange(formData)).block(Duration.ofMillis(5000)).     assertEquals("Scott", this.testBean.getName()).     formData.remove("name").     this.binder.bind(exchange(formData)).block(Duration.ofMillis(5000)).     assertEquals("anonymous", this.testBean.getName()). }
false;public;0;14;;@Test public void testWithCommaSeparatedStringArray() throws Exception {     MultiValueMap<String, String> formData = new LinkedMultiValueMap<>().     formData.add("stringArray", "bar").     formData.add("stringArray", "abc").     formData.add("stringArray", "123,def").     this.binder.bind(exchange(formData)).block(Duration.ofMillis(5000)).     assertEquals("Expected all three items to be bound", 3, this.testBean.getStringArray().length).     formData.remove("stringArray").     formData.add("stringArray", "123,def").     this.binder.bind(exchange(formData)).block(Duration.ofMillis(5000)).     assertEquals("Expected only 1 item to be bound", 1, this.testBean.getStringArray().length). }
false;public;0;10;;@Test public void testBindingWithNestedObjectCreationAndWrongOrder() throws Exception {     MultiValueMap<String, String> formData = new LinkedMultiValueMap<>().     formData.add("spouse.name", "test").     formData.add("spouse", "someValue").     this.binder.bind(exchange(formData)).block(Duration.ofMillis(5000)).     assertNotNull(this.testBean.getSpouse()).     assertEquals("test", this.testBean.getSpouse().getName()). }
false;public;0;9;;@Test public void testBindingWithQueryParams() throws Exception {     String url = "/path?spouse=someValue&spouse.name=test".     ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.post(url)).     this.binder.bind(exchange).block(Duration.ofSeconds(5)).     assertNotNull(this.testBean.getSpouse()).     assertEquals("test", this.testBean.getSpouse().getName()). }
false;public;0;25;;@Test public void testMultipart() throws Exception {     MultipartBean bean = new MultipartBean().     WebExchangeDataBinder binder = new WebExchangeDataBinder(bean).     MultiValueMap<String, Object> data = new LinkedMultiValueMap<>().     data.add("name", "bar").     data.add("someList", "123").     data.add("someList", "abc").     data.add("someArray", "dec").     data.add("someArray", "456").     data.add("part", new ClassPathResource("org/springframework/http/codec/multipart/foo.txt")).     data.add("somePartList", new ClassPathResource("org/springframework/http/codec/multipart/foo.txt")).     data.add("somePartList", new ClassPathResource("org/springframework/http/server/reactive/spring.png")).     binder.bind(exchangeMultipart(data)).block(Duration.ofMillis(5000)).     assertEquals("bar", bean.getName()).     assertEquals(Arrays.asList("123", "abc"), bean.getSomeList()).     assertArrayEquals(new String[] { "dec", "456" }, bean.getSomeArray()).     assertEquals("foo.txt", bean.getPart().filename()).     assertEquals(2, bean.getSomePartList().size()).     assertEquals("foo.txt", bean.getSomePartList().get(0).filename()).     assertEquals("spring.png", bean.getSomePartList().get(1).filename()). }
false;private;1;14;;private ServerWebExchange exchange(MultiValueMap<String, String> formData) {     MockClientHttpRequest request = new MockClientHttpRequest(HttpMethod.POST, "/").     new FormHttpMessageWriter().write(Mono.just(formData), forClassWithGenerics(MultiValueMap.class, String.class, String.class), MediaType.APPLICATION_FORM_URLENCODED, request, Collections.emptyMap()).block().     return MockServerWebExchange.from(MockServerHttpRequest.post("/").contentType(MediaType.APPLICATION_FORM_URLENCODED).body(request.getBody())). }
false;private;1;12;;private ServerWebExchange exchangeMultipart(MultiValueMap<String, ?> multipartData) {     MockClientHttpRequest request = new MockClientHttpRequest(HttpMethod.POST, "/").     new MultipartHttpMessageWriter().write(Mono.just(multipartData), forClass(MultiValueMap.class), MediaType.MULTIPART_FORM_DATA, request, Collections.emptyMap()).block().     return MockServerWebExchange.from(MockServerHttpRequest.post("/").contentType(request.getHeaders().getContentType()).body(request.getBody())). }
false;public;1;4;;@Override public void setAsText(String text) {     setValue(new TestBean()). }
false;public;0;3;;public String getName() {     return this.name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public List<?> getSomeList() {     return this.someList. }
false;public;1;3;;public void setSomeList(List<?> someList) {     this.someList = someList. }
false;public;0;3;;public String[] getSomeArray() {     return this.someArray. }
false;public;1;3;;public void setSomeArray(String[] someArray) {     this.someArray = someArray. }
false;public;0;3;;public FilePart getPart() {     return this.part. }
false;public;1;3;;public void setPart(FilePart part) {     this.part = part. }
false;public;0;3;;public List<FilePart> getSomePartList() {     return this.somePartList. }
false;public;1;3;;public void setSomePartList(List<FilePart> somePartList) {     this.somePartList = somePartList. }
