commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test @SuppressWarnings("resource") public void testLoadedConfigClass() {     ApplicationContext context = new AnnotationConfigApplicationContext(InvokerAutowiringConfig.class).     MyBean myBean = context.getBean("myBean", MyBean.class).     assertSame(context.getBean("myService"), myBean.myService).     myBean.myService.handle().     myBean.myService.handleAsync(). }
false;public;0;11;;@Test @SuppressWarnings("resource") public void testNonLoadedConfigClass() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.registerBeanDefinition("config", new RootBeanDefinition(InvokerAutowiringConfig.class.getName())).     context.refresh().     MyBean myBean = context.getBean("myBean", MyBean.class).     assertSame(context.getBean("myService"), myBean.myService).     myBean.myService.handle().     myBean.myService.handleAsync(). }
false;public;0;11;;@Test @SuppressWarnings("resource") public void withConfigurationClassWithPlainFactoryBean() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(ConfigWithPlainFactoryBean.class).     context.refresh().     MyBean myBean = context.getBean("myBean", MyBean.class).     assertSame(context.getBean("myService"), myBean.myService).     myBean.myService.handle().     myBean.myService.handleAsync(). }
false;public;0;1;;public void handle().
false;public;0;2;;@Async public void handleAsync().
false;public;0;4;;@Bean public AsyncAnnotationBeanPostProcessor aabpp() {     return new AsyncAnnotationBeanPostProcessor(). }
false;public;0;8;;@Bean public HttpInvokerProxyFactoryBean myService() {     HttpInvokerProxyFactoryBean factory = new HttpInvokerProxyFactoryBean().     factory.setServiceUrl("/svc/dummy").     factory.setServiceInterface(MyService.class).     factory.setHttpInvokerRequestExecutor((config, invocation) -> new RemoteInvocationResult()).     return factory. }
false;public;0;4;;@Bean public FactoryBean<String> myOtherService() {     throw new IllegalStateException("Don't ever call me"). }
false;public;0;4;;@Bean public MyBean myBean() {     return new MyBean(). }
false;public;0;9;;@Bean public HttpInvokerProxyFactoryBean myService() {     String name = env.getProperty("testbean.name").     HttpInvokerProxyFactoryBean factory = new HttpInvokerProxyFactoryBean().     factory.setServiceUrl("/svc/" + name).     factory.setServiceInterface(MyService.class).     factory.setHttpInvokerRequestExecutor((config, invocation) -> new RemoteInvocationResult()).     return factory. }
