commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setup() throws IOException {     converter = new SourceHttpMessageConverter<>().     Resource external = new ClassPathResource("external.txt", getClass()).     bodyExternal = "<!DOCTYPE root SYSTEM \"http://192.168.28.42/1.jsp\" [" + "  <!ELEMENT root ANY >\n" + "  <!ENTITY ext SYSTEM \"" + external.getURI() + "\" >]><root>&ext.</root>". }
false;public;0;5;;@Test public void canRead() {     assertTrue(converter.canRead(Source.class, new MediaType("application", "xml"))).     assertTrue(converter.canRead(Source.class, new MediaType("application", "soap+xml"))). }
false;public;0;6;;@Test public void canWrite() {     assertTrue(converter.canWrite(Source.class, new MediaType("application", "xml"))).     assertTrue(converter.canWrite(Source.class, new MediaType("application", "soap+xml"))).     assertTrue(converter.canWrite(Source.class, MediaType.ALL)). }
false;public;0;8;;@Test public void readDOMSource() throws Exception {     MockHttpInputMessage inputMessage = new MockHttpInputMessage(BODY.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "xml")).     DOMSource result = (DOMSource) converter.read(DOMSource.class, inputMessage).     Document document = (Document) result.getNode().     assertEquals("Invalid result", "root", document.getDocumentElement().getLocalName()). }
false;public;0;10;;@Test public void readDOMSourceExternal() throws Exception {     MockHttpInputMessage inputMessage = new MockHttpInputMessage(bodyExternal.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "xml")).     converter.setSupportDtd(true).     DOMSource result = (DOMSource) converter.read(DOMSource.class, inputMessage).     Document document = (Document) result.getNode().     assertEquals("Invalid result", "root", document.getDocumentElement().getLocalName()).     assertNotEquals("Invalid result", "Foo Bar", document.getDocumentElement().getTextContent()). }
false;public;0;26;;@Test public void readDomSourceWithXmlBomb() throws Exception {     // https://en.wikipedia.org/wiki/Billion_laughs     // https://msdn.microsoft.com/en-us/magazine/ee335713.aspx     String content = "<?xml version=\"1.0\"?>\n" + "<!DOCTYPE lolz [\n" + " <!ENTITY lol \"lol\">\n" + " <!ELEMENT lolz (#PCDATA)>\n" + " <!ENTITY lol1 \"&lol.&lol.&lol.&lol.&lol.&lol.&lol.&lol.&lol.&lol.\">\n" + " <!ENTITY lol2 \"&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.\">\n" + " <!ENTITY lol3 \"&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.\">\n" + " <!ENTITY lol4 \"&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.\">\n" + " <!ENTITY lol5 \"&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.\">\n" + " <!ENTITY lol6 \"&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.\">\n" + " <!ENTITY lol7 \"&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.\">\n" + " <!ENTITY lol8 \"&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.\">\n" + " <!ENTITY lol9 \"&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.\">\n" + "]>\n" + "<root>&lol9.</root>".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(content.getBytes("UTF-8")).     this.thrown.expect(HttpMessageNotReadableException.class).     this.thrown.expectMessage("DOCTYPE").     this.converter.read(DOMSource.class, inputMessage). }
false;public;0;9;;@Test public void readSAXSource() throws Exception {     MockHttpInputMessage inputMessage = new MockHttpInputMessage(BODY.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "xml")).     SAXSource result = (SAXSource) converter.read(SAXSource.class, inputMessage).     InputSource inputSource = result.getInputSource().     String s = FileCopyUtils.copyToString(new InputStreamReader(inputSource.getByteStream())).     assertThat("Invalid result", s, isSimilarTo(BODY)). }
false;public;3;5;;@Override public void characters(char[] ch, int start, int length) {     String s = new String(ch, start, length).     assertNotEquals("Invalid result", "Foo Bar", s). }
false;public;0;17;;@Test public void readSAXSourceExternal() throws Exception {     MockHttpInputMessage inputMessage = new MockHttpInputMessage(bodyExternal.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "xml")).     converter.setSupportDtd(true).     SAXSource result = (SAXSource) converter.read(SAXSource.class, inputMessage).     InputSource inputSource = result.getInputSource().     XMLReader reader = result.getXMLReader().     reader.setContentHandler(new DefaultHandler() {          @Override         public void characters(char[] ch, int start, int length) {             String s = new String(ch, start, length).             assertNotEquals("Invalid result", "Foo Bar", s).         }     }).     reader.parse(inputSource). }
false;public;0;30;;@Test public void readSAXSourceWithXmlBomb() throws Exception {     // https://en.wikipedia.org/wiki/Billion_laughs     // https://msdn.microsoft.com/en-us/magazine/ee335713.aspx     String content = "<?xml version=\"1.0\"?>\n" + "<!DOCTYPE lolz [\n" + " <!ENTITY lol \"lol\">\n" + " <!ELEMENT lolz (#PCDATA)>\n" + " <!ENTITY lol1 \"&lol.&lol.&lol.&lol.&lol.&lol.&lol.&lol.&lol.&lol.\">\n" + " <!ENTITY lol2 \"&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.\">\n" + " <!ENTITY lol3 \"&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.\">\n" + " <!ENTITY lol4 \"&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.\">\n" + " <!ENTITY lol5 \"&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.\">\n" + " <!ENTITY lol6 \"&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.\">\n" + " <!ENTITY lol7 \"&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.\">\n" + " <!ENTITY lol8 \"&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.\">\n" + " <!ENTITY lol9 \"&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.\">\n" + "]>\n" + "<root>&lol9.</root>".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(content.getBytes("UTF-8")).     SAXSource result = (SAXSource) this.converter.read(SAXSource.class, inputMessage).     this.thrown.expect(SAXException.class).     this.thrown.expectMessage("DOCTYPE").     InputSource inputSource = result.getInputSource().     XMLReader reader = result.getXMLReader().     reader.parse(inputSource). }
false;public;0;14;;@Test public void readStAXSource() throws Exception {     MockHttpInputMessage inputMessage = new MockHttpInputMessage(BODY.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "xml")).     StAXSource result = (StAXSource) converter.read(StAXSource.class, inputMessage).     XMLStreamReader streamReader = result.getXMLStreamReader().     assertTrue(streamReader.hasNext()).     streamReader.nextTag().     String s = streamReader.getLocalName().     assertEquals("root", s).     s = streamReader.getElementText().     assertEquals("Hello World", s).     streamReader.close(). }
false;public;0;21;;@Test public void readStAXSourceExternal() throws Exception {     MockHttpInputMessage inputMessage = new MockHttpInputMessage(bodyExternal.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "xml")).     converter.setSupportDtd(true).     StAXSource result = (StAXSource) converter.read(StAXSource.class, inputMessage).     XMLStreamReader streamReader = result.getXMLStreamReader().     assertTrue(streamReader.hasNext()).     streamReader.next().     streamReader.next().     String s = streamReader.getLocalName().     assertEquals("root", s).     try {         s = streamReader.getElementText().         assertNotEquals("Foo Bar", s).     } catch (XMLStreamException ex) {     // Some parsers raise a parse exception     }     streamReader.close(). }
false;public;0;32;;@Test public void readStAXSourceWithXmlBomb() throws Exception {     // https://en.wikipedia.org/wiki/Billion_laughs     // https://msdn.microsoft.com/en-us/magazine/ee335713.aspx     String content = "<?xml version=\"1.0\"?>\n" + "<!DOCTYPE lolz [\n" + " <!ENTITY lol \"lol\">\n" + " <!ELEMENT lolz (#PCDATA)>\n" + " <!ENTITY lol1 \"&lol.&lol.&lol.&lol.&lol.&lol.&lol.&lol.&lol.&lol.\">\n" + " <!ENTITY lol2 \"&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.\">\n" + " <!ENTITY lol3 \"&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.\">\n" + " <!ENTITY lol4 \"&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.\">\n" + " <!ENTITY lol5 \"&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.\">\n" + " <!ENTITY lol6 \"&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.\">\n" + " <!ENTITY lol7 \"&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.\">\n" + " <!ENTITY lol8 \"&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.\">\n" + " <!ENTITY lol9 \"&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.\">\n" + "]>\n" + "<root>&lol9.</root>".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(content.getBytes("UTF-8")).     StAXSource result = (StAXSource) this.converter.read(StAXSource.class, inputMessage).     XMLStreamReader streamReader = result.getXMLStreamReader().     assertTrue(streamReader.hasNext()).     streamReader.next().     streamReader.next().     String s = streamReader.getLocalName().     assertEquals("root", s).     this.thrown.expectMessage("\"lol9\"").     s = streamReader.getElementText(). }
false;public;0;8;;@Test public void readStreamSource() throws Exception {     MockHttpInputMessage inputMessage = new MockHttpInputMessage(BODY.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "xml")).     StreamSource result = (StreamSource) converter.read(StreamSource.class, inputMessage).     String s = FileCopyUtils.copyToString(new InputStreamReader(result.getInputStream())).     assertThat("Invalid result", s, isSimilarTo(BODY)). }
false;public;0;6;;@Test public void readSource() throws Exception {     MockHttpInputMessage inputMessage = new MockHttpInputMessage(BODY.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "xml")).     converter.read(Source.class, inputMessage). }
false;public;0;19;;@Test public void writeDOMSource() throws Exception {     DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance().     documentBuilderFactory.setNamespaceAware(true).     Document document = documentBuilderFactory.newDocumentBuilder().newDocument().     Element rootElement = document.createElement("root").     document.appendChild(rootElement).     rootElement.setTextContent("Hello World").     DOMSource domSource = new DOMSource(document).     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     converter.write(domSource, null, outputMessage).     assertThat("Invalid result", outputMessage.getBodyAsString(StandardCharsets.UTF_8), isSimilarTo("<root>Hello World</root>")).     assertEquals("Invalid content-type", new MediaType("application", "xml"), outputMessage.getHeaders().getContentType()).     assertEquals("Invalid content-length", outputMessage.getBodyAsBytes().length, outputMessage.getHeaders().getContentLength()). }
false;public;0;12;;@Test public void writeSAXSource() throws Exception {     String xml = "<root>Hello World</root>".     SAXSource saxSource = new SAXSource(new InputSource(new StringReader(xml))).     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     converter.write(saxSource, null, outputMessage).     assertThat("Invalid result", outputMessage.getBodyAsString(StandardCharsets.UTF_8), isSimilarTo("<root>Hello World</root>")).     assertEquals("Invalid content-type", new MediaType("application", "xml"), outputMessage.getHeaders().getContentType()). }
false;public;0;12;;@Test public void writeStreamSource() throws Exception {     String xml = "<root>Hello World</root>".     StreamSource streamSource = new StreamSource(new StringReader(xml)).     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     converter.write(streamSource, null, outputMessage).     assertThat("Invalid result", outputMessage.getBodyAsString(StandardCharsets.UTF_8), isSimilarTo("<root>Hello World</root>")).     assertEquals("Invalid content-type", new MediaType("application", "xml"), outputMessage.getHeaders().getContentType()). }
