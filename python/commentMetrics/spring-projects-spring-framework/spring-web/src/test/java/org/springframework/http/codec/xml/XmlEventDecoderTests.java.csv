commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void toXMLEventsAalto() {     Flux<XMLEvent> events = this.decoder.decode(stringBuffer(XML), null, null, Collections.emptyMap()).     StepVerifier.create(events).consumeNextWith(e -> assertTrue(e.isStartDocument())).consumeNextWith(e -> assertStartElement(e, "pojo")).consumeNextWith(e -> assertStartElement(e, "foo")).consumeNextWith(e -> assertCharacters(e, "foofoo")).consumeNextWith(e -> assertEndElement(e, "foo")).consumeNextWith(e -> assertStartElement(e, "bar")).consumeNextWith(e -> assertCharacters(e, "barbar")).consumeNextWith(e -> assertEndElement(e, "bar")).consumeNextWith(e -> assertEndElement(e, "pojo")).expectComplete().verify(). }
false;public;0;21;;@Test public void toXMLEventsNonAalto() {     decoder.useAalto = false.     Flux<XMLEvent> events = this.decoder.decode(stringBuffer(XML), null, null, Collections.emptyMap()).     StepVerifier.create(events).consumeNextWith(e -> assertTrue(e.isStartDocument())).consumeNextWith(e -> assertStartElement(e, "pojo")).consumeNextWith(e -> assertStartElement(e, "foo")).consumeNextWith(e -> assertCharacters(e, "foofoo")).consumeNextWith(e -> assertEndElement(e, "foo")).consumeNextWith(e -> assertStartElement(e, "bar")).consumeNextWith(e -> assertCharacters(e, "barbar")).consumeNextWith(e -> assertEndElement(e, "bar")).consumeNextWith(e -> assertEndElement(e, "pojo")).consumeNextWith(e -> assertTrue(e.isEndDocument())).expectComplete().verify(). }
false;public;0;15;;@Test public void decodeErrorAalto() {     Flux<DataBuffer> source = Flux.concat(stringBuffer("<pojo>"), Flux.error(new RuntimeException())).     Flux<XMLEvent> events = this.decoder.decode(source, null, null, Collections.emptyMap()).     StepVerifier.create(events).consumeNextWith(e -> assertTrue(e.isStartDocument())).consumeNextWith(e -> assertStartElement(e, "pojo")).expectError(RuntimeException.class).verify(). }
false;public;0;15;;@Test public void decodeErrorNonAalto() {     decoder.useAalto = false.     Flux<DataBuffer> source = Flux.concat(stringBuffer("<pojo>"), Flux.error(new RuntimeException())).     Flux<XMLEvent> events = this.decoder.decode(source, null, null, Collections.emptyMap()).     StepVerifier.create(events).expectError(RuntimeException.class).verify(). }
false;private,static;2;4;;private static void assertStartElement(XMLEvent event, String expectedLocalName) {     assertTrue(event.isStartElement()).     assertEquals(expectedLocalName, event.asStartElement().getName().getLocalPart()). }
false;private,static;2;4;;private static void assertEndElement(XMLEvent event, String expectedLocalName) {     assertTrue(event + " is no end element", event.isEndElement()).     assertEquals(expectedLocalName, event.asEndElement().getName().getLocalPart()). }
false;private,static;2;4;;private static void assertCharacters(XMLEvent event, String expectedData) {     assertTrue(event.isCharacters()).     assertEquals(expectedData, event.asCharacters().getData()). }
false;private;1;8;;private Mono<DataBuffer> stringBuffer(String value) {     return Mono.defer(() -> {         byte[] bytes = value.getBytes(StandardCharsets.UTF_8).         DataBuffer buffer = this.bufferFactory.allocateBuffer(bytes.length).         buffer.write(bytes).         return Mono.just(buffer).     }). }
