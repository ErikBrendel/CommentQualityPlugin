commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() throws Exception {     this.beanFactory.registerScope("session", new SessionScope()).     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(this.beanFactory).     reader.loadBeanDefinitions(new ClassPathResource("sessionScopeTests.xml", getClass())). }
false;public;0;4;;@After public void resetRequestAttributes() {     RequestContextHolder.setRequestAttributes(null). }
false;public;2;5;;@Override public void setAttribute(String name, Object value) {     super.setAttribute(name, value).     count.incrementAndGet(). }
false;public;0;28;;@Test public void getFromScope() throws Exception {     AtomicInteger count = new AtomicInteger().     MockHttpSession session = new MockHttpSession() {          @Override         public void setAttribute(String name, Object value) {             super.setAttribute(name, value).             count.incrementAndGet().         }     }.     MockHttpServletRequest request = new MockHttpServletRequest().     request.setSession(session).     ServletRequestAttributes requestAttributes = new ServletRequestAttributes(request).     RequestContextHolder.setRequestAttributes(requestAttributes).     String name = "sessionScopedObject".     assertNull(session.getAttribute(name)).     TestBean bean = (TestBean) this.beanFactory.getBean(name).     assertEquals(1, count.intValue()).     assertEquals(session.getAttribute(name), bean).     assertSame(bean, this.beanFactory.getBean(name)).     assertEquals(1, count.intValue()).     // should re-propagate updated attribute     requestAttributes.requestCompleted().     assertEquals(session.getAttribute(name), bean).     assertEquals(2, count.intValue()). }
false;public;2;5;;@Override public void setAttribute(String name, Object value) {     super.setAttribute(name, value).     count.incrementAndGet(). }
false;public;0;25;;@Test public void getFromScopeWithSingleAccess() throws Exception {     AtomicInteger count = new AtomicInteger().     MockHttpSession session = new MockHttpSession() {          @Override         public void setAttribute(String name, Object value) {             super.setAttribute(name, value).             count.incrementAndGet().         }     }.     MockHttpServletRequest request = new MockHttpServletRequest().     request.setSession(session).     ServletRequestAttributes requestAttributes = new ServletRequestAttributes(request).     RequestContextHolder.setRequestAttributes(requestAttributes).     String name = "sessionScopedObject".     assertNull(session.getAttribute(name)).     TestBean bean = (TestBean) this.beanFactory.getBean(name).     assertEquals(1, count.intValue()).     // should re-propagate updated attribute     requestAttributes.requestCompleted().     assertEquals(session.getAttribute(name), bean).     assertEquals(2, count.intValue()). }
false;public;0;18;;@Test public void destructionAtSessionTermination() throws Exception {     MockHttpSession session = new MockHttpSession().     MockHttpServletRequest request = new MockHttpServletRequest().     request.setSession(session).     ServletRequestAttributes requestAttributes = new ServletRequestAttributes(request).     RequestContextHolder.setRequestAttributes(requestAttributes).     String name = "sessionScopedDisposableObject".     assertNull(session.getAttribute(name)).     DerivedTestBean bean = (DerivedTestBean) this.beanFactory.getBean(name).     assertEquals(session.getAttribute(name), bean).     assertSame(bean, this.beanFactory.getBean(name)).     requestAttributes.requestCompleted().     session.invalidate().     assertTrue(bean.wasDestroyed()). }
false;public;0;4;;@Test public void destructionWithSessionSerialization() throws Exception {     doTestDestructionWithSessionSerialization(false). }
false;public;0;5;;@Test public void destructionWithSessionSerializationAndBeanPostProcessor() throws Exception {     this.beanFactory.addBeanPostProcessor(new CustomDestructionAwareBeanPostProcessor()).     doTestDestructionWithSessionSerialization(false). }
false;public;0;5;;@Test public void destructionWithSessionSerializationAndSerializableBeanPostProcessor() throws Exception {     this.beanFactory.addBeanPostProcessor(new CustomSerializableDestructionAwareBeanPostProcessor()).     doTestDestructionWithSessionSerialization(true). }
false;private;1;45;;private void doTestDestructionWithSessionSerialization(boolean beanNameReset) throws Exception {     Serializable serializedState = null.     MockHttpSession session = new MockHttpSession().     MockHttpServletRequest request = new MockHttpServletRequest().     request.setSession(session).     ServletRequestAttributes requestAttributes = new ServletRequestAttributes(request).     RequestContextHolder.setRequestAttributes(requestAttributes).     String name = "sessionScopedDisposableObject".     assertNull(session.getAttribute(name)).     DerivedTestBean bean = (DerivedTestBean) this.beanFactory.getBean(name).     assertEquals(session.getAttribute(name), bean).     assertSame(bean, this.beanFactory.getBean(name)).     requestAttributes.requestCompleted().     serializedState = session.serializeState().     assertFalse(bean.wasDestroyed()).     serializedState = (Serializable) SerializationTestUtils.serializeAndDeserialize(serializedState).     session = new MockHttpSession().     session.deserializeState(serializedState).     request = new MockHttpServletRequest().     request.setSession(session).     requestAttributes = new ServletRequestAttributes(request).     RequestContextHolder.setRequestAttributes(requestAttributes).     name = "sessionScopedDisposableObject".     assertNotNull(session.getAttribute(name)).     bean = (DerivedTestBean) this.beanFactory.getBean(name).     assertEquals(session.getAttribute(name), bean).     assertSame(bean, this.beanFactory.getBean(name)).     requestAttributes.requestCompleted().     session.invalidate().     assertTrue(bean.wasDestroyed()).     if (beanNameReset) {         assertNull(bean.getBeanName()).     } else {         assertNotNull(bean.getBeanName()).     } }
false;public;2;4;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     return bean. }
false;public;2;4;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {     return bean. }
false;public;2;3;;@Override public void postProcessBeforeDestruction(Object bean, String beanName) throws BeansException { }
false;public;1;4;;@Override public boolean requiresDestruction(Object bean) {     return true. }
false;public;2;4;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     return bean. }
false;public;2;4;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {     return bean. }
false;public;2;6;;@Override public void postProcessBeforeDestruction(Object bean, String beanName) throws BeansException {     if (bean instanceof BeanNameAware) {         ((BeanNameAware) bean).setBeanName(null).     } }
false;public;1;4;;@Override public boolean requiresDestruction(Object bean) {     return true. }
