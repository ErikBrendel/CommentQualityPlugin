commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void setSessionId() {     MockServerHttpRequest request = MockServerHttpRequest.get("https://example.org/path").build().     MockServerWebExchange exchange = MockServerWebExchange.from(request).     this.resolver.setSessionId(exchange, "123").     MultiValueMap<String, ResponseCookie> cookies = exchange.getResponse().getCookies().     assertEquals(1, cookies.size()).     ResponseCookie cookie = cookies.getFirst(this.resolver.getCookieName()).     assertNotNull(cookie).     assertEquals("SESSION=123. Path=/. Secure. HttpOnly. SameSite=Lax", cookie.toString()). }
false;public;0;16;;@Test public void cookieInitializer() {     this.resolver.addCookieInitializer(builder -> builder.domain("example.org")).     this.resolver.addCookieInitializer(builder -> builder.sameSite("Strict")).     this.resolver.addCookieInitializer(builder -> builder.secure(false)).     MockServerHttpRequest request = MockServerHttpRequest.get("https://example.org/path").build().     MockServerWebExchange exchange = MockServerWebExchange.from(request).     this.resolver.setSessionId(exchange, "123").     MultiValueMap<String, ResponseCookie> cookies = exchange.getResponse().getCookies().     assertEquals(1, cookies.size()).     ResponseCookie cookie = cookies.getFirst(this.resolver.getCookieName()).     assertNotNull(cookie).     assertEquals("SESSION=123. Path=/. Domain=example.org. HttpOnly. SameSite=Strict", cookie.toString()). }
