commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public HttpStatus getStatusCode() {     return this.status. }
false;public;0;4;;@Override public int getRawStatusCode() {     return this.status.value(). }
false;public;0;9;;@Override public HttpHeaders getHeaders() {     String headerName = HttpHeaders.SET_COOKIE.     if (!getCookies().isEmpty() && this.headers.get(headerName) == null) {         getCookies().values().stream().flatMap(Collection::stream).forEach(cookie -> getHeaders().add(headerName, cookie.toString())).     }     return this.headers. }
false;public;0;4;;@Override public MultiValueMap<String, ResponseCookie> getCookies() {     return this.cookies. }
false;public;1;3;;public void setBody(Publisher<DataBuffer> body) {     this.body = Flux.from(body). }
false;public;1;3;;public void setBody(String body) {     setBody(body, StandardCharsets.UTF_8). }
false;public;2;4;;public void setBody(String body, Charset charset) {     DataBuffer buffer = toDataBuffer(body, charset).     this.body = Flux.just(buffer). }
false;private;2;5;;private DataBuffer toDataBuffer(String body, Charset charset) {     byte[] bytes = body.getBytes(charset).     ByteBuffer byteBuffer = ByteBuffer.wrap(bytes).     return this.bufferFactory.wrap(byteBuffer). }
false;public;0;4;;@Override public Flux<DataBuffer> getBody() {     return this.body. }
true;public;0;10;/**  * Return the response body aggregated and converted to a String using the  * charset of the Content-Type response or otherwise as "UTF-8".  */ ;/**  * Return the response body aggregated and converted to a String using the  * charset of the Content-Type response or otherwise as "UTF-8".  */ public Mono<String> getBodyAsString() {     Charset charset = getCharset().     return Flux.from(getBody()).reduce(bufferFactory.allocateBuffer(), (previous, current) -> {         previous.write(current).         DataBufferUtils.release(current).         return previous.     }).map(buffer -> dumpString(buffer, charset)). }
false;private,static;2;6;;private static String dumpString(DataBuffer buffer, Charset charset) {     Assert.notNull(charset, "'charset' must not be null").     byte[] bytes = new byte[buffer.readableByteCount()].     buffer.read(bytes).     return new String(bytes, charset). }
false;private;0;8;;private Charset getCharset() {     Charset charset = null.     MediaType contentType = getHeaders().getContentType().     if (contentType != null) {         charset = contentType.getCharset().     }     return (charset != null ? charset : StandardCharsets.UTF_8). }
