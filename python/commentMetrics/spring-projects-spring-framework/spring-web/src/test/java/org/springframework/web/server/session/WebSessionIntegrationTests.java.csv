commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected HttpHandler createHttpHandler() {     this.sessionManager = new DefaultWebSessionManager().     this.handler = new TestWebHandler().     return WebHttpHandlerBuilder.webHandler(this.handler).sessionManager(this.sessionManager).build(). }
false;public;0;17;;@Test public void createSession() throws Exception {     RequestEntity<Void> request = RequestEntity.get(createUri()).build().     ResponseEntity<Void> response = this.restTemplate.exchange(request, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     String id = extractSessionId(response.getHeaders()).     assertNotNull(id).     assertEquals(1, this.handler.getSessionRequestCount()).     request = RequestEntity.get(createUri()).header("Cookie", "SESSION=" + id).build().     response = this.restTemplate.exchange(request, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     assertNull(response.getHeaders().get("Set-Cookie")).     assertEquals(2, this.handler.getSessionRequestCount()). }
false;public;0;35;;@Test public void expiredSessionIsRecreated() throws Exception {     // First request: no session yet, new session created     RequestEntity<Void> request = RequestEntity.get(createUri()).build().     ResponseEntity<Void> response = this.restTemplate.exchange(request, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     String id = extractSessionId(response.getHeaders()).     assertNotNull(id).     assertEquals(1, this.handler.getSessionRequestCount()).     // Second request: same session     request = RequestEntity.get(createUri()).header("Cookie", "SESSION=" + id).build().     response = this.restTemplate.exchange(request, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     assertNull(response.getHeaders().get("Set-Cookie")).     assertEquals(2, this.handler.getSessionRequestCount()).     // Now fast-forward by 31 minutes     InMemoryWebSessionStore store = (InMemoryWebSessionStore) this.sessionManager.getSessionStore().     WebSession session = store.retrieveSession(id).block().     assertNotNull(session).     store.setClock(Clock.offset(store.getClock(), Duration.ofMinutes(31))).     // Third request: expired session, new session created     request = RequestEntity.get(createUri()).header("Cookie", "SESSION=" + id).build().     response = this.restTemplate.exchange(request, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     id = extractSessionId(response.getHeaders()).     assertNotNull("Expected new session id", id).     assertEquals(1, this.handler.getSessionRequestCount()). }
false;public;0;25;;@Test public void expiredSessionEnds() throws Exception {     // First request: no session yet, new session created     RequestEntity<Void> request = RequestEntity.get(createUri()).build().     ResponseEntity<Void> response = this.restTemplate.exchange(request, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     String id = extractSessionId(response.getHeaders()).     assertNotNull(id).     // Now fast-forward by 31 minutes     InMemoryWebSessionStore store = (InMemoryWebSessionStore) this.sessionManager.getSessionStore().     store.setClock(Clock.offset(store.getClock(), Duration.ofMinutes(31))).     // Second request: session expires     URI uri = new URI("http://localhost:" + this.port + "/?expire").     request = RequestEntity.get(uri).header("Cookie", "SESSION=" + id).build().     response = this.restTemplate.exchange(request, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     String value = response.getHeaders().getFirst("Set-Cookie").     assertNotNull(value).     assertTrue("Actual value: " + value, value.contains("Max-Age=0")). }
false;public;0;23;;@Test public void changeSessionId() throws Exception {     // First request: no session yet, new session created     RequestEntity<Void> request = RequestEntity.get(createUri()).build().     ResponseEntity<Void> response = this.restTemplate.exchange(request, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     String oldId = extractSessionId(response.getHeaders()).     assertNotNull(oldId).     assertEquals(1, this.handler.getSessionRequestCount()).     // Second request: session id changes     URI uri = new URI("http://localhost:" + this.port + "/?changeId").     request = RequestEntity.get(uri).header("Cookie", "SESSION=" + oldId).build().     response = this.restTemplate.exchange(request, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     String newId = extractSessionId(response.getHeaders()).     assertNotNull("Expected new session id", newId).     assertNotEquals(oldId, newId).     assertEquals(2, this.handler.getSessionRequestCount()). }
false;public;0;21;;@Test public void invalidate() throws Exception {     // First request: no session yet, new session created     RequestEntity<Void> request = RequestEntity.get(createUri()).build().     ResponseEntity<Void> response = this.restTemplate.exchange(request, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     String id = extractSessionId(response.getHeaders()).     assertNotNull(id).     // Second request: invalidates session     URI uri = new URI("http://localhost:" + this.port + "/?invalidate").     request = RequestEntity.get(uri).header("Cookie", "SESSION=" + id).build().     response = this.restTemplate.exchange(request, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     String value = response.getHeaders().getFirst("Set-Cookie").     assertNotNull(value).     assertTrue("Actual value: " + value, value.contains("Max-Age=0")). }
false;private;1;12;;private String extractSessionId(HttpHeaders headers) {     List<String> headerValues = headers.get("Set-Cookie").     assertNotNull(headerValues).     assertEquals(1, headerValues.size()).     for (String s : headerValues.get(0).split(".")) {         if (s.startsWith("SESSION=")) {             return s.substring("SESSION=".length()).         }     }     return null. }
false;private;0;3;;private URI createUri() throws URISyntaxException {     return new URI("http://localhost:" + this.port + "/"). }
false;public;0;3;;public int getSessionRequestCount() {     return this.currentValue.get(). }
false;public;1;18;;@Override public Mono<Void> handle(ServerWebExchange exchange) {     if (exchange.getRequest().getQueryParams().containsKey("expire")) {         return exchange.getSession().doOnNext(session -> {         // Don't do anything, leave it expired...         }).then().     } else if (exchange.getRequest().getQueryParams().containsKey("changeId")) {         return exchange.getSession().flatMap(session -> session.changeSessionId().doOnSuccess(aVoid -> updateSessionAttribute(session))).     } else if (exchange.getRequest().getQueryParams().containsKey("invalidate")) {         return exchange.getSession().doOnNext(WebSession::invalidate).then().     } else {         return exchange.getSession().doOnSuccess(this::updateSessionAttribute).then().     } }
false;private;1;5;;private void updateSessionAttribute(WebSession session) {     int value = session.getAttributeOrDefault("counter", 0).     session.getAttributes().put("counter", ++value).     this.currentValue.set(value). }
