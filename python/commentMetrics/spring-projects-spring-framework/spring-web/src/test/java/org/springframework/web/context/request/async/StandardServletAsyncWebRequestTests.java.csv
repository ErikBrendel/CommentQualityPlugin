commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setup() {     this.request = new MockHttpServletRequest().     this.request.setAsyncSupported(true).     this.response = new MockHttpServletResponse().     this.asyncRequest = new StandardServletAsyncWebRequest(this.request, this.response).     this.asyncRequest.setTimeout(44 * 1000L). }
false;public;0;6;;@Test public void isAsyncStarted() throws Exception {     assertFalse(this.asyncRequest.isAsyncStarted()).     this.asyncRequest.startAsync().     assertTrue(this.asyncRequest.isAsyncStarted()). }
false;public;0;10;;@Test public void startAsync() throws Exception {     this.asyncRequest.startAsync().     MockAsyncContext context = (MockAsyncContext) this.request.getAsyncContext().     assertNotNull(context).     assertEquals("Timeout value not set", 44 * 1000, context.getTimeout()).     assertEquals(1, context.getListeners().size()).     assertSame(this.asyncRequest, context.getListeners().get(0)). }
false;public;0;11;;@Test public void startAsyncMultipleTimes() throws Exception {     this.asyncRequest.startAsync().     this.asyncRequest.startAsync().     this.asyncRequest.startAsync().     // idempotent     this.asyncRequest.startAsync().     MockAsyncContext context = (MockAsyncContext) this.request.getAsyncContext().     assertNotNull(context).     assertEquals(1, context.getListeners().size()). }
false;public;0;11;;@Test public void startAsyncNotSupported() throws Exception {     this.request.setAsyncSupported(false).     try {         this.asyncRequest.startAsync().         fail("expected exception").     } catch (IllegalStateException ex) {         assertThat(ex.getMessage(), containsString("Async support must be enabled")).     } }
false;public;0;11;;@Test public void startAsyncAfterCompleted() throws Exception {     this.asyncRequest.onComplete(new AsyncEvent(new MockAsyncContext(this.request, this.response))).     try {         this.asyncRequest.startAsync().         fail("expected exception").     } catch (IllegalStateException ex) {         assertEquals("Async processing has already completed", ex.getMessage()).     } }
false;public;0;5;;@Test public void onTimeoutDefaultBehavior() throws Exception {     this.asyncRequest.onTimeout(new AsyncEvent(new MockAsyncContext(this.request, this.response))).     assertEquals(200, this.response.getStatus()). }
false;public;0;7;;@Test public void onTimeoutHandler() throws Exception {     Runnable timeoutHandler = mock(Runnable.class).     this.asyncRequest.addTimeoutHandler(timeoutHandler).     this.asyncRequest.onTimeout(new AsyncEvent(new MockAsyncContext(this.request, this.response))).     verify(timeoutHandler).run(). }
false;public;0;9;;@SuppressWarnings("unchecked") @Test public void onErrorHandler() throws Exception {     Consumer<Throwable> errorHandler = mock(Consumer.class).     this.asyncRequest.addErrorHandler(errorHandler).     Exception e = new Exception().     this.asyncRequest.onError(new AsyncEvent(new MockAsyncContext(this.request, this.response), e)).     verify(errorHandler).accept(e). }
false;public;0;5;;@Test(expected = IllegalStateException.class) public void setTimeoutDuringConcurrentHandling() {     this.asyncRequest.startAsync().     this.asyncRequest.setTimeout(25L). }
false;public;0;11;;@Test public void onCompletionHandler() throws Exception {     Runnable handler = mock(Runnable.class).     this.asyncRequest.addCompletionHandler(handler).     this.asyncRequest.startAsync().     this.asyncRequest.onComplete(new AsyncEvent(this.request.getAsyncContext())).     verify(handler).run().     assertTrue(this.asyncRequest.isAsyncComplete()). }
false;public;0;12;;// SPR-13292 @SuppressWarnings("unchecked") @Test public void onErrorHandlerAfterOnErrorEvent() throws Exception {     Consumer<Throwable> handler = mock(Consumer.class).     this.asyncRequest.addErrorHandler(handler).     this.asyncRequest.startAsync().     Exception e = new Exception().     this.asyncRequest.onError(new AsyncEvent(this.request.getAsyncContext(), e)).     verify(handler).accept(e). }
false;public;0;11;;@Test public void onCompletionHandlerAfterOnCompleteEvent() throws Exception {     Runnable handler = mock(Runnable.class).     this.asyncRequest.addCompletionHandler(handler).     this.asyncRequest.startAsync().     this.asyncRequest.onComplete(new AsyncEvent(this.request.getAsyncContext())).     verify(handler).run().     assertTrue(this.asyncRequest.isAsyncComplete()). }
