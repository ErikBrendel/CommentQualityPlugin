commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void uri() throws Exception {     final MockHttpServletRequest request = new MockHttpServletRequest("POST", "/hotels").     MockHttpServletResponse response = new MockHttpServletResponse().     request.setQueryString("booking=42").     FilterChain filterChain = new NoOpFilterChain().     filter.doFilter(request, response, filterChain).     assertNotNull(filter.beforeRequestMessage).     assertTrue(filter.beforeRequestMessage.contains("uri=/hotel")).     assertFalse(filter.beforeRequestMessage.contains("booking=42")).     assertNotNull(filter.afterRequestMessage).     assertTrue(filter.afterRequestMessage.contains("uri=/hotel")).     assertFalse(filter.afterRequestMessage.contains("booking=42")). }
false;public;0;18;;@Test public void queryStringIncluded() throws Exception {     filter.setIncludeQueryString(true).     MockHttpServletRequest request = new MockHttpServletRequest("POST", "/hotels").     MockHttpServletResponse response = new MockHttpServletResponse().     request.setQueryString("booking=42").     FilterChain filterChain = new NoOpFilterChain().     filter.doFilter(request, response, filterChain).     assertNotNull(filter.beforeRequestMessage).     assertTrue(filter.beforeRequestMessage.contains("[uri=/hotels?booking=42]")).     assertNotNull(filter.afterRequestMessage).     assertTrue(filter.afterRequestMessage.contains("[uri=/hotels?booking=42]")). }
false;public;0;16;;@Test public void noQueryStringAvailable() throws Exception {     filter.setIncludeQueryString(true).     MockHttpServletRequest request = new MockHttpServletRequest("POST", "/hotels").     MockHttpServletResponse response = new MockHttpServletResponse().     FilterChain filterChain = new NoOpFilterChain().     filter.doFilter(request, response, filterChain).     assertNotNull(filter.beforeRequestMessage).     assertTrue(filter.beforeRequestMessage.contains("[uri=/hotels]")).     assertNotNull(filter.afterRequestMessage).     assertTrue(filter.afterRequestMessage.contains("[uri=/hotels]")). }
false;public;2;7;;@Override public void doFilter(ServletRequest filterRequest, ServletResponse filterResponse) throws IOException, ServletException {     ((HttpServletResponse) filterResponse).setStatus(HttpServletResponse.SC_OK).     byte[] buf = FileCopyUtils.copyToByteArray(filterRequest.getInputStream()).     assertArrayEquals(requestBody, buf). }
false;public;0;25;;@Test public void payloadInputStream() throws Exception {     filter.setIncludePayload(true).     final MockHttpServletRequest request = new MockHttpServletRequest("POST", "/hotels").     MockHttpServletResponse response = new MockHttpServletResponse().     final byte[] requestBody = "Hello World".getBytes("UTF-8").     request.setContent(requestBody).     FilterChain filterChain = new FilterChain() {          @Override         public void doFilter(ServletRequest filterRequest, ServletResponse filterResponse) throws IOException, ServletException {             ((HttpServletResponse) filterResponse).setStatus(HttpServletResponse.SC_OK).             byte[] buf = FileCopyUtils.copyToByteArray(filterRequest.getInputStream()).             assertArrayEquals(requestBody, buf).         }     }.     filter.doFilter(request, response, filterChain).     assertNotNull(filter.afterRequestMessage).     assertTrue(filter.afterRequestMessage.contains("Hello World")). }
false;public;2;7;;@Override public void doFilter(ServletRequest filterRequest, ServletResponse filterResponse) throws IOException, ServletException {     ((HttpServletResponse) filterResponse).setStatus(HttpServletResponse.SC_OK).     String buf = FileCopyUtils.copyToString(filterRequest.getReader()).     assertEquals(requestBody, buf). }
false;public;0;25;;@Test public void payloadReader() throws Exception {     filter.setIncludePayload(true).     final MockHttpServletRequest request = new MockHttpServletRequest("POST", "/hotels").     MockHttpServletResponse response = new MockHttpServletResponse().     final String requestBody = "Hello World".     request.setContent(requestBody.getBytes("UTF-8")).     FilterChain filterChain = new FilterChain() {          @Override         public void doFilter(ServletRequest filterRequest, ServletResponse filterResponse) throws IOException, ServletException {             ((HttpServletResponse) filterResponse).setStatus(HttpServletResponse.SC_OK).             String buf = FileCopyUtils.copyToString(filterRequest.getReader()).             assertEquals(requestBody, buf).         }     }.     filter.doFilter(request, response, filterChain).     assertNotNull(filter.afterRequestMessage).     assertTrue(filter.afterRequestMessage.contains(requestBody)). }
false;public;2;10;;@Override public void doFilter(ServletRequest filterRequest, ServletResponse filterResponse) throws IOException, ServletException {     ((HttpServletResponse) filterResponse).setStatus(HttpServletResponse.SC_OK).     byte[] buf = FileCopyUtils.copyToByteArray(filterRequest.getInputStream()).     assertArrayEquals(requestBody, buf).     ContentCachingRequestWrapper wrapper = WebUtils.getNativeRequest(filterRequest, ContentCachingRequestWrapper.class).     assertArrayEquals("Hel".getBytes("UTF-8"), wrapper.getContentAsByteArray()). }
false;public;0;30;;@Test public void payloadMaxLength() throws Exception {     filter.setIncludePayload(true).     filter.setMaxPayloadLength(3).     final MockHttpServletRequest request = new MockHttpServletRequest("POST", "/hotels").     MockHttpServletResponse response = new MockHttpServletResponse().     final byte[] requestBody = "Hello World".getBytes("UTF-8").     request.setContent(requestBody).     FilterChain filterChain = new FilterChain() {          @Override         public void doFilter(ServletRequest filterRequest, ServletResponse filterResponse) throws IOException, ServletException {             ((HttpServletResponse) filterResponse).setStatus(HttpServletResponse.SC_OK).             byte[] buf = FileCopyUtils.copyToByteArray(filterRequest.getInputStream()).             assertArrayEquals(requestBody, buf).             ContentCachingRequestWrapper wrapper = WebUtils.getNativeRequest(filterRequest, ContentCachingRequestWrapper.class).             assertArrayEquals("Hel".getBytes("UTF-8"), wrapper.getContentAsByteArray()).         }     }.     filter.doFilter(request, response, filterChain).     assertNotNull(filter.afterRequestMessage).     assertTrue(filter.afterRequestMessage.contains("Hel")).     assertFalse(filter.afterRequestMessage.contains("Hello World")). }
false;protected;2;4;;@Override protected void beforeRequest(HttpServletRequest request, String message) {     this.beforeRequestMessage = message. }
false;protected;2;4;;@Override protected void afterRequest(HttpServletRequest request, String message) {     this.afterRequestMessage = message. }
false;public;2;3;;@Override public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException { }
