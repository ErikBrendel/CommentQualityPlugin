commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;6;;@Parameterized.Parameters(name = "server [{0}]") public static Object[][] arguments() {     return new Object[][] { { new ReactorHttpsServer() } }. }
false;public;0;19;;@Before public void setup() throws Exception {     this.server.setHandler(new CheckRequestHandler()).     this.server.afterPropertiesSet().     this.server.start().     // Set dynamically chosen port     this.port = this.server.getPort().     SSLContextBuilder builder = new SSLContextBuilder().     builder.loadTrustMaterial(new TrustSelfSignedStrategy()).     SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(builder.build(), NoopHostnameVerifier.INSTANCE).     CloseableHttpClient httpclient = HttpClients.custom().setSSLSocketFactory(socketFactory).build().     HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpclient).     this.restTemplate = new RestTemplate(requestFactory). }
false;public;0;5;;@After public void tearDown() throws Exception {     this.server.stop().     this.port = 0. }
false;public;0;7;;@Test public void checkUri() throws Exception {     URI url = new URI("https://localhost:" + port + "/foo?param=bar").     RequestEntity<Void> request = RequestEntity.post(url).build().     ResponseEntity<Void> response = this.restTemplate.exchange(request, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()). }
false;public;2;11;;@Override public Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {     URI uri = request.getURI().     assertEquals("https", uri.getScheme()).     assertNotNull(uri.getHost()).     assertNotEquals(-1, uri.getPort()).     assertNotNull(request.getRemoteAddress()).     assertEquals("/foo", uri.getPath()).     assertEquals("param=bar", uri.getQuery()).     return Mono.empty(). }
