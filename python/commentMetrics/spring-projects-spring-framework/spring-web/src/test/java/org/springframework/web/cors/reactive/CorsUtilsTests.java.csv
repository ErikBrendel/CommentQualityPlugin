commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void isCorsRequest() {     ServerHttpRequest request = get("/").header(HttpHeaders.ORIGIN, "http://domain.com").build().     assertTrue(CorsUtils.isCorsRequest(request)). }
false;public;0;5;;@Test public void isNotCorsRequest() {     ServerHttpRequest request = get("/").build().     assertFalse(CorsUtils.isCorsRequest(request)). }
false;public;0;8;;@Test public void isPreFlightRequest() {     ServerHttpRequest request = options("/").header(HttpHeaders.ORIGIN, "http://domain.com").header(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").build().     assertTrue(CorsUtils.isPreFlightRequest(request)). }
false;public;0;11;;@Test public void isNotPreFlightRequest() {     ServerHttpRequest request = get("/").build().     assertFalse(CorsUtils.isPreFlightRequest(request)).     request = options("/").header(HttpHeaders.ORIGIN, "http://domain.com").build().     assertFalse(CorsUtils.isPreFlightRequest(request)).     request = options("/").header(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").build().     assertFalse(CorsUtils.isPreFlightRequest(request)). }
false;public;0;10;;// SPR-16262 @Test public void isSameOriginWithXForwardedHeaders() {     String server = "mydomain1.com".     testWithXForwardedHeaders(server, -1, "https", null, -1, "https://mydomain1.com").     testWithXForwardedHeaders(server, 123, "https", null, -1, "https://mydomain1.com").     testWithXForwardedHeaders(server, -1, "https", "mydomain2.com", -1, "https://mydomain2.com").     testWithXForwardedHeaders(server, 123, "https", "mydomain2.com", -1, "https://mydomain2.com").     testWithXForwardedHeaders(server, -1, "https", "mydomain2.com", 456, "https://mydomain2.com:456").     testWithXForwardedHeaders(server, 123, "https", "mydomain2.com", 456, "https://mydomain2.com:456"). }
false;public;0;10;;// SPR-16262 @Test public void isSameOriginWithForwardedHeader() {     String server = "mydomain1.com".     testWithForwardedHeader(server, -1, "proto=https", "https://mydomain1.com").     testWithForwardedHeader(server, 123, "proto=https", "https://mydomain1.com").     testWithForwardedHeader(server, -1, "proto=https. host=mydomain2.com", "https://mydomain2.com").     testWithForwardedHeader(server, 123, "proto=https. host=mydomain2.com", "https://mydomain2.com").     testWithForwardedHeader(server, -1, "proto=https. host=mydomain2.com:456", "https://mydomain2.com:456").     testWithForwardedHeader(server, 123, "proto=https. host=mydomain2.com:456", "https://mydomain2.com:456"). }
false;public;0;8;;// SPR-16362 @Test public void isSameOriginWithDifferentSchemes() {     MockServerHttpRequest request = MockServerHttpRequest.get("http://mydomain1.com").header(HttpHeaders.ORIGIN, "https://mydomain1.com").build().     assertFalse(CorsUtils.isSameOrigin(request)). }
false;private;6;22;;private void testWithXForwardedHeaders(String serverName, int port, String forwardedProto, String forwardedHost, int forwardedPort, String originHeader) {     String url = "http://" + serverName.     if (port != -1) {         url = url + ":" + port.     }     MockServerHttpRequest.BaseBuilder<?> builder = get(url).header(HttpHeaders.ORIGIN, originHeader).     if (forwardedProto != null) {         builder.header("X-Forwarded-Proto", forwardedProto).     }     if (forwardedHost != null) {         builder.header("X-Forwarded-Host", forwardedHost).     }     if (forwardedPort != -1) {         builder.header("X-Forwarded-Port", String.valueOf(forwardedPort)).     }     ServerHttpRequest request = adaptFromForwardedHeaders(builder).     assertTrue(CorsUtils.isSameOrigin(request)). }
false;private;4;15;;private void testWithForwardedHeader(String serverName, int port, String forwardedHeader, String originHeader) {     String url = "http://" + serverName.     if (port != -1) {         url = url + ":" + port.     }     MockServerHttpRequest.BaseBuilder<?> builder = get(url).header("Forwarded", forwardedHeader).header(HttpHeaders.ORIGIN, originHeader).     ServerHttpRequest request = adaptFromForwardedHeaders(builder).     assertTrue(CorsUtils.isSameOrigin(request)). }
true;private;1;9;// SPR-16668 ;// SPR-16668 private ServerHttpRequest adaptFromForwardedHeaders(MockServerHttpRequest.BaseBuilder<?> builder) {     AtomicReference<ServerHttpRequest> requestRef = new AtomicReference<>().     MockServerWebExchange exchange = MockServerWebExchange.from(builder).     new ForwardedHeaderFilter().filter(exchange, exchange2 -> {         requestRef.set(exchange2.getRequest()).         return Mono.empty().     }).block().     return requestRef.get(). }
