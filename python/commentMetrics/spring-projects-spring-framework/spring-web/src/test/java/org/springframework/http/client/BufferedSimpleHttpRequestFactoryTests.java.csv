commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected ClientHttpRequestFactory createRequestFactory() {     return new SimpleClientHttpRequestFactory(). }
false;public;0;10;;@Override @Test public void httpMethods() throws Exception {     try {         assertHttpMethod("patch", HttpMethod.PATCH).     } catch (ProtocolException ex) {     // Currently HttpURLConnection does not support HTTP PATCH     } }
false;public;0;11;;@Test public void prepareConnectionWithRequestBody() throws Exception {     URL uri = new URL("http://example.com").     testRequestBodyAllowed(uri, "GET", false).     testRequestBodyAllowed(uri, "HEAD", false).     testRequestBodyAllowed(uri, "OPTIONS", false).     testRequestBodyAllowed(uri, "TRACE", false).     testRequestBodyAllowed(uri, "PUT", true).     testRequestBodyAllowed(uri, "POST", true).     testRequestBodyAllowed(uri, "DELETE", true). }
false;public;0;7;;@Test public void deleteWithoutBodyDoesNotRaiseException() throws Exception {     HttpURLConnection connection = new TestHttpURLConnection(new URL("http://example.com")).     ((SimpleClientHttpRequestFactory) this.factory).prepareConnection(connection, "DELETE").     SimpleBufferingClientHttpRequest request = new SimpleBufferingClientHttpRequest(connection, false).     request.execute(). }
false;private;3;5;;private void testRequestBodyAllowed(URL uri, String httpMethod, boolean allowed) throws IOException {     HttpURLConnection connection = new TestHttpURLConnection(uri).     ((SimpleClientHttpRequestFactory) this.factory).prepareConnection(connection, httpMethod).     assertEquals(allowed, connection.getDoOutput()). }
false;public;0;3;;@Override public void connect() throws IOException { }
false;public;0;3;;@Override public void disconnect() { }
false;public;0;4;;@Override public boolean usingProxy() {     return false. }
false;public;0;4;;@Override public InputStream getInputStream() throws IOException {     return new ByteArrayInputStream(new byte[0]). }
