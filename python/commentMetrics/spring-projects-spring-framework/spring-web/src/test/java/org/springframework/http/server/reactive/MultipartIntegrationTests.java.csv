commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected HttpHandler createHttpHandler() {     return new HttpWebHandlerAdapter(new CheckRequestHandler()). }
false;public;0;10;;@Test public void getFormParts() throws Exception {     RestTemplate restTemplate = new RestTemplate().     RequestEntity<MultiValueMap<String, Object>> request = RequestEntity.post(new URI("http://localhost:" + port + "/form-parts")).contentType(MediaType.MULTIPART_FORM_DATA).body(generateBody()).     ResponseEntity<Void> response = restTemplate.exchange(request, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()). }
false;private;0;11;;private MultiValueMap<String, Object> generateBody() {     HttpHeaders fooHeaders = new HttpHeaders().     fooHeaders.setContentType(MediaType.TEXT_PLAIN).     ClassPathResource fooResource = new ClassPathResource("org/springframework/http/codec/multipart/foo.txt").     HttpEntity<ClassPathResource> fooPart = new HttpEntity<>(fooResource, fooHeaders).     HttpEntity<String> barPart = new HttpEntity<>("bar").     MultiValueMap<String, Object> parts = new LinkedMultiValueMap<>().     parts.add("fooPart", fooPart).     parts.add("barPart", barPart).     return parts. }
false;public;1;7;;@Override public Mono<Void> handle(ServerWebExchange exchange) {     if (exchange.getRequest().getURI().getPath().equals("/form-parts")) {         return assertGetFormParts(exchange).     }     return Mono.error(new AssertionError()). }
false;private;1;12;;private Mono<Void> assertGetFormParts(ServerWebExchange exchange) {     return exchange.getMultipartData().doOnNext(parts -> {         assertEquals(2, parts.size()).         assertTrue(parts.containsKey("fooPart")).         assertFooPart(parts.getFirst("fooPart")).         assertTrue(parts.containsKey("barPart")).         assertBarPart(parts.getFirst("barPart")).     }).then(). }
false;private;1;14;;private void assertFooPart(Part part) {     assertEquals("fooPart", part.name()).     assertTrue(part instanceof FilePart).     assertEquals("foo.txt", ((FilePart) part).filename()).     StepVerifier.create(DataBufferUtils.join(part.content())).consumeNextWith(buffer -> {         assertEquals(12, buffer.readableByteCount()).         byte[] byteContent = new byte[12].         buffer.read(byteContent).         assertEquals("Lorem Ipsum.", new String(byteContent)).     }).verifyComplete(). }
false;private;1;5;;private void assertBarPart(Part part) {     assertEquals("barPart", part.name()).     assertTrue(part instanceof FormFieldPart).     assertEquals("bar", ((FormFieldPart) part).value()). }
