commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testJaxWsPortAccess() throws Exception {     doTestJaxWsPortAccess((WebServiceFeature[]) null). }
false;public;0;4;;@Test public void testJaxWsPortAccessWithFeature() throws Exception {     doTestJaxWsPortAccess(new AddressingFeature()). }
false;private;1;82;;private void doTestJaxWsPortAccess(WebServiceFeature... features) throws Exception {     GenericApplicationContext ac = new GenericApplicationContext().     GenericBeanDefinition serviceDef = new GenericBeanDefinition().     serviceDef.setBeanClass(OrderServiceImpl.class).     ac.registerBeanDefinition("service", serviceDef).     GenericBeanDefinition exporterDef = new GenericBeanDefinition().     exporterDef.setBeanClass(SimpleJaxWsServiceExporter.class).     exporterDef.getPropertyValues().add("baseAddress", "http://localhost:9999/").     ac.registerBeanDefinition("exporter", exporterDef).     GenericBeanDefinition clientDef = new GenericBeanDefinition().     clientDef.setBeanClass(JaxWsPortProxyFactoryBean.class).     clientDef.getPropertyValues().add("wsdlDocumentUrl", "http://localhost:9999/OrderService?wsdl").     clientDef.getPropertyValues().add("namespaceUri", "http://jaxws.remoting.springframework.org/").     clientDef.getPropertyValues().add("username", "juergen").     clientDef.getPropertyValues().add("password", "hoeller").     clientDef.getPropertyValues().add("serviceName", "OrderService").     clientDef.getPropertyValues().add("serviceInterface", OrderService.class).     clientDef.getPropertyValues().add("lookupServiceOnStartup", Boolean.FALSE).     if (features != null) {         clientDef.getPropertyValues().add("portFeatures", features).     }     ac.registerBeanDefinition("client", clientDef).     GenericBeanDefinition serviceFactoryDef = new GenericBeanDefinition().     serviceFactoryDef.setBeanClass(LocalJaxWsServiceFactoryBean.class).     serviceFactoryDef.getPropertyValues().add("wsdlDocumentUrl", "http://localhost:9999/OrderService?wsdl").     serviceFactoryDef.getPropertyValues().add("namespaceUri", "http://jaxws.remoting.springframework.org/").     serviceFactoryDef.getPropertyValues().add("serviceName", "OrderService").     ac.registerBeanDefinition("orderService", serviceFactoryDef).     ac.registerBeanDefinition("accessor", new RootBeanDefinition(ServiceAccessor.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(ac).     try {         ac.refresh().         OrderService orderService = ac.getBean("client", OrderService.class).         assertTrue(orderService instanceof BindingProvider).         ((BindingProvider) orderService).getRequestContext().         String order = orderService.getOrder(1000).         assertEquals("order 1000", order).         try {             orderService.getOrder(0).             fail("Should have thrown OrderNotFoundException").         } catch (OrderNotFoundException ex) {         // expected         } catch (RemoteAccessException ex) {         // ignore - probably setup issue with JAX-WS provider vs JAXB         }         ServiceAccessor serviceAccessor = ac.getBean("accessor", ServiceAccessor.class).         order = serviceAccessor.orderService.getOrder(1000).         assertEquals("order 1000", order).         try {             serviceAccessor.orderService.getOrder(0).             fail("Should have thrown OrderNotFoundException").         } catch (OrderNotFoundException ex) {         // expected         } catch (WebServiceException ex) {         // ignore - probably setup issue with JAX-WS provider vs JAXB         }     } catch (BeanCreationException ex) {         if ("exporter".equals(ex.getBeanName()) && ex.getRootCause() instanceof ClassNotFoundException) {         // ignore - probably running on JDK without the JAX-WS impl present         } else {             throw ex.         }     } finally {         ac.close().     } }
false;public;1;4;;@WebServiceRef(value = OrderServiceService.class, wsdlLocation = "http://localhost:9999/OrderService?wsdl") public void setMyService(OrderService myService) {     this.myService = myService. }
