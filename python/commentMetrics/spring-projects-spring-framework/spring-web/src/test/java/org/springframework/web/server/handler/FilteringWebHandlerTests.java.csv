commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void multipleFilters() throws Exception {     TestFilter filter1 = new TestFilter().     TestFilter filter2 = new TestFilter().     TestFilter filter3 = new TestFilter().     StubWebHandler targetHandler = new StubWebHandler().     new FilteringWebHandler(targetHandler, Arrays.asList(filter1, filter2, filter3)).handle(MockServerWebExchange.from(MockServerHttpRequest.get("/"))).block(Duration.ZERO).     assertTrue(filter1.invoked()).     assertTrue(filter2.invoked()).     assertTrue(filter3.invoked()).     assertTrue(targetHandler.invoked()). }
false;public;0;11;;@Test public void zeroFilters() throws Exception {     StubWebHandler targetHandler = new StubWebHandler().     new FilteringWebHandler(targetHandler, Collections.emptyList()).handle(MockServerWebExchange.from(MockServerHttpRequest.get("/"))).block(Duration.ZERO).     assertTrue(targetHandler.invoked()). }
false;public;0;17;;@Test public void shortcircuitFilter() throws Exception {     TestFilter filter1 = new TestFilter().     ShortcircuitingFilter filter2 = new ShortcircuitingFilter().     TestFilter filter3 = new TestFilter().     StubWebHandler targetHandler = new StubWebHandler().     new FilteringWebHandler(targetHandler, Arrays.asList(filter1, filter2, filter3)).handle(MockServerWebExchange.from(MockServerHttpRequest.get("/"))).block(Duration.ZERO).     assertTrue(filter1.invoked()).     assertTrue(filter2.invoked()).     assertFalse(filter3.invoked()).     assertFalse(targetHandler.invoked()). }
false;public;0;13;;@Test public void asyncFilter() throws Exception {     AsyncFilter filter = new AsyncFilter().     StubWebHandler targetHandler = new StubWebHandler().     new FilteringWebHandler(targetHandler, Collections.singletonList(filter)).handle(MockServerWebExchange.from(MockServerHttpRequest.get("/"))).block(Duration.ofSeconds(5)).     assertTrue(filter.invoked()).     assertTrue(targetHandler.invoked()). }
false;public;0;18;;@Test public void handleErrorFromFilter() throws Exception {     MockServerHttpRequest request = MockServerHttpRequest.get("/").build().     MockServerHttpResponse response = new MockServerHttpResponse().     TestExceptionHandler exceptionHandler = new TestExceptionHandler().     WebHttpHandlerBuilder.webHandler(new StubWebHandler()).filter(new ExceptionFilter()).exceptionHandler(exceptionHandler).build().handle(request, response).block().     assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode()).     assertNotNull(exceptionHandler.ex).     assertEquals("boo", exceptionHandler.ex.getMessage()). }
false;public;0;3;;public boolean invoked() {     return this.invoked. }
false;public;2;5;;@Override public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {     this.invoked = true.     return doFilter(exchange, chain). }
false;public;2;3;;public Mono<Void> doFilter(ServerWebExchange exchange, WebFilterChain chain) {     return chain.filter(exchange). }
false;public;2;4;;@Override public Mono<Void> doFilter(ServerWebExchange exchange, WebFilterChain chain) {     return Mono.empty(). }
false;public;2;7;;@Override public Mono<Void> doFilter(ServerWebExchange exchange, WebFilterChain chain) {     return doAsyncWork().flatMap(asyncResult -> {         logger.debug("Async result: " + asyncResult).         return chain.filter(exchange).     }). }
false;private;0;3;;private Mono<String> doAsyncWork() {     return Mono.delay(Duration.ofMillis(100L)).map(l -> "123"). }
false;public;2;4;;@Override public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {     return Mono.error(new IllegalStateException("boo")). }
false;public;2;5;;@Override public Mono<Void> handle(ServerWebExchange exchange, Throwable ex) {     this.ex = ex.     return Mono.error(ex). }
false;public;0;3;;public boolean invoked() {     return this.invoked. }
false;public;1;6;;@Override public Mono<Void> handle(ServerWebExchange exchange) {     logger.trace("StubHandler invoked.").     this.invoked = true.     return Mono.empty(). }
