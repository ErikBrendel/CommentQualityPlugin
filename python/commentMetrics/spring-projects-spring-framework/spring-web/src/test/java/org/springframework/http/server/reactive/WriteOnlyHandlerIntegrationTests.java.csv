commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected WriteOnlyHandler createHttpHandler() {     return new WriteOnlyHandler(). }
false;public;0;12;;@Test public void writeOnly() throws Exception {     RestTemplate restTemplate = new RestTemplate().     this.body = randomBytes().     RequestEntity<byte[]> request = RequestEntity.post(new URI("http://localhost:" + port)).body("".getBytes(StandardCharsets.UTF_8)).     ResponseEntity<byte[]> response = restTemplate.exchange(request, byte[].class).     assertArrayEquals(body, response.getBody()). }
false;private;0;5;;private byte[] randomBytes() {     byte[] buffer = new byte[REQUEST_SIZE].     rnd.nextBytes(buffer).     return buffer. }
false;public;2;6;;@Override public Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {     DataBuffer buffer = response.bufferFactory().allocateBuffer(body.length).     buffer.write(body).     return response.writeAndFlushWith(Flux.just(Flux.just(buffer))). }
