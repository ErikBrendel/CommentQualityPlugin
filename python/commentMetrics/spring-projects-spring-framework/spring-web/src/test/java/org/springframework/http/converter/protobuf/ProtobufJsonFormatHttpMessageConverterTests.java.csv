commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setup() {     this.registryInitializer = mock(ExtensionRegistryInitializer.class).     this.extensionRegistry = mock(ExtensionRegistry.class).     this.converter = new ProtobufJsonFormatHttpMessageConverter(JsonFormat.parser(), JsonFormat.printer(), this.registryInitializer).     this.testMsg = Msg.newBuilder().setFoo("Foo").setBlah(SecondMsg.newBuilder().setBlah(123).build()).build(). }
false;public;0;4;;@Test public void extensionRegistryInitialized() {     verify(this.registryInitializer, times(1)).initializeExtensionRegistry(any()). }
false;public;0;5;;@Test public void extensionRegistryInitializerNull() {     ProtobufHttpMessageConverter converter = new ProtobufHttpMessageConverter((ExtensionRegistryInitializer) null).     assertNotNull(converter). }
false;public;0;5;;@Test public void extensionRegistryInitializer() {     ProtobufHttpMessageConverter converter = new ProtobufHttpMessageConverter((ExtensionRegistry) null).     assertNotNull(converter). }
false;public;0;7;;@Test public void canRead() {     assertTrue(this.converter.canRead(Msg.class, null)).     assertTrue(this.converter.canRead(Msg.class, ProtobufHttpMessageConverter.PROTOBUF)).     assertTrue(this.converter.canRead(Msg.class, MediaType.APPLICATION_JSON)).     assertTrue(this.converter.canRead(Msg.class, MediaType.TEXT_PLAIN)). }
false;public;0;7;;@Test public void canWrite() {     assertTrue(this.converter.canWrite(Msg.class, null)).     assertTrue(this.converter.canWrite(Msg.class, ProtobufHttpMessageConverter.PROTOBUF)).     assertTrue(this.converter.canWrite(Msg.class, MediaType.APPLICATION_JSON)).     assertTrue(this.converter.canWrite(Msg.class, MediaType.TEXT_PLAIN)). }
false;public;0;8;;@Test public void read() throws IOException {     byte[] body = this.testMsg.toByteArray().     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body).     inputMessage.getHeaders().setContentType(ProtobufHttpMessageConverter.PROTOBUF).     Message result = this.converter.read(Msg.class, inputMessage).     assertEquals(this.testMsg, result). }
false;public;0;7;;@Test public void readNoContentType() throws IOException {     byte[] body = this.testMsg.toByteArray().     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body).     Message result = this.converter.read(Msg.class, inputMessage).     assertEquals(this.testMsg, result). }
false;public;0;17;;@Test public void write() throws IOException {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     MediaType contentType = ProtobufHttpMessageConverter.PROTOBUF.     this.converter.write(this.testMsg, contentType, outputMessage).     assertEquals(contentType, outputMessage.getHeaders().getContentType()).     assertTrue(outputMessage.getBodyAsBytes().length > 0).     Message result = Msg.parseFrom(outputMessage.getBodyAsBytes()).     assertEquals(this.testMsg, result).     String messageHeader = outputMessage.getHeaders().getFirst(ProtobufHttpMessageConverter.X_PROTOBUF_MESSAGE_HEADER).     assertEquals("Msg", messageHeader).     String schemaHeader = outputMessage.getHeaders().getFirst(ProtobufHttpMessageConverter.X_PROTOBUF_SCHEMA_HEADER).     assertEquals("sample.proto", schemaHeader). }
false;public;0;4;;@Test public void defaultContentType() throws Exception {     assertEquals(ProtobufHttpMessageConverter.PROTOBUF, this.converter.getDefaultContentType(this.testMsg)). }
false;public;0;7;;@Test public void getContentLength() throws Exception {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     MediaType contentType = ProtobufHttpMessageConverter.PROTOBUF.     this.converter.write(this.testMsg, contentType, outputMessage).     assertEquals(-1, outputMessage.getHeaders().getContentLength()). }
