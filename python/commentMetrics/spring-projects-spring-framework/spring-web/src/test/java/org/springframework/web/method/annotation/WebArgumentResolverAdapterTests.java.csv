commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setUp() throws Exception {     adaptee = mock(WebArgumentResolver.class).     adapter = new TestWebArgumentResolverAdapter(adaptee).     parameter = new MethodParameter(getClass().getMethod("handle", Integer.TYPE), 0).     webRequest = new ServletWebRequest(new MockHttpServletRequest()).     // Expose request to the current thread (for SpEL expressions)     RequestContextHolder.setRequestAttributes(webRequest). }
false;public;0;4;;@After public void resetRequestContextHolder() {     RequestContextHolder.resetRequestAttributes(). }
false;public;0;8;;@Test public void supportsParameter() throws Exception {     given(adaptee.resolveArgument(parameter, webRequest)).willReturn(42).     assertTrue("Parameter not supported", adapter.supportsParameter(parameter)).     verify(adaptee).resolveArgument(parameter, webRequest). }
false;public;0;8;;@Test public void supportsParameterUnresolved() throws Exception {     given(adaptee.resolveArgument(parameter, webRequest)).willReturn(WebArgumentResolver.UNRESOLVED).     assertFalse("Parameter supported", adapter.supportsParameter(parameter)).     verify(adaptee).resolveArgument(parameter, webRequest). }
false;public;0;8;;@Test public void supportsParameterWrongType() throws Exception {     given(adaptee.resolveArgument(parameter, webRequest)).willReturn("Foo").     assertFalse("Parameter supported", adapter.supportsParameter(parameter)).     verify(adaptee).resolveArgument(parameter, webRequest). }
false;public;0;8;;@Test public void supportsParameterThrowsException() throws Exception {     given(adaptee.resolveArgument(parameter, webRequest)).willThrow(new Exception()).     assertFalse("Parameter supported", adapter.supportsParameter(parameter)).     verify(adaptee).resolveArgument(parameter, webRequest). }
false;public;0;8;;@Test public void resolveArgument() throws Exception {     int expected = 42.     given(adaptee.resolveArgument(parameter, webRequest)).willReturn(expected).     Object result = adapter.resolveArgument(parameter, null, webRequest, null).     assertEquals("Invalid result", expected, result). }
false;public;0;6;;@Test(expected = IllegalStateException.class) public void resolveArgumentUnresolved() throws Exception {     given(adaptee.resolveArgument(parameter, webRequest)).willReturn(WebArgumentResolver.UNRESOLVED).     adapter.resolveArgument(parameter, null, webRequest, null). }
false;public;0;6;;@Test(expected = IllegalStateException.class) public void resolveArgumentWrongType() throws Exception {     given(adaptee.resolveArgument(parameter, webRequest)).willReturn("Foo").     adapter.resolveArgument(parameter, null, webRequest, null). }
false;public;0;6;;@Test(expected = Exception.class) public void resolveArgumentThrowsException() throws Exception {     given(adaptee.resolveArgument(parameter, webRequest)).willThrow(new Exception()).     adapter.resolveArgument(parameter, null, webRequest, null). }
false;public;1;2;;public void handle(int param) { }
false;protected;0;4;;@Override protected NativeWebRequest getWebRequest() {     return WebArgumentResolverAdapterTests.this.webRequest. }
