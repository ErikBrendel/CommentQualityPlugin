commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected HttpHandler createHttpHandler() {     return handler. }
false;public;0;10;;@Test public void responseBodyError() throws Exception {     RestTemplate restTemplate = new RestTemplate().     restTemplate.setErrorHandler(NO_OP_ERROR_HANDLER).     URI url = new URI("http://localhost:" + port + "/response-body-error").     ResponseEntity<String> response = restTemplate.getForEntity(url, String.class).     assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode()). }
false;public;0;10;;@Test public void handlingError() throws Exception {     RestTemplate restTemplate = new RestTemplate().     restTemplate.setErrorHandler(NO_OP_ERROR_HANDLER).     URI url = new URI("http://localhost:" + port + "/handling-error").     ResponseEntity<String> response = restTemplate.getForEntity(url, String.class).     assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode()). }
false;public;0;11;;// SPR-15560 @Test public void emptyPathSegments() throws Exception {     RestTemplate restTemplate = new RestTemplate().     restTemplate.setErrorHandler(NO_OP_ERROR_HANDLER).     URI url = new URI("http://localhost:" + port + "//").     ResponseEntity<String> response = restTemplate.getForEntity(url, String.class).     assertEquals(HttpStatus.OK, response.getStatusCode()). }
false;public;2;14;;@Override public Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {     Exception error = new UnsupportedOperationException().     String path = request.getURI().getPath().     if (path.endsWith("response-body-error")) {         return response.writeWith(Mono.error(error)).     } else if (path.endsWith("handling-error")) {         return Mono.error(error).     } else {         return Mono.empty().     } }
false;public;1;4;;@Override public boolean hasError(ClientHttpResponse response) {     return false. }
false;public;1;3;;@Override public void handleError(ClientHttpResponse response) { }
