commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     this.processor.subscribe(this.resultSubscriber).     this.processor.onSubscribe(this.subscription).     assertEquals(1, subscription.getDemand()). }
false;public;0;15;;// SPR-17410 @Test public void writePublisherError() {     // Turn off writing so next item will be cached     this.processor.setWritePossible(false).     DataBuffer buffer = mock(DataBuffer.class).     this.processor.onNext(buffer).     // Send error while item cached     this.processor.onError(new IllegalStateException()).     assertNotNull("Error should flow to result publisher", this.resultSubscriber.getError()).     assertEquals(1, this.processor.getDiscardedBuffers().size()).     assertSame(buffer, this.processor.getDiscardedBuffers().get(0)). }
false;public;0;15;;// SPR-17410 @Test public void ioExceptionDuringWrite() {     // Fail on next write     this.processor.setWritePossible(true).     this.processor.setFailOnWrite(true).     // Write     DataBuffer buffer = mock(DataBuffer.class).     this.processor.onNext(buffer).     assertNotNull("Error should flow to result publisher", this.resultSubscriber.getError()).     assertEquals(1, this.processor.getDiscardedBuffers().size()).     assertSame(buffer, this.processor.getDiscardedBuffers().get(0)). }
false;public;0;17;;// SPR-17410 @Test public void onNextWithoutDemand() {     // Disable writing: next item will be cached..     this.processor.setWritePossible(false).     DataBuffer buffer1 = mock(DataBuffer.class).     this.processor.onNext(buffer1).     // Send more data illegally     DataBuffer buffer2 = mock(DataBuffer.class).     this.processor.onNext(buffer2).     assertNotNull("Error should flow to result publisher", this.resultSubscriber.getError()).     assertEquals(2, this.processor.getDiscardedBuffers().size()).     assertSame(buffer2, this.processor.getDiscardedBuffers().get(0)).     assertSame(buffer1, this.processor.getDiscardedBuffers().get(1)). }
false;public;0;3;;public List<DataBuffer> getDiscardedBuffers() {     return this.discardedBuffers. }
false;public;1;3;;public void setWritePossible(boolean writePossible) {     this.writePossible = writePossible. }
false;public;1;3;;public void setFailOnWrite(boolean failOnWrite) {     this.failOnWrite = failOnWrite. }
false;protected;1;4;;@Override protected boolean isDataEmpty(DataBuffer dataBuffer) {     return false. }
false;protected;0;4;;@Override protected boolean isWritePossible() {     return this.writePossible. }
false;protected;1;7;;@Override protected boolean write(DataBuffer dataBuffer) throws IOException {     if (this.failOnWrite) {         throw new IOException("write failed").     }     return true. }
false;protected;1;5;;@Override protected void writingFailed(Throwable ex) {     cancel().     onError(ex). }
false;protected;1;4;;@Override protected void discardData(DataBuffer dataBuffer) {     this.discardedBuffers.add(dataBuffer). }
false;public;0;3;;public long getDemand() {     return this.demand. }
false;public;1;4;;@Override public void request(long n) {     this.demand = (n == Long.MAX_VALUE ? n : this.demand + n). }
false;public;0;3;;@Override public void cancel() { }
false;public;0;3;;public Throwable getError() {     return this.error. }
false;public;1;3;;@Override public void onSubscribe(Subscription subscription) { }
false;public;1;3;;@Override public void onNext(Void aVoid) { }
false;public;1;4;;@Override public void onError(Throwable ex) {     this.error = ex. }
false;public;0;3;;@Override public void onComplete() { }
