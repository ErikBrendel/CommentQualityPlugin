commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Override @Test public void canEncode() {     assertTrue(this.encoder.canEncode(ResolvableType.forClass(Pojo.class), MediaType.APPLICATION_XML)).     assertTrue(this.encoder.canEncode(ResolvableType.forClass(Pojo.class), MediaType.TEXT_XML)).     assertFalse(this.encoder.canEncode(ResolvableType.forClass(Pojo.class), MediaType.APPLICATION_JSON)).     assertTrue(this.encoder.canEncode(ResolvableType.forClass(Jaxb2XmlDecoderTests.TypePojo.class), MediaType.APPLICATION_XML)).     assertFalse(this.encoder.canEncode(ResolvableType.forClass(getClass()), MediaType.APPLICATION_XML)).     // SPR-15464     assertFalse(this.encoder.canEncode(ResolvableType.NONE, null)). }
false;public;0;11;;@Override @Test public void encode() {     Mono<Pojo> input = Mono.just(new Pojo("foofoo", "barbar")).     testEncode(input, Pojo.class, step -> step.consumeNextWith(expectXml("<?xml version='1.0' encoding='UTF-8' standalone='yes'?>" + "<pojo><bar>barbar</bar><foo>foofoo</foo></pojo>")).verifyComplete()). }
false;public;0;8;;@Test public void encodeError() {     Flux<Pojo> input = Flux.error(RuntimeException::new).     testEncode(input, Pojo.class, step -> step.expectError(RuntimeException.class).verify()). }
false;public;0;10;;@Test public void encodeElementsWithCommonType() {     Mono<Container> input = Mono.just(new Container()).     testEncode(input, Pojo.class, step -> step.consumeNextWith(expectXml("<?xml version='1.0' encoding='UTF-8' standalone='yes'?>" + "<container><foo><name>name1</name></foo><bar><title>title1</title></bar></container>")).verifyComplete()). }
false;protected;1;9;;protected Consumer<DataBuffer> expectXml(String expected) {     return dataBuffer -> {         byte[] resultBytes = new byte[dataBuffer.readableByteCount()].         dataBuffer.read(resultBytes).         release(dataBuffer).         String actual = new String(resultBytes, UTF_8).         assertThat(actual, isSimilarTo(expected)).     }. }
false;public;0;3;;public String getName() {     return this.name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getTitle() {     return title. }
false;public;1;3;;public void setTitle(String title) {     this.title = title. }
false;public;0;7;;@XmlElements({ @XmlElement(name = "foo", type = Foo.class), @XmlElement(name = "bar", type = Bar.class) }) public List<Model> getElements() {     return Arrays.asList(new Foo("name1"), new Bar("title1")). }
