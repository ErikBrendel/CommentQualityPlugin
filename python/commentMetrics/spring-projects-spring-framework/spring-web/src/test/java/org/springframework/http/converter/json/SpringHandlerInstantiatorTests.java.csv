commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setup() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(bf).     bf.addBeanPostProcessor(bpp).     bf.registerBeanDefinition("capitalizer", new RootBeanDefinition(Capitalizer.class)).     instantiator = new SpringHandlerInstantiator(bf).     objectMapper = Jackson2ObjectMapperBuilder.json().handlerInstantiator(instantiator).build(). }
false;public;0;6;;@Test public void autowiredSerializer() throws JsonProcessingException {     User user = new User("bob").     String json = this.objectMapper.writeValueAsString(user).     assertEquals("{\"username\":\"BOB\"}", json). }
false;public;0;6;;@Test public void autowiredDeserializer() throws IOException {     String json = "{\"username\":\"bob\"}".     User user = this.objectMapper.readValue(json, User.class).     assertEquals("BOB", user.getUsername()). }
false;public;0;7;;@Test public void autowiredKeyDeserializer() throws IOException {     String json = "{\"credentials\":{\"bob\":\"admin\"}}".     SecurityRegistry registry = this.objectMapper.readValue(json, SecurityRegistry.class).     assertTrue(registry.getCredentials().keySet().contains("BOB")).     assertFalse(registry.getCredentials().keySet().contains("bob")). }
false;public;0;5;;@Test public void applicationContextAwaretypeResolverBuilder() throws JsonProcessingException {     this.objectMapper.writeValueAsString(new Group()).     assertTrue(CustomTypeResolverBuilder.isAutowiredFiledInitialized). }
false;public;0;5;;@Test public void applicationContextAwareTypeIdResolver() throws JsonProcessingException {     this.objectMapper.writeValueAsString(new Group()).     assertTrue(CustomTypeIdResolver.isAutowiredFiledInitialized). }
false;public;2;6;;@Override public User deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {     ObjectCodec oc = jsonParser.getCodec().     JsonNode node = oc.readTree(jsonParser).     return new User(this.capitalizer.capitalize(node.get("username").asText())). }
false;public;3;8;;@Override public void serialize(User user, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {     jsonGenerator.writeStartObject().     jsonGenerator.writeStringField("username", this.capitalizer.capitalize(user.getUsername())).     jsonGenerator.writeEndObject(). }
false;public;2;4;;@Override public Object deserializeKey(String key, DeserializationContext context) throws IOException {     return this.capitalizer.capitalize(key). }
false;public;3;7;;@Override public TypeSerializer buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes) {     isAutowiredFiledInitialized = (this.capitalizer != null).     return super.buildTypeSerializer(config, baseType, subtypes). }
false;public;3;6;;@Override public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes) {     return super.buildTypeDeserializer(config, baseType, subtypes). }
false;public;2;4;;@Override public String idFromValueAndType(Object o, Class<?> type) {     return type.getClass().getName(). }
false;public;0;4;;@Override public JsonTypeInfo.Id getMechanism() {     return JsonTypeInfo.Id.CUSTOM. }
true;public;1;3;// Only needed when compiling against Jackson 2.7. gone in 2.8 ;// Only needed when compiling against Jackson 2.7. gone in 2.8 public JavaType typeFromId(String s) {     return TypeFactory.defaultInstance().constructFromCanonical(s). }
false;public;1;5;;@Override public String idFromValue(Object value) {     isAutowiredFiledInitialized = (this.capitalizer != null).     return value.getClass().getName(). }
false;public;1;3;;@Override public void init(JavaType type) { }
false;public;0;4;;@Override public String idFromBaseType() {     return null. }
false;public;2;4;;@Override public JavaType typeFromId(DatabindContext context, String id) {     return null. }
true;public;0;3;// New in Jackson 2.7 ;// New in Jackson 2.7 public String getDescForKnownTypeIds() {     return null. }
false;public;0;1;;public String getUsername() {     return this.username. }
false;public;2;3;;public void addCredential(String username, String credential) {     this.credentials.put(username, credential). }
false;public;0;3;;public Map<String, String> getCredentials() {     return credentials. }
false;public;0;3;;public String getType() {     return Group.class.getName(). }
false;public;1;3;;public String capitalize(String text) {     return text.toUpperCase(). }
