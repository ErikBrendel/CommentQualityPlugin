commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() {     converter = new ByteArrayHttpMessageConverter(). }
false;public;0;4;;@Test public void canRead() {     assertTrue(converter.canRead(byte[].class, new MediaType("application", "octet-stream"))). }
false;public;0;5;;@Test public void canWrite() {     assertTrue(converter.canWrite(byte[].class, new MediaType("application", "octet-stream"))).     assertTrue(converter.canWrite(byte[].class, MediaType.ALL)). }
false;public;0;8;;@Test public void read() throws IOException {     byte[] body = new byte[] { 0x1, 0x2 }.     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body).     inputMessage.getHeaders().setContentType(new MediaType("application", "octet-stream")).     byte[] result = converter.read(byte[].class, inputMessage).     assertArrayEquals("Invalid result", body, result). }
false;public;0;10;;@Test public void write() throws IOException {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     byte[] body = new byte[] { 0x1, 0x2 }.     converter.write(body, null, outputMessage).     assertArrayEquals("Invalid result", body, outputMessage.getBodyAsBytes()).     assertEquals("Invalid content-type", new MediaType("application", "octet-stream"), outputMessage.getHeaders().getContentType()).     assertEquals("Invalid content-length", 2, outputMessage.getHeaders().getContentLength()). }
