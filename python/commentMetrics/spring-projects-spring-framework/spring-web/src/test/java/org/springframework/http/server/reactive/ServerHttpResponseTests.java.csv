commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void writeWith() throws Exception {     TestServerHttpResponse response = new TestServerHttpResponse().     response.writeWith(Flux.just(wrap("a"), wrap("b"), wrap("c"))).block().     assertTrue(response.statusCodeWritten).     assertTrue(response.headersWritten).     assertTrue(response.cookiesWritten).     assertEquals(3, response.body.size()).     assertEquals("a", new String(response.body.get(0).asByteBuffer().array(), StandardCharsets.UTF_8)).     assertEquals("b", new String(response.body.get(1).asByteBuffer().array(), StandardCharsets.UTF_8)).     assertEquals("c", new String(response.body.get(2).asByteBuffer().array(), StandardCharsets.UTF_8)). }
false;public;0;13;;// SPR-14952 @Test public void writeAndFlushWithFluxOfDefaultDataBuffer() throws Exception {     TestServerHttpResponse response = new TestServerHttpResponse().     Flux<Flux<DefaultDataBuffer>> flux = Flux.just(Flux.just(wrap("foo"))).     response.writeAndFlushWith(flux).block().     assertTrue(response.statusCodeWritten).     assertTrue(response.headersWritten).     assertTrue(response.cookiesWritten).     assertEquals(1, response.body.size()).     assertEquals("foo", new String(response.body.get(0).asByteBuffer().array(), StandardCharsets.UTF_8)). }
false;public;0;13;;@Test public void writeWithError() throws Exception {     TestServerHttpResponse response = new TestServerHttpResponse().     response.getHeaders().setContentLength(12).     IllegalStateException error = new IllegalStateException("boo").     response.writeWith(Flux.error(error)).onErrorResume(ex -> Mono.empty()).block().     assertFalse(response.statusCodeWritten).     assertFalse(response.headersWritten).     assertFalse(response.cookiesWritten).     assertFalse(response.getHeaders().containsKey(HttpHeaders.CONTENT_LENGTH)).     assertTrue(response.body.isEmpty()). }
false;public;0;10;;@Test public void setComplete() throws Exception {     TestServerHttpResponse response = new TestServerHttpResponse().     response.setComplete().block().     assertTrue(response.statusCodeWritten).     assertTrue(response.headersWritten).     assertTrue(response.cookiesWritten).     assertTrue(response.body.isEmpty()). }
false;public;0;17;;@Test public void beforeCommitWithComplete() throws Exception {     ResponseCookie cookie = ResponseCookie.from("ID", "123").build().     TestServerHttpResponse response = new TestServerHttpResponse().     response.beforeCommit(() -> Mono.fromRunnable(() -> response.getCookies().add(cookie.getName(), cookie))).     response.writeWith(Flux.just(wrap("a"), wrap("b"), wrap("c"))).block().     assertTrue(response.statusCodeWritten).     assertTrue(response.headersWritten).     assertTrue(response.cookiesWritten).     assertSame(cookie, response.getCookies().getFirst("ID")).     assertEquals(3, response.body.size()).     assertEquals("a", new String(response.body.get(0).asByteBuffer().array(), StandardCharsets.UTF_8)).     assertEquals("b", new String(response.body.get(1).asByteBuffer().array(), StandardCharsets.UTF_8)).     assertEquals("c", new String(response.body.get(2).asByteBuffer().array(), StandardCharsets.UTF_8)). }
false;public;0;16;;@Test public void beforeCommitActionWithSetComplete() throws Exception {     ResponseCookie cookie = ResponseCookie.from("ID", "123").build().     TestServerHttpResponse response = new TestServerHttpResponse().     response.beforeCommit(() -> {         response.getCookies().add(cookie.getName(), cookie).         return Mono.empty().     }).     response.setComplete().block().     assertTrue(response.statusCodeWritten).     assertTrue(response.headersWritten).     assertTrue(response.cookiesWritten).     assertTrue(response.body.isEmpty()).     assertSame(cookie, response.getCookies().getFirst("ID")). }
false;private;1;3;;private DefaultDataBuffer wrap(String a) {     return new DefaultDataBufferFactory().wrap(ByteBuffer.wrap(a.getBytes(StandardCharsets.UTF_8))). }
false;public;0;4;;@Override public <T> T getNativeResponse() {     throw new IllegalStateException("This is a mock. No running server, no native response."). }
false;public;0;5;;@Override public void applyStatusCode() {     assertFalse(this.statusCodeWritten).     this.statusCodeWritten = true. }
false;protected;0;5;;@Override protected void applyHeaders() {     assertFalse(this.headersWritten).     this.headersWritten = true. }
false;protected;0;5;;@Override protected void applyCookies() {     assertFalse(this.cookiesWritten).     this.cookiesWritten = true. }
false;protected;1;7;;@Override protected Mono<Void> writeWithInternal(Publisher<? extends DataBuffer> body) {     return Flux.from(body).map(b -> {         this.body.add(b).         return b.     }).then(). }
false;protected;1;10;;@Override protected Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<? extends DataBuffer>> bodyWithFlush) {     return Flux.from(bodyWithFlush).flatMap(body -> Flux.from(body).map(b -> {         this.body.add(b).         return b.     })).then(). }
