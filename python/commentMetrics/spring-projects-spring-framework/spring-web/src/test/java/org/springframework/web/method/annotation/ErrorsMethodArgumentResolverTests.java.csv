commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() throws Exception {     paramErrors = new MethodParameter(getClass().getDeclaredMethod("handle", Errors.class), 0).     bindingResult = new WebDataBinder(new Object(), "attr").getBindingResult().     webRequest = new ServletWebRequest(new MockHttpServletRequest()). }
false;public;0;4;;@Test public void supports() {     resolver.supportsParameter(paramErrors). }
false;public;0;13;;@Test public void bindingResult() throws Exception {     ModelAndViewContainer mavContainer = new ModelAndViewContainer().     mavContainer.addAttribute("ignore1", "value1").     mavContainer.addAttribute("ignore2", "value2").     mavContainer.addAttribute("ignore3", "value3").     mavContainer.addAttribute("ignore4", "value4").     mavContainer.addAttribute("ignore5", "value5").     mavContainer.addAllAttributes(bindingResult.getModel()).     Object actual = resolver.resolveArgument(paramErrors, mavContainer, webRequest, null).     assertSame(actual, bindingResult). }
false;public;0;8;;@Test(expected = IllegalStateException.class) public void bindingResultNotFound() throws Exception {     ModelAndViewContainer mavContainer = new ModelAndViewContainer().     mavContainer.addAllAttributes(bindingResult.getModel()).     mavContainer.addAttribute("ignore1", "value1").     resolver.resolveArgument(paramErrors, mavContainer, webRequest, null). }
false;public;0;4;;@Test(expected = IllegalStateException.class) public void noBindingResult() throws Exception {     resolver.resolveArgument(paramErrors, new ModelAndViewContainer(), webRequest, null). }
false;private;1;3;;@SuppressWarnings("unused") private void handle(Errors errors) { }
