commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void canRead() {     assertTrue(this.converter.canRead(MyBean.class, new MediaType("application", "json"))).     assertTrue(this.converter.canRead(Map.class, new MediaType("application", "json"))). }
false;public;0;5;;@Test public void canWrite() {     assertTrue(this.converter.canWrite(MyBean.class, new MediaType("application", "json"))).     assertTrue(this.converter.canWrite(Map.class, new MediaType("application", "json"))). }
false;public;0;5;;@Test public void canReadAndWriteMicroformats() {     assertTrue(this.converter.canRead(MyBean.class, new MediaType("application", "vnd.test-micro-type+json"))).     assertTrue(this.converter.canWrite(MyBean.class, new MediaType("application", "vnd.test-micro-type+json"))). }
false;public;0;15;;@Test public void readTyped() throws IOException {     String body = "{\"bytes\":[1,2],\"array\":[\"Foo\",\"Bar\"]," + "\"number\":42,\"string\":\"Foo\",\"bool\":true,\"fraction\":42.0}".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "json")).     MyBean result = (MyBean) this.converter.read(MyBean.class, inputMessage).     assertEquals("Foo", result.getString()).     assertEquals(42, result.getNumber()).     assertEquals(42F, result.getFraction(), 0F).     assertArrayEquals(new String[] { "Foo", "Bar" }, result.getArray()).     assertTrue(result.isBool()).     assertArrayEquals(new byte[] { 0x1, 0x2 }, result.getBytes()). }
false;public;0;25;;@Test @SuppressWarnings("unchecked") public void readUntyped() throws IOException {     String body = "{\"bytes\":[1,2],\"array\":[\"Foo\",\"Bar\"]," + "\"number\":42,\"string\":\"Foo\",\"bool\":true,\"fraction\":42.0}".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "json")).     HashMap<String, Object> result = (HashMap<String, Object>) this.converter.read(HashMap.class, inputMessage).     assertEquals("Foo", result.get("string")).     Number n = (Number) result.get("number").     assertEquals(42, n.longValue()).     n = (Number) result.get("fraction").     assertEquals(42D, n.doubleValue(), 0D).     List<String> array = new ArrayList<>().     array.add("Foo").     array.add("Bar").     assertEquals(array, result.get("array")).     assertEquals(Boolean.TRUE, result.get("bool")).     byte[] bytes = new byte[2].     List<Number> resultBytes = (ArrayList<Number>) result.get("bytes").     for (int i = 0. i < 2. i++) {         bytes[i] = resultBytes.get(i).byteValue().     }     assertArrayEquals(new byte[] { 0x1, 0x2 }, bytes). }
false;public;0;22;;@Test public void write() throws IOException {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     MyBean body = new MyBean().     body.setString("Foo").     body.setNumber(42).     body.setFraction(42F).     body.setArray(new String[] { "Foo", "Bar" }).     body.setBool(true).     body.setBytes(new byte[] { 0x1, 0x2 }).     this.converter.write(body, null, outputMessage).     Charset utf8 = StandardCharsets.UTF_8.     String result = outputMessage.getBodyAsString(utf8).     assertTrue(result.contains("\"string\":\"Foo\"")).     assertTrue(result.contains("\"number\":42")).     assertTrue(result.contains("fraction\":42.0")).     assertTrue(result.contains("\"array\":[\"Foo\",\"Bar\"]")).     assertTrue(result.contains("\"bool\":true")).     assertTrue(result.contains("\"bytes\":[1,2]")).     assertEquals("Invalid content-type", new MediaType("application", "json", utf8), outputMessage.getHeaders().getContentType()). }
false;public;0;22;;@Test public void writeWithBaseType() throws IOException {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     MyBean body = new MyBean().     body.setString("Foo").     body.setNumber(42).     body.setFraction(42F).     body.setArray(new String[] { "Foo", "Bar" }).     body.setBool(true).     body.setBytes(new byte[] { 0x1, 0x2 }).     this.converter.write(body, MyBase.class, null, outputMessage).     Charset utf8 = StandardCharsets.UTF_8.     String result = outputMessage.getBodyAsString(utf8).     assertTrue(result.contains("\"string\":\"Foo\"")).     assertTrue(result.contains("\"number\":42")).     assertTrue(result.contains("fraction\":42.0")).     assertTrue(result.contains("\"array\":[\"Foo\",\"Bar\"]")).     assertTrue(result.contains("\"bool\":true")).     assertTrue(result.contains("\"bytes\":[1,2]")).     assertEquals("Invalid content-type", new MediaType("application", "json", utf8), outputMessage.getHeaders().getContentType()). }
false;public;0;9;;@Test public void writeUTF16() throws IOException {     MediaType contentType = new MediaType("application", "json", StandardCharsets.UTF_16BE).     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     String body = "H\u00e9llo W\u00f6rld".     this.converter.write(body, contentType, outputMessage).     assertEquals("Invalid result", "\"" + body + "\"", outputMessage.getBodyAsString(StandardCharsets.UTF_16BE)).     assertEquals("Invalid content-type", contentType, outputMessage.getHeaders().getContentType()). }
false;public;0;7;;@Test(expected = HttpMessageNotReadableException.class) public void readInvalidJson() throws IOException {     String body = "FooBar".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8")).     inputMessage.getHeaders().setContentType(new MediaType("application", "json")).     this.converter.read(MyBean.class, inputMessage). }
false;public;0;25;;@Test @SuppressWarnings("unchecked") public void readAndWriteGenerics() throws Exception {     Field beansList = ListHolder.class.getField("listField").     String body = "[{\"bytes\":[1,2],\"array\":[\"Foo\",\"Bar\"]," + "\"number\":42,\"string\":\"Foo\",\"bool\":true,\"fraction\":42.0}]".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes(StandardCharsets.UTF_8)).     inputMessage.getHeaders().setContentType(new MediaType("application", "json")).     Type genericType = beansList.getGenericType().     List<MyBean> results = (List<MyBean>) converter.read(genericType, MyBeanListHolder.class, inputMessage).     assertEquals(1, results.size()).     MyBean result = results.get(0).     assertEquals("Foo", result.getString()).     assertEquals(42, result.getNumber()).     assertEquals(42F, result.getFraction(), 0F).     assertArrayEquals(new String[] { "Foo", "Bar" }, result.getArray()).     assertTrue(result.isBool()).     assertArrayEquals(new byte[] { 0x1, 0x2 }, result.getBytes()).     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     converter.write(results, genericType, new MediaType("application", "json"), outputMessage).     JSONAssert.assertEquals(body, outputMessage.getBodyAsString(StandardCharsets.UTF_8), true). }
false;public;0;25;;@Test @SuppressWarnings("unchecked") public void readAndWriteParameterizedType() throws Exception {     ParameterizedTypeReference<List<MyBean>> beansList = new ParameterizedTypeReference<List<MyBean>>() {     }.     String body = "[{\"bytes\":[1,2],\"array\":[\"Foo\",\"Bar\"]," + "\"number\":42,\"string\":\"Foo\",\"bool\":true,\"fraction\":42.0}]".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes(StandardCharsets.UTF_8)).     inputMessage.getHeaders().setContentType(new MediaType("application", "json")).     List<MyBean> results = (List<MyBean>) converter.read(beansList.getType(), null, inputMessage).     assertEquals(1, results.size()).     MyBean result = results.get(0).     assertEquals("Foo", result.getString()).     assertEquals(42, result.getNumber()).     assertEquals(42F, result.getFraction(), 0F).     assertArrayEquals(new String[] { "Foo", "Bar" }, result.getArray()).     assertTrue(result.isBool()).     assertArrayEquals(new byte[] { 0x1, 0x2 }, result.getBytes()).     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     converter.write(results, beansList.getType(), new MediaType("application", "json"), outputMessage).     JSONAssert.assertEquals(body, outputMessage.getBodyAsString(StandardCharsets.UTF_8), true). }
false;public;0;25;;@Test @SuppressWarnings("unchecked") public void writeParameterizedBaseType() throws Exception {     ParameterizedTypeReference<List<MyBean>> beansList = new ParameterizedTypeReference<List<MyBean>>() {     }.     ParameterizedTypeReference<List<MyBase>> baseList = new ParameterizedTypeReference<List<MyBase>>() {     }.     String body = "[{\"bytes\":[1,2],\"array\":[\"Foo\",\"Bar\"]," + "\"number\":42,\"string\":\"Foo\",\"bool\":true,\"fraction\":42.0}]".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes(StandardCharsets.UTF_8)).     inputMessage.getHeaders().setContentType(new MediaType("application", "json")).     List<MyBean> results = (List<MyBean>) converter.read(beansList.getType(), null, inputMessage).     assertEquals(1, results.size()).     MyBean result = results.get(0).     assertEquals("Foo", result.getString()).     assertEquals(42, result.getNumber()).     assertEquals(42F, result.getFraction(), 0F).     assertArrayEquals(new String[] { "Foo", "Bar" }, result.getArray()).     assertTrue(result.isBool()).     assertArrayEquals(new byte[] { 0x1, 0x2 }, result.getBytes()).     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     converter.write(results, baseList.getType(), new MediaType("application", "json"), outputMessage).     JSONAssert.assertEquals(body, outputMessage.getBodyAsString(StandardCharsets.UTF_8), true). }
false;public;0;7;;@Test public void prefixJson() throws IOException {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     this.converter.setPrefixJson(true).     this.converter.writeInternal("foo", null, outputMessage).     assertEquals(")]}', \"foo\"", outputMessage.getBodyAsString(StandardCharsets.UTF_8)). }
false;public;0;7;;@Test public void prefixJsonCustom() throws IOException {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     this.converter.setJsonPrefix(")))").     this.converter.writeInternal("foo", null, outputMessage).     assertEquals(")))\"foo\"", outputMessage.getBodyAsString(StandardCharsets.UTF_8)). }
false;public;0;3;;public String getString() {     return string. }
false;public;1;3;;public void setString(String string) {     this.string = string. }
false;public;0;3;;public int getNumber() {     return number. }
false;public;1;3;;public void setNumber(int number) {     this.number = number. }
false;public;0;3;;public float getFraction() {     return fraction. }
false;public;1;3;;public void setFraction(float fraction) {     this.fraction = fraction. }
false;public;0;3;;public String[] getArray() {     return array. }
false;public;1;3;;public void setArray(String[] array) {     this.array = array. }
false;public;0;3;;public boolean isBool() {     return bool. }
false;public;1;3;;public void setBool(boolean bool) {     this.bool = bool. }
false;public;0;3;;public byte[] getBytes() {     return bytes. }
false;public;1;3;;public void setBytes(byte[] bytes) {     this.bytes = bytes. }
