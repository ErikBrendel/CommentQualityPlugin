commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test @SuppressWarnings("resource") public void registerSingleClass() {     AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext().     ctx.register(Config.class).     ctx.refresh().     TestBean bean = ctx.getBean(TestBean.class).     assertNotNull(bean). }
false;public;0;10;;@Test @SuppressWarnings("resource") public void configLocationWithSingleClass() {     AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext().     ctx.setConfigLocation(Config.class.getName()).     ctx.refresh().     TestBean bean = ctx.getBean(TestBean.class).     assertNotNull(bean). }
false;public;0;10;;@Test @SuppressWarnings("resource") public void configLocationWithBasePackage() {     AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext().     ctx.setConfigLocation("org.springframework.web.context.support").     ctx.refresh().     TestBean bean = ctx.getBean(TestBean.class).     assertNotNull(bean). }
false;public;2;5;;@Override public String generateBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {     return "custom-" + super.generateBeanName(definition, registry). }
false;public;0;15;;@Test @SuppressWarnings("resource") public void withBeanNameGenerator() {     AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext().     ctx.setBeanNameGenerator(new AnnotationBeanNameGenerator() {          @Override         public String generateBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {             return "custom-" + super.generateBeanName(definition, registry).         }     }).     ctx.setConfigLocation(Config.class.getName()).     ctx.refresh().     assertThat(ctx.containsBean("custom-myConfig"), is(true)). }
false;public;0;4;;@Bean public TestBean myTestBean() {     return new TestBean(). }
