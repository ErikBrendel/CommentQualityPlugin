commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public Object evaluate(javax.servlet.jsp.el.VariableResolver variableResolver) throws javax.servlet.jsp.el.ELException {     return doEvaluate(expression, expectedType, functionMapper). }
false;public;3;12;;@Override @SuppressWarnings("rawtypes") public javax.servlet.jsp.el.Expression parseExpression(final String expression, final Class expectedType, final javax.servlet.jsp.el.FunctionMapper functionMapper) throws javax.servlet.jsp.el.ELException {     return new javax.servlet.jsp.el.Expression() {          @Override         public Object evaluate(javax.servlet.jsp.el.VariableResolver variableResolver) throws javax.servlet.jsp.el.ELException {             return doEvaluate(expression, expectedType, functionMapper).         }     }. }
false;public;4;7;;@Override @SuppressWarnings("rawtypes") public Object evaluate(String expression, Class expectedType, javax.servlet.jsp.el.VariableResolver variableResolver, javax.servlet.jsp.el.FunctionMapper functionMapper) throws javax.servlet.jsp.el.ELException {     return doEvaluate(expression, expectedType, functionMapper). }
false;protected;3;11;;@SuppressWarnings("rawtypes") protected Object doEvaluate(String expression, Class expectedType, javax.servlet.jsp.el.FunctionMapper functionMapper) throws javax.servlet.jsp.el.ELException {     try {         return ExpressionEvaluatorManager.evaluate("JSP EL expression", expression, expectedType, this.pageContext).     } catch (JspException ex) {         throw new javax.servlet.jsp.el.ELException("Parsing of JSP EL expression \"" + expression + "\" failed", ex).     } }
