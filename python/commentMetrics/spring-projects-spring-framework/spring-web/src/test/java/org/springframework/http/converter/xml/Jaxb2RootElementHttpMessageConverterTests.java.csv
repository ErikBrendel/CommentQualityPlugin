commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setup() {     converter = new Jaxb2RootElementHttpMessageConverter().     rootElement = new RootElement().     DefaultAopProxyFactory proxyFactory = new DefaultAopProxyFactory().     AdvisedSupport advisedSupport = new AdvisedSupport().     advisedSupport.setTarget(rootElement).     advisedSupport.setProxyTargetClass(true).     AopProxy proxy = proxyFactory.createAopProxy(advisedSupport).     rootElementCglib = (RootElement) proxy.getProxy(). }
false;public;0;7;;@Test public void canRead() {     assertTrue("Converter does not support reading @XmlRootElement", converter.canRead(RootElement.class, null)).     assertTrue("Converter does not support reading @XmlType", converter.canRead(Type.class, null)). }
false;public;0;10;;@Test public void canWrite() {     assertTrue("Converter does not support writing @XmlRootElement", converter.canWrite(RootElement.class, null)).     assertTrue("Converter does not support writing @XmlRootElement subclass", converter.canWrite(RootElementSubclass.class, null)).     assertTrue("Converter does not support writing @XmlRootElement subclass", converter.canWrite(rootElementCglib.getClass(), null)).     assertFalse("Converter supports writing @XmlType", converter.canWrite(Type.class, null)). }
false;public;0;7;;@Test public void readXmlRootElement() throws Exception {     byte[] body = "<rootElement><type s=\"Hello World\"/></rootElement>".getBytes("UTF-8").     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body).     RootElement result = (RootElement) converter.read(RootElement.class, inputMessage).     assertEquals("Invalid result", "Hello World", result.type.s). }
false;public;0;7;;@Test public void readXmlRootElementSubclass() throws Exception {     byte[] body = "<rootElement><type s=\"Hello World\"/></rootElement>".getBytes("UTF-8").     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body).     RootElementSubclass result = (RootElementSubclass) converter.read(RootElementSubclass.class, inputMessage).     assertEquals("Invalid result", "Hello World", result.getType().s). }
false;public;0;7;;@Test public void readXmlType() throws Exception {     byte[] body = "<foo s=\"Hello World\"/>".getBytes("UTF-8").     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body).     Type result = (Type) converter.read(Type.class, inputMessage).     assertEquals("Invalid result", "Hello World", result.s). }
false;public;0;13;;@Test public void readXmlRootElementExternalEntityDisabled() throws Exception {     Resource external = new ClassPathResource("external.txt", getClass()).     String content = "<!DOCTYPE root SYSTEM \"http://192.168.28.42/1.jsp\" [" + "  <!ELEMENT external ANY >\n" + "  <!ENTITY ext SYSTEM \"" + external.getURI() + "\" >]>" + "  <rootElement><external>&ext.</external></rootElement>".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(content.getBytes("UTF-8")).     converter.setSupportDtd(true).     RootElement rootElement = (RootElement) converter.read(RootElement.class, inputMessage).     assertEquals("", rootElement.external). }
false;public;0;13;;@Test public void readXmlRootElementExternalEntityEnabled() throws Exception {     Resource external = new ClassPathResource("external.txt", getClass()).     String content = "<!DOCTYPE root [" + "  <!ELEMENT external ANY >\n" + "  <!ENTITY ext SYSTEM \"" + external.getURI() + "\" >]>" + "  <rootElement><external>&ext.</external></rootElement>".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(content.getBytes("UTF-8")).     this.converter.setProcessExternalEntities(true).     RootElement rootElement = (RootElement) converter.read(RootElement.class, inputMessage).     assertEquals("Foo Bar", rootElement.external). }
false;public;0;24;;@Test public void testXmlBomb() throws Exception {     // https://en.wikipedia.org/wiki/Billion_laughs     // https://msdn.microsoft.com/en-us/magazine/ee335713.aspx     String content = "<?xml version=\"1.0\"?>\n" + "<!DOCTYPE lolz [\n" + " <!ENTITY lol \"lol\">\n" + " <!ELEMENT lolz (#PCDATA)>\n" + " <!ENTITY lol1 \"&lol.&lol.&lol.&lol.&lol.&lol.&lol.&lol.&lol.&lol.\">\n" + " <!ENTITY lol2 \"&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.&lol1.\">\n" + " <!ENTITY lol3 \"&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.&lol2.\">\n" + " <!ENTITY lol4 \"&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.&lol3.\">\n" + " <!ENTITY lol5 \"&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.&lol4.\">\n" + " <!ENTITY lol6 \"&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.&lol5.\">\n" + " <!ENTITY lol7 \"&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.&lol6.\">\n" + " <!ENTITY lol8 \"&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.&lol7.\">\n" + " <!ENTITY lol9 \"&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.&lol8.\">\n" + "]>\n" + "<rootElement><external>&lol9.</external></rootElement>".     MockHttpInputMessage inputMessage = new MockHttpInputMessage(content.getBytes("UTF-8")).     this.thrown.expect(HttpMessageNotReadableException.class).     this.thrown.expectMessage("DOCTYPE").     this.converter.read(RootElement.class, inputMessage). }
false;public;0;10;;@Test public void writeXmlRootElement() throws Exception {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     converter.write(rootElement, null, outputMessage).     assertEquals("Invalid content-type", new MediaType("application", "xml"), outputMessage.getHeaders().getContentType()).     DifferenceEvaluator ev = chain(Default, downgradeDifferencesToEqual(XML_STANDALONE)).     assertThat("Invalid result", outputMessage.getBodyAsString(StandardCharsets.UTF_8), isSimilarTo("<rootElement><type s=\"Hello World\"/></rootElement>").withDifferenceEvaluator(ev)). }
false;public;0;10;;@Test public void writeXmlRootElementSubclass() throws Exception {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     converter.write(rootElementCglib, null, outputMessage).     assertEquals("Invalid content-type", new MediaType("application", "xml"), outputMessage.getHeaders().getContentType()).     DifferenceEvaluator ev = chain(Default, downgradeDifferencesToEqual(XML_STANDALONE)).     assertThat("Invalid result", outputMessage.getBodyAsString(StandardCharsets.UTF_8), isSimilarTo("<rootElement><type s=\"Hello World\"/></rootElement>").withDifferenceEvaluator(ev)). }
false;public;0;9;;// SPR-11488 @Test public void customizeMarshaller() throws Exception {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     MyJaxb2RootElementHttpMessageConverter myConverter = new MyJaxb2RootElementHttpMessageConverter().     myConverter.write(new MyRootElement(new MyCustomElement("a", "b")), null, outputMessage).     DifferenceEvaluator ev = chain(Default, downgradeDifferencesToEqual(XML_STANDALONE)).     assertThat("Invalid result", outputMessage.getBodyAsString(StandardCharsets.UTF_8), isSimilarTo("<myRootElement><element>a|||b</element></myRootElement>").withDifferenceEvaluator(ev)). }
false;public;0;9;;@Test public void customizeUnmarshaller() throws Exception {     byte[] body = "<myRootElement><element>a|||b</element></myRootElement>".getBytes("UTF-8").     MyJaxb2RootElementHttpMessageConverter myConverter = new MyJaxb2RootElementHttpMessageConverter().     MockHttpInputMessage inputMessage = new MockHttpInputMessage(body).     MyRootElement result = (MyRootElement) myConverter.read(MyRootElement.class, inputMessage).     assertEquals("a", result.getElement().getField1()).     assertEquals("b", result.getElement().getField2()). }
false;public;0;3;;public Type getType() {     return this.type. }
false;public;1;4;;@XmlElement public void setType(Type type) {     this.type = type. }
false;protected;1;4;;@Override protected void customizeMarshaller(Marshaller marshaller) {     marshaller.setAdapter(new MyCustomElementAdapter()). }
false;protected;1;4;;@Override protected void customizeUnmarshaller(Unmarshaller unmarshaller) {     unmarshaller.setAdapter(new MyCustomElementAdapter()). }
false;public;0;3;;public String getField1() {     return field1. }
false;public;1;3;;public void setField1(String field1) {     this.field1 = field1. }
false;public;0;3;;public String getField2() {     return field2. }
false;public;1;3;;public void setField2(String field2) {     this.field2 = field2. }
false;public;0;4;;@XmlJavaTypeAdapter(MyCustomElementAdapter.class) public MyCustomElement getElement() {     return element. }
false;public;1;3;;public void setElement(MyCustomElement element) {     this.element = element. }
false;public;1;4;;@Override public String marshal(MyCustomElement c) throws Exception {     return c.getField1() + "|||" + c.getField2(). }
false;public;1;5;;@Override public MyCustomElement unmarshal(String c) throws Exception {     String[] t = c.split("\\|\\|\\|").     return new MyCustomElement(t[0], t[1]). }
