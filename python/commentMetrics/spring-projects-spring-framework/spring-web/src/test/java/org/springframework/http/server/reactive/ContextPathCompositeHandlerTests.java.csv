commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void invalidContextPath() {     testInvalid("  ", "Context path must not be empty").     testInvalid("path", "Context path must begin with '/'").     testInvalid("/path/", "Context path must not end with '/'"). }
false;private;2;9;;private void testInvalid(String contextPath, String expectedError) {     try {         new ContextPathCompositeHandler(Collections.singletonMap(contextPath, new TestHttpHandler())).         fail().     } catch (IllegalArgumentException ex) {         assertEquals(expectedError, ex.getMessage()).     } }
false;public;0;16;;@Test public void match() {     TestHttpHandler handler1 = new TestHttpHandler().     TestHttpHandler handler2 = new TestHttpHandler().     TestHttpHandler handler3 = new TestHttpHandler().     Map<String, HttpHandler> map = new HashMap<>().     map.put("/path", handler1).     map.put("/another/path", handler2).     map.put("/yet/another/path", handler3).     testHandle("/another/path/and/more", map).     assertInvoked(handler2, "/another/path").     assertNotInvoked(handler1, handler3). }
false;public;0;16;;@Test public void matchWithContextPathEqualToPath() {     TestHttpHandler handler1 = new TestHttpHandler().     TestHttpHandler handler2 = new TestHttpHandler().     TestHttpHandler handler3 = new TestHttpHandler().     Map<String, HttpHandler> map = new HashMap<>().     map.put("/path", handler1).     map.put("/another/path", handler2).     map.put("/yet/another/path", handler3).     testHandle("/path", map).     assertInvoked(handler1, "/path").     assertNotInvoked(handler2, handler3). }
false;public;0;15;;@Test public void matchWithNativeContextPath() {     MockServerHttpRequest request = MockServerHttpRequest.get("/yet/another/path").contextPath(// contextPath in underlying request     "/yet").build().     TestHttpHandler handler = new TestHttpHandler().     Map<String, HttpHandler> map = Collections.singletonMap("/another/path", handler).     new ContextPathCompositeHandler(map).handle(request, new MockServerHttpResponse()).     assertTrue(handler.wasInvoked()).     assertEquals("/yet/another/path", handler.getRequest().getPath().contextPath().value()). }
false;public;0;14;;@Test public void notFound() {     TestHttpHandler handler1 = new TestHttpHandler().     TestHttpHandler handler2 = new TestHttpHandler().     Map<String, HttpHandler> map = new HashMap<>().     map.put("/path", handler1).     map.put("/another/path", handler2).     ServerHttpResponse response = testHandle("/yet/another/path", map).     assertNotInvoked(handler1, handler2).     assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode()). }
false;public;0;21;;// SPR-17144 @Test public void notFoundWithCommitAction() {     AtomicBoolean commitInvoked = new AtomicBoolean(false).     ServerHttpRequest request = MockServerHttpRequest.get("/unknown/path").build().     ServerHttpResponse response = new MockServerHttpResponse().     response.beforeCommit(() -> {         commitInvoked.set(true).         return Mono.empty().     }).     Map<String, HttpHandler> map = new HashMap<>().     TestHttpHandler handler = new TestHttpHandler().     map.put("/path", handler).     new ContextPathCompositeHandler(map).handle(request, response).block(Duration.ofSeconds(5)).     assertNotInvoked(handler).     assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode()).     assertTrue(commitInvoked.get()). }
false;private;2;6;;private ServerHttpResponse testHandle(String pathToHandle, Map<String, HttpHandler> handlerMap) {     ServerHttpRequest request = MockServerHttpRequest.get(pathToHandle).build().     ServerHttpResponse response = new MockServerHttpResponse().     new ContextPathCompositeHandler(handlerMap).handle(request, response).block(Duration.ofSeconds(5)).     return response. }
false;private;2;4;;private void assertInvoked(TestHttpHandler handler, String contextPath) {     assertTrue(handler.wasInvoked()).     assertEquals(contextPath, handler.getRequest().getPath().contextPath().value()). }
false;private;1;3;;private void assertNotInvoked(TestHttpHandler... handlers) {     Arrays.stream(handlers).forEach(handler -> assertFalse(handler.wasInvoked())). }
false;public;0;3;;public boolean wasInvoked() {     return (this.request != null). }
false;public;0;3;;public ServerHttpRequest getRequest() {     return this.request. }
false;public;2;5;;@Override public Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) {     this.request = request.     return Mono.empty(). }
