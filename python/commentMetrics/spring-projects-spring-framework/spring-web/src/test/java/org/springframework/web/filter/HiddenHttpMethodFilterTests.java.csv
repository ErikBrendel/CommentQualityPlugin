commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void filterWithParameter() throws IOException, ServletException {     filterWithParameterForMethod("delete", "DELETE").     filterWithParameterForMethod("put", "PUT").     filterWithParameterForMethod("patch", "PATCH"). }
false;public;0;6;;@Test public void filterWithParameterDisallowedMethods() throws IOException, ServletException {     filterWithParameterForMethod("trace", "POST").     filterWithParameterForMethod("head", "POST").     filterWithParameterForMethod("options", "POST"). }
false;public;0;4;;@Test public void filterWithNoParameter() throws IOException, ServletException {     filterWithParameterForMethod(null, "POST"). }
false;public;2;6;;@Override public void doFilter(ServletRequest filterRequest, ServletResponse filterResponse) throws IOException, ServletException {     assertEquals("Invalid method", expectedMethod, ((HttpServletRequest) filterRequest).getMethod()). }
false;private;2;19;;private void filterWithParameterForMethod(String methodParam, String expectedMethod) throws IOException, ServletException {     MockHttpServletRequest request = new MockHttpServletRequest("POST", "/hotels").     if (methodParam != null) {         request.addParameter("_method", methodParam).     }     MockHttpServletResponse response = new MockHttpServletResponse().     FilterChain filterChain = new FilterChain() {          @Override         public void doFilter(ServletRequest filterRequest, ServletResponse filterResponse) throws IOException, ServletException {             assertEquals("Invalid method", expectedMethod, ((HttpServletRequest) filterRequest).getMethod()).         }     }.     this.filter.doFilter(request, response, filterChain). }
