# id;timestamp;commentText;codeText;commentWords;codeWords
MockClientHttpRequest -> public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler);1486522658;Configure a custom handler for writing the request body.__<p>The default write handler consumes and caches the request body so it_may be accessed subsequently, e.g. in test assertions. Use this property_when the request body is an infinite stream.__@param writeHandler the write handler to use returning {@code Mono<Void>}_when the body has been "written" (i.e. consumed).;public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler) {_		Assert.notNull(writeHandler, "'writeHandler' is required")__		this.writeHandler = writeHandler__	};configure,a,custom,handler,for,writing,the,request,body,p,the,default,write,handler,consumes,and,caches,the,request,body,so,it,may,be,accessed,subsequently,e,g,in,test,assertions,use,this,property,when,the,request,body,is,an,infinite,stream,param,write,handler,the,write,handler,to,use,returning,code,mono,void,when,the,body,has,been,written,i,e,consumed;public,void,set,write,handler,function,flux,data,buffer,mono,void,write,handler,assert,not,null,write,handler,write,handler,is,required,this,write,handler,write,handler
MockClientHttpRequest -> public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler);1509466098;Configure a custom handler for writing the request body.__<p>The default write handler consumes and caches the request body so it_may be accessed subsequently, e.g. in test assertions. Use this property_when the request body is an infinite stream.__@param writeHandler the write handler to use returning {@code Mono<Void>}_when the body has been "written" (i.e. consumed).;public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler) {_		Assert.notNull(writeHandler, "'writeHandler' is required")__		this.writeHandler = writeHandler__	};configure,a,custom,handler,for,writing,the,request,body,p,the,default,write,handler,consumes,and,caches,the,request,body,so,it,may,be,accessed,subsequently,e,g,in,test,assertions,use,this,property,when,the,request,body,is,an,infinite,stream,param,write,handler,the,write,handler,to,use,returning,code,mono,void,when,the,body,has,been,written,i,e,consumed;public,void,set,write,handler,function,flux,data,buffer,mono,void,write,handler,assert,not,null,write,handler,write,handler,is,required,this,write,handler,write,handler
MockClientHttpRequest -> public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler);1530308063;Configure a custom handler for writing the request body.__<p>The default write handler consumes and caches the request body so it_may be accessed subsequently, e.g. in test assertions. Use this property_when the request body is an infinite stream.__@param writeHandler the write handler to use returning {@code Mono<Void>}_when the body has been "written" (i.e. consumed).;public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler) {_		Assert.notNull(writeHandler, "'writeHandler' is required")__		this.writeHandler = writeHandler__	};configure,a,custom,handler,for,writing,the,request,body,p,the,default,write,handler,consumes,and,caches,the,request,body,so,it,may,be,accessed,subsequently,e,g,in,test,assertions,use,this,property,when,the,request,body,is,an,infinite,stream,param,write,handler,the,write,handler,to,use,returning,code,mono,void,when,the,body,has,been,written,i,e,consumed;public,void,set,write,handler,function,flux,data,buffer,mono,void,write,handler,assert,not,null,write,handler,write,handler,is,required,this,write,handler,write,handler
MockClientHttpRequest -> public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler);1530308265;Configure a custom handler for writing the request body.__<p>The default write handler consumes and caches the request body so it_may be accessed subsequently, e.g. in test assertions. Use this property_when the request body is an infinite stream.__@param writeHandler the write handler to use returning {@code Mono<Void>}_when the body has been "written" (i.e. consumed).;public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler) {_		Assert.notNull(writeHandler, "'writeHandler' is required")__		this.writeHandler = writeHandler__	};configure,a,custom,handler,for,writing,the,request,body,p,the,default,write,handler,consumes,and,caches,the,request,body,so,it,may,be,accessed,subsequently,e,g,in,test,assertions,use,this,property,when,the,request,body,is,an,infinite,stream,param,write,handler,the,write,handler,to,use,returning,code,mono,void,when,the,body,has,been,written,i,e,consumed;public,void,set,write,handler,function,flux,data,buffer,mono,void,write,handler,assert,not,null,write,handler,write,handler,is,required,this,write,handler,write,handler
MockClientHttpRequest -> public Mono<String> getBodyAsString();1530308063;Aggregate response data and convert to a String using the "Content-Type"_charset or "UTF-8" by default.;public Mono<String> getBodyAsString() {__		Charset charset = Optional.ofNullable(getHeaders().getContentType()).map(MimeType::getCharset)_				.orElse(StandardCharsets.UTF_8)___		return getBody()_				.reduce(bufferFactory().allocateBuffer(), (previous, current) -> {_					previous.write(current)__					DataBufferUtils.release(current)__					return previous__				})_				.map(buffer -> bufferToString(buffer, charset))__	};aggregate,response,data,and,convert,to,a,string,using,the,content,type,charset,or,utf,8,by,default;public,mono,string,get,body,as,string,charset,charset,optional,of,nullable,get,headers,get,content,type,map,mime,type,get,charset,or,else,standard,charsets,return,get,body,reduce,buffer,factory,allocate,buffer,previous,current,previous,write,current,data,buffer,utils,release,current,return,previous,map,buffer,buffer,to,string,buffer,charset
MockClientHttpRequest -> public Mono<String> getBodyAsString();1530308265;Aggregate response data and convert to a String using the "Content-Type"_charset or "UTF-8" by default.;public Mono<String> getBodyAsString() {__		Charset charset = Optional.ofNullable(getHeaders().getContentType()).map(MimeType::getCharset)_				.orElse(StandardCharsets.UTF_8)___		return getBody()_				.reduce(bufferFactory().allocateBuffer(), (previous, current) -> {_					previous.write(current)__					DataBufferUtils.release(current)__					return previous__				})_				.map(buffer -> bufferToString(buffer, charset))__	};aggregate,response,data,and,convert,to,a,string,using,the,content,type,charset,or,utf,8,by,default;public,mono,string,get,body,as,string,charset,charset,optional,of,nullable,get,headers,get,content,type,map,mime,type,get,charset,or,else,standard,charsets,return,get,body,reduce,buffer,factory,allocate,buffer,previous,current,previous,write,current,data,buffer,utils,release,current,return,previous,map,buffer,buffer,to,string,buffer,charset
MockClientHttpRequest -> public Flux<DataBuffer> getBody();1486522658;Return the request body, or an error stream if the body was never set_or when {@link #setWriteHandler} is configured.;public Flux<DataBuffer> getBody() {_		return this.body__	};return,the,request,body,or,an,error,stream,if,the,body,was,never,set,or,when,link,set,write,handler,is,configured;public,flux,data,buffer,get,body,return,this,body
MockClientHttpRequest -> public Flux<DataBuffer> getBody();1509466098;Return the request body, or an error stream if the body was never set_or when {@link #setWriteHandler} is configured.;public Flux<DataBuffer> getBody() {_		return this.body__	};return,the,request,body,or,an,error,stream,if,the,body,was,never,set,or,when,link,set,write,handler,is,configured;public,flux,data,buffer,get,body,return,this,body
MockClientHttpRequest -> public Flux<DataBuffer> getBody();1530308063;Return the request body, or an error stream if the body was never set_or when {@link #setWriteHandler} is configured.;public Flux<DataBuffer> getBody() {_		return this.body__	};return,the,request,body,or,an,error,stream,if,the,body,was,never,set,or,when,link,set,write,handler,is,configured;public,flux,data,buffer,get,body,return,this,body
MockClientHttpRequest -> public Flux<DataBuffer> getBody();1530308265;Return the request body, or an error stream if the body was never set_or when {@link #setWriteHandler} is configured.;public Flux<DataBuffer> getBody() {_		return this.body__	};return,the,request,body,or,an,error,stream,if,the,body,was,never,set,or,when,link,set,write,handler,is,configured;public,flux,data,buffer,get,body,return,this,body
