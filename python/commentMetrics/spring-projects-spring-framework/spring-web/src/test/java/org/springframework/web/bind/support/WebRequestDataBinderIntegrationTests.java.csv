commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;24;;@BeforeClass public static void startJettyServer() throws Exception {     // Let server pick its own random, available port.     jettyServer = new Server(0).     ServletContextHandler handler = new ServletContextHandler().     MultipartConfigElement multipartConfig = new MultipartConfigElement("").     ServletHolder holder = new ServletHolder(partsServlet).     holder.getRegistration().setMultipartConfig(multipartConfig).     handler.addServlet(holder, "/parts").     holder = new ServletHolder(partListServlet).     holder.getRegistration().setMultipartConfig(multipartConfig).     handler.addServlet(holder, "/partlist").     jettyServer.setHandler(handler).     jettyServer.start().     Connector[] connectors = jettyServer.getConnectors().     NetworkConnector connector = (NetworkConnector) connectors[0].     baseUrl = "http://localhost:" + connector.getLocalPort(). }
false;public,static;0;6;;@AfterClass public static void stopJettyServer() throws Exception {     if (jettyServer != null) {         jettyServer.stop().     } }
false;public;0;15;;@Test public void partsBinding() {     PartsBean bean = new PartsBean().     partsServlet.setBean(bean).     MultiValueMap<String, Object> parts = new LinkedMultiValueMap<>().     Resource firstPart = new ClassPathResource("/org/springframework/http/converter/logo.jpg").     parts.add("firstPart", firstPart).     parts.add("secondPart", "secondValue").     template.postForLocation(baseUrl + "/parts", parts).     assertNotNull(bean.getFirstPart()).     assertNotNull(bean.getSecondPart()). }
false;public;0;16;;@Test public void partListBinding() {     PartListBean bean = new PartListBean().     partListServlet.setBean(bean).     MultiValueMap<String, Object> parts = new LinkedMultiValueMap<>().     parts.add("partList", "first value").     parts.add("partList", "second value").     Resource logo = new ClassPathResource("/org/springframework/http/converter/logo.jpg").     parts.add("partList", logo).     template.postForLocation(baseUrl + "/partlist", parts).     assertNotNull(bean.getPartList()).     assertEquals(parts.get("partList").size(), bean.getPartList().size()). }
false;public;2;7;;@Override public void service(HttpServletRequest request, HttpServletResponse response) {     WebRequestDataBinder binder = new WebRequestDataBinder(bean).     ServletWebRequest webRequest = new ServletWebRequest(request, response).     binder.bind(webRequest).     response.setStatus(HttpServletResponse.SC_OK). }
false;public;1;3;;public void setBean(T bean) {     this.bean = bean. }
false;public;0;3;;public Part getFirstPart() {     return firstPart. }
false;public;1;4;;@SuppressWarnings("unused") public void setFirstPart(Part firstPart) {     this.firstPart = firstPart. }
false;public;0;3;;public Part getSecondPart() {     return secondPart. }
false;public;1;4;;@SuppressWarnings("unused") public void setSecondPart(Part secondPart) {     this.secondPart = secondPart. }
false;public;0;3;;public List<Part> getPartList() {     return partList. }
false;public;1;4;;@SuppressWarnings("unused") public void setPartList(List<Part> partList) {     this.partList = partList. }
