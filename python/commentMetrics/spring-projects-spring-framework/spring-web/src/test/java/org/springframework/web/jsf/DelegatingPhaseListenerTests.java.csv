commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected ListableBeanFactory getBeanFactory(FacesContext facesContext) {     return beanFactory. }
false;public;0;14;;@Test public void beforeAndAfterPhaseWithSingleTarget() {     TestListener target = new TestListener().     beanFactory.addBean("testListener", target).     assertEquals(PhaseId.ANY_PHASE, delPhaseListener.getPhaseId()).     PhaseEvent event = new PhaseEvent(facesContext, PhaseId.INVOKE_APPLICATION, new MockLifecycle()).     delPhaseListener.beforePhase(event).     assertTrue(target.beforeCalled).     delPhaseListener.afterPhase(event).     assertTrue(target.afterCalled). }
false;public;0;18;;@Test public void beforeAndAfterPhaseWithMultipleTargets() {     TestListener target1 = new TestListener().     TestListener target2 = new TestListener().     beanFactory.addBean("testListener1", target1).     beanFactory.addBean("testListener2", target2).     assertEquals(PhaseId.ANY_PHASE, delPhaseListener.getPhaseId()).     PhaseEvent event = new PhaseEvent(facesContext, PhaseId.INVOKE_APPLICATION, new MockLifecycle()).     delPhaseListener.beforePhase(event).     assertTrue(target1.beforeCalled).     assertTrue(target2.beforeCalled).     delPhaseListener.afterPhase(event).     assertTrue(target1.afterCalled).     assertTrue(target2.afterCalled). }
false;public;0;4;;@Override public PhaseId getPhaseId() {     return PhaseId.ANY_PHASE. }
false;public;1;4;;@Override public void beforePhase(PhaseEvent arg0) {     beforeCalled = true. }
false;public;1;4;;@Override public void afterPhase(PhaseEvent arg0) {     afterCalled = true. }
