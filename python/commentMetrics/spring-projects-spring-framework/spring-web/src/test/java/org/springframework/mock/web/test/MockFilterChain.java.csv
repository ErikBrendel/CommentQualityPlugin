commented;modifiers;parameterAmount;loc;comment;code
false;private,static;2;4;;private static List<Filter> initFilterList(Servlet servlet, Filter... filters) {     Filter[] allFilters = ObjectUtils.addObjectToArray(filters, new ServletFilterProxy(servlet)).     return Arrays.asList(allFilters). }
true;public;0;4;/**  * Return the request that {@link #doFilter} has been called with.  */ ;/**  * Return the request that {@link #doFilter} has been called with.  */ @Nullable public ServletRequest getRequest() {     return this.request. }
true;public;0;4;/**  * Return the response that {@link #doFilter} has been called with.  */ ;/**  * Return the response that {@link #doFilter} has been called with.  */ @Nullable public ServletResponse getResponse() {     return this.response. }
true;public;2;18;/**  * Invoke registered {@link Filter Filters} and/or {@link Servlet} also saving the  * request and response.  */ ;/**  * Invoke registered {@link Filter Filters} and/or {@link Servlet} also saving the  * request and response.  */ @Override public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {     Assert.notNull(request, "Request must not be null").     Assert.notNull(response, "Response must not be null").     Assert.state(this.request == null, "This FilterChain has already been called!").     if (this.iterator == null) {         this.iterator = this.filters.iterator().     }     if (this.iterator.hasNext()) {         Filter nextFilter = this.iterator.next().         nextFilter.doFilter(request, response, this).     }     this.request = request.     this.response = response. }
true;public;0;5;/**  * Reset the {@link MockFilterChain} allowing it to be invoked again.  */ ;/**  * Reset the {@link MockFilterChain} allowing it to be invoked again.  */ public void reset() {     this.request = null.     this.response = null.     this.iterator = null. }
false;public;3;6;;@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {     this.delegateServlet.service(request, response). }
false;public;1;3;;@Override public void init(FilterConfig filterConfig) throws ServletException { }
false;public;0;3;;@Override public void destroy() { }
false;public;0;4;;@Override public String toString() {     return this.delegateServlet.toString(). }
