commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Before public void setUp() throws Exception {     when(this.createSession.save()).thenReturn(Mono.empty()).     when(this.createSession.getId()).thenReturn("create-session-id").     when(this.updateSession.getId()).thenReturn("update-session-id").     when(this.sessionStore.createWebSession()).thenReturn(Mono.just(this.createSession)).     when(this.sessionStore.retrieveSession(this.updateSession.getId())).thenReturn(Mono.just(this.updateSession)).     this.sessionManager = new DefaultWebSessionManager().     this.sessionManager.setSessionIdResolver(this.sessionIdResolver).     this.sessionManager.setSessionStore(this.sessionStore).     MockServerHttpRequest request = MockServerHttpRequest.get("/path").build().     MockServerHttpResponse response = new MockServerHttpResponse().     this.exchange = new DefaultServerWebExchange(request, response, this.sessionManager, ServerCodecConfigurer.create(), new AcceptHeaderLocaleContextResolver()). }
false;public;0;13;;@Test public void getSessionSaveWhenCreatedAndNotStartedThenNotSaved() {     when(this.sessionIdResolver.resolveSessionIds(this.exchange)).thenReturn(Collections.emptyList()).     WebSession session = this.sessionManager.getSession(this.exchange).block().     this.exchange.getResponse().setComplete().block().     assertSame(this.createSession, session).     assertFalse(session.isStarted()).     assertFalse(session.isExpired()).     verify(this.createSession, never()).save().     verify(this.sessionIdResolver, never()).setSessionId(any(), any()). }
false;public;0;15;;@Test public void getSessionSaveWhenCreatedAndStartedThenSavesAndSetsId() {     when(this.sessionIdResolver.resolveSessionIds(this.exchange)).thenReturn(Collections.emptyList()).     WebSession session = this.sessionManager.getSession(this.exchange).block().     assertSame(this.createSession, session).     String sessionId = this.createSession.getId().     when(this.createSession.isStarted()).thenReturn(true).     this.exchange.getResponse().setComplete().block().     verify(this.sessionStore).createWebSession().     verify(this.sessionIdResolver).setSessionId(any(), eq(sessionId)).     verify(this.createSession).save(). }
false;public;0;10;;@Test public void existingSession() {     String sessionId = this.updateSession.getId().     when(this.sessionIdResolver.resolveSessionIds(this.exchange)).thenReturn(Collections.singletonList(sessionId)).     WebSession actual = this.sessionManager.getSession(this.exchange).block().     assertNotNull(actual).     assertEquals(sessionId, actual.getId()). }
false;public;0;12;;@Test public void multipleSessionIds() {     List<String> ids = Arrays.asList("not-this", "not-that", this.updateSession.getId()).     when(this.sessionStore.retrieveSession("not-this")).thenReturn(Mono.empty()).     when(this.sessionStore.retrieveSession("not-that")).thenReturn(Mono.empty()).     when(this.sessionIdResolver.resolveSessionIds(this.exchange)).thenReturn(ids).     WebSession actual = this.sessionManager.getSession(this.exchange).block().     assertNotNull(actual).     assertEquals(this.updateSession.getId(), actual.getId()). }
