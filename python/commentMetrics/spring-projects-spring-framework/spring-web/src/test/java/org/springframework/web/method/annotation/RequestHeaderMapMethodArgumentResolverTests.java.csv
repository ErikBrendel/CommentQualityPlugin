commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Before public void setup() throws Exception {     resolver = new RequestHeaderMapMethodArgumentResolver().     Method method = getClass().getMethod("params", Map.class, MultiValueMap.class, HttpHeaders.class, Map.class).     paramMap = new SynthesizingMethodParameter(method, 0).     paramMultiValueMap = new SynthesizingMethodParameter(method, 1).     paramHttpHeaders = new SynthesizingMethodParameter(method, 2).     paramUnsupported = new SynthesizingMethodParameter(method, 3).     request = new MockHttpServletRequest().     webRequest = new ServletWebRequest(request, new MockHttpServletResponse()). }
false;public;0;7;;@Test public void supportsParameter() {     assertTrue("Map parameter not supported", resolver.supportsParameter(paramMap)).     assertTrue("MultiValueMap parameter not supported", resolver.supportsParameter(paramMultiValueMap)).     assertTrue("HttpHeaders parameter not supported", resolver.supportsParameter(paramHttpHeaders)).     assertFalse("non-@RequestParam map supported", resolver.supportsParameter(paramUnsupported)). }
false;public;0;12;;@Test public void resolveMapArgument() throws Exception {     String name = "foo".     String value = "bar".     Map<String, String> expected = Collections.singletonMap(name, value).     request.addHeader(name, value).     Object result = resolver.resolveArgument(paramMap, null, webRequest, null).     assertTrue(result instanceof Map).     assertEquals("Invalid result", expected, result). }
false;public;0;18;;@Test public void resolveMultiValueMapArgument() throws Exception {     String name = "foo".     String value1 = "bar".     String value2 = "baz".     request.addHeader(name, value1).     request.addHeader(name, value2).     MultiValueMap<String, String> expected = new LinkedMultiValueMap<>(1).     expected.add(name, value1).     expected.add(name, value2).     Object result = resolver.resolveArgument(paramMultiValueMap, null, webRequest, null).     assertTrue(result instanceof MultiValueMap).     assertEquals("Invalid result", expected, result). }
false;public;0;18;;@Test public void resolveHttpHeadersArgument() throws Exception {     String name = "foo".     String value1 = "bar".     String value2 = "baz".     request.addHeader(name, value1).     request.addHeader(name, value2).     HttpHeaders expected = new HttpHeaders().     expected.add(name, value1).     expected.add(name, value2).     Object result = resolver.resolveArgument(paramHttpHeaders, null, webRequest, null).     assertTrue(result instanceof HttpHeaders).     assertEquals("Invalid result", expected, result). }
false;public;4;4;;public void params(@RequestHeader Map<?, ?> param1, @RequestHeader MultiValueMap<?, ?> param2, @RequestHeader HttpHeaders param3, Map<?, ?> unsupported) { }
