commented;modifiers;parameterAmount;loc;comment;code
false;public;2;10;;@Override public void forward(ServletRequest request, ServletResponse response) {     Assert.notNull(request, "Request must not be null").     Assert.notNull(response, "Response must not be null").     Assert.state(!response.isCommitted(), "Cannot perform forward - response is already committed").     getMockHttpServletResponse(response).setForwardedUrl(this.resource).     if (logger.isDebugEnabled()) {         logger.debug("MockRequestDispatcher: forwarding to [" + this.resource + "]").     } }
false;public;2;9;;@Override public void include(ServletRequest request, ServletResponse response) {     Assert.notNull(request, "Request must not be null").     Assert.notNull(response, "Response must not be null").     getMockHttpServletResponse(response).addIncludedUrl(this.resource).     if (logger.isDebugEnabled()) {         logger.debug("MockRequestDispatcher: including [" + this.resource + "]").     } }
true;protected;1;9;/**  * Obtain the underlying {@link MockHttpServletResponse}, unwrapping  * {@link HttpServletResponseWrapper} decorators if necessary.  */ ;/**  * Obtain the underlying {@link MockHttpServletResponse}, unwrapping  * {@link HttpServletResponseWrapper} decorators if necessary.  */ protected MockHttpServletResponse getMockHttpServletResponse(ServletResponse response) {     if (response instanceof MockHttpServletResponse) {         return (MockHttpServletResponse) response.     }     if (response instanceof HttpServletResponseWrapper) {         return getMockHttpServletResponse(((HttpServletResponseWrapper) response).getResponse()).     }     throw new IllegalArgumentException("MockRequestDispatcher requires MockHttpServletResponse"). }
