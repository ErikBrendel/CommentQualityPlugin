commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() throws Exception {     this.writer = new OneByOneAsyncWriter(). }
false;private;1;3;;private <T> Mono<Void> sendOperator(Publisher<String> source) {     return new ChannelSendOperator<>(source, writer::send). }
false;public;0;9;;@Test public void errorBeforeFirstItem() throws Exception {     IllegalStateException error = new IllegalStateException("boo").     Mono<Void> completion = Mono.<String>error(error).as(this::sendOperator).     Signal<Void> signal = completion.materialize().block().     assertNotNull(signal).     assertSame("Unexpected signal: " + signal, error, signal.getThrowable()). }
false;public;0;11;;@Test public void completionBeforeFirstItem() throws Exception {     Mono<Void> completion = Flux.<String>empty().as(this::sendOperator).     Signal<Void> signal = completion.materialize().block().     assertNotNull(signal).     assertTrue("Unexpected signal: " + signal, signal.isOnComplete()).     assertEquals(0, this.writer.items.size()).     assertTrue(this.writer.completed). }
false;public;0;12;;@Test public void writeOneItem() throws Exception {     Mono<Void> completion = Flux.just("one").as(this::sendOperator).     Signal<Void> signal = completion.materialize().block().     assertNotNull(signal).     assertTrue("Unexpected signal: " + signal, signal.isOnComplete()).     assertEquals(1, this.writer.items.size()).     assertEquals("one", this.writer.items.get(0)).     assertTrue(this.writer.completed). }
false;public;0;15;;@Test public void writeMultipleItems() throws Exception {     List<String> items = Arrays.asList("one", "two", "three").     Mono<Void> completion = Flux.fromIterable(items).as(this::sendOperator).     Signal<Void> signal = completion.materialize().block().     assertNotNull(signal).     assertTrue("Unexpected signal: " + signal, signal.isOnComplete()).     assertEquals(3, this.writer.items.size()).     assertEquals("one", this.writer.items.get(0)).     assertEquals("two", this.writer.items.get(1)).     assertEquals("three", this.writer.items.get(2)).     assertTrue(this.writer.completed). }
false;public;0;23;;@Test public void errorAfterMultipleItems() throws Exception {     IllegalStateException error = new IllegalStateException("boo").     Flux<String> publisher = Flux.generate(() -> 0, (idx, subscriber) -> {         int i = ++idx.         subscriber.next(String.valueOf(i)).         if (i == 3) {             subscriber.error(error).         }         return i.     }).     Mono<Void> completion = publisher.as(this::sendOperator).     Signal<Void> signal = completion.materialize().block().     assertNotNull(signal).     assertSame("Unexpected signal: " + signal, error, signal.getThrowable()).     assertEquals(3, this.writer.items.size()).     assertEquals("1", this.writer.items.get(0)).     assertEquals("2", this.writer.items.get(1)).     assertEquals("3", this.writer.items.get(2)).     assertSame(error, this.writer.error). }
false;public;1;4;;public Publisher<Void> send(Publisher<String> publisher) {     return subscriber -> Executors.newSingleThreadScheduledExecutor().schedule(() -> publisher.subscribe(new WriteSubscriber(subscriber)), 50, TimeUnit.MILLISECONDS). }
false;public;1;5;;@Override public void onSubscribe(Subscription subscription) {     this.subscription = subscription.     this.subscription.request(1). }
false;public;1;5;;@Override public void onNext(String item) {     items.add(item).     this.subscription.request(1). }
false;public;1;5;;@Override public void onError(Throwable ex) {     error = ex.     this.subscriber.onError(ex). }
false;public;0;5;;@Override public void onComplete() {     completed = true.     this.subscriber.onComplete(). }
