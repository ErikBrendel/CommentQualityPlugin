commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void canRead() {     assertTrue(converter.canRead(MyBean.class, new MediaType("application", "x-jackson-smile"))).     assertFalse(converter.canRead(MyBean.class, new MediaType("application", "json"))).     assertFalse(converter.canRead(MyBean.class, new MediaType("application", "xml"))). }
false;public;0;6;;@Test public void canWrite() {     assertTrue(converter.canWrite(MyBean.class, new MediaType("application", "x-jackson-smile"))).     assertFalse(converter.canWrite(MyBean.class, new MediaType("application", "json"))).     assertFalse(converter.canWrite(MyBean.class, new MediaType("application", "xml"))). }
false;public;0;19;;@Test public void read() throws IOException {     MyBean body = new MyBean().     body.setString("Foo").     body.setNumber(42).     body.setFraction(42F).     body.setArray(new String[] { "Foo", "Bar" }).     body.setBool(true).     body.setBytes(new byte[] { 0x1, 0x2 }).     MockHttpInputMessage inputMessage = new MockHttpInputMessage(mapper.writeValueAsBytes(body)).     inputMessage.getHeaders().setContentType(new MediaType("application", "x-jackson-smile")).     MyBean result = (MyBean) converter.read(MyBean.class, inputMessage).     assertEquals("Foo", result.getString()).     assertEquals(42, result.getNumber()).     assertEquals(42F, result.getFraction(), 0F).     assertArrayEquals(new String[] { "Foo", "Bar" }, result.getArray()).     assertTrue(result.isBool()).     assertArrayEquals(new byte[] { 0x1, 0x2 }, result.getBytes()). }
false;public;0;15;;@Test public void write() throws IOException {     MockHttpOutputMessage outputMessage = new MockHttpOutputMessage().     MyBean body = new MyBean().     body.setString("Foo").     body.setNumber(42).     body.setFraction(42F).     body.setArray(new String[] { "Foo", "Bar" }).     body.setBool(true).     body.setBytes(new byte[] { 0x1, 0x2 }).     converter.write(body, null, outputMessage).     assertArrayEquals(mapper.writeValueAsBytes(body), outputMessage.getBodyAsBytes()).     assertEquals("Invalid content-type", new MediaType("application", "x-jackson-smile", StandardCharsets.UTF_8), outputMessage.getHeaders().getContentType()). }
false;public;0;3;;public byte[] getBytes() {     return bytes. }
false;public;1;3;;public void setBytes(byte[] bytes) {     this.bytes = bytes. }
false;public;0;3;;public boolean isBool() {     return bool. }
false;public;1;3;;public void setBool(boolean bool) {     this.bool = bool. }
false;public;0;3;;public String getString() {     return string. }
false;public;1;3;;public void setString(String string) {     this.string = string. }
false;public;0;3;;public int getNumber() {     return number. }
false;public;1;3;;public void setNumber(int number) {     this.number = number. }
false;public;0;3;;public float getFraction() {     return fraction. }
false;public;1;3;;public void setFraction(float fraction) {     this.fraction = fraction. }
false;public;0;3;;public String[] getArray() {     return array. }
false;public;1;3;;public void setArray(String[] array) {     this.array = array. }
