commented;modifiers;parameterAmount;loc;comment;code
false;public;0;39;;@Test public void testSupportsAllCharacterEntityReferencesDefinedByHtml() {     HtmlCharacterEntityReferences entityReferences = new HtmlCharacterEntityReferences().     Map<Integer, String> referenceCharactersMap = getReferenceCharacterMap().     for (int character = 0. character < 10000. character++) {         String referenceName = referenceCharactersMap.get(character).         if (referenceName != null) {             String fullReference = HtmlCharacterEntityReferences.REFERENCE_START + referenceName + HtmlCharacterEntityReferences.REFERENCE_END.             assertTrue("The unicode character " + character + " should be mapped to a reference", entityReferences.isMappedToReference((char) character)).             assertEquals("The reference of unicode character " + character + " should be entity " + referenceName, fullReference, entityReferences.convertToReference((char) character)).             assertEquals("The entity reference [" + referenceName + "] should be mapped to unicode character " + character, (char) character, entityReferences.convertToCharacter(referenceName)).         } else if (character == 39) {             assertTrue(entityReferences.isMappedToReference((char) character)).             assertEquals("&#39.", entityReferences.convertToReference((char) character)).         } else {             assertFalse("The unicode character " + character + " should not be mapped to a reference", entityReferences.isMappedToReference((char) character)).             assertNull("No entity reference of unicode character " + character + " should exist", entityReferences.convertToReference((char) character)).         }     }     assertEquals("The registered entity count of entityReferences should match the number of entity references", referenceCharactersMap.size() + 1, entityReferences.getSupportedReferenceCount()).     assertEquals("The HTML 4.0 Standard defines 252+1 entity references so do entityReferences", 252 + 1, entityReferences.getSupportedReferenceCount()).     assertEquals("Invalid entity reference names should not be convertible", (char) -1, entityReferences.convertToCharacter("invalid")). }
true;public;0;12;// SPR-9293 ;// SPR-9293 @Test public void testConvertToReferenceUTF8() {     HtmlCharacterEntityReferences entityReferences = new HtmlCharacterEntityReferences().     String utf8 = "UTF-8".     assertEquals("&lt.", entityReferences.convertToReference('<', utf8)).     assertEquals("&gt.", entityReferences.convertToReference('>', utf8)).     assertEquals("&amp.", entityReferences.convertToReference('&', utf8)).     assertEquals("&quot.", entityReferences.convertToReference('"', utf8)).     assertEquals("&#39.", entityReferences.convertToReference('\'', utf8)).     assertNull(entityReferences.convertToReference((char) 233, utf8)).     assertNull(entityReferences.convertToReference((char) 934, utf8)). }
false;private;0;10;;private Map<Integer, String> getReferenceCharacterMap() {     CharacterEntityResourceIterator entityIterator = new CharacterEntityResourceIterator().     Map<Integer, String> referencedCharactersMap = new HashMap<>().     while (entityIterator.hasNext()) {         int character = entityIterator.getReferredCharacter().         String entityName = entityIterator.nextEntry().         referencedCharactersMap.put(new Integer(character), entityName).     }     return referencedCharactersMap. }
false;public;0;3;;public boolean hasNext() {     return (currentEntityName != null || readNextEntity()). }
false;public;0;8;;public String nextEntry() {     if (hasNext()) {         String entityName = currentEntityName.         currentEntityName = null.         return entityName.     }     return null. }
false;public;0;3;;public int getReferredCharacter() {     return referredCharacter. }
false;private;0;19;;private boolean readNextEntity() {     try {         while (navigateToNextEntity()) {             String entityName = nextWordToken().             if ("CDATA".equals(nextWordToken())) {                 int referredCharacter = nextReferredCharacterId().                 if (entityName != null && referredCharacter != -1) {                     this.currentEntityName = entityName.                     this.referredCharacter = referredCharacter.                     return true.                 }             }         }         return false.     } catch (IOException ex) {         throw new IllegalStateException("Could not parse definition resource: " + ex.getMessage()).     } }
false;private;0;8;;private boolean navigateToNextEntity() throws IOException {     while (tokenizer.nextToken() != StreamTokenizer.TT_WORD || !"ENTITY".equals(tokenizer.sval)) {         if (tokenizer.ttype == StreamTokenizer.TT_EOF) {             return false.         }     }     return true. }
false;private;0;7;;private int nextReferredCharacterId() throws IOException {     String reference = nextWordToken().     if (reference != null && reference.startsWith("&#") && reference.endsWith(".")) {         return Integer.parseInt(reference.substring(2, reference.length() - 1)).     }     return -1. }
false;private;0;4;;private String nextWordToken() throws IOException {     tokenizer.nextToken().     return tokenizer.sval. }
