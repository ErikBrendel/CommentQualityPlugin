commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Before public void setup() throws Exception {     this.request = new ServletWebRequest(new MockHttpServletRequest()).     this.container = new ModelAndViewContainer().     this.processor = new ModelAttributeMethodProcessor(false).     Method method = ModelAttributeHandler.class.getDeclaredMethod("modelAttribute", TestBean.class, Errors.class, int.class, TestBean.class, TestBean.class, TestBean.class).     this.paramNamedValidModelAttr = new SynthesizingMethodParameter(method, 0).     this.paramErrors = new SynthesizingMethodParameter(method, 1).     this.paramInt = new SynthesizingMethodParameter(method, 2).     this.paramModelAttr = new SynthesizingMethodParameter(method, 3).     this.paramBindingDisabledAttr = new SynthesizingMethodParameter(method, 4).     this.paramNonSimpleType = new SynthesizingMethodParameter(method, 5).     method = getClass().getDeclaredMethod("annotatedReturnValue").     this.returnParamNamedModelAttr = new MethodParameter(method, -1).     method = getClass().getDeclaredMethod("notAnnotatedReturnValue").     this.returnParamNonSimpleType = new MethodParameter(method, -1). }
false;public;0;9;;@Test public void supportedParameters() throws Exception {     assertTrue(this.processor.supportsParameter(this.paramNamedValidModelAttr)).     assertTrue(this.processor.supportsParameter(this.paramModelAttr)).     assertFalse(this.processor.supportsParameter(this.paramErrors)).     assertFalse(this.processor.supportsParameter(this.paramInt)).     assertFalse(this.processor.supportsParameter(this.paramNonSimpleType)). }
false;public;0;12;;@Test public void supportedParametersInDefaultResolutionMode() throws Exception {     processor = new ModelAttributeMethodProcessor(true).     // Only non-simple types, even if not annotated     assertTrue(this.processor.supportsParameter(this.paramNamedValidModelAttr)).     assertTrue(this.processor.supportsParameter(this.paramErrors)).     assertTrue(this.processor.supportsParameter(this.paramModelAttr)).     assertTrue(this.processor.supportsParameter(this.paramNonSimpleType)).     assertFalse(this.processor.supportsParameter(this.paramInt)). }
false;public;0;6;;@Test public void supportedReturnTypes() throws Exception {     processor = new ModelAttributeMethodProcessor(false).     assertTrue(this.processor.supportsReturnType(returnParamNamedModelAttr)).     assertFalse(this.processor.supportsReturnType(returnParamNonSimpleType)). }
false;public;0;6;;@Test public void supportedReturnTypesInDefaultResolutionMode() throws Exception {     processor = new ModelAttributeMethodProcessor(true).     assertTrue(this.processor.supportsReturnType(returnParamNamedModelAttr)).     assertTrue(this.processor.supportsReturnType(returnParamNonSimpleType)). }
false;public;0;5;;@Test public void bindExceptionRequired() throws Exception {     assertTrue(this.processor.isBindExceptionRequired(null, this.paramNonSimpleType)).     assertFalse(this.processor.isBindExceptionRequired(null, this.paramNamedValidModelAttr)). }
false;public;0;6;;@Test public void resolveArgumentFromModel() throws Exception {     testGetAttributeFromModel("attrName", this.paramNamedValidModelAttr).     testGetAttributeFromModel("testBean", this.paramModelAttr).     testGetAttributeFromModel("testBean", this.paramNonSimpleType). }
false;public;0;9;;@Test public void resolveArgumentViaDefaultConstructor() throws Exception {     WebDataBinder dataBinder = new WebRequestDataBinder(null).     WebDataBinderFactory factory = mock(WebDataBinderFactory.class).     given(factory.createBinder(any(), notNull(), eq("attrName"))).willReturn(dataBinder).     this.processor.resolveArgument(this.paramNamedValidModelAttr, this.container, this.request, factory).     verify(factory).createBinder(any(), notNull(), eq("attrName")). }
false;public;0;15;;@Test public void resolveArgumentValidation() throws Exception {     String name = "attrName".     Object target = new TestBean().     this.container.addAttribute(name, target).     StubRequestDataBinder dataBinder = new StubRequestDataBinder(target, name).     WebDataBinderFactory factory = mock(WebDataBinderFactory.class).     given(factory.createBinder(this.request, target, name)).willReturn(dataBinder).     this.processor.resolveArgument(this.paramNamedValidModelAttr, this.container, this.request, factory).     assertTrue(dataBinder.isBindInvoked()).     assertTrue(dataBinder.isValidateInvoked()). }
false;public;0;18;;@Test public void resolveArgumentBindingDisabledPreviously() throws Exception {     String name = "attrName".     Object target = new TestBean().     this.container.addAttribute(name, target).     // Declare binding disabled (e.g. via @ModelAttribute method)     this.container.setBindingDisabled(name).     StubRequestDataBinder dataBinder = new StubRequestDataBinder(target, name).     WebDataBinderFactory factory = mock(WebDataBinderFactory.class).     given(factory.createBinder(this.request, target, name)).willReturn(dataBinder).     this.processor.resolveArgument(this.paramNamedValidModelAttr, this.container, this.request, factory).     assertFalse(dataBinder.isBindInvoked()).     assertTrue(dataBinder.isValidateInvoked()). }
false;public;0;15;;@Test public void resolveArgumentBindingDisabled() throws Exception {     String name = "noBindAttr".     Object target = new TestBean().     this.container.addAttribute(name, target).     StubRequestDataBinder dataBinder = new StubRequestDataBinder(target, name).     WebDataBinderFactory factory = mock(WebDataBinderFactory.class).     given(factory.createBinder(this.request, target, name)).willReturn(dataBinder).     this.processor.resolveArgument(this.paramBindingDisabledAttr, this.container, this.request, factory).     assertFalse(dataBinder.isBindInvoked()).     assertTrue(dataBinder.isValidateInvoked()). }
false;public;0;14;;@Test(expected = BindException.class) public void resolveArgumentBindException() throws Exception {     String name = "testBean".     Object target = new TestBean().     this.container.getModel().addAttribute(target).     StubRequestDataBinder dataBinder = new StubRequestDataBinder(target, name).     dataBinder.getBindingResult().reject("error").     WebDataBinderFactory binderFactory = mock(WebDataBinderFactory.class).     given(binderFactory.createBinder(this.request, target, name)).willReturn(dataBinder).     this.processor.resolveArgument(this.paramNonSimpleType, this.container, this.request, binderFactory).     verify(binderFactory).createBinder(this.request, target, name). }
false;public;0;20;;// SPR-9378 @Test public void resolveArgumentOrdering() throws Exception {     String name = "testBean".     Object testBean = new TestBean(name).     this.container.addAttribute(name, testBean).     this.container.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, testBean).     Object anotherTestBean = new TestBean().     this.container.addAttribute("anotherTestBean", anotherTestBean).     StubRequestDataBinder dataBinder = new StubRequestDataBinder(testBean, name).     WebDataBinderFactory binderFactory = mock(WebDataBinderFactory.class).     given(binderFactory.createBinder(this.request, testBean, name)).willReturn(dataBinder).     this.processor.resolveArgument(this.paramModelAttr, this.container, this.request, binderFactory).     Object[] values = this.container.getModel().values().toArray().     assertSame("Resolved attribute should be updated to be last", testBean, values[1]).     assertSame("BindingResult of resolved attr should be last", dataBinder.getBindingResult(), values[2]). }
false;public;0;5;;@Test public void handleAnnotatedReturnValue() throws Exception {     this.processor.handleReturnValue("expected", this.returnParamNamedModelAttr, this.container, this.request).     assertEquals("expected", this.container.getModel().get("modelAttrName")). }
false;public;0;6;;@Test public void handleNotAnnotatedReturnValue() throws Exception {     TestBean testBean = new TestBean("expected").     this.processor.handleReturnValue(testBean, this.returnParamNonSimpleType, this.container, this.request).     assertSame(testBean, this.container.getModel().get("testBean")). }
false;private;2;11;;private void testGetAttributeFromModel(String expectedAttrName, MethodParameter param) throws Exception {     Object target = new TestBean().     this.container.addAttribute(expectedAttrName, target).     WebDataBinder dataBinder = new WebRequestDataBinder(target).     WebDataBinderFactory factory = mock(WebDataBinderFactory.class).     given(factory.createBinder(this.request, target, expectedAttrName)).willReturn(dataBinder).     this.processor.resolveArgument(param, this.container, this.request, factory).     verify(factory).createBinder(this.request, target, expectedAttrName). }
false;public;0;3;;public boolean isBindInvoked() {     return bindInvoked. }
false;public;0;3;;public boolean isValidateInvoked() {     return validateInvoked. }
false;public;1;4;;@Override public void bind(WebRequest request) {     bindInvoked = true. }
false;public;0;4;;@Override public void validate() {     validateInvoked = true. }
false;public;1;4;;@Override public void validate(Object... validationHints) {     validateInvoked = true. }
false;public;6;9;;@SuppressWarnings("unused") public void modelAttribute(@ModelAttribute("attrName") @Valid TestBean annotatedAttr, Errors errors, int intArg, @ModelAttribute TestBean defaultNameAttr, @ModelAttribute(name = "noBindAttr", binding = false) @Valid TestBean noBindAttr, TestBean notAnnotatedAttr) { }
false;private;0;4;;@ModelAttribute("modelAttrName") @SuppressWarnings("unused") private String annotatedReturnValue() {     return null. }
false;private;0;4;;@SuppressWarnings("unused") private TestBean notAnnotatedReturnValue() {     return null. }
