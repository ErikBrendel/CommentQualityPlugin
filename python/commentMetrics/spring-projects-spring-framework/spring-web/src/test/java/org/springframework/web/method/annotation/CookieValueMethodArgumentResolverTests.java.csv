commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Before public void setUp() throws Exception {     resolver = new TestCookieValueMethodArgumentResolver().     Method method = getClass().getMethod("params", Cookie.class, String.class, String.class).     paramNamedCookie = new SynthesizingMethodParameter(method, 0).     paramNamedDefaultValueString = new SynthesizingMethodParameter(method, 1).     paramString = new SynthesizingMethodParameter(method, 2).     request = new MockHttpServletRequest().     webRequest = new ServletWebRequest(request, new MockHttpServletResponse()). }
false;public;0;6;;@Test public void supportsParameter() {     assertTrue("Cookie parameter not supported", resolver.supportsParameter(paramNamedCookie)).     assertTrue("Cookie string parameter not supported", resolver.supportsParameter(paramNamedDefaultValueString)).     assertFalse("non-@CookieValue parameter supported", resolver.supportsParameter(paramString)). }
false;public;0;7;;@Test public void resolveCookieDefaultValue() throws Exception {     Object result = resolver.resolveArgument(paramNamedDefaultValueString, null, webRequest, null).     assertTrue(result instanceof String).     assertEquals("Invalid result", "bar", result). }
false;public;0;5;;@Test(expected = ServletRequestBindingException.class) public void notFound() throws Exception {     resolver.resolveArgument(paramNamedCookie, null, webRequest, null).     fail("Expected exception"). }
false;protected;3;4;;@Override protected Object resolveName(String name, MethodParameter parameter, NativeWebRequest request) throws Exception {     return null. }
false;public;3;4;;public void params(@CookieValue("name") Cookie param1, @CookieValue(name = "name", defaultValue = "bar") String param2, String param3) { }
