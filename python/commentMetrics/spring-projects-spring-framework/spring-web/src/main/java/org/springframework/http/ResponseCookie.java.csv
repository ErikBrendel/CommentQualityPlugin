commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the cookie "Max-Age" attribute in seconds.  * <p>A positive value indicates when the cookie expires relative to the  * current time. A value of 0 means the cookie should expire immediately.  * A negative value means no "Max-Age" attribute in which case the cookie  * is removed when the browser is closed.  */ ;/**  * Return the cookie "Max-Age" attribute in seconds.  * <p>A positive value indicates when the cookie expires relative to the  * current time. A value of 0 means the cookie should expire immediately.  * A negative value means no "Max-Age" attribute in which case the cookie  * is removed when the browser is closed.  */ public Duration getMaxAge() {     return this.maxAge. }
true;public;0;4;/**  * Return the cookie "Domain" attribute, or {@code null} if not set.  */ ;/**  * Return the cookie "Domain" attribute, or {@code null} if not set.  */ @Nullable public String getDomain() {     return this.domain. }
true;public;0;4;/**  * Return the cookie "Path" attribute, or {@code null} if not set.  */ ;/**  * Return the cookie "Path" attribute, or {@code null} if not set.  */ @Nullable public String getPath() {     return this.path. }
true;public;0;3;/**  * Return {@code true} if the cookie has the "Secure" attribute.  */ ;/**  * Return {@code true} if the cookie has the "Secure" attribute.  */ public boolean isSecure() {     return this.secure. }
true;public;0;3;/**  * Return {@code true} if the cookie has the "HttpOnly" attribute.  * @see <a href="http://www.owasp.org/index.php/HTTPOnly">http://www.owasp.org/index.php/HTTPOnly</a>  */ ;/**  * Return {@code true} if the cookie has the "HttpOnly" attribute.  * @see <a href="http://www.owasp.org/index.php/HTTPOnly">http://www.owasp.org/index.php/HTTPOnly</a>  */ public boolean isHttpOnly() {     return this.httpOnly. }
true;public;0;4;/**  * Return the cookie "SameSite" attribute, or {@code null} if not set.  * <p>This limits the scope of the cookie such that it will only be attached to  * same site requests if {@code "Strict"} or cross-site requests if {@code "Lax"}.  * @see <a href="https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis#section-4.1.2.7">RFC6265 bis</a>  * @since 5.1  */ ;/**  * Return the cookie "SameSite" attribute, or {@code null} if not set.  * <p>This limits the scope of the cookie such that it will only be attached to  * same site requests if {@code "Strict"} or cross-site requests if {@code "Lax"}.  * @see <a href="https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis#section-4.1.2.7">RFC6265 bis</a>  * @since 5.1  */ @Nullable public String getSameSite() {     return this.sameSite. }
false;public;1;13;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof ResponseCookie)) {         return false.     }     ResponseCookie otherCookie = (ResponseCookie) other.     return (getName().equalsIgnoreCase(otherCookie.getName()) && ObjectUtils.nullSafeEquals(this.path, otherCookie.getPath()) && ObjectUtils.nullSafeEquals(this.domain, otherCookie.getDomain())). }
false;public;0;7;;@Override public int hashCode() {     int result = super.hashCode().     result = 31 * result + ObjectUtils.nullSafeHashCode(this.domain).     result = 31 * result + ObjectUtils.nullSafeHashCode(this.path).     return result. }
false;public;0;27;;@Override public String toString() {     StringBuilder sb = new StringBuilder().     sb.append(getName()).append('=').append(getValue()).     if (StringUtils.hasText(getPath())) {         sb.append(". Path=").append(getPath()).     }     if (StringUtils.hasText(this.domain)) {         sb.append(". Domain=").append(this.domain).     }     if (!this.maxAge.isNegative()) {         sb.append(". Max-Age=").append(this.maxAge.getSeconds()).         sb.append(". Expires=").         long millis = this.maxAge.getSeconds() > 0 ? System.currentTimeMillis() + this.maxAge.toMillis() : 0.         sb.append(HttpHeaders.formatDate(millis)).     }     if (this.secure) {         sb.append(". Secure").     }     if (this.httpOnly) {         sb.append(". HttpOnly").     }     if (StringUtils.hasText(this.sameSite)) {         sb.append(". SameSite=").append(this.sameSite).     }     return sb.toString(). }
false;public;1;5;;@Override public ResponseCookieBuilder maxAge(Duration maxAge) {     this.maxAge = maxAge.     return this. }
false;public;1;5;;@Override public ResponseCookieBuilder maxAge(long maxAgeSeconds) {     this.maxAge = maxAgeSeconds >= 0 ? Duration.ofSeconds(maxAgeSeconds) : Duration.ofSeconds(-1).     return this. }
false;public;1;5;;@Override public ResponseCookieBuilder domain(String domain) {     this.domain = domain.     return this. }
false;public;1;5;;@Override public ResponseCookieBuilder path(String path) {     this.path = path.     return this. }
false;public;1;5;;@Override public ResponseCookieBuilder secure(boolean secure) {     this.secure = secure.     return this. }
false;public;1;5;;@Override public ResponseCookieBuilder httpOnly(boolean httpOnly) {     this.httpOnly = httpOnly.     return this. }
false;public;1;5;;@Override public ResponseCookieBuilder sameSite(@Nullable String sameSite) {     this.sameSite = sameSite.     return this. }
false;public;0;5;;@Override public ResponseCookie build() {     return new ResponseCookie(name, value, this.maxAge, this.domain, this.path, this.secure, this.httpOnly, this.sameSite). }
true;public,static;2;68;/**  * Factory method to obtain a builder for a server-defined cookie that starts  * with a name-value pair and may also include attributes.  * @param name the cookie name  * @param value the cookie value  * @return the created cookie instance  */ ;/**  * Factory method to obtain a builder for a server-defined cookie that starts  * with a name-value pair and may also include attributes.  * @param name the cookie name  * @param value the cookie value  * @return the created cookie instance  */ public static ResponseCookieBuilder from(final String name, final String value) {     return new ResponseCookieBuilder() {          private Duration maxAge = Duration.ofSeconds(-1).          @Nullable         private String domain.          @Nullable         private String path.          private boolean secure.          private boolean httpOnly.          @Nullable         private String sameSite.          @Override         public ResponseCookieBuilder maxAge(Duration maxAge) {             this.maxAge = maxAge.             return this.         }          @Override         public ResponseCookieBuilder maxAge(long maxAgeSeconds) {             this.maxAge = maxAgeSeconds >= 0 ? Duration.ofSeconds(maxAgeSeconds) : Duration.ofSeconds(-1).             return this.         }          @Override         public ResponseCookieBuilder domain(String domain) {             this.domain = domain.             return this.         }          @Override         public ResponseCookieBuilder path(String path) {             this.path = path.             return this.         }          @Override         public ResponseCookieBuilder secure(boolean secure) {             this.secure = secure.             return this.         }          @Override         public ResponseCookieBuilder httpOnly(boolean httpOnly) {             this.httpOnly = httpOnly.             return this.         }          @Override         public ResponseCookieBuilder sameSite(@Nullable String sameSite) {             this.sameSite = sameSite.             return this.         }          @Override         public ResponseCookie build() {             return new ResponseCookie(name, value, this.maxAge, this.domain, this.path, this.secure, this.httpOnly, this.sameSite).         }     }. }
true;;1;1;/**  * Set the cookie "Max-Age" attribute.  *  * <p>A positive value indicates when the cookie should expire relative  * to the current time. A value of 0 means the cookie should expire  * immediately. A negative value results in no "Max-Age" attribute in  * which case the cookie is removed when the browser is closed.  */ ;/**  * Set the cookie "Max-Age" attribute.  *  * <p>A positive value indicates when the cookie should expire relative  * to the current time. A value of 0 means the cookie should expire  * immediately. A negative value results in no "Max-Age" attribute in  * which case the cookie is removed when the browser is closed.  */ ResponseCookieBuilder maxAge(Duration maxAge).
true;;1;1;/**  * Variant of {@link #maxAge(Duration)} accepting a value in seconds.  */ ;/**  * Variant of {@link #maxAge(Duration)} accepting a value in seconds.  */ ResponseCookieBuilder maxAge(long maxAgeSeconds).
true;;1;1;/**  * Set the cookie "Path" attribute.  */ ;/**  * Set the cookie "Path" attribute.  */ ResponseCookieBuilder path(String path).
true;;1;1;/**  * Set the cookie "Domain" attribute.  */ ;/**  * Set the cookie "Domain" attribute.  */ ResponseCookieBuilder domain(String domain).
true;;1;1;/**  * Add the "Secure" attribute to the cookie.  */ ;/**  * Add the "Secure" attribute to the cookie.  */ ResponseCookieBuilder secure(boolean secure).
true;;1;1;/**  * Add the "HttpOnly" attribute to the cookie.  * @see <a href="http://www.owasp.org/index.php/HTTPOnly">http://www.owasp.org/index.php/HTTPOnly</a>  */ ;/**  * Add the "HttpOnly" attribute to the cookie.  * @see <a href="http://www.owasp.org/index.php/HTTPOnly">http://www.owasp.org/index.php/HTTPOnly</a>  */ ResponseCookieBuilder httpOnly(boolean httpOnly).
true;;1;1;/**  * Add the "SameSite" attribute to the cookie.  * <p>This limits the scope of the cookie such that it will only be  * attached to same site requests if {@code "Strict"} or cross-site  * requests if {@code "Lax"}.  * @since 5.1  * @see <a href="https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis#section-4.1.2.7">RFC6265 bis</a>  */ ;/**  * Add the "SameSite" attribute to the cookie.  * <p>This limits the scope of the cookie such that it will only be  * attached to same site requests if {@code "Strict"} or cross-site  * requests if {@code "Lax"}.  * @since 5.1  * @see <a href="https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis#section-4.1.2.7">RFC6265 bis</a>  */ ResponseCookieBuilder sameSite(@Nullable String sameSite).
true;;0;1;/**  * Create the HttpCookie.  */ ;/**  * Create the HttpCookie.  */ ResponseCookie build().
