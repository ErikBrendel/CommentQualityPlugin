commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * The original path that was parsed.  */ ;/**  * The original path that was parsed.  */ String value().
true;;0;1;/**  * The list of path elements, either {@link Separator} or {@link PathSegment}.  */ ;/**  * The list of path elements, either {@link Separator} or {@link PathSegment}.  */ List<Element> elements().
true;default;1;3;/**  * Extract a sub-path from the given offset into the elements list.  * @param index the start element index (inclusive)  * @return the sub-path  */ ;/**  * Extract a sub-path from the given offset into the elements list.  * @param index the start element index (inclusive)  * @return the sub-path  */ default PathContainer subPath(int index) {     return subPath(index, elements().size()). }
true;default;2;3;/**  * Extract a sub-path from the given start offset (inclusive) into the  * element list and to the end offset (exclusive).  * @param startIndex the start element index (inclusive)  * @param endIndex the end element index (exclusive)  * @return the sub-path  */ ;/**  * Extract a sub-path from the given start offset (inclusive) into the  * element list and to the end offset (exclusive).  * @param startIndex the start element index (inclusive)  * @param endIndex the end element index (exclusive)  * @return the sub-path  */ default PathContainer subPath(int startIndex, int endIndex) {     return DefaultPathContainer.subPath(this, startIndex, endIndex). }
true;static;1;3;/**  * Parse the path value into a sequence of {@link Separator Separator} and  * {@link PathSegment PathSegment} elements.  * @param path the encoded, raw URL path value to parse  * @return the parsed path  */ ;/**  * Parse the path value into a sequence of {@link Separator Separator} and  * {@link PathSegment PathSegment} elements.  * @param path the encoded, raw URL path value to parse  * @return the parsed path  */ static PathContainer parsePath(String path) {     return DefaultPathContainer.createFromUrlPath(path). }
true;;0;1;/**  * Return the original, raw (encoded) value for the path component.  */ ;/**  * Return the original, raw (encoded) value for the path component.  */ String value().
true;;0;1;/**  * Return the path segment value to use for pattern matching purposes.  * By default this is the same as {@link #value()} but may also differ  * in sub-interfaces (e.g. decoded, sanitized, etc.).  */ ;/**  * Return the path segment value to use for pattern matching purposes.  * By default this is the same as {@link #value()} but may also differ  * in sub-interfaces (e.g. decoded, sanitized, etc.).  */ String valueToMatch().
true;;0;1;/**  * The same as {@link #valueToMatch()} but as a {@code char[]}.  */ ;/**  * The same as {@link #valueToMatch()} but as a {@code char[]}.  */ char[] valueToMatchAsChars().
true;;0;1;/**  * Path parameters parsed from the path segment.  */ ;/**  * Path parameters parsed from the path segment.  */ MultiValueMap<String, String> parameters().
