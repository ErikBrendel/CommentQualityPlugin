commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Whether to use global Reactor Netty resources via {@link HttpResources}.  * <p>Default is "true" in which case this factory initializes and stops the  * global Reactor Netty resources within Spring's {@code ApplicationContext}  * lifecycle. If set to "false" the factory manages its resources independent  * of the global ones.  * @param useGlobalResources whether to expose and manage the global resources  * @see #addGlobalResourcesConsumer(Consumer)  */ ;/**  * Whether to use global Reactor Netty resources via {@link HttpResources}.  * <p>Default is "true" in which case this factory initializes and stops the  * global Reactor Netty resources within Spring's {@code ApplicationContext}  * lifecycle. If set to "false" the factory manages its resources independent  * of the global ones.  * @param useGlobalResources whether to expose and manage the global resources  * @see #addGlobalResourcesConsumer(Consumer)  */ public void setUseGlobalResources(boolean useGlobalResources) {     this.useGlobalResources = useGlobalResources. }
true;public;0;3;/**  * Whether this factory exposes the global  * {@link reactor.netty.http.HttpResources HttpResources} holder.  */ ;/**  * Whether this factory exposes the global  * {@link reactor.netty.http.HttpResources HttpResources} holder.  */ public boolean isUseGlobalResources() {     return this.useGlobalResources. }
true;public;1;5;/**  * Add a Consumer for configuring the global Reactor Netty resources on  * startup. When this option is used, {@link #setUseGlobalResources} is also  * enabled.  * @param consumer the consumer to apply  * @see #setUseGlobalResources(boolean)  */ ;/**  * Add a Consumer for configuring the global Reactor Netty resources on  * startup. When this option is used, {@link #setUseGlobalResources} is also  * enabled.  * @param consumer the consumer to apply  * @see #setUseGlobalResources(boolean)  */ public void addGlobalResourcesConsumer(Consumer<HttpResources> consumer) {     this.useGlobalResources = true.     this.globalResourcesConsumer = this.globalResourcesConsumer != null ? this.globalResourcesConsumer.andThen(consumer) : consumer. }
true;public;1;3;/**  * Use this option when you don't want to participate in global resources and  * you want to customize the creation of the managed {@code ConnectionProvider}.  * <p>By default, {@code ConnectionProvider.elastic("http")} is used.  * <p>Note that this option is ignored if {@code userGlobalResources=false} or  * {@link #setConnectionProvider(ConnectionProvider)} is set.  * @param supplier the supplier to use  */ ;/**  * Use this option when you don't want to participate in global resources and  * you want to customize the creation of the managed {@code ConnectionProvider}.  * <p>By default, {@code ConnectionProvider.elastic("http")} is used.  * <p>Note that this option is ignored if {@code userGlobalResources=false} or  * {@link #setConnectionProvider(ConnectionProvider)} is set.  * @param supplier the supplier to use  */ public void setConnectionProviderSupplier(Supplier<ConnectionProvider> supplier) {     this.connectionProviderSupplier = supplier. }
true;public;1;3;/**  * Use this option when you don't want to participate in global resources and  * you want to customize the creation of the managed {@code LoopResources}.  * <p>By default, {@code LoopResources.create("reactor-http")} is used.  * <p>Note that this option is ignored if {@code userGlobalResources=false} or  * {@link #setLoopResources(LoopResources)} is set.  * @param supplier the supplier to use  */ ;/**  * Use this option when you don't want to participate in global resources and  * you want to customize the creation of the managed {@code LoopResources}.  * <p>By default, {@code LoopResources.create("reactor-http")} is used.  * <p>Note that this option is ignored if {@code userGlobalResources=false} or  * {@link #setLoopResources(LoopResources)} is set.  * @param supplier the supplier to use  */ public void setLoopResourcesSupplier(Supplier<LoopResources> supplier) {     this.loopResourcesSupplier = supplier. }
true;public;1;3;/**  * Use this option when you want to provide an externally managed  * {@link ConnectionProvider} instance.  * @param connectionProvider the connection provider to use as is  */ ;/**  * Use this option when you want to provide an externally managed  * {@link ConnectionProvider} instance.  * @param connectionProvider the connection provider to use as is  */ public void setConnectionProvider(ConnectionProvider connectionProvider) {     this.connectionProvider = connectionProvider. }
true;public;0;4;/**  * Return the configured {@link ConnectionProvider}.  */ ;/**  * Return the configured {@link ConnectionProvider}.  */ public ConnectionProvider getConnectionProvider() {     Assert.state(this.connectionProvider != null, "ConnectionProvider not initialized yet").     return this.connectionProvider. }
true;public;1;3;/**  * Use this option when you want to provide an externally managed  * {@link LoopResources} instance.  * @param loopResources the loop resources to use as is  */ ;/**  * Use this option when you want to provide an externally managed  * {@link LoopResources} instance.  * @param loopResources the loop resources to use as is  */ public void setLoopResources(LoopResources loopResources) {     this.loopResources = loopResources. }
true;public;0;4;/**  * Return the configured {@link LoopResources}.  */ ;/**  * Return the configured {@link LoopResources}.  */ public LoopResources getLoopResources() {     Assert.state(this.loopResources != null, "LoopResources not initialized yet").     return this.loopResources. }
false;public;0;23;;@Override public void afterPropertiesSet() {     if (this.useGlobalResources) {         Assert.isTrue(this.loopResources == null && this.connectionProvider == null, "'useGlobalResources' is mutually exclusive with explicitly configured resources").         HttpResources httpResources = HttpResources.get().         if (this.globalResourcesConsumer != null) {             this.globalResourcesConsumer.accept(httpResources).         }         this.connectionProvider = httpResources.         this.loopResources = httpResources.     } else {         if (this.loopResources == null) {             this.manageLoopResources = true.             this.loopResources = this.loopResourcesSupplier.get().         }         if (this.connectionProvider == null) {             this.manageConnectionProvider = true.             this.connectionProvider = this.connectionProviderSupplier.get().         }     } }
false;public;0;27;;@Override public void destroy() {     if (this.useGlobalResources) {         HttpResources.disposeLoopsAndConnections().     } else {         try {             ConnectionProvider provider = this.connectionProvider.             if (provider != null && this.manageConnectionProvider) {                 provider.dispose().             }         } catch (Throwable ex) {         // ignore         }         try {             LoopResources resources = this.loopResources.             if (resources != null && this.manageLoopResources) {                 resources.dispose().             }         } catch (Throwable ex) {         // ignore         }     } }
