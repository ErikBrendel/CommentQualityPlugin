commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the encoding mode to use.  * <p>By default this is set to {@link EncodingMode#TEMPLATE_AND_VALUES  * EncodingMode.TEMPLATE_AND_VALUES}.  * <p><strong>Note:</strong> In 5.1 the default was changed from  * {@link EncodingMode#URI_COMPONENT EncodingMode.URI_COMPONENT}.  * Consequently the {@code WebClient}, which relies on the built-in default  * has also been switched to the new default. The {@code RestTemplate}  * however sets this explicitly to {@link EncodingMode#URI_COMPONENT  * EncodingMode.URI_COMPONENT} explicitly for historic and backwards  * compatibility reasons.  * @param encodingMode the encoding mode to use  */ ;/**  * Set the encoding mode to use.  * <p>By default this is set to {@link EncodingMode#TEMPLATE_AND_VALUES  * EncodingMode.TEMPLATE_AND_VALUES}.  * <p><strong>Note:</strong> In 5.1 the default was changed from  * {@link EncodingMode#URI_COMPONENT EncodingMode.URI_COMPONENT}.  * Consequently the {@code WebClient}, which relies on the built-in default  * has also been switched to the new default. The {@code RestTemplate}  * however sets this explicitly to {@link EncodingMode#URI_COMPONENT  * EncodingMode.URI_COMPONENT} explicitly for historic and backwards  * compatibility reasons.  * @param encodingMode the encoding mode to use  */ public void setEncodingMode(EncodingMode encodingMode) {     this.encodingMode = encodingMode. }
true;public;0;3;/**  * Return the configured encoding mode.  */ ;/**  * Return the configured encoding mode.  */ public EncodingMode getEncodingMode() {     return this.encodingMode. }
true;public;1;6;/**  * Provide default URI variable values to use when expanding URI templates  * with a Map of variables.  * @param defaultUriVariables default URI variable values  */ ;/**  * Provide default URI variable values to use when expanding URI templates  * with a Map of variables.  * @param defaultUriVariables default URI variable values  */ public void setDefaultUriVariables(@Nullable Map<String, ?> defaultUriVariables) {     this.defaultUriVariables.clear().     if (defaultUriVariables != null) {         this.defaultUriVariables.putAll(defaultUriVariables).     } }
true;public;0;3;/**  * Return the configured default URI variable values.  */ ;/**  * Return the configured default URI variable values.  */ public Map<String, ?> getDefaultUriVariables() {     return Collections.unmodifiableMap(this.defaultUriVariables). }
true;public;1;3;/**  * Whether to parse the input path into path segments if the encoding mode  * is set to {@link EncodingMode#URI_COMPONENT EncodingMode.URI_COMPONENT},  * which ensures that URI variables in the path are encoded according to  * path segment rules and for example a '/' is encoded.  * <p>By default this is set to {@code true}.  * @param parsePath whether to parse the path into path segments  */ ;/**  * Whether to parse the input path into path segments if the encoding mode  * is set to {@link EncodingMode#URI_COMPONENT EncodingMode.URI_COMPONENT},  * which ensures that URI variables in the path are encoded according to  * path segment rules and for example a '/' is encoded.  * <p>By default this is set to {@code true}.  * @param parsePath whether to parse the path into path segments  */ public void setParsePath(boolean parsePath) {     this.parsePath = parsePath. }
true;public;0;3;/**  * Whether to parse the path into path segments if the encoding mode is set  * to {@link EncodingMode#URI_COMPONENT EncodingMode.URI_COMPONENT}.  */ ;/**  * Whether to parse the path into path segments if the encoding mode is set  * to {@link EncodingMode#URI_COMPONENT EncodingMode.URI_COMPONENT}.  */ public boolean shouldParsePath() {     return this.parsePath. }
false;public;2;3;;// UriTemplateHandler public URI expand(String uriTemplate, Map<String, ?> uriVars) {     return uriString(uriTemplate).build(uriVars). }
false;public;2;3;;public URI expand(String uriTemplate, Object... uriVars) {     return uriString(uriTemplate).build(uriVars). }
false;public;1;3;;// UriBuilderFactory public UriBuilder uriString(String uriTemplate) {     return new DefaultUriBuilder(uriTemplate). }
false;public;0;4;;@Override public UriBuilder builder() {     return new DefaultUriBuilder(""). }
false;private;1;22;;private UriComponentsBuilder initUriComponentsBuilder(String uriTemplate) {     UriComponentsBuilder result.     if (StringUtils.isEmpty(uriTemplate)) {         result = baseUri != null ? baseUri.cloneBuilder() : UriComponentsBuilder.newInstance().     } else if (baseUri != null) {         UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(uriTemplate).         UriComponents uri = builder.build().         result = uri.getHost() == null ? baseUri.cloneBuilder().uriComponents(uri) : builder.     } else {         result = UriComponentsBuilder.fromUriString(uriTemplate).     }     if (encodingMode.equals(EncodingMode.TEMPLATE_AND_VALUES)) {         result.encode().     }     parsePathIfNecessary(result).     return result. }
false;private;1;13;;private void parsePathIfNecessary(UriComponentsBuilder result) {     if (parsePath && encodingMode.equals(EncodingMode.URI_COMPONENT)) {         UriComponents uric = result.build().         String path = uric.getPath().         result.replacePath(null).         for (String segment : uric.getPathSegments()) {             result.pathSegment(segment).         }         if (path != null && path.endsWith("/")) {             result.path("/").         }     } }
false;public;1;5;;@Override public DefaultUriBuilder scheme(@Nullable String scheme) {     this.uriComponentsBuilder.scheme(scheme).     return this. }
false;public;1;5;;@Override public DefaultUriBuilder userInfo(@Nullable String userInfo) {     this.uriComponentsBuilder.userInfo(userInfo).     return this. }
false;public;1;5;;@Override public DefaultUriBuilder host(@Nullable String host) {     this.uriComponentsBuilder.host(host).     return this. }
false;public;1;5;;@Override public DefaultUriBuilder port(int port) {     this.uriComponentsBuilder.port(port).     return this. }
false;public;1;5;;@Override public DefaultUriBuilder port(@Nullable String port) {     this.uriComponentsBuilder.port(port).     return this. }
false;public;1;5;;@Override public DefaultUriBuilder path(String path) {     this.uriComponentsBuilder.path(path).     return this. }
false;public;1;5;;@Override public DefaultUriBuilder replacePath(@Nullable String path) {     this.uriComponentsBuilder.replacePath(path).     return this. }
false;public;1;5;;@Override public DefaultUriBuilder pathSegment(String... pathSegments) {     this.uriComponentsBuilder.pathSegment(pathSegments).     return this. }
false;public;1;5;;@Override public DefaultUriBuilder query(String query) {     this.uriComponentsBuilder.query(query).     return this. }
false;public;1;5;;@Override public DefaultUriBuilder replaceQuery(@Nullable String query) {     this.uriComponentsBuilder.replaceQuery(query).     return this. }
false;public;2;5;;@Override public DefaultUriBuilder queryParam(String name, Object... values) {     this.uriComponentsBuilder.queryParam(name, values).     return this. }
false;public;2;5;;@Override public DefaultUriBuilder replaceQueryParam(String name, Object... values) {     this.uriComponentsBuilder.replaceQueryParam(name, values).     return this. }
false;public;1;5;;@Override public DefaultUriBuilder queryParams(MultiValueMap<String, String> params) {     this.uriComponentsBuilder.queryParams(params).     return this. }
false;public;1;5;;@Override public DefaultUriBuilder replaceQueryParams(MultiValueMap<String, String> params) {     this.uriComponentsBuilder.replaceQueryParams(params).     return this. }
false;public;1;5;;@Override public DefaultUriBuilder fragment(@Nullable String fragment) {     this.uriComponentsBuilder.fragment(fragment).     return this. }
false;public;1;14;;@Override public URI build(Map<String, ?> uriVars) {     if (!defaultUriVariables.isEmpty()) {         Map<String, Object> map = new HashMap<>().         map.putAll(defaultUriVariables).         map.putAll(uriVars).         uriVars = map.     }     if (encodingMode.equals(EncodingMode.VALUES_ONLY)) {         uriVars = UriUtils.encodeUriVariables(uriVars).     }     UriComponents uric = this.uriComponentsBuilder.build().expand(uriVars).     return createUri(uric). }
false;public;1;11;;@Override public URI build(Object... uriVars) {     if (ObjectUtils.isEmpty(uriVars) && !defaultUriVariables.isEmpty()) {         return build(Collections.emptyMap()).     }     if (encodingMode.equals(EncodingMode.VALUES_ONLY)) {         uriVars = UriUtils.encodeUriVariables(uriVars).     }     UriComponents uric = this.uriComponentsBuilder.build().expand(uriVars).     return createUri(uric). }
false;private;1;6;;private URI createUri(UriComponents uric) {     if (encodingMode.equals(EncodingMode.URI_COMPONENT)) {         uric = uric.encode().     }     return URI.create(uric.toString()). }
