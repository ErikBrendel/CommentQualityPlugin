commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public String decode() {     while (this.currentPosition < this.originalMessage.length()) {         findNextPotentialReference(this.currentPosition).         copyCharactersTillPotentialReference().         processPossibleReference().     }     return this.decodedMessage.toString(). }
false;private;1;31;;private void findNextPotentialReference(int startPosition) {     this.nextPotentialReferencePosition = Math.max(startPosition, this.nextSemicolonPosition - MAX_REFERENCE_SIZE).     do {         this.nextPotentialReferencePosition = this.originalMessage.indexOf('&', this.nextPotentialReferencePosition).         if (this.nextSemicolonPosition != -1 && this.nextSemicolonPosition < this.nextPotentialReferencePosition) {             this.nextSemicolonPosition = this.originalMessage.indexOf('.', this.nextPotentialReferencePosition + 1).         }         boolean isPotentialReference = (this.nextPotentialReferencePosition != -1 && this.nextSemicolonPosition != -1 && this.nextPotentialReferencePosition - this.nextSemicolonPosition < MAX_REFERENCE_SIZE).         if (isPotentialReference) {             break.         }         if (this.nextPotentialReferencePosition == -1) {             break.         }         if (this.nextSemicolonPosition == -1) {             this.nextPotentialReferencePosition = -1.             break.         }         this.nextPotentialReferencePosition = this.nextPotentialReferencePosition + 1.     } while (this.nextPotentialReferencePosition != -1). }
false;private;0;15;;private void copyCharactersTillPotentialReference() {     if (this.nextPotentialReferencePosition != this.currentPosition) {         int skipUntilIndex = (this.nextPotentialReferencePosition != -1 ? this.nextPotentialReferencePosition : this.originalMessage.length()).         if (skipUntilIndex - this.currentPosition > 3) {             this.decodedMessage.append(this.originalMessage.substring(this.currentPosition, skipUntilIndex)).             this.currentPosition = skipUntilIndex.         } else {             while (this.currentPosition < skipUntilIndex) {                 this.decodedMessage.append(this.originalMessage.charAt(this.currentPosition++)).             }         }     } }
false;private;0;14;;private void processPossibleReference() {     if (this.nextPotentialReferencePosition != -1) {         boolean isNumberedReference = (this.originalMessage.charAt(this.currentPosition + 1) == '#').         boolean wasProcessable = isNumberedReference ? processNumberedReference() : processNamedReference().         if (wasProcessable) {             this.currentPosition = this.nextSemicolonPosition + 1.         } else {             char currentChar = this.originalMessage.charAt(this.currentPosition).             this.decodedMessage.append(currentChar).             this.currentPosition++.         }     } }
false;private;0;14;;private boolean processNumberedReference() {     char referenceChar = this.originalMessage.charAt(this.nextPotentialReferencePosition + 2).     boolean isHexNumberedReference = (referenceChar == 'x' || referenceChar == 'X').     try {         int value = (!isHexNumberedReference ? Integer.parseInt(getReferenceSubstring(2)) : Integer.parseInt(getReferenceSubstring(3), 16)).         this.decodedMessage.append((char) value).         return true.     } catch (NumberFormatException ex) {         return false.     } }
false;private;0;9;;private boolean processNamedReference() {     String referenceName = getReferenceSubstring(1).     char mappedCharacter = this.characterEntityReferences.convertToCharacter(referenceName).     if (mappedCharacter != HtmlCharacterEntityReferences.CHAR_NULL) {         this.decodedMessage.append(mappedCharacter).         return true.     }     return false. }
false;private;1;4;;private String getReferenceSubstring(int referenceOffset) {     return this.originalMessage.substring(this.nextPotentialReferencePosition + referenceOffset, this.nextSemicolonPosition). }
