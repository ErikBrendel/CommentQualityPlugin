commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public HttpMethod getMethod() {     return this.method. }
false;public;0;4;;@Override public String getMethodValue() {     return this.method.name(). }
false;public;0;4;;@Override public URI getURI() {     return this.uri. }
false;protected,final;2;5;;@Override protected final ClientHttpResponse executeInternal(HttpHeaders headers, byte[] bufferedOutput) throws IOException {     InterceptingRequestExecution requestExecution = new InterceptingRequestExecution().     return requestExecution.execute(this, bufferedOutput). }
false;public;2;23;;@Override public ClientHttpResponse execute(HttpRequest request, byte[] body) throws IOException {     if (this.iterator.hasNext()) {         ClientHttpRequestInterceptor nextInterceptor = this.iterator.next().         return nextInterceptor.intercept(request, body, this).     } else {         HttpMethod method = request.getMethod().         Assert.state(method != null, "No standard HTTP method").         ClientHttpRequest delegate = requestFactory.createRequest(request.getURI(), method).         request.getHeaders().forEach((key, value) -> delegate.getHeaders().addAll(key, value)).         if (body.length > 0) {             if (delegate instanceof StreamingHttpOutputMessage) {                 StreamingHttpOutputMessage streamingOutputMessage = (StreamingHttpOutputMessage) delegate.                 streamingOutputMessage.setBody(outputStream -> StreamUtils.copy(body, outputStream)).             } else {                 StreamUtils.copy(body, delegate.getBody()).             }         }         return delegate.execute().     } }
