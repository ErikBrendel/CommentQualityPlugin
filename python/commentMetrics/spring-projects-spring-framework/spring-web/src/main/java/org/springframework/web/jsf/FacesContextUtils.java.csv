# id;timestamp;commentText;codeText;commentWords;codeWords
FacesContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(FacesContext fc) throws IllegalStateException;1412118176;Find the root {@link WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param fc the FacesContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(FacesContext fc) throws IllegalStateException {_		WebApplicationContext wac = getWebApplicationContext(fc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,link,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,fc,the,faces,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,faces,context,fc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,fc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
FacesContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(FacesContext fc) throws IllegalStateException;1495868221;Find the root {@link WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param fc the FacesContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(FacesContext fc) throws IllegalStateException {_		WebApplicationContext wac = getWebApplicationContext(fc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,link,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,fc,the,faces,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,faces,context,fc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,fc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
FacesContextUtils -> public static WebApplicationContext getWebApplicationContext(FacesContext fc);1328020251;Find the root WebApplicationContext for this web app, which is_typically loaded via ContextLoaderListener or ContextLoaderServlet._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param fc the FacesContext to find the web application context for_@return the root WebApplicationContext for this web app, or <code>null</code> if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(FacesContext fc) {_		Assert.notNull(fc, "FacesContext must not be null")__		Object attr = fc.getExternalContext().getApplicationMap().get(_				WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Root context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,the,root,web,application,context,for,this,web,app,which,is,typically,loaded,via,context,loader,listener,or,context,loader,servlet,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,fc,the,faces,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,code,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,faces,context,fc,assert,not,null,fc,faces,context,must,not,be,null,object,attr,fc,get,external,context,get,application,map,get,web,application,context,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,root,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
FacesContextUtils -> public static WebApplicationContext getWebApplicationContext(FacesContext fc);1356735495;Find the root WebApplicationContext for this web app, which is_typically loaded via ContextLoaderListener or ContextLoaderServlet._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param fc the FacesContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(FacesContext fc) {_		Assert.notNull(fc, "FacesContext must not be null")__		Object attr = fc.getExternalContext().getApplicationMap().get(_				WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Root context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,the,root,web,application,context,for,this,web,app,which,is,typically,loaded,via,context,loader,listener,or,context,loader,servlet,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,fc,the,faces,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,faces,context,fc,assert,not,null,fc,faces,context,must,not,be,null,object,attr,fc,get,external,context,get,application,map,get,web,application,context,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,root,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
FacesContextUtils -> public static WebApplicationContext getWebApplicationContext(FacesContext fc);1364593902;Find the root {@link WebApplicationContext} for this web app,_typically loaded via ContextLoaderListener._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param fc the FacesContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(FacesContext fc) {_		Assert.notNull(fc, "FacesContext must not be null")__		Object attr = fc.getExternalContext().getApplicationMap().get(_				WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Root context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,the,root,link,web,application,context,for,this,web,app,typically,loaded,via,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,fc,the,faces,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,faces,context,fc,assert,not,null,fc,faces,context,must,not,be,null,object,attr,fc,get,external,context,get,application,map,get,web,application,context,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,root,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
FacesContextUtils -> public static WebApplicationContext getWebApplicationContext(FacesContext fc);1412118176;Find the root {@link WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param fc the FacesContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(FacesContext fc) {_		Assert.notNull(fc, "FacesContext must not be null")__		Object attr = fc.getExternalContext().getApplicationMap().get(_				WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Root context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,the,root,link,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,fc,the,faces,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,faces,context,fc,assert,not,null,fc,faces,context,must,not,be,null,object,attr,fc,get,external,context,get,application,map,get,web,application,context,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,root,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
FacesContextUtils -> public static Object getSessionMutex(FacesContext fc);1328020251;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in <code>web.xml</code>. Falls back to the Session reference itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the <code>SESSION_MUTEX_ATTRIBUTE</code> constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the Session reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param fc the FacesContext to find the session mutex for_@return the mutex object (never <code>null</code>)_@see org.springframework.web.util.WebUtils#SESSION_MUTEX_ATTRIBUTE_@see org.springframework.web.util.HttpSessionMutexListener;public static Object getSessionMutex(FacesContext fc) {_		Assert.notNull(fc, "FacesContext must not be null")__		ExternalContext ec = fc.getExternalContext()__		Object mutex = ec.getSessionMap().get(WebUtils.SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = ec.getSession(true)__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,code,falls,back,to,the,session,reference,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,fc,the,faces,context,to,find,the,session,mutex,for,return,the,mutex,object,never,code,null,code,see,org,springframework,web,util,web,utils,see,org,springframework,web,util,http,session,mutex,listener;public,static,object,get,session,mutex,faces,context,fc,assert,not,null,fc,faces,context,must,not,be,null,external,context,ec,fc,get,external,context,object,mutex,ec,get,session,map,get,web,utils,if,mutex,null,mutex,ec,get,session,true,return,mutex
FacesContextUtils -> public static Object getSessionMutex(FacesContext fc);1356735495;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the Session reference itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the Session reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param fc the FacesContext to find the session mutex for_@return the mutex object (never {@code null})_@see org.springframework.web.util.WebUtils#SESSION_MUTEX_ATTRIBUTE_@see org.springframework.web.util.HttpSessionMutexListener;public static Object getSessionMutex(FacesContext fc) {_		Assert.notNull(fc, "FacesContext must not be null")__		ExternalContext ec = fc.getExternalContext()__		Object mutex = ec.getSessionMap().get(WebUtils.SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = ec.getSession(true)__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,session,reference,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,fc,the,faces,context,to,find,the,session,mutex,for,return,the,mutex,object,never,code,null,see,org,springframework,web,util,web,utils,see,org,springframework,web,util,http,session,mutex,listener;public,static,object,get,session,mutex,faces,context,fc,assert,not,null,fc,faces,context,must,not,be,null,external,context,ec,fc,get,external,context,object,mutex,ec,get,session,map,get,web,utils,if,mutex,null,mutex,ec,get,session,true,return,mutex
FacesContextUtils -> public static Object getSessionMutex(FacesContext fc);1364593902;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the Session reference itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the Session reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param fc the FacesContext to find the session mutex for_@return the mutex object (never {@code null})_@see org.springframework.web.util.WebUtils#SESSION_MUTEX_ATTRIBUTE_@see org.springframework.web.util.HttpSessionMutexListener;public static Object getSessionMutex(FacesContext fc) {_		Assert.notNull(fc, "FacesContext must not be null")__		ExternalContext ec = fc.getExternalContext()__		Object mutex = ec.getSessionMap().get(WebUtils.SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = ec.getSession(true)__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,session,reference,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,fc,the,faces,context,to,find,the,session,mutex,for,return,the,mutex,object,never,code,null,see,org,springframework,web,util,web,utils,see,org,springframework,web,util,http,session,mutex,listener;public,static,object,get,session,mutex,faces,context,fc,assert,not,null,fc,faces,context,must,not,be,null,external,context,ec,fc,get,external,context,object,mutex,ec,get,session,map,get,web,utils,if,mutex,null,mutex,ec,get,session,true,return,mutex
FacesContextUtils -> public static Object getSessionMutex(FacesContext fc);1412118176;Return the best available mutex for the given session:_that is, an object to synchronize on for the given session._<p>Returns the session mutex attribute if available_ usually,_this means that the HttpSessionMutexListener needs to be defined_in {@code web.xml}. Falls back to the Session reference itself_if no mutex attribute found._<p>The session mutex is guaranteed to be the same object during_the entire lifetime of the session, available under the key defined_by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a_safe reference to synchronize on for locking on the current session._<p>In many cases, the Session reference itself is a safe mutex_as well, since it will always be the same object reference for the_same active logical session. However, this is not guaranteed across_different servlet containers_ the only 100% safe way is a session mutex._@param fc the FacesContext to find the session mutex for_@return the mutex object (never {@code null})_@see org.springframework.web.util.WebUtils#SESSION_MUTEX_ATTRIBUTE_@see org.springframework.web.util.HttpSessionMutexListener;public static Object getSessionMutex(FacesContext fc) {_		Assert.notNull(fc, "FacesContext must not be null")__		ExternalContext ec = fc.getExternalContext()__		Object mutex = ec.getSessionMap().get(WebUtils.SESSION_MUTEX_ATTRIBUTE)__		if (mutex == null) {_			mutex = ec.getSession(true)__		}_		return mutex__	};return,the,best,available,mutex,for,the,given,session,that,is,an,object,to,synchronize,on,for,the,given,session,p,returns,the,session,mutex,attribute,if,available,usually,this,means,that,the,http,session,mutex,listener,needs,to,be,defined,in,code,web,xml,falls,back,to,the,session,reference,itself,if,no,mutex,attribute,found,p,the,session,mutex,is,guaranteed,to,be,the,same,object,during,the,entire,lifetime,of,the,session,available,under,the,key,defined,by,the,code,constant,it,serves,as,a,safe,reference,to,synchronize,on,for,locking,on,the,current,session,p,in,many,cases,the,session,reference,itself,is,a,safe,mutex,as,well,since,it,will,always,be,the,same,object,reference,for,the,same,active,logical,session,however,this,is,not,guaranteed,across,different,servlet,containers,the,only,100,safe,way,is,a,session,mutex,param,fc,the,faces,context,to,find,the,session,mutex,for,return,the,mutex,object,never,code,null,see,org,springframework,web,util,web,utils,see,org,springframework,web,util,http,session,mutex,listener;public,static,object,get,session,mutex,faces,context,fc,assert,not,null,fc,faces,context,must,not,be,null,external,context,ec,fc,get,external,context,object,mutex,ec,get,session,map,get,web,utils,if,mutex,null,mutex,ec,get,session,true,return,mutex
