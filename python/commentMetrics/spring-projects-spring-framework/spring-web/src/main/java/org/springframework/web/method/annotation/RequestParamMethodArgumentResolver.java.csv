commented;modifiers;parameterAmount;loc;comment;code
true;public;1;27;/**  * Supports the following:  * <ul>  * <li>@RequestParam-annotated method arguments.  * This excludes {@link Map} params where the annotation does not specify a name.  * See {@link RequestParamMapMethodArgumentResolver} instead for such params.  * <li>Arguments of type {@link MultipartFile} unless annotated with @{@link RequestPart}.  * <li>Arguments of type {@code Part} unless annotated with @{@link RequestPart}.  * <li>In default resolution mode, simple type arguments even if not with @{@link RequestParam}.  * </ul>  */ ;/**  * Supports the following:  * <ul>  * <li>@RequestParam-annotated method arguments.  * This excludes {@link Map} params where the annotation does not specify a name.  * See {@link RequestParamMapMethodArgumentResolver} instead for such params.  * <li>Arguments of type {@link MultipartFile} unless annotated with @{@link RequestPart}.  * <li>Arguments of type {@code Part} unless annotated with @{@link RequestPart}.  * <li>In default resolution mode, simple type arguments even if not with @{@link RequestParam}.  * </ul>  */ @Override public boolean supportsParameter(MethodParameter parameter) {     if (parameter.hasParameterAnnotation(RequestParam.class)) {         if (Map.class.isAssignableFrom(parameter.nestedIfOptional().getNestedParameterType())) {             RequestParam requestParam = parameter.getParameterAnnotation(RequestParam.class).             return (requestParam != null && StringUtils.hasText(requestParam.name())).         } else {             return true.         }     } else {         if (parameter.hasParameterAnnotation(RequestPart.class)) {             return false.         }         parameter = parameter.nestedIfOptional().         if (MultipartResolutionDelegate.isMultipartArgument(parameter)) {             return true.         } else if (this.useDefaultResolution) {             return BeanUtils.isSimpleProperty(parameter.getNestedParameterType()).         } else {             return false.         }     } }
false;protected;1;5;;@Override protected NamedValueInfo createNamedValueInfo(MethodParameter parameter) {     RequestParam ann = parameter.getParameterAnnotation(RequestParam.class).     return (ann != null ? new RequestParamNamedValueInfo(ann) : new RequestParamNamedValueInfo()). }
false;protected;3;28;;@Override @Nullable protected Object resolveName(String name, MethodParameter parameter, NativeWebRequest request) throws Exception {     HttpServletRequest servletRequest = request.getNativeRequest(HttpServletRequest.class).     if (servletRequest != null) {         Object mpArg = MultipartResolutionDelegate.resolveMultipartArgument(name, parameter, servletRequest).         if (mpArg != MultipartResolutionDelegate.UNRESOLVABLE) {             return mpArg.         }     }     Object arg = null.     MultipartRequest multipartRequest = request.getNativeRequest(MultipartRequest.class).     if (multipartRequest != null) {         List<MultipartFile> files = multipartRequest.getFiles(name).         if (!files.isEmpty()) {             arg = (files.size() == 1 ? files.get(0) : files).         }     }     if (arg == null) {         String[] paramValues = request.getParameterValues(name).         if (paramValues != null) {             arg = (paramValues.length == 1 ? paramValues[0] : paramValues).         }     }     return arg. }
false;protected;3;18;;@Override protected void handleMissingValue(String name, MethodParameter parameter, NativeWebRequest request) throws Exception {     HttpServletRequest servletRequest = request.getNativeRequest(HttpServletRequest.class).     if (MultipartResolutionDelegate.isMultipartArgument(parameter)) {         if (servletRequest == null || !MultipartResolutionDelegate.isMultipartRequest(servletRequest)) {             throw new MultipartException("Current request is not a multipart request").         } else {             throw new MissingServletRequestPartException(name).         }     } else {         throw new MissingServletRequestParameterException(name, parameter.getNestedParameterType().getSimpleName()).     } }
false;public;5;31;;@Override public void contributeMethodArgument(MethodParameter parameter, @Nullable Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) {     Class<?> paramType = parameter.getNestedParameterType().     if (Map.class.isAssignableFrom(paramType) || MultipartFile.class == paramType || Part.class == paramType) {         return.     }     RequestParam requestParam = parameter.getParameterAnnotation(RequestParam.class).     String name = (requestParam == null || StringUtils.isEmpty(requestParam.name()) ? parameter.getParameterName() : requestParam.name()).     Assert.state(name != null, "Unresolvable parameter name").     if (value == null) {         if (requestParam != null && (!requestParam.required() || !requestParam.defaultValue().equals(ValueConstants.DEFAULT_NONE))) {             return.         }         builder.queryParam(name).     } else if (value instanceof Collection) {         for (Object element : (Collection<?>) value) {             element = formatUriValue(conversionService, TypeDescriptor.nested(parameter, 1), element).             builder.queryParam(name, element).         }     } else {         builder.queryParam(name, formatUriValue(conversionService, new TypeDescriptor(parameter), value)).     } }
false;protected;3;17;;@Nullable protected String formatUriValue(@Nullable ConversionService cs, @Nullable TypeDescriptor sourceType, @Nullable Object value) {     if (value == null) {         return null.     } else if (value instanceof String) {         return (String) value.     } else if (cs != null) {         return (String) cs.convert(value, sourceType, STRING_TYPE_DESCRIPTOR).     } else {         return value.toString().     } }
