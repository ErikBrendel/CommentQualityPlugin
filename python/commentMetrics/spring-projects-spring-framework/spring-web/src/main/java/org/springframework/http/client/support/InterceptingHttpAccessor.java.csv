commented;modifiers;parameterAmount;loc;comment;code
true;public;1;8;/**  * Set the request interceptors that this accessor should use.  * <p>The interceptors will get sorted according to their order  * once the {@link ClientHttpRequestFactory} will be built.  * @see #getRequestFactory()  * @see AnnotationAwareOrderComparator  */ ;/**  * Set the request interceptors that this accessor should use.  * <p>The interceptors will get sorted according to their order  * once the {@link ClientHttpRequestFactory} will be built.  * @see #getRequestFactory()  * @see AnnotationAwareOrderComparator  */ public void setInterceptors(List<ClientHttpRequestInterceptor> interceptors) {     // Take getInterceptors() List as-is when passed in here     if (this.interceptors != interceptors) {         this.interceptors.clear().         this.interceptors.addAll(interceptors).         AnnotationAwareOrderComparator.sort(this.interceptors).     } }
true;public;0;3;/**  * Return the request interceptors that this accessor uses.  * <p>The returned {@link List} is active and may get appended to.  */ ;/**  * Return the request interceptors that this accessor uses.  * <p>The returned {@link List} is active and may get appended to.  */ public List<ClientHttpRequestInterceptor> getInterceptors() {     return this.interceptors. }
true;public;1;5;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public void setRequestFactory(ClientHttpRequestFactory requestFactory) {     super.setRequestFactory(requestFactory).     this.interceptingRequestFactory = null. }
true;public;0;15;/**  * Overridden to expose an {@link InterceptingClientHttpRequestFactory}  * if necessary.  * @see #getInterceptors()  */ ;/**  * Overridden to expose an {@link InterceptingClientHttpRequestFactory}  * if necessary.  * @see #getInterceptors()  */ @Override public ClientHttpRequestFactory getRequestFactory() {     List<ClientHttpRequestInterceptor> interceptors = getInterceptors().     if (!CollectionUtils.isEmpty(interceptors)) {         ClientHttpRequestFactory factory = this.interceptingRequestFactory.         if (factory == null) {             factory = new InterceptingClientHttpRequestFactory(super.getRequestFactory(), interceptors).             this.interceptingRequestFactory = factory.         }         return factory.     } else {         return super.getRequestFactory().     } }
