commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Indicates whether DTD parsing should be supported.  * <p>Default is {@code false} meaning that DTD is disabled.  */ ;/**  * Indicates whether DTD parsing should be supported.  * <p>Default is {@code false} meaning that DTD is disabled.  */ public void setSupportDtd(boolean supportDtd) {     this.supportDtd = supportDtd. }
true;public;0;3;/**  * Whether DTD parsing is supported.  */ ;/**  * Whether DTD parsing is supported.  */ public boolean isSupportDtd() {     return this.supportDtd. }
true;public;1;6;/**  * Indicates whether external XML entities are processed when converting to a Source.  * <p>Default is {@code false}, meaning that external entities are not resolved.  * <p><strong>Note:</strong> setting this option to {@code true} also  * automatically sets {@link #setSupportDtd} to {@code true}.  */ ;/**  * Indicates whether external XML entities are processed when converting to a Source.  * <p>Default is {@code false}, meaning that external entities are not resolved.  * <p><strong>Note:</strong> setting this option to {@code true} also  * automatically sets {@link #setSupportDtd} to {@code true}.  */ public void setProcessExternalEntities(boolean processExternalEntities) {     this.processExternalEntities = processExternalEntities.     if (processExternalEntities) {         setSupportDtd(true).     } }
true;public;0;3;/**  * Returns the configured value for whether XML external entities are allowed.  */ ;/**  * Returns the configured value for whether XML external entities are allowed.  */ public boolean isProcessExternalEntities() {     return this.processExternalEntities. }
false;public;2;5;;@Override public boolean canRead(Class<?> clazz, @Nullable MediaType mediaType) {     return (clazz.isAnnotationPresent(XmlRootElement.class) || clazz.isAnnotationPresent(XmlType.class)) && canRead(mediaType). }
false;public;2;4;;@Override public boolean canWrite(Class<?> clazz, @Nullable MediaType mediaType) {     return (AnnotationUtils.findAnnotation(clazz, XmlRootElement.class) != null && canWrite(mediaType)). }
false;protected;1;5;;@Override protected boolean supports(Class<?> clazz) {     // should not be called, since we override canRead/Write     throw new UnsupportedOperationException(). }
false;protected;3;27;;@Override protected Object readFromSource(Class<?> clazz, HttpHeaders headers, Source source) throws Exception {     try {         source = processSource(source).         Unmarshaller unmarshaller = createUnmarshaller(clazz).         if (clazz.isAnnotationPresent(XmlRootElement.class)) {             return unmarshaller.unmarshal(source).         } else {             JAXBElement<?> jaxbElement = unmarshaller.unmarshal(source, clazz).             return jaxbElement.getValue().         }     } catch (NullPointerException ex) {         if (!isSupportDtd()) {             throw new IllegalStateException("NPE while unmarshalling. " + "This can happen due to the presence of DTD declarations which are disabled.", ex).         }         throw ex.     } catch (UnmarshalException ex) {         throw ex.     } catch (JAXBException ex) {         throw new HttpMessageConversionException("Invalid JAXB setup: " + ex.getMessage(), ex).     } }
false;protected;1;24;;// on JDK 9 @SuppressWarnings("deprecation") protected Source processSource(Source source) {     if (source instanceof StreamSource) {         StreamSource streamSource = (StreamSource) source.         InputSource inputSource = new InputSource(streamSource.getInputStream()).         try {             XMLReader xmlReader = org.xml.sax.helpers.XMLReaderFactory.createXMLReader().             xmlReader.setFeature("http://apache.org/xml/features/disallow-doctype-decl", !isSupportDtd()).             String featureName = "http://xml.org/sax/features/external-general-entities".             xmlReader.setFeature(featureName, isProcessExternalEntities()).             if (!isProcessExternalEntities()) {                 xmlReader.setEntityResolver(NO_OP_ENTITY_RESOLVER).             }             return new SAXSource(xmlReader, inputSource).         } catch (SAXException ex) {             logger.warn("Processing of external entities could not be disabled", ex).             return source.         }     } else {         return source.     } }
false;protected;3;15;;@Override protected void writeToResult(Object o, HttpHeaders headers, Result result) throws Exception {     try {         Class<?> clazz = ClassUtils.getUserClass(o).         Marshaller marshaller = createMarshaller(clazz).         setCharset(headers.getContentType(), marshaller).         marshaller.marshal(o, result).     } catch (MarshalException ex) {         throw ex.     } catch (JAXBException ex) {         throw new HttpMessageConversionException("Invalid JAXB setup: " + ex.getMessage(), ex).     } }
false;private;2;5;;private void setCharset(@Nullable MediaType contentType, Marshaller marshaller) throws PropertyException {     if (contentType != null && contentType.getCharset() != null) {         marshaller.setProperty(Marshaller.JAXB_ENCODING, contentType.getCharset().name()).     } }
