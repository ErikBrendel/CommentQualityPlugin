commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;4;;private static URI initUri(HttpServerRequest request) throws URISyntaxException {     Assert.notNull(request, "HttpServerRequest must not be null").     return new URI(resolveBaseUrl(request).toString() + resolveRequestUri(request)). }
false;private,static;1;30;;private static URI resolveBaseUrl(HttpServerRequest request) throws URISyntaxException {     String scheme = getScheme(request).     String header = request.requestHeaders().get(HttpHeaderNames.HOST).     if (header != null) {         final int portIndex.         if (header.startsWith("[")) {             portIndex = header.indexOf(':', header.indexOf(']')).         } else {             portIndex = header.indexOf(':').         }         if (portIndex != -1) {             try {                 return new URI(scheme, null, header.substring(0, portIndex), Integer.parseInt(header.substring(portIndex + 1)), null, null, null).             } catch (NumberFormatException ex) {                 throw new URISyntaxException(header, "Unable to parse port", portIndex).             }         } else {             return new URI(scheme, header, null, null).         }     } else {         InetSocketAddress localAddress = request.hostAddress().         return new URI(scheme, null, localAddress.getHostString(), localAddress.getPort(), null, null, null).     } }
false;private,static;1;3;;private static String getScheme(HttpServerRequest request) {     return request.scheme(). }
false;private,static;1;21;;private static String resolveRequestUri(HttpServerRequest request) {     String uri = request.uri().     for (int i = 0. i < uri.length(). i++) {         char c = uri.charAt(i).         if (c == '/' || c == '?' || c == '#') {             break.         }         if (c == ':' && (i + 2 < uri.length())) {             if (uri.charAt(i + 1) == '/' && uri.charAt(i + 2) == '/') {                 for (int j = i + 3. j < uri.length(). j++) {                     c = uri.charAt(j).                     if (c == '/' || c == '?' || c == '#') {                         return uri.substring(j).                     }                 }                 return "".             }         }     }     return uri. }
false;private,static;1;4;;private static HttpHeaders initHeaders(HttpServerRequest channel) {     NettyHeadersAdapter headersMap = new NettyHeadersAdapter(channel.requestHeaders()).     return new HttpHeaders(headersMap). }
false;public;0;4;;@Override public String getMethodValue() {     return this.request.method().name(). }
false;protected;0;11;;@Override protected MultiValueMap<String, HttpCookie> initCookies() {     MultiValueMap<String, HttpCookie> cookies = new LinkedMultiValueMap<>().     for (CharSequence name : this.request.cookies().keySet()) {         for (Cookie cookie : this.request.cookies().get(name)) {             HttpCookie httpCookie = new HttpCookie(name.toString(), cookie.value()).             cookies.add(name.toString(), httpCookie).         }     }     return cookies. }
false;public;0;4;;@Override public InetSocketAddress getRemoteAddress() {     return this.request.remoteAddress(). }
false;protected;0;10;;@Override @Nullable protected SslInfo initSslInfo() {     SslHandler sslHandler = ((Connection) this.request).channel().pipeline().get(SslHandler.class).     if (sslHandler != null) {         SSLSession session = sslHandler.engine().getSession().         return new DefaultSslInfo(session).     }     return null. }
false;public;0;4;;@Override public Flux<DataBuffer> getBody() {     return this.request.receive().retain().map(this.bufferFactory::wrap). }
false;public;0;5;;@SuppressWarnings("unchecked") @Override public <T> T getNativeRequest() {     return (T) this.request. }
false;protected;0;6;;@Override @Nullable protected String initId() {     return this.request instanceof Connection ? ((Connection) this.request).channel().id().asShortText() : null. }
