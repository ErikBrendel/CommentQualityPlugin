commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;7;;private static void initLogger(Decoder<?> decoder) {     if (decoder instanceof AbstractDecoder && decoder.getClass().getName().startsWith("org.springframework.core.codec")) {         Log logger = HttpLogging.forLog(((AbstractDecoder) decoder).getLogger()).         ((AbstractDecoder) decoder).setLogger(logger).     } }
true;public;0;3;/**  * Return the {@link Decoder} of this reader.  */ ;/**  * Return the {@link Decoder} of this reader.  */ public Decoder<T> getDecoder() {     return this.decoder. }
false;public;0;4;;@Override public List<MediaType> getReadableMediaTypes() {     return this.mediaTypes. }
false;public;2;4;;@Override public boolean canRead(ResolvableType elementType, @Nullable MediaType mediaType) {     return this.decoder.canDecode(elementType, mediaType). }
false;public;3;5;;@Override public Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints) {     MediaType contentType = getContentType(message).     return this.decoder.decode(message.getBody(), elementType, contentType, hints). }
false;public;3;5;;@Override public Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints) {     MediaType contentType = getContentType(message).     return this.decoder.decodeToMono(message.getBody(), elementType, contentType, hints). }
true;protected;1;5;/**  * Determine the Content-Type of the HTTP message based on the  * "Content-Type" header or otherwise default to  * {@link MediaType#APPLICATION_OCTET_STREAM}.  * @param inputMessage the HTTP message  * @return the MediaType, possibly {@code null}.  */ ;/**  * Determine the Content-Type of the HTTP message based on the  * "Content-Type" header or otherwise default to  * {@link MediaType#APPLICATION_OCTET_STREAM}.  * @param inputMessage the HTTP message  * @return the MediaType, possibly {@code null}.  */ @Nullable protected MediaType getContentType(HttpMessage inputMessage) {     MediaType contentType = inputMessage.getHeaders().getContentType().     return (contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM). }
false;public;5;9;;// Server-side only... @Override public Flux<T> read(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request, ServerHttpResponse response, Map<String, Object> hints) {     Map<String, Object> allHints = Hints.merge(hints, getReadHints(actualType, elementType, request, response)).     return read(elementType, request, allHints). }
false;public;5;9;;@Override public Mono<T> readMono(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request, ServerHttpResponse response, Map<String, Object> hints) {     Map<String, Object> allHints = Hints.merge(hints, getReadHints(actualType, elementType, request, response)).     return readMono(elementType, request, allHints). }
true;protected;4;9;/**  * Get additional hints for decoding for example based on the server request  * or annotations from controller method parameters. By default, delegate to  * the decoder if it is an instance of {@link HttpMessageDecoder}.  */ ;/**  * Get additional hints for decoding for example based on the server request  * or annotations from controller method parameters. By default, delegate to  * the decoder if it is an instance of {@link HttpMessageDecoder}.  */ protected Map<String, Object> getReadHints(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request, ServerHttpResponse response) {     if (this.decoder instanceof HttpMessageDecoder) {         HttpMessageDecoder<?> decoder = (HttpMessageDecoder<?>) this.decoder.         return decoder.getDecodeHints(actualType, elementType, request, response).     }     return Hints.none(). }
