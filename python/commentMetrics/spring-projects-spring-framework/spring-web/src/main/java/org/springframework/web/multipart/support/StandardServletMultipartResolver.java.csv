commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether to resolve the multipart request lazily at the time of  * file or parameter access.  * <p>Default is "false", resolving the multipart elements immediately, throwing  * corresponding exceptions at the time of the {@link #resolveMultipart} call.  * Switch this to "true" for lazy multipart parsing, throwing parse exceptions  * once the application attempts to obtain multipart files or parameters.  * @since 3.2.9  */ ;/**  * Set whether to resolve the multipart request lazily at the time of  * file or parameter access.  * <p>Default is "false", resolving the multipart elements immediately, throwing  * corresponding exceptions at the time of the {@link #resolveMultipart} call.  * Switch this to "true" for lazy multipart parsing, throwing parse exceptions  * once the application attempts to obtain multipart files or parameters.  * @since 3.2.9  */ public void setResolveLazily(boolean resolveLazily) {     this.resolveLazily = resolveLazily. }
false;public;1;4;;@Override public boolean isMultipart(HttpServletRequest request) {     return StringUtils.startsWithIgnoreCase(request.getContentType(), "multipart/"). }
false;public;1;4;;@Override public MultipartHttpServletRequest resolveMultipart(HttpServletRequest request) throws MultipartException {     return new StandardMultipartHttpServletRequest(request, this.resolveLazily). }
false;public;1;18;;@Override public void cleanupMultipart(MultipartHttpServletRequest request) {     if (!(request instanceof AbstractMultipartHttpServletRequest) || ((AbstractMultipartHttpServletRequest) request).isResolved()) {         // but only actual file parts (for Resin compatibility)         try {             for (Part part : request.getParts()) {                 if (request.getFile(part.getName()) != null) {                     part.delete().                 }             }         } catch (Throwable ex) {             LogFactory.getLog(getClass()).warn("Failed to perform cleanup of multipart items", ex).         }     } }
