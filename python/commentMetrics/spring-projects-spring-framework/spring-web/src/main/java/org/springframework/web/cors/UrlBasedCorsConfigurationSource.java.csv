commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the PathMatcher implementation to use for matching URL paths  * against registered URL patterns. Default is AntPathMatcher.  * @see org.springframework.util.AntPathMatcher  */ ;/**  * Set the PathMatcher implementation to use for matching URL paths  * against registered URL patterns. Default is AntPathMatcher.  * @see org.springframework.util.AntPathMatcher  */ public void setPathMatcher(PathMatcher pathMatcher) {     Assert.notNull(pathMatcher, "PathMatcher must not be null").     this.pathMatcher = pathMatcher. }
true;public;1;3;/**  * Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}.  * @see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath  */ ;/**  * Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}.  * @see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath  */ public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {     this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath). }
true;public;1;3;/**  * Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}.  * @see org.springframework.web.util.UrlPathHelper#setUrlDecode  */ ;/**  * Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}.  * @see org.springframework.web.util.UrlPathHelper#setUrlDecode  */ public void setUrlDecode(boolean urlDecode) {     this.urlPathHelper.setUrlDecode(urlDecode). }
true;public;1;3;/**  * Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}.  * @see org.springframework.web.util.UrlPathHelper#setRemoveSemicolonContent(boolean)  */ ;/**  * Shortcut to same property on underlying {@link #setUrlPathHelper UrlPathHelper}.  * @see org.springframework.web.util.UrlPathHelper#setRemoveSemicolonContent(boolean)  */ public void setRemoveSemicolonContent(boolean removeSemicolonContent) {     this.urlPathHelper.setRemoveSemicolonContent(removeSemicolonContent). }
true;public;1;4;/**  * Set the UrlPathHelper to use for resolution of lookup paths.  * <p>Use this to override the default UrlPathHelper with a custom subclass.  */ ;/**  * Set the UrlPathHelper to use for resolution of lookup paths.  * <p>Use this to override the default UrlPathHelper with a custom subclass.  */ public void setUrlPathHelper(UrlPathHelper urlPathHelper) {     Assert.notNull(urlPathHelper, "UrlPathHelper must not be null").     this.urlPathHelper = urlPathHelper. }
true;public;1;6;/**  * Set CORS configuration based on URL patterns.  */ ;/**  * Set CORS configuration based on URL patterns.  */ public void setCorsConfigurations(@Nullable Map<String, CorsConfiguration> corsConfigurations) {     this.corsConfigurations.clear().     if (corsConfigurations != null) {         this.corsConfigurations.putAll(corsConfigurations).     } }
true;public;0;3;/**  * Get the CORS configuration.  */ ;/**  * Get the CORS configuration.  */ public Map<String, CorsConfiguration> getCorsConfigurations() {     return Collections.unmodifiableMap(this.corsConfigurations). }
true;public;2;3;/**  * Register a {@link CorsConfiguration} for the specified path pattern.  */ ;/**  * Register a {@link CorsConfiguration} for the specified path pattern.  */ public void registerCorsConfiguration(String path, CorsConfiguration config) {     this.corsConfigurations.put(path, config). }
false;public;1;11;;@Override @Nullable public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {     String lookupPath = this.urlPathHelper.getLookupPathForRequest(request).     for (Map.Entry<String, CorsConfiguration> entry : this.corsConfigurations.entrySet()) {         if (this.pathMatcher.match(entry.getKey(), lookupPath)) {             return entry.getValue().         }     }     return null. }
