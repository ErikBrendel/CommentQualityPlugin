commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Indicates whether the {@code Accept-Charset} should be written to any outgoing request.  * <p>Default is {@code true}.  */ ;/**  * Indicates whether the {@code Accept-Charset} should be written to any outgoing request.  * <p>Default is {@code true}.  */ public void setWriteAcceptCharset(boolean writeAcceptCharset) {     this.writeAcceptCharset = writeAcceptCharset. }
false;public;1;4;;@Override public boolean supports(Class<?> clazz) {     return String.class == clazz. }
false;protected;2;5;;@Override protected String readInternal(Class<? extends String> clazz, HttpInputMessage inputMessage) throws IOException {     Charset charset = getContentTypeCharset(inputMessage.getHeaders().getContentType()).     return StreamUtils.copyToString(inputMessage.getBody(), charset). }
false;protected;2;5;;@Override protected Long getContentLength(String str, @Nullable MediaType contentType) {     Charset charset = getContentTypeCharset(contentType).     return (long) str.getBytes(charset).length. }
false;protected;2;8;;@Override protected void writeInternal(String str, HttpOutputMessage outputMessage) throws IOException {     if (this.writeAcceptCharset) {         outputMessage.getHeaders().setAcceptCharset(getAcceptedCharsets()).     }     Charset charset = getContentTypeCharset(outputMessage.getHeaders().getContentType()).     StreamUtils.copy(str, charset, outputMessage.getBody()). }
true;protected;0;8;/**  * Return the list of supported {@link Charset Charsets}.  * <p>By default, returns {@link Charset#availableCharsets()}.  * Can be overridden in subclasses.  * @return the list of accepted charsets  */ ;/**  * Return the list of supported {@link Charset Charsets}.  * <p>By default, returns {@link Charset#availableCharsets()}.  * Can be overridden in subclasses.  * @return the list of accepted charsets  */ protected List<Charset> getAcceptedCharsets() {     List<Charset> charsets = this.availableCharsets.     if (charsets == null) {         charsets = new ArrayList<>(Charset.availableCharsets().values()).         this.availableCharsets = charsets.     }     return charsets. }
false;private;1;14;;private Charset getContentTypeCharset(@Nullable MediaType contentType) {     if (contentType != null && contentType.getCharset() != null) {         return contentType.getCharset().     } else if (contentType != null && contentType.isCompatibleWith(MediaType.APPLICATION_JSON)) {         // Matching to AbstractJackson2HttpMessageConverter#DEFAULT_CHARSET         return StandardCharsets.UTF_8.     } else {         Charset charset = getDefaultCharset().         Assert.state(charset != null, "No default charset").         return charset.     } }
