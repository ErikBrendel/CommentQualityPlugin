commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;@Override public Object get(String name, ObjectFactory<?> objectFactory) {     Object scopedObject = this.servletContext.getAttribute(name).     if (scopedObject == null) {         scopedObject = objectFactory.getObject().         this.servletContext.setAttribute(name, scopedObject).     }     return scopedObject. }
false;public;1;13;;@Override @Nullable public Object remove(String name) {     Object scopedObject = this.servletContext.getAttribute(name).     if (scopedObject != null) {         this.servletContext.removeAttribute(name).         this.destructionCallbacks.remove(name).         return scopedObject.     } else {         return null.     } }
false;public;2;4;;@Override public void registerDestructionCallback(String name, Runnable callback) {     this.destructionCallbacks.put(name, callback). }
false;public;1;5;;@Override @Nullable public Object resolveContextualObject(String key) {     return null. }
false;public;0;5;;@Override @Nullable public String getConversationId() {     return null. }
true;public;0;7;/**  * Invoke all registered destruction callbacks.  * To be called on ServletContext shutdown.  * @see org.springframework.web.context.ContextCleanupListener  */ ;/**  * Invoke all registered destruction callbacks.  * To be called on ServletContext shutdown.  * @see org.springframework.web.context.ContextCleanupListener  */ @Override public void destroy() {     for (Runnable runnable : this.destructionCallbacks.values()) {         runnable.run().     }     this.destructionCallbacks.clear(). }
