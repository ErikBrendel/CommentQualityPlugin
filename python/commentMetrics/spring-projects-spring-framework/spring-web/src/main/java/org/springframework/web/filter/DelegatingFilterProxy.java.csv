# id;timestamp;commentText;codeText;commentWords;codeWords
DelegatingFilterProxy -> public void setContextAttribute(@Nullable String contextAttribute);1500448076;Set the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public void setContextAttribute(@Nullable String contextAttribute) {_		this.contextAttribute = contextAttribute__	};set,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,void,set,context,attribute,nullable,string,context,attribute,this,context,attribute,context,attribute
DelegatingFilterProxy -> public void setContextAttribute(@Nullable String contextAttribute);1506468851;Set the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public void setContextAttribute(@Nullable String contextAttribute) {_		this.contextAttribute = contextAttribute__	};set,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,void,set,context,attribute,nullable,string,context,attribute,this,context,attribute,context,attribute
DelegatingFilterProxy -> @Nullable 	protected String getTargetBeanName();1498780456;Return the name of the target bean in the Spring application context.;@Nullable_	protected String getTargetBeanName() {_		return this.targetBeanName__	};return,the,name,of,the,target,bean,in,the,spring,application,context;nullable,protected,string,get,target,bean,name,return,this,target,bean,name
DelegatingFilterProxy -> @Nullable 	protected String getTargetBeanName();1500448076;Return the name of the target bean in the Spring application context.;@Nullable_	protected String getTargetBeanName() {_		return this.targetBeanName__	};return,the,name,of,the,target,bean,in,the,spring,application,context;nullable,protected,string,get,target,bean,name,return,this,target,bean,name
DelegatingFilterProxy -> @Nullable 	protected String getTargetBeanName();1506468851;Return the name of the target bean in the Spring application context.;@Nullable_	protected String getTargetBeanName() {_		return this.targetBeanName__	};return,the,name,of,the,target,bean,in,the,spring,application,context;nullable,protected,string,get,target,bean,name,return,this,target,bean,name
DelegatingFilterProxy -> @Nullable 	protected WebApplicationContext findWebApplicationContext();1495868221;Return the {@code WebApplicationContext} passed in at construction time, if available._Otherwise, attempt to retrieve a {@code WebApplicationContext} from the_{@code ServletContext} attribute with the {@linkplain #setContextAttribute_configured name} if set. Otherwise look up a {@code WebApplicationContext} under_the well-known "root" application context attribute. The_{@code WebApplicationContext} must have already been loaded and stored in the_{@code ServletContext} before this filter gets initialized (or invoked)._<p>Subclasses may override this method to provide a different_{@code WebApplicationContext} retrieval strategy._@return the {@code WebApplicationContext} for this proxy, or {@code null} if not found_@see #DelegatingFilterProxy(String, WebApplicationContext)_@see #getContextAttribute()_@see WebApplicationContextUtils#getWebApplicationContext(javax.servlet.ServletContext)_@see WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;@Nullable_	protected WebApplicationContext findWebApplicationContext() {_		if (this.webApplicationContext != null) {_			_			if (this.webApplicationContext instanceof ConfigurableApplicationContext) {_				ConfigurableApplicationContext cac = (ConfigurableApplicationContext) this.webApplicationContext__				if (!cac.isActive()) {_					_					cac.refresh()__				}_			}_			return this.webApplicationContext__		}_		String attrName = getContextAttribute()__		if (attrName != null) {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName)__		}_		else {_			return WebApplicationContextUtils.findWebApplicationContext(getServletContext())__		}_	};return,the,code,web,application,context,passed,in,at,construction,time,if,available,otherwise,attempt,to,retrieve,a,code,web,application,context,from,the,code,servlet,context,attribute,with,the,linkplain,set,context,attribute,configured,name,if,set,otherwise,look,up,a,code,web,application,context,under,the,well,known,root,application,context,attribute,the,code,web,application,context,must,have,already,been,loaded,and,stored,in,the,code,servlet,context,before,this,filter,gets,initialized,or,invoked,p,subclasses,may,override,this,method,to,provide,a,different,code,web,application,context,retrieval,strategy,return,the,code,web,application,context,for,this,proxy,or,code,null,if,not,found,see,delegating,filter,proxy,string,web,application,context,see,get,context,attribute,see,web,application,context,utils,get,web,application,context,javax,servlet,servlet,context,see,web,application,context;nullable,protected,web,application,context,find,web,application,context,if,this,web,application,context,null,if,this,web,application,context,instanceof,configurable,application,context,configurable,application,context,cac,configurable,application,context,this,web,application,context,if,cac,is,active,cac,refresh,return,this,web,application,context,string,attr,name,get,context,attribute,if,attr,name,null,return,web,application,context,utils,get,web,application,context,get,servlet,context,attr,name,else,return,web,application,context,utils,find,web,application,context,get,servlet,context
DelegatingFilterProxy -> @Nullable 	protected WebApplicationContext findWebApplicationContext();1496837955;Return the {@code WebApplicationContext} passed in at construction time, if available._Otherwise, attempt to retrieve a {@code WebApplicationContext} from the_{@code ServletContext} attribute with the {@linkplain #setContextAttribute_configured name} if set. Otherwise look up a {@code WebApplicationContext} under_the well-known "root" application context attribute. The_{@code WebApplicationContext} must have already been loaded and stored in the_{@code ServletContext} before this filter gets initialized (or invoked)._<p>Subclasses may override this method to provide a different_{@code WebApplicationContext} retrieval strategy._@return the {@code WebApplicationContext} for this proxy, or {@code null} if not found_@see #DelegatingFilterProxy(String, WebApplicationContext)_@see #getContextAttribute()_@see WebApplicationContextUtils#getWebApplicationContext(javax.servlet.ServletContext)_@see WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;@Nullable_	protected WebApplicationContext findWebApplicationContext() {_		if (this.webApplicationContext != null) {_			_			if (this.webApplicationContext instanceof ConfigurableApplicationContext) {_				ConfigurableApplicationContext cac = (ConfigurableApplicationContext) this.webApplicationContext__				if (!cac.isActive()) {_					_					cac.refresh()__				}_			}_			return this.webApplicationContext__		}_		String attrName = getContextAttribute()__		if (attrName != null) {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName)__		}_		else {_			return WebApplicationContextUtils.findWebApplicationContext(getServletContext())__		}_	};return,the,code,web,application,context,passed,in,at,construction,time,if,available,otherwise,attempt,to,retrieve,a,code,web,application,context,from,the,code,servlet,context,attribute,with,the,linkplain,set,context,attribute,configured,name,if,set,otherwise,look,up,a,code,web,application,context,under,the,well,known,root,application,context,attribute,the,code,web,application,context,must,have,already,been,loaded,and,stored,in,the,code,servlet,context,before,this,filter,gets,initialized,or,invoked,p,subclasses,may,override,this,method,to,provide,a,different,code,web,application,context,retrieval,strategy,return,the,code,web,application,context,for,this,proxy,or,code,null,if,not,found,see,delegating,filter,proxy,string,web,application,context,see,get,context,attribute,see,web,application,context,utils,get,web,application,context,javax,servlet,servlet,context,see,web,application,context;nullable,protected,web,application,context,find,web,application,context,if,this,web,application,context,null,if,this,web,application,context,instanceof,configurable,application,context,configurable,application,context,cac,configurable,application,context,this,web,application,context,if,cac,is,active,cac,refresh,return,this,web,application,context,string,attr,name,get,context,attribute,if,attr,name,null,return,web,application,context,utils,get,web,application,context,get,servlet,context,attr,name,else,return,web,application,context,utils,find,web,application,context,get,servlet,context
DelegatingFilterProxy -> @Nullable 	protected WebApplicationContext findWebApplicationContext();1498780456;Return the {@code WebApplicationContext} passed in at construction time, if available._Otherwise, attempt to retrieve a {@code WebApplicationContext} from the_{@code ServletContext} attribute with the {@linkplain #setContextAttribute_configured name} if set. Otherwise look up a {@code WebApplicationContext} under_the well-known "root" application context attribute. The_{@code WebApplicationContext} must have already been loaded and stored in the_{@code ServletContext} before this filter gets initialized (or invoked)._<p>Subclasses may override this method to provide a different_{@code WebApplicationContext} retrieval strategy._@return the {@code WebApplicationContext} for this proxy, or {@code null} if not found_@see #DelegatingFilterProxy(String, WebApplicationContext)_@see #getContextAttribute()_@see WebApplicationContextUtils#getWebApplicationContext(javax.servlet.ServletContext)_@see WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;@Nullable_	protected WebApplicationContext findWebApplicationContext() {_		if (this.webApplicationContext != null) {_			_			if (this.webApplicationContext instanceof ConfigurableApplicationContext) {_				ConfigurableApplicationContext cac = (ConfigurableApplicationContext) this.webApplicationContext__				if (!cac.isActive()) {_					_					cac.refresh()__				}_			}_			return this.webApplicationContext__		}_		String attrName = getContextAttribute()__		if (attrName != null) {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName)__		}_		else {_			return WebApplicationContextUtils.findWebApplicationContext(getServletContext())__		}_	};return,the,code,web,application,context,passed,in,at,construction,time,if,available,otherwise,attempt,to,retrieve,a,code,web,application,context,from,the,code,servlet,context,attribute,with,the,linkplain,set,context,attribute,configured,name,if,set,otherwise,look,up,a,code,web,application,context,under,the,well,known,root,application,context,attribute,the,code,web,application,context,must,have,already,been,loaded,and,stored,in,the,code,servlet,context,before,this,filter,gets,initialized,or,invoked,p,subclasses,may,override,this,method,to,provide,a,different,code,web,application,context,retrieval,strategy,return,the,code,web,application,context,for,this,proxy,or,code,null,if,not,found,see,delegating,filter,proxy,string,web,application,context,see,get,context,attribute,see,web,application,context,utils,get,web,application,context,javax,servlet,servlet,context,see,web,application,context;nullable,protected,web,application,context,find,web,application,context,if,this,web,application,context,null,if,this,web,application,context,instanceof,configurable,application,context,configurable,application,context,cac,configurable,application,context,this,web,application,context,if,cac,is,active,cac,refresh,return,this,web,application,context,string,attr,name,get,context,attribute,if,attr,name,null,return,web,application,context,utils,get,web,application,context,get,servlet,context,attr,name,else,return,web,application,context,utils,find,web,application,context,get,servlet,context
DelegatingFilterProxy -> @Nullable 	protected WebApplicationContext findWebApplicationContext();1500448076;Return the {@code WebApplicationContext} passed in at construction time, if available._Otherwise, attempt to retrieve a {@code WebApplicationContext} from the_{@code ServletContext} attribute with the {@linkplain #setContextAttribute_configured name} if set. Otherwise look up a {@code WebApplicationContext} under_the well-known "root" application context attribute. The_{@code WebApplicationContext} must have already been loaded and stored in the_{@code ServletContext} before this filter gets initialized (or invoked)._<p>Subclasses may override this method to provide a different_{@code WebApplicationContext} retrieval strategy._@return the {@code WebApplicationContext} for this proxy, or {@code null} if not found_@see #DelegatingFilterProxy(String, WebApplicationContext)_@see #getContextAttribute()_@see WebApplicationContextUtils#getWebApplicationContext(javax.servlet.ServletContext)_@see WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;@Nullable_	protected WebApplicationContext findWebApplicationContext() {_		if (this.webApplicationContext != null) {_			_			if (this.webApplicationContext instanceof ConfigurableApplicationContext) {_				ConfigurableApplicationContext cac = (ConfigurableApplicationContext) this.webApplicationContext__				if (!cac.isActive()) {_					_					cac.refresh()__				}_			}_			return this.webApplicationContext__		}_		String attrName = getContextAttribute()__		if (attrName != null) {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName)__		}_		else {_			return WebApplicationContextUtils.findWebApplicationContext(getServletContext())__		}_	};return,the,code,web,application,context,passed,in,at,construction,time,if,available,otherwise,attempt,to,retrieve,a,code,web,application,context,from,the,code,servlet,context,attribute,with,the,linkplain,set,context,attribute,configured,name,if,set,otherwise,look,up,a,code,web,application,context,under,the,well,known,root,application,context,attribute,the,code,web,application,context,must,have,already,been,loaded,and,stored,in,the,code,servlet,context,before,this,filter,gets,initialized,or,invoked,p,subclasses,may,override,this,method,to,provide,a,different,code,web,application,context,retrieval,strategy,return,the,code,web,application,context,for,this,proxy,or,code,null,if,not,found,see,delegating,filter,proxy,string,web,application,context,see,get,context,attribute,see,web,application,context,utils,get,web,application,context,javax,servlet,servlet,context,see,web,application,context;nullable,protected,web,application,context,find,web,application,context,if,this,web,application,context,null,if,this,web,application,context,instanceof,configurable,application,context,configurable,application,context,cac,configurable,application,context,this,web,application,context,if,cac,is,active,cac,refresh,return,this,web,application,context,string,attr,name,get,context,attribute,if,attr,name,null,return,web,application,context,utils,get,web,application,context,get,servlet,context,attr,name,else,return,web,application,context,utils,find,web,application,context,get,servlet,context
DelegatingFilterProxy -> @Nullable 	protected WebApplicationContext findWebApplicationContext();1506468851;Return the {@code WebApplicationContext} passed in at construction time, if available._Otherwise, attempt to retrieve a {@code WebApplicationContext} from the_{@code ServletContext} attribute with the {@linkplain #setContextAttribute_configured name} if set. Otherwise look up a {@code WebApplicationContext} under_the well-known "root" application context attribute. The_{@code WebApplicationContext} must have already been loaded and stored in the_{@code ServletContext} before this filter gets initialized (or invoked)._<p>Subclasses may override this method to provide a different_{@code WebApplicationContext} retrieval strategy._@return the {@code WebApplicationContext} for this proxy, or {@code null} if not found_@see #DelegatingFilterProxy(String, WebApplicationContext)_@see #getContextAttribute()_@see WebApplicationContextUtils#getWebApplicationContext(javax.servlet.ServletContext)_@see WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;@Nullable_	protected WebApplicationContext findWebApplicationContext() {_		if (this.webApplicationContext != null) {_			_			if (this.webApplicationContext instanceof ConfigurableApplicationContext) {_				ConfigurableApplicationContext cac = (ConfigurableApplicationContext) this.webApplicationContext__				if (!cac.isActive()) {_					_					cac.refresh()__				}_			}_			return this.webApplicationContext__		}_		String attrName = getContextAttribute()__		if (attrName != null) {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName)__		}_		else {_			return WebApplicationContextUtils.findWebApplicationContext(getServletContext())__		}_	};return,the,code,web,application,context,passed,in,at,construction,time,if,available,otherwise,attempt,to,retrieve,a,code,web,application,context,from,the,code,servlet,context,attribute,with,the,linkplain,set,context,attribute,configured,name,if,set,otherwise,look,up,a,code,web,application,context,under,the,well,known,root,application,context,attribute,the,code,web,application,context,must,have,already,been,loaded,and,stored,in,the,code,servlet,context,before,this,filter,gets,initialized,or,invoked,p,subclasses,may,override,this,method,to,provide,a,different,code,web,application,context,retrieval,strategy,return,the,code,web,application,context,for,this,proxy,or,code,null,if,not,found,see,delegating,filter,proxy,string,web,application,context,see,get,context,attribute,see,web,application,context,utils,get,web,application,context,javax,servlet,servlet,context,see,web,application,context;nullable,protected,web,application,context,find,web,application,context,if,this,web,application,context,null,if,this,web,application,context,instanceof,configurable,application,context,configurable,application,context,cac,configurable,application,context,this,web,application,context,if,cac,is,active,cac,refresh,return,this,web,application,context,string,attr,name,get,context,attribute,if,attr,name,null,return,web,application,context,utils,get,web,application,context,get,servlet,context,attr,name,else,return,web,application,context,utils,find,web,application,context,get,servlet,context
DelegatingFilterProxy -> public String getContextAttribute();1328020251;Return the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public String getContextAttribute() {_		return this.contextAttribute__	};return,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,string,get,context,attribute,return,this,context,attribute
DelegatingFilterProxy -> public String getContextAttribute();1356735495;Return the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public String getContextAttribute() {_		return this.contextAttribute__	};return,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,string,get,context,attribute,return,this,context,attribute
DelegatingFilterProxy -> public String getContextAttribute();1357119239;Return the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public String getContextAttribute() {_		return this.contextAttribute__	};return,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,string,get,context,attribute,return,this,context,attribute
DelegatingFilterProxy -> public String getContextAttribute();1368482696;Return the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public String getContextAttribute() {_		return this.contextAttribute__	};return,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,string,get,context,attribute,return,this,context,attribute
DelegatingFilterProxy -> public String getContextAttribute();1375460233;Return the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public String getContextAttribute() {_		return this.contextAttribute__	};return,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,string,get,context,attribute,return,this,context,attribute
DelegatingFilterProxy -> public String getContextAttribute();1427228652;Return the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public String getContextAttribute() {_		return this.contextAttribute__	};return,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,string,get,context,attribute,return,this,context,attribute
DelegatingFilterProxy -> public String getContextAttribute();1436816047;Return the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public String getContextAttribute() {_		return this.contextAttribute__	};return,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,string,get,context,attribute,return,this,context,attribute
DelegatingFilterProxy -> public String getContextAttribute();1495868221;Return the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public String getContextAttribute() {_		return this.contextAttribute__	};return,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,string,get,context,attribute,return,this,context,attribute
DelegatingFilterProxy -> protected void destroyDelegate(Filter delegate);1328020251;Destroy the Filter delegate._Default implementation simply calls {@code Filter.destroy} on it._@param delegate the Filter delegate (never {@code null})_@see #isTargetFilterLifecycle()_@see javax.servlet.Filter#destroy();protected void destroyDelegate(Filter delegate) {_		if (isTargetFilterLifecycle()) {_			delegate.destroy()__		}_	};destroy,the,filter,delegate,default,implementation,simply,calls,code,filter,destroy,on,it,param,delegate,the,filter,delegate,never,code,null,see,is,target,filter,lifecycle,see,javax,servlet,filter,destroy;protected,void,destroy,delegate,filter,delegate,if,is,target,filter,lifecycle,delegate,destroy
DelegatingFilterProxy -> protected void destroyDelegate(Filter delegate);1356735495;Destroy the Filter delegate._Default implementation simply calls {@code Filter.destroy} on it._@param delegate the Filter delegate (never {@code null})_@see #isTargetFilterLifecycle()_@see javax.servlet.Filter#destroy();protected void destroyDelegate(Filter delegate) {_		if (isTargetFilterLifecycle()) {_			delegate.destroy()__		}_	};destroy,the,filter,delegate,default,implementation,simply,calls,code,filter,destroy,on,it,param,delegate,the,filter,delegate,never,code,null,see,is,target,filter,lifecycle,see,javax,servlet,filter,destroy;protected,void,destroy,delegate,filter,delegate,if,is,target,filter,lifecycle,delegate,destroy
DelegatingFilterProxy -> protected void destroyDelegate(Filter delegate);1357119239;Destroy the Filter delegate._Default implementation simply calls {@code Filter.destroy} on it._@param delegate the Filter delegate (never {@code null})_@see #isTargetFilterLifecycle()_@see javax.servlet.Filter#destroy();protected void destroyDelegate(Filter delegate) {_		if (isTargetFilterLifecycle()) {_			delegate.destroy()__		}_	};destroy,the,filter,delegate,default,implementation,simply,calls,code,filter,destroy,on,it,param,delegate,the,filter,delegate,never,code,null,see,is,target,filter,lifecycle,see,javax,servlet,filter,destroy;protected,void,destroy,delegate,filter,delegate,if,is,target,filter,lifecycle,delegate,destroy
DelegatingFilterProxy -> protected void destroyDelegate(Filter delegate);1368482696;Destroy the Filter delegate._Default implementation simply calls {@code Filter.destroy} on it._@param delegate the Filter delegate (never {@code null})_@see #isTargetFilterLifecycle()_@see javax.servlet.Filter#destroy();protected void destroyDelegate(Filter delegate) {_		if (isTargetFilterLifecycle()) {_			delegate.destroy()__		}_	};destroy,the,filter,delegate,default,implementation,simply,calls,code,filter,destroy,on,it,param,delegate,the,filter,delegate,never,code,null,see,is,target,filter,lifecycle,see,javax,servlet,filter,destroy;protected,void,destroy,delegate,filter,delegate,if,is,target,filter,lifecycle,delegate,destroy
DelegatingFilterProxy -> protected void destroyDelegate(Filter delegate);1375460233;Destroy the Filter delegate._Default implementation simply calls {@code Filter.destroy} on it._@param delegate the Filter delegate (never {@code null})_@see #isTargetFilterLifecycle()_@see javax.servlet.Filter#destroy();protected void destroyDelegate(Filter delegate) {_		if (isTargetFilterLifecycle()) {_			delegate.destroy()__		}_	};destroy,the,filter,delegate,default,implementation,simply,calls,code,filter,destroy,on,it,param,delegate,the,filter,delegate,never,code,null,see,is,target,filter,lifecycle,see,javax,servlet,filter,destroy;protected,void,destroy,delegate,filter,delegate,if,is,target,filter,lifecycle,delegate,destroy
DelegatingFilterProxy -> protected void destroyDelegate(Filter delegate);1427228652;Destroy the Filter delegate._Default implementation simply calls {@code Filter.destroy} on it._@param delegate the Filter delegate (never {@code null})_@see #isTargetFilterLifecycle()_@see javax.servlet.Filter#destroy();protected void destroyDelegate(Filter delegate) {_		if (isTargetFilterLifecycle()) {_			delegate.destroy()__		}_	};destroy,the,filter,delegate,default,implementation,simply,calls,code,filter,destroy,on,it,param,delegate,the,filter,delegate,never,code,null,see,is,target,filter,lifecycle,see,javax,servlet,filter,destroy;protected,void,destroy,delegate,filter,delegate,if,is,target,filter,lifecycle,delegate,destroy
DelegatingFilterProxy -> protected void destroyDelegate(Filter delegate);1436816047;Destroy the Filter delegate._Default implementation simply calls {@code Filter.destroy} on it._@param delegate the Filter delegate (never {@code null})_@see #isTargetFilterLifecycle()_@see javax.servlet.Filter#destroy();protected void destroyDelegate(Filter delegate) {_		if (isTargetFilterLifecycle()) {_			delegate.destroy()__		}_	};destroy,the,filter,delegate,default,implementation,simply,calls,code,filter,destroy,on,it,param,delegate,the,filter,delegate,never,code,null,see,is,target,filter,lifecycle,see,javax,servlet,filter,destroy;protected,void,destroy,delegate,filter,delegate,if,is,target,filter,lifecycle,delegate,destroy
DelegatingFilterProxy -> protected void destroyDelegate(Filter delegate);1495868221;Destroy the Filter delegate._Default implementation simply calls {@code Filter.destroy} on it._@param delegate the Filter delegate (never {@code null})_@see #isTargetFilterLifecycle()_@see javax.servlet.Filter#destroy();protected void destroyDelegate(Filter delegate) {_		if (isTargetFilterLifecycle()) {_			delegate.destroy()__		}_	};destroy,the,filter,delegate,default,implementation,simply,calls,code,filter,destroy,on,it,param,delegate,the,filter,delegate,never,code,null,see,is,target,filter,lifecycle,see,javax,servlet,filter,destroy;protected,void,destroy,delegate,filter,delegate,if,is,target,filter,lifecycle,delegate,destroy
DelegatingFilterProxy -> protected void destroyDelegate(Filter delegate);1496837955;Destroy the Filter delegate._Default implementation simply calls {@code Filter.destroy} on it._@param delegate the Filter delegate (never {@code null})_@see #isTargetFilterLifecycle()_@see javax.servlet.Filter#destroy();protected void destroyDelegate(Filter delegate) {_		if (isTargetFilterLifecycle()) {_			delegate.destroy()__		}_	};destroy,the,filter,delegate,default,implementation,simply,calls,code,filter,destroy,on,it,param,delegate,the,filter,delegate,never,code,null,see,is,target,filter,lifecycle,see,javax,servlet,filter,destroy;protected,void,destroy,delegate,filter,delegate,if,is,target,filter,lifecycle,delegate,destroy
DelegatingFilterProxy -> protected void destroyDelegate(Filter delegate);1498780456;Destroy the Filter delegate._Default implementation simply calls {@code Filter.destroy} on it._@param delegate the Filter delegate (never {@code null})_@see #isTargetFilterLifecycle()_@see javax.servlet.Filter#destroy();protected void destroyDelegate(Filter delegate) {_		if (isTargetFilterLifecycle()) {_			delegate.destroy()__		}_	};destroy,the,filter,delegate,default,implementation,simply,calls,code,filter,destroy,on,it,param,delegate,the,filter,delegate,never,code,null,see,is,target,filter,lifecycle,see,javax,servlet,filter,destroy;protected,void,destroy,delegate,filter,delegate,if,is,target,filter,lifecycle,delegate,destroy
DelegatingFilterProxy -> protected void destroyDelegate(Filter delegate);1500448076;Destroy the Filter delegate._Default implementation simply calls {@code Filter.destroy} on it._@param delegate the Filter delegate (never {@code null})_@see #isTargetFilterLifecycle()_@see javax.servlet.Filter#destroy();protected void destroyDelegate(Filter delegate) {_		if (isTargetFilterLifecycle()) {_			delegate.destroy()__		}_	};destroy,the,filter,delegate,default,implementation,simply,calls,code,filter,destroy,on,it,param,delegate,the,filter,delegate,never,code,null,see,is,target,filter,lifecycle,see,javax,servlet,filter,destroy;protected,void,destroy,delegate,filter,delegate,if,is,target,filter,lifecycle,delegate,destroy
DelegatingFilterProxy -> protected void destroyDelegate(Filter delegate);1506468851;Destroy the Filter delegate._Default implementation simply calls {@code Filter.destroy} on it._@param delegate the Filter delegate (never {@code null})_@see #isTargetFilterLifecycle()_@see javax.servlet.Filter#destroy();protected void destroyDelegate(Filter delegate) {_		if (isTargetFilterLifecycle()) {_			delegate.destroy()__		}_	};destroy,the,filter,delegate,default,implementation,simply,calls,code,filter,destroy,on,it,param,delegate,the,filter,delegate,never,code,null,see,is,target,filter,lifecycle,see,javax,servlet,filter,destroy;protected,void,destroy,delegate,filter,delegate,if,is,target,filter,lifecycle,delegate,destroy
DelegatingFilterProxy -> public void setTargetBeanName(String targetBeanName);1328020251;Set the name of the target bean in the Spring application context._The target bean must implement the standard Servlet 2.3 Filter interface._<p>By default, the {@code filter-name} as specified for the_DelegatingFilterProxy in {@code web.xml} will be used.;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = targetBeanName__	};set,the,name,of,the,target,bean,in,the,spring,application,context,the,target,bean,must,implement,the,standard,servlet,2,3,filter,interface,p,by,default,the,code,filter,name,as,specified,for,the,delegating,filter,proxy,in,code,web,xml,will,be,used;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,target,bean,name
DelegatingFilterProxy -> public void setTargetBeanName(String targetBeanName);1356735495;Set the name of the target bean in the Spring application context._The target bean must implement the standard Servlet 2.3 Filter interface._<p>By default, the {@code filter-name} as specified for the_DelegatingFilterProxy in {@code web.xml} will be used.;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = targetBeanName__	};set,the,name,of,the,target,bean,in,the,spring,application,context,the,target,bean,must,implement,the,standard,servlet,2,3,filter,interface,p,by,default,the,code,filter,name,as,specified,for,the,delegating,filter,proxy,in,code,web,xml,will,be,used;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,target,bean,name
DelegatingFilterProxy -> public void setTargetBeanName(String targetBeanName);1357119239;Set the name of the target bean in the Spring application context._The target bean must implement the standard Servlet 2.3 Filter interface._<p>By default, the {@code filter-name} as specified for the_DelegatingFilterProxy in {@code web.xml} will be used.;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = targetBeanName__	};set,the,name,of,the,target,bean,in,the,spring,application,context,the,target,bean,must,implement,the,standard,servlet,2,3,filter,interface,p,by,default,the,code,filter,name,as,specified,for,the,delegating,filter,proxy,in,code,web,xml,will,be,used;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,target,bean,name
DelegatingFilterProxy -> public void setTargetBeanName(String targetBeanName);1368482696;Set the name of the target bean in the Spring application context._The target bean must implement the standard Servlet 2.3 Filter interface._<p>By default, the {@code filter-name} as specified for the_DelegatingFilterProxy in {@code web.xml} will be used.;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = targetBeanName__	};set,the,name,of,the,target,bean,in,the,spring,application,context,the,target,bean,must,implement,the,standard,servlet,2,3,filter,interface,p,by,default,the,code,filter,name,as,specified,for,the,delegating,filter,proxy,in,code,web,xml,will,be,used;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,target,bean,name
DelegatingFilterProxy -> public void setTargetBeanName(String targetBeanName);1375460233;Set the name of the target bean in the Spring application context._The target bean must implement the standard Servlet 2.3 Filter interface._<p>By default, the {@code filter-name} as specified for the_DelegatingFilterProxy in {@code web.xml} will be used.;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = targetBeanName__	};set,the,name,of,the,target,bean,in,the,spring,application,context,the,target,bean,must,implement,the,standard,servlet,2,3,filter,interface,p,by,default,the,code,filter,name,as,specified,for,the,delegating,filter,proxy,in,code,web,xml,will,be,used;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,target,bean,name
DelegatingFilterProxy -> public void setTargetBeanName(String targetBeanName);1427228652;Set the name of the target bean in the Spring application context._The target bean must implement the standard Servlet Filter interface._<p>By default, the {@code filter-name} as specified for the_DelegatingFilterProxy in {@code web.xml} will be used.;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = targetBeanName__	};set,the,name,of,the,target,bean,in,the,spring,application,context,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,by,default,the,code,filter,name,as,specified,for,the,delegating,filter,proxy,in,code,web,xml,will,be,used;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,target,bean,name
DelegatingFilterProxy -> public void setTargetBeanName(String targetBeanName);1436816047;Set the name of the target bean in the Spring application context._The target bean must implement the standard Servlet Filter interface._<p>By default, the {@code filter-name} as specified for the_DelegatingFilterProxy in {@code web.xml} will be used.;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = targetBeanName__	};set,the,name,of,the,target,bean,in,the,spring,application,context,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,by,default,the,code,filter,name,as,specified,for,the,delegating,filter,proxy,in,code,web,xml,will,be,used;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,target,bean,name
DelegatingFilterProxy -> public void setTargetBeanName(String targetBeanName);1495868221;Set the name of the target bean in the Spring application context._The target bean must implement the standard Servlet Filter interface._<p>By default, the {@code filter-name} as specified for the_DelegatingFilterProxy in {@code web.xml} will be used.;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = targetBeanName__	};set,the,name,of,the,target,bean,in,the,spring,application,context,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,by,default,the,code,filter,name,as,specified,for,the,delegating,filter,proxy,in,code,web,xml,will,be,used;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,target,bean,name
DelegatingFilterProxy -> public void setTargetBeanName(String targetBeanName);1496837955;Set the name of the target bean in the Spring application context._The target bean must implement the standard Servlet Filter interface._<p>By default, the {@code filter-name} as specified for the_DelegatingFilterProxy in {@code web.xml} will be used.;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = targetBeanName__	};set,the,name,of,the,target,bean,in,the,spring,application,context,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,by,default,the,code,filter,name,as,specified,for,the,delegating,filter,proxy,in,code,web,xml,will,be,used;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,target,bean,name
DelegatingFilterProxy -> public void setTargetBeanName(String targetBeanName);1498780456;Set the name of the target bean in the Spring application context._The target bean must implement the standard Servlet Filter interface._<p>By default, the {@code filter-name} as specified for the_DelegatingFilterProxy in {@code web.xml} will be used.;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = targetBeanName__	};set,the,name,of,the,target,bean,in,the,spring,application,context,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,by,default,the,code,filter,name,as,specified,for,the,delegating,filter,proxy,in,code,web,xml,will,be,used;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,target,bean,name
DelegatingFilterProxy -> protected boolean isTargetFilterLifecycle();1328020251;Return whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean.;protected boolean isTargetFilterLifecycle() {_		return this.targetFilterLifecycle__	};return,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean;protected,boolean,is,target,filter,lifecycle,return,this,target,filter,lifecycle
DelegatingFilterProxy -> protected boolean isTargetFilterLifecycle();1356735495;Return whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean.;protected boolean isTargetFilterLifecycle() {_		return this.targetFilterLifecycle__	};return,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean;protected,boolean,is,target,filter,lifecycle,return,this,target,filter,lifecycle
DelegatingFilterProxy -> protected boolean isTargetFilterLifecycle();1357119239;Return whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean.;protected boolean isTargetFilterLifecycle() {_		return this.targetFilterLifecycle__	};return,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean;protected,boolean,is,target,filter,lifecycle,return,this,target,filter,lifecycle
DelegatingFilterProxy -> protected boolean isTargetFilterLifecycle();1368482696;Return whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean.;protected boolean isTargetFilterLifecycle() {_		return this.targetFilterLifecycle__	};return,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean;protected,boolean,is,target,filter,lifecycle,return,this,target,filter,lifecycle
DelegatingFilterProxy -> protected boolean isTargetFilterLifecycle();1375460233;Return whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean.;protected boolean isTargetFilterLifecycle() {_		return this.targetFilterLifecycle__	};return,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean;protected,boolean,is,target,filter,lifecycle,return,this,target,filter,lifecycle
DelegatingFilterProxy -> protected boolean isTargetFilterLifecycle();1427228652;Return whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean.;protected boolean isTargetFilterLifecycle() {_		return this.targetFilterLifecycle__	};return,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean;protected,boolean,is,target,filter,lifecycle,return,this,target,filter,lifecycle
DelegatingFilterProxy -> protected boolean isTargetFilterLifecycle();1436816047;Return whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean.;protected boolean isTargetFilterLifecycle() {_		return this.targetFilterLifecycle__	};return,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean;protected,boolean,is,target,filter,lifecycle,return,this,target,filter,lifecycle
DelegatingFilterProxy -> protected boolean isTargetFilterLifecycle();1495868221;Return whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean.;protected boolean isTargetFilterLifecycle() {_		return this.targetFilterLifecycle__	};return,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean;protected,boolean,is,target,filter,lifecycle,return,this,target,filter,lifecycle
DelegatingFilterProxy -> protected boolean isTargetFilterLifecycle();1496837955;Return whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean.;protected boolean isTargetFilterLifecycle() {_		return this.targetFilterLifecycle__	};return,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean;protected,boolean,is,target,filter,lifecycle,return,this,target,filter,lifecycle
DelegatingFilterProxy -> protected boolean isTargetFilterLifecycle();1498780456;Return whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean.;protected boolean isTargetFilterLifecycle() {_		return this.targetFilterLifecycle__	};return,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean;protected,boolean,is,target,filter,lifecycle,return,this,target,filter,lifecycle
DelegatingFilterProxy -> protected boolean isTargetFilterLifecycle();1500448076;Return whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean.;protected boolean isTargetFilterLifecycle() {_		return this.targetFilterLifecycle__	};return,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean;protected,boolean,is,target,filter,lifecycle,return,this,target,filter,lifecycle
DelegatingFilterProxy -> protected boolean isTargetFilterLifecycle();1506468851;Return whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean.;protected boolean isTargetFilterLifecycle() {_		return this.targetFilterLifecycle__	};return,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean;protected,boolean,is,target,filter,lifecycle,return,this,target,filter,lifecycle
DelegatingFilterProxy -> @Nullable 	public String getContextAttribute();1496837955;Return the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;@Nullable_	public String getContextAttribute() {_		return this.contextAttribute__	};return,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;nullable,public,string,get,context,attribute,return,this,context,attribute
DelegatingFilterProxy -> @Nullable 	public String getContextAttribute();1498780456;Return the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;@Nullable_	public String getContextAttribute() {_		return this.contextAttribute__	};return,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;nullable,public,string,get,context,attribute,return,this,context,attribute
DelegatingFilterProxy -> @Nullable 	public String getContextAttribute();1500448076;Return the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;@Nullable_	public String getContextAttribute() {_		return this.contextAttribute__	};return,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;nullable,public,string,get,context,attribute,return,this,context,attribute
DelegatingFilterProxy -> @Nullable 	public String getContextAttribute();1506468851;Return the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;@Nullable_	public String getContextAttribute() {_		return this.contextAttribute__	};return,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;nullable,public,string,get,context,attribute,return,this,context,attribute
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName);1328020251;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the Spring {@code WebApplicationContext} found in the {@code ServletContext}_(either the 'root' application context or the context named by_{@link #setContextAttribute})._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter._@param targetBeanName name of the target filter bean to look up in the Spring_application context (must not be {@code null})._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName) {_		this(targetBeanName, null)__	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,spring,code,web,application,context,found,in,the,code,servlet,context,either,the,root,application,context,or,the,context,named,by,link,set,context,attribute,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,param,target,bean,name,name,of,the,target,filter,bean,to,look,up,in,the,spring,application,context,must,not,be,code,null,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,this,target,bean,name,null
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName);1356735495;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the Spring {@code WebApplicationContext} found in the {@code ServletContext}_(either the 'root' application context or the context named by_{@link #setContextAttribute})._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter._@param targetBeanName name of the target filter bean to look up in the Spring_application context (must not be {@code null})._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName) {_		this(targetBeanName, null)__	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,spring,code,web,application,context,found,in,the,code,servlet,context,either,the,root,application,context,or,the,context,named,by,link,set,context,attribute,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,param,target,bean,name,name,of,the,target,filter,bean,to,look,up,in,the,spring,application,context,must,not,be,code,null,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,this,target,bean,name,null
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName);1357119239;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the Spring {@code WebApplicationContext} found in the {@code ServletContext}_(either the 'root' application context or the context named by_{@link #setContextAttribute})._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter._@param targetBeanName name of the target filter bean to look up in the Spring_application context (must not be {@code null})._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName) {_		this(targetBeanName, null)__	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,spring,code,web,application,context,found,in,the,code,servlet,context,either,the,root,application,context,or,the,context,named,by,link,set,context,attribute,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,param,target,bean,name,name,of,the,target,filter,bean,to,look,up,in,the,spring,application,context,must,not,be,code,null,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,this,target,bean,name,null
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName);1368482696;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the Spring {@code WebApplicationContext} found in the {@code ServletContext}_(either the 'root' application context or the context named by_{@link #setContextAttribute})._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter._@param targetBeanName name of the target filter bean to look up in the Spring_application context (must not be {@code null})._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName) {_		this(targetBeanName, null)__	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,spring,code,web,application,context,found,in,the,code,servlet,context,either,the,root,application,context,or,the,context,named,by,link,set,context,attribute,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,param,target,bean,name,name,of,the,target,filter,bean,to,look,up,in,the,spring,application,context,must,not,be,code,null,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,this,target,bean,name,null
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName);1375460233;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the Spring {@code WebApplicationContext} found in the {@code ServletContext}_(either the 'root' application context or the context named by_{@link #setContextAttribute})._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter._@param targetBeanName name of the target filter bean to look up in the Spring_application context (must not be {@code null})._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName) {_		this(targetBeanName, null)__	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,spring,code,web,application,context,found,in,the,code,servlet,context,either,the,root,application,context,or,the,context,named,by,link,set,context,attribute,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,param,target,bean,name,name,of,the,target,filter,bean,to,look,up,in,the,spring,application,context,must,not,be,code,null,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,this,target,bean,name,null
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName);1427228652;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the Spring {@code WebApplicationContext} found in the {@code ServletContext}_(either the 'root' application context or the context named by_{@link #setContextAttribute})._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter._@param targetBeanName name of the target filter bean to look up in the Spring_application context (must not be {@code null})._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName) {_		this(targetBeanName, null)__	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,spring,code,web,application,context,found,in,the,code,servlet,context,either,the,root,application,context,or,the,context,named,by,link,set,context,attribute,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,param,target,bean,name,name,of,the,target,filter,bean,to,look,up,in,the,spring,application,context,must,not,be,code,null,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,this,target,bean,name,null
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName);1436816047;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the Spring {@code WebApplicationContext} found in the {@code ServletContext}_(either the 'root' application context or the context named by_{@link #setContextAttribute})._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter._@param targetBeanName name of the target filter bean to look up in the Spring_application context (must not be {@code null})._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName) {_		this(targetBeanName, null)__	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,spring,code,web,application,context,found,in,the,code,servlet,context,either,the,root,application,context,or,the,context,named,by,link,set,context,attribute,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,param,target,bean,name,name,of,the,target,filter,bean,to,look,up,in,the,spring,application,context,must,not,be,code,null,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,this,target,bean,name,null
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName);1495868221;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the Spring {@code WebApplicationContext} found in the {@code ServletContext}_(either the 'root' application context or the context named by_{@link #setContextAttribute})._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter._@param targetBeanName name of the target filter bean to look up in the Spring_application context (must not be {@code null})._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName) {_		this(targetBeanName, null)__	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,spring,code,web,application,context,found,in,the,code,servlet,context,either,the,root,application,context,or,the,context,named,by,link,set,context,attribute,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,param,target,bean,name,name,of,the,target,filter,bean,to,look,up,in,the,spring,application,context,must,not,be,code,null,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,this,target,bean,name,null
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName);1496837955;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the Spring {@code WebApplicationContext} found in the {@code ServletContext}_(either the 'root' application context or the context named by_{@link #setContextAttribute})._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter._@param targetBeanName name of the target filter bean to look up in the Spring_application context (must not be {@code null})._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName) {_		this(targetBeanName, null)__	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,spring,code,web,application,context,found,in,the,code,servlet,context,either,the,root,application,context,or,the,context,named,by,link,set,context,attribute,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,param,target,bean,name,name,of,the,target,filter,bean,to,look,up,in,the,spring,application,context,must,not,be,code,null,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,this,target,bean,name,null
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName);1498780456;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the Spring {@code WebApplicationContext} found in the {@code ServletContext}_(either the 'root' application context or the context named by_{@link #setContextAttribute})._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter._@param targetBeanName name of the target filter bean to look up in the Spring_application context (must not be {@code null})._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName) {_		this(targetBeanName, null)__	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,spring,code,web,application,context,found,in,the,code,servlet,context,either,the,root,application,context,or,the,context,named,by,link,set,context,attribute,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,param,target,bean,name,name,of,the,target,filter,bean,to,look,up,in,the,spring,application,context,must,not,be,code,null,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,this,target,bean,name,null
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName);1500448076;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the Spring {@code WebApplicationContext} found in the {@code ServletContext}_(either the 'root' application context or the context named by_{@link #setContextAttribute})._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter._@param targetBeanName name of the target filter bean to look up in the Spring_application context (must not be {@code null})._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName) {_		this(targetBeanName, null)__	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,spring,code,web,application,context,found,in,the,code,servlet,context,either,the,root,application,context,or,the,context,named,by,link,set,context,attribute,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,param,target,bean,name,name,of,the,target,filter,bean,to,look,up,in,the,spring,application,context,must,not,be,code,null,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,this,target,bean,name,null
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName);1506468851;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the Spring {@code WebApplicationContext} found in the {@code ServletContext}_(either the 'root' application context or the context named by_{@link #setContextAttribute})._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter._@param targetBeanName name of the target filter bean to look up in the Spring_application context (must not be {@code null})._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName) {_		this(targetBeanName, null)__	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,spring,code,web,application,context,found,in,the,code,servlet,context,either,the,root,application,context,or,the,context,named,by,link,set,context,attribute,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,param,target,bean,name,name,of,the,target,filter,bean,to,look,up,in,the,spring,application,context,must,not,be,code,null,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,this,target,bean,name,null
DelegatingFilterProxy -> protected Filter initDelegate(WebApplicationContext wac) throws ServletException;1328020251;Initialize the Filter delegate, defined as bean the given Spring_application context._<p>The default implementation fetches the bean from the application context_and calls the standard {@code Filter.init} method on it, passing_in the FilterConfig of this Filter proxy._@param wac the root application context_@return the initialized delegate Filter_@throws ServletException if thrown by the Filter_@see #getTargetBeanName()_@see #isTargetFilterLifecycle()_@see #getFilterConfig()_@see javax.servlet.Filter#init(javax.servlet.FilterConfig);protected Filter initDelegate(WebApplicationContext wac) throws ServletException {_		Filter delegate = wac.getBean(getTargetBeanName(), Filter.class)__		if (isTargetFilterLifecycle()) {_			delegate.init(getFilterConfig())__		}_		return delegate__	};initialize,the,filter,delegate,defined,as,bean,the,given,spring,application,context,p,the,default,implementation,fetches,the,bean,from,the,application,context,and,calls,the,standard,code,filter,init,method,on,it,passing,in,the,filter,config,of,this,filter,proxy,param,wac,the,root,application,context,return,the,initialized,delegate,filter,throws,servlet,exception,if,thrown,by,the,filter,see,get,target,bean,name,see,is,target,filter,lifecycle,see,get,filter,config,see,javax,servlet,filter,init,javax,servlet,filter,config;protected,filter,init,delegate,web,application,context,wac,throws,servlet,exception,filter,delegate,wac,get,bean,get,target,bean,name,filter,class,if,is,target,filter,lifecycle,delegate,init,get,filter,config,return,delegate
DelegatingFilterProxy -> protected Filter initDelegate(WebApplicationContext wac) throws ServletException;1356735495;Initialize the Filter delegate, defined as bean the given Spring_application context._<p>The default implementation fetches the bean from the application context_and calls the standard {@code Filter.init} method on it, passing_in the FilterConfig of this Filter proxy._@param wac the root application context_@return the initialized delegate Filter_@throws ServletException if thrown by the Filter_@see #getTargetBeanName()_@see #isTargetFilterLifecycle()_@see #getFilterConfig()_@see javax.servlet.Filter#init(javax.servlet.FilterConfig);protected Filter initDelegate(WebApplicationContext wac) throws ServletException {_		Filter delegate = wac.getBean(getTargetBeanName(), Filter.class)__		if (isTargetFilterLifecycle()) {_			delegate.init(getFilterConfig())__		}_		return delegate__	};initialize,the,filter,delegate,defined,as,bean,the,given,spring,application,context,p,the,default,implementation,fetches,the,bean,from,the,application,context,and,calls,the,standard,code,filter,init,method,on,it,passing,in,the,filter,config,of,this,filter,proxy,param,wac,the,root,application,context,return,the,initialized,delegate,filter,throws,servlet,exception,if,thrown,by,the,filter,see,get,target,bean,name,see,is,target,filter,lifecycle,see,get,filter,config,see,javax,servlet,filter,init,javax,servlet,filter,config;protected,filter,init,delegate,web,application,context,wac,throws,servlet,exception,filter,delegate,wac,get,bean,get,target,bean,name,filter,class,if,is,target,filter,lifecycle,delegate,init,get,filter,config,return,delegate
DelegatingFilterProxy -> protected Filter initDelegate(WebApplicationContext wac) throws ServletException;1357119239;Initialize the Filter delegate, defined as bean the given Spring_application context._<p>The default implementation fetches the bean from the application context_and calls the standard {@code Filter.init} method on it, passing_in the FilterConfig of this Filter proxy._@param wac the root application context_@return the initialized delegate Filter_@throws ServletException if thrown by the Filter_@see #getTargetBeanName()_@see #isTargetFilterLifecycle()_@see #getFilterConfig()_@see javax.servlet.Filter#init(javax.servlet.FilterConfig);protected Filter initDelegate(WebApplicationContext wac) throws ServletException {_		Filter delegate = wac.getBean(getTargetBeanName(), Filter.class)__		if (isTargetFilterLifecycle()) {_			delegate.init(getFilterConfig())__		}_		return delegate__	};initialize,the,filter,delegate,defined,as,bean,the,given,spring,application,context,p,the,default,implementation,fetches,the,bean,from,the,application,context,and,calls,the,standard,code,filter,init,method,on,it,passing,in,the,filter,config,of,this,filter,proxy,param,wac,the,root,application,context,return,the,initialized,delegate,filter,throws,servlet,exception,if,thrown,by,the,filter,see,get,target,bean,name,see,is,target,filter,lifecycle,see,get,filter,config,see,javax,servlet,filter,init,javax,servlet,filter,config;protected,filter,init,delegate,web,application,context,wac,throws,servlet,exception,filter,delegate,wac,get,bean,get,target,bean,name,filter,class,if,is,target,filter,lifecycle,delegate,init,get,filter,config,return,delegate
DelegatingFilterProxy -> protected Filter initDelegate(WebApplicationContext wac) throws ServletException;1368482696;Initialize the Filter delegate, defined as bean the given Spring_application context._<p>The default implementation fetches the bean from the application context_and calls the standard {@code Filter.init} method on it, passing_in the FilterConfig of this Filter proxy._@param wac the root application context_@return the initialized delegate Filter_@throws ServletException if thrown by the Filter_@see #getTargetBeanName()_@see #isTargetFilterLifecycle()_@see #getFilterConfig()_@see javax.servlet.Filter#init(javax.servlet.FilterConfig);protected Filter initDelegate(WebApplicationContext wac) throws ServletException {_		Filter delegate = wac.getBean(getTargetBeanName(), Filter.class)__		if (isTargetFilterLifecycle()) {_			delegate.init(getFilterConfig())__		}_		return delegate__	};initialize,the,filter,delegate,defined,as,bean,the,given,spring,application,context,p,the,default,implementation,fetches,the,bean,from,the,application,context,and,calls,the,standard,code,filter,init,method,on,it,passing,in,the,filter,config,of,this,filter,proxy,param,wac,the,root,application,context,return,the,initialized,delegate,filter,throws,servlet,exception,if,thrown,by,the,filter,see,get,target,bean,name,see,is,target,filter,lifecycle,see,get,filter,config,see,javax,servlet,filter,init,javax,servlet,filter,config;protected,filter,init,delegate,web,application,context,wac,throws,servlet,exception,filter,delegate,wac,get,bean,get,target,bean,name,filter,class,if,is,target,filter,lifecycle,delegate,init,get,filter,config,return,delegate
DelegatingFilterProxy -> protected Filter initDelegate(WebApplicationContext wac) throws ServletException;1375460233;Initialize the Filter delegate, defined as bean the given Spring_application context._<p>The default implementation fetches the bean from the application context_and calls the standard {@code Filter.init} method on it, passing_in the FilterConfig of this Filter proxy._@param wac the root application context_@return the initialized delegate Filter_@throws ServletException if thrown by the Filter_@see #getTargetBeanName()_@see #isTargetFilterLifecycle()_@see #getFilterConfig()_@see javax.servlet.Filter#init(javax.servlet.FilterConfig);protected Filter initDelegate(WebApplicationContext wac) throws ServletException {_		Filter delegate = wac.getBean(getTargetBeanName(), Filter.class)__		if (isTargetFilterLifecycle()) {_			delegate.init(getFilterConfig())__		}_		return delegate__	};initialize,the,filter,delegate,defined,as,bean,the,given,spring,application,context,p,the,default,implementation,fetches,the,bean,from,the,application,context,and,calls,the,standard,code,filter,init,method,on,it,passing,in,the,filter,config,of,this,filter,proxy,param,wac,the,root,application,context,return,the,initialized,delegate,filter,throws,servlet,exception,if,thrown,by,the,filter,see,get,target,bean,name,see,is,target,filter,lifecycle,see,get,filter,config,see,javax,servlet,filter,init,javax,servlet,filter,config;protected,filter,init,delegate,web,application,context,wac,throws,servlet,exception,filter,delegate,wac,get,bean,get,target,bean,name,filter,class,if,is,target,filter,lifecycle,delegate,init,get,filter,config,return,delegate
DelegatingFilterProxy -> protected Filter initDelegate(WebApplicationContext wac) throws ServletException;1427228652;Initialize the Filter delegate, defined as bean the given Spring_application context._<p>The default implementation fetches the bean from the application context_and calls the standard {@code Filter.init} method on it, passing_in the FilterConfig of this Filter proxy._@param wac the root application context_@return the initialized delegate Filter_@throws ServletException if thrown by the Filter_@see #getTargetBeanName()_@see #isTargetFilterLifecycle()_@see #getFilterConfig()_@see javax.servlet.Filter#init(javax.servlet.FilterConfig);protected Filter initDelegate(WebApplicationContext wac) throws ServletException {_		Filter delegate = wac.getBean(getTargetBeanName(), Filter.class)__		if (isTargetFilterLifecycle()) {_			delegate.init(getFilterConfig())__		}_		return delegate__	};initialize,the,filter,delegate,defined,as,bean,the,given,spring,application,context,p,the,default,implementation,fetches,the,bean,from,the,application,context,and,calls,the,standard,code,filter,init,method,on,it,passing,in,the,filter,config,of,this,filter,proxy,param,wac,the,root,application,context,return,the,initialized,delegate,filter,throws,servlet,exception,if,thrown,by,the,filter,see,get,target,bean,name,see,is,target,filter,lifecycle,see,get,filter,config,see,javax,servlet,filter,init,javax,servlet,filter,config;protected,filter,init,delegate,web,application,context,wac,throws,servlet,exception,filter,delegate,wac,get,bean,get,target,bean,name,filter,class,if,is,target,filter,lifecycle,delegate,init,get,filter,config,return,delegate
DelegatingFilterProxy -> protected Filter initDelegate(WebApplicationContext wac) throws ServletException;1436816047;Initialize the Filter delegate, defined as bean the given Spring_application context._<p>The default implementation fetches the bean from the application context_and calls the standard {@code Filter.init} method on it, passing_in the FilterConfig of this Filter proxy._@param wac the root application context_@return the initialized delegate Filter_@throws ServletException if thrown by the Filter_@see #getTargetBeanName()_@see #isTargetFilterLifecycle()_@see #getFilterConfig()_@see javax.servlet.Filter#init(javax.servlet.FilterConfig);protected Filter initDelegate(WebApplicationContext wac) throws ServletException {_		Filter delegate = wac.getBean(getTargetBeanName(), Filter.class)__		if (isTargetFilterLifecycle()) {_			delegate.init(getFilterConfig())__		}_		return delegate__	};initialize,the,filter,delegate,defined,as,bean,the,given,spring,application,context,p,the,default,implementation,fetches,the,bean,from,the,application,context,and,calls,the,standard,code,filter,init,method,on,it,passing,in,the,filter,config,of,this,filter,proxy,param,wac,the,root,application,context,return,the,initialized,delegate,filter,throws,servlet,exception,if,thrown,by,the,filter,see,get,target,bean,name,see,is,target,filter,lifecycle,see,get,filter,config,see,javax,servlet,filter,init,javax,servlet,filter,config;protected,filter,init,delegate,web,application,context,wac,throws,servlet,exception,filter,delegate,wac,get,bean,get,target,bean,name,filter,class,if,is,target,filter,lifecycle,delegate,init,get,filter,config,return,delegate
DelegatingFilterProxy -> protected Filter initDelegate(WebApplicationContext wac) throws ServletException;1495868221;Initialize the Filter delegate, defined as bean the given Spring_application context._<p>The default implementation fetches the bean from the application context_and calls the standard {@code Filter.init} method on it, passing_in the FilterConfig of this Filter proxy._@param wac the root application context_@return the initialized delegate Filter_@throws ServletException if thrown by the Filter_@see #getTargetBeanName()_@see #isTargetFilterLifecycle()_@see #getFilterConfig()_@see javax.servlet.Filter#init(javax.servlet.FilterConfig);protected Filter initDelegate(WebApplicationContext wac) throws ServletException {_		Filter delegate = wac.getBean(getTargetBeanName(), Filter.class)__		if (isTargetFilterLifecycle()) {_			delegate.init(getFilterConfig())__		}_		return delegate__	};initialize,the,filter,delegate,defined,as,bean,the,given,spring,application,context,p,the,default,implementation,fetches,the,bean,from,the,application,context,and,calls,the,standard,code,filter,init,method,on,it,passing,in,the,filter,config,of,this,filter,proxy,param,wac,the,root,application,context,return,the,initialized,delegate,filter,throws,servlet,exception,if,thrown,by,the,filter,see,get,target,bean,name,see,is,target,filter,lifecycle,see,get,filter,config,see,javax,servlet,filter,init,javax,servlet,filter,config;protected,filter,init,delegate,web,application,context,wac,throws,servlet,exception,filter,delegate,wac,get,bean,get,target,bean,name,filter,class,if,is,target,filter,lifecycle,delegate,init,get,filter,config,return,delegate
DelegatingFilterProxy -> protected Filter initDelegate(WebApplicationContext wac) throws ServletException;1496837955;Initialize the Filter delegate, defined as bean the given Spring_application context._<p>The default implementation fetches the bean from the application context_and calls the standard {@code Filter.init} method on it, passing_in the FilterConfig of this Filter proxy._@param wac the root application context_@return the initialized delegate Filter_@throws ServletException if thrown by the Filter_@see #getTargetBeanName()_@see #isTargetFilterLifecycle()_@see #getFilterConfig()_@see javax.servlet.Filter#init(javax.servlet.FilterConfig);protected Filter initDelegate(WebApplicationContext wac) throws ServletException {_		Filter delegate = wac.getBean(getTargetBeanName(), Filter.class)__		if (isTargetFilterLifecycle()) {_			delegate.init(getFilterConfig())__		}_		return delegate__	};initialize,the,filter,delegate,defined,as,bean,the,given,spring,application,context,p,the,default,implementation,fetches,the,bean,from,the,application,context,and,calls,the,standard,code,filter,init,method,on,it,passing,in,the,filter,config,of,this,filter,proxy,param,wac,the,root,application,context,return,the,initialized,delegate,filter,throws,servlet,exception,if,thrown,by,the,filter,see,get,target,bean,name,see,is,target,filter,lifecycle,see,get,filter,config,see,javax,servlet,filter,init,javax,servlet,filter,config;protected,filter,init,delegate,web,application,context,wac,throws,servlet,exception,filter,delegate,wac,get,bean,get,target,bean,name,filter,class,if,is,target,filter,lifecycle,delegate,init,get,filter,config,return,delegate
DelegatingFilterProxy -> protected Filter initDelegate(WebApplicationContext wac) throws ServletException;1498780456;Initialize the Filter delegate, defined as bean the given Spring_application context._<p>The default implementation fetches the bean from the application context_and calls the standard {@code Filter.init} method on it, passing_in the FilterConfig of this Filter proxy._@param wac the root application context_@return the initialized delegate Filter_@throws ServletException if thrown by the Filter_@see #getTargetBeanName()_@see #isTargetFilterLifecycle()_@see #getFilterConfig()_@see javax.servlet.Filter#init(javax.servlet.FilterConfig);protected Filter initDelegate(WebApplicationContext wac) throws ServletException {_		String targetBeanName = getTargetBeanName()__		Assert.state(targetBeanName != null, "No target bean name set")__		Filter delegate = wac.getBean(targetBeanName, Filter.class)__		if (isTargetFilterLifecycle()) {_			delegate.init(getFilterConfig())__		}_		return delegate__	};initialize,the,filter,delegate,defined,as,bean,the,given,spring,application,context,p,the,default,implementation,fetches,the,bean,from,the,application,context,and,calls,the,standard,code,filter,init,method,on,it,passing,in,the,filter,config,of,this,filter,proxy,param,wac,the,root,application,context,return,the,initialized,delegate,filter,throws,servlet,exception,if,thrown,by,the,filter,see,get,target,bean,name,see,is,target,filter,lifecycle,see,get,filter,config,see,javax,servlet,filter,init,javax,servlet,filter,config;protected,filter,init,delegate,web,application,context,wac,throws,servlet,exception,string,target,bean,name,get,target,bean,name,assert,state,target,bean,name,null,no,target,bean,name,set,filter,delegate,wac,get,bean,target,bean,name,filter,class,if,is,target,filter,lifecycle,delegate,init,get,filter,config,return,delegate
DelegatingFilterProxy -> protected Filter initDelegate(WebApplicationContext wac) throws ServletException;1500448076;Initialize the Filter delegate, defined as bean the given Spring_application context._<p>The default implementation fetches the bean from the application context_and calls the standard {@code Filter.init} method on it, passing_in the FilterConfig of this Filter proxy._@param wac the root application context_@return the initialized delegate Filter_@throws ServletException if thrown by the Filter_@see #getTargetBeanName()_@see #isTargetFilterLifecycle()_@see #getFilterConfig()_@see javax.servlet.Filter#init(javax.servlet.FilterConfig);protected Filter initDelegate(WebApplicationContext wac) throws ServletException {_		String targetBeanName = getTargetBeanName()__		Assert.state(targetBeanName != null, "No target bean name set")__		Filter delegate = wac.getBean(targetBeanName, Filter.class)__		if (isTargetFilterLifecycle()) {_			delegate.init(getFilterConfig())__		}_		return delegate__	};initialize,the,filter,delegate,defined,as,bean,the,given,spring,application,context,p,the,default,implementation,fetches,the,bean,from,the,application,context,and,calls,the,standard,code,filter,init,method,on,it,passing,in,the,filter,config,of,this,filter,proxy,param,wac,the,root,application,context,return,the,initialized,delegate,filter,throws,servlet,exception,if,thrown,by,the,filter,see,get,target,bean,name,see,is,target,filter,lifecycle,see,get,filter,config,see,javax,servlet,filter,init,javax,servlet,filter,config;protected,filter,init,delegate,web,application,context,wac,throws,servlet,exception,string,target,bean,name,get,target,bean,name,assert,state,target,bean,name,null,no,target,bean,name,set,filter,delegate,wac,get,bean,target,bean,name,filter,class,if,is,target,filter,lifecycle,delegate,init,get,filter,config,return,delegate
DelegatingFilterProxy -> protected Filter initDelegate(WebApplicationContext wac) throws ServletException;1506468851;Initialize the Filter delegate, defined as bean the given Spring_application context._<p>The default implementation fetches the bean from the application context_and calls the standard {@code Filter.init} method on it, passing_in the FilterConfig of this Filter proxy._@param wac the root application context_@return the initialized delegate Filter_@throws ServletException if thrown by the Filter_@see #getTargetBeanName()_@see #isTargetFilterLifecycle()_@see #getFilterConfig()_@see javax.servlet.Filter#init(javax.servlet.FilterConfig);protected Filter initDelegate(WebApplicationContext wac) throws ServletException {_		String targetBeanName = getTargetBeanName()__		Assert.state(targetBeanName != null, "No target bean name set")__		Filter delegate = wac.getBean(targetBeanName, Filter.class)__		if (isTargetFilterLifecycle()) {_			delegate.init(getFilterConfig())__		}_		return delegate__	};initialize,the,filter,delegate,defined,as,bean,the,given,spring,application,context,p,the,default,implementation,fetches,the,bean,from,the,application,context,and,calls,the,standard,code,filter,init,method,on,it,passing,in,the,filter,config,of,this,filter,proxy,param,wac,the,root,application,context,return,the,initialized,delegate,filter,throws,servlet,exception,if,thrown,by,the,filter,see,get,target,bean,name,see,is,target,filter,lifecycle,see,get,filter,config,see,javax,servlet,filter,init,javax,servlet,filter,config;protected,filter,init,delegate,web,application,context,wac,throws,servlet,exception,string,target,bean,name,get,target,bean,name,assert,state,target,bean,name,null,no,target,bean,name,set,filter,delegate,wac,get,bean,target,bean,name,filter,class,if,is,target,filter,lifecycle,delegate,init,get,filter,config,return,delegate
DelegatingFilterProxy -> public DelegatingFilterProxy();1328020251;Create a new {@code DelegatingFilterProxy}. For traditional (pre-Servlet 3.0) use_in {@code web.xml}._@see #setTargetBeanName(String);public DelegatingFilterProxy() {_	};create,a,new,code,delegating,filter,proxy,for,traditional,pre,servlet,3,0,use,in,code,web,xml,see,set,target,bean,name,string;public,delegating,filter,proxy
DelegatingFilterProxy -> public DelegatingFilterProxy();1356735495;Create a new {@code DelegatingFilterProxy}. For traditional (pre-Servlet 3.0) use_in {@code web.xml}._@see #setTargetBeanName(String);public DelegatingFilterProxy() {_	};create,a,new,code,delegating,filter,proxy,for,traditional,pre,servlet,3,0,use,in,code,web,xml,see,set,target,bean,name,string;public,delegating,filter,proxy
DelegatingFilterProxy -> public DelegatingFilterProxy();1357119239;Create a new {@code DelegatingFilterProxy}. For traditional (pre-Servlet 3.0) use_in {@code web.xml}._@see #setTargetBeanName(String);public DelegatingFilterProxy() {_	};create,a,new,code,delegating,filter,proxy,for,traditional,pre,servlet,3,0,use,in,code,web,xml,see,set,target,bean,name,string;public,delegating,filter,proxy
DelegatingFilterProxy -> public DelegatingFilterProxy();1368482696;Create a new {@code DelegatingFilterProxy}. For traditional (pre-Servlet 3.0) use_in {@code web.xml}._@see #setTargetBeanName(String);public DelegatingFilterProxy() {_	};create,a,new,code,delegating,filter,proxy,for,traditional,pre,servlet,3,0,use,in,code,web,xml,see,set,target,bean,name,string;public,delegating,filter,proxy
DelegatingFilterProxy -> public DelegatingFilterProxy();1375460233;Create a new {@code DelegatingFilterProxy}. For traditional (pre-Servlet 3.0) use_in {@code web.xml}._@see #setTargetBeanName(String);public DelegatingFilterProxy() {_	};create,a,new,code,delegating,filter,proxy,for,traditional,pre,servlet,3,0,use,in,code,web,xml,see,set,target,bean,name,string;public,delegating,filter,proxy
DelegatingFilterProxy -> public DelegatingFilterProxy();1427228652;Create a new {@code DelegatingFilterProxy}. For traditional (pre-Servlet 3.0) use_in {@code web.xml}._@see #setTargetBeanName(String);public DelegatingFilterProxy() {_	};create,a,new,code,delegating,filter,proxy,for,traditional,pre,servlet,3,0,use,in,code,web,xml,see,set,target,bean,name,string;public,delegating,filter,proxy
DelegatingFilterProxy -> public DelegatingFilterProxy();1436816047;Create a new {@code DelegatingFilterProxy}. For traditional (pre-Servlet 3.0) use_in {@code web.xml}._@see #setTargetBeanName(String);public DelegatingFilterProxy() {_	};create,a,new,code,delegating,filter,proxy,for,traditional,pre,servlet,3,0,use,in,code,web,xml,see,set,target,bean,name,string;public,delegating,filter,proxy
DelegatingFilterProxy -> public DelegatingFilterProxy();1495868221;Create a new {@code DelegatingFilterProxy}. For traditional (pre-Servlet 3.0) use_in {@code web.xml}._@see #setTargetBeanName(String);public DelegatingFilterProxy() {_	};create,a,new,code,delegating,filter,proxy,for,traditional,pre,servlet,3,0,use,in,code,web,xml,see,set,target,bean,name,string;public,delegating,filter,proxy
DelegatingFilterProxy -> public DelegatingFilterProxy();1496837955;Create a new {@code DelegatingFilterProxy}. For traditional (pre-Servlet 3.0) use_in {@code web.xml}._@see #setTargetBeanName(String);public DelegatingFilterProxy() {_	};create,a,new,code,delegating,filter,proxy,for,traditional,pre,servlet,3,0,use,in,code,web,xml,see,set,target,bean,name,string;public,delegating,filter,proxy
DelegatingFilterProxy -> public DelegatingFilterProxy();1498780456;Create a new {@code DelegatingFilterProxy}. For traditional (pre-Servlet 3.0) use_in {@code web.xml}._@see #setTargetBeanName(String);public DelegatingFilterProxy() {_	};create,a,new,code,delegating,filter,proxy,for,traditional,pre,servlet,3,0,use,in,code,web,xml,see,set,target,bean,name,string;public,delegating,filter,proxy
DelegatingFilterProxy -> public DelegatingFilterProxy();1500448076;Create a new {@code DelegatingFilterProxy}. For traditional (pre-Servlet 3.0) use_in {@code web.xml}._@see #setTargetBeanName(String);public DelegatingFilterProxy() {_	};create,a,new,code,delegating,filter,proxy,for,traditional,pre,servlet,3,0,use,in,code,web,xml,see,set,target,bean,name,string;public,delegating,filter,proxy
DelegatingFilterProxy -> public DelegatingFilterProxy();1506468851;Create a new {@code DelegatingFilterProxy}. For traditional (pre-Servlet 3.0) use_in {@code web.xml}._@see #setTargetBeanName(String);public DelegatingFilterProxy() {_	};create,a,new,code,delegating,filter,proxy,for,traditional,pre,servlet,3,0,use,in,code,web,xml,see,set,target,bean,name,string;public,delegating,filter,proxy
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName, WebApplicationContext wac);1328020251;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the given Spring {@code WebApplicationContext}._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter interface._<p>The given {@code WebApplicationContext} may or may not be refreshed when passed_in. If it has not, and if the context implements {@link ConfigurableApplicationContext},_a {@link ConfigurableApplicationContext#refresh() refresh()} will be attempted before_retrieving the named target bean._<p>This proxy's {@code Environment} will be inherited from the given_{@code WebApplicationContext}._@param targetBeanName name of the target filter bean in the Spring application_context (must not be {@code null})._@param wac the application context from which the target filter will be retrieved__if {@code null}, an application context will be looked up from {@code ServletContext}_as a fallback._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName, WebApplicationContext wac) {_		Assert.hasText(targetBeanName, "target Filter bean name must not be null or empty")__		this.setTargetBeanName(targetBeanName)__		this.webApplicationContext = wac__		if (wac != null) {_			this.setEnvironment(wac.getEnvironment())__		}_	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,given,spring,code,web,application,context,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,the,given,code,web,application,context,may,or,may,not,be,refreshed,when,passed,in,if,it,has,not,and,if,the,context,implements,link,configurable,application,context,a,link,configurable,application,context,refresh,refresh,will,be,attempted,before,retrieving,the,named,target,bean,p,this,proxy,s,code,environment,will,be,inherited,from,the,given,code,web,application,context,param,target,bean,name,name,of,the,target,filter,bean,in,the,spring,application,context,must,not,be,code,null,param,wac,the,application,context,from,which,the,target,filter,will,be,retrieved,if,code,null,an,application,context,will,be,looked,up,from,code,servlet,context,as,a,fallback,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,web,application,context,wac,assert,has,text,target,bean,name,target,filter,bean,name,must,not,be,null,or,empty,this,set,target,bean,name,target,bean,name,this,web,application,context,wac,if,wac,null,this,set,environment,wac,get,environment
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName, WebApplicationContext wac);1356735495;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the given Spring {@code WebApplicationContext}._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter interface._<p>The given {@code WebApplicationContext} may or may not be refreshed when passed_in. If it has not, and if the context implements {@link ConfigurableApplicationContext},_a {@link ConfigurableApplicationContext#refresh() refresh()} will be attempted before_retrieving the named target bean._<p>This proxy's {@code Environment} will be inherited from the given_{@code WebApplicationContext}._@param targetBeanName name of the target filter bean in the Spring application_context (must not be {@code null})._@param wac the application context from which the target filter will be retrieved__if {@code null}, an application context will be looked up from {@code ServletContext}_as a fallback._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName, WebApplicationContext wac) {_		Assert.hasText(targetBeanName, "target Filter bean name must not be null or empty")__		this.setTargetBeanName(targetBeanName)__		this.webApplicationContext = wac__		if (wac != null) {_			this.setEnvironment(wac.getEnvironment())__		}_	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,given,spring,code,web,application,context,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,the,given,code,web,application,context,may,or,may,not,be,refreshed,when,passed,in,if,it,has,not,and,if,the,context,implements,link,configurable,application,context,a,link,configurable,application,context,refresh,refresh,will,be,attempted,before,retrieving,the,named,target,bean,p,this,proxy,s,code,environment,will,be,inherited,from,the,given,code,web,application,context,param,target,bean,name,name,of,the,target,filter,bean,in,the,spring,application,context,must,not,be,code,null,param,wac,the,application,context,from,which,the,target,filter,will,be,retrieved,if,code,null,an,application,context,will,be,looked,up,from,code,servlet,context,as,a,fallback,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,web,application,context,wac,assert,has,text,target,bean,name,target,filter,bean,name,must,not,be,null,or,empty,this,set,target,bean,name,target,bean,name,this,web,application,context,wac,if,wac,null,this,set,environment,wac,get,environment
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName, WebApplicationContext wac);1357119239;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the given Spring {@code WebApplicationContext}._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter interface._<p>The given {@code WebApplicationContext} may or may not be refreshed when passed_in. If it has not, and if the context implements {@link ConfigurableApplicationContext},_a {@link ConfigurableApplicationContext#refresh() refresh()} will be attempted before_retrieving the named target bean._<p>This proxy's {@code Environment} will be inherited from the given_{@code WebApplicationContext}._@param targetBeanName name of the target filter bean in the Spring application_context (must not be {@code null})._@param wac the application context from which the target filter will be retrieved__if {@code null}, an application context will be looked up from {@code ServletContext}_as a fallback._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName, WebApplicationContext wac) {_		Assert.hasText(targetBeanName, "target Filter bean name must not be null or empty")__		this.setTargetBeanName(targetBeanName)__		this.webApplicationContext = wac__		if (wac != null) {_			this.setEnvironment(wac.getEnvironment())__		}_	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,given,spring,code,web,application,context,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,the,given,code,web,application,context,may,or,may,not,be,refreshed,when,passed,in,if,it,has,not,and,if,the,context,implements,link,configurable,application,context,a,link,configurable,application,context,refresh,refresh,will,be,attempted,before,retrieving,the,named,target,bean,p,this,proxy,s,code,environment,will,be,inherited,from,the,given,code,web,application,context,param,target,bean,name,name,of,the,target,filter,bean,in,the,spring,application,context,must,not,be,code,null,param,wac,the,application,context,from,which,the,target,filter,will,be,retrieved,if,code,null,an,application,context,will,be,looked,up,from,code,servlet,context,as,a,fallback,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,web,application,context,wac,assert,has,text,target,bean,name,target,filter,bean,name,must,not,be,null,or,empty,this,set,target,bean,name,target,bean,name,this,web,application,context,wac,if,wac,null,this,set,environment,wac,get,environment
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName, WebApplicationContext wac);1368482696;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the given Spring {@code WebApplicationContext}._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter interface._<p>The given {@code WebApplicationContext} may or may not be refreshed when passed_in. If it has not, and if the context implements {@link ConfigurableApplicationContext},_a {@link ConfigurableApplicationContext#refresh() refresh()} will be attempted before_retrieving the named target bean._<p>This proxy's {@code Environment} will be inherited from the given_{@code WebApplicationContext}._@param targetBeanName name of the target filter bean in the Spring application_context (must not be {@code null})._@param wac the application context from which the target filter will be retrieved__if {@code null}, an application context will be looked up from {@code ServletContext}_as a fallback._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName, WebApplicationContext wac) {_		Assert.hasText(targetBeanName, "target Filter bean name must not be null or empty")__		this.setTargetBeanName(targetBeanName)__		this.webApplicationContext = wac__		if (wac != null) {_			this.setEnvironment(wac.getEnvironment())__		}_	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,given,spring,code,web,application,context,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,the,given,code,web,application,context,may,or,may,not,be,refreshed,when,passed,in,if,it,has,not,and,if,the,context,implements,link,configurable,application,context,a,link,configurable,application,context,refresh,refresh,will,be,attempted,before,retrieving,the,named,target,bean,p,this,proxy,s,code,environment,will,be,inherited,from,the,given,code,web,application,context,param,target,bean,name,name,of,the,target,filter,bean,in,the,spring,application,context,must,not,be,code,null,param,wac,the,application,context,from,which,the,target,filter,will,be,retrieved,if,code,null,an,application,context,will,be,looked,up,from,code,servlet,context,as,a,fallback,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,web,application,context,wac,assert,has,text,target,bean,name,target,filter,bean,name,must,not,be,null,or,empty,this,set,target,bean,name,target,bean,name,this,web,application,context,wac,if,wac,null,this,set,environment,wac,get,environment
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName, WebApplicationContext wac);1375460233;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the given Spring {@code WebApplicationContext}._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter interface._<p>The given {@code WebApplicationContext} may or may not be refreshed when passed_in. If it has not, and if the context implements {@link ConfigurableApplicationContext},_a {@link ConfigurableApplicationContext#refresh() refresh()} will be attempted before_retrieving the named target bean._<p>This proxy's {@code Environment} will be inherited from the given_{@code WebApplicationContext}._@param targetBeanName name of the target filter bean in the Spring application_context (must not be {@code null})._@param wac the application context from which the target filter will be retrieved__if {@code null}, an application context will be looked up from {@code ServletContext}_as a fallback._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName, WebApplicationContext wac) {_		Assert.hasText(targetBeanName, "target Filter bean name must not be null or empty")__		this.setTargetBeanName(targetBeanName)__		this.webApplicationContext = wac__		if (wac != null) {_			this.setEnvironment(wac.getEnvironment())__		}_	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,given,spring,code,web,application,context,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,the,given,code,web,application,context,may,or,may,not,be,refreshed,when,passed,in,if,it,has,not,and,if,the,context,implements,link,configurable,application,context,a,link,configurable,application,context,refresh,refresh,will,be,attempted,before,retrieving,the,named,target,bean,p,this,proxy,s,code,environment,will,be,inherited,from,the,given,code,web,application,context,param,target,bean,name,name,of,the,target,filter,bean,in,the,spring,application,context,must,not,be,code,null,param,wac,the,application,context,from,which,the,target,filter,will,be,retrieved,if,code,null,an,application,context,will,be,looked,up,from,code,servlet,context,as,a,fallback,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,web,application,context,wac,assert,has,text,target,bean,name,target,filter,bean,name,must,not,be,null,or,empty,this,set,target,bean,name,target,bean,name,this,web,application,context,wac,if,wac,null,this,set,environment,wac,get,environment
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName, WebApplicationContext wac);1427228652;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the given Spring {@code WebApplicationContext}._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter interface._<p>The given {@code WebApplicationContext} may or may not be refreshed when passed_in. If it has not, and if the context implements {@link ConfigurableApplicationContext},_a {@link ConfigurableApplicationContext#refresh() refresh()} will be attempted before_retrieving the named target bean._<p>This proxy's {@code Environment} will be inherited from the given_{@code WebApplicationContext}._@param targetBeanName name of the target filter bean in the Spring application_context (must not be {@code null})._@param wac the application context from which the target filter will be retrieved__if {@code null}, an application context will be looked up from {@code ServletContext}_as a fallback._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName, WebApplicationContext wac) {_		Assert.hasText(targetBeanName, "target Filter bean name must not be null or empty")__		this.setTargetBeanName(targetBeanName)__		this.webApplicationContext = wac__		if (wac != null) {_			this.setEnvironment(wac.getEnvironment())__		}_	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,given,spring,code,web,application,context,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,the,given,code,web,application,context,may,or,may,not,be,refreshed,when,passed,in,if,it,has,not,and,if,the,context,implements,link,configurable,application,context,a,link,configurable,application,context,refresh,refresh,will,be,attempted,before,retrieving,the,named,target,bean,p,this,proxy,s,code,environment,will,be,inherited,from,the,given,code,web,application,context,param,target,bean,name,name,of,the,target,filter,bean,in,the,spring,application,context,must,not,be,code,null,param,wac,the,application,context,from,which,the,target,filter,will,be,retrieved,if,code,null,an,application,context,will,be,looked,up,from,code,servlet,context,as,a,fallback,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,web,application,context,wac,assert,has,text,target,bean,name,target,filter,bean,name,must,not,be,null,or,empty,this,set,target,bean,name,target,bean,name,this,web,application,context,wac,if,wac,null,this,set,environment,wac,get,environment
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName, WebApplicationContext wac);1436816047;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the given Spring {@code WebApplicationContext}._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter interface._<p>The given {@code WebApplicationContext} may or may not be refreshed when passed_in. If it has not, and if the context implements {@link ConfigurableApplicationContext},_a {@link ConfigurableApplicationContext#refresh() refresh()} will be attempted before_retrieving the named target bean._<p>This proxy's {@code Environment} will be inherited from the given_{@code WebApplicationContext}._@param targetBeanName name of the target filter bean in the Spring application_context (must not be {@code null})._@param wac the application context from which the target filter will be retrieved__if {@code null}, an application context will be looked up from {@code ServletContext}_as a fallback._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName, WebApplicationContext wac) {_		Assert.hasText(targetBeanName, "target Filter bean name must not be null or empty")__		this.setTargetBeanName(targetBeanName)__		this.webApplicationContext = wac__		if (wac != null) {_			this.setEnvironment(wac.getEnvironment())__		}_	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,given,spring,code,web,application,context,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,the,given,code,web,application,context,may,or,may,not,be,refreshed,when,passed,in,if,it,has,not,and,if,the,context,implements,link,configurable,application,context,a,link,configurable,application,context,refresh,refresh,will,be,attempted,before,retrieving,the,named,target,bean,p,this,proxy,s,code,environment,will,be,inherited,from,the,given,code,web,application,context,param,target,bean,name,name,of,the,target,filter,bean,in,the,spring,application,context,must,not,be,code,null,param,wac,the,application,context,from,which,the,target,filter,will,be,retrieved,if,code,null,an,application,context,will,be,looked,up,from,code,servlet,context,as,a,fallback,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,web,application,context,wac,assert,has,text,target,bean,name,target,filter,bean,name,must,not,be,null,or,empty,this,set,target,bean,name,target,bean,name,this,web,application,context,wac,if,wac,null,this,set,environment,wac,get,environment
DelegatingFilterProxy -> public void setContextAttribute(String contextAttribute);1328020251;Set the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public void setContextAttribute(String contextAttribute) {_		this.contextAttribute = contextAttribute__	};set,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,void,set,context,attribute,string,context,attribute,this,context,attribute,context,attribute
DelegatingFilterProxy -> public void setContextAttribute(String contextAttribute);1356735495;Set the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public void setContextAttribute(String contextAttribute) {_		this.contextAttribute = contextAttribute__	};set,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,void,set,context,attribute,string,context,attribute,this,context,attribute,context,attribute
DelegatingFilterProxy -> public void setContextAttribute(String contextAttribute);1357119239;Set the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public void setContextAttribute(String contextAttribute) {_		this.contextAttribute = contextAttribute__	};set,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,void,set,context,attribute,string,context,attribute,this,context,attribute,context,attribute
DelegatingFilterProxy -> public void setContextAttribute(String contextAttribute);1368482696;Set the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public void setContextAttribute(String contextAttribute) {_		this.contextAttribute = contextAttribute__	};set,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,void,set,context,attribute,string,context,attribute,this,context,attribute,context,attribute
DelegatingFilterProxy -> public void setContextAttribute(String contextAttribute);1375460233;Set the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public void setContextAttribute(String contextAttribute) {_		this.contextAttribute = contextAttribute__	};set,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,void,set,context,attribute,string,context,attribute,this,context,attribute,context,attribute
DelegatingFilterProxy -> public void setContextAttribute(String contextAttribute);1427228652;Set the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public void setContextAttribute(String contextAttribute) {_		this.contextAttribute = contextAttribute__	};set,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,void,set,context,attribute,string,context,attribute,this,context,attribute,context,attribute
DelegatingFilterProxy -> public void setContextAttribute(String contextAttribute);1436816047;Set the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public void setContextAttribute(String contextAttribute) {_		this.contextAttribute = contextAttribute__	};set,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,void,set,context,attribute,string,context,attribute,this,context,attribute,context,attribute
DelegatingFilterProxy -> public void setContextAttribute(String contextAttribute);1495868221;Set the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public void setContextAttribute(String contextAttribute) {_		this.contextAttribute = contextAttribute__	};set,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,void,set,context,attribute,string,context,attribute,this,context,attribute,context,attribute
DelegatingFilterProxy -> public void setContextAttribute(String contextAttribute);1496837955;Set the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public void setContextAttribute(String contextAttribute) {_		this.contextAttribute = contextAttribute__	};set,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,void,set,context,attribute,string,context,attribute,this,context,attribute,context,attribute
DelegatingFilterProxy -> public void setContextAttribute(String contextAttribute);1498780456;Set the name of the ServletContext attribute which should be used to retrieve the_{@link WebApplicationContext} from which to load the delegate {@link Filter} bean.;public void setContextAttribute(String contextAttribute) {_		this.contextAttribute = contextAttribute__	};set,the,name,of,the,servlet,context,attribute,which,should,be,used,to,retrieve,the,link,web,application,context,from,which,to,load,the,delegate,link,filter,bean;public,void,set,context,attribute,string,context,attribute,this,context,attribute,context,attribute
DelegatingFilterProxy -> protected String getTargetBeanName();1328020251;Return the name of the target bean in the Spring application context.;protected String getTargetBeanName() {_		return this.targetBeanName__	};return,the,name,of,the,target,bean,in,the,spring,application,context;protected,string,get,target,bean,name,return,this,target,bean,name
DelegatingFilterProxy -> protected String getTargetBeanName();1356735495;Return the name of the target bean in the Spring application context.;protected String getTargetBeanName() {_		return this.targetBeanName__	};return,the,name,of,the,target,bean,in,the,spring,application,context;protected,string,get,target,bean,name,return,this,target,bean,name
DelegatingFilterProxy -> protected String getTargetBeanName();1357119239;Return the name of the target bean in the Spring application context.;protected String getTargetBeanName() {_		return this.targetBeanName__	};return,the,name,of,the,target,bean,in,the,spring,application,context;protected,string,get,target,bean,name,return,this,target,bean,name
DelegatingFilterProxy -> protected String getTargetBeanName();1368482696;Return the name of the target bean in the Spring application context.;protected String getTargetBeanName() {_		return this.targetBeanName__	};return,the,name,of,the,target,bean,in,the,spring,application,context;protected,string,get,target,bean,name,return,this,target,bean,name
DelegatingFilterProxy -> protected String getTargetBeanName();1375460233;Return the name of the target bean in the Spring application context.;protected String getTargetBeanName() {_		return this.targetBeanName__	};return,the,name,of,the,target,bean,in,the,spring,application,context;protected,string,get,target,bean,name,return,this,target,bean,name
DelegatingFilterProxy -> protected String getTargetBeanName();1427228652;Return the name of the target bean in the Spring application context.;protected String getTargetBeanName() {_		return this.targetBeanName__	};return,the,name,of,the,target,bean,in,the,spring,application,context;protected,string,get,target,bean,name,return,this,target,bean,name
DelegatingFilterProxy -> protected String getTargetBeanName();1436816047;Return the name of the target bean in the Spring application context.;protected String getTargetBeanName() {_		return this.targetBeanName__	};return,the,name,of,the,target,bean,in,the,spring,application,context;protected,string,get,target,bean,name,return,this,target,bean,name
DelegatingFilterProxy -> protected String getTargetBeanName();1495868221;Return the name of the target bean in the Spring application context.;protected String getTargetBeanName() {_		return this.targetBeanName__	};return,the,name,of,the,target,bean,in,the,spring,application,context;protected,string,get,target,bean,name,return,this,target,bean,name
DelegatingFilterProxy -> protected String getTargetBeanName();1496837955;Return the name of the target bean in the Spring application context.;protected String getTargetBeanName() {_		return this.targetBeanName__	};return,the,name,of,the,target,bean,in,the,spring,application,context;protected,string,get,target,bean,name,return,this,target,bean,name
DelegatingFilterProxy -> public void setTargetFilterLifecycle(boolean targetFilterLifecycle);1328020251;Set whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean._<p>Default is "false"_ target beans usually rely on the Spring application_context for managing their lifecycle. Setting this flag to "true" means_that the servlet container will control the lifecycle of the target_Filter, with this proxy delegating the corresponding calls.;public void setTargetFilterLifecycle(boolean targetFilterLifecycle) {_		this.targetFilterLifecycle = targetFilterLifecycle__	};set,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean,p,default,is,false,target,beans,usually,rely,on,the,spring,application,context,for,managing,their,lifecycle,setting,this,flag,to,true,means,that,the,servlet,container,will,control,the,lifecycle,of,the,target,filter,with,this,proxy,delegating,the,corresponding,calls;public,void,set,target,filter,lifecycle,boolean,target,filter,lifecycle,this,target,filter,lifecycle,target,filter,lifecycle
DelegatingFilterProxy -> public void setTargetFilterLifecycle(boolean targetFilterLifecycle);1356735495;Set whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean._<p>Default is "false"_ target beans usually rely on the Spring application_context for managing their lifecycle. Setting this flag to "true" means_that the servlet container will control the lifecycle of the target_Filter, with this proxy delegating the corresponding calls.;public void setTargetFilterLifecycle(boolean targetFilterLifecycle) {_		this.targetFilterLifecycle = targetFilterLifecycle__	};set,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean,p,default,is,false,target,beans,usually,rely,on,the,spring,application,context,for,managing,their,lifecycle,setting,this,flag,to,true,means,that,the,servlet,container,will,control,the,lifecycle,of,the,target,filter,with,this,proxy,delegating,the,corresponding,calls;public,void,set,target,filter,lifecycle,boolean,target,filter,lifecycle,this,target,filter,lifecycle,target,filter,lifecycle
DelegatingFilterProxy -> public void setTargetFilterLifecycle(boolean targetFilterLifecycle);1357119239;Set whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean._<p>Default is "false"_ target beans usually rely on the Spring application_context for managing their lifecycle. Setting this flag to "true" means_that the servlet container will control the lifecycle of the target_Filter, with this proxy delegating the corresponding calls.;public void setTargetFilterLifecycle(boolean targetFilterLifecycle) {_		this.targetFilterLifecycle = targetFilterLifecycle__	};set,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean,p,default,is,false,target,beans,usually,rely,on,the,spring,application,context,for,managing,their,lifecycle,setting,this,flag,to,true,means,that,the,servlet,container,will,control,the,lifecycle,of,the,target,filter,with,this,proxy,delegating,the,corresponding,calls;public,void,set,target,filter,lifecycle,boolean,target,filter,lifecycle,this,target,filter,lifecycle,target,filter,lifecycle
DelegatingFilterProxy -> public void setTargetFilterLifecycle(boolean targetFilterLifecycle);1368482696;Set whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean._<p>Default is "false"_ target beans usually rely on the Spring application_context for managing their lifecycle. Setting this flag to "true" means_that the servlet container will control the lifecycle of the target_Filter, with this proxy delegating the corresponding calls.;public void setTargetFilterLifecycle(boolean targetFilterLifecycle) {_		this.targetFilterLifecycle = targetFilterLifecycle__	};set,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean,p,default,is,false,target,beans,usually,rely,on,the,spring,application,context,for,managing,their,lifecycle,setting,this,flag,to,true,means,that,the,servlet,container,will,control,the,lifecycle,of,the,target,filter,with,this,proxy,delegating,the,corresponding,calls;public,void,set,target,filter,lifecycle,boolean,target,filter,lifecycle,this,target,filter,lifecycle,target,filter,lifecycle
DelegatingFilterProxy -> public void setTargetFilterLifecycle(boolean targetFilterLifecycle);1375460233;Set whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean._<p>Default is "false"_ target beans usually rely on the Spring application_context for managing their lifecycle. Setting this flag to "true" means_that the servlet container will control the lifecycle of the target_Filter, with this proxy delegating the corresponding calls.;public void setTargetFilterLifecycle(boolean targetFilterLifecycle) {_		this.targetFilterLifecycle = targetFilterLifecycle__	};set,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean,p,default,is,false,target,beans,usually,rely,on,the,spring,application,context,for,managing,their,lifecycle,setting,this,flag,to,true,means,that,the,servlet,container,will,control,the,lifecycle,of,the,target,filter,with,this,proxy,delegating,the,corresponding,calls;public,void,set,target,filter,lifecycle,boolean,target,filter,lifecycle,this,target,filter,lifecycle,target,filter,lifecycle
DelegatingFilterProxy -> public void setTargetFilterLifecycle(boolean targetFilterLifecycle);1427228652;Set whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean._<p>Default is "false"_ target beans usually rely on the Spring application_context for managing their lifecycle. Setting this flag to "true" means_that the servlet container will control the lifecycle of the target_Filter, with this proxy delegating the corresponding calls.;public void setTargetFilterLifecycle(boolean targetFilterLifecycle) {_		this.targetFilterLifecycle = targetFilterLifecycle__	};set,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean,p,default,is,false,target,beans,usually,rely,on,the,spring,application,context,for,managing,their,lifecycle,setting,this,flag,to,true,means,that,the,servlet,container,will,control,the,lifecycle,of,the,target,filter,with,this,proxy,delegating,the,corresponding,calls;public,void,set,target,filter,lifecycle,boolean,target,filter,lifecycle,this,target,filter,lifecycle,target,filter,lifecycle
DelegatingFilterProxy -> public void setTargetFilterLifecycle(boolean targetFilterLifecycle);1436816047;Set whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean._<p>Default is "false"_ target beans usually rely on the Spring application_context for managing their lifecycle. Setting this flag to "true" means_that the servlet container will control the lifecycle of the target_Filter, with this proxy delegating the corresponding calls.;public void setTargetFilterLifecycle(boolean targetFilterLifecycle) {_		this.targetFilterLifecycle = targetFilterLifecycle__	};set,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean,p,default,is,false,target,beans,usually,rely,on,the,spring,application,context,for,managing,their,lifecycle,setting,this,flag,to,true,means,that,the,servlet,container,will,control,the,lifecycle,of,the,target,filter,with,this,proxy,delegating,the,corresponding,calls;public,void,set,target,filter,lifecycle,boolean,target,filter,lifecycle,this,target,filter,lifecycle,target,filter,lifecycle
DelegatingFilterProxy -> public void setTargetFilterLifecycle(boolean targetFilterLifecycle);1495868221;Set whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean._<p>Default is "false"_ target beans usually rely on the Spring application_context for managing their lifecycle. Setting this flag to "true" means_that the servlet container will control the lifecycle of the target_Filter, with this proxy delegating the corresponding calls.;public void setTargetFilterLifecycle(boolean targetFilterLifecycle) {_		this.targetFilterLifecycle = targetFilterLifecycle__	};set,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean,p,default,is,false,target,beans,usually,rely,on,the,spring,application,context,for,managing,their,lifecycle,setting,this,flag,to,true,means,that,the,servlet,container,will,control,the,lifecycle,of,the,target,filter,with,this,proxy,delegating,the,corresponding,calls;public,void,set,target,filter,lifecycle,boolean,target,filter,lifecycle,this,target,filter,lifecycle,target,filter,lifecycle
DelegatingFilterProxy -> public void setTargetFilterLifecycle(boolean targetFilterLifecycle);1496837955;Set whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean._<p>Default is "false"_ target beans usually rely on the Spring application_context for managing their lifecycle. Setting this flag to "true" means_that the servlet container will control the lifecycle of the target_Filter, with this proxy delegating the corresponding calls.;public void setTargetFilterLifecycle(boolean targetFilterLifecycle) {_		this.targetFilterLifecycle = targetFilterLifecycle__	};set,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean,p,default,is,false,target,beans,usually,rely,on,the,spring,application,context,for,managing,their,lifecycle,setting,this,flag,to,true,means,that,the,servlet,container,will,control,the,lifecycle,of,the,target,filter,with,this,proxy,delegating,the,corresponding,calls;public,void,set,target,filter,lifecycle,boolean,target,filter,lifecycle,this,target,filter,lifecycle,target,filter,lifecycle
DelegatingFilterProxy -> public void setTargetFilterLifecycle(boolean targetFilterLifecycle);1498780456;Set whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean._<p>Default is "false"_ target beans usually rely on the Spring application_context for managing their lifecycle. Setting this flag to "true" means_that the servlet container will control the lifecycle of the target_Filter, with this proxy delegating the corresponding calls.;public void setTargetFilterLifecycle(boolean targetFilterLifecycle) {_		this.targetFilterLifecycle = targetFilterLifecycle__	};set,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean,p,default,is,false,target,beans,usually,rely,on,the,spring,application,context,for,managing,their,lifecycle,setting,this,flag,to,true,means,that,the,servlet,container,will,control,the,lifecycle,of,the,target,filter,with,this,proxy,delegating,the,corresponding,calls;public,void,set,target,filter,lifecycle,boolean,target,filter,lifecycle,this,target,filter,lifecycle,target,filter,lifecycle
DelegatingFilterProxy -> public void setTargetFilterLifecycle(boolean targetFilterLifecycle);1500448076;Set whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean._<p>Default is "false"_ target beans usually rely on the Spring application_context for managing their lifecycle. Setting this flag to "true" means_that the servlet container will control the lifecycle of the target_Filter, with this proxy delegating the corresponding calls.;public void setTargetFilterLifecycle(boolean targetFilterLifecycle) {_		this.targetFilterLifecycle = targetFilterLifecycle__	};set,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean,p,default,is,false,target,beans,usually,rely,on,the,spring,application,context,for,managing,their,lifecycle,setting,this,flag,to,true,means,that,the,servlet,container,will,control,the,lifecycle,of,the,target,filter,with,this,proxy,delegating,the,corresponding,calls;public,void,set,target,filter,lifecycle,boolean,target,filter,lifecycle,this,target,filter,lifecycle,target,filter,lifecycle
DelegatingFilterProxy -> public void setTargetFilterLifecycle(boolean targetFilterLifecycle);1506468851;Set whether to invoke the {@code Filter.init} and_{@code Filter.destroy} lifecycle methods on the target bean._<p>Default is "false"_ target beans usually rely on the Spring application_context for managing their lifecycle. Setting this flag to "true" means_that the servlet container will control the lifecycle of the target_Filter, with this proxy delegating the corresponding calls.;public void setTargetFilterLifecycle(boolean targetFilterLifecycle) {_		this.targetFilterLifecycle = targetFilterLifecycle__	};set,whether,to,invoke,the,code,filter,init,and,code,filter,destroy,lifecycle,methods,on,the,target,bean,p,default,is,false,target,beans,usually,rely,on,the,spring,application,context,for,managing,their,lifecycle,setting,this,flag,to,true,means,that,the,servlet,container,will,control,the,lifecycle,of,the,target,filter,with,this,proxy,delegating,the,corresponding,calls;public,void,set,target,filter,lifecycle,boolean,target,filter,lifecycle,this,target,filter,lifecycle,target,filter,lifecycle
DelegatingFilterProxy -> protected void invokeDelegate( 			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain) 			throws ServletException, IOException;1328020251;Actually invoke the delegate Filter with the given request and response._@param delegate the delegate Filter_@param request the current HTTP request_@param response the current HTTP response_@param filterChain the current FilterChain_@throws ServletException if thrown by the Filter_@throws IOException if thrown by the Filter;protected void invokeDelegate(_			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)_			throws ServletException, IOException {__		delegate.doFilter(request, response, filterChain)__	};actually,invoke,the,delegate,filter,with,the,given,request,and,response,param,delegate,the,delegate,filter,param,request,the,current,http,request,param,response,the,current,http,response,param,filter,chain,the,current,filter,chain,throws,servlet,exception,if,thrown,by,the,filter,throws,ioexception,if,thrown,by,the,filter;protected,void,invoke,delegate,filter,delegate,servlet,request,request,servlet,response,response,filter,chain,filter,chain,throws,servlet,exception,ioexception,delegate,do,filter,request,response,filter,chain
DelegatingFilterProxy -> protected void invokeDelegate( 			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain) 			throws ServletException, IOException;1356735495;Actually invoke the delegate Filter with the given request and response._@param delegate the delegate Filter_@param request the current HTTP request_@param response the current HTTP response_@param filterChain the current FilterChain_@throws ServletException if thrown by the Filter_@throws IOException if thrown by the Filter;protected void invokeDelegate(_			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)_			throws ServletException, IOException {__		delegate.doFilter(request, response, filterChain)__	};actually,invoke,the,delegate,filter,with,the,given,request,and,response,param,delegate,the,delegate,filter,param,request,the,current,http,request,param,response,the,current,http,response,param,filter,chain,the,current,filter,chain,throws,servlet,exception,if,thrown,by,the,filter,throws,ioexception,if,thrown,by,the,filter;protected,void,invoke,delegate,filter,delegate,servlet,request,request,servlet,response,response,filter,chain,filter,chain,throws,servlet,exception,ioexception,delegate,do,filter,request,response,filter,chain
DelegatingFilterProxy -> protected void invokeDelegate( 			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain) 			throws ServletException, IOException;1357119239;Actually invoke the delegate Filter with the given request and response._@param delegate the delegate Filter_@param request the current HTTP request_@param response the current HTTP response_@param filterChain the current FilterChain_@throws ServletException if thrown by the Filter_@throws IOException if thrown by the Filter;protected void invokeDelegate(_			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)_			throws ServletException, IOException {__		delegate.doFilter(request, response, filterChain)__	};actually,invoke,the,delegate,filter,with,the,given,request,and,response,param,delegate,the,delegate,filter,param,request,the,current,http,request,param,response,the,current,http,response,param,filter,chain,the,current,filter,chain,throws,servlet,exception,if,thrown,by,the,filter,throws,ioexception,if,thrown,by,the,filter;protected,void,invoke,delegate,filter,delegate,servlet,request,request,servlet,response,response,filter,chain,filter,chain,throws,servlet,exception,ioexception,delegate,do,filter,request,response,filter,chain
DelegatingFilterProxy -> protected void invokeDelegate( 			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain) 			throws ServletException, IOException;1368482696;Actually invoke the delegate Filter with the given request and response._@param delegate the delegate Filter_@param request the current HTTP request_@param response the current HTTP response_@param filterChain the current FilterChain_@throws ServletException if thrown by the Filter_@throws IOException if thrown by the Filter;protected void invokeDelegate(_			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)_			throws ServletException, IOException {__		delegate.doFilter(request, response, filterChain)__	};actually,invoke,the,delegate,filter,with,the,given,request,and,response,param,delegate,the,delegate,filter,param,request,the,current,http,request,param,response,the,current,http,response,param,filter,chain,the,current,filter,chain,throws,servlet,exception,if,thrown,by,the,filter,throws,ioexception,if,thrown,by,the,filter;protected,void,invoke,delegate,filter,delegate,servlet,request,request,servlet,response,response,filter,chain,filter,chain,throws,servlet,exception,ioexception,delegate,do,filter,request,response,filter,chain
DelegatingFilterProxy -> protected void invokeDelegate( 			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain) 			throws ServletException, IOException;1375460233;Actually invoke the delegate Filter with the given request and response._@param delegate the delegate Filter_@param request the current HTTP request_@param response the current HTTP response_@param filterChain the current FilterChain_@throws ServletException if thrown by the Filter_@throws IOException if thrown by the Filter;protected void invokeDelegate(_			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)_			throws ServletException, IOException {__		delegate.doFilter(request, response, filterChain)__	};actually,invoke,the,delegate,filter,with,the,given,request,and,response,param,delegate,the,delegate,filter,param,request,the,current,http,request,param,response,the,current,http,response,param,filter,chain,the,current,filter,chain,throws,servlet,exception,if,thrown,by,the,filter,throws,ioexception,if,thrown,by,the,filter;protected,void,invoke,delegate,filter,delegate,servlet,request,request,servlet,response,response,filter,chain,filter,chain,throws,servlet,exception,ioexception,delegate,do,filter,request,response,filter,chain
DelegatingFilterProxy -> protected void invokeDelegate( 			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain) 			throws ServletException, IOException;1427228652;Actually invoke the delegate Filter with the given request and response._@param delegate the delegate Filter_@param request the current HTTP request_@param response the current HTTP response_@param filterChain the current FilterChain_@throws ServletException if thrown by the Filter_@throws IOException if thrown by the Filter;protected void invokeDelegate(_			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)_			throws ServletException, IOException {__		delegate.doFilter(request, response, filterChain)__	};actually,invoke,the,delegate,filter,with,the,given,request,and,response,param,delegate,the,delegate,filter,param,request,the,current,http,request,param,response,the,current,http,response,param,filter,chain,the,current,filter,chain,throws,servlet,exception,if,thrown,by,the,filter,throws,ioexception,if,thrown,by,the,filter;protected,void,invoke,delegate,filter,delegate,servlet,request,request,servlet,response,response,filter,chain,filter,chain,throws,servlet,exception,ioexception,delegate,do,filter,request,response,filter,chain
DelegatingFilterProxy -> protected void invokeDelegate( 			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain) 			throws ServletException, IOException;1436816047;Actually invoke the delegate Filter with the given request and response._@param delegate the delegate Filter_@param request the current HTTP request_@param response the current HTTP response_@param filterChain the current FilterChain_@throws ServletException if thrown by the Filter_@throws IOException if thrown by the Filter;protected void invokeDelegate(_			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)_			throws ServletException, IOException {__		delegate.doFilter(request, response, filterChain)__	};actually,invoke,the,delegate,filter,with,the,given,request,and,response,param,delegate,the,delegate,filter,param,request,the,current,http,request,param,response,the,current,http,response,param,filter,chain,the,current,filter,chain,throws,servlet,exception,if,thrown,by,the,filter,throws,ioexception,if,thrown,by,the,filter;protected,void,invoke,delegate,filter,delegate,servlet,request,request,servlet,response,response,filter,chain,filter,chain,throws,servlet,exception,ioexception,delegate,do,filter,request,response,filter,chain
DelegatingFilterProxy -> protected void invokeDelegate( 			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain) 			throws ServletException, IOException;1495868221;Actually invoke the delegate Filter with the given request and response._@param delegate the delegate Filter_@param request the current HTTP request_@param response the current HTTP response_@param filterChain the current FilterChain_@throws ServletException if thrown by the Filter_@throws IOException if thrown by the Filter;protected void invokeDelegate(_			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)_			throws ServletException, IOException {__		delegate.doFilter(request, response, filterChain)__	};actually,invoke,the,delegate,filter,with,the,given,request,and,response,param,delegate,the,delegate,filter,param,request,the,current,http,request,param,response,the,current,http,response,param,filter,chain,the,current,filter,chain,throws,servlet,exception,if,thrown,by,the,filter,throws,ioexception,if,thrown,by,the,filter;protected,void,invoke,delegate,filter,delegate,servlet,request,request,servlet,response,response,filter,chain,filter,chain,throws,servlet,exception,ioexception,delegate,do,filter,request,response,filter,chain
DelegatingFilterProxy -> protected void invokeDelegate( 			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain) 			throws ServletException, IOException;1496837955;Actually invoke the delegate Filter with the given request and response._@param delegate the delegate Filter_@param request the current HTTP request_@param response the current HTTP response_@param filterChain the current FilterChain_@throws ServletException if thrown by the Filter_@throws IOException if thrown by the Filter;protected void invokeDelegate(_			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)_			throws ServletException, IOException {__		delegate.doFilter(request, response, filterChain)__	};actually,invoke,the,delegate,filter,with,the,given,request,and,response,param,delegate,the,delegate,filter,param,request,the,current,http,request,param,response,the,current,http,response,param,filter,chain,the,current,filter,chain,throws,servlet,exception,if,thrown,by,the,filter,throws,ioexception,if,thrown,by,the,filter;protected,void,invoke,delegate,filter,delegate,servlet,request,request,servlet,response,response,filter,chain,filter,chain,throws,servlet,exception,ioexception,delegate,do,filter,request,response,filter,chain
DelegatingFilterProxy -> protected void invokeDelegate( 			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain) 			throws ServletException, IOException;1498780456;Actually invoke the delegate Filter with the given request and response._@param delegate the delegate Filter_@param request the current HTTP request_@param response the current HTTP response_@param filterChain the current FilterChain_@throws ServletException if thrown by the Filter_@throws IOException if thrown by the Filter;protected void invokeDelegate(_			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)_			throws ServletException, IOException {__		delegate.doFilter(request, response, filterChain)__	};actually,invoke,the,delegate,filter,with,the,given,request,and,response,param,delegate,the,delegate,filter,param,request,the,current,http,request,param,response,the,current,http,response,param,filter,chain,the,current,filter,chain,throws,servlet,exception,if,thrown,by,the,filter,throws,ioexception,if,thrown,by,the,filter;protected,void,invoke,delegate,filter,delegate,servlet,request,request,servlet,response,response,filter,chain,filter,chain,throws,servlet,exception,ioexception,delegate,do,filter,request,response,filter,chain
DelegatingFilterProxy -> protected void invokeDelegate( 			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain) 			throws ServletException, IOException;1500448076;Actually invoke the delegate Filter with the given request and response._@param delegate the delegate Filter_@param request the current HTTP request_@param response the current HTTP response_@param filterChain the current FilterChain_@throws ServletException if thrown by the Filter_@throws IOException if thrown by the Filter;protected void invokeDelegate(_			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)_			throws ServletException, IOException {__		delegate.doFilter(request, response, filterChain)__	};actually,invoke,the,delegate,filter,with,the,given,request,and,response,param,delegate,the,delegate,filter,param,request,the,current,http,request,param,response,the,current,http,response,param,filter,chain,the,current,filter,chain,throws,servlet,exception,if,thrown,by,the,filter,throws,ioexception,if,thrown,by,the,filter;protected,void,invoke,delegate,filter,delegate,servlet,request,request,servlet,response,response,filter,chain,filter,chain,throws,servlet,exception,ioexception,delegate,do,filter,request,response,filter,chain
DelegatingFilterProxy -> protected void invokeDelegate( 			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain) 			throws ServletException, IOException;1506468851;Actually invoke the delegate Filter with the given request and response._@param delegate the delegate Filter_@param request the current HTTP request_@param response the current HTTP response_@param filterChain the current FilterChain_@throws ServletException if thrown by the Filter_@throws IOException if thrown by the Filter;protected void invokeDelegate(_			Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)_			throws ServletException, IOException {__		delegate.doFilter(request, response, filterChain)__	};actually,invoke,the,delegate,filter,with,the,given,request,and,response,param,delegate,the,delegate,filter,param,request,the,current,http,request,param,response,the,current,http,response,param,filter,chain,the,current,filter,chain,throws,servlet,exception,if,thrown,by,the,filter,throws,ioexception,if,thrown,by,the,filter;protected,void,invoke,delegate,filter,delegate,servlet,request,request,servlet,response,response,filter,chain,filter,chain,throws,servlet,exception,ioexception,delegate,do,filter,request,response,filter,chain
DelegatingFilterProxy -> public void setTargetBeanName(@Nullable String targetBeanName);1500448076;Set the name of the target bean in the Spring application context._The target bean must implement the standard Servlet Filter interface._<p>By default, the {@code filter-name} as specified for the_DelegatingFilterProxy in {@code web.xml} will be used.;public void setTargetBeanName(@Nullable String targetBeanName) {_		this.targetBeanName = targetBeanName__	};set,the,name,of,the,target,bean,in,the,spring,application,context,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,by,default,the,code,filter,name,as,specified,for,the,delegating,filter,proxy,in,code,web,xml,will,be,used;public,void,set,target,bean,name,nullable,string,target,bean,name,this,target,bean,name,target,bean,name
DelegatingFilterProxy -> public void setTargetBeanName(@Nullable String targetBeanName);1506468851;Set the name of the target bean in the Spring application context._The target bean must implement the standard Servlet Filter interface._<p>By default, the {@code filter-name} as specified for the_DelegatingFilterProxy in {@code web.xml} will be used.;public void setTargetBeanName(@Nullable String targetBeanName) {_		this.targetBeanName = targetBeanName__	};set,the,name,of,the,target,bean,in,the,spring,application,context,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,by,default,the,code,filter,name,as,specified,for,the,delegating,filter,proxy,in,code,web,xml,will,be,used;public,void,set,target,bean,name,nullable,string,target,bean,name,this,target,bean,name,target,bean,name
DelegatingFilterProxy -> protected WebApplicationContext findWebApplicationContext();1328020251;Return the {@code WebApplicationContext} passed in at construction time, if available._Otherwise, attempt to retrieve a {@code WebApplicationContext} from the_{@code ServletContext} attribute with the {@linkplain #setContextAttribute_configured name} if set. Otherwise look up a {@code WebApplicationContext} under_the well-known "root" application context attribute. The_{@code WebApplicationContext} must have already been loaded and stored in the_{@code ServletContext} before this filter gets initialized (or invoked)._<p>Subclasses may override this method to provide a different_{@code WebApplicationContext} retrieval strategy._@return the {@code WebApplicationContext} for this proxy, or {@code null} if not_found_@see #DelegatingFilterProxy(String, WebApplicationContext)_@see #getContextAttribute()_@see WebApplicationContextUtils#getWebApplicationContext(javax.servlet.ServletContext)_@see WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;protected WebApplicationContext findWebApplicationContext() {_		if (this.webApplicationContext != null) {_			_			if (this.webApplicationContext instanceof ConfigurableApplicationContext) {_				if (!((ConfigurableApplicationContext)this.webApplicationContext).isActive()) {_					_					((ConfigurableApplicationContext)this.webApplicationContext).refresh()__				}_			}_			return this.webApplicationContext__		}_		String attrName = getContextAttribute()__		if (attrName != null) {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName)__		}_		else {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext())__		}_	};return,the,code,web,application,context,passed,in,at,construction,time,if,available,otherwise,attempt,to,retrieve,a,code,web,application,context,from,the,code,servlet,context,attribute,with,the,linkplain,set,context,attribute,configured,name,if,set,otherwise,look,up,a,code,web,application,context,under,the,well,known,root,application,context,attribute,the,code,web,application,context,must,have,already,been,loaded,and,stored,in,the,code,servlet,context,before,this,filter,gets,initialized,or,invoked,p,subclasses,may,override,this,method,to,provide,a,different,code,web,application,context,retrieval,strategy,return,the,code,web,application,context,for,this,proxy,or,code,null,if,not,found,see,delegating,filter,proxy,string,web,application,context,see,get,context,attribute,see,web,application,context,utils,get,web,application,context,javax,servlet,servlet,context,see,web,application,context;protected,web,application,context,find,web,application,context,if,this,web,application,context,null,if,this,web,application,context,instanceof,configurable,application,context,if,configurable,application,context,this,web,application,context,is,active,configurable,application,context,this,web,application,context,refresh,return,this,web,application,context,string,attr,name,get,context,attribute,if,attr,name,null,return,web,application,context,utils,get,web,application,context,get,servlet,context,attr,name,else,return,web,application,context,utils,get,web,application,context,get,servlet,context
DelegatingFilterProxy -> protected WebApplicationContext findWebApplicationContext();1356735495;Return the {@code WebApplicationContext} passed in at construction time, if available._Otherwise, attempt to retrieve a {@code WebApplicationContext} from the_{@code ServletContext} attribute with the {@linkplain #setContextAttribute_configured name} if set. Otherwise look up a {@code WebApplicationContext} under_the well-known "root" application context attribute. The_{@code WebApplicationContext} must have already been loaded and stored in the_{@code ServletContext} before this filter gets initialized (or invoked)._<p>Subclasses may override this method to provide a different_{@code WebApplicationContext} retrieval strategy._@return the {@code WebApplicationContext} for this proxy, or {@code null} if not_found_@see #DelegatingFilterProxy(String, WebApplicationContext)_@see #getContextAttribute()_@see WebApplicationContextUtils#getWebApplicationContext(javax.servlet.ServletContext)_@see WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;protected WebApplicationContext findWebApplicationContext() {_		if (this.webApplicationContext != null) {_			_			if (this.webApplicationContext instanceof ConfigurableApplicationContext) {_				if (!((ConfigurableApplicationContext)this.webApplicationContext).isActive()) {_					_					((ConfigurableApplicationContext)this.webApplicationContext).refresh()__				}_			}_			return this.webApplicationContext__		}_		String attrName = getContextAttribute()__		if (attrName != null) {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName)__		}_		else {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext())__		}_	};return,the,code,web,application,context,passed,in,at,construction,time,if,available,otherwise,attempt,to,retrieve,a,code,web,application,context,from,the,code,servlet,context,attribute,with,the,linkplain,set,context,attribute,configured,name,if,set,otherwise,look,up,a,code,web,application,context,under,the,well,known,root,application,context,attribute,the,code,web,application,context,must,have,already,been,loaded,and,stored,in,the,code,servlet,context,before,this,filter,gets,initialized,or,invoked,p,subclasses,may,override,this,method,to,provide,a,different,code,web,application,context,retrieval,strategy,return,the,code,web,application,context,for,this,proxy,or,code,null,if,not,found,see,delegating,filter,proxy,string,web,application,context,see,get,context,attribute,see,web,application,context,utils,get,web,application,context,javax,servlet,servlet,context,see,web,application,context;protected,web,application,context,find,web,application,context,if,this,web,application,context,null,if,this,web,application,context,instanceof,configurable,application,context,if,configurable,application,context,this,web,application,context,is,active,configurable,application,context,this,web,application,context,refresh,return,this,web,application,context,string,attr,name,get,context,attribute,if,attr,name,null,return,web,application,context,utils,get,web,application,context,get,servlet,context,attr,name,else,return,web,application,context,utils,get,web,application,context,get,servlet,context
DelegatingFilterProxy -> protected WebApplicationContext findWebApplicationContext();1357119239;Return the {@code WebApplicationContext} passed in at construction time, if available._Otherwise, attempt to retrieve a {@code WebApplicationContext} from the_{@code ServletContext} attribute with the {@linkplain #setContextAttribute_configured name} if set. Otherwise look up a {@code WebApplicationContext} under_the well-known "root" application context attribute. The_{@code WebApplicationContext} must have already been loaded and stored in the_{@code ServletContext} before this filter gets initialized (or invoked)._<p>Subclasses may override this method to provide a different_{@code WebApplicationContext} retrieval strategy._@return the {@code WebApplicationContext} for this proxy, or {@code null} if not_found_@see #DelegatingFilterProxy(String, WebApplicationContext)_@see #getContextAttribute()_@see WebApplicationContextUtils#getWebApplicationContext(javax.servlet.ServletContext)_@see WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;protected WebApplicationContext findWebApplicationContext() {_		if (this.webApplicationContext != null) {_			_			if (this.webApplicationContext instanceof ConfigurableApplicationContext) {_				if (!((ConfigurableApplicationContext)this.webApplicationContext).isActive()) {_					_					((ConfigurableApplicationContext)this.webApplicationContext).refresh()__				}_			}_			return this.webApplicationContext__		}_		String attrName = getContextAttribute()__		if (attrName != null) {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName)__		}_		else {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext())__		}_	};return,the,code,web,application,context,passed,in,at,construction,time,if,available,otherwise,attempt,to,retrieve,a,code,web,application,context,from,the,code,servlet,context,attribute,with,the,linkplain,set,context,attribute,configured,name,if,set,otherwise,look,up,a,code,web,application,context,under,the,well,known,root,application,context,attribute,the,code,web,application,context,must,have,already,been,loaded,and,stored,in,the,code,servlet,context,before,this,filter,gets,initialized,or,invoked,p,subclasses,may,override,this,method,to,provide,a,different,code,web,application,context,retrieval,strategy,return,the,code,web,application,context,for,this,proxy,or,code,null,if,not,found,see,delegating,filter,proxy,string,web,application,context,see,get,context,attribute,see,web,application,context,utils,get,web,application,context,javax,servlet,servlet,context,see,web,application,context;protected,web,application,context,find,web,application,context,if,this,web,application,context,null,if,this,web,application,context,instanceof,configurable,application,context,if,configurable,application,context,this,web,application,context,is,active,configurable,application,context,this,web,application,context,refresh,return,this,web,application,context,string,attr,name,get,context,attribute,if,attr,name,null,return,web,application,context,utils,get,web,application,context,get,servlet,context,attr,name,else,return,web,application,context,utils,get,web,application,context,get,servlet,context
DelegatingFilterProxy -> protected WebApplicationContext findWebApplicationContext();1368482696;Return the {@code WebApplicationContext} passed in at construction time, if available._Otherwise, attempt to retrieve a {@code WebApplicationContext} from the_{@code ServletContext} attribute with the {@linkplain #setContextAttribute_configured name} if set. Otherwise look up a {@code WebApplicationContext} under_the well-known "root" application context attribute. The_{@code WebApplicationContext} must have already been loaded and stored in the_{@code ServletContext} before this filter gets initialized (or invoked)._<p>Subclasses may override this method to provide a different_{@code WebApplicationContext} retrieval strategy._@return the {@code WebApplicationContext} for this proxy, or {@code null} if not_found_@see #DelegatingFilterProxy(String, WebApplicationContext)_@see #getContextAttribute()_@see WebApplicationContextUtils#getWebApplicationContext(javax.servlet.ServletContext)_@see WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;protected WebApplicationContext findWebApplicationContext() {_		if (this.webApplicationContext != null) {_			_			if (this.webApplicationContext instanceof ConfigurableApplicationContext) {_				if (!((ConfigurableApplicationContext)this.webApplicationContext).isActive()) {_					_					((ConfigurableApplicationContext)this.webApplicationContext).refresh()__				}_			}_			return this.webApplicationContext__		}_		String attrName = getContextAttribute()__		if (attrName != null) {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName)__		}_		else {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext())__		}_	};return,the,code,web,application,context,passed,in,at,construction,time,if,available,otherwise,attempt,to,retrieve,a,code,web,application,context,from,the,code,servlet,context,attribute,with,the,linkplain,set,context,attribute,configured,name,if,set,otherwise,look,up,a,code,web,application,context,under,the,well,known,root,application,context,attribute,the,code,web,application,context,must,have,already,been,loaded,and,stored,in,the,code,servlet,context,before,this,filter,gets,initialized,or,invoked,p,subclasses,may,override,this,method,to,provide,a,different,code,web,application,context,retrieval,strategy,return,the,code,web,application,context,for,this,proxy,or,code,null,if,not,found,see,delegating,filter,proxy,string,web,application,context,see,get,context,attribute,see,web,application,context,utils,get,web,application,context,javax,servlet,servlet,context,see,web,application,context;protected,web,application,context,find,web,application,context,if,this,web,application,context,null,if,this,web,application,context,instanceof,configurable,application,context,if,configurable,application,context,this,web,application,context,is,active,configurable,application,context,this,web,application,context,refresh,return,this,web,application,context,string,attr,name,get,context,attribute,if,attr,name,null,return,web,application,context,utils,get,web,application,context,get,servlet,context,attr,name,else,return,web,application,context,utils,get,web,application,context,get,servlet,context
DelegatingFilterProxy -> protected WebApplicationContext findWebApplicationContext();1375460233;Return the {@code WebApplicationContext} passed in at construction time, if available._Otherwise, attempt to retrieve a {@code WebApplicationContext} from the_{@code ServletContext} attribute with the {@linkplain #setContextAttribute_configured name} if set. Otherwise look up a {@code WebApplicationContext} under_the well-known "root" application context attribute. The_{@code WebApplicationContext} must have already been loaded and stored in the_{@code ServletContext} before this filter gets initialized (or invoked)._<p>Subclasses may override this method to provide a different_{@code WebApplicationContext} retrieval strategy._@return the {@code WebApplicationContext} for this proxy, or {@code null} if not found_@see #DelegatingFilterProxy(String, WebApplicationContext)_@see #getContextAttribute()_@see WebApplicationContextUtils#getWebApplicationContext(javax.servlet.ServletContext)_@see WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;protected WebApplicationContext findWebApplicationContext() {_		if (this.webApplicationContext != null) {_			_			if (this.webApplicationContext instanceof ConfigurableApplicationContext) {_				if (!((ConfigurableApplicationContext)this.webApplicationContext).isActive()) {_					_					((ConfigurableApplicationContext)this.webApplicationContext).refresh()__				}_			}_			return this.webApplicationContext__		}_		String attrName = getContextAttribute()__		if (attrName != null) {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName)__		}_		else {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext())__		}_	};return,the,code,web,application,context,passed,in,at,construction,time,if,available,otherwise,attempt,to,retrieve,a,code,web,application,context,from,the,code,servlet,context,attribute,with,the,linkplain,set,context,attribute,configured,name,if,set,otherwise,look,up,a,code,web,application,context,under,the,well,known,root,application,context,attribute,the,code,web,application,context,must,have,already,been,loaded,and,stored,in,the,code,servlet,context,before,this,filter,gets,initialized,or,invoked,p,subclasses,may,override,this,method,to,provide,a,different,code,web,application,context,retrieval,strategy,return,the,code,web,application,context,for,this,proxy,or,code,null,if,not,found,see,delegating,filter,proxy,string,web,application,context,see,get,context,attribute,see,web,application,context,utils,get,web,application,context,javax,servlet,servlet,context,see,web,application,context;protected,web,application,context,find,web,application,context,if,this,web,application,context,null,if,this,web,application,context,instanceof,configurable,application,context,if,configurable,application,context,this,web,application,context,is,active,configurable,application,context,this,web,application,context,refresh,return,this,web,application,context,string,attr,name,get,context,attribute,if,attr,name,null,return,web,application,context,utils,get,web,application,context,get,servlet,context,attr,name,else,return,web,application,context,utils,get,web,application,context,get,servlet,context
DelegatingFilterProxy -> protected WebApplicationContext findWebApplicationContext();1427228652;Return the {@code WebApplicationContext} passed in at construction time, if available._Otherwise, attempt to retrieve a {@code WebApplicationContext} from the_{@code ServletContext} attribute with the {@linkplain #setContextAttribute_configured name} if set. Otherwise look up a {@code WebApplicationContext} under_the well-known "root" application context attribute. The_{@code WebApplicationContext} must have already been loaded and stored in the_{@code ServletContext} before this filter gets initialized (or invoked)._<p>Subclasses may override this method to provide a different_{@code WebApplicationContext} retrieval strategy._@return the {@code WebApplicationContext} for this proxy, or {@code null} if not found_@see #DelegatingFilterProxy(String, WebApplicationContext)_@see #getContextAttribute()_@see WebApplicationContextUtils#getWebApplicationContext(javax.servlet.ServletContext)_@see WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;protected WebApplicationContext findWebApplicationContext() {_		if (this.webApplicationContext != null) {_			_			if (this.webApplicationContext instanceof ConfigurableApplicationContext) {_				if (!((ConfigurableApplicationContext)this.webApplicationContext).isActive()) {_					_					((ConfigurableApplicationContext)this.webApplicationContext).refresh()__				}_			}_			return this.webApplicationContext__		}_		String attrName = getContextAttribute()__		if (attrName != null) {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName)__		}_		else {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext())__		}_	};return,the,code,web,application,context,passed,in,at,construction,time,if,available,otherwise,attempt,to,retrieve,a,code,web,application,context,from,the,code,servlet,context,attribute,with,the,linkplain,set,context,attribute,configured,name,if,set,otherwise,look,up,a,code,web,application,context,under,the,well,known,root,application,context,attribute,the,code,web,application,context,must,have,already,been,loaded,and,stored,in,the,code,servlet,context,before,this,filter,gets,initialized,or,invoked,p,subclasses,may,override,this,method,to,provide,a,different,code,web,application,context,retrieval,strategy,return,the,code,web,application,context,for,this,proxy,or,code,null,if,not,found,see,delegating,filter,proxy,string,web,application,context,see,get,context,attribute,see,web,application,context,utils,get,web,application,context,javax,servlet,servlet,context,see,web,application,context;protected,web,application,context,find,web,application,context,if,this,web,application,context,null,if,this,web,application,context,instanceof,configurable,application,context,if,configurable,application,context,this,web,application,context,is,active,configurable,application,context,this,web,application,context,refresh,return,this,web,application,context,string,attr,name,get,context,attribute,if,attr,name,null,return,web,application,context,utils,get,web,application,context,get,servlet,context,attr,name,else,return,web,application,context,utils,get,web,application,context,get,servlet,context
DelegatingFilterProxy -> protected WebApplicationContext findWebApplicationContext();1436816047;Return the {@code WebApplicationContext} passed in at construction time, if available._Otherwise, attempt to retrieve a {@code WebApplicationContext} from the_{@code ServletContext} attribute with the {@linkplain #setContextAttribute_configured name} if set. Otherwise look up a {@code WebApplicationContext} under_the well-known "root" application context attribute. The_{@code WebApplicationContext} must have already been loaded and stored in the_{@code ServletContext} before this filter gets initialized (or invoked)._<p>Subclasses may override this method to provide a different_{@code WebApplicationContext} retrieval strategy._@return the {@code WebApplicationContext} for this proxy, or {@code null} if not found_@see #DelegatingFilterProxy(String, WebApplicationContext)_@see #getContextAttribute()_@see WebApplicationContextUtils#getWebApplicationContext(javax.servlet.ServletContext)_@see WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;protected WebApplicationContext findWebApplicationContext() {_		if (this.webApplicationContext != null) {_			_			if (this.webApplicationContext instanceof ConfigurableApplicationContext) {_				ConfigurableApplicationContext cac = (ConfigurableApplicationContext) this.webApplicationContext__				if (!cac.isActive()) {_					_					cac.refresh()__				}_			}_			return this.webApplicationContext__		}_		String attrName = getContextAttribute()__		if (attrName != null) {_			return WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName)__		}_		else {_			return WebApplicationContextUtils.findWebApplicationContext(getServletContext())__		}_	};return,the,code,web,application,context,passed,in,at,construction,time,if,available,otherwise,attempt,to,retrieve,a,code,web,application,context,from,the,code,servlet,context,attribute,with,the,linkplain,set,context,attribute,configured,name,if,set,otherwise,look,up,a,code,web,application,context,under,the,well,known,root,application,context,attribute,the,code,web,application,context,must,have,already,been,loaded,and,stored,in,the,code,servlet,context,before,this,filter,gets,initialized,or,invoked,p,subclasses,may,override,this,method,to,provide,a,different,code,web,application,context,retrieval,strategy,return,the,code,web,application,context,for,this,proxy,or,code,null,if,not,found,see,delegating,filter,proxy,string,web,application,context,see,get,context,attribute,see,web,application,context,utils,get,web,application,context,javax,servlet,servlet,context,see,web,application,context;protected,web,application,context,find,web,application,context,if,this,web,application,context,null,if,this,web,application,context,instanceof,configurable,application,context,configurable,application,context,cac,configurable,application,context,this,web,application,context,if,cac,is,active,cac,refresh,return,this,web,application,context,string,attr,name,get,context,attribute,if,attr,name,null,return,web,application,context,utils,get,web,application,context,get,servlet,context,attr,name,else,return,web,application,context,utils,find,web,application,context,get,servlet,context
DelegatingFilterProxy -> public DelegatingFilterProxy(Filter delegate);1328020251;Create a new {@code DelegatingFilterProxy} with the given {@link Filter} delegate._Bypasses entirely the need for interacting with a Spring application context,_specifying the {@linkplain #setTargetBeanName target bean name}, etc._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._@param delegate the {@code Filter} instance that this proxy will delegate to and_manage the lifecycle for (must not be {@code null})._@see #doFilter(ServletRequest, ServletResponse, FilterChain)_@see #invokeDelegate(Filter, ServletRequest, ServletResponse, FilterChain)_@see #destroy()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(Filter delegate) {_		Assert.notNull(delegate, "delegate Filter object must not be null")__		this.delegate = delegate__	};create,a,new,code,delegating,filter,proxy,with,the,given,link,filter,delegate,bypasses,entirely,the,need,for,interacting,with,a,spring,application,context,specifying,the,linkplain,set,target,bean,name,target,bean,name,etc,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,param,delegate,the,code,filter,instance,that,this,proxy,will,delegate,to,and,manage,the,lifecycle,for,must,not,be,code,null,see,do,filter,servlet,request,servlet,response,filter,chain,see,invoke,delegate,filter,servlet,request,servlet,response,filter,chain,see,destroy,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,filter,delegate,assert,not,null,delegate,delegate,filter,object,must,not,be,null,this,delegate,delegate
DelegatingFilterProxy -> public DelegatingFilterProxy(Filter delegate);1356735495;Create a new {@code DelegatingFilterProxy} with the given {@link Filter} delegate._Bypasses entirely the need for interacting with a Spring application context,_specifying the {@linkplain #setTargetBeanName target bean name}, etc._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._@param delegate the {@code Filter} instance that this proxy will delegate to and_manage the lifecycle for (must not be {@code null})._@see #doFilter(ServletRequest, ServletResponse, FilterChain)_@see #invokeDelegate(Filter, ServletRequest, ServletResponse, FilterChain)_@see #destroy()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(Filter delegate) {_		Assert.notNull(delegate, "delegate Filter object must not be null")__		this.delegate = delegate__	};create,a,new,code,delegating,filter,proxy,with,the,given,link,filter,delegate,bypasses,entirely,the,need,for,interacting,with,a,spring,application,context,specifying,the,linkplain,set,target,bean,name,target,bean,name,etc,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,param,delegate,the,code,filter,instance,that,this,proxy,will,delegate,to,and,manage,the,lifecycle,for,must,not,be,code,null,see,do,filter,servlet,request,servlet,response,filter,chain,see,invoke,delegate,filter,servlet,request,servlet,response,filter,chain,see,destroy,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,filter,delegate,assert,not,null,delegate,delegate,filter,object,must,not,be,null,this,delegate,delegate
DelegatingFilterProxy -> public DelegatingFilterProxy(Filter delegate);1357119239;Create a new {@code DelegatingFilterProxy} with the given {@link Filter} delegate._Bypasses entirely the need for interacting with a Spring application context,_specifying the {@linkplain #setTargetBeanName target bean name}, etc._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._@param delegate the {@code Filter} instance that this proxy will delegate to and_manage the lifecycle for (must not be {@code null})._@see #doFilter(ServletRequest, ServletResponse, FilterChain)_@see #invokeDelegate(Filter, ServletRequest, ServletResponse, FilterChain)_@see #destroy()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(Filter delegate) {_		Assert.notNull(delegate, "delegate Filter object must not be null")__		this.delegate = delegate__	};create,a,new,code,delegating,filter,proxy,with,the,given,link,filter,delegate,bypasses,entirely,the,need,for,interacting,with,a,spring,application,context,specifying,the,linkplain,set,target,bean,name,target,bean,name,etc,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,param,delegate,the,code,filter,instance,that,this,proxy,will,delegate,to,and,manage,the,lifecycle,for,must,not,be,code,null,see,do,filter,servlet,request,servlet,response,filter,chain,see,invoke,delegate,filter,servlet,request,servlet,response,filter,chain,see,destroy,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,filter,delegate,assert,not,null,delegate,delegate,filter,object,must,not,be,null,this,delegate,delegate
DelegatingFilterProxy -> public DelegatingFilterProxy(Filter delegate);1368482696;Create a new {@code DelegatingFilterProxy} with the given {@link Filter} delegate._Bypasses entirely the need for interacting with a Spring application context,_specifying the {@linkplain #setTargetBeanName target bean name}, etc._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._@param delegate the {@code Filter} instance that this proxy will delegate to and_manage the lifecycle for (must not be {@code null})._@see #doFilter(ServletRequest, ServletResponse, FilterChain)_@see #invokeDelegate(Filter, ServletRequest, ServletResponse, FilterChain)_@see #destroy()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(Filter delegate) {_		Assert.notNull(delegate, "delegate Filter object must not be null")__		this.delegate = delegate__	};create,a,new,code,delegating,filter,proxy,with,the,given,link,filter,delegate,bypasses,entirely,the,need,for,interacting,with,a,spring,application,context,specifying,the,linkplain,set,target,bean,name,target,bean,name,etc,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,param,delegate,the,code,filter,instance,that,this,proxy,will,delegate,to,and,manage,the,lifecycle,for,must,not,be,code,null,see,do,filter,servlet,request,servlet,response,filter,chain,see,invoke,delegate,filter,servlet,request,servlet,response,filter,chain,see,destroy,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,filter,delegate,assert,not,null,delegate,delegate,filter,object,must,not,be,null,this,delegate,delegate
DelegatingFilterProxy -> public DelegatingFilterProxy(Filter delegate);1375460233;Create a new {@code DelegatingFilterProxy} with the given {@link Filter} delegate._Bypasses entirely the need for interacting with a Spring application context,_specifying the {@linkplain #setTargetBeanName target bean name}, etc._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._@param delegate the {@code Filter} instance that this proxy will delegate to and_manage the lifecycle for (must not be {@code null})._@see #doFilter(ServletRequest, ServletResponse, FilterChain)_@see #invokeDelegate(Filter, ServletRequest, ServletResponse, FilterChain)_@see #destroy()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(Filter delegate) {_		Assert.notNull(delegate, "delegate Filter object must not be null")__		this.delegate = delegate__	};create,a,new,code,delegating,filter,proxy,with,the,given,link,filter,delegate,bypasses,entirely,the,need,for,interacting,with,a,spring,application,context,specifying,the,linkplain,set,target,bean,name,target,bean,name,etc,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,param,delegate,the,code,filter,instance,that,this,proxy,will,delegate,to,and,manage,the,lifecycle,for,must,not,be,code,null,see,do,filter,servlet,request,servlet,response,filter,chain,see,invoke,delegate,filter,servlet,request,servlet,response,filter,chain,see,destroy,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,filter,delegate,assert,not,null,delegate,delegate,filter,object,must,not,be,null,this,delegate,delegate
DelegatingFilterProxy -> public DelegatingFilterProxy(Filter delegate);1427228652;Create a new {@code DelegatingFilterProxy} with the given {@link Filter} delegate._Bypasses entirely the need for interacting with a Spring application context,_specifying the {@linkplain #setTargetBeanName target bean name}, etc._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._@param delegate the {@code Filter} instance that this proxy will delegate to and_manage the lifecycle for (must not be {@code null})._@see #doFilter(ServletRequest, ServletResponse, FilterChain)_@see #invokeDelegate(Filter, ServletRequest, ServletResponse, FilterChain)_@see #destroy()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(Filter delegate) {_		Assert.notNull(delegate, "delegate Filter object must not be null")__		this.delegate = delegate__	};create,a,new,code,delegating,filter,proxy,with,the,given,link,filter,delegate,bypasses,entirely,the,need,for,interacting,with,a,spring,application,context,specifying,the,linkplain,set,target,bean,name,target,bean,name,etc,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,param,delegate,the,code,filter,instance,that,this,proxy,will,delegate,to,and,manage,the,lifecycle,for,must,not,be,code,null,see,do,filter,servlet,request,servlet,response,filter,chain,see,invoke,delegate,filter,servlet,request,servlet,response,filter,chain,see,destroy,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,filter,delegate,assert,not,null,delegate,delegate,filter,object,must,not,be,null,this,delegate,delegate
DelegatingFilterProxy -> public DelegatingFilterProxy(Filter delegate);1436816047;Create a new {@code DelegatingFilterProxy} with the given {@link Filter} delegate._Bypasses entirely the need for interacting with a Spring application context,_specifying the {@linkplain #setTargetBeanName target bean name}, etc._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._@param delegate the {@code Filter} instance that this proxy will delegate to and_manage the lifecycle for (must not be {@code null})._@see #doFilter(ServletRequest, ServletResponse, FilterChain)_@see #invokeDelegate(Filter, ServletRequest, ServletResponse, FilterChain)_@see #destroy()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(Filter delegate) {_		Assert.notNull(delegate, "delegate Filter object must not be null")__		this.delegate = delegate__	};create,a,new,code,delegating,filter,proxy,with,the,given,link,filter,delegate,bypasses,entirely,the,need,for,interacting,with,a,spring,application,context,specifying,the,linkplain,set,target,bean,name,target,bean,name,etc,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,param,delegate,the,code,filter,instance,that,this,proxy,will,delegate,to,and,manage,the,lifecycle,for,must,not,be,code,null,see,do,filter,servlet,request,servlet,response,filter,chain,see,invoke,delegate,filter,servlet,request,servlet,response,filter,chain,see,destroy,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,filter,delegate,assert,not,null,delegate,delegate,filter,object,must,not,be,null,this,delegate,delegate
DelegatingFilterProxy -> public DelegatingFilterProxy(Filter delegate);1495868221;Create a new {@code DelegatingFilterProxy} with the given {@link Filter} delegate._Bypasses entirely the need for interacting with a Spring application context,_specifying the {@linkplain #setTargetBeanName target bean name}, etc._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._@param delegate the {@code Filter} instance that this proxy will delegate to and_manage the lifecycle for (must not be {@code null})._@see #doFilter(ServletRequest, ServletResponse, FilterChain)_@see #invokeDelegate(Filter, ServletRequest, ServletResponse, FilterChain)_@see #destroy()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(Filter delegate) {_		Assert.notNull(delegate, "delegate Filter object must not be null")__		this.delegate = delegate__	};create,a,new,code,delegating,filter,proxy,with,the,given,link,filter,delegate,bypasses,entirely,the,need,for,interacting,with,a,spring,application,context,specifying,the,linkplain,set,target,bean,name,target,bean,name,etc,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,param,delegate,the,code,filter,instance,that,this,proxy,will,delegate,to,and,manage,the,lifecycle,for,must,not,be,code,null,see,do,filter,servlet,request,servlet,response,filter,chain,see,invoke,delegate,filter,servlet,request,servlet,response,filter,chain,see,destroy,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,filter,delegate,assert,not,null,delegate,delegate,filter,object,must,not,be,null,this,delegate,delegate
DelegatingFilterProxy -> public DelegatingFilterProxy(Filter delegate);1496837955;Create a new {@code DelegatingFilterProxy} with the given {@link Filter} delegate._Bypasses entirely the need for interacting with a Spring application context,_specifying the {@linkplain #setTargetBeanName target bean name}, etc._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._@param delegate the {@code Filter} instance that this proxy will delegate to and_manage the lifecycle for (must not be {@code null})._@see #doFilter(ServletRequest, ServletResponse, FilterChain)_@see #invokeDelegate(Filter, ServletRequest, ServletResponse, FilterChain)_@see #destroy()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(Filter delegate) {_		Assert.notNull(delegate, "delegate Filter object must not be null")__		this.delegate = delegate__	};create,a,new,code,delegating,filter,proxy,with,the,given,link,filter,delegate,bypasses,entirely,the,need,for,interacting,with,a,spring,application,context,specifying,the,linkplain,set,target,bean,name,target,bean,name,etc,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,param,delegate,the,code,filter,instance,that,this,proxy,will,delegate,to,and,manage,the,lifecycle,for,must,not,be,code,null,see,do,filter,servlet,request,servlet,response,filter,chain,see,invoke,delegate,filter,servlet,request,servlet,response,filter,chain,see,destroy,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,filter,delegate,assert,not,null,delegate,delegate,filter,object,must,not,be,null,this,delegate,delegate
DelegatingFilterProxy -> public DelegatingFilterProxy(Filter delegate);1498780456;Create a new {@code DelegatingFilterProxy} with the given {@link Filter} delegate._Bypasses entirely the need for interacting with a Spring application context,_specifying the {@linkplain #setTargetBeanName target bean name}, etc._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._@param delegate the {@code Filter} instance that this proxy will delegate to and_manage the lifecycle for (must not be {@code null})._@see #doFilter(ServletRequest, ServletResponse, FilterChain)_@see #invokeDelegate(Filter, ServletRequest, ServletResponse, FilterChain)_@see #destroy()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(Filter delegate) {_		Assert.notNull(delegate, "Delegate Filter must not be null")__		this.delegate = delegate__	};create,a,new,code,delegating,filter,proxy,with,the,given,link,filter,delegate,bypasses,entirely,the,need,for,interacting,with,a,spring,application,context,specifying,the,linkplain,set,target,bean,name,target,bean,name,etc,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,param,delegate,the,code,filter,instance,that,this,proxy,will,delegate,to,and,manage,the,lifecycle,for,must,not,be,code,null,see,do,filter,servlet,request,servlet,response,filter,chain,see,invoke,delegate,filter,servlet,request,servlet,response,filter,chain,see,destroy,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,filter,delegate,assert,not,null,delegate,delegate,filter,must,not,be,null,this,delegate,delegate
DelegatingFilterProxy -> public DelegatingFilterProxy(Filter delegate);1500448076;Create a new {@code DelegatingFilterProxy} with the given {@link Filter} delegate._Bypasses entirely the need for interacting with a Spring application context,_specifying the {@linkplain #setTargetBeanName target bean name}, etc._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._@param delegate the {@code Filter} instance that this proxy will delegate to and_manage the lifecycle for (must not be {@code null})._@see #doFilter(ServletRequest, ServletResponse, FilterChain)_@see #invokeDelegate(Filter, ServletRequest, ServletResponse, FilterChain)_@see #destroy()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(Filter delegate) {_		Assert.notNull(delegate, "Delegate Filter must not be null")__		this.delegate = delegate__	};create,a,new,code,delegating,filter,proxy,with,the,given,link,filter,delegate,bypasses,entirely,the,need,for,interacting,with,a,spring,application,context,specifying,the,linkplain,set,target,bean,name,target,bean,name,etc,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,param,delegate,the,code,filter,instance,that,this,proxy,will,delegate,to,and,manage,the,lifecycle,for,must,not,be,code,null,see,do,filter,servlet,request,servlet,response,filter,chain,see,invoke,delegate,filter,servlet,request,servlet,response,filter,chain,see,destroy,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,filter,delegate,assert,not,null,delegate,delegate,filter,must,not,be,null,this,delegate,delegate
DelegatingFilterProxy -> public DelegatingFilterProxy(Filter delegate);1506468851;Create a new {@code DelegatingFilterProxy} with the given {@link Filter} delegate._Bypasses entirely the need for interacting with a Spring application context,_specifying the {@linkplain #setTargetBeanName target bean name}, etc._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._@param delegate the {@code Filter} instance that this proxy will delegate to and_manage the lifecycle for (must not be {@code null})._@see #doFilter(ServletRequest, ServletResponse, FilterChain)_@see #invokeDelegate(Filter, ServletRequest, ServletResponse, FilterChain)_@see #destroy()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(Filter delegate) {_		Assert.notNull(delegate, "Delegate Filter must not be null")__		this.delegate = delegate__	};create,a,new,code,delegating,filter,proxy,with,the,given,link,filter,delegate,bypasses,entirely,the,need,for,interacting,with,a,spring,application,context,specifying,the,linkplain,set,target,bean,name,target,bean,name,etc,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,param,delegate,the,code,filter,instance,that,this,proxy,will,delegate,to,and,manage,the,lifecycle,for,must,not,be,code,null,see,do,filter,servlet,request,servlet,response,filter,chain,see,invoke,delegate,filter,servlet,request,servlet,response,filter,chain,see,destroy,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,filter,delegate,assert,not,null,delegate,delegate,filter,must,not,be,null,this,delegate,delegate
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName, @Nullable WebApplicationContext wac);1495868221;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the given Spring {@code WebApplicationContext}._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter interface._<p>The given {@code WebApplicationContext} may or may not be refreshed when passed_in. If it has not, and if the context implements {@link ConfigurableApplicationContext},_a {@link ConfigurableApplicationContext#refresh() refresh()} will be attempted before_retrieving the named target bean._<p>This proxy's {@code Environment} will be inherited from the given_{@code WebApplicationContext}._@param targetBeanName name of the target filter bean in the Spring application_context (must not be {@code null})._@param wac the application context from which the target filter will be retrieved__if {@code null}, an application context will be looked up from {@code ServletContext}_as a fallback._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName, @Nullable WebApplicationContext wac) {_		Assert.hasText(targetBeanName, "target Filter bean name must not be null or empty")__		this.setTargetBeanName(targetBeanName)__		this.webApplicationContext = wac__		if (wac != null) {_			this.setEnvironment(wac.getEnvironment())__		}_	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,given,spring,code,web,application,context,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,the,given,code,web,application,context,may,or,may,not,be,refreshed,when,passed,in,if,it,has,not,and,if,the,context,implements,link,configurable,application,context,a,link,configurable,application,context,refresh,refresh,will,be,attempted,before,retrieving,the,named,target,bean,p,this,proxy,s,code,environment,will,be,inherited,from,the,given,code,web,application,context,param,target,bean,name,name,of,the,target,filter,bean,in,the,spring,application,context,must,not,be,code,null,param,wac,the,application,context,from,which,the,target,filter,will,be,retrieved,if,code,null,an,application,context,will,be,looked,up,from,code,servlet,context,as,a,fallback,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,nullable,web,application,context,wac,assert,has,text,target,bean,name,target,filter,bean,name,must,not,be,null,or,empty,this,set,target,bean,name,target,bean,name,this,web,application,context,wac,if,wac,null,this,set,environment,wac,get,environment
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName, @Nullable WebApplicationContext wac);1496837955;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the given Spring {@code WebApplicationContext}._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter interface._<p>The given {@code WebApplicationContext} may or may not be refreshed when passed_in. If it has not, and if the context implements {@link ConfigurableApplicationContext},_a {@link ConfigurableApplicationContext#refresh() refresh()} will be attempted before_retrieving the named target bean._<p>This proxy's {@code Environment} will be inherited from the given_{@code WebApplicationContext}._@param targetBeanName name of the target filter bean in the Spring application_context (must not be {@code null})._@param wac the application context from which the target filter will be retrieved__if {@code null}, an application context will be looked up from {@code ServletContext}_as a fallback._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName, @Nullable WebApplicationContext wac) {_		Assert.hasText(targetBeanName, "target Filter bean name must not be null or empty")__		this.setTargetBeanName(targetBeanName)__		this.webApplicationContext = wac__		if (wac != null) {_			this.setEnvironment(wac.getEnvironment())__		}_	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,given,spring,code,web,application,context,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,the,given,code,web,application,context,may,or,may,not,be,refreshed,when,passed,in,if,it,has,not,and,if,the,context,implements,link,configurable,application,context,a,link,configurable,application,context,refresh,refresh,will,be,attempted,before,retrieving,the,named,target,bean,p,this,proxy,s,code,environment,will,be,inherited,from,the,given,code,web,application,context,param,target,bean,name,name,of,the,target,filter,bean,in,the,spring,application,context,must,not,be,code,null,param,wac,the,application,context,from,which,the,target,filter,will,be,retrieved,if,code,null,an,application,context,will,be,looked,up,from,code,servlet,context,as,a,fallback,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,nullable,web,application,context,wac,assert,has,text,target,bean,name,target,filter,bean,name,must,not,be,null,or,empty,this,set,target,bean,name,target,bean,name,this,web,application,context,wac,if,wac,null,this,set,environment,wac,get,environment
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName, @Nullable WebApplicationContext wac);1498780456;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the given Spring {@code WebApplicationContext}._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter interface._<p>The given {@code WebApplicationContext} may or may not be refreshed when passed_in. If it has not, and if the context implements {@link ConfigurableApplicationContext},_a {@link ConfigurableApplicationContext#refresh() refresh()} will be attempted before_retrieving the named target bean._<p>This proxy's {@code Environment} will be inherited from the given_{@code WebApplicationContext}._@param targetBeanName name of the target filter bean in the Spring application_context (must not be {@code null})._@param wac the application context from which the target filter will be retrieved__if {@code null}, an application context will be looked up from {@code ServletContext}_as a fallback._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName, @Nullable WebApplicationContext wac) {_		Assert.hasText(targetBeanName, "target Filter bean name must not be null or empty")__		this.setTargetBeanName(targetBeanName)__		this.webApplicationContext = wac__		if (wac != null) {_			this.setEnvironment(wac.getEnvironment())__		}_	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,given,spring,code,web,application,context,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,the,given,code,web,application,context,may,or,may,not,be,refreshed,when,passed,in,if,it,has,not,and,if,the,context,implements,link,configurable,application,context,a,link,configurable,application,context,refresh,refresh,will,be,attempted,before,retrieving,the,named,target,bean,p,this,proxy,s,code,environment,will,be,inherited,from,the,given,code,web,application,context,param,target,bean,name,name,of,the,target,filter,bean,in,the,spring,application,context,must,not,be,code,null,param,wac,the,application,context,from,which,the,target,filter,will,be,retrieved,if,code,null,an,application,context,will,be,looked,up,from,code,servlet,context,as,a,fallback,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,nullable,web,application,context,wac,assert,has,text,target,bean,name,target,filter,bean,name,must,not,be,null,or,empty,this,set,target,bean,name,target,bean,name,this,web,application,context,wac,if,wac,null,this,set,environment,wac,get,environment
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName, @Nullable WebApplicationContext wac);1500448076;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the given Spring {@code WebApplicationContext}._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter interface._<p>The given {@code WebApplicationContext} may or may not be refreshed when passed_in. If it has not, and if the context implements {@link ConfigurableApplicationContext},_a {@link ConfigurableApplicationContext#refresh() refresh()} will be attempted before_retrieving the named target bean._<p>This proxy's {@code Environment} will be inherited from the given_{@code WebApplicationContext}._@param targetBeanName name of the target filter bean in the Spring application_context (must not be {@code null})._@param wac the application context from which the target filter will be retrieved__if {@code null}, an application context will be looked up from {@code ServletContext}_as a fallback._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName, @Nullable WebApplicationContext wac) {_		Assert.hasText(targetBeanName, "target Filter bean name must not be null or empty")__		this.setTargetBeanName(targetBeanName)__		this.webApplicationContext = wac__		if (wac != null) {_			this.setEnvironment(wac.getEnvironment())__		}_	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,given,spring,code,web,application,context,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,the,given,code,web,application,context,may,or,may,not,be,refreshed,when,passed,in,if,it,has,not,and,if,the,context,implements,link,configurable,application,context,a,link,configurable,application,context,refresh,refresh,will,be,attempted,before,retrieving,the,named,target,bean,p,this,proxy,s,code,environment,will,be,inherited,from,the,given,code,web,application,context,param,target,bean,name,name,of,the,target,filter,bean,in,the,spring,application,context,must,not,be,code,null,param,wac,the,application,context,from,which,the,target,filter,will,be,retrieved,if,code,null,an,application,context,will,be,looked,up,from,code,servlet,context,as,a,fallback,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,nullable,web,application,context,wac,assert,has,text,target,bean,name,target,filter,bean,name,must,not,be,null,or,empty,this,set,target,bean,name,target,bean,name,this,web,application,context,wac,if,wac,null,this,set,environment,wac,get,environment
DelegatingFilterProxy -> public DelegatingFilterProxy(String targetBeanName, @Nullable WebApplicationContext wac);1506468851;Create a new {@code DelegatingFilterProxy} that will retrieve the named target_bean from the given Spring {@code WebApplicationContext}._<p>For use in Servlet 3.0+ environments where instance-based registration of_filters is supported._<p>The target bean must implement the standard Servlet Filter interface._<p>The given {@code WebApplicationContext} may or may not be refreshed when passed_in. If it has not, and if the context implements {@link ConfigurableApplicationContext},_a {@link ConfigurableApplicationContext#refresh() refresh()} will be attempted before_retrieving the named target bean._<p>This proxy's {@code Environment} will be inherited from the given_{@code WebApplicationContext}._@param targetBeanName name of the target filter bean in the Spring application_context (must not be {@code null})._@param wac the application context from which the target filter will be retrieved__if {@code null}, an application context will be looked up from {@code ServletContext}_as a fallback._@see #findWebApplicationContext()_@see #setEnvironment(org.springframework.core.env.Environment);public DelegatingFilterProxy(String targetBeanName, @Nullable WebApplicationContext wac) {_		Assert.hasText(targetBeanName, "Target Filter bean name must not be null or empty")__		this.setTargetBeanName(targetBeanName)__		this.webApplicationContext = wac__		if (wac != null) {_			this.setEnvironment(wac.getEnvironment())__		}_	};create,a,new,code,delegating,filter,proxy,that,will,retrieve,the,named,target,bean,from,the,given,spring,code,web,application,context,p,for,use,in,servlet,3,0,environments,where,instance,based,registration,of,filters,is,supported,p,the,target,bean,must,implement,the,standard,servlet,filter,interface,p,the,given,code,web,application,context,may,or,may,not,be,refreshed,when,passed,in,if,it,has,not,and,if,the,context,implements,link,configurable,application,context,a,link,configurable,application,context,refresh,refresh,will,be,attempted,before,retrieving,the,named,target,bean,p,this,proxy,s,code,environment,will,be,inherited,from,the,given,code,web,application,context,param,target,bean,name,name,of,the,target,filter,bean,in,the,spring,application,context,must,not,be,code,null,param,wac,the,application,context,from,which,the,target,filter,will,be,retrieved,if,code,null,an,application,context,will,be,looked,up,from,code,servlet,context,as,a,fallback,see,find,web,application,context,see,set,environment,org,springframework,core,env,environment;public,delegating,filter,proxy,string,target,bean,name,nullable,web,application,context,wac,assert,has,text,target,bean,name,target,filter,bean,name,must,not,be,null,or,empty,this,set,target,bean,name,target,bean,name,this,web,application,context,wac,if,wac,null,this,set,environment,wac,get,environment
