commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify a custom prefix to use for JSON output. Default is none.  * @see #setPrefixJson  */ ;/**  * Specify a custom prefix to use for JSON output. Default is none.  * @see #setPrefixJson  */ public void setJsonPrefix(String jsonPrefix) {     this.jsonPrefix = jsonPrefix. }
true;public;1;3;/**  * Indicate whether the JSON output by this view should be prefixed with ")]}', ".  * Default is {@code false}.  * <p>Prefixing the JSON string in this manner is used to help prevent JSON  * Hijacking. The prefix renders the string syntactically invalid as a script  * so that it cannot be hijacked.  * This prefix should be stripped before parsing the string as JSON.  * @see #setJsonPrefix  */ ;/**  * Indicate whether the JSON output by this view should be prefixed with ")]}', ".  * Default is {@code false}.  * <p>Prefixing the JSON string in this manner is used to help prevent JSON  * Hijacking. The prefix renders the string syntactically invalid as a script  * so that it cannot be hijacked.  * This prefix should be stripped before parsing the string as JSON.  * @see #setJsonPrefix  */ public void setPrefixJson(boolean prefixJson) {     this.jsonPrefix = (prefixJson ? ")]}', " : null). }
false;public,final;3;6;;@Override public final Object read(Type type, @Nullable Class<?> contextClass, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {     return readResolved(GenericTypeResolver.resolveType(type, contextClass), inputMessage). }
false;protected,final;2;6;;@Override protected final Object readInternal(Class<?> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {     return readResolved(clazz, inputMessage). }
false;private;2;11;;private Object readResolved(Type resolvedType, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {     Reader reader = getReader(inputMessage).     try {         return readInternal(resolvedType, reader).     } catch (Exception ex) {         throw new HttpMessageNotReadableException("Could not read JSON: " + ex.getMessage(), ex, inputMessage).     } }
false;protected,final;3;16;;@Override protected final void writeInternal(Object o, @Nullable Type type, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {     Writer writer = getWriter(outputMessage).     if (this.jsonPrefix != null) {         writer.append(this.jsonPrefix).     }     try {         writeInternal(o, type, writer).     } catch (Exception ex) {         throw new HttpMessageNotWritableException("Could not write JSON: " + ex.getMessage(), ex).     }     writer.flush(). }
true;protected,abstract;2;1;/**  * Template method that reads the JSON-bound object from the given {@link Reader}.  * @param resolvedType the resolved generic type  * @param reader the {@code} Reader to use  * @return the JSON-bound object  * @throws Exception in case of read/parse failures  */ ;/**  * Template method that reads the JSON-bound object from the given {@link Reader}.  * @param resolvedType the resolved generic type  * @param reader the {@code} Reader to use  * @return the JSON-bound object  * @throws Exception in case of read/parse failures  */ protected abstract Object readInternal(Type resolvedType, Reader reader) throws Exception.
true;protected,abstract;3;1;/**  * Template method that writes the JSON-bound object to the given {@link Writer}.  * @param o the object to write to the output message  * @param type the type of object to write (may be {@code null})  * @param writer the {@code} Writer to use  * @throws Exception in case of write failures  */ ;/**  * Template method that writes the JSON-bound object to the given {@link Writer}.  * @param o the object to write to the output message  * @param type the type of object to write (may be {@code null})  * @param writer the {@code} Writer to use  * @throws Exception in case of write failures  */ protected abstract void writeInternal(Object o, @Nullable Type type, Writer writer) throws Exception.
false;private,static;1;3;;private static Reader getReader(HttpInputMessage inputMessage) throws IOException {     return new InputStreamReader(inputMessage.getBody(), getCharset(inputMessage.getHeaders())). }
false;private,static;1;3;;private static Writer getWriter(HttpOutputMessage outputMessage) throws IOException {     return new OutputStreamWriter(outputMessage.getBody(), getCharset(outputMessage.getHeaders())). }
false;private,static;1;4;;private static Charset getCharset(HttpHeaders headers) {     Charset charset = (headers.getContentType() != null ? headers.getContentType().getCharset() : null).     return (charset != null ? charset : DEFAULT_CHARSET). }
