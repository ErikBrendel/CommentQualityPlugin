commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * Set the underlying read timeout in milliseconds.  * A value of 0 specifies an infinite timeout.  */ ;/**  * Set the underlying read timeout in milliseconds.  * A value of 0 specifies an infinite timeout.  */ public void setReadTimeout(int readTimeout) {     this.client = this.client.newBuilder().readTimeout(readTimeout, TimeUnit.MILLISECONDS).build(). }
true;public;1;5;/**  * Set the underlying write timeout in milliseconds.  * A value of 0 specifies an infinite timeout.  */ ;/**  * Set the underlying write timeout in milliseconds.  * A value of 0 specifies an infinite timeout.  */ public void setWriteTimeout(int writeTimeout) {     this.client = this.client.newBuilder().writeTimeout(writeTimeout, TimeUnit.MILLISECONDS).build(). }
true;public;1;5;/**  * Set the underlying connect timeout in milliseconds.  * A value of 0 specifies an infinite timeout.  */ ;/**  * Set the underlying connect timeout in milliseconds.  * A value of 0 specifies an infinite timeout.  */ public void setConnectTimeout(int connectTimeout) {     this.client = this.client.newBuilder().connectTimeout(connectTimeout, TimeUnit.MILLISECONDS).build(). }
false;public;2;4;;@Override public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) {     return new OkHttp3ClientHttpRequest(this.client, uri, httpMethod). }
false;public;2;4;;@Override public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) {     return new OkHttp3AsyncClientHttpRequest(this.client, uri, httpMethod). }
false;public;0;11;;@Override public void destroy() throws IOException {     if (this.defaultClient) {         // Clean up the client if we created it in the constructor         Cache cache = this.client.cache().         if (cache != null) {             cache.close().         }         this.client.dispatcher().executorService().shutdown().     } }
false;static;4;16;;static Request buildRequest(HttpHeaders headers, byte[] content, URI uri, HttpMethod method) throws MalformedURLException {     okhttp3.MediaType contentType = getContentType(headers).     RequestBody body = (content.length > 0 || okhttp3.internal.http.HttpMethod.requiresRequestBody(method.name()) ? RequestBody.create(contentType, content) : null).     Request.Builder builder = new Request.Builder().url(uri.toURL()).method(method.name(), body).     headers.forEach((headerName, headerValues) -> {         for (String headerValue : headerValues) {             builder.addHeader(headerName, headerValue).         }     }).     return builder.build(). }
false;private,static;1;5;;@Nullable private static okhttp3.MediaType getContentType(HttpHeaders headers) {     String rawContentType = headers.getFirst(HttpHeaders.CONTENT_TYPE).     return (StringUtils.hasText(rawContentType) ? okhttp3.MediaType.parse(rawContentType) : null). }
