commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Return the HTTP method of the request.  * @return the HTTP method as an {@code HttpMethod} enum value  */ ;/**  * Return the HTTP method of the request.  * @return the HTTP method as an {@code HttpMethod} enum value  */ @Nullable public HttpMethod getMethod() {     return this.method. }
true;public;0;3;/**  * Return the URL of the request.  * @return the URL as a {@code URI}  */ ;/**  * Return the URL of the request.  * @return the URL as a {@code URI}  */ public URI getUrl() {     return this.url. }
true;public;0;10;/**  * Return the type of the request's body.  * @return the request's body type, or {@code null} if not known  * @since 4.3  */ ;/**  * Return the type of the request's body.  * @return the request's body type, or {@code null} if not known  * @since 4.3  */ @Nullable public Type getType() {     if (this.type == null) {         T body = getBody().         if (body != null) {             return body.getClass().         }     }     return this.type. }
false;public;1;12;;@Override public boolean equals(@Nullable Object other) {     if (this == other) {         return true.     }     if (!super.equals(other)) {         return false.     }     RequestEntity<?> otherEntity = (RequestEntity<?>) other.     return (ObjectUtils.nullSafeEquals(getMethod(), otherEntity.getMethod()) && ObjectUtils.nullSafeEquals(getUrl(), otherEntity.getUrl())). }
false;public;0;7;;@Override public int hashCode() {     int hashCode = super.hashCode().     hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(this.method).     hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(this.url).     return hashCode. }
false;public;0;17;;@Override public String toString() {     StringBuilder builder = new StringBuilder("<").     builder.append(getMethod()).     builder.append(' ').     builder.append(getUrl()).     builder.append(',').     T body = getBody().     HttpHeaders headers = getHeaders().     if (body != null) {         builder.append(body).         builder.append(',').     }     builder.append(headers).     builder.append('>').     return builder.toString(). }
true;public,static;2;3;/**  * Create a builder with the given method and url.  * @param method the HTTP method (GET, POST, etc)  * @param url the URL  * @return the created builder  */ ;// Static builder methods /**  * Create a builder with the given method and url.  * @param method the HTTP method (GET, POST, etc)  * @param url the URL  * @return the created builder  */ public static BodyBuilder method(HttpMethod method, URI url) {     return new DefaultBodyBuilder(method, url). }
true;public,static;1;3;/**  * Create an HTTP GET builder with the given url.  * @param url the URL  * @return the created builder  */ ;/**  * Create an HTTP GET builder with the given url.  * @param url the URL  * @return the created builder  */ public static HeadersBuilder<?> get(URI url) {     return method(HttpMethod.GET, url). }
true;public,static;1;3;/**  * Create an HTTP HEAD builder with the given url.  * @param url the URL  * @return the created builder  */ ;/**  * Create an HTTP HEAD builder with the given url.  * @param url the URL  * @return the created builder  */ public static HeadersBuilder<?> head(URI url) {     return method(HttpMethod.HEAD, url). }
true;public,static;1;3;/**  * Create an HTTP POST builder with the given url.  * @param url the URL  * @return the created builder  */ ;/**  * Create an HTTP POST builder with the given url.  * @param url the URL  * @return the created builder  */ public static BodyBuilder post(URI url) {     return method(HttpMethod.POST, url). }
true;public,static;1;3;/**  * Create an HTTP PUT builder with the given url.  * @param url the URL  * @return the created builder  */ ;/**  * Create an HTTP PUT builder with the given url.  * @param url the URL  * @return the created builder  */ public static BodyBuilder put(URI url) {     return method(HttpMethod.PUT, url). }
true;public,static;1;3;/**  * Create an HTTP PATCH builder with the given url.  * @param url the URL  * @return the created builder  */ ;/**  * Create an HTTP PATCH builder with the given url.  * @param url the URL  * @return the created builder  */ public static BodyBuilder patch(URI url) {     return method(HttpMethod.PATCH, url). }
true;public,static;1;3;/**  * Create an HTTP DELETE builder with the given url.  * @param url the URL  * @return the created builder  */ ;/**  * Create an HTTP DELETE builder with the given url.  * @param url the URL  * @return the created builder  */ public static HeadersBuilder<?> delete(URI url) {     return method(HttpMethod.DELETE, url). }
true;public,static;1;3;/**  * Creates an HTTP OPTIONS builder with the given url.  * @param url the URL  * @return the created builder  */ ;/**  * Creates an HTTP OPTIONS builder with the given url.  * @param url the URL  * @return the created builder  */ public static HeadersBuilder<?> options(URI url) {     return method(HttpMethod.OPTIONS, url). }
true;;2;1;/**  * Add the given, single header value under the given name.  * @param headerName  the header name  * @param headerValues the header value(s)  * @return this builder  * @see HttpHeaders#add(String, String)  */ ;/**  * Add the given, single header value under the given name.  * @param headerName  the header name  * @param headerValues the header value(s)  * @return this builder  * @see HttpHeaders#add(String, String)  */ B header(String headerName, String... headerValues).
true;;1;1;/**  * Set the list of acceptable {@linkplain MediaType media types}, as  * specified by the {@code Accept} header.  * @param acceptableMediaTypes the acceptable media types  */ ;/**  * Set the list of acceptable {@linkplain MediaType media types}, as  * specified by the {@code Accept} header.  * @param acceptableMediaTypes the acceptable media types  */ B accept(MediaType... acceptableMediaTypes).
true;;1;1;/**  * Set the list of acceptable {@linkplain Charset charsets}, as specified  * by the {@code Accept-Charset} header.  * @param acceptableCharsets the acceptable charsets  */ ;/**  * Set the list of acceptable {@linkplain Charset charsets}, as specified  * by the {@code Accept-Charset} header.  * @param acceptableCharsets the acceptable charsets  */ B acceptCharset(Charset... acceptableCharsets).
true;;1;1;/**  * Set the value of the {@code If-Modified-Since} header.  * @param ifModifiedSince the new value of the header  * @since 5.1.4  */ ;/**  * Set the value of the {@code If-Modified-Since} header.  * @param ifModifiedSince the new value of the header  * @since 5.1.4  */ B ifModifiedSince(ZonedDateTime ifModifiedSince).
true;;1;1;/**  * Set the value of the {@code If-Modified-Since} header.  * @param ifModifiedSince the new value of the header  * @since 5.1.4  */ ;/**  * Set the value of the {@code If-Modified-Since} header.  * @param ifModifiedSince the new value of the header  * @since 5.1.4  */ B ifModifiedSince(Instant ifModifiedSince).
true;;1;1;/**  * Set the value of the {@code If-Modified-Since} header.  * <p>The date should be specified as the number of milliseconds since  * January 1, 1970 GMT.  * @param ifModifiedSince the new value of the header  */ ;/**  * Set the value of the {@code If-Modified-Since} header.  * <p>The date should be specified as the number of milliseconds since  * January 1, 1970 GMT.  * @param ifModifiedSince the new value of the header  */ B ifModifiedSince(long ifModifiedSince).
true;;1;1;/**  * Set the values of the {@code If-None-Match} header.  * @param ifNoneMatches the new value of the header  */ ;/**  * Set the values of the {@code If-None-Match} header.  * @param ifNoneMatches the new value of the header  */ B ifNoneMatch(String... ifNoneMatches).
true;;0;1;/**  * Builds the request entity with no body.  * @return the request entity  * @see BodyBuilder#body(Object)  */ ;/**  * Builds the request entity with no body.  * @return the request entity  * @see BodyBuilder#body(Object)  */ RequestEntity<Void> build().
true;;1;1;/**  * Set the length of the body in bytes, as specified by the  * {@code Content-Length} header.  * @param contentLength the content length  * @return this builder  * @see HttpHeaders#setContentLength(long)  */ ;/**  * Set the length of the body in bytes, as specified by the  * {@code Content-Length} header.  * @param contentLength the content length  * @return this builder  * @see HttpHeaders#setContentLength(long)  */ BodyBuilder contentLength(long contentLength).
true;;1;1;/**  * Set the {@linkplain MediaType media type} of the body, as specified  * by the {@code Content-Type} header.  * @param contentType the content type  * @return this builder  * @see HttpHeaders#setContentType(MediaType)  */ ;/**  * Set the {@linkplain MediaType media type} of the body, as specified  * by the {@code Content-Type} header.  * @param contentType the content type  * @return this builder  * @see HttpHeaders#setContentType(MediaType)  */ BodyBuilder contentType(MediaType contentType).
true;;1;1;/**  * Set the body of the request entity and build the RequestEntity.  * @param <T> the type of the body  * @param body the body of the request entity  * @return the built request entity  */ ;/**  * Set the body of the request entity and build the RequestEntity.  * @param <T> the type of the body  * @param body the body of the request entity  * @return the built request entity  */ <T> RequestEntity<T> body(T body).
true;;2;1;/**  * Set the body and type of the request entity and build the RequestEntity.  * @param <T> the type of the body  * @param body the body of the request entity  * @param type the type of the body, useful for generic type resolution  * @return the built request entity  * @since 4.3  */ ;/**  * Set the body and type of the request entity and build the RequestEntity.  * @param <T> the type of the body  * @param body the body of the request entity  * @param type the type of the body, useful for generic type resolution  * @return the built request entity  * @since 4.3  */ <T> RequestEntity<T> body(T body, Type type).
false;public;2;7;;@Override public BodyBuilder header(String headerName, String... headerValues) {     for (String headerValue : headerValues) {         this.headers.add(headerName, headerValue).     }     return this. }
false;public;1;5;;@Override public BodyBuilder accept(MediaType... acceptableMediaTypes) {     this.headers.setAccept(Arrays.asList(acceptableMediaTypes)).     return this. }
false;public;1;5;;@Override public BodyBuilder acceptCharset(Charset... acceptableCharsets) {     this.headers.setAcceptCharset(Arrays.asList(acceptableCharsets)).     return this. }
false;public;1;5;;@Override public BodyBuilder contentLength(long contentLength) {     this.headers.setContentLength(contentLength).     return this. }
false;public;1;5;;@Override public BodyBuilder contentType(MediaType contentType) {     this.headers.setContentType(contentType).     return this. }
false;public;1;5;;@Override public BodyBuilder ifModifiedSince(ZonedDateTime ifModifiedSince) {     this.headers.setIfModifiedSince(ifModifiedSince).     return this. }
false;public;1;5;;@Override public BodyBuilder ifModifiedSince(Instant ifModifiedSince) {     this.headers.setIfModifiedSince(ifModifiedSince).     return this. }
false;public;1;5;;@Override public BodyBuilder ifModifiedSince(long ifModifiedSince) {     this.headers.setIfModifiedSince(ifModifiedSince).     return this. }
false;public;1;5;;@Override public BodyBuilder ifNoneMatch(String... ifNoneMatches) {     this.headers.setIfNoneMatch(Arrays.asList(ifNoneMatches)).     return this. }
false;public;0;4;;@Override public RequestEntity<Void> build() {     return new RequestEntity<>(this.headers, this.method, this.url). }
false;public;1;4;;@Override public <T> RequestEntity<T> body(T body) {     return new RequestEntity<>(body, this.headers, this.method, this.url). }
false;public;2;4;;@Override public <T> RequestEntity<T> body(T body, Type type) {     return new RequestEntity<>(body, this.headers, this.method, this.url, type). }
