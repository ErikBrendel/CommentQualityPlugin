commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public boolean supportsParameter(MethodParameter parameter) {     RequestParam requestParam = parameter.getParameterAnnotation(RequestParam.class).     return (requestParam != null && Map.class.isAssignableFrom(parameter.getParameterType()) && !StringUtils.hasText(requestParam.name())). }
false;public;4;70;;@Override public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {     ResolvableType resolvableType = ResolvableType.forMethodParameter(parameter).     if (MultiValueMap.class.isAssignableFrom(parameter.getParameterType())) {         // MultiValueMap         Class<?> valueType = resolvableType.as(MultiValueMap.class).getGeneric(1).resolve().         if (valueType == MultipartFile.class) {             MultipartRequest multipartRequest = MultipartResolutionDelegate.resolveMultipartRequest(webRequest).             return (multipartRequest != null ? multipartRequest.getMultiFileMap() : new LinkedMultiValueMap<>(0)).         } else if (valueType == Part.class) {             HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class).             if (servletRequest != null && MultipartResolutionDelegate.isMultipartRequest(servletRequest)) {                 Collection<Part> parts = servletRequest.getParts().                 LinkedMultiValueMap<String, Part> result = new LinkedMultiValueMap<>(parts.size()).                 for (Part part : parts) {                     result.add(part.getName(), part).                 }                 return result.             }             return new LinkedMultiValueMap<>(0).         } else {             Map<String, String[]> parameterMap = webRequest.getParameterMap().             MultiValueMap<String, String> result = new LinkedMultiValueMap<>(parameterMap.size()).             parameterMap.forEach((key, values) -> {                 for (String value : values) {                     result.add(key, value).                 }             }).             return result.         }     } else {         // Regular Map         Class<?> valueType = resolvableType.asMap().getGeneric(1).resolve().         if (valueType == MultipartFile.class) {             MultipartRequest multipartRequest = MultipartResolutionDelegate.resolveMultipartRequest(webRequest).             return (multipartRequest != null ? multipartRequest.getFileMap() : new LinkedHashMap<>(0)).         } else if (valueType == Part.class) {             HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class).             if (servletRequest != null && MultipartResolutionDelegate.isMultipartRequest(servletRequest)) {                 Collection<Part> parts = servletRequest.getParts().                 LinkedHashMap<String, Part> result = new LinkedHashMap<>(parts.size()).                 for (Part part : parts) {                     if (!result.containsKey(part.getName())) {                         result.put(part.getName(), part).                     }                 }                 return result.             }             return new LinkedHashMap<>(0).         } else {             Map<String, String[]> parameterMap = webRequest.getParameterMap().             Map<String, String> result = new LinkedHashMap<>(parameterMap.size()).             parameterMap.forEach((key, values) -> {                 if (values.length > 0) {                     result.put(key, values[0]).                 }             }).             return result.         }     } }
