commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public PhaseId getPhaseId() {     return PhaseId.ANY_PHASE. }
false;public;1;6;;@Override public void beforePhase(PhaseEvent event) {     for (PhaseListener listener : getDelegates(event.getFacesContext())) {         listener.beforePhase(event).     } }
false;public;1;6;;@Override public void afterPhase(PhaseEvent event) {     for (PhaseListener listener : getDelegates(event.getFacesContext())) {         listener.afterPhase(event).     } }
true;protected;1;4;/**  * Obtain the delegate PhaseListener beans from the Spring root WebApplicationContext.  * @param facesContext the current JSF context  * @return a Collection of PhaseListener objects  * @see #getBeanFactory  * @see org.springframework.beans.factory.ListableBeanFactory#getBeansOfType(Class)  */ ;/**  * Obtain the delegate PhaseListener beans from the Spring root WebApplicationContext.  * @param facesContext the current JSF context  * @return a Collection of PhaseListener objects  * @see #getBeanFactory  * @see org.springframework.beans.factory.ListableBeanFactory#getBeansOfType(Class)  */ protected Collection<PhaseListener> getDelegates(FacesContext facesContext) {     ListableBeanFactory bf = getBeanFactory(facesContext).     return BeanFactoryUtils.beansOfTypeIncludingAncestors(bf, PhaseListener.class, true, false).values(). }
true;protected;1;3;/**  * Retrieve the Spring BeanFactory to delegate bean name resolution to.  * <p>The default implementation delegates to {@code getWebApplicationContext}.  * Can be overridden to provide an arbitrary ListableBeanFactory reference to  * resolve against. usually, this will be a full Spring ApplicationContext.  * @param facesContext the current JSF context  * @return the Spring ListableBeanFactory (never {@code null})  * @see #getWebApplicationContext  */ ;/**  * Retrieve the Spring BeanFactory to delegate bean name resolution to.  * <p>The default implementation delegates to {@code getWebApplicationContext}.  * Can be overridden to provide an arbitrary ListableBeanFactory reference to  * resolve against. usually, this will be a full Spring ApplicationContext.  * @param facesContext the current JSF context  * @return the Spring ListableBeanFactory (never {@code null})  * @see #getWebApplicationContext  */ protected ListableBeanFactory getBeanFactory(FacesContext facesContext) {     return getWebApplicationContext(facesContext). }
true;protected;1;3;/**  * Retrieve the web application context to delegate bean name resolution to.  * <p>The default implementation delegates to FacesContextUtils.  * @param facesContext the current JSF context  * @return the Spring web application context (never {@code null})  * @see FacesContextUtils#getRequiredWebApplicationContext  */ ;/**  * Retrieve the web application context to delegate bean name resolution to.  * <p>The default implementation delegates to FacesContextUtils.  * @param facesContext the current JSF context  * @return the Spring web application context (never {@code null})  * @see FacesContextUtils#getRequiredWebApplicationContext  */ protected WebApplicationContext getWebApplicationContext(FacesContext facesContext) {     return FacesContextUtils.getRequiredWebApplicationContext(facesContext). }
