# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType);1496837955;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType);1496853199;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType);1498780456;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType);1499879583;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType);1499973642;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType);1502974979;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType);1529234840;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType);1529264540;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType);1530174524;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType);1530737169;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType);1535105212;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1407939778;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {__	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1408382828;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {__	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1427966598;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {__	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1427969145;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {__	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1434985545;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {__	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1435237353;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {__	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1435277737;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {__	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1435277909;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {__	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1435677405;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {__	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1437567612;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {__	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1437755059;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {__	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1439824671;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {__	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1448626779;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1450368890;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1450380453;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1453711096;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1454612400;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1456785272;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1460565262;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1460566372;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1460567039;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1460635993;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1460636765;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1460644739;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1467730834;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1468964586;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1468999763;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1470334838;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1481192386;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1491384686;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1491831389;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1494009848;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1494019141;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1495868221;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1496242568;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1496837955;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1496853199;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1498780456;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1499879583;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1499973642;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1502974979;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1529234840;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1529264540;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1530174524;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1530737169;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writePrefix(JsonGenerator generator, Object object) throws IOException;1535105212;Write a prefix before the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writePrefix(JsonGenerator generator, Object object) throws IOException {_	};write,a,prefix,before,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,prefix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1407939778;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1408382828;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1427966598;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1427969145;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1434985545;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1435237353;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1435277737;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1435277909;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1435677405;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1437567612;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1437755059;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1439824671;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1448626779;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1450368890;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1450380453;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1453711096;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1454612400;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1456785272;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1460565262;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1460566372;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1460567039;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1460635993;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1460636765;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1460644739;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1467730834;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1468964586;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1468999763;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1470334838;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1481192386;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1491384686;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1491831389;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1494009848;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1494019141;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1495868221;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1496242568;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1496837955;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1496853199;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1498780456;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1499879583;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1499973642;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1502974979;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1529234840;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1529264540;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1530174524;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1530737169;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1535105212;Set the {@code ObjectMapper} for this view._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory}_can be configured that provides custom serializers for specific types._The other option for refining the serialization process is to use Jackson's_provided annotations on the types to be serialized, in which case a_custom-configured ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,view,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1407939778;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1408382828;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1427966598;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1427969145;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1434985545;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1435237353;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1435277737;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1435277909;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1435677405;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1437567612;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1437755059;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1439824671;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1448626779;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1450368890;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1450380453;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1453711096;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1454612400;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1456785272;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1460565262;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1460566372;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1460567039;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1460635993;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1460636765;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1460644739;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1467730834;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1468964586;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1468999763;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1470334838;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1481192386;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1491384686;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1491831389;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1494009848;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1494019141;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1495868221;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1496242568;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1496837955;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1496853199;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1498780456;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1499879583;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1499973642;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1502974979;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1529234840;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1529264540;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1530174524;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1530737169;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public void setPrettyPrint(boolean prettyPrint);1535105212;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1407939778;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1408382828;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1427966598;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1427969145;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1434985545;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1435237353;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1435277737;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1435277909;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1435677405;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1437567612;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1437755059;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1439824671;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1448626779;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1450368890;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1450380453;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1453711096;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1454612400;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1456785272;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1460565262;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1460566372;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1460567039;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1460635993;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1460636765;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1460644739;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1467730834;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1468964586;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1468999763;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1470334838;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1481192386;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1491384686;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1491831389;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1494009848;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1494019141;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1495868221;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1496242568;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1496837955;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1496853199;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1499973642;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1502974979;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1529234840;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1529264540;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1530174524;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1530737169;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> public ObjectMapper getObjectMapper();1535105212;Return the underlying {@code ObjectMapper} for this view.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1407939778;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {__	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1408382828;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {__	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1427966598;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {__	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1427969145;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {__	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1434985545;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {__	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1435237353;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {__	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1435277737;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {__	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1435277909;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {__	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1435677405;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {__	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1437567612;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {__	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1437755059;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {__	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1439824671;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {__	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1448626779;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1450368890;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1450380453;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1453711096;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1454612400;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1456785272;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1460565262;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1460566372;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1460567039;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1460635993;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1460636765;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1460644739;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1467730834;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1468964586;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1468999763;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1470334838;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1481192386;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1491384686;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1491831389;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1494009848;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1494019141;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1495868221;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1496242568;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1496837955;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1496853199;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1498780456;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1499879583;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1499973642;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1502974979;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1529234840;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1529264540;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1530174524;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1530737169;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected void writeSuffix(JsonGenerator generator, Object object) throws IOException;1535105212;Write a suffix after the main content._@param generator the generator to use for writing content._@param object the object to write to the output message.;protected void writeSuffix(JsonGenerator generator, Object object) throws IOException {_	};write,a,suffix,after,the,main,content,param,generator,the,generator,to,use,for,writing,content,param,object,the,object,to,write,to,the,output,message;protected,void,write,suffix,json,generator,generator,object,object,throws,ioexception
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1407939778;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1408382828;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1427966598;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1427969145;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1434985545;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1435237353;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1435277737;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1435277909;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1435677405;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1437567612;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1437755059;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1439824671;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the type to return the java type for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature, can be {@code null}_signature, can be {@code null}_@return the java type;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,type,to,return,the,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,signature,can,be,code,null,return,the,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1448626779;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1450368890;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1450380453;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		return this.objectMapper.getTypeFactory().constructType(type, contextClass)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,return,this,object,mapper,get,type,factory,construct,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1453711096;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		if (type instanceof TypeVariable && contextClass != null) {_			ResolvableType resolvedType = resolveVariable((TypeVariable<?>)type, ResolvableType.forClass(contextClass))__			if (resolvedType != ResolvableType.NONE) {_				return typeFactory.constructType(resolvedType.resolve())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,if,type,instanceof,type,variable,context,class,null,resolvable,type,resolved,type,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,resolvable,type,none,return,type,factory,construct,type,resolved,type,resolve,return,type,factory,construct,type,type
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1454612400;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		if (type instanceof TypeVariable && contextClass != null) {_			ResolvableType resolvedType = resolveVariable(_					(TypeVariable<?>) type, ResolvableType.forClass(contextClass))__			if (resolvedType != ResolvableType.NONE) {_				return typeFactory.constructType(resolvedType.resolve())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,if,type,instanceof,type,variable,context,class,null,resolvable,type,resolved,type,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,resolvable,type,none,return,type,factory,construct,type,resolved,type,resolve,return,type,factory,construct,type,type
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1456785272;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		if (type instanceof TypeVariable && contextClass != null) {_			ResolvableType resolvedType = resolveVariable(_					(TypeVariable<?>) type, ResolvableType.forClass(contextClass))__			if (resolvedType != ResolvableType.NONE) {_				return typeFactory.constructType(resolvedType.resolve())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,if,type,instanceof,type,variable,context,class,null,resolvable,type,resolved,type,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,resolvable,type,none,return,type,factory,construct,type,resolved,type,resolve,return,type,factory,construct,type,type
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1460565262;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		if (type instanceof TypeVariable && contextClass != null) {_			ResolvableType resolvedType = resolveVariable(_					(TypeVariable<?>) type, ResolvableType.forClass(contextClass))__			if (resolvedType != ResolvableType.NONE) {_				return typeFactory.constructType(resolvedType.resolve())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,if,type,instanceof,type,variable,context,class,null,resolvable,type,resolved,type,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,resolvable,type,none,return,type,factory,construct,type,resolved,type,resolve,return,type,factory,construct,type,type
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1460566372;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		if (type instanceof TypeVariable && contextClass != null) {_			ResolvableType resolvedType = resolveVariable(_					(TypeVariable<?>) type, ResolvableType.forClass(contextClass))__			if (resolvedType != ResolvableType.NONE) {_				return typeFactory.constructType(resolvedType.resolve())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,if,type,instanceof,type,variable,context,class,null,resolvable,type,resolved,type,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,resolvable,type,none,return,type,factory,construct,type,resolved,type,resolve,return,type,factory,construct,type,type
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1460567039;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		if (type instanceof TypeVariable && contextClass != null) {_			ResolvableType resolvedType = resolveVariable(_					(TypeVariable<?>) type, ResolvableType.forClass(contextClass))__			if (resolvedType != ResolvableType.NONE) {_				return typeFactory.constructType(resolvedType.resolve())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,if,type,instanceof,type,variable,context,class,null,resolvable,type,resolved,type,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,resolvable,type,none,return,type,factory,construct,type,resolved,type,resolve,return,type,factory,construct,type,type
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1460635993;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		if (type instanceof TypeVariable && contextClass != null) {_			ResolvableType resolvedType = resolveVariable(_					(TypeVariable<?>) type, ResolvableType.forClass(contextClass))__			if (resolvedType != ResolvableType.NONE) {_				return typeFactory.constructType(resolvedType.resolve())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,if,type,instanceof,type,variable,context,class,null,resolvable,type,resolved,type,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,resolvable,type,none,return,type,factory,construct,type,resolved,type,resolve,return,type,factory,construct,type,type
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1460636765;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		if (type instanceof TypeVariable && contextClass != null) {_			ResolvableType resolvedType = resolveVariable(_					(TypeVariable<?>) type, ResolvableType.forClass(contextClass))__			if (resolvedType != ResolvableType.NONE) {_				return typeFactory.constructType(resolvedType.resolve())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,if,type,instanceof,type,variable,context,class,null,resolvable,type,resolved,type,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,resolvable,type,none,return,type,factory,construct,type,resolved,type,resolve,return,type,factory,construct,type,type
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1460644739;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		if (type instanceof TypeVariable && contextClass != null) {_			ResolvableType resolvedType = resolveVariable(_					(TypeVariable<?>) type, ResolvableType.forClass(contextClass))__			if (resolvedType != ResolvableType.NONE) {_				return typeFactory.constructType(resolvedType.resolve())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,if,type,instanceof,type,variable,context,class,null,resolvable,type,resolved,type,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,resolvable,type,none,return,type,factory,construct,type,resolved,type,resolve,return,type,factory,construct,type,type
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1467730834;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		if (type instanceof TypeVariable && contextClass != null) {_			ResolvableType resolvedType = resolveVariable(_					(TypeVariable<?>) type, ResolvableType.forClass(contextClass))__			if (resolvedType != ResolvableType.NONE) {_				return typeFactory.constructType(resolvedType.resolve())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,if,type,instanceof,type,variable,context,class,null,resolvable,type,resolved,type,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,resolvable,type,none,return,type,factory,construct,type,resolved,type,resolve,return,type,factory,construct,type,type
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1468964586;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		if (type instanceof TypeVariable && contextClass != null) {_			ResolvableType resolvedType = resolveVariable(_					(TypeVariable<?>) type, ResolvableType.forClass(contextClass))__			if (resolvedType != ResolvableType.NONE) {_				return typeFactory.constructType(resolvedType.resolve())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,if,type,instanceof,type,variable,context,class,null,resolvable,type,resolved,type,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,resolvable,type,none,return,type,factory,construct,type,resolved,type,resolve,return,type,factory,construct,type,type
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1468999763;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		if (contextClass != null) {_			ResolvableType resolvedType = ResolvableType.forType(type)__			if (type instanceof TypeVariable) {_				ResolvableType resolvedTypeVariable = resolveVariable(_						(TypeVariable<?>) type, ResolvableType.forClass(contextClass))__				if (resolvedTypeVariable != ResolvableType.NONE) {_					return typeFactory.constructType(resolvedTypeVariable.resolve())__				}_			}_			else if (type instanceof ParameterizedType && resolvedType.hasUnresolvableGenerics()) {_				ParameterizedType parameterizedType = (ParameterizedType) type__				Class<?>[] generics = new Class<?>[parameterizedType.getActualTypeArguments().length]__				Type[] typeArguments = parameterizedType.getActualTypeArguments()__				for (int i = 0_ i < typeArguments.length_ i++) {_					Type typeArgument = typeArguments[i]__					if (typeArgument instanceof TypeVariable) {_						ResolvableType resolvedTypeArgument = resolveVariable(_								(TypeVariable<?>) typeArgument, ResolvableType.forClass(contextClass))__						if (resolvedTypeArgument != ResolvableType.NONE) {_							generics[i] = resolvedTypeArgument.resolve()__						}_						else {_							generics[i] = ResolvableType.forType(typeArgument).resolve()__						}_					}_					else {_						generics[i] = ResolvableType.forType(typeArgument).resolve()__					}_				}_				return typeFactory.constructType(ResolvableType._						forClassWithGenerics(resolvedType.getRawClass(), generics).getType())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,if,context,class,null,resolvable,type,resolved,type,resolvable,type,for,type,type,if,type,instanceof,type,variable,resolvable,type,resolved,type,variable,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,variable,resolvable,type,none,return,type,factory,construct,type,resolved,type,variable,resolve,else,if,type,instanceof,parameterized,type,resolved,type,has,unresolvable,generics,parameterized,type,parameterized,type,parameterized,type,type,class,generics,new,class,parameterized,type,get,actual,type,arguments,length,type,type,arguments,parameterized,type,get,actual,type,arguments,for,int,i,0,i,type,arguments,length,i,type,type,argument,type,arguments,i,if,type,argument,instanceof,type,variable,resolvable,type,resolved,type,argument,resolve,variable,type,variable,type,argument,resolvable,type,for,class,context,class,if,resolved,type,argument,resolvable,type,none,generics,i,resolved,type,argument,resolve,else,generics,i,resolvable,type,for,type,type,argument,resolve,else,generics,i,resolvable,type,for,type,type,argument,resolve,return,type,factory,construct,type,resolvable,type,for,class,with,generics,resolved,type,get,raw,class,generics,get,type,return,type,factory,construct,type,type
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1470334838;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		if (contextClass != null) {_			ResolvableType resolvedType = ResolvableType.forType(type)__			if (type instanceof TypeVariable) {_				ResolvableType resolvedTypeVariable = resolveVariable(_						(TypeVariable<?>) type, ResolvableType.forClass(contextClass))__				if (resolvedTypeVariable != ResolvableType.NONE) {_					return typeFactory.constructType(resolvedTypeVariable.resolve())__				}_			}_			else if (type instanceof ParameterizedType && resolvedType.hasUnresolvableGenerics()) {_				ParameterizedType parameterizedType = (ParameterizedType) type__				Class<?>[] generics = new Class<?>[parameterizedType.getActualTypeArguments().length]__				Type[] typeArguments = parameterizedType.getActualTypeArguments()__				for (int i = 0_ i < typeArguments.length_ i++) {_					Type typeArgument = typeArguments[i]__					if (typeArgument instanceof TypeVariable) {_						ResolvableType resolvedTypeArgument = resolveVariable(_								(TypeVariable<?>) typeArgument, ResolvableType.forClass(contextClass))__						if (resolvedTypeArgument != ResolvableType.NONE) {_							generics[i] = resolvedTypeArgument.resolve()__						}_						else {_							generics[i] = ResolvableType.forType(typeArgument).resolve()__						}_					}_					else {_						generics[i] = ResolvableType.forType(typeArgument).resolve()__					}_				}_				return typeFactory.constructType(ResolvableType._						forClassWithGenerics(resolvedType.getRawClass(), generics).getType())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,if,context,class,null,resolvable,type,resolved,type,resolvable,type,for,type,type,if,type,instanceof,type,variable,resolvable,type,resolved,type,variable,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,variable,resolvable,type,none,return,type,factory,construct,type,resolved,type,variable,resolve,else,if,type,instanceof,parameterized,type,resolved,type,has,unresolvable,generics,parameterized,type,parameterized,type,parameterized,type,type,class,generics,new,class,parameterized,type,get,actual,type,arguments,length,type,type,arguments,parameterized,type,get,actual,type,arguments,for,int,i,0,i,type,arguments,length,i,type,type,argument,type,arguments,i,if,type,argument,instanceof,type,variable,resolvable,type,resolved,type,argument,resolve,variable,type,variable,type,argument,resolvable,type,for,class,context,class,if,resolved,type,argument,resolvable,type,none,generics,i,resolved,type,argument,resolve,else,generics,i,resolvable,type,for,type,type,argument,resolve,else,generics,i,resolvable,type,for,type,type,argument,resolve,return,type,factory,construct,type,resolvable,type,for,class,with,generics,resolved,type,get,raw,class,generics,get,type,return,type,factory,construct,type,type
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1481192386;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		if (contextClass != null) {_			ResolvableType resolvedType = ResolvableType.forType(type)__			if (type instanceof TypeVariable) {_				ResolvableType resolvedTypeVariable = resolveVariable(_						(TypeVariable<?>) type, ResolvableType.forClass(contextClass))__				if (resolvedTypeVariable != ResolvableType.NONE) {_					return typeFactory.constructType(resolvedTypeVariable.resolve())__				}_			}_			else if (type instanceof ParameterizedType && resolvedType.hasUnresolvableGenerics()) {_				ParameterizedType parameterizedType = (ParameterizedType) type__				Class<?>[] generics = new Class<?>[parameterizedType.getActualTypeArguments().length]__				Type[] typeArguments = parameterizedType.getActualTypeArguments()__				for (int i = 0_ i < typeArguments.length_ i++) {_					Type typeArgument = typeArguments[i]__					if (typeArgument instanceof TypeVariable) {_						ResolvableType resolvedTypeArgument = resolveVariable(_								(TypeVariable<?>) typeArgument, ResolvableType.forClass(contextClass))__						if (resolvedTypeArgument != ResolvableType.NONE) {_							generics[i] = resolvedTypeArgument.resolve()__						}_						else {_							generics[i] = ResolvableType.forType(typeArgument).resolve()__						}_					}_					else {_						generics[i] = ResolvableType.forType(typeArgument).resolve()__					}_				}_				return typeFactory.constructType(ResolvableType._						forClassWithGenerics(resolvedType.getRawClass(), generics).getType())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,if,context,class,null,resolvable,type,resolved,type,resolvable,type,for,type,type,if,type,instanceof,type,variable,resolvable,type,resolved,type,variable,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,variable,resolvable,type,none,return,type,factory,construct,type,resolved,type,variable,resolve,else,if,type,instanceof,parameterized,type,resolved,type,has,unresolvable,generics,parameterized,type,parameterized,type,parameterized,type,type,class,generics,new,class,parameterized,type,get,actual,type,arguments,length,type,type,arguments,parameterized,type,get,actual,type,arguments,for,int,i,0,i,type,arguments,length,i,type,type,argument,type,arguments,i,if,type,argument,instanceof,type,variable,resolvable,type,resolved,type,argument,resolve,variable,type,variable,type,argument,resolvable,type,for,class,context,class,if,resolved,type,argument,resolvable,type,none,generics,i,resolved,type,argument,resolve,else,generics,i,resolvable,type,for,type,type,argument,resolve,else,generics,i,resolvable,type,for,type,type,argument,resolve,return,type,factory,construct,type,resolvable,type,for,class,with,generics,resolved,type,get,raw,class,generics,get,type,return,type,factory,construct,type,type
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1491384686;Return the Jackson {@link JavaType} for the specified type and context class._<p>The default implementation returns {@code typeFactory.constructType(type, contextClass)},_but this can be overridden in subclasses, to allow for custom generic collection handling._For instance:_<pre class="code">_protected JavaType getJavaType(Type type) {_if (type instanceof Class && List.class.isAssignableFrom((Class)type)) {_return TypeFactory.collectionType(ArrayList.class, MyBean.class)__} else {_return super.getJavaType(type)____</pre>_@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		if (contextClass != null) {_			ResolvableType resolvedType = ResolvableType.forType(type)__			if (type instanceof TypeVariable) {_				ResolvableType resolvedTypeVariable = resolveVariable(_						(TypeVariable<?>) type, ResolvableType.forClass(contextClass))__				if (resolvedTypeVariable != ResolvableType.NONE) {_					return typeFactory.constructType(resolvedTypeVariable.resolve())__				}_			}_			else if (type instanceof ParameterizedType && resolvedType.hasUnresolvableGenerics()) {_				ParameterizedType parameterizedType = (ParameterizedType) type__				Class<?>[] generics = new Class<?>[parameterizedType.getActualTypeArguments().length]__				Type[] typeArguments = parameterizedType.getActualTypeArguments()__				for (int i = 0_ i < typeArguments.length_ i++) {_					Type typeArgument = typeArguments[i]__					if (typeArgument instanceof TypeVariable) {_						ResolvableType resolvedTypeArgument = resolveVariable(_								(TypeVariable<?>) typeArgument, ResolvableType.forClass(contextClass))__						if (resolvedTypeArgument != ResolvableType.NONE) {_							generics[i] = resolvedTypeArgument.resolve()__						}_						else {_							generics[i] = ResolvableType.forType(typeArgument).resolve()__						}_					}_					else {_						generics[i] = ResolvableType.forType(typeArgument).resolve()__					}_				}_				return typeFactory.constructType(ResolvableType._						forClassWithGenerics(resolvedType.getRawClass(), generics).getType())__			}_		}_		return typeFactory.constructType(type)__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,p,the,default,implementation,returns,code,type,factory,construct,type,type,context,class,but,this,can,be,overridden,in,subclasses,to,allow,for,custom,generic,collection,handling,for,instance,pre,class,code,protected,java,type,get,java,type,type,type,if,type,instanceof,class,list,class,is,assignable,from,class,type,return,type,factory,collection,type,array,list,class,my,bean,class,else,return,super,get,java,type,type,pre,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,if,context,class,null,resolvable,type,resolved,type,resolvable,type,for,type,type,if,type,instanceof,type,variable,resolvable,type,resolved,type,variable,resolve,variable,type,variable,type,resolvable,type,for,class,context,class,if,resolved,type,variable,resolvable,type,none,return,type,factory,construct,type,resolved,type,variable,resolve,else,if,type,instanceof,parameterized,type,resolved,type,has,unresolvable,generics,parameterized,type,parameterized,type,parameterized,type,type,class,generics,new,class,parameterized,type,get,actual,type,arguments,length,type,type,arguments,parameterized,type,get,actual,type,arguments,for,int,i,0,i,type,arguments,length,i,type,type,argument,type,arguments,i,if,type,argument,instanceof,type,variable,resolvable,type,resolved,type,argument,resolve,variable,type,variable,type,argument,resolvable,type,for,class,context,class,if,resolved,type,argument,resolvable,type,none,generics,i,resolved,type,argument,resolve,else,generics,i,resolvable,type,for,type,type,argument,resolve,else,generics,i,resolvable,type,for,type,type,argument,resolve,return,type,factory,construct,type,resolvable,type,for,class,with,generics,resolved,type,get,raw,class,generics,get,type,return,type,factory,construct,type,type
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1491831389;Return the Jackson {@link JavaType} for the specified type and context class._@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		return typeFactory.constructType(GenericTypeResolver.resolveType(type, contextClass))__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,return,type,factory,construct,type,generic,type,resolver,resolve,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1494009848;Return the Jackson {@link JavaType} for the specified type and context class._@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		return typeFactory.constructType(GenericTypeResolver.resolveType(type, contextClass))__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,return,type,factory,construct,type,generic,type,resolver,resolve,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, Class<?> contextClass);1494019141;Return the Jackson {@link JavaType} for the specified type and context class._@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		return typeFactory.constructType(GenericTypeResolver.resolveType(type, contextClass))__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,return,type,factory,construct,type,generic,type,resolver,resolve,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass);1495868221;Return the Jackson {@link JavaType} for the specified type and context class._@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		return typeFactory.constructType(GenericTypeResolver.resolveType(type, contextClass))__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,nullable,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,return,type,factory,construct,type,generic,type,resolver,resolve,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass);1496242568;Return the Jackson {@link JavaType} for the specified type and context class._@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		return typeFactory.constructType(GenericTypeResolver.resolveType(type, contextClass))__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,nullable,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,return,type,factory,construct,type,generic,type,resolver,resolve,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass);1496837955;Return the Jackson {@link JavaType} for the specified type and context class._@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		return typeFactory.constructType(GenericTypeResolver.resolveType(type, contextClass))__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,nullable,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,return,type,factory,construct,type,generic,type,resolver,resolve,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass);1496853199;Return the Jackson {@link JavaType} for the specified type and context class._@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		return typeFactory.constructType(GenericTypeResolver.resolveType(type, contextClass))__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,nullable,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,return,type,factory,construct,type,generic,type,resolver,resolve,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass);1498780456;Return the Jackson {@link JavaType} for the specified type and context class._@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		return typeFactory.constructType(GenericTypeResolver.resolveType(type, contextClass))__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,nullable,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,return,type,factory,construct,type,generic,type,resolver,resolve,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass);1499879583;Return the Jackson {@link JavaType} for the specified type and context class._@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		return typeFactory.constructType(GenericTypeResolver.resolveType(type, contextClass))__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,nullable,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,return,type,factory,construct,type,generic,type,resolver,resolve,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass);1499973642;Return the Jackson {@link JavaType} for the specified type and context class._@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		return typeFactory.constructType(GenericTypeResolver.resolveType(type, contextClass))__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,nullable,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,return,type,factory,construct,type,generic,type,resolver,resolve,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass);1502974979;Return the Jackson {@link JavaType} for the specified type and context class._@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		return typeFactory.constructType(GenericTypeResolver.resolveType(type, contextClass))__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,nullable,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,return,type,factory,construct,type,generic,type,resolver,resolve,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass);1529234840;Return the Jackson {@link JavaType} for the specified type and context class._@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		return typeFactory.constructType(GenericTypeResolver.resolveType(type, contextClass))__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,nullable,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,return,type,factory,construct,type,generic,type,resolver,resolve,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass);1529264540;Return the Jackson {@link JavaType} for the specified type and context class._@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		return typeFactory.constructType(GenericTypeResolver.resolveType(type, contextClass))__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,nullable,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,return,type,factory,construct,type,generic,type,resolver,resolve,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass);1530174524;Return the Jackson {@link JavaType} for the specified type and context class._@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		return typeFactory.constructType(GenericTypeResolver.resolveType(type, contextClass))__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,nullable,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,return,type,factory,construct,type,generic,type,resolver,resolve,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass);1530737169;Return the Jackson {@link JavaType} for the specified type and context class._@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		return typeFactory.constructType(GenericTypeResolver.resolveType(type, contextClass))__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,nullable,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,return,type,factory,construct,type,generic,type,resolver,resolve,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass);1535105212;Return the Jackson {@link JavaType} for the specified type and context class._@param type the generic type to return the Jackson JavaType for_@param contextClass a context class for the target type, for example a class_in which the target type appears in a method signature (can be {@code null})_@return the Jackson JavaType;protected JavaType getJavaType(Type type, @Nullable Class<?> contextClass) {_		TypeFactory typeFactory = this.objectMapper.getTypeFactory()__		return typeFactory.constructType(GenericTypeResolver.resolveType(type, contextClass))__	};return,the,jackson,link,java,type,for,the,specified,type,and,context,class,param,type,the,generic,type,to,return,the,jackson,java,type,for,param,context,class,a,context,class,for,the,target,type,for,example,a,class,in,which,the,target,type,appears,in,a,method,signature,can,be,code,null,return,the,jackson,java,type;protected,java,type,get,java,type,type,type,nullable,class,context,class,type,factory,type,factory,this,object,mapper,get,type,factory,return,type,factory,construct,type,generic,type,resolver,resolve,type,type,context,class
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1460635993;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1460636765;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1460644739;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1467730834;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1468964586;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1468999763;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1470334838;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1481192386;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1491384686;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1491831389;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1494009848;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1494019141;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1495868221;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1496242568;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1407939778;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1408382828;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1427966598;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1427969145;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1434985545;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1435237353;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1435277737;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1435277909;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1435677405;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1437567612;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1437755059;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1439824671;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1448626779;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1450368890;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1450380453;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1453711096;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1454612400;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1456785272;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1460565262;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1460566372;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1460567039;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1460635993;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1460636765;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharSet() != null) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1460644739;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1467730834;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1468964586;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1468999763;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1470334838;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1481192386;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1491384686;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1491831389;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1494009848;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1494019141;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1495868221;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected JsonEncoding getJsonEncoding(MediaType contentType);1496242568;Determine the JSON encoding to use for the given content type._@param contentType the media type as requested by the caller_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MediaType contentType) {_		if (contentType != null && contentType.getCharset() != null) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,media,type,as,requested,by,the,caller,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,media,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1496837955;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1496853199;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		boolean debugLevel = (cause instanceof JsonMappingException &&_				cause.getMessage().startsWith("Can not find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1498780456;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		boolean debugLevel = (cause instanceof JsonMappingException &&_				cause.getMessage().startsWith("Can not find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1499879583;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		boolean debugLevel = (cause instanceof JsonMappingException &&_				cause.getMessage().startsWith("Can not find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1499973642;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		boolean debugLevel = (cause instanceof JsonMappingException &&_				cause.getMessage().startsWith("Can not find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1502974979;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		boolean debugLevel = (cause instanceof JsonMappingException &&_				cause.getMessage().startsWith("Can not find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1529234840;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		boolean debugLevel = (cause instanceof JsonMappingException &&_				(cause.getMessage().startsWith("Can not find") || cause.getMessage().startsWith("Cannot find")))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,cause,get,message,starts,with,cannot,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1529264540;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		_		boolean debugLevel = (cause instanceof JsonMappingException && cause.getMessage().startsWith("Cannot find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,cannot,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1530174524;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		_		boolean debugLevel = (cause instanceof JsonMappingException && cause.getMessage().startsWith("Cannot find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,cannot,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1530737169;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		_		boolean debugLevel = (cause instanceof JsonMappingException && cause.getMessage().startsWith("Cannot find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,cannot,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1535105212;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		_		boolean debugLevel = (cause instanceof JsonMappingException && cause.getMessage().startsWith("Cannot find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,cannot,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
AbstractJackson2HttpMessageConverter -> @Nullable 	public ObjectMapper getObjectMapper();1498780456;Return the underlying {@code ObjectMapper} for this view.;@Nullable_	public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;nullable,public,object,mapper,get,object,mapper,return,this,object,mapper
AbstractJackson2HttpMessageConverter -> @Nullable 	public ObjectMapper getObjectMapper();1499879583;Return the underlying {@code ObjectMapper} for this view.;@Nullable_	public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,view;nullable,public,object,mapper,get,object,mapper,return,this,object,mapper
