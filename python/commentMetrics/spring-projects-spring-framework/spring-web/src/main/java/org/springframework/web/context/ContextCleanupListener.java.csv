commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;@Override public void contextInitialized(ServletContextEvent event) { }
false;public;1;4;;@Override public void contextDestroyed(ServletContextEvent event) {     cleanupAttributes(event.getServletContext()). }
true;static;1;17;/**  * Find all ServletContext attributes which implement {@link DisposableBean}  * and destroy them, removing all affected ServletContext attributes eventually.  * @param sc the ServletContext to check  */ ;/**  * Find all ServletContext attributes which implement {@link DisposableBean}  * and destroy them, removing all affected ServletContext attributes eventually.  * @param sc the ServletContext to check  */ static void cleanupAttributes(ServletContext sc) {     Enumeration<String> attrNames = sc.getAttributeNames().     while (attrNames.hasMoreElements()) {         String attrName = attrNames.nextElement().         if (attrName.startsWith("org.springframework.")) {             Object attrValue = sc.getAttribute(attrName).             if (attrValue instanceof DisposableBean) {                 try {                     ((DisposableBean) attrValue).destroy().                 } catch (Throwable ex) {                     logger.error("Couldn't invoke destroy method of attribute with name '" + attrName + "'", ex).                 }             }         }     } }
