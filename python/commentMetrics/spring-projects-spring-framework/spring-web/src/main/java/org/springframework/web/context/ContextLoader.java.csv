# id;timestamp;commentText;codeText;commentWords;codeWords
ContextLoader -> public ContextLoader(WebApplicationContext context);1328020251;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1329142650;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1335774711;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1338032393;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1344897419;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1356735495;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1362408075;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1368713394;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1384955432;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1389820887;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1419966315;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1427815317;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1456332614;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1467730834;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1484657917;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1484665397;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1485810955;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1495868221;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1496837955;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1498780456;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer}s specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,s,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1530174524;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer ApplicationContextInitializers} specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,application,context,initializers,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1532091916;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer ApplicationContextInitializers} specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,application,context,initializers,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> public ContextLoader(WebApplicationContext context);1532555403;Create a new {@code ContextLoader} with the given application context. This_constructor is useful in Servlet 3.0+ environments where instance-based_registration of listeners is possible through the {@link ServletContext#addListener}_API._<p>The context may or may not yet be {@linkplain_ConfigurableApplicationContext#refresh() refreshed}. If it (a) is an implementation_of {@link ConfigurableWebApplicationContext} and (b) has <strong>not</strong>_already been refreshed (the recommended approach), then the following will occur:_<ul>_<li>If the given context has not already been assigned an {@linkplain_ConfigurableApplicationContext#setId id}, one will be assigned to it</li>_<li>{@code ServletContext} and {@code ServletConfig} objects will be delegated to_the application context</li>_<li>{@link #customizeContext} will be called</li>_<li>Any {@link ApplicationContextInitializer ApplicationContextInitializers} specified through the_"contextInitializerClasses" init-param will be applied.</li>_<li>{@link ConfigurableApplicationContext#refresh refresh()} will be called</li>_</ul>_If the context has already been refreshed or does not implement_{@code ConfigurableWebApplicationContext}, none of the above will occur under the_assumption that the user has performed these actions (or not) per his or her_specific needs._<p>See {@link org.springframework.web.WebApplicationInitializer} for usage examples._<p>In any case, the given application context will be registered into the_ServletContext under the attribute name {@link_WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} and subclasses are_free to call the {@link #closeWebApplicationContext} method on container shutdown_to close the application context._@param context the application context to manage_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader(WebApplicationContext context) {_		this.context = context__	};create,a,new,code,context,loader,with,the,given,application,context,this,constructor,is,useful,in,servlet,3,0,environments,where,instance,based,registration,of,listeners,is,possible,through,the,link,servlet,context,add,listener,api,p,the,context,may,or,may,not,yet,be,linkplain,configurable,application,context,refresh,refreshed,if,it,a,is,an,implementation,of,link,configurable,web,application,context,and,b,has,strong,not,strong,already,been,refreshed,the,recommended,approach,then,the,following,will,occur,ul,li,if,the,given,context,has,not,already,been,assigned,an,linkplain,configurable,application,context,set,id,id,one,will,be,assigned,to,it,li,li,code,servlet,context,and,code,servlet,config,objects,will,be,delegated,to,the,application,context,li,li,link,customize,context,will,be,called,li,li,any,link,application,context,initializer,application,context,initializers,specified,through,the,context,initializer,classes,init,param,will,be,applied,li,li,link,configurable,application,context,refresh,refresh,will,be,called,li,ul,if,the,context,has,already,been,refreshed,or,does,not,implement,code,configurable,web,application,context,none,of,the,above,will,occur,under,the,assumption,that,the,user,has,performed,these,actions,or,not,per,his,or,her,specific,needs,p,see,link,org,springframework,web,web,application,initializer,for,usage,examples,p,in,any,case,the,given,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,param,context,the,application,context,to,manage,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader,web,application,context,context,this,context,context
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1328020251;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1329142650;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1335774711;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1338032393;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1344897419;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1356735495;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1362408075;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1368713394;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1384955432;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1389820887;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1419966315;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1427815317;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1456332614;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1467730834;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1484657917;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1484665397;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1485810955;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1495868221;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1496837955;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1498780456;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1530174524;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1532091916;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> protected Class<?> determineContextClass(ServletContext servletContext);1532555403;Return the WebApplicationContext implementation class to use, either the_default XmlWebApplicationContext or a custom context class if specified._@param servletContext current servlet context_@return the WebApplicationContext implementation class to use_@see #CONTEXT_CLASS_PARAM_@see org.springframework.web.context.support.XmlWebApplicationContext;protected Class<?> determineContextClass(ServletContext servletContext) {_		String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM)__		if (contextClassName != null) {_			try {_				return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load custom context class [" + contextClassName + "]", ex)__			}_		}_		else {_			contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName())__			try {_				return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader())__			}_			catch (ClassNotFoundException ex) {_				throw new ApplicationContextException(_						"Failed to load default context class [" + contextClassName + "]", ex)__			}_		}_	};return,the,web,application,context,implementation,class,to,use,either,the,default,xml,web,application,context,or,a,custom,context,class,if,specified,param,servlet,context,current,servlet,context,return,the,web,application,context,implementation,class,to,use,see,see,org,springframework,web,context,support,xml,web,application,context;protected,class,determine,context,class,servlet,context,servlet,context,string,context,class,name,servlet,context,get,init,parameter,if,context,class,name,null,try,return,class,utils,for,name,context,class,name,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,custom,context,class,context,class,name,ex,else,context,class,name,default,strategies,get,property,web,application,context,class,get,name,try,return,class,utils,for,name,context,class,name,context,loader,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,default,context,class,context,class,name,ex
ContextLoader -> @Deprecated 	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent);1328020251;@deprecated as of Spring 3.1 in favor of_{@link #createWebApplicationContext(ServletContext)} and_{@link #configureAndRefreshWebApplicationContext(WebApplicationContext, ServletContext)};@Deprecated_	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent) {_		return createWebApplicationContext(sc)__	};deprecated,as,of,spring,3,1,in,favor,of,link,create,web,application,context,servlet,context,and,link,configure,and,refresh,web,application,context,web,application,context,servlet,context;deprecated,protected,web,application,context,create,web,application,context,servlet,context,sc,application,context,parent,return,create,web,application,context,sc
ContextLoader -> @Deprecated 	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent);1329142650;@deprecated as of Spring 3.1 in favor of_{@link #createWebApplicationContext(ServletContext)} and_{@link #configureAndRefreshWebApplicationContext(WebApplicationContext, ServletContext)};@Deprecated_	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent) {_		return createWebApplicationContext(sc)__	};deprecated,as,of,spring,3,1,in,favor,of,link,create,web,application,context,servlet,context,and,link,configure,and,refresh,web,application,context,web,application,context,servlet,context;deprecated,protected,web,application,context,create,web,application,context,servlet,context,sc,application,context,parent,return,create,web,application,context,sc
ContextLoader -> @Deprecated 	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent);1335774711;@deprecated as of Spring 3.1 in favor of_{@link #createWebApplicationContext(ServletContext)} and_{@link #configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext, ServletContext)};@Deprecated_	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent) {_		return createWebApplicationContext(sc)__	};deprecated,as,of,spring,3,1,in,favor,of,link,create,web,application,context,servlet,context,and,link,configure,and,refresh,web,application,context,configurable,web,application,context,servlet,context;deprecated,protected,web,application,context,create,web,application,context,servlet,context,sc,application,context,parent,return,create,web,application,context,sc
ContextLoader -> @Deprecated 	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent);1338032393;@deprecated as of Spring 3.1 in favor of_{@link #createWebApplicationContext(ServletContext)} and_{@link #configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext, ServletContext)};@Deprecated_	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent) {_		return createWebApplicationContext(sc)__	};deprecated,as,of,spring,3,1,in,favor,of,link,create,web,application,context,servlet,context,and,link,configure,and,refresh,web,application,context,configurable,web,application,context,servlet,context;deprecated,protected,web,application,context,create,web,application,context,servlet,context,sc,application,context,parent,return,create,web,application,context,sc
ContextLoader -> @Deprecated 	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent);1344897419;@deprecated as of Spring 3.1 in favor of_{@link #createWebApplicationContext(ServletContext)} and_{@link #configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext, ServletContext)};@Deprecated_	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent) {_		return createWebApplicationContext(sc)__	};deprecated,as,of,spring,3,1,in,favor,of,link,create,web,application,context,servlet,context,and,link,configure,and,refresh,web,application,context,configurable,web,application,context,servlet,context;deprecated,protected,web,application,context,create,web,application,context,servlet,context,sc,application,context,parent,return,create,web,application,context,sc
ContextLoader -> @Deprecated 	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent);1356735495;@deprecated as of Spring 3.1 in favor of_{@link #createWebApplicationContext(ServletContext)} and_{@link #configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext, ServletContext)};@Deprecated_	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent) {_		return createWebApplicationContext(sc)__	};deprecated,as,of,spring,3,1,in,favor,of,link,create,web,application,context,servlet,context,and,link,configure,and,refresh,web,application,context,configurable,web,application,context,servlet,context;deprecated,protected,web,application,context,create,web,application,context,servlet,context,sc,application,context,parent,return,create,web,application,context,sc
ContextLoader -> @Deprecated 	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent);1362408075;@deprecated as of Spring 3.1 in favor of_{@link #createWebApplicationContext(ServletContext)} and_{@link #configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext, ServletContext)};@Deprecated_	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent) {_		return createWebApplicationContext(sc)__	};deprecated,as,of,spring,3,1,in,favor,of,link,create,web,application,context,servlet,context,and,link,configure,and,refresh,web,application,context,configurable,web,application,context,servlet,context;deprecated,protected,web,application,context,create,web,application,context,servlet,context,sc,application,context,parent,return,create,web,application,context,sc
ContextLoader -> @Deprecated 	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent);1368713394;@deprecated as of Spring 3.1 in favor of_{@link #createWebApplicationContext(ServletContext)} and_{@link #configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext, ServletContext)};@Deprecated_	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent) {_		return createWebApplicationContext(sc)__	};deprecated,as,of,spring,3,1,in,favor,of,link,create,web,application,context,servlet,context,and,link,configure,and,refresh,web,application,context,configurable,web,application,context,servlet,context;deprecated,protected,web,application,context,create,web,application,context,servlet,context,sc,application,context,parent,return,create,web,application,context,sc
ContextLoader -> @Deprecated 	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent);1384955432;@deprecated as of Spring 3.1 in favor of_{@link #createWebApplicationContext(ServletContext)} and_{@link #configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext, ServletContext)};@Deprecated_	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent) {_		return createWebApplicationContext(sc)__	};deprecated,as,of,spring,3,1,in,favor,of,link,create,web,application,context,servlet,context,and,link,configure,and,refresh,web,application,context,configurable,web,application,context,servlet,context;deprecated,protected,web,application,context,create,web,application,context,servlet,context,sc,application,context,parent,return,create,web,application,context,sc
ContextLoader -> @Deprecated 	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent);1389820887;@deprecated as of Spring 3.1 in favor of_{@link #createWebApplicationContext(ServletContext)} and_{@link #configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext, ServletContext)};@Deprecated_	protected WebApplicationContext createWebApplicationContext(ServletContext sc, ApplicationContext parent) {_		return createWebApplicationContext(sc)__	};deprecated,as,of,spring,3,1,in,favor,of,link,create,web,application,context,servlet,context,and,link,configure,and,refresh,web,application,context,configurable,web,application,context,servlet,context;deprecated,protected,web,application,context,create,web,application,context,servlet,context,sc,application,context,parent,return,create,web,application,context,sc
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1328020251;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation uses_{@link org.springframework.context.access.ContextSingletonBeanFactoryLocator},_configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and_{@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context_which will be shared by all other users of ContextsingletonBeanFactoryLocator_which also use the same configuration parameters._@param servletContext current servlet context_@return the parent application context, or <code>null</code> if none_@see org.springframework.context.access.ContextSingletonBeanFactoryLocator;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		ApplicationContext parentContext = null__		String locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM)__		String parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM)___		if (parentContextKey != null) {_			_			BeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector)__			Log logger = LogFactory.getLog(ContextLoader.class)__			if (logger.isDebugEnabled()) {_				logger.debug("Getting parent context definition: using parent context key of '" +_						parentContextKey + "' with BeanFactoryLocator")__			}_			this.parentContextRef = locator.useBeanFactory(parentContextKey)__			parentContext = (ApplicationContext) this.parentContextRef.getFactory()__		}__		return parentContext__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,uses,link,org,springframework,context,access,context,singleton,bean,factory,locator,configured,via,link,and,link,to,load,a,parent,context,which,will,be,shared,by,all,other,users,of,contextsingleton,bean,factory,locator,which,also,use,the,same,configuration,parameters,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,code,if,none,see,org,springframework,context,access,context,singleton,bean,factory,locator;protected,application,context,load,parent,context,servlet,context,servlet,context,application,context,parent,context,null,string,locator,factory,selector,servlet,context,get,init,parameter,string,parent,context,key,servlet,context,get,init,parameter,if,parent,context,key,null,bean,factory,locator,locator,context,singleton,bean,factory,locator,get,instance,locator,factory,selector,log,logger,log,factory,get,log,context,loader,class,if,logger,is,debug,enabled,logger,debug,getting,parent,context,definition,using,parent,context,key,of,parent,context,key,with,bean,factory,locator,this,parent,context,ref,locator,use,bean,factory,parent,context,key,parent,context,application,context,this,parent,context,ref,get,factory,return,parent,context
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1329142650;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation uses_{@link org.springframework.context.access.ContextSingletonBeanFactoryLocator},_configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and_{@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context_which will be shared by all other users of ContextsingletonBeanFactoryLocator_which also use the same configuration parameters._@param servletContext current servlet context_@return the parent application context, or <code>null</code> if none_@see org.springframework.context.access.ContextSingletonBeanFactoryLocator;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		ApplicationContext parentContext = null__		String locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM)__		String parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM)___		if (parentContextKey != null) {_			_			BeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector)__			Log logger = LogFactory.getLog(ContextLoader.class)__			if (logger.isDebugEnabled()) {_				logger.debug("Getting parent context definition: using parent context key of '" +_						parentContextKey + "' with BeanFactoryLocator")__			}_			this.parentContextRef = locator.useBeanFactory(parentContextKey)__			parentContext = (ApplicationContext) this.parentContextRef.getFactory()__		}__		return parentContext__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,uses,link,org,springframework,context,access,context,singleton,bean,factory,locator,configured,via,link,and,link,to,load,a,parent,context,which,will,be,shared,by,all,other,users,of,contextsingleton,bean,factory,locator,which,also,use,the,same,configuration,parameters,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,code,if,none,see,org,springframework,context,access,context,singleton,bean,factory,locator;protected,application,context,load,parent,context,servlet,context,servlet,context,application,context,parent,context,null,string,locator,factory,selector,servlet,context,get,init,parameter,string,parent,context,key,servlet,context,get,init,parameter,if,parent,context,key,null,bean,factory,locator,locator,context,singleton,bean,factory,locator,get,instance,locator,factory,selector,log,logger,log,factory,get,log,context,loader,class,if,logger,is,debug,enabled,logger,debug,getting,parent,context,definition,using,parent,context,key,of,parent,context,key,with,bean,factory,locator,this,parent,context,ref,locator,use,bean,factory,parent,context,key,parent,context,application,context,this,parent,context,ref,get,factory,return,parent,context
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1335774711;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation uses_{@link org.springframework.context.access.ContextSingletonBeanFactoryLocator},_configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and_{@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context_which will be shared by all other users of ContextsingletonBeanFactoryLocator_which also use the same configuration parameters._@param servletContext current servlet context_@return the parent application context, or <code>null</code> if none_@see org.springframework.context.access.ContextSingletonBeanFactoryLocator;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		ApplicationContext parentContext = null__		String locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM)__		String parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM)___		if (parentContextKey != null) {_			_			BeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector)__			Log logger = LogFactory.getLog(ContextLoader.class)__			if (logger.isDebugEnabled()) {_				logger.debug("Getting parent context definition: using parent context key of '" +_						parentContextKey + "' with BeanFactoryLocator")__			}_			this.parentContextRef = locator.useBeanFactory(parentContextKey)__			parentContext = (ApplicationContext) this.parentContextRef.getFactory()__		}__		return parentContext__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,uses,link,org,springframework,context,access,context,singleton,bean,factory,locator,configured,via,link,and,link,to,load,a,parent,context,which,will,be,shared,by,all,other,users,of,contextsingleton,bean,factory,locator,which,also,use,the,same,configuration,parameters,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,code,if,none,see,org,springframework,context,access,context,singleton,bean,factory,locator;protected,application,context,load,parent,context,servlet,context,servlet,context,application,context,parent,context,null,string,locator,factory,selector,servlet,context,get,init,parameter,string,parent,context,key,servlet,context,get,init,parameter,if,parent,context,key,null,bean,factory,locator,locator,context,singleton,bean,factory,locator,get,instance,locator,factory,selector,log,logger,log,factory,get,log,context,loader,class,if,logger,is,debug,enabled,logger,debug,getting,parent,context,definition,using,parent,context,key,of,parent,context,key,with,bean,factory,locator,this,parent,context,ref,locator,use,bean,factory,parent,context,key,parent,context,application,context,this,parent,context,ref,get,factory,return,parent,context
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1338032393;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation uses_{@link org.springframework.context.access.ContextSingletonBeanFactoryLocator},_configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and_{@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context_which will be shared by all other users of ContextsingletonBeanFactoryLocator_which also use the same configuration parameters._@param servletContext current servlet context_@return the parent application context, or <code>null</code> if none_@see org.springframework.context.access.ContextSingletonBeanFactoryLocator;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		ApplicationContext parentContext = null__		String locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM)__		String parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM)___		if (parentContextKey != null) {_			_			BeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector)__			Log logger = LogFactory.getLog(ContextLoader.class)__			if (logger.isDebugEnabled()) {_				logger.debug("Getting parent context definition: using parent context key of '" +_						parentContextKey + "' with BeanFactoryLocator")__			}_			this.parentContextRef = locator.useBeanFactory(parentContextKey)__			parentContext = (ApplicationContext) this.parentContextRef.getFactory()__		}__		return parentContext__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,uses,link,org,springframework,context,access,context,singleton,bean,factory,locator,configured,via,link,and,link,to,load,a,parent,context,which,will,be,shared,by,all,other,users,of,contextsingleton,bean,factory,locator,which,also,use,the,same,configuration,parameters,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,code,if,none,see,org,springframework,context,access,context,singleton,bean,factory,locator;protected,application,context,load,parent,context,servlet,context,servlet,context,application,context,parent,context,null,string,locator,factory,selector,servlet,context,get,init,parameter,string,parent,context,key,servlet,context,get,init,parameter,if,parent,context,key,null,bean,factory,locator,locator,context,singleton,bean,factory,locator,get,instance,locator,factory,selector,log,logger,log,factory,get,log,context,loader,class,if,logger,is,debug,enabled,logger,debug,getting,parent,context,definition,using,parent,context,key,of,parent,context,key,with,bean,factory,locator,this,parent,context,ref,locator,use,bean,factory,parent,context,key,parent,context,application,context,this,parent,context,ref,get,factory,return,parent,context
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1344897419;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation uses_{@link org.springframework.context.access.ContextSingletonBeanFactoryLocator},_configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and_{@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context_which will be shared by all other users of ContextsingletonBeanFactoryLocator_which also use the same configuration parameters._@param servletContext current servlet context_@return the parent application context, or <code>null</code> if none_@see org.springframework.context.access.ContextSingletonBeanFactoryLocator;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		ApplicationContext parentContext = null__		String locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM)__		String parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM)___		if (parentContextKey != null) {_			_			BeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector)__			Log logger = LogFactory.getLog(ContextLoader.class)__			if (logger.isDebugEnabled()) {_				logger.debug("Getting parent context definition: using parent context key of '" +_						parentContextKey + "' with BeanFactoryLocator")__			}_			this.parentContextRef = locator.useBeanFactory(parentContextKey)__			parentContext = (ApplicationContext) this.parentContextRef.getFactory()__		}__		return parentContext__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,uses,link,org,springframework,context,access,context,singleton,bean,factory,locator,configured,via,link,and,link,to,load,a,parent,context,which,will,be,shared,by,all,other,users,of,contextsingleton,bean,factory,locator,which,also,use,the,same,configuration,parameters,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,code,if,none,see,org,springframework,context,access,context,singleton,bean,factory,locator;protected,application,context,load,parent,context,servlet,context,servlet,context,application,context,parent,context,null,string,locator,factory,selector,servlet,context,get,init,parameter,string,parent,context,key,servlet,context,get,init,parameter,if,parent,context,key,null,bean,factory,locator,locator,context,singleton,bean,factory,locator,get,instance,locator,factory,selector,log,logger,log,factory,get,log,context,loader,class,if,logger,is,debug,enabled,logger,debug,getting,parent,context,definition,using,parent,context,key,of,parent,context,key,with,bean,factory,locator,this,parent,context,ref,locator,use,bean,factory,parent,context,key,parent,context,application,context,this,parent,context,ref,get,factory,return,parent,context
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1356735495;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation uses_{@link org.springframework.context.access.ContextSingletonBeanFactoryLocator},_configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and_{@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context_which will be shared by all other users of ContextsingletonBeanFactoryLocator_which also use the same configuration parameters._@param servletContext current servlet context_@return the parent application context, or {@code null} if none_@see org.springframework.context.access.ContextSingletonBeanFactoryLocator;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		ApplicationContext parentContext = null__		String locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM)__		String parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM)___		if (parentContextKey != null) {_			_			BeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector)__			Log logger = LogFactory.getLog(ContextLoader.class)__			if (logger.isDebugEnabled()) {_				logger.debug("Getting parent context definition: using parent context key of '" +_						parentContextKey + "' with BeanFactoryLocator")__			}_			this.parentContextRef = locator.useBeanFactory(parentContextKey)__			parentContext = (ApplicationContext) this.parentContextRef.getFactory()__		}__		return parentContext__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,uses,link,org,springframework,context,access,context,singleton,bean,factory,locator,configured,via,link,and,link,to,load,a,parent,context,which,will,be,shared,by,all,other,users,of,contextsingleton,bean,factory,locator,which,also,use,the,same,configuration,parameters,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none,see,org,springframework,context,access,context,singleton,bean,factory,locator;protected,application,context,load,parent,context,servlet,context,servlet,context,application,context,parent,context,null,string,locator,factory,selector,servlet,context,get,init,parameter,string,parent,context,key,servlet,context,get,init,parameter,if,parent,context,key,null,bean,factory,locator,locator,context,singleton,bean,factory,locator,get,instance,locator,factory,selector,log,logger,log,factory,get,log,context,loader,class,if,logger,is,debug,enabled,logger,debug,getting,parent,context,definition,using,parent,context,key,of,parent,context,key,with,bean,factory,locator,this,parent,context,ref,locator,use,bean,factory,parent,context,key,parent,context,application,context,this,parent,context,ref,get,factory,return,parent,context
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1362408075;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation uses_{@link org.springframework.context.access.ContextSingletonBeanFactoryLocator},_configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and_{@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context_which will be shared by all other users of ContextsingletonBeanFactoryLocator_which also use the same configuration parameters._@param servletContext current servlet context_@return the parent application context, or {@code null} if none_@see org.springframework.context.access.ContextSingletonBeanFactoryLocator;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		ApplicationContext parentContext = null__		String locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM)__		String parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM)___		if (parentContextKey != null) {_			_			BeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector)__			Log logger = LogFactory.getLog(ContextLoader.class)__			if (logger.isDebugEnabled()) {_				logger.debug("Getting parent context definition: using parent context key of '" +_						parentContextKey + "' with BeanFactoryLocator")__			}_			this.parentContextRef = locator.useBeanFactory(parentContextKey)__			parentContext = (ApplicationContext) this.parentContextRef.getFactory()__		}__		return parentContext__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,uses,link,org,springframework,context,access,context,singleton,bean,factory,locator,configured,via,link,and,link,to,load,a,parent,context,which,will,be,shared,by,all,other,users,of,contextsingleton,bean,factory,locator,which,also,use,the,same,configuration,parameters,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none,see,org,springframework,context,access,context,singleton,bean,factory,locator;protected,application,context,load,parent,context,servlet,context,servlet,context,application,context,parent,context,null,string,locator,factory,selector,servlet,context,get,init,parameter,string,parent,context,key,servlet,context,get,init,parameter,if,parent,context,key,null,bean,factory,locator,locator,context,singleton,bean,factory,locator,get,instance,locator,factory,selector,log,logger,log,factory,get,log,context,loader,class,if,logger,is,debug,enabled,logger,debug,getting,parent,context,definition,using,parent,context,key,of,parent,context,key,with,bean,factory,locator,this,parent,context,ref,locator,use,bean,factory,parent,context,key,parent,context,application,context,this,parent,context,ref,get,factory,return,parent,context
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1368713394;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation uses_{@link org.springframework.context.access.ContextSingletonBeanFactoryLocator},_configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and_{@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context_which will be shared by all other users of ContextsingletonBeanFactoryLocator_which also use the same configuration parameters._@param servletContext current servlet context_@return the parent application context, or {@code null} if none_@see org.springframework.context.access.ContextSingletonBeanFactoryLocator;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		ApplicationContext parentContext = null__		String locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM)__		String parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM)___		if (parentContextKey != null) {_			_			BeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector)__			Log logger = LogFactory.getLog(ContextLoader.class)__			if (logger.isDebugEnabled()) {_				logger.debug("Getting parent context definition: using parent context key of '" +_						parentContextKey + "' with BeanFactoryLocator")__			}_			this.parentContextRef = locator.useBeanFactory(parentContextKey)__			parentContext = (ApplicationContext) this.parentContextRef.getFactory()__		}__		return parentContext__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,uses,link,org,springframework,context,access,context,singleton,bean,factory,locator,configured,via,link,and,link,to,load,a,parent,context,which,will,be,shared,by,all,other,users,of,contextsingleton,bean,factory,locator,which,also,use,the,same,configuration,parameters,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none,see,org,springframework,context,access,context,singleton,bean,factory,locator;protected,application,context,load,parent,context,servlet,context,servlet,context,application,context,parent,context,null,string,locator,factory,selector,servlet,context,get,init,parameter,string,parent,context,key,servlet,context,get,init,parameter,if,parent,context,key,null,bean,factory,locator,locator,context,singleton,bean,factory,locator,get,instance,locator,factory,selector,log,logger,log,factory,get,log,context,loader,class,if,logger,is,debug,enabled,logger,debug,getting,parent,context,definition,using,parent,context,key,of,parent,context,key,with,bean,factory,locator,this,parent,context,ref,locator,use,bean,factory,parent,context,key,parent,context,application,context,this,parent,context,ref,get,factory,return,parent,context
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1384955432;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation uses_{@link org.springframework.context.access.ContextSingletonBeanFactoryLocator},_configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and_{@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context_which will be shared by all other users of ContextsingletonBeanFactoryLocator_which also use the same configuration parameters._@param servletContext current servlet context_@return the parent application context, or {@code null} if none_@see org.springframework.context.access.ContextSingletonBeanFactoryLocator;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		ApplicationContext parentContext = null__		String locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM)__		String parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM)___		if (parentContextKey != null) {_			_			BeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector)__			Log logger = LogFactory.getLog(ContextLoader.class)__			if (logger.isDebugEnabled()) {_				logger.debug("Getting parent context definition: using parent context key of '" +_						parentContextKey + "' with BeanFactoryLocator")__			}_			this.parentContextRef = locator.useBeanFactory(parentContextKey)__			parentContext = (ApplicationContext) this.parentContextRef.getFactory()__		}__		return parentContext__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,uses,link,org,springframework,context,access,context,singleton,bean,factory,locator,configured,via,link,and,link,to,load,a,parent,context,which,will,be,shared,by,all,other,users,of,contextsingleton,bean,factory,locator,which,also,use,the,same,configuration,parameters,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none,see,org,springframework,context,access,context,singleton,bean,factory,locator;protected,application,context,load,parent,context,servlet,context,servlet,context,application,context,parent,context,null,string,locator,factory,selector,servlet,context,get,init,parameter,string,parent,context,key,servlet,context,get,init,parameter,if,parent,context,key,null,bean,factory,locator,locator,context,singleton,bean,factory,locator,get,instance,locator,factory,selector,log,logger,log,factory,get,log,context,loader,class,if,logger,is,debug,enabled,logger,debug,getting,parent,context,definition,using,parent,context,key,of,parent,context,key,with,bean,factory,locator,this,parent,context,ref,locator,use,bean,factory,parent,context,key,parent,context,application,context,this,parent,context,ref,get,factory,return,parent,context
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1389820887;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation uses_{@link org.springframework.context.access.ContextSingletonBeanFactoryLocator},_configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and_{@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context_which will be shared by all other users of ContextsingletonBeanFactoryLocator_which also use the same configuration parameters._@param servletContext current servlet context_@return the parent application context, or {@code null} if none_@see org.springframework.context.access.ContextSingletonBeanFactoryLocator;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		ApplicationContext parentContext = null__		String locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM)__		String parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM)___		if (parentContextKey != null) {_			_			BeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector)__			Log logger = LogFactory.getLog(ContextLoader.class)__			if (logger.isDebugEnabled()) {_				logger.debug("Getting parent context definition: using parent context key of '" +_						parentContextKey + "' with BeanFactoryLocator")__			}_			this.parentContextRef = locator.useBeanFactory(parentContextKey)__			parentContext = (ApplicationContext) this.parentContextRef.getFactory()__		}__		return parentContext__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,uses,link,org,springframework,context,access,context,singleton,bean,factory,locator,configured,via,link,and,link,to,load,a,parent,context,which,will,be,shared,by,all,other,users,of,contextsingleton,bean,factory,locator,which,also,use,the,same,configuration,parameters,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none,see,org,springframework,context,access,context,singleton,bean,factory,locator;protected,application,context,load,parent,context,servlet,context,servlet,context,application,context,parent,context,null,string,locator,factory,selector,servlet,context,get,init,parameter,string,parent,context,key,servlet,context,get,init,parameter,if,parent,context,key,null,bean,factory,locator,locator,context,singleton,bean,factory,locator,get,instance,locator,factory,selector,log,logger,log,factory,get,log,context,loader,class,if,logger,is,debug,enabled,logger,debug,getting,parent,context,definition,using,parent,context,key,of,parent,context,key,with,bean,factory,locator,this,parent,context,ref,locator,use,bean,factory,parent,context,key,parent,context,application,context,this,parent,context,ref,get,factory,return,parent,context
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1419966315;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation uses_{@link org.springframework.context.access.ContextSingletonBeanFactoryLocator},_configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and_{@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context_which will be shared by all other users of ContextsingletonBeanFactoryLocator_which also use the same configuration parameters._@param servletContext current servlet context_@return the parent application context, or {@code null} if none_@see org.springframework.context.access.ContextSingletonBeanFactoryLocator;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		ApplicationContext parentContext = null__		String locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM)__		String parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM)___		if (parentContextKey != null) {_			_			BeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector)__			Log logger = LogFactory.getLog(ContextLoader.class)__			if (logger.isDebugEnabled()) {_				logger.debug("Getting parent context definition: using parent context key of '" +_						parentContextKey + "' with BeanFactoryLocator")__			}_			this.parentContextRef = locator.useBeanFactory(parentContextKey)__			parentContext = (ApplicationContext) this.parentContextRef.getFactory()__		}__		return parentContext__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,uses,link,org,springframework,context,access,context,singleton,bean,factory,locator,configured,via,link,and,link,to,load,a,parent,context,which,will,be,shared,by,all,other,users,of,contextsingleton,bean,factory,locator,which,also,use,the,same,configuration,parameters,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none,see,org,springframework,context,access,context,singleton,bean,factory,locator;protected,application,context,load,parent,context,servlet,context,servlet,context,application,context,parent,context,null,string,locator,factory,selector,servlet,context,get,init,parameter,string,parent,context,key,servlet,context,get,init,parameter,if,parent,context,key,null,bean,factory,locator,locator,context,singleton,bean,factory,locator,get,instance,locator,factory,selector,log,logger,log,factory,get,log,context,loader,class,if,logger,is,debug,enabled,logger,debug,getting,parent,context,definition,using,parent,context,key,of,parent,context,key,with,bean,factory,locator,this,parent,context,ref,locator,use,bean,factory,parent,context,key,parent,context,application,context,this,parent,context,ref,get,factory,return,parent,context
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1427815317;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation uses_{@link org.springframework.context.access.ContextSingletonBeanFactoryLocator},_configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and_{@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context_which will be shared by all other users of ContextsingletonBeanFactoryLocator_which also use the same configuration parameters._@param servletContext current servlet context_@return the parent application context, or {@code null} if none_@see org.springframework.context.access.ContextSingletonBeanFactoryLocator;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		ApplicationContext parentContext = null__		String locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM)__		String parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM)___		if (parentContextKey != null) {_			_			BeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector)__			Log logger = LogFactory.getLog(ContextLoader.class)__			if (logger.isDebugEnabled()) {_				logger.debug("Getting parent context definition: using parent context key of '" +_						parentContextKey + "' with BeanFactoryLocator")__			}_			this.parentContextRef = locator.useBeanFactory(parentContextKey)__			parentContext = (ApplicationContext) this.parentContextRef.getFactory()__		}__		return parentContext__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,uses,link,org,springframework,context,access,context,singleton,bean,factory,locator,configured,via,link,and,link,to,load,a,parent,context,which,will,be,shared,by,all,other,users,of,contextsingleton,bean,factory,locator,which,also,use,the,same,configuration,parameters,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none,see,org,springframework,context,access,context,singleton,bean,factory,locator;protected,application,context,load,parent,context,servlet,context,servlet,context,application,context,parent,context,null,string,locator,factory,selector,servlet,context,get,init,parameter,string,parent,context,key,servlet,context,get,init,parameter,if,parent,context,key,null,bean,factory,locator,locator,context,singleton,bean,factory,locator,get,instance,locator,factory,selector,log,logger,log,factory,get,log,context,loader,class,if,logger,is,debug,enabled,logger,debug,getting,parent,context,definition,using,parent,context,key,of,parent,context,key,with,bean,factory,locator,this,parent,context,ref,locator,use,bean,factory,parent,context,key,parent,context,application,context,this,parent,context,ref,get,factory,return,parent,context
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1456332614;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation uses_{@link org.springframework.context.access.ContextSingletonBeanFactoryLocator},_configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and_{@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context_which will be shared by all other users of ContextsingletonBeanFactoryLocator_which also use the same configuration parameters._@param servletContext current servlet context_@return the parent application context, or {@code null} if none_@see org.springframework.context.access.ContextSingletonBeanFactoryLocator;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		ApplicationContext parentContext = null__		String locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM)__		String parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM)___		if (parentContextKey != null) {_			_			BeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector)__			Log logger = LogFactory.getLog(ContextLoader.class)__			if (logger.isDebugEnabled()) {_				logger.debug("Getting parent context definition: using parent context key of '" +_						parentContextKey + "' with BeanFactoryLocator")__			}_			this.parentContextRef = locator.useBeanFactory(parentContextKey)__			parentContext = (ApplicationContext) this.parentContextRef.getFactory()__		}__		return parentContext__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,uses,link,org,springframework,context,access,context,singleton,bean,factory,locator,configured,via,link,and,link,to,load,a,parent,context,which,will,be,shared,by,all,other,users,of,contextsingleton,bean,factory,locator,which,also,use,the,same,configuration,parameters,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none,see,org,springframework,context,access,context,singleton,bean,factory,locator;protected,application,context,load,parent,context,servlet,context,servlet,context,application,context,parent,context,null,string,locator,factory,selector,servlet,context,get,init,parameter,string,parent,context,key,servlet,context,get,init,parameter,if,parent,context,key,null,bean,factory,locator,locator,context,singleton,bean,factory,locator,get,instance,locator,factory,selector,log,logger,log,factory,get,log,context,loader,class,if,logger,is,debug,enabled,logger,debug,getting,parent,context,definition,using,parent,context,key,of,parent,context,key,with,bean,factory,locator,this,parent,context,ref,locator,use,bean,factory,parent,context,key,parent,context,application,context,this,parent,context,ref,get,factory,return,parent,context
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1467730834;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation uses_{@link org.springframework.context.access.ContextSingletonBeanFactoryLocator},_configured via {@link #LOCATOR_FACTORY_SELECTOR_PARAM} and_{@link #LOCATOR_FACTORY_KEY_PARAM}, to load a parent context_which will be shared by all other users of ContextsingletonBeanFactoryLocator_which also use the same configuration parameters._@param servletContext current servlet context_@return the parent application context, or {@code null} if none_@see org.springframework.context.access.ContextSingletonBeanFactoryLocator;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		ApplicationContext parentContext = null__		String locatorFactorySelector = servletContext.getInitParameter(LOCATOR_FACTORY_SELECTOR_PARAM)__		String parentContextKey = servletContext.getInitParameter(LOCATOR_FACTORY_KEY_PARAM)___		if (parentContextKey != null) {_			_			BeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance(locatorFactorySelector)__			Log logger = LogFactory.getLog(ContextLoader.class)__			if (logger.isDebugEnabled()) {_				logger.debug("Getting parent context definition: using parent context key of '" +_						parentContextKey + "' with BeanFactoryLocator")__			}_			this.parentContextRef = locator.useBeanFactory(parentContextKey)__			parentContext = (ApplicationContext) this.parentContextRef.getFactory()__		}__		return parentContext__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,uses,link,org,springframework,context,access,context,singleton,bean,factory,locator,configured,via,link,and,link,to,load,a,parent,context,which,will,be,shared,by,all,other,users,of,contextsingleton,bean,factory,locator,which,also,use,the,same,configuration,parameters,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none,see,org,springframework,context,access,context,singleton,bean,factory,locator;protected,application,context,load,parent,context,servlet,context,servlet,context,application,context,parent,context,null,string,locator,factory,selector,servlet,context,get,init,parameter,string,parent,context,key,servlet,context,get,init,parameter,if,parent,context,key,null,bean,factory,locator,locator,context,singleton,bean,factory,locator,get,instance,locator,factory,selector,log,logger,log,factory,get,log,context,loader,class,if,logger,is,debug,enabled,logger,debug,getting,parent,context,definition,using,parent,context,key,of,parent,context,key,with,bean,factory,locator,this,parent,context,ref,locator,use,bean,factory,parent,context,key,parent,context,application,context,this,parent,context,ref,get,factory,return,parent,context
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1484657917;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation simply returns {@code null}, as of 5.0._@param servletContext current servlet context_@return the parent application context, or {@code null} if none;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		return null__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,simply,returns,code,null,as,of,5,0,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none;protected,application,context,load,parent,context,servlet,context,servlet,context,return,null
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1484665397;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation simply returns {@code null}, as of 5.0._@param servletContext current servlet context_@return the parent application context, or {@code null} if none;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		return null__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,simply,returns,code,null,as,of,5,0,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none;protected,application,context,load,parent,context,servlet,context,servlet,context,return,null
ContextLoader -> protected ApplicationContext loadParentContext(ServletContext servletContext);1485810955;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation simply returns {@code null}, as of 5.0._@param servletContext current servlet context_@return the parent application context, or {@code null} if none;protected ApplicationContext loadParentContext(ServletContext servletContext) {_		return null__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,simply,returns,code,null,as,of,5,0,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none;protected,application,context,load,parent,context,servlet,context,servlet,context,return,null
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1328020251;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@param parent the parent ApplicationContext to use, or <code>null</code> if none_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		ConfigurableWebApplicationContext wac =_				(ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__		return wac__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,param,parent,the,parent,application,context,to,use,or,code,null,code,if,none,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,configurable,web,application,context,wac,configurable,web,application,context,bean,utils,instantiate,class,context,class,return,wac
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1329142650;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@param parent the parent ApplicationContext to use, or <code>null</code> if none_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		ConfigurableWebApplicationContext wac =_				(ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__		return wac__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,param,parent,the,parent,application,context,to,use,or,code,null,code,if,none,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,configurable,web,application,context,wac,configurable,web,application,context,bean,utils,instantiate,class,context,class,return,wac
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1335774711;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		ConfigurableWebApplicationContext wac =_				(ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__		return wac__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,configurable,web,application,context,wac,configurable,web,application,context,bean,utils,instantiate,class,context,class,return,wac
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1338032393;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		ConfigurableWebApplicationContext wac =_				(ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__		return wac__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,configurable,web,application,context,wac,configurable,web,application,context,bean,utils,instantiate,class,context,class,return,wac
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1344897419;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		ConfigurableWebApplicationContext wac =_				(ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__		return wac__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,configurable,web,application,context,wac,configurable,web,application,context,bean,utils,instantiate,class,context,class,return,wac
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1356735495;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		ConfigurableWebApplicationContext wac =_				(ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__		return wac__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,configurable,web,application,context,wac,configurable,web,application,context,bean,utils,instantiate,class,context,class,return,wac
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1362408075;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1368713394;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1384955432;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1389820887;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1419966315;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1427815317;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1456332614;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1467730834;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1484657917;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1484665397;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1485810955;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1495868221;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1496837955;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1498780456;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1530174524;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1532091916;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected WebApplicationContext createWebApplicationContext(ServletContext sc);1532555403;Instantiate the root WebApplicationContext for this loader, either the_default context class or a custom context class if specified._<p>This implementation expects custom contexts to implement the_{@link ConfigurableWebApplicationContext} interface._Can be overridden in subclasses._<p>In addition, {@link #customizeContext} gets called prior to refreshing the_context, allowing subclasses to perform custom modifications to the context._@param sc current servlet context_@return the root WebApplicationContext_@see ConfigurableWebApplicationContext;protected WebApplicationContext createWebApplicationContext(ServletContext sc) {_		Class<?> contextClass = determineContextClass(sc)__		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {_			throw new ApplicationContextException("Custom context class [" + contextClass.getName() +_					"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]")__		}_		return (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass)__	};instantiate,the,root,web,application,context,for,this,loader,either,the,default,context,class,or,a,custom,context,class,if,specified,p,this,implementation,expects,custom,contexts,to,implement,the,link,configurable,web,application,context,interface,can,be,overridden,in,subclasses,p,in,addition,link,customize,context,gets,called,prior,to,refreshing,the,context,allowing,subclasses,to,perform,custom,modifications,to,the,context,param,sc,current,servlet,context,return,the,root,web,application,context,see,configurable,web,application,context;protected,web,application,context,create,web,application,context,servlet,context,sc,class,context,class,determine,context,class,sc,if,configurable,web,application,context,class,is,assignable,from,context,class,throw,new,application,context,exception,custom,context,class,context,class,get,name,is,not,of,type,configurable,web,application,context,class,get,name,return,configurable,web,application,context,bean,utils,instantiate,class,context,class
ContextLoader -> protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext);1328020251;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param servletContext the current servlet context_@param applicationContext the newly created application context_@see #createWebApplicationContext(ServletContext, ApplicationContext)_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext) {_		ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =_			new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass :_				determineContextInitializerClasses(servletContext)) {_			Class<?> contextClass = applicationContext.getClass()__			Class<?> initializerContextClass =_				GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			Assert.isAssignable(initializerContextClass, contextClass, String.format(_					"Could not add context initializer [%s] as its generic parameter [%s] " +_					"is not assignable from the type of application context used by this " +_					"context loader [%s]", initializerClass.getName(), initializerContextClass, contextClass))__			initializerInstances.add(BeanUtils.instantiateClass(initializerClass))__		}__		Collections.sort(initializerInstances, new AnnotationAwareOrderComparator())___		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(applicationContext)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,servlet,context,the,current,servlet,context,param,application,context,the,newly,created,application,context,see,create,web,application,context,servlet,context,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,servlet,context,configurable,web,application,context,application,context,array,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,for,class,application,context,initializer,configurable,application,context,initializer,class,determine,context,initializer,classes,servlet,context,class,context,class,application,context,get,class,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,as,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,context,class,initializer,instances,add,bean,utils,instantiate,class,initializer,class,collections,sort,initializer,instances,new,annotation,aware,order,comparator,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,application,context
ContextLoader -> protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext);1329142650;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param servletContext the current servlet context_@param applicationContext the newly created application context_@see #createWebApplicationContext(ServletContext, ApplicationContext)_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(servletContext)___		if (initializerClasses.size() == 0) {_			_			return__		}__		ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =_			new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> contextClass = applicationContext.getClass()__			Class<?> initializerContextClass =_				GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			Assert.isAssignable(initializerContextClass, contextClass, String.format(_					"Could not add context initializer [%s] as its generic parameter [%s] " +_					"is not assignable from the type of application context used by this " +_					"context loader [%s]", initializerClass.getName(), initializerContextClass, contextClass))__			initializerInstances.add(BeanUtils.instantiateClass(initializerClass))__		}__		Collections.sort(initializerInstances, new AnnotationAwareOrderComparator())___		_		_		_		_		WebApplicationContextUtils.initServletPropertySources(_				applicationContext.getEnvironment().getPropertySources(), servletContext)___		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(applicationContext)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,servlet,context,the,current,servlet,context,param,application,context,the,newly,created,application,context,see,create,web,application,context,servlet,context,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,servlet,context,configurable,web,application,context,application,context,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,servlet,context,if,initializer,classes,size,0,return,array,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,context,class,application,context,get,class,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,as,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,context,class,initializer,instances,add,bean,utils,instantiate,class,initializer,class,collections,sort,initializer,instances,new,annotation,aware,order,comparator,web,application,context,utils,init,servlet,property,sources,application,context,get,environment,get,property,sources,servlet,context,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,application,context
ContextLoader -> protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext);1335774711;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param servletContext the current servlet context_@param applicationContext the newly created application context_@see #createWebApplicationContext(ServletContext, ApplicationContext)_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(servletContext)___		if (initializerClasses.size() == 0) {_			_			return__		}__		ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =_			new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> contextClass = applicationContext.getClass()__			Class<?> initializerContextClass =_				GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			Assert.isAssignable(initializerContextClass, contextClass, String.format(_					"Could not add context initializer [%s] as its generic parameter [%s] " +_					"is not assignable from the type of application context used by this " +_					"context loader [%s]", initializerClass.getName(), initializerContextClass, contextClass))__			initializerInstances.add(BeanUtils.instantiateClass(initializerClass))__		}__		Collections.sort(initializerInstances, new AnnotationAwareOrderComparator())___		_		_		_		_		WebApplicationContextUtils.initServletPropertySources(_				applicationContext.getEnvironment().getPropertySources(), servletContext)___		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(applicationContext)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,servlet,context,the,current,servlet,context,param,application,context,the,newly,created,application,context,see,create,web,application,context,servlet,context,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,servlet,context,configurable,web,application,context,application,context,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,servlet,context,if,initializer,classes,size,0,return,array,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,context,class,application,context,get,class,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,as,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,context,class,initializer,instances,add,bean,utils,instantiate,class,initializer,class,collections,sort,initializer,instances,new,annotation,aware,order,comparator,web,application,context,utils,init,servlet,property,sources,application,context,get,environment,get,property,sources,servlet,context,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,application,context
ContextLoader -> protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext);1338032393;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param servletContext the current servlet context_@param applicationContext the newly created application context_@see #createWebApplicationContext(ServletContext, ApplicationContext)_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(servletContext)___		if (initializerClasses.size() == 0) {_			_			return__		}__		ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =_			new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> contextClass = applicationContext.getClass()__			Class<?> initializerContextClass =_				GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			Assert.isAssignable(initializerContextClass, contextClass, String.format(_					"Could not add context initializer [%s] as its generic parameter [%s] " +_					"is not assignable from the type of application context used by this " +_					"context loader [%s]", initializerClass.getName(), initializerContextClass, contextClass))__			initializerInstances.add(BeanUtils.instantiateClass(initializerClass))__		}__		applicationContext.getEnvironment().initPropertySources(servletContext, null)___		Collections.sort(initializerInstances, new AnnotationAwareOrderComparator())__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(applicationContext)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,servlet,context,the,current,servlet,context,param,application,context,the,newly,created,application,context,see,create,web,application,context,servlet,context,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,servlet,context,configurable,web,application,context,application,context,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,servlet,context,if,initializer,classes,size,0,return,array,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,context,class,application,context,get,class,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,as,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,context,class,initializer,instances,add,bean,utils,instantiate,class,initializer,class,application,context,get,environment,init,property,sources,servlet,context,null,collections,sort,initializer,instances,new,annotation,aware,order,comparator,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,application,context
ContextLoader -> protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext);1344897419;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param servletContext the current servlet context_@param applicationContext the newly created application context_@see #createWebApplicationContext(ServletContext, ApplicationContext)_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(servletContext)___		if (initializerClasses.size() == 0) {_			_			return__		}__		Class<?> contextClass = applicationContext.getClass()__		ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =_			new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_				GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			Assert.isAssignable(initializerContextClass, contextClass, String.format(_					"Could not add context initializer [%s] as its generic parameter [%s] " +_					"is not assignable from the type of application context used by this " +_					"context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_					contextClass.getName()))__			initializerInstances.add(BeanUtils.instantiateClass(initializerClass))__		}__		applicationContext.getEnvironment().initPropertySources(servletContext, null)___		Collections.sort(initializerInstances, new AnnotationAwareOrderComparator())__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(applicationContext)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,servlet,context,the,current,servlet,context,param,application,context,the,newly,created,application,context,see,create,web,application,context,servlet,context,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,servlet,context,configurable,web,application,context,application,context,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,servlet,context,if,initializer,classes,size,0,return,class,context,class,application,context,get,class,array,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,as,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,context,class,get,name,initializer,instances,add,bean,utils,instantiate,class,initializer,class,application,context,get,environment,init,property,sources,servlet,context,null,collections,sort,initializer,instances,new,annotation,aware,order,comparator,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,application,context
ContextLoader -> protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext);1356735495;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param servletContext the current servlet context_@param applicationContext the newly created application context_@see #createWebApplicationContext(ServletContext, ApplicationContext)_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(servletContext)___		if (initializerClasses.size() == 0) {_			_			return__		}__		Class<?> contextClass = applicationContext.getClass()__		ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =_			new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_				GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			Assert.isAssignable(initializerContextClass, contextClass, String.format(_					"Could not add context initializer [%s] as its generic parameter [%s] " +_					"is not assignable from the type of application context used by this " +_					"context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_					contextClass.getName()))__			initializerInstances.add(BeanUtils.instantiateClass(initializerClass))__		}__		applicationContext.getEnvironment().initPropertySources(servletContext, null)___		Collections.sort(initializerInstances, new AnnotationAwareOrderComparator())__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(applicationContext)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,servlet,context,the,current,servlet,context,param,application,context,the,newly,created,application,context,see,create,web,application,context,servlet,context,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,servlet,context,configurable,web,application,context,application,context,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,servlet,context,if,initializer,classes,size,0,return,class,context,class,application,context,get,class,array,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,as,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,context,class,get,name,initializer,instances,add,bean,utils,instantiate,class,initializer,class,application,context,get,environment,init,property,sources,servlet,context,null,collections,sort,initializer,instances,new,annotation,aware,order,comparator,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,application,context
ContextLoader -> protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext);1362408075;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param servletContext the current servlet context_@param applicationContext the newly created application context_@see #createWebApplicationContext(ServletContext, ApplicationContext)_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(servletContext)___		if (initializerClasses.size() == 0) {_			_			return__		}__		Class<?> contextClass = applicationContext.getClass()__		ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =_				new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			Assert.isAssignable(initializerContextClass, contextClass, String.format(_					"Could not add context initializer [%s] as its generic parameter [%s] " +_					"is not assignable from the type of application context used by this " +_					"context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_					contextClass.getName()))__			initializerInstances.add(BeanUtils.instantiateClass(initializerClass))__		}__		ConfigurableEnvironment env = applicationContext.getEnvironment()__		if (env instanceof ConfigurableWebEnvironment) {_			((ConfigurableWebEnvironment)env).initPropertySources(servletContext, null)__		}__		Collections.sort(initializerInstances, new AnnotationAwareOrderComparator())__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(applicationContext)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,servlet,context,the,current,servlet,context,param,application,context,the,newly,created,application,context,see,create,web,application,context,servlet,context,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,servlet,context,configurable,web,application,context,application,context,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,servlet,context,if,initializer,classes,size,0,return,class,context,class,application,context,get,class,array,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,as,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,context,class,get,name,initializer,instances,add,bean,utils,instantiate,class,initializer,class,configurable,environment,env,application,context,get,environment,if,env,instanceof,configurable,web,environment,configurable,web,environment,env,init,property,sources,servlet,context,null,collections,sort,initializer,instances,new,annotation,aware,order,comparator,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,application,context
ContextLoader -> protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext);1368713394;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param servletContext the current servlet context_@param applicationContext the newly created application context_@see #createWebApplicationContext(ServletContext, ApplicationContext)_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(servletContext)__		if (initializerClasses.size() == 0) {_			_			return__		}__		Class<?> contextClass = applicationContext.getClass()__		ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =_				new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			if (initializerContextClass != null) {_				Assert.isAssignable(initializerContextClass, contextClass, String.format(_						"Could not add context initializer [%s] as its generic parameter [%s] " +_						"is not assignable from the type of application context used by this " +_						"context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_						contextClass.getName()))__			}_			initializerInstances.add(BeanUtils.instantiateClass(initializerClass))__		}__		ConfigurableEnvironment env = applicationContext.getEnvironment()__		if (env instanceof ConfigurableWebEnvironment) {_			((ConfigurableWebEnvironment)env).initPropertySources(servletContext, null)__		}__		Collections.sort(initializerInstances, new AnnotationAwareOrderComparator())__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(applicationContext)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,servlet,context,the,current,servlet,context,param,application,context,the,newly,created,application,context,see,create,web,application,context,servlet,context,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,servlet,context,configurable,web,application,context,application,context,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,servlet,context,if,initializer,classes,size,0,return,class,context,class,application,context,get,class,array,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,if,initializer,context,class,null,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,as,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,context,class,get,name,initializer,instances,add,bean,utils,instantiate,class,initializer,class,configurable,environment,env,application,context,get,environment,if,env,instanceof,configurable,web,environment,configurable,web,environment,env,init,property,sources,servlet,context,null,collections,sort,initializer,instances,new,annotation,aware,order,comparator,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,application,context
ContextLoader -> protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext);1384955432;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param servletContext the current servlet context_@param applicationContext the newly created application context_@see #createWebApplicationContext(ServletContext, ApplicationContext)_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext servletContext, ConfigurableWebApplicationContext applicationContext) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(servletContext)__		if (initializerClasses.isEmpty()) {_			_			return__		}__		Class<?> contextClass = applicationContext.getClass()__		ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =_				new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			if (initializerContextClass != null) {_				Assert.isAssignable(initializerContextClass, contextClass, String.format(_						"Could not add context initializer [%s] as its generic parameter [%s] " +_						"is not assignable from the type of application context used by this " +_						"context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_						contextClass.getName()))__			}_			initializerInstances.add(BeanUtils.instantiateClass(initializerClass))__		}__		ConfigurableEnvironment env = applicationContext.getEnvironment()__		if (env instanceof ConfigurableWebEnvironment) {_			((ConfigurableWebEnvironment) env).initPropertySources(servletContext, null)__		}__		AnnotationAwareOrderComparator.sort(initializerInstances)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(applicationContext)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,servlet,context,the,current,servlet,context,param,application,context,the,newly,created,application,context,see,create,web,application,context,servlet,context,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,servlet,context,configurable,web,application,context,application,context,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,servlet,context,if,initializer,classes,is,empty,return,class,context,class,application,context,get,class,array,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,if,initializer,context,class,null,assert,is,assignable,initializer,context,class,context,class,string,format,could,not,add,context,initializer,s,as,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,context,class,get,name,initializer,instances,add,bean,utils,instantiate,class,initializer,class,configurable,environment,env,application,context,get,environment,if,env,instanceof,configurable,web,environment,configurable,web,environment,env,init,property,sources,servlet,context,null,annotation,aware,order,comparator,sort,initializer,instances,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,application,context
ContextLoader -> protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac);1389820887;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param sc the current servlet context_@param wac the newly created application context_@see #createWebApplicationContext(ServletContext, ApplicationContext)_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(sc)__		if (initializerClasses.isEmpty()) {_			_			return__		}__		ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =_				new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			if (initializerContextClass != null) {_				Assert.isAssignable(initializerContextClass, wac.getClass(), String.format(_						"Could not add context initializer [%s] since its generic parameter [%s] " +_						"is not assignable from the type of application context used by this " +_						"context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_						wac.getClass().getName()))__			}_			initializerInstances.add(BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(initializerInstances)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(wac)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,sc,the,current,servlet,context,param,wac,the,newly,created,application,context,see,create,web,application,context,servlet,context,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,sc,configurable,web,application,context,wac,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,sc,if,initializer,classes,is,empty,return,array,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,if,initializer,context,class,null,assert,is,assignable,initializer,context,class,wac,get,class,string,format,could,not,add,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,wac,get,class,get,name,initializer,instances,add,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,initializer,instances,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,wac
ContextLoader -> protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac);1419966315;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param sc the current servlet context_@param wac the newly created application context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(sc)__		if (initializerClasses.isEmpty()) {_			_			return__		}__		ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =_				new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>()___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			if (initializerContextClass != null) {_				Assert.isAssignable(initializerContextClass, wac.getClass(), String.format(_						"Could not add context initializer [%s] since its generic parameter [%s] " +_						"is not assignable from the type of application context used by this " +_						"context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_						wac.getClass().getName()))__			}_			initializerInstances.add(BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(initializerInstances)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {_			initializer.initialize(wac)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,sc,the,current,servlet,context,param,wac,the,newly,created,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,sc,configurable,web,application,context,wac,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,sc,if,initializer,classes,is,empty,return,array,list,application,context,initializer,configurable,application,context,initializer,instances,new,array,list,application,context,initializer,configurable,application,context,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,if,initializer,context,class,null,assert,is,assignable,initializer,context,class,wac,get,class,string,format,could,not,add,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,wac,get,class,get,name,initializer,instances,add,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,initializer,instances,for,application,context,initializer,configurable,application,context,initializer,initializer,instances,initializer,initialize,wac
ContextLoader -> protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac);1427815317;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param sc the current servlet context_@param wac the newly created application context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(sc)___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			if (initializerContextClass != null) {_				Assert.isAssignable(initializerContextClass, wac.getClass(), String.format(_						"Could not add context initializer [%s] since its generic parameter [%s] " +_						"is not assignable from the type of application context used by this " +_						"context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),_						wac.getClass().getName()))__			}_			this.contextInitializers.add(BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(this.contextInitializers)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : this.contextInitializers) {_			initializer.initialize(wac)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,sc,the,current,servlet,context,param,wac,the,newly,created,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,sc,configurable,web,application,context,wac,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,sc,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,if,initializer,context,class,null,assert,is,assignable,initializer,context,class,wac,get,class,string,format,could,not,add,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,wac,get,class,get,name,this,context,initializers,add,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,this,context,initializers,for,application,context,initializer,configurable,application,context,initializer,this,context,initializers,initializer,initialize,wac
ContextLoader -> protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac);1456332614;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param sc the current servlet context_@param wac the newly created application context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(sc)___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			if (initializerContextClass != null && !initializerContextClass.isInstance(wac)) {_				throw new ApplicationContextException(String.format(_						"Could not apply context initializer [%s] since its generic parameter [%s] " +_						"is not assignable from the type of application context used by this " +_						"context loader: [%s]", initializerClass.getName(), initializerContextClass.getName(),_						wac.getClass().getName()))__			}_			this.contextInitializers.add(BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(this.contextInitializers)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : this.contextInitializers) {_			initializer.initialize(wac)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,sc,the,current,servlet,context,param,wac,the,newly,created,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,sc,configurable,web,application,context,wac,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,sc,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,if,initializer,context,class,null,initializer,context,class,is,instance,wac,throw,new,application,context,exception,string,format,could,not,apply,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,wac,get,class,get,name,this,context,initializers,add,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,this,context,initializers,for,application,context,initializer,configurable,application,context,initializer,this,context,initializers,initializer,initialize,wac
ContextLoader -> protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac);1467730834;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param sc the current servlet context_@param wac the newly created application context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(sc)___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			if (initializerContextClass != null && !initializerContextClass.isInstance(wac)) {_				throw new ApplicationContextException(String.format(_						"Could not apply context initializer [%s] since its generic parameter [%s] " +_						"is not assignable from the type of application context used by this " +_						"context loader: [%s]", initializerClass.getName(), initializerContextClass.getName(),_						wac.getClass().getName()))__			}_			this.contextInitializers.add(BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(this.contextInitializers)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : this.contextInitializers) {_			initializer.initialize(wac)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,sc,the,current,servlet,context,param,wac,the,newly,created,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,sc,configurable,web,application,context,wac,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,sc,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,if,initializer,context,class,null,initializer,context,class,is,instance,wac,throw,new,application,context,exception,string,format,could,not,apply,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,wac,get,class,get,name,this,context,initializers,add,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,this,context,initializers,for,application,context,initializer,configurable,application,context,initializer,this,context,initializers,initializer,initialize,wac
ContextLoader -> protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac);1484657917;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param sc the current servlet context_@param wac the newly created application context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(sc)___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			if (initializerContextClass != null && !initializerContextClass.isInstance(wac)) {_				throw new ApplicationContextException(String.format(_						"Could not apply context initializer [%s] since its generic parameter [%s] " +_						"is not assignable from the type of application context used by this " +_						"context loader: [%s]", initializerClass.getName(), initializerContextClass.getName(),_						wac.getClass().getName()))__			}_			this.contextInitializers.add(BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(this.contextInitializers)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : this.contextInitializers) {_			initializer.initialize(wac)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,sc,the,current,servlet,context,param,wac,the,newly,created,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,sc,configurable,web,application,context,wac,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,sc,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,if,initializer,context,class,null,initializer,context,class,is,instance,wac,throw,new,application,context,exception,string,format,could,not,apply,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,wac,get,class,get,name,this,context,initializers,add,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,this,context,initializers,for,application,context,initializer,configurable,application,context,initializer,this,context,initializers,initializer,initialize,wac
ContextLoader -> protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac);1484665397;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param sc the current servlet context_@param wac the newly created application context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(sc)___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			if (initializerContextClass != null && !initializerContextClass.isInstance(wac)) {_				throw new ApplicationContextException(String.format(_						"Could not apply context initializer [%s] since its generic parameter [%s] " +_						"is not assignable from the type of application context used by this " +_						"context loader: [%s]", initializerClass.getName(), initializerContextClass.getName(),_						wac.getClass().getName()))__			}_			this.contextInitializers.add(BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(this.contextInitializers)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : this.contextInitializers) {_			initializer.initialize(wac)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,sc,the,current,servlet,context,param,wac,the,newly,created,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,sc,configurable,web,application,context,wac,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,sc,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,if,initializer,context,class,null,initializer,context,class,is,instance,wac,throw,new,application,context,exception,string,format,could,not,apply,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,wac,get,class,get,name,this,context,initializers,add,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,this,context,initializers,for,application,context,initializer,configurable,application,context,initializer,this,context,initializers,initializer,initialize,wac
ContextLoader -> protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac);1485810955;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param sc the current servlet context_@param wac the newly created application context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(sc)___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			if (initializerContextClass != null && !initializerContextClass.isInstance(wac)) {_				throw new ApplicationContextException(String.format(_						"Could not apply context initializer [%s] since its generic parameter [%s] " +_						"is not assignable from the type of application context used by this " +_						"context loader: [%s]", initializerClass.getName(), initializerContextClass.getName(),_						wac.getClass().getName()))__			}_			this.contextInitializers.add(BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(this.contextInitializers)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : this.contextInitializers) {_			initializer.initialize(wac)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,sc,the,current,servlet,context,param,wac,the,newly,created,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,sc,configurable,web,application,context,wac,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,sc,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,if,initializer,context,class,null,initializer,context,class,is,instance,wac,throw,new,application,context,exception,string,format,could,not,apply,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,wac,get,class,get,name,this,context,initializers,add,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,this,context,initializers,for,application,context,initializer,configurable,application,context,initializer,this,context,initializers,initializer,initialize,wac
ContextLoader -> protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac);1495868221;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param sc the current servlet context_@param wac the newly created application context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(sc)___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			if (initializerContextClass != null && !initializerContextClass.isInstance(wac)) {_				throw new ApplicationContextException(String.format(_						"Could not apply context initializer [%s] since its generic parameter [%s] " +_						"is not assignable from the type of application context used by this " +_						"context loader: [%s]", initializerClass.getName(), initializerContextClass.getName(),_						wac.getClass().getName()))__			}_			this.contextInitializers.add(BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(this.contextInitializers)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : this.contextInitializers) {_			initializer.initialize(wac)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,sc,the,current,servlet,context,param,wac,the,newly,created,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,sc,configurable,web,application,context,wac,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,sc,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,if,initializer,context,class,null,initializer,context,class,is,instance,wac,throw,new,application,context,exception,string,format,could,not,apply,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,wac,get,class,get,name,this,context,initializers,add,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,this,context,initializers,for,application,context,initializer,configurable,application,context,initializer,this,context,initializers,initializer,initialize,wac
ContextLoader -> protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac);1496837955;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param sc the current servlet context_@param wac the newly created application context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(sc)___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			if (initializerContextClass != null && !initializerContextClass.isInstance(wac)) {_				throw new ApplicationContextException(String.format(_						"Could not apply context initializer [%s] since its generic parameter [%s] " +_						"is not assignable from the type of application context used by this " +_						"context loader: [%s]", initializerClass.getName(), initializerContextClass.getName(),_						wac.getClass().getName()))__			}_			this.contextInitializers.add(BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(this.contextInitializers)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : this.contextInitializers) {_			initializer.initialize(wac)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,sc,the,current,servlet,context,param,wac,the,newly,created,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,sc,configurable,web,application,context,wac,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,sc,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,if,initializer,context,class,null,initializer,context,class,is,instance,wac,throw,new,application,context,exception,string,format,could,not,apply,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,wac,get,class,get,name,this,context,initializers,add,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,this,context,initializers,for,application,context,initializer,configurable,application,context,initializer,this,context,initializers,initializer,initialize,wac
ContextLoader -> protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac);1498780456;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param sc the current servlet context_@param wac the newly created application context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(sc)___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			if (initializerContextClass != null && !initializerContextClass.isInstance(wac)) {_				throw new ApplicationContextException(String.format(_						"Could not apply context initializer [%s] since its generic parameter [%s] " +_						"is not assignable from the type of application context used by this " +_						"context loader: [%s]", initializerClass.getName(), initializerContextClass.getName(),_						wac.getClass().getName()))__			}_			this.contextInitializers.add(BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(this.contextInitializers)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : this.contextInitializers) {_			initializer.initialize(wac)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,sc,the,current,servlet,context,param,wac,the,newly,created,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,sc,configurable,web,application,context,wac,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,sc,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,if,initializer,context,class,null,initializer,context,class,is,instance,wac,throw,new,application,context,exception,string,format,could,not,apply,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,wac,get,class,get,name,this,context,initializers,add,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,this,context,initializers,for,application,context,initializer,configurable,application,context,initializer,this,context,initializers,initializer,initialize,wac
ContextLoader -> protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac);1530174524;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param sc the current servlet context_@param wac the newly created application context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(sc)___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			if (initializerContextClass != null && !initializerContextClass.isInstance(wac)) {_				throw new ApplicationContextException(String.format(_						"Could not apply context initializer [%s] since its generic parameter [%s] " +_						"is not assignable from the type of application context used by this " +_						"context loader: [%s]", initializerClass.getName(), initializerContextClass.getName(),_						wac.getClass().getName()))__			}_			this.contextInitializers.add(BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(this.contextInitializers)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : this.contextInitializers) {_			initializer.initialize(wac)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,sc,the,current,servlet,context,param,wac,the,newly,created,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,sc,configurable,web,application,context,wac,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,sc,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,if,initializer,context,class,null,initializer,context,class,is,instance,wac,throw,new,application,context,exception,string,format,could,not,apply,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,wac,get,class,get,name,this,context,initializers,add,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,this,context,initializers,for,application,context,initializer,configurable,application,context,initializer,this,context,initializers,initializer,initialize,wac
ContextLoader -> protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac);1532091916;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param sc the current servlet context_@param wac the newly created application context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(sc)___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			if (initializerContextClass != null && !initializerContextClass.isInstance(wac)) {_				throw new ApplicationContextException(String.format(_						"Could not apply context initializer [%s] since its generic parameter [%s] " +_						"is not assignable from the type of application context used by this " +_						"context loader: [%s]", initializerClass.getName(), initializerContextClass.getName(),_						wac.getClass().getName()))__			}_			this.contextInitializers.add(BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(this.contextInitializers)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : this.contextInitializers) {_			initializer.initialize(wac)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,sc,the,current,servlet,context,param,wac,the,newly,created,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,sc,configurable,web,application,context,wac,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,sc,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,if,initializer,context,class,null,initializer,context,class,is,instance,wac,throw,new,application,context,exception,string,format,could,not,apply,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,wac,get,class,get,name,this,context,initializers,add,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,this,context,initializers,for,application,context,initializer,configurable,application,context,initializer,this,context,initializers,initializer,initialize,wac
ContextLoader -> protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac);1532555403;Customize the {@link ConfigurableWebApplicationContext} created by this_ContextLoader after config locations have been supplied to the context_but before the context is <em>refreshed</em>._<p>The default implementation {@linkplain #determineContextInitializerClasses(ServletContext)_determines} what (if any) context initializer classes have been specified through_{@linkplain #CONTEXT_INITIALIZER_CLASSES_PARAM context init parameters} and_{@linkplain ApplicationContextInitializer#initialize invokes each} with the_given web application context._<p>Any {@code ApplicationContextInitializers} implementing_{@link org.springframework.core.Ordered Ordered} or marked with @{@link_org.springframework.core.annotation.Order Order} will be sorted appropriately._@param sc the current servlet context_@param wac the newly created application context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM_@see ApplicationContextInitializer#initialize(ConfigurableApplicationContext);protected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac) {_		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> initializerClasses =_				determineContextInitializerClasses(sc)___		for (Class<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerClass : initializerClasses) {_			Class<?> initializerContextClass =_					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class)__			if (initializerContextClass != null && !initializerContextClass.isInstance(wac)) {_				throw new ApplicationContextException(String.format(_						"Could not apply context initializer [%s] since its generic parameter [%s] " +_						"is not assignable from the type of application context used by this " +_						"context loader: [%s]", initializerClass.getName(), initializerContextClass.getName(),_						wac.getClass().getName()))__			}_			this.contextInitializers.add(BeanUtils.instantiateClass(initializerClass))__		}__		AnnotationAwareOrderComparator.sort(this.contextInitializers)__		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : this.contextInitializers) {_			initializer.initialize(wac)__		}_	};customize,the,link,configurable,web,application,context,created,by,this,context,loader,after,config,locations,have,been,supplied,to,the,context,but,before,the,context,is,em,refreshed,em,p,the,default,implementation,linkplain,determine,context,initializer,classes,servlet,context,determines,what,if,any,context,initializer,classes,have,been,specified,through,linkplain,context,init,parameters,and,linkplain,application,context,initializer,initialize,invokes,each,with,the,given,web,application,context,p,any,code,application,context,initializers,implementing,link,org,springframework,core,ordered,ordered,or,marked,with,link,org,springframework,core,annotation,order,order,will,be,sorted,appropriately,param,sc,the,current,servlet,context,param,wac,the,newly,created,application,context,see,see,application,context,initializer,initialize,configurable,application,context;protected,void,customize,context,servlet,context,sc,configurable,web,application,context,wac,list,class,application,context,initializer,configurable,application,context,initializer,classes,determine,context,initializer,classes,sc,for,class,application,context,initializer,configurable,application,context,initializer,class,initializer,classes,class,initializer,context,class,generic,type,resolver,resolve,type,argument,initializer,class,application,context,initializer,class,if,initializer,context,class,null,initializer,context,class,is,instance,wac,throw,new,application,context,exception,string,format,could,not,apply,context,initializer,s,since,its,generic,parameter,s,is,not,assignable,from,the,type,of,application,context,used,by,this,context,loader,s,initializer,class,get,name,initializer,context,class,get,name,wac,get,class,get,name,this,context,initializers,add,bean,utils,instantiate,class,initializer,class,annotation,aware,order,comparator,sort,this,context,initializers,for,application,context,initializer,configurable,application,context,initializer,this,context,initializers,initializer,initialize,wac
ContextLoader -> @SuppressWarnings("unchecked") 	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1328020251;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;@SuppressWarnings("unchecked")_	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {_		String classNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_			new ArrayList<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>()__		if (classNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(classNames, ",")) {_				try {_					Class<?> clazz = ClassUtils.forName(className, ClassUtils.getDefaultClassLoader())__					Assert.isAssignable(ApplicationContextInitializer.class, clazz,_							"class [" + className + "] must implement ApplicationContextInitializer")__					classes.add((Class<ApplicationContextInitializer<ConfigurableApplicationContext>>)clazz)__				}_				catch (ClassNotFoundException ex) {_					throw new ApplicationContextException(_							"Failed to load context initializer class [" + className + "]", ex)__				}_			}_		}_		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;suppress,warnings,unchecked,protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,string,class,names,servlet,context,get,init,parameter,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,class,application,context,initializer,configurable,application,context,if,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,class,names,try,class,clazz,class,utils,for,name,class,name,class,utils,get,default,class,loader,assert,is,assignable,application,context,initializer,class,clazz,class,class,name,must,implement,application,context,initializer,classes,add,class,application,context,initializer,configurable,application,context,clazz,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,context,initializer,class,class,name,ex,return,classes
ContextLoader -> @SuppressWarnings("unchecked") 	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1329142650;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;@SuppressWarnings("unchecked")_	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {_		String classNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_			new ArrayList<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>()__		if (classNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(classNames, ",")) {_				try {_					Class<?> clazz = ClassUtils.forName(className, ClassUtils.getDefaultClassLoader())__					Assert.isAssignable(ApplicationContextInitializer.class, clazz,_							"class [" + className + "] must implement ApplicationContextInitializer")__					classes.add((Class<ApplicationContextInitializer<ConfigurableApplicationContext>>)clazz)__				}_				catch (ClassNotFoundException ex) {_					throw new ApplicationContextException(_							"Failed to load context initializer class [" + className + "]", ex)__				}_			}_		}_		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;suppress,warnings,unchecked,protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,string,class,names,servlet,context,get,init,parameter,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,class,application,context,initializer,configurable,application,context,if,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,class,names,try,class,clazz,class,utils,for,name,class,name,class,utils,get,default,class,loader,assert,is,assignable,application,context,initializer,class,clazz,class,class,name,must,implement,application,context,initializer,classes,add,class,application,context,initializer,configurable,application,context,clazz,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,context,initializer,class,class,name,ex,return,classes
ContextLoader -> @SuppressWarnings("unchecked") 	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1335774711;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;@SuppressWarnings("unchecked")_	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {_		String classNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_			new ArrayList<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>()__		if (classNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(classNames, ",")) {_				try {_					Class<?> clazz = ClassUtils.forName(className, ClassUtils.getDefaultClassLoader())__					Assert.isAssignable(ApplicationContextInitializer.class, clazz,_							"class [" + className + "] must implement ApplicationContextInitializer")__					classes.add((Class<ApplicationContextInitializer<ConfigurableApplicationContext>>)clazz)__				}_				catch (ClassNotFoundException ex) {_					throw new ApplicationContextException(_							"Failed to load context initializer class [" + className + "]", ex)__				}_			}_		}_		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;suppress,warnings,unchecked,protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,string,class,names,servlet,context,get,init,parameter,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,class,application,context,initializer,configurable,application,context,if,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,class,names,try,class,clazz,class,utils,for,name,class,name,class,utils,get,default,class,loader,assert,is,assignable,application,context,initializer,class,clazz,class,class,name,must,implement,application,context,initializer,classes,add,class,application,context,initializer,configurable,application,context,clazz,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,context,initializer,class,class,name,ex,return,classes
ContextLoader -> @SuppressWarnings("unchecked") 	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1338032393;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;@SuppressWarnings("unchecked")_	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {_		String classNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_			new ArrayList<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>()__		if (classNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(classNames, ",")) {_				try {_					Class<?> clazz = ClassUtils.forName(className, ClassUtils.getDefaultClassLoader())__					Assert.isAssignable(ApplicationContextInitializer.class, clazz,_							"class [" + className + "] must implement ApplicationContextInitializer")__					classes.add((Class<ApplicationContextInitializer<ConfigurableApplicationContext>>)clazz)__				}_				catch (ClassNotFoundException ex) {_					throw new ApplicationContextException(_							"Failed to load context initializer class [" + className + "]", ex)__				}_			}_		}_		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;suppress,warnings,unchecked,protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,string,class,names,servlet,context,get,init,parameter,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,class,application,context,initializer,configurable,application,context,if,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,class,names,try,class,clazz,class,utils,for,name,class,name,class,utils,get,default,class,loader,assert,is,assignable,application,context,initializer,class,clazz,class,class,name,must,implement,application,context,initializer,classes,add,class,application,context,initializer,configurable,application,context,clazz,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,context,initializer,class,class,name,ex,return,classes
ContextLoader -> @SuppressWarnings("unchecked") 	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1344897419;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;@SuppressWarnings("unchecked")_	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {_		String classNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_			new ArrayList<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>()__		if (classNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(classNames, ",")) {_				try {_					Class<?> clazz = ClassUtils.forName(className, ClassUtils.getDefaultClassLoader())__					Assert.isAssignable(ApplicationContextInitializer.class, clazz,_							"class [" + className + "] must implement ApplicationContextInitializer")__					classes.add((Class<ApplicationContextInitializer<ConfigurableApplicationContext>>)clazz)__				}_				catch (ClassNotFoundException ex) {_					throw new ApplicationContextException(_							"Failed to load context initializer class [" + className + "]", ex)__				}_			}_		}_		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;suppress,warnings,unchecked,protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,string,class,names,servlet,context,get,init,parameter,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,class,application,context,initializer,configurable,application,context,if,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,class,names,try,class,clazz,class,utils,for,name,class,name,class,utils,get,default,class,loader,assert,is,assignable,application,context,initializer,class,clazz,class,class,name,must,implement,application,context,initializer,classes,add,class,application,context,initializer,configurable,application,context,clazz,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,context,initializer,class,class,name,ex,return,classes
ContextLoader -> @SuppressWarnings("unchecked") 	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1356735495;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;@SuppressWarnings("unchecked")_	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {_		String classNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_			new ArrayList<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>()__		if (classNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(classNames, ",")) {_				try {_					Class<?> clazz = ClassUtils.forName(className, ClassUtils.getDefaultClassLoader())__					Assert.isAssignable(ApplicationContextInitializer.class, clazz,_							"class [" + className + "] must implement ApplicationContextInitializer")__					classes.add((Class<ApplicationContextInitializer<ConfigurableApplicationContext>>)clazz)__				}_				catch (ClassNotFoundException ex) {_					throw new ApplicationContextException(_							"Failed to load context initializer class [" + className + "]", ex)__				}_			}_		}_		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;suppress,warnings,unchecked,protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,string,class,names,servlet,context,get,init,parameter,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,class,application,context,initializer,configurable,application,context,if,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,class,names,try,class,clazz,class,utils,for,name,class,name,class,utils,get,default,class,loader,assert,is,assignable,application,context,initializer,class,clazz,class,class,name,must,implement,application,context,initializer,classes,add,class,application,context,initializer,configurable,application,context,clazz,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,context,initializer,class,class,name,ex,return,classes
ContextLoader -> @SuppressWarnings("unchecked") 	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1362408075;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;@SuppressWarnings("unchecked")_	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {_		String classNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_			new ArrayList<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>()__		if (classNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(classNames, ",")) {_				try {_					Class<?> clazz = ClassUtils.forName(className, ClassUtils.getDefaultClassLoader())__					Assert.isAssignable(ApplicationContextInitializer.class, clazz,_							"class [" + className + "] must implement ApplicationContextInitializer")__					classes.add((Class<ApplicationContextInitializer<ConfigurableApplicationContext>>)clazz)__				}_				catch (ClassNotFoundException ex) {_					throw new ApplicationContextException(_							"Failed to load context initializer class [" + className + "]", ex)__				}_			}_		}_		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;suppress,warnings,unchecked,protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,string,class,names,servlet,context,get,init,parameter,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,class,application,context,initializer,configurable,application,context,if,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,class,names,try,class,clazz,class,utils,for,name,class,name,class,utils,get,default,class,loader,assert,is,assignable,application,context,initializer,class,clazz,class,class,name,must,implement,application,context,initializer,classes,add,class,application,context,initializer,configurable,application,context,clazz,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,context,initializer,class,class,name,ex,return,classes
ContextLoader -> @SuppressWarnings("unchecked") 	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1368713394;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;@SuppressWarnings("unchecked")_	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {_		String classNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_			new ArrayList<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>()__		if (classNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(classNames, ",")) {_				try {_					Class<?> clazz = ClassUtils.forName(className, ClassUtils.getDefaultClassLoader())__					Assert.isAssignable(ApplicationContextInitializer.class, clazz,_							"class [" + className + "] must implement ApplicationContextInitializer")__					classes.add((Class<ApplicationContextInitializer<ConfigurableApplicationContext>>)clazz)__				}_				catch (ClassNotFoundException ex) {_					throw new ApplicationContextException(_							"Failed to load context initializer class [" + className + "]", ex)__				}_			}_		}_		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;suppress,warnings,unchecked,protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,string,class,names,servlet,context,get,init,parameter,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,class,application,context,initializer,configurable,application,context,if,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,class,names,try,class,clazz,class,utils,for,name,class,name,class,utils,get,default,class,loader,assert,is,assignable,application,context,initializer,class,clazz,class,class,name,must,implement,application,context,initializer,classes,add,class,application,context,initializer,configurable,application,context,clazz,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,context,initializer,class,class,name,ex,return,classes
ContextLoader -> @SuppressWarnings("unchecked") 	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1384955432;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;@SuppressWarnings("unchecked")_	protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {_		String classNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_			new ArrayList<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>()__		if (classNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(classNames, ",")) {_				try {_					Class<?> clazz = ClassUtils.forName(className, ClassUtils.getDefaultClassLoader())__					Assert.isAssignable(ApplicationContextInitializer.class, clazz,_							"class [" + className + "] must implement ApplicationContextInitializer")__					classes.add((Class<ApplicationContextInitializer<ConfigurableApplicationContext>>)clazz)__				}_				catch (ClassNotFoundException ex) {_					throw new ApplicationContextException(_							"Failed to load context initializer class [" + className + "]", ex)__				}_			}_		}_		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;suppress,warnings,unchecked,protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,string,class,names,servlet,context,get,init,parameter,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,class,application,context,initializer,configurable,application,context,if,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,class,names,try,class,clazz,class,utils,for,name,class,name,class,utils,get,default,class,loader,assert,is,assignable,application,context,initializer,class,clazz,class,class,name,must,implement,application,context,initializer,classes,add,class,application,context,initializer,configurable,application,context,clazz,catch,class,not,found,exception,ex,throw,new,application,context,exception,failed,to,load,context,initializer,class,class,name,ex,return,classes
ContextLoader -> @SuppressWarnings("unchecked") 	public void setContextInitializers(ApplicationContextInitializer<?>... initializers);1427815317;Specify which {@link ApplicationContextInitializer} instances should be used_to initialize the application context used by this {@code ContextLoader}._@since 4.2_@see #configureAndRefreshWebApplicationContext_@see #customizeContext;@SuppressWarnings("unchecked")_	public void setContextInitializers(ApplicationContextInitializer<?>... initializers) {_		if (initializers != null) {_			for (ApplicationContextInitializer<?> initializer : initializers) {_				this.contextInitializers.add((ApplicationContextInitializer<ConfigurableApplicationContext>) initializer)__			}_		}_	};specify,which,link,application,context,initializer,instances,should,be,used,to,initialize,the,application,context,used,by,this,code,context,loader,since,4,2,see,configure,and,refresh,web,application,context,see,customize,context;suppress,warnings,unchecked,public,void,set,context,initializers,application,context,initializer,initializers,if,initializers,null,for,application,context,initializer,initializer,initializers,this,context,initializers,add,application,context,initializer,configurable,application,context,initializer
ContextLoader -> @SuppressWarnings("unchecked") 	public void setContextInitializers(ApplicationContextInitializer<?>... initializers);1456332614;Specify which {@link ApplicationContextInitializer} instances should be used_to initialize the application context used by this {@code ContextLoader}._@since 4.2_@see #configureAndRefreshWebApplicationContext_@see #customizeContext;@SuppressWarnings("unchecked")_	public void setContextInitializers(ApplicationContextInitializer<?>... initializers) {_		if (initializers != null) {_			for (ApplicationContextInitializer<?> initializer : initializers) {_				this.contextInitializers.add((ApplicationContextInitializer<ConfigurableApplicationContext>) initializer)__			}_		}_	};specify,which,link,application,context,initializer,instances,should,be,used,to,initialize,the,application,context,used,by,this,code,context,loader,since,4,2,see,configure,and,refresh,web,application,context,see,customize,context;suppress,warnings,unchecked,public,void,set,context,initializers,application,context,initializer,initializers,if,initializers,null,for,application,context,initializer,initializer,initializers,this,context,initializers,add,application,context,initializer,configurable,application,context,initializer
ContextLoader -> @SuppressWarnings("unchecked") 	public void setContextInitializers(ApplicationContextInitializer<?>... initializers);1467730834;Specify which {@link ApplicationContextInitializer} instances should be used_to initialize the application context used by this {@code ContextLoader}._@since 4.2_@see #configureAndRefreshWebApplicationContext_@see #customizeContext;@SuppressWarnings("unchecked")_	public void setContextInitializers(ApplicationContextInitializer<?>... initializers) {_		if (initializers != null) {_			for (ApplicationContextInitializer<?> initializer : initializers) {_				this.contextInitializers.add((ApplicationContextInitializer<ConfigurableApplicationContext>) initializer)__			}_		}_	};specify,which,link,application,context,initializer,instances,should,be,used,to,initialize,the,application,context,used,by,this,code,context,loader,since,4,2,see,configure,and,refresh,web,application,context,see,customize,context;suppress,warnings,unchecked,public,void,set,context,initializers,application,context,initializer,initializers,if,initializers,null,for,application,context,initializer,initializer,initializers,this,context,initializers,add,application,context,initializer,configurable,application,context,initializer
ContextLoader -> @SuppressWarnings("unchecked") 	public void setContextInitializers(ApplicationContextInitializer<?>... initializers);1484657917;Specify which {@link ApplicationContextInitializer} instances should be used_to initialize the application context used by this {@code ContextLoader}._@since 4.2_@see #configureAndRefreshWebApplicationContext_@see #customizeContext;@SuppressWarnings("unchecked")_	public void setContextInitializers(ApplicationContextInitializer<?>... initializers) {_		if (initializers != null) {_			for (ApplicationContextInitializer<?> initializer : initializers) {_				this.contextInitializers.add((ApplicationContextInitializer<ConfigurableApplicationContext>) initializer)__			}_		}_	};specify,which,link,application,context,initializer,instances,should,be,used,to,initialize,the,application,context,used,by,this,code,context,loader,since,4,2,see,configure,and,refresh,web,application,context,see,customize,context;suppress,warnings,unchecked,public,void,set,context,initializers,application,context,initializer,initializers,if,initializers,null,for,application,context,initializer,initializer,initializers,this,context,initializers,add,application,context,initializer,configurable,application,context,initializer
ContextLoader -> @SuppressWarnings("unchecked") 	public void setContextInitializers(ApplicationContextInitializer<?>... initializers);1484665397;Specify which {@link ApplicationContextInitializer} instances should be used_to initialize the application context used by this {@code ContextLoader}._@since 4.2_@see #configureAndRefreshWebApplicationContext_@see #customizeContext;@SuppressWarnings("unchecked")_	public void setContextInitializers(ApplicationContextInitializer<?>... initializers) {_		if (initializers != null) {_			for (ApplicationContextInitializer<?> initializer : initializers) {_				this.contextInitializers.add((ApplicationContextInitializer<ConfigurableApplicationContext>) initializer)__			}_		}_	};specify,which,link,application,context,initializer,instances,should,be,used,to,initialize,the,application,context,used,by,this,code,context,loader,since,4,2,see,configure,and,refresh,web,application,context,see,customize,context;suppress,warnings,unchecked,public,void,set,context,initializers,application,context,initializer,initializers,if,initializers,null,for,application,context,initializer,initializer,initializers,this,context,initializers,add,application,context,initializer,configurable,application,context,initializer
ContextLoader -> @SuppressWarnings("unchecked") 	public void setContextInitializers(ApplicationContextInitializer<?>... initializers);1485810955;Specify which {@link ApplicationContextInitializer} instances should be used_to initialize the application context used by this {@code ContextLoader}._@since 4.2_@see #configureAndRefreshWebApplicationContext_@see #customizeContext;@SuppressWarnings("unchecked")_	public void setContextInitializers(ApplicationContextInitializer<?>... initializers) {_		if (initializers != null) {_			for (ApplicationContextInitializer<?> initializer : initializers) {_				this.contextInitializers.add((ApplicationContextInitializer<ConfigurableApplicationContext>) initializer)__			}_		}_	};specify,which,link,application,context,initializer,instances,should,be,used,to,initialize,the,application,context,used,by,this,code,context,loader,since,4,2,see,configure,and,refresh,web,application,context,see,customize,context;suppress,warnings,unchecked,public,void,set,context,initializers,application,context,initializer,initializers,if,initializers,null,for,application,context,initializer,initializer,initializers,this,context,initializers,add,application,context,initializer,configurable,application,context,initializer
ContextLoader -> @SuppressWarnings("unchecked") 	public void setContextInitializers(ApplicationContextInitializer<?>... initializers);1495868221;Specify which {@link ApplicationContextInitializer} instances should be used_to initialize the application context used by this {@code ContextLoader}._@since 4.2_@see #configureAndRefreshWebApplicationContext_@see #customizeContext;@SuppressWarnings("unchecked")_	public void setContextInitializers(ApplicationContextInitializer<?>... initializers) {_		if (initializers != null) {_			for (ApplicationContextInitializer<?> initializer : initializers) {_				this.contextInitializers.add((ApplicationContextInitializer<ConfigurableApplicationContext>) initializer)__			}_		}_	};specify,which,link,application,context,initializer,instances,should,be,used,to,initialize,the,application,context,used,by,this,code,context,loader,since,4,2,see,configure,and,refresh,web,application,context,see,customize,context;suppress,warnings,unchecked,public,void,set,context,initializers,application,context,initializer,initializers,if,initializers,null,for,application,context,initializer,initializer,initializers,this,context,initializers,add,application,context,initializer,configurable,application,context,initializer
ContextLoader -> @Nullable 	public static WebApplicationContext getCurrentWebApplicationContext();1495868221;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;@Nullable_	public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;nullable,public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> @Nullable 	public static WebApplicationContext getCurrentWebApplicationContext();1496837955;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;@Nullable_	public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;nullable,public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> @Nullable 	public static WebApplicationContext getCurrentWebApplicationContext();1498780456;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;@Nullable_	public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;nullable,public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> @Nullable 	public static WebApplicationContext getCurrentWebApplicationContext();1530174524;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;@Nullable_	public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;nullable,public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> @Nullable 	public static WebApplicationContext getCurrentWebApplicationContext();1532091916;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;@Nullable_	public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;nullable,public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> @Nullable 	public static WebApplicationContext getCurrentWebApplicationContext();1532555403;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;@Nullable_	public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;nullable,public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1328020251;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				configureAndRefreshWebApplicationContext((ConfigurableWebApplicationContext)this.context, servletContext)__			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configure,and,refresh,web,application,context,configurable,web,application,context,this,context,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1329142650;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				configureAndRefreshWebApplicationContext((ConfigurableWebApplicationContext)this.context, servletContext)__			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configure,and,refresh,web,application,context,configurable,web,application,context,this,context,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1335774711;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				configureAndRefreshWebApplicationContext((ConfigurableWebApplicationContext)this.context, servletContext)__			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configure,and,refresh,web,application,context,configurable,web,application,context,this,context,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1338032393;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				configureAndRefreshWebApplicationContext((ConfigurableWebApplicationContext)this.context, servletContext)__			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configure,and,refresh,web,application,context,configurable,web,application,context,this,context,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1344897419;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				configureAndRefreshWebApplicationContext((ConfigurableWebApplicationContext)this.context, servletContext)__			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configure,and,refresh,web,application,context,configurable,web,application,context,this,context,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1356735495;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				configureAndRefreshWebApplicationContext((ConfigurableWebApplicationContext)this.context, servletContext)__			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configure,and,refresh,web,application,context,configurable,web,application,context,this,context,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1362408075;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1368713394;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1384955432;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1389820887;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1419966315;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1427815317;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1456332614;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1467730834;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1484657917;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1484665397;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1485810955;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1495868221;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1496837955;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1498780456;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1530174524;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		Log logger = LogFactory.getLog(ContextLoader.class)__		servletContext.log("Initializing Spring root WebApplicationContext")__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isDebugEnabled()) {_				logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" +_						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]")__			}_			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_		catch (Error err) {_			logger.error("Context initialization failed", err)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err)__			throw err__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,log,logger,log,factory,get,log,context,loader,class,servlet,context,log,initializing,spring,root,web,application,context,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,debug,enabled,logger,debug,published,root,web,application,context,as,servlet,context,attribute,with,name,web,application,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex,catch,error,err,logger,error,context,initialization,failed,err,servlet,context,set,attribute,web,application,context,err,throw,err
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1532091916;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		servletContext.log("Initializing Spring root WebApplicationContext")__		Log logger = LogFactory.getLog(ContextLoader.class)__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException | Error ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,servlet,context,log,initializing,spring,root,web,application,context,log,logger,log,factory,get,log,context,loader,class,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialization,completed,in,elapsed,time,ms,return,this,context,catch,runtime,exception,error,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex
ContextLoader -> public WebApplicationContext initWebApplicationContext(ServletContext servletContext);1532555403;Initialize Spring's web application context for the given servlet context,_using the application context provided at construction time, or creating a new one_according to the "{@link #CONTEXT_CLASS_PARAM contextClass}" and_"{@link #CONFIG_LOCATION_PARAM contextConfigLocation}" context-params._@param servletContext current servlet context_@return the new WebApplicationContext_@see #ContextLoader(WebApplicationContext)_@see #CONTEXT_CLASS_PARAM_@see #CONFIG_LOCATION_PARAM;public WebApplicationContext initWebApplicationContext(ServletContext servletContext) {_		if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {_			throw new IllegalStateException(_					"Cannot initialize context because there is already a root application context present - " +_					"check whether you have multiple ContextLoader* definitions in your web.xml!")__		}__		servletContext.log("Initializing Spring root WebApplicationContext")__		Log logger = LogFactory.getLog(ContextLoader.class)__		if (logger.isInfoEnabled()) {_			logger.info("Root WebApplicationContext: initialization started")__		}_		long startTime = System.currentTimeMillis()___		try {_			_			_			if (this.context == null) {_				this.context = createWebApplicationContext(servletContext)__			}_			if (this.context instanceof ConfigurableWebApplicationContext) {_				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context__				if (!cwac.isActive()) {_					_					_					if (cwac.getParent() == null) {_						_						_						ApplicationContext parent = loadParentContext(servletContext)__						cwac.setParent(parent)__					}_					configureAndRefreshWebApplicationContext(cwac, servletContext)__				}_			}_			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context)___			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = this.context__			}_			else if (ccl != null) {_				currentContextPerThread.put(ccl, this.context)__			}__			if (logger.isInfoEnabled()) {_				long elapsedTime = System.currentTimeMillis() - startTime__				logger.info("Root WebApplicationContext initialized in " + elapsedTime + " ms")__			}__			return this.context__		}_		catch (RuntimeException | Error ex) {_			logger.error("Context initialization failed", ex)__			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex)__			throw ex__		}_	};initialize,spring,s,web,application,context,for,the,given,servlet,context,using,the,application,context,provided,at,construction,time,or,creating,a,new,one,according,to,the,link,context,class,and,link,context,config,location,context,params,param,servlet,context,current,servlet,context,return,the,new,web,application,context,see,context,loader,web,application,context,see,see;public,web,application,context,init,web,application,context,servlet,context,servlet,context,if,servlet,context,get,attribute,web,application,context,null,throw,new,illegal,state,exception,cannot,initialize,context,because,there,is,already,a,root,application,context,present,check,whether,you,have,multiple,context,loader,definitions,in,your,web,xml,servlet,context,log,initializing,spring,root,web,application,context,log,logger,log,factory,get,log,context,loader,class,if,logger,is,info,enabled,logger,info,root,web,application,context,initialization,started,long,start,time,system,current,time,millis,try,if,this,context,null,this,context,create,web,application,context,servlet,context,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,cwac,configurable,web,application,context,this,context,if,cwac,is,active,if,cwac,get,parent,null,application,context,parent,load,parent,context,servlet,context,cwac,set,parent,parent,configure,and,refresh,web,application,context,cwac,servlet,context,servlet,context,set,attribute,web,application,context,this,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,this,context,else,if,ccl,null,current,context,per,thread,put,ccl,this,context,if,logger,is,info,enabled,long,elapsed,time,system,current,time,millis,start,time,logger,info,root,web,application,context,initialized,in,elapsed,time,ms,return,this,context,catch,runtime,exception,error,ex,logger,error,context,initialization,failed,ex,servlet,context,set,attribute,web,application,context,ex,throw,ex
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1328020251;Close Spring's web application context for the given servlet context. If_the default {@link #loadParentContext(ServletContext)} implementation,_which uses ContextSingletonBeanFactoryLocator, has loaded any shared_parent context, release one reference to that shared parent context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__			if (this.parentContextRef != null) {_				this.parentContextRef.release()__			}_		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,if,the,default,link,load,parent,context,servlet,context,implementation,which,uses,context,singleton,bean,factory,locator,has,loaded,any,shared,parent,context,release,one,reference,to,that,shared,parent,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context,if,this,parent,context,ref,null,this,parent,context,ref,release
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1329142650;Close Spring's web application context for the given servlet context. If_the default {@link #loadParentContext(ServletContext)} implementation,_which uses ContextSingletonBeanFactoryLocator, has loaded any shared_parent context, release one reference to that shared parent context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__			if (this.parentContextRef != null) {_				this.parentContextRef.release()__			}_		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,if,the,default,link,load,parent,context,servlet,context,implementation,which,uses,context,singleton,bean,factory,locator,has,loaded,any,shared,parent,context,release,one,reference,to,that,shared,parent,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context,if,this,parent,context,ref,null,this,parent,context,ref,release
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1335774711;Close Spring's web application context for the given servlet context. If_the default {@link #loadParentContext(ServletContext)} implementation,_which uses ContextSingletonBeanFactoryLocator, has loaded any shared_parent context, release one reference to that shared parent context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__			if (this.parentContextRef != null) {_				this.parentContextRef.release()__			}_		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,if,the,default,link,load,parent,context,servlet,context,implementation,which,uses,context,singleton,bean,factory,locator,has,loaded,any,shared,parent,context,release,one,reference,to,that,shared,parent,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context,if,this,parent,context,ref,null,this,parent,context,ref,release
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1338032393;Close Spring's web application context for the given servlet context. If_the default {@link #loadParentContext(ServletContext)} implementation,_which uses ContextSingletonBeanFactoryLocator, has loaded any shared_parent context, release one reference to that shared parent context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__			if (this.parentContextRef != null) {_				this.parentContextRef.release()__			}_		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,if,the,default,link,load,parent,context,servlet,context,implementation,which,uses,context,singleton,bean,factory,locator,has,loaded,any,shared,parent,context,release,one,reference,to,that,shared,parent,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context,if,this,parent,context,ref,null,this,parent,context,ref,release
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1344897419;Close Spring's web application context for the given servlet context. If_the default {@link #loadParentContext(ServletContext)} implementation,_which uses ContextSingletonBeanFactoryLocator, has loaded any shared_parent context, release one reference to that shared parent context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__			if (this.parentContextRef != null) {_				this.parentContextRef.release()__			}_		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,if,the,default,link,load,parent,context,servlet,context,implementation,which,uses,context,singleton,bean,factory,locator,has,loaded,any,shared,parent,context,release,one,reference,to,that,shared,parent,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context,if,this,parent,context,ref,null,this,parent,context,ref,release
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1356735495;Close Spring's web application context for the given servlet context. If_the default {@link #loadParentContext(ServletContext)} implementation,_which uses ContextSingletonBeanFactoryLocator, has loaded any shared_parent context, release one reference to that shared parent context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__			if (this.parentContextRef != null) {_				this.parentContextRef.release()__			}_		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,if,the,default,link,load,parent,context,servlet,context,implementation,which,uses,context,singleton,bean,factory,locator,has,loaded,any,shared,parent,context,release,one,reference,to,that,shared,parent,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context,if,this,parent,context,ref,null,this,parent,context,ref,release
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1362408075;Close Spring's web application context for the given servlet context. If_the default {@link #loadParentContext(ServletContext)} implementation,_which uses ContextSingletonBeanFactoryLocator, has loaded any shared_parent context, release one reference to that shared parent context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__			if (this.parentContextRef != null) {_				this.parentContextRef.release()__			}_		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,if,the,default,link,load,parent,context,servlet,context,implementation,which,uses,context,singleton,bean,factory,locator,has,loaded,any,shared,parent,context,release,one,reference,to,that,shared,parent,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context,if,this,parent,context,ref,null,this,parent,context,ref,release
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1368713394;Close Spring's web application context for the given servlet context. If_the default {@link #loadParentContext(ServletContext)} implementation,_which uses ContextSingletonBeanFactoryLocator, has loaded any shared_parent context, release one reference to that shared parent context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__			if (this.parentContextRef != null) {_				this.parentContextRef.release()__			}_		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,if,the,default,link,load,parent,context,servlet,context,implementation,which,uses,context,singleton,bean,factory,locator,has,loaded,any,shared,parent,context,release,one,reference,to,that,shared,parent,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context,if,this,parent,context,ref,null,this,parent,context,ref,release
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1384955432;Close Spring's web application context for the given servlet context. If_the default {@link #loadParentContext(ServletContext)} implementation,_which uses ContextSingletonBeanFactoryLocator, has loaded any shared_parent context, release one reference to that shared parent context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__			if (this.parentContextRef != null) {_				this.parentContextRef.release()__			}_		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,if,the,default,link,load,parent,context,servlet,context,implementation,which,uses,context,singleton,bean,factory,locator,has,loaded,any,shared,parent,context,release,one,reference,to,that,shared,parent,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context,if,this,parent,context,ref,null,this,parent,context,ref,release
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1389820887;Close Spring's web application context for the given servlet context. If_the default {@link #loadParentContext(ServletContext)} implementation,_which uses ContextSingletonBeanFactoryLocator, has loaded any shared_parent context, release one reference to that shared parent context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__			if (this.parentContextRef != null) {_				this.parentContextRef.release()__			}_		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,if,the,default,link,load,parent,context,servlet,context,implementation,which,uses,context,singleton,bean,factory,locator,has,loaded,any,shared,parent,context,release,one,reference,to,that,shared,parent,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context,if,this,parent,context,ref,null,this,parent,context,ref,release
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1419966315;Close Spring's web application context for the given servlet context. If_the default {@link #loadParentContext(ServletContext)} implementation,_which uses ContextSingletonBeanFactoryLocator, has loaded any shared_parent context, release one reference to that shared parent context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__			if (this.parentContextRef != null) {_				this.parentContextRef.release()__			}_		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,if,the,default,link,load,parent,context,servlet,context,implementation,which,uses,context,singleton,bean,factory,locator,has,loaded,any,shared,parent,context,release,one,reference,to,that,shared,parent,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context,if,this,parent,context,ref,null,this,parent,context,ref,release
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1427815317;Close Spring's web application context for the given servlet context. If_the default {@link #loadParentContext(ServletContext)} implementation,_which uses ContextSingletonBeanFactoryLocator, has loaded any shared_parent context, release one reference to that shared parent context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__			if (this.parentContextRef != null) {_				this.parentContextRef.release()__			}_		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,if,the,default,link,load,parent,context,servlet,context,implementation,which,uses,context,singleton,bean,factory,locator,has,loaded,any,shared,parent,context,release,one,reference,to,that,shared,parent,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context,if,this,parent,context,ref,null,this,parent,context,ref,release
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1456332614;Close Spring's web application context for the given servlet context. If_the default {@link #loadParentContext(ServletContext)} implementation,_which uses ContextSingletonBeanFactoryLocator, has loaded any shared_parent context, release one reference to that shared parent context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__			if (this.parentContextRef != null) {_				this.parentContextRef.release()__			}_		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,if,the,default,link,load,parent,context,servlet,context,implementation,which,uses,context,singleton,bean,factory,locator,has,loaded,any,shared,parent,context,release,one,reference,to,that,shared,parent,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context,if,this,parent,context,ref,null,this,parent,context,ref,release
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1467730834;Close Spring's web application context for the given servlet context. If_the default {@link #loadParentContext(ServletContext)} implementation,_which uses ContextSingletonBeanFactoryLocator, has loaded any shared_parent context, release one reference to that shared parent context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__			if (this.parentContextRef != null) {_				this.parentContextRef.release()__			}_		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,if,the,default,link,load,parent,context,servlet,context,implementation,which,uses,context,singleton,bean,factory,locator,has,loaded,any,shared,parent,context,release,one,reference,to,that,shared,parent,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context,if,this,parent,context,ref,null,this,parent,context,ref,release
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1484657917;Close Spring's web application context for the given servlet context. If_the default {@link #loadParentContext(ServletContext)} implementation,_which uses ContextSingletonBeanFactoryLocator, has loaded any shared_parent context, release one reference to that shared parent context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,if,the,default,link,load,parent,context,servlet,context,implementation,which,uses,context,singleton,bean,factory,locator,has,loaded,any,shared,parent,context,release,one,reference,to,that,shared,parent,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1484665397;Close Spring's web application context for the given servlet context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1485810955;Close Spring's web application context for the given servlet context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1495868221;Close Spring's web application context for the given servlet context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1496837955;Close Spring's web application context for the given servlet context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1498780456;Close Spring's web application context for the given servlet context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1530174524;Close Spring's web application context for the given servlet context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1532091916;Close Spring's web application context for the given servlet context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context
ContextLoader -> public void closeWebApplicationContext(ServletContext servletContext);1532555403;Close Spring's web application context for the given servlet context._<p>If overriding {@link #loadParentContext(ServletContext)}, you may have_to override this method as well._@param servletContext the ServletContext that the WebApplicationContext runs in;public void closeWebApplicationContext(ServletContext servletContext) {_		servletContext.log("Closing Spring root WebApplicationContext")__		try {_			if (this.context instanceof ConfigurableWebApplicationContext) {_				((ConfigurableWebApplicationContext) this.context).close()__			}_		}_		finally {_			ClassLoader ccl = Thread.currentThread().getContextClassLoader()__			if (ccl == ContextLoader.class.getClassLoader()) {_				currentContext = null__			}_			else if (ccl != null) {_				currentContextPerThread.remove(ccl)__			}_			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__		}_	};close,spring,s,web,application,context,for,the,given,servlet,context,p,if,overriding,link,load,parent,context,servlet,context,you,may,have,to,override,this,method,as,well,param,servlet,context,the,servlet,context,that,the,web,application,context,runs,in;public,void,close,web,application,context,servlet,context,servlet,context,servlet,context,log,closing,spring,root,web,application,context,try,if,this,context,instanceof,configurable,web,application,context,configurable,web,application,context,this,context,close,finally,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,context,loader,class,get,class,loader,current,context,null,else,if,ccl,null,current,context,per,thread,remove,ccl,servlet,context,remove,attribute,web,application,context
ContextLoader -> protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1389820887;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_				new ArrayList<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>()___		String globalClassNames = servletContext.getInitParameter(GLOBAL_INITIALIZER_CLASSES_PARAM)__		if (globalClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		String localClassNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		if (localClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(localClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,class,application,context,initializer,configurable,application,context,string,global,class,names,servlet,context,get,init,parameter,if,global,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,global,class,names,classes,add,load,initializer,class,class,name,string,local,class,names,servlet,context,get,init,parameter,if,local,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,local,class,names,classes,add,load,initializer,class,class,name,return,classes
ContextLoader -> protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1419966315;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_				new ArrayList<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>()___		String globalClassNames = servletContext.getInitParameter(GLOBAL_INITIALIZER_CLASSES_PARAM)__		if (globalClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		String localClassNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		if (localClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(localClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,class,application,context,initializer,configurable,application,context,string,global,class,names,servlet,context,get,init,parameter,if,global,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,global,class,names,classes,add,load,initializer,class,class,name,string,local,class,names,servlet,context,get,init,parameter,if,local,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,local,class,names,classes,add,load,initializer,class,class,name,return,classes
ContextLoader -> protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1427815317;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_				new ArrayList<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>()___		String globalClassNames = servletContext.getInitParameter(GLOBAL_INITIALIZER_CLASSES_PARAM)__		if (globalClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		String localClassNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		if (localClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(localClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,class,application,context,initializer,configurable,application,context,string,global,class,names,servlet,context,get,init,parameter,if,global,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,global,class,names,classes,add,load,initializer,class,class,name,string,local,class,names,servlet,context,get,init,parameter,if,local,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,local,class,names,classes,add,load,initializer,class,class,name,return,classes
ContextLoader -> protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1456332614;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_				new ArrayList<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>()___		String globalClassNames = servletContext.getInitParameter(GLOBAL_INITIALIZER_CLASSES_PARAM)__		if (globalClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		String localClassNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		if (localClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(localClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,class,application,context,initializer,configurable,application,context,string,global,class,names,servlet,context,get,init,parameter,if,global,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,global,class,names,classes,add,load,initializer,class,class,name,string,local,class,names,servlet,context,get,init,parameter,if,local,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,local,class,names,classes,add,load,initializer,class,class,name,return,classes
ContextLoader -> protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1467730834;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_				new ArrayList<>()___		String globalClassNames = servletContext.getInitParameter(GLOBAL_INITIALIZER_CLASSES_PARAM)__		if (globalClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		String localClassNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		if (localClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(localClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,string,global,class,names,servlet,context,get,init,parameter,if,global,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,global,class,names,classes,add,load,initializer,class,class,name,string,local,class,names,servlet,context,get,init,parameter,if,local,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,local,class,names,classes,add,load,initializer,class,class,name,return,classes
ContextLoader -> protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1484657917;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_				new ArrayList<>()___		String globalClassNames = servletContext.getInitParameter(GLOBAL_INITIALIZER_CLASSES_PARAM)__		if (globalClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		String localClassNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		if (localClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(localClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,string,global,class,names,servlet,context,get,init,parameter,if,global,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,global,class,names,classes,add,load,initializer,class,class,name,string,local,class,names,servlet,context,get,init,parameter,if,local,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,local,class,names,classes,add,load,initializer,class,class,name,return,classes
ContextLoader -> protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1484665397;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_				new ArrayList<>()___		String globalClassNames = servletContext.getInitParameter(GLOBAL_INITIALIZER_CLASSES_PARAM)__		if (globalClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		String localClassNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		if (localClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(localClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,string,global,class,names,servlet,context,get,init,parameter,if,global,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,global,class,names,classes,add,load,initializer,class,class,name,string,local,class,names,servlet,context,get,init,parameter,if,local,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,local,class,names,classes,add,load,initializer,class,class,name,return,classes
ContextLoader -> protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1485810955;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_				new ArrayList<>()___		String globalClassNames = servletContext.getInitParameter(GLOBAL_INITIALIZER_CLASSES_PARAM)__		if (globalClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		String localClassNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		if (localClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(localClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,string,global,class,names,servlet,context,get,init,parameter,if,global,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,global,class,names,classes,add,load,initializer,class,class,name,string,local,class,names,servlet,context,get,init,parameter,if,local,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,local,class,names,classes,add,load,initializer,class,class,name,return,classes
ContextLoader -> protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1495868221;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_				new ArrayList<>()___		String globalClassNames = servletContext.getInitParameter(GLOBAL_INITIALIZER_CLASSES_PARAM)__		if (globalClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		String localClassNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		if (localClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(localClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,string,global,class,names,servlet,context,get,init,parameter,if,global,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,global,class,names,classes,add,load,initializer,class,class,name,string,local,class,names,servlet,context,get,init,parameter,if,local,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,local,class,names,classes,add,load,initializer,class,class,name,return,classes
ContextLoader -> protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1496837955;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_				new ArrayList<>()___		String globalClassNames = servletContext.getInitParameter(GLOBAL_INITIALIZER_CLASSES_PARAM)__		if (globalClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		String localClassNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		if (localClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(localClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,string,global,class,names,servlet,context,get,init,parameter,if,global,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,global,class,names,classes,add,load,initializer,class,class,name,string,local,class,names,servlet,context,get,init,parameter,if,local,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,local,class,names,classes,add,load,initializer,class,class,name,return,classes
ContextLoader -> protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1498780456;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_				new ArrayList<>()___		String globalClassNames = servletContext.getInitParameter(GLOBAL_INITIALIZER_CLASSES_PARAM)__		if (globalClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		String localClassNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		if (localClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(localClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,string,global,class,names,servlet,context,get,init,parameter,if,global,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,global,class,names,classes,add,load,initializer,class,class,name,string,local,class,names,servlet,context,get,init,parameter,if,local,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,local,class,names,classes,add,load,initializer,class,class,name,return,classes
ContextLoader -> protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1530174524;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_				new ArrayList<>()___		String globalClassNames = servletContext.getInitParameter(GLOBAL_INITIALIZER_CLASSES_PARAM)__		if (globalClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		String localClassNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		if (localClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(localClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,string,global,class,names,servlet,context,get,init,parameter,if,global,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,global,class,names,classes,add,load,initializer,class,class,name,string,local,class,names,servlet,context,get,init,parameter,if,local,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,local,class,names,classes,add,load,initializer,class,class,name,return,classes
ContextLoader -> protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1532091916;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_				new ArrayList<>()___		String globalClassNames = servletContext.getInitParameter(GLOBAL_INITIALIZER_CLASSES_PARAM)__		if (globalClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		String localClassNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		if (localClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(localClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,string,global,class,names,servlet,context,get,init,parameter,if,global,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,global,class,names,classes,add,load,initializer,class,class,name,string,local,class,names,servlet,context,get,init,parameter,if,local,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,local,class,names,classes,add,load,initializer,class,class,name,return,classes
ContextLoader -> protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> 			determineContextInitializerClasses(ServletContext servletContext);1532555403;Return the {@link ApplicationContextInitializer} implementation classes to use_if any have been specified by {@link #CONTEXT_INITIALIZER_CLASSES_PARAM}._@param servletContext current servlet context_@see #CONTEXT_INITIALIZER_CLASSES_PARAM;protected List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>>_			determineContextInitializerClasses(ServletContext servletContext) {__		List<Class<ApplicationContextInitializer<ConfigurableApplicationContext>>> classes =_				new ArrayList<>()___		String globalClassNames = servletContext.getInitParameter(GLOBAL_INITIALIZER_CLASSES_PARAM)__		if (globalClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(globalClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		String localClassNames = servletContext.getInitParameter(CONTEXT_INITIALIZER_CLASSES_PARAM)__		if (localClassNames != null) {_			for (String className : StringUtils.tokenizeToStringArray(localClassNames, INIT_PARAM_DELIMITERS)) {_				classes.add(loadInitializerClass(className))__			}_		}__		return classes__	};return,the,link,application,context,initializer,implementation,classes,to,use,if,any,have,been,specified,by,link,param,servlet,context,current,servlet,context,see;protected,list,class,application,context,initializer,configurable,application,context,determine,context,initializer,classes,servlet,context,servlet,context,list,class,application,context,initializer,configurable,application,context,classes,new,array,list,string,global,class,names,servlet,context,get,init,parameter,if,global,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,global,class,names,classes,add,load,initializer,class,class,name,string,local,class,names,servlet,context,get,init,parameter,if,local,class,names,null,for,string,class,name,string,utils,tokenize,to,string,array,local,class,names,classes,add,load,initializer,class,class,name,return,classes
ContextLoader -> @Nullable 	protected ApplicationContext loadParentContext(ServletContext servletContext);1495868221;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation simply returns {@code null}, as of 5.0._@param servletContext current servlet context_@return the parent application context, or {@code null} if none;@Nullable_	protected ApplicationContext loadParentContext(ServletContext servletContext) {_		return null__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,simply,returns,code,null,as,of,5,0,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none;nullable,protected,application,context,load,parent,context,servlet,context,servlet,context,return,null
ContextLoader -> @Nullable 	protected ApplicationContext loadParentContext(ServletContext servletContext);1496837955;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation simply returns {@code null}, as of 5.0._@param servletContext current servlet context_@return the parent application context, or {@code null} if none;@Nullable_	protected ApplicationContext loadParentContext(ServletContext servletContext) {_		return null__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,simply,returns,code,null,as,of,5,0,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none;nullable,protected,application,context,load,parent,context,servlet,context,servlet,context,return,null
ContextLoader -> @Nullable 	protected ApplicationContext loadParentContext(ServletContext servletContext);1498780456;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation simply returns {@code null}, as of 5.0._@param servletContext current servlet context_@return the parent application context, or {@code null} if none;@Nullable_	protected ApplicationContext loadParentContext(ServletContext servletContext) {_		return null__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,simply,returns,code,null,as,of,5,0,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none;nullable,protected,application,context,load,parent,context,servlet,context,servlet,context,return,null
ContextLoader -> @Nullable 	protected ApplicationContext loadParentContext(ServletContext servletContext);1530174524;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation simply returns {@code null}, as of 5.0._@param servletContext current servlet context_@return the parent application context, or {@code null} if none;@Nullable_	protected ApplicationContext loadParentContext(ServletContext servletContext) {_		return null__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,simply,returns,code,null,as,of,5,0,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none;nullable,protected,application,context,load,parent,context,servlet,context,servlet,context,return,null
ContextLoader -> @Nullable 	protected ApplicationContext loadParentContext(ServletContext servletContext);1532091916;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation simply returns {@code null}, as of 5.0._@param servletContext current servlet context_@return the parent application context, or {@code null} if none;@Nullable_	protected ApplicationContext loadParentContext(ServletContext servletContext) {_		return null__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,simply,returns,code,null,as,of,5,0,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none;nullable,protected,application,context,load,parent,context,servlet,context,servlet,context,return,null
ContextLoader -> @Nullable 	protected ApplicationContext loadParentContext(ServletContext servletContext);1532555403;Template method with default implementation (which may be overridden by a_subclass), to load or obtain an ApplicationContext instance which will be_used as the parent context of the root WebApplicationContext. If the_return value from the method is null, no parent context is set._<p>The main reason to load a parent context here is to allow multiple root_web application contexts to all be children of a shared EAR context, or_alternately to also share the same parent context that is visible to_EJBs. For pure web applications, there is usually no need to worry about_having a parent context to the root web application context._<p>The default implementation simply returns {@code null}, as of 5.0._@param servletContext current servlet context_@return the parent application context, or {@code null} if none;@Nullable_	protected ApplicationContext loadParentContext(ServletContext servletContext) {_		return null__	};template,method,with,default,implementation,which,may,be,overridden,by,a,subclass,to,load,or,obtain,an,application,context,instance,which,will,be,used,as,the,parent,context,of,the,root,web,application,context,if,the,return,value,from,the,method,is,null,no,parent,context,is,set,p,the,main,reason,to,load,a,parent,context,here,is,to,allow,multiple,root,web,application,contexts,to,all,be,children,of,a,shared,ear,context,or,alternately,to,also,share,the,same,parent,context,that,is,visible,to,ejbs,for,pure,web,applications,there,is,usually,no,need,to,worry,about,having,a,parent,context,to,the,root,web,application,context,p,the,default,implementation,simply,returns,code,null,as,of,5,0,param,servlet,context,current,servlet,context,return,the,parent,application,context,or,code,null,if,none;nullable,protected,application,context,load,parent,context,servlet,context,servlet,context,return,null
ContextLoader -> public ContextLoader();1328020251;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1329142650;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1335774711;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1338032393;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1344897419;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1356735495;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1362408075;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1368713394;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1384955432;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1389820887;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1419966315;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1427815317;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1456332614;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1467730834;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1484657917;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1484665397;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1485810955;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1495868221;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1496837955;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1498780456;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1530174524;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1532091916;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> public ContextLoader();1532555403;Create a new {@code ContextLoader} that will create a web application context_based on the "contextClass" and "contextConfigLocation" servlet context-params._See class-level documentation for details on default values for each._<p>This constructor is typically used when declaring the {@code_ContextLoaderListener} subclass as a {@code <listener>} within {@code web.xml}, as_a no-arg constructor is required._<p>The created application context will be registered into the ServletContext under_the attribute name {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}_and subclasses are free to call the {@link #closeWebApplicationContext} method on_container shutdown to close the application context._@see #ContextLoader(WebApplicationContext)_@see #initWebApplicationContext(ServletContext)_@see #closeWebApplicationContext(ServletContext);public ContextLoader() {_	};create,a,new,code,context,loader,that,will,create,a,web,application,context,based,on,the,context,class,and,context,config,location,servlet,context,params,see,class,level,documentation,for,details,on,default,values,for,each,p,this,constructor,is,typically,used,when,declaring,the,code,context,loader,listener,subclass,as,a,code,listener,within,code,web,xml,as,a,no,arg,constructor,is,required,p,the,created,application,context,will,be,registered,into,the,servlet,context,under,the,attribute,name,link,web,application,context,and,subclasses,are,free,to,call,the,link,close,web,application,context,method,on,container,shutdown,to,close,the,application,context,see,context,loader,web,application,context,see,init,web,application,context,servlet,context,see,close,web,application,context,servlet,context;public,context,loader
ContextLoader -> @SuppressWarnings("unchecked") 	public void setContextInitializers(@Nullable ApplicationContextInitializer<?>... initializers);1496837955;Specify which {@link ApplicationContextInitializer} instances should be used_to initialize the application context used by this {@code ContextLoader}._@since 4.2_@see #configureAndRefreshWebApplicationContext_@see #customizeContext;@SuppressWarnings("unchecked")_	public void setContextInitializers(@Nullable ApplicationContextInitializer<?>... initializers) {_		if (initializers != null) {_			for (ApplicationContextInitializer<?> initializer : initializers) {_				this.contextInitializers.add((ApplicationContextInitializer<ConfigurableApplicationContext>) initializer)__			}_		}_	};specify,which,link,application,context,initializer,instances,should,be,used,to,initialize,the,application,context,used,by,this,code,context,loader,since,4,2,see,configure,and,refresh,web,application,context,see,customize,context;suppress,warnings,unchecked,public,void,set,context,initializers,nullable,application,context,initializer,initializers,if,initializers,null,for,application,context,initializer,initializer,initializers,this,context,initializers,add,application,context,initializer,configurable,application,context,initializer
ContextLoader -> @SuppressWarnings("unchecked") 	public void setContextInitializers(@Nullable ApplicationContextInitializer<?>... initializers);1498780456;Specify which {@link ApplicationContextInitializer} instances should be used_to initialize the application context used by this {@code ContextLoader}._@since 4.2_@see #configureAndRefreshWebApplicationContext_@see #customizeContext;@SuppressWarnings("unchecked")_	public void setContextInitializers(@Nullable ApplicationContextInitializer<?>... initializers) {_		if (initializers != null) {_			for (ApplicationContextInitializer<?> initializer : initializers) {_				this.contextInitializers.add((ApplicationContextInitializer<ConfigurableApplicationContext>) initializer)__			}_		}_	};specify,which,link,application,context,initializer,instances,should,be,used,to,initialize,the,application,context,used,by,this,code,context,loader,since,4,2,see,configure,and,refresh,web,application,context,see,customize,context;suppress,warnings,unchecked,public,void,set,context,initializers,nullable,application,context,initializer,initializers,if,initializers,null,for,application,context,initializer,initializer,initializers,this,context,initializers,add,application,context,initializer,configurable,application,context,initializer
ContextLoader -> @SuppressWarnings("unchecked") 	public void setContextInitializers(@Nullable ApplicationContextInitializer<?>... initializers);1530174524;Specify which {@link ApplicationContextInitializer} instances should be used_to initialize the application context used by this {@code ContextLoader}._@since 4.2_@see #configureAndRefreshWebApplicationContext_@see #customizeContext;@SuppressWarnings("unchecked")_	public void setContextInitializers(@Nullable ApplicationContextInitializer<?>... initializers) {_		if (initializers != null) {_			for (ApplicationContextInitializer<?> initializer : initializers) {_				this.contextInitializers.add((ApplicationContextInitializer<ConfigurableApplicationContext>) initializer)__			}_		}_	};specify,which,link,application,context,initializer,instances,should,be,used,to,initialize,the,application,context,used,by,this,code,context,loader,since,4,2,see,configure,and,refresh,web,application,context,see,customize,context;suppress,warnings,unchecked,public,void,set,context,initializers,nullable,application,context,initializer,initializers,if,initializers,null,for,application,context,initializer,initializer,initializers,this,context,initializers,add,application,context,initializer,configurable,application,context,initializer
ContextLoader -> @SuppressWarnings("unchecked") 	public void setContextInitializers(@Nullable ApplicationContextInitializer<?>... initializers);1532091916;Specify which {@link ApplicationContextInitializer} instances should be used_to initialize the application context used by this {@code ContextLoader}._@since 4.2_@see #configureAndRefreshWebApplicationContext_@see #customizeContext;@SuppressWarnings("unchecked")_	public void setContextInitializers(@Nullable ApplicationContextInitializer<?>... initializers) {_		if (initializers != null) {_			for (ApplicationContextInitializer<?> initializer : initializers) {_				this.contextInitializers.add((ApplicationContextInitializer<ConfigurableApplicationContext>) initializer)__			}_		}_	};specify,which,link,application,context,initializer,instances,should,be,used,to,initialize,the,application,context,used,by,this,code,context,loader,since,4,2,see,configure,and,refresh,web,application,context,see,customize,context;suppress,warnings,unchecked,public,void,set,context,initializers,nullable,application,context,initializer,initializers,if,initializers,null,for,application,context,initializer,initializer,initializers,this,context,initializers,add,application,context,initializer,configurable,application,context,initializer
ContextLoader -> @SuppressWarnings("unchecked") 	public void setContextInitializers(@Nullable ApplicationContextInitializer<?>... initializers);1532555403;Specify which {@link ApplicationContextInitializer} instances should be used_to initialize the application context used by this {@code ContextLoader}._@since 4.2_@see #configureAndRefreshWebApplicationContext_@see #customizeContext;@SuppressWarnings("unchecked")_	public void setContextInitializers(@Nullable ApplicationContextInitializer<?>... initializers) {_		if (initializers != null) {_			for (ApplicationContextInitializer<?> initializer : initializers) {_				this.contextInitializers.add((ApplicationContextInitializer<ConfigurableApplicationContext>) initializer)__			}_		}_	};specify,which,link,application,context,initializer,instances,should,be,used,to,initialize,the,application,context,used,by,this,code,context,loader,since,4,2,see,configure,and,refresh,web,application,context,see,customize,context;suppress,warnings,unchecked,public,void,set,context,initializers,nullable,application,context,initializer,initializers,if,initializers,null,for,application,context,initializer,initializer,initializers,this,context,initializers,add,application,context,initializer,configurable,application,context,initializer
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1328020251;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or <code>null</code>_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,code,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1329142650;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or <code>null</code>_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,code,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1335774711;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or <code>null</code>_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,code,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1338032393;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or <code>null</code>_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,code,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1344897419;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or <code>null</code>_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,code,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1356735495;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1362408075;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1368713394;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1384955432;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1389820887;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1419966315;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1427815317;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1456332614;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1467730834;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1484657917;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1484665397;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
ContextLoader -> public static WebApplicationContext getCurrentWebApplicationContext();1485810955;Obtain the Spring root web application context for the current thread_(i.e. for the current thread's context ClassLoader, which needs to be_the web application's ClassLoader)._@return the current root web application context, or {@code null}_if none found_@see org.springframework.web.context.support.SpringBeanAutowiringSupport;public static WebApplicationContext getCurrentWebApplicationContext() {_		ClassLoader ccl = Thread.currentThread().getContextClassLoader()__		if (ccl != null) {_			WebApplicationContext ccpt = currentContextPerThread.get(ccl)__			if (ccpt != null) {_				return ccpt__			}_		}_		return currentContext__	};obtain,the,spring,root,web,application,context,for,the,current,thread,i,e,for,the,current,thread,s,context,class,loader,which,needs,to,be,the,web,application,s,class,loader,return,the,current,root,web,application,context,or,code,null,if,none,found,see,org,springframework,web,context,support,spring,bean,autowiring,support;public,static,web,application,context,get,current,web,application,context,class,loader,ccl,thread,current,thread,get,context,class,loader,if,ccl,null,web,application,context,ccpt,current,context,per,thread,get,ccl,if,ccpt,null,return,ccpt,return,current,context
