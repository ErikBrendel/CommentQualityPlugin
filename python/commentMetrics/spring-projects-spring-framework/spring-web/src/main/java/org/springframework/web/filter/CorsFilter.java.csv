commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Configure a custom {@link CorsProcessor} to use to apply the matched  * {@link CorsConfiguration} for a request.  * <p>By default {@link DefaultCorsProcessor} is used.  */ ;/**  * Configure a custom {@link CorsProcessor} to use to apply the matched  * {@link CorsConfiguration} for a request.  * <p>By default {@link DefaultCorsProcessor} is used.  */ public void setCorsProcessor(CorsProcessor processor) {     Assert.notNull(processor, "CorsProcessor must not be null").     this.processor = processor. }
false;protected;3;16;;@Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {     if (CorsUtils.isCorsRequest(request)) {         CorsConfiguration corsConfiguration = this.configSource.getCorsConfiguration(request).         if (corsConfiguration != null) {             boolean isValid = this.processor.processRequest(corsConfiguration, request, response).             if (!isValid || CorsUtils.isPreFlightRequest(request)) {                 return.             }         }     }     filterChain.doFilter(request, response). }
