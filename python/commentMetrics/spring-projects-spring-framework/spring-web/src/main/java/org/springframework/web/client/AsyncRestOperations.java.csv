# id;timestamp;commentText;codeText;commentWords;codeWords
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1378298362;Asynchronously retrieve a representation by doing a GET on the URI template. The_response is converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param uriVariables the map containing variables for the URI template_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1481218770;Asynchronously retrieve a representation by doing a GET on the URI template._The response is converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param uriVariables the map containing variables for the URI template_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1490795646;Asynchronously retrieve a representation by doing a GET on the URI template._The response is converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param uriVariables the map containing variables for the URI template_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1495868221;Asynchronously retrieve a representation by doing a GET on the URI template._The response is converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param uriVariables the map containing variables for the URI template_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1496242568;Asynchronously retrieve a representation by doing a GET on the URI template._The response is converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param uriVariables the map containing variables for the URI template_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1508532146;Asynchronously retrieve a representation by doing a GET on the URI template._The response is converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param uriVariables the map containing variables for the URI template_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Object... uriVariables) throws RestClientException_;1377627757;Asynchronously retrieve an entity by doing a GET on the specified URL. The response is_converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future;t,future,response,entity,t,get,for,entity,string,url,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Object... uriVariables) throws RestClientException_;1377687378;Asynchronously retrieve an entity by doing a GET on the specified URL. The response is_converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future;t,future,response,entity,t,get,for,entity,string,url,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Object... uriVariables) throws RestClientException_;1378128810;Asynchronously retrieve an entity by doing a GET on the specified URL. The response is_converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future;t,future,response,entity,t,get,for,entity,string,url,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<Void> put(URI url, HttpEntity<?> request) throws RestClientException_;1377627757;Creates a new resource by PUTting the given object to URL._@param url the URL_@param request the Object to be PUT, may be {@code null}_@see HttpEntity;Future<Void> put(URI url, HttpEntity<?> request) throws RestClientException_;creates,a,new,resource,by,putting,the,given,object,to,url,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,see,http,entity;future,void,put,uri,url,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> Future<Void> put(URI url, HttpEntity<?> request) throws RestClientException_;1377687378;Creates a new resource by PUTting the given object to URL._@param url the URL_@param request the Object to be PUT, may be {@code null}_@see HttpEntity;Future<Void> put(URI url, HttpEntity<?> request) throws RestClientException_;creates,a,new,resource,by,putting,the,given,object,to,url,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,see,http,entity;future,void,put,uri,url,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(String url, HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1378298362;Creates a new resource by PUTting the given object to URI template._<p>URI Template variables are expanded using the given map._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param uriVariables the variables to expand the template_@see HttpEntity;ListenableFuture<?> put(String url, HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,see,http,entity;listenable,future,put,string,url,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(String url, HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1481218770;Creates a new resource by PUTting the given object to URI template._<p>URI Template variables are expanded using the given map._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT (may be {@code null})_@param uriVariables the variables to expand the template_@see HttpEntity;ListenableFuture<?> put(String url, HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,see,http,entity;listenable,future,put,string,url,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(String url, HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1490795646;Creates a new resource by PUTting the given object to URI template._<p>URI Template variables are expanded using the given map._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT (may be {@code null})_@param uriVariables the variables to expand the template_@see HttpEntity;ListenableFuture<?> put(String url, HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,see,http,entity;listenable,future,put,string,url,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... uriVariables) throws RestClientException_;1495868221;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the_request (may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,nullable,http,entity,request,entity,parameterized,type,reference,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... uriVariables) throws RestClientException_;1496242568;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the_request (may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,nullable,http,entity,request,entity,parameterized,type,reference,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... uriVariables) throws RestClientException_;1508532146;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean =_new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}___ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response =_template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the_request (may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,nullable,http,entity,request,entity,parameterized,type,reference,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(URI url, HttpMethod method, 			@Nullable AsyncRequestCallback requestCallback, @Nullable ResponseExtractor<T> responseExtractor) 			throws RestClientException_;1496242568;Asynchronously execute the HTTP method to the given URL, preparing the request_with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(URI url, HttpMethod method,_			@Nullable AsyncRequestCallback requestCallback, @Nullable ResponseExtractor<T> responseExtractor)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,uri,url,http,method,method,nullable,async,request,callback,request,callback,nullable,response,extractor,t,response,extractor,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(URI url, HttpMethod method, 			@Nullable AsyncRequestCallback requestCallback, @Nullable ResponseExtractor<T> responseExtractor) 			throws RestClientException_;1508532146;Asynchronously execute the HTTP method to the given URL, preparing the request_with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(URI url, HttpMethod method,_			@Nullable AsyncRequestCallback requestCallback, @Nullable ResponseExtractor<T> responseExtractor)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,uri,url,http,method,method,nullable,async,request,callback,request,callback,nullable,response,extractor,t,response,extractor,throws,rest,client,exception
AsyncRestOperations -> <T> Future<T> execute(String url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor, 			Object... uriVariables) throws RestClientException_;1377627757;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> Future<T> execute(String url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,future,t,execute,string,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<T> execute(String url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor, 			Object... uriVariables) throws RestClientException_;1377687378;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> Future<T> execute(String url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,future,t,execute,string,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<T> execute(String url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor, 			Object... uriVariables) throws RestClientException_;1378128810;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> Future<T> execute(String url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,future,t,execute,string,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request, 			Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException_;1481218770;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request,_			Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,string,url,http,entity,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request, 			Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException_;1490795646;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request,_			Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,string,url,http,entity,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables) 			throws RestClientException_;1377627757;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables) 			throws RestClientException_;1377687378;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables) 			throws RestClientException_;1378128810;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1378298362;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the map containing variables for the URI template_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1481218770;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the map containing variables for the URI template_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1490795646;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the map containing variables for the URI template_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1495868221;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the map containing variables for the URI template_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1496242568;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the map containing variables for the URI template_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1508532146;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the map containing variables for the URI template_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<Void> put(String url, HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1377627757;Create or update a resource by PUTting the given object to the URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param uriVariables the variables to expand the template_@see HttpEntity;Future<Void> put(String url, HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,see,http,entity;future,void,put,string,url,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<Void> put(String url, HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1377687378;Create or update a resource by PUTting the given object to the URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param uriVariables the variables to expand the template_@see HttpEntity;Future<Void> put(String url, HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,see,http,entity;future,void,put,string,url,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(String url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor, 			Map<String, ?> uriVariables) throws RestClientException_;1378298362;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(String url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,string,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(String url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor, 			Map<String, ?> uriVariables) throws RestClientException_;1481218770;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(String url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,string,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(String url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor, 			Map<String, ?> uriVariables) throws RestClientException_;1490795646;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(String url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,string,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(String url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor, 			Map<String, ?> uriVariables) throws RestClientException_;1495868221;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(String url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,string,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<T> execute(String url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor, 			Map<String, ?> uriVariables) throws RestClientException_;1377627757;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> Future<T> execute(String url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,future,t,execute,string,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<T> execute(String url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor, 			Map<String, ?> uriVariables) throws RestClientException_;1377687378;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> Future<T> execute(String url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,future,t,execute,string,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<T> execute(String url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor, 			Map<String, ?> uriVariables) throws RestClientException_;1378128810;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> Future<T> execute(String url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,future,t,execute,string,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(String url, Object... uriVariables) 			throws RestClientException_;1378298362;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand the template_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(String url, Object... uriVariables) 			throws RestClientException_;1481218770;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand the template_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(String url, Object... uriVariables) 			throws RestClientException_;1490795646;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand the template_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(String url, Object... uriVariables) 			throws RestClientException_;1495868221;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand the template_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(String url, Object... uriVariables) 			throws RestClientException_;1496242568;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand the template_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(String url, Object... uriVariables) 			throws RestClientException_;1508532146;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand the template_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables) 			throws RestClientException_;1378298362;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables) 			throws RestClientException_;1481218770;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables) 			throws RestClientException_;1490795646;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables) 			throws RestClientException_;1495868221;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables) 			throws RestClientException_;1496242568;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables) 			throws RestClientException_;1508532146;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1495868221;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,nullable,http,entity,request,entity,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1496242568;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,nullable,http,entity,request,entity,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1508532146;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,nullable,http,entity,request,entity,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables) 			throws RestClientException_;1377627757;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};Future<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;future,set,http,method,options,for,allow,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables) 			throws RestClientException_;1377687378;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};Future<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;future,set,http,method,options,for,allow,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables) 			throws RestClientException_;1378128810;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};Future<Set<HttpMethod>> optionsForAllow(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;future,set,http,method,options,for,allow,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1377627757;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:__<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>__@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1377687378;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1378128810;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Object... uriVariables) throws RestClientException_;1378298362;Asynchronously retrieve an entity by doing a GET on the specified URL. The response is_converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,string,url,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Object... uriVariables) throws RestClientException_;1481218770;Asynchronously retrieve an entity by doing a GET on the specified URL._The response is converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,string,url,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Object... uriVariables) throws RestClientException_;1490795646;Asynchronously retrieve an entity by doing a GET on the specified URL._The response is converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,string,url,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Object... uriVariables) throws RestClientException_;1495868221;Asynchronously retrieve an entity by doing a GET on the specified URL._The response is converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,string,url,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Object... uriVariables) throws RestClientException_;1496242568;Asynchronously retrieve an entity by doing a GET on the specified URL._The response is converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,string,url,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Object... uriVariables) throws RestClientException_;1508532146;Asynchronously retrieve an entity by doing a GET on the specified URL._The response is converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,string,url,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<URI> postForLocation(URI url, HttpEntity<?> request) throws RestClientException_;1377627757;Create a new resource by POSTing the given object to the URL, and asynchronously_returns the value of the {@code Location} header. This header typically indicates_where the new resource is stored._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;Future<URI> postForLocation(URI url, HttpEntity<?> request) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;future,uri,post,for,location,uri,url,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> Future<URI> postForLocation(URI url, HttpEntity<?> request) throws RestClientException_;1377687378;Create a new resource by POSTing the given object to the URL, and asynchronously_returns the value of the {@code Location} header. This header typically indicates_where the new resource is stored._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;Future<URI> postForLocation(URI url, HttpEntity<?> request) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;future,uri,post,for,location,uri,url,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> Future<URI> postForLocation(URI url, HttpEntity<?> request) throws RestClientException_;1378128810;Create a new resource by POSTing the given object to the URL, and asynchronously_returns the value of the {@code Location} header. This header typically indicates_where the new resource is stored._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;Future<URI> postForLocation(URI url, HttpEntity<?> request) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;future,uri,post,for,location,uri,url,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException_;1377627757;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException_;1377687378;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException_;1378128810;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... uriVariables) throws RestClientException_;1377627757;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:__<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>__@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the_request, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... uriVariables) throws RestClientException_;1377687378;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the_request, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... uriVariables) throws RestClientException_;1378128810;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the_request, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(URI url, HttpEntity<?> request) throws RestClientException_;1378298362;Creates a new resource by PUTting the given object to URL._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT, may be {@code null}_@see HttpEntity;ListenableFuture<?> put(URI url, HttpEntity<?> request) throws RestClientException_;creates,a,new,resource,by,putting,the,given,object,to,url,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,see,http,entity;listenable,future,put,uri,url,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(URI url, HttpEntity<?> request) throws RestClientException_;1481218770;Creates a new resource by PUTting the given object to URL._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT (may be {@code null})_@see HttpEntity;ListenableFuture<?> put(URI url, HttpEntity<?> request) throws RestClientException_;creates,a,new,resource,by,putting,the,given,object,to,url,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,see,http,entity;listenable,future,put,uri,url,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(URI url, HttpEntity<?> request) throws RestClientException_;1490795646;Creates a new resource by PUTting the given object to URL._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT (may be {@code null})_@see HttpEntity;ListenableFuture<?> put(URI url, HttpEntity<?> request) throws RestClientException_;creates,a,new,resource,by,putting,the,given,object,to,url,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,see,http,entity;listenable,future,put,uri,url,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, @Nullable HttpEntity<?> request, 			Class<T> responseType, Object... uriVariables) throws RestClientException_;1495868221;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, @Nullable HttpEntity<?> request,_			Class<T> responseType, Object... uriVariables) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,string,url,nullable,http,entity,request,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, @Nullable HttpEntity<?> request, 			Class<T> responseType, Object... uriVariables) throws RestClientException_;1496242568;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, @Nullable HttpEntity<?> request,_			Class<T> responseType, Object... uriVariables) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,string,url,nullable,http,entity,request,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, @Nullable HttpEntity<?> request, 			Class<T> responseType, Object... uriVariables) throws RestClientException_;1508532146;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, @Nullable HttpEntity<?> request,_			Class<T> responseType, Object... uriVariables) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,string,url,nullable,http,entity,request,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1377627757;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1377687378;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1378128810;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(String url, Object... uriVariables) throws RestClientException_;1378298362;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param uriVariables the variables to expand in the template;ListenableFuture<?> delete(String url, Object... uriVariables) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template;listenable,future,delete,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(String url, Object... uriVariables) throws RestClientException_;1481218770;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param uriVariables the variables to expand in the template;ListenableFuture<?> delete(String url, Object... uriVariables) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template;listenable,future,delete,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(String url, Object... uriVariables) throws RestClientException_;1490795646;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param uriVariables the variables to expand in the template;ListenableFuture<?> delete(String url, Object... uriVariables) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template;listenable,future,delete,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(String url, Object... uriVariables) throws RestClientException_;1495868221;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param uriVariables the variables to expand in the template;ListenableFuture<?> delete(String url, Object... uriVariables) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template;listenable,future,delete,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(String url, Object... uriVariables) throws RestClientException_;1496242568;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param uriVariables the variables to expand in the template;ListenableFuture<?> delete(String url, Object... uriVariables) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template;listenable,future,delete,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(String url, Object... uriVariables) throws RestClientException_;1508532146;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param uriVariables the variables to expand in the template;ListenableFuture<?> delete(String url, Object... uriVariables) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template;listenable,future,delete,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> RestOperations getRestOperations()_;1377627757;Expose the synchronous Spring RestTemplate to allow synchronous invocation.;RestOperations getRestOperations()_;expose,the,synchronous,spring,rest,template,to,allow,synchronous,invocation;rest,operations,get,rest,operations
AsyncRestOperations -> RestOperations getRestOperations()_;1377687378;Expose the synchronous Spring RestTemplate to allow synchronous invocation.;RestOperations getRestOperations()_;expose,the,synchronous,spring,rest,template,to,allow,synchronous,invocation;rest,operations,get,rest,operations
AsyncRestOperations -> RestOperations getRestOperations()_;1378128810;Expose the synchronous Spring RestTemplate to allow synchronous invocation.;RestOperations getRestOperations()_;expose,the,synchronous,spring,rest,template,to,allow,synchronous,invocation;rest,operations,get,rest,operations
AsyncRestOperations -> RestOperations getRestOperations()_;1378298362;Expose the synchronous Spring RestTemplate to allow synchronous invocation.;RestOperations getRestOperations()_;expose,the,synchronous,spring,rest,template,to,allow,synchronous,invocation;rest,operations,get,rest,operations
AsyncRestOperations -> RestOperations getRestOperations()_;1481218770;Expose the synchronous Spring RestTemplate to allow synchronous invocation.;RestOperations getRestOperations()_;expose,the,synchronous,spring,rest,template,to,allow,synchronous,invocation;rest,operations,get,rest,operations
AsyncRestOperations -> RestOperations getRestOperations()_;1490795646;Expose the synchronous Spring RestTemplate to allow synchronous invocation.;RestOperations getRestOperations()_;expose,the,synchronous,spring,rest,template,to,allow,synchronous,invocation;rest,operations,get,rest,operations
AsyncRestOperations -> RestOperations getRestOperations()_;1495868221;Expose the synchronous Spring RestTemplate to allow synchronous invocation.;RestOperations getRestOperations()_;expose,the,synchronous,spring,rest,template,to,allow,synchronous,invocation;rest,operations,get,rest,operations
AsyncRestOperations -> RestOperations getRestOperations()_;1496242568;Expose the synchronous Spring RestTemplate to allow synchronous invocation.;RestOperations getRestOperations()_;expose,the,synchronous,spring,rest,template,to,allow,synchronous,invocation;rest,operations,get,rest,operations
AsyncRestOperations -> RestOperations getRestOperations()_;1508532146;Expose the synchronous Spring RestTemplate to allow synchronous invocation.;RestOperations getRestOperations()_;expose,the,synchronous,spring,rest,template,to,allow,synchronous,invocation;rest,operations,get,rest,operations
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException_;1377627757;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:__<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>__@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may be {@code null}_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException_;1377687378;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may be {@code null}_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException_;1378128810;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may be {@code null}_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,future,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1377627757;Asynchronously retrieve a representation by doing a GET on the URI template. The_response is converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param uriVariables the map containing variables for the URI template_@return the entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,the,entity,wrapped,in,a,link,future;t,future,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1377687378;Asynchronously retrieve a representation by doing a GET on the URI template. The_response is converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param uriVariables the map containing variables for the URI template_@return the entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,the,entity,wrapped,in,a,link,future;t,future,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> getForEntity(String url, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1378128810;Asynchronously retrieve a representation by doing a GET on the URI template. The_response is converted and stored in an {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param uriVariables the map containing variables for the URI template_@return the entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> getForEntity(String url, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,the,entity,wrapped,in,a,link,future;t,future,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(String url, Map<String, ?> uriVariables) throws RestClientException_;1378298362;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param uriVariables the variables to expand in the template;ListenableFuture<?> delete(String url, Map<String, ?> uriVariables) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template;listenable,future,delete,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(String url, Map<String, ?> uriVariables) throws RestClientException_;1481218770;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param uriVariables the variables to expand in the template;ListenableFuture<?> delete(String url, Map<String, ?> uriVariables) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template;listenable,future,delete,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(String url, Map<String, ?> uriVariables) throws RestClientException_;1490795646;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param uriVariables the variables to expand in the template;ListenableFuture<?> delete(String url, Map<String, ?> uriVariables) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template;listenable,future,delete,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(String url, Map<String, ?> uriVariables) throws RestClientException_;1495868221;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param uriVariables the variables to expand in the template;ListenableFuture<?> delete(String url, Map<String, ?> uriVariables) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template;listenable,future,delete,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(String url, Map<String, ?> uriVariables) throws RestClientException_;1496242568;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param uriVariables the variables to expand in the template;ListenableFuture<?> delete(String url, Map<String, ?> uriVariables) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template;listenable,future,delete,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(String url, Map<String, ?> uriVariables) throws RestClientException_;1508532146;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param uriVariables the variables to expand in the template;ListenableFuture<?> delete(String url, Map<String, ?> uriVariables) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template;listenable,future,delete,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(String url, @Nullable HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1495868221;Creates a new resource by PUTting the given object to URI template._<p>URI Template variables are expanded using the given map._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT (may be {@code null})_@param uriVariables the variables to expand the template_@see HttpEntity;ListenableFuture<?> put(String url, @Nullable HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,see,http,entity;listenable,future,put,string,url,nullable,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(String url, @Nullable HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1496242568;Creates a new resource by PUTting the given object to URI template._<p>URI Template variables are expanded using the given map._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT (may be {@code null})_@param uriVariables the variables to expand the template_@see HttpEntity;ListenableFuture<?> put(String url, @Nullable HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,see,http,entity;listenable,future,put,string,url,nullable,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(String url, @Nullable HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1508532146;Creates a new resource by PUTting the given object to URI template._<p>URI Template variables are expanded using the given map._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT (may be {@code null})_@param uriVariables the variables to expand the template_@see HttpEntity;ListenableFuture<?> put(String url, @Nullable HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,see,http,entity;listenable,future,put,string,url,nullable,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1377627757;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};Future<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;future,set,http,method,options,for,allow,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1377687378;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};Future<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;future,set,http,method,options,for,allow,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1378128810;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};Future<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;future,set,http,method,options,for,allow,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;1378298362;Asynchronously return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,uri,url,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;1481218770;Asynchronously return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,uri,url,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;1490795646;Asynchronously return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,uri,url,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;1495868221;Asynchronously return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,uri,url,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;1496242568;Asynchronously return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,uri,url,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;1508532146;Asynchronously return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,uri,url,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request, 			Class<T> responseType, Object... uriVariables) throws RestClientException_;1377627757;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> Future<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request,_			Class<T> responseType, Object... uriVariables) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,future,response,entity,t,post,for,entity,string,url,http,entity,request,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request, 			Class<T> responseType, Object... uriVariables) throws RestClientException_;1377687378;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> Future<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request,_			Class<T> responseType, Object... uriVariables) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,future,response,entity,t,post,for,entity,string,url,http,entity,request,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request, 			Class<T> responseType, Object... uriVariables) throws RestClientException_;1378128810;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> Future<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request,_			Class<T> responseType, Object... uriVariables) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,future,response,entity,t,post,for,entity,string,url,http,entity,request,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1378298362;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1481218770;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1490795646;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request, 			Class<T> responseType, Object... uriVariables) throws RestClientException_;1378298362;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request,_			Class<T> responseType, Object... uriVariables) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,string,url,http,entity,request,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request, 			Class<T> responseType, Object... uriVariables) throws RestClientException_;1481218770;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request,_			Class<T> responseType, Object... uriVariables) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,string,url,http,entity,request,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request, 			Class<T> responseType, Object... uriVariables) throws RestClientException_;1490795646;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request,_			Class<T> responseType, Object... uriVariables) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,string,url,http,entity,request,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(String url, HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1378298362;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(String url, HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,string,url,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(String url, HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1481218770;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(String url, HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,string,url,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(String url, HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1490795646;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(String url, HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,string,url,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1495868221;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,nullable,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1496242568;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,nullable,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1508532146;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean =_new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}___ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response =_template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,nullable,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<Void> delete(URI url) throws RestClientException_;1377627757;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL;Future<Void> delete(URI url) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url;future,void,delete,uri,url,throws,rest,client,exception
AsyncRestOperations -> Future<Void> delete(URI url) throws RestClientException_;1377687378;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL;Future<Void> delete(URI url) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url;future,void,delete,uri,url,throws,rest,client,exception
AsyncRestOperations -> Future<Void> delete(String url, Object... uriVariables) throws RestClientException_;1377627757;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand in the template;Future<Void> delete(String url, Object... uriVariables) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template;future,void,delete,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<Void> delete(String url, Object... uriVariables) throws RestClientException_;1377687378;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand in the template;Future<Void> delete(String url, Object... uriVariables) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template;future,void,delete,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, @Nullable HttpEntity<?> request, 			Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException_;1495868221;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, @Nullable HttpEntity<?> request,_			Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,string,url,nullable,http,entity,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, @Nullable HttpEntity<?> request, 			Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException_;1496242568;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, @Nullable HttpEntity<?> request,_			Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,string,url,nullable,http,entity,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, @Nullable HttpEntity<?> request, 			Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException_;1508532146;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(String url, @Nullable HttpEntity<?> request,_			Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,string,url,nullable,http,entity,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(String url, HttpMethod method, 			@Nullable AsyncRequestCallback requestCallback, @Nullable ResponseExtractor<T> responseExtractor, 			Object... uriVariables) throws RestClientException_;1496242568;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(String url, HttpMethod method,_			@Nullable AsyncRequestCallback requestCallback, @Nullable ResponseExtractor<T> responseExtractor,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,string,url,http,method,method,nullable,async,request,callback,request,callback,nullable,response,extractor,t,response,extractor,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(String url, HttpMethod method, 			@Nullable AsyncRequestCallback requestCallback, @Nullable ResponseExtractor<T> responseExtractor, 			Object... uriVariables) throws RestClientException_;1508532146;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(String url, HttpMethod method,_			@Nullable AsyncRequestCallback requestCallback, @Nullable ResponseExtractor<T> responseExtractor,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,string,url,http,method,method,nullable,async,request,callback,request,callback,nullable,response,extractor,t,response,extractor,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType) 			throws RestClientException_;1377627757;Asynchronously retrieve a representation by doing a GET on the URL._The response is converted and stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@return the entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType)_			throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,return,the,entity,wrapped,in,a,link,future;t,future,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType) 			throws RestClientException_;1377687378;Asynchronously retrieve a representation by doing a GET on the URL._The response is converted and stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@return the entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType)_			throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,return,the,entity,wrapped,in,a,link,future;t,future,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType) 			throws RestClientException_;1378128810;Asynchronously retrieve a representation by doing a GET on the URL._The response is converted and stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@return the entity wrapped in a {@link Future};<T> Future<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType)_			throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,return,the,entity,wrapped,in,a,link,future;t,future,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> Future<URI> postForLocation(String url, HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1377627757;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;Future<URI> postForLocation(String url, HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;future,uri,post,for,location,string,url,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<URI> postForLocation(String url, HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1377687378;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;Future<URI> postForLocation(String url, HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;future,uri,post,for,location,string,url,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<URI> postForLocation(String url, HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1378128810;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;Future<URI> postForLocation(String url, HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;future,uri,post,for,location,string,url,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(String url, @Nullable HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1495868221;Create or update a resource by PUTting the given object to the URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT (may be {@code null})_@param uriVariables the variables to expand the template_@see HttpEntity;ListenableFuture<?> put(String url, @Nullable HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,see,http,entity;listenable,future,put,string,url,nullable,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(String url, @Nullable HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1496242568;Create or update a resource by PUTting the given object to the URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT (may be {@code null})_@param uriVariables the variables to expand the template_@see HttpEntity;ListenableFuture<?> put(String url, @Nullable HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,see,http,entity;listenable,future,put,string,url,nullable,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(String url, @Nullable HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1508532146;Create or update a resource by PUTting the given object to the URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT (may be {@code null})_@param uriVariables the variables to expand the template_@see HttpEntity;ListenableFuture<?> put(String url, @Nullable HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,see,http,entity;listenable,future,put,string,url,nullable,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables) 			throws RestClientException_;1495868221;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,nullable,http,entity,request,entity,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables) 			throws RestClientException_;1496242568;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,nullable,http,entity,request,entity,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables) 			throws RestClientException_;1508532146;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,nullable,http,entity,request,entity,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(String url, HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1378298362;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(String url, HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,string,url,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(String url, HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1481218770;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(String url, HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,string,url,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(String url, HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1490795646;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(String url, HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,string,url,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1378298362;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1481218770;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1490795646;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1495868221;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1496242568;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1508532146;Asynchronously return the value of the Allow header for the given URI._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the variables to expand in the template_@return the value of the allow header wrapped in a {@link Future};ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,wrapped,in,a,link,future;listenable,future,set,http,method,options,for,allow,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException_;1495868221;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,uri,url,http,method,method,nullable,http,entity,request,entity,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException_;1496242568;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,uri,url,http,method,method,nullable,http,entity,request,entity,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException_;1508532146;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,uri,url,http,method,method,nullable,http,entity,request,entity,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> Future<HttpHeaders> headForHeaders(String url, Object... uriVariables) 			throws RestClientException_;1377627757;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand the template_@return all HTTP headers of that resource wrapped in a {@link Future};Future<HttpHeaders> headForHeaders(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;future,http,headers,head,for,headers,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<HttpHeaders> headForHeaders(String url, Object... uriVariables) 			throws RestClientException_;1377687378;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand the template_@return all HTTP headers of that resource wrapped in a {@link Future};Future<HttpHeaders> headForHeaders(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;future,http,headers,head,for,headers,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<HttpHeaders> headForHeaders(String url, Object... uriVariables) 			throws RestClientException_;1378128810;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand the template_@return all HTTP headers of that resource wrapped in a {@link Future};Future<HttpHeaders> headForHeaders(String url, Object... uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;future,http,headers,head,for,headers,string,url,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<HttpHeaders> headForHeaders(URI url) throws RestClientException_;1377627757;Asynchronously retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource wrapped in a {@link Future};Future<HttpHeaders> headForHeaders(URI url) throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;future,http,headers,head,for,headers,uri,url,throws,rest,client,exception
AsyncRestOperations -> Future<HttpHeaders> headForHeaders(URI url) throws RestClientException_;1377687378;Asynchronously retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource wrapped in a {@link Future};Future<HttpHeaders> headForHeaders(URI url) throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;future,http,headers,head,for,headers,uri,url,throws,rest,client,exception
AsyncRestOperations -> Future<HttpHeaders> headForHeaders(URI url) throws RestClientException_;1378128810;Asynchronously retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource wrapped in a {@link Future};Future<HttpHeaders> headForHeaders(URI url) throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;future,http,headers,head,for,headers,uri,url,throws,rest,client,exception
AsyncRestOperations -> Future<Void> delete(String url, Map<String, ?> uriVariables) throws RestClientException_;1377627757;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand in the template;Future<Void> delete(String url, Map<String, ?> uriVariables) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template;future,void,delete,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<Void> delete(String url, Map<String, ?> uriVariables) throws RestClientException_;1377687378;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param uriVariables the variables to expand in the template;Future<Void> delete(String url, Map<String, ?> uriVariables) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,uri,variables,the,variables,to,expand,in,the,template;future,void,delete,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(String url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor, 			Object... uriVariables) throws RestClientException_;1378298362;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(String url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,string,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(String url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor, 			Object... uriVariables) throws RestClientException_;1481218770;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(String url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,string,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(String url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor, 			Object... uriVariables) throws RestClientException_;1490795646;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(String url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,string,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(String url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor, 			Object... uriVariables) throws RestClientException_;1495868221;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(String url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,string,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<URI> postForLocation(String url, HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1377627757;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;Future<URI> postForLocation(String url, HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;future,uri,post,for,location,string,url,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<URI> postForLocation(String url, HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1377687378;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;Future<URI> postForLocation(String url, HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;future,uri,post,for,location,string,url,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<URI> postForLocation(String url, HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1378128810;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;Future<URI> postForLocation(String url, HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;future,uri,post,for,location,string,url,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType) 			throws RestClientException_;1378298362;Asynchronously retrieve a representation by doing a GET on the URL._The response is converted and stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType)_			throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType) 			throws RestClientException_;1481218770;Asynchronously retrieve a representation by doing a GET on the URL._The response is converted and stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType)_			throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType) 			throws RestClientException_;1490795646;Asynchronously retrieve a representation by doing a GET on the URL._The response is converted and stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType)_			throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType) 			throws RestClientException_;1495868221;Asynchronously retrieve a representation by doing a GET on the URL._The response is converted and stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType)_			throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType) 			throws RestClientException_;1496242568;Asynchronously retrieve a representation by doing a GET on the URL._The response is converted and stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType)_			throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType) 			throws RestClientException_;1508532146;Asynchronously retrieve a representation by doing a GET on the URL._The response is converted and stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@return the entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> getForEntity(URI url, Class<T> responseType)_			throws RestClientException_;asynchronously,retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,return,the,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(URI url, HttpEntity<?> request) throws RestClientException_;1378298362;Create a new resource by POSTing the given object to the URL, and asynchronously_returns the value of the {@code Location} header. This header typically indicates_where the new resource is stored._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(URI url, HttpEntity<?> request) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,uri,url,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(URI url, HttpEntity<?> request) throws RestClientException_;1481218770;Create a new resource by POSTing the given object to the URL, and asynchronously_returns the value of the {@code Location} header. This header typically indicates_where the new resource is stored._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(URI url, HttpEntity<?> request) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,uri,url,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(URI url, HttpEntity<?> request) throws RestClientException_;1490795646;Create a new resource by POSTing the given object to the URL, and asynchronously_returns the value of the {@code Location} header. This header typically indicates_where the new resource is stored._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(URI url, HttpEntity<?> request) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,uri,url,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> postForEntity(URI url, HttpEntity<?> request, 			Class<T> responseType) throws RestClientException_;1377627757;Create a new resource by POSTing the given object to the URL,_and asynchronously returns the response as {@link ResponseEntity}._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> Future<ResponseEntity<T>> postForEntity(URI url, HttpEntity<?> request,_			Class<T> responseType) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,response,as,link,response,entity,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,future,response,entity,t,post,for,entity,uri,url,http,entity,request,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> postForEntity(URI url, HttpEntity<?> request, 			Class<T> responseType) throws RestClientException_;1377687378;Create a new resource by POSTing the given object to the URL,_and asynchronously returns the response as {@link ResponseEntity}._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> Future<ResponseEntity<T>> postForEntity(URI url, HttpEntity<?> request,_			Class<T> responseType) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,response,as,link,response,entity,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,future,response,entity,t,post,for,entity,uri,url,http,entity,request,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> postForEntity(URI url, HttpEntity<?> request, 			Class<T> responseType) throws RestClientException_;1378128810;Create a new resource by POSTing the given object to the URL,_and asynchronously returns the response as {@link ResponseEntity}._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> Future<ResponseEntity<T>> postForEntity(URI url, HttpEntity<?> request,_			Class<T> responseType) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,response,as,link,response,entity,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,future,response,entity,t,post,for,entity,uri,url,http,entity,request,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(URI url, HttpEntity<?> request, 			Class<T> responseType) throws RestClientException_;1378298362;Create a new resource by POSTing the given object to the URL,_and asynchronously returns the response as {@link ResponseEntity}._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(URI url, HttpEntity<?> request,_			Class<T> responseType) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,response,as,link,response,entity,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,uri,url,http,entity,request,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(URI url, HttpEntity<?> request, 			Class<T> responseType) throws RestClientException_;1481218770;Create a new resource by POSTing the given object to the URL,_and asynchronously returns the response as {@link ResponseEntity}._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(URI url, HttpEntity<?> request,_			Class<T> responseType) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,response,as,link,response,entity,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,uri,url,http,entity,request,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(URI url, HttpEntity<?> request, 			Class<T> responseType) throws RestClientException_;1490795646;Create a new resource by POSTing the given object to the URL,_and asynchronously returns the response as {@link ResponseEntity}._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(URI url, HttpEntity<?> request,_			Class<T> responseType) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,response,as,link,response,entity,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,uri,url,http,entity,request,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(URI url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor) 			throws RestClientException_;1378298362;Asynchronously execute the HTTP method to the given URL, preparing the request_with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(URI url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,uri,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(URI url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor) 			throws RestClientException_;1481218770;Asynchronously execute the HTTP method to the given URL, preparing the request_with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(URI url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,uri,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(URI url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor) 			throws RestClientException_;1490795646;Asynchronously execute the HTTP method to the given URL, preparing the request_with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(URI url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,uri,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(URI url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor) 			throws RestClientException_;1495868221;Asynchronously execute the HTTP method to the given URL, preparing the request_with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(URI url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,uri,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception
AsyncRestOperations -> Future<Void> put(String url, HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1377627757;Creates a new resource by PUTting the given object to URI template._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param uriVariables the variables to expand the template_@see HttpEntity;Future<Void> put(String url, HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,see,http,entity;future,void,put,string,url,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<Void> put(String url, HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1377687378;Creates a new resource by PUTting the given object to URI template._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param uriVariables the variables to expand the template_@see HttpEntity;Future<Void> put(String url, HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,see,http,entity;future,void,put,string,url,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(String url, HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1378298362;Create or update a resource by PUTting the given object to the URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param uriVariables the variables to expand the template_@see HttpEntity;ListenableFuture<?> put(String url, HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,see,http,entity;listenable,future,put,string,url,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(String url, HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1481218770;Create or update a resource by PUTting the given object to the URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT (may be {@code null})_@param uriVariables the variables to expand the template_@see HttpEntity;ListenableFuture<?> put(String url, HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,see,http,entity;listenable,future,put,string,url,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(String url, HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1490795646;Create or update a resource by PUTting the given object to the URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT (may be {@code null})_@param uriVariables the variables to expand the template_@see HttpEntity;ListenableFuture<?> put(String url, HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,see,http,entity;listenable,future,put,string,url,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<T> execute(URI url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor) 			throws RestClientException_;1377627757;Asynchronously execute the HTTP method to the given URL, preparing the request_with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> Future<T> execute(URI url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,future,t,execute,uri,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception
AsyncRestOperations -> <T> Future<T> execute(URI url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor) 			throws RestClientException_;1377687378;Asynchronously execute the HTTP method to the given URL, preparing the request_with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> Future<T> execute(URI url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,future,t,execute,uri,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception
AsyncRestOperations -> <T> Future<T> execute(URI url, HttpMethod method, 			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor) 			throws RestClientException_;1378128810;Asynchronously execute the HTTP method to the given URL, preparing the request_with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> Future<T> execute(URI url, HttpMethod method,_			AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,future,t,execute,uri,url,http,method,method,async,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException_;1378298362;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException_;1481218770;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException_;1490795646;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(URI url, @Nullable HttpEntity<?> request) throws RestClientException_;1495868221;Creates a new resource by PUTting the given object to URL._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT (may be {@code null})_@see HttpEntity;ListenableFuture<?> put(URI url, @Nullable HttpEntity<?> request) throws RestClientException_;creates,a,new,resource,by,putting,the,given,object,to,url,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,see,http,entity;listenable,future,put,uri,url,nullable,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(URI url, @Nullable HttpEntity<?> request) throws RestClientException_;1496242568;Creates a new resource by PUTting the given object to URL._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT (may be {@code null})_@see HttpEntity;ListenableFuture<?> put(URI url, @Nullable HttpEntity<?> request) throws RestClientException_;creates,a,new,resource,by,putting,the,given,object,to,url,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,see,http,entity;listenable,future,put,uri,url,nullable,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> put(URI url, @Nullable HttpEntity<?> request) throws RestClientException_;1508532146;Creates a new resource by PUTting the given object to URL._<p>The Future will return a {@code null} result upon completion._@param url the URL_@param request the Object to be PUT (may be {@code null})_@see HttpEntity;ListenableFuture<?> put(URI url, @Nullable HttpEntity<?> request) throws RestClientException_;creates,a,new,resource,by,putting,the,given,object,to,url,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,see,http,entity;listenable,future,put,uri,url,nullable,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> Future<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;1377627757;Asynchronously return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header wrapped in a {@link Future};Future<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,wrapped,in,a,link,future;future,set,http,method,options,for,allow,uri,url,throws,rest,client,exception
AsyncRestOperations -> Future<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;1377687378;Asynchronously return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header wrapped in a {@link Future};Future<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,wrapped,in,a,link,future;future,set,http,method,options,for,allow,uri,url,throws,rest,client,exception
AsyncRestOperations -> Future<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;1378128810;Asynchronously return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header wrapped in a {@link Future};Future<Set<HttpMethod>> optionsForAllow(URI url) throws RestClientException_;asynchronously,return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,wrapped,in,a,link,future;future,set,http,method,options,for,allow,uri,url,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables) 			throws RestClientException_;1378298362;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables) 			throws RestClientException_;1481218770;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables) 			throws RestClientException_;1490795646;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(URI url) throws RestClientException_;1378298362;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL;ListenableFuture<?> delete(URI url) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url;listenable,future,delete,uri,url,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(URI url) throws RestClientException_;1481218770;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL;ListenableFuture<?> delete(URI url) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url;listenable,future,delete,uri,url,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(URI url) throws RestClientException_;1490795646;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL;ListenableFuture<?> delete(URI url) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url;listenable,future,delete,uri,url,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(URI url) throws RestClientException_;1495868221;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL;ListenableFuture<?> delete(URI url) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url;listenable,future,delete,uri,url,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(URI url) throws RestClientException_;1496242568;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL;ListenableFuture<?> delete(URI url) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url;listenable,future,delete,uri,url,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<?> delete(URI url) throws RestClientException_;1508532146;Asynchronously delete the resources at the specified URI._<p>URI Template variables are expanded using the given URI variables, if any._<p>The Future will return a {@code null} result upon completion._@param url the URL;ListenableFuture<?> delete(URI url) throws RestClientException_;asynchronously,delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,future,will,return,a,code,null,result,upon,completion,param,url,the,url;listenable,future,delete,uri,url,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... uriVariables) throws RestClientException_;1378298362;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the_request, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... uriVariables) throws RestClientException_;1481218770;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the_request (may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... uriVariables) throws RestClientException_;1490795646;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the_request (may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1377627757;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the map containing variables for the URI template_@return all HTTP headers of that resource wrapped in a {@link Future};Future<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;future,http,headers,head,for,headers,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1377687378;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the map containing variables for the URI template_@return all HTTP headers of that resource wrapped in a {@link Future};Future<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;future,http,headers,head,for,headers,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> Future<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables) 			throws RestClientException_;1378128810;Asynchronously retrieve all headers of the resource specified by the URI template._<p>URI Template variables are expanded using the given map._@param url the URL_@param uriVariables the map containing variables for the URI template_@return all HTTP headers of that resource wrapped in a {@link Future};Future<HttpHeaders> headForHeaders(String url, Map<String, ?> uriVariables)_			throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,uri,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;future,http,headers,head,for,headers,string,url,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request, 			Class<T> responseType, Map<String, ?> uriVariables) 			throws RestClientException_;1377627757;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> Future<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request,_			Class<T> responseType, Map<String, ?> uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,future,response,entity,t,post,for,entity,string,url,http,entity,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request, 			Class<T> responseType, Map<String, ?> uriVariables) 			throws RestClientException_;1377687378;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> Future<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request,_			Class<T> responseType, Map<String, ?> uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,future,response,entity,t,post,for,entity,string,url,http,entity,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> Future<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request, 			Class<T> responseType, Map<String, ?> uriVariables) 			throws RestClientException_;1378128810;Create a new resource by POSTing the given object to the URI template,_and asynchronously returns the response as {@link ResponseEntity}._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param uriVariables the variables to expand the template_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> Future<ResponseEntity<T>> postForEntity(String url, HttpEntity<?> request,_			Class<T> responseType, Map<String, ?> uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,future,response,entity,t,post,for,entity,string,url,http,entity,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1378298362;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1481218770;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException_;1490795646;Asynchronously execute the HTTP method to the given URI template, writing the_given request entity to the request, and returns the response as_{@link ResponseEntity}._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@param uriVariables the variables to expand in the template_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,in,the,template,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException_;1495868221;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,uri,url,http,method,method,nullable,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException_;1496242568;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,uri,url,http,method,method,nullable,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException_;1508532146;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean =_new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}___ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response =_template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			@Nullable HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,uri,url,http,method,method,nullable,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(URI url, @Nullable HttpEntity<?> request) throws RestClientException_;1495868221;Create a new resource by POSTing the given object to the URL, and asynchronously_returns the value of the {@code Location} header. This header typically indicates_where the new resource is stored._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(URI url, @Nullable HttpEntity<?> request) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,uri,url,nullable,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(URI url, @Nullable HttpEntity<?> request) throws RestClientException_;1496242568;Create a new resource by POSTing the given object to the URL, and asynchronously_returns the value of the {@code Location} header. This header typically indicates_where the new resource is stored._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(URI url, @Nullable HttpEntity<?> request) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,uri,url,nullable,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(URI url, @Nullable HttpEntity<?> request) throws RestClientException_;1508532146;Create a new resource by POSTing the given object to the URL, and asynchronously_returns the value of the {@code Location} header. This header typically indicates_where the new resource is stored._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(URI url, @Nullable HttpEntity<?> request) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,uri,url,nullable,http,entity,request,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(String url, @Nullable HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1495868221;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(String url, @Nullable HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,string,url,nullable,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(String url, @Nullable HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1496242568;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(String url, @Nullable HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,string,url,nullable,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(String url, @Nullable HttpEntity<?> request, Map<String, ?> uriVariables) 			throws RestClientException_;1508532146;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given map._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(String url, @Nullable HttpEntity<?> request, Map<String, ?> uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,string,url,nullable,http,entity,request,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException_;1378298362;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may be {@code null}_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException_;1481218770;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException_;1490795646;Asynchronously execute the HTTP method to the given URI template, writing the given_request entity to the request, and returns the response as {@link ResponseEntity}._The given {@link ParameterizedTypeReference} is used to pass generic type_information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request_(may be {@code null})_@param responseType the type of the return value_@return the response as entity wrapped in a {@link Future};<T> ListenableFuture<ResponseEntity<T>> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,return,the,response,as,entity,wrapped,in,a,link,future;t,listenable,future,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(String url, HttpMethod method, 			@Nullable AsyncRequestCallback requestCallback, @Nullable ResponseExtractor<T> responseExtractor, 			Map<String, ?> uriVariables) throws RestClientException_;1496242568;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(String url, HttpMethod method,_			@Nullable AsyncRequestCallback requestCallback, @Nullable ResponseExtractor<T> responseExtractor,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,string,url,http,method,method,nullable,async,request,callback,request,callback,nullable,response,extractor,t,response,extractor,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<T> execute(String url, HttpMethod method, 			@Nullable AsyncRequestCallback requestCallback, @Nullable ResponseExtractor<T> responseExtractor, 			Map<String, ?> uriVariables) throws RestClientException_;1508532146;Asynchronously execute the HTTP method to the given URI template, preparing the_request with the {@link AsyncRequestCallback}, and reading the response with a_{@link ResponseExtractor}._<p>URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param uriVariables the variables to expand in the template_@return an arbitrary object, as returned by the {@link ResponseExtractor};<T> ListenableFuture<T> execute(String url, HttpMethod method,_			@Nullable AsyncRequestCallback requestCallback, @Nullable ResponseExtractor<T> responseExtractor,_			Map<String, ?> uriVariables) throws RestClientException_;asynchronously,execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,async,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,uri,variables,the,variables,to,expand,in,the,template,return,an,arbitrary,object,as,returned,by,the,link,response,extractor;t,listenable,future,t,execute,string,url,http,method,method,nullable,async,request,callback,request,callback,nullable,response,extractor,t,response,extractor,map,string,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(String url, @Nullable HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1495868221;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(String url, @Nullable HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,string,url,nullable,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(String url, @Nullable HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1496242568;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(String url, @Nullable HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,string,url,nullable,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<URI> postForLocation(String url, @Nullable HttpEntity<?> request, Object... uriVariables) 			throws RestClientException_;1508532146;Create a new resource by POSTing the given object to the URI template, and_asynchronously returns the value of the {@code Location} header. This header_typically indicates where the new resource is stored._<p>URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@param uriVariables the variables to expand the template_@return the value for the {@code Location} header wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;ListenableFuture<URI> postForLocation(String url, @Nullable HttpEntity<?> request, Object... uriVariables)_			throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,asynchronously,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,uri,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,wrapped,in,a,link,future,see,org,springframework,http,http,entity;listenable,future,uri,post,for,location,string,url,nullable,http,entity,request,object,uri,variables,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(URI url, @Nullable HttpEntity<?> request, 			Class<T> responseType) throws RestClientException_;1495868221;Create a new resource by POSTing the given object to the URL,_and asynchronously returns the response as {@link ResponseEntity}._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(URI url, @Nullable HttpEntity<?> request,_			Class<T> responseType) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,response,as,link,response,entity,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,uri,url,nullable,http,entity,request,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(URI url, @Nullable HttpEntity<?> request, 			Class<T> responseType) throws RestClientException_;1496242568;Create a new resource by POSTing the given object to the URL,_and asynchronously returns the response as {@link ResponseEntity}._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(URI url, @Nullable HttpEntity<?> request,_			Class<T> responseType) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,response,as,link,response,entity,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,uri,url,nullable,http,entity,request,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> <T> ListenableFuture<ResponseEntity<T>> postForEntity(URI url, @Nullable HttpEntity<?> request, 			Class<T> responseType) throws RestClientException_;1508532146;Create a new resource by POSTing the given object to the URL,_and asynchronously returns the response as {@link ResponseEntity}._@param url the URL_@param request the Object to be POSTed (may be {@code null})_@return the entity wrapped in a {@link Future}_@see org.springframework.http.HttpEntity;<T> ListenableFuture<ResponseEntity<T>> postForEntity(URI url, @Nullable HttpEntity<?> request,_			Class<T> responseType) throws RestClientException_;create,a,new,resource,by,posting,the,given,object,to,the,url,and,asynchronously,returns,the,response,as,link,response,entity,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,entity,wrapped,in,a,link,future,see,org,springframework,http,http,entity;t,listenable,future,response,entity,t,post,for,entity,uri,url,nullable,http,entity,request,class,t,response,type,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(URI url) throws RestClientException_;1378298362;Asynchronously retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(URI url) throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,uri,url,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(URI url) throws RestClientException_;1481218770;Asynchronously retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(URI url) throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,uri,url,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(URI url) throws RestClientException_;1490795646;Asynchronously retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(URI url) throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,uri,url,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(URI url) throws RestClientException_;1495868221;Asynchronously retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(URI url) throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,uri,url,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(URI url) throws RestClientException_;1496242568;Asynchronously retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(URI url) throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,uri,url,throws,rest,client,exception
AsyncRestOperations -> ListenableFuture<HttpHeaders> headForHeaders(URI url) throws RestClientException_;1508532146;Asynchronously retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource wrapped in a {@link Future};ListenableFuture<HttpHeaders> headForHeaders(URI url) throws RestClientException_;asynchronously,retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,wrapped,in,a,link,future;listenable,future,http,headers,head,for,headers,uri,url,throws,rest,client,exception
