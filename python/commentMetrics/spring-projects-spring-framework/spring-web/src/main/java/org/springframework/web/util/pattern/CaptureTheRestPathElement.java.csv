commented;modifiers;parameterAmount;loc;comment;code
false;public;2;33;;@Override public boolean matches(int pathIndex, MatchingContext matchingContext) {     // If there is more data, it must start with the separator     if (pathIndex < matchingContext.pathLength && !matchingContext.isSeparator(pathIndex)) {         return false.     }     if (matchingContext.determineRemainingPath) {         matchingContext.remainingPathIndex = matchingContext.pathLength.     }     if (matchingContext.extractingVariables) {         // Collect the parameters from all the remaining segments         MultiValueMap<String, String> parametersCollector = null.         for (int i = pathIndex. i < matchingContext.pathLength. i++) {             Element element = matchingContext.pathElements.get(i).             if (element instanceof PathSegment) {                 MultiValueMap<String, String> parameters = ((PathSegment) element).parameters().                 if (!parameters.isEmpty()) {                     if (parametersCollector == null) {                         parametersCollector = new LinkedMultiValueMap<>().                     }                     parametersCollector.addAll(parameters).                 }             }         }         matchingContext.set(this.variableName, pathToString(pathIndex, matchingContext.pathElements), parametersCollector == null ? NO_PARAMETERS : parametersCollector).     }     return true. }
false;private;2;13;;private String pathToString(int fromSegment, List<Element> pathElements) {     StringBuilder buf = new StringBuilder().     for (int i = fromSegment, max = pathElements.size(). i < max. i++) {         Element element = pathElements.get(i).         if (element instanceof PathSegment) {             buf.append(((PathSegment) element).valueToMatch()).         } else {             buf.append(element.value()).         }     }     return buf.toString(). }
false;public;0;4;;@Override public int getNormalizedLength() {     return 1. }
false;public;0;4;;@Override public int getWildcardCount() {     return 0. }
false;public;0;4;;@Override public int getCaptureCount() {     return 1. }
false;public;0;3;;public String toString() {     return "CaptureTheRest(/{*" + this.variableName + "})". }
false;public;0;4;;@Override public char[] getChars() {     return ("/{*" + this.variableName + "}").toCharArray(). }
