# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationConfigWebApplicationContext -> public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver);1500448076;Set a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is an {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}._@see AnnotatedBeanDefinitionReader#setScopeMetadataResolver_@see ClassPathBeanDefinitionScanner#setScopeMetadataResolver;public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = scopeMetadataResolver__	};set,a,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,an,link,org,springframework,context,annotation,annotation,scope,metadata,resolver,see,annotated,bean,definition,reader,set,scope,metadata,resolver,see,class,path,bean,definition,scanner,set,scope,metadata,resolver;public,void,set,scope,metadata,resolver,nullable,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver);1518810557;Set a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is an {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}._@see AnnotatedBeanDefinitionReader#setScopeMetadataResolver_@see ClassPathBeanDefinitionScanner#setScopeMetadataResolver;public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = scopeMetadataResolver__	};set,a,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,an,link,org,springframework,context,annotation,annotation,scope,metadata,resolver,see,annotated,bean,definition,reader,set,scope,metadata,resolver,see,class,path,bean,definition,scanner,set,scope,metadata,resolver;public,void,set,scope,metadata,resolver,nullable,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver);1519295386;Set a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is an {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}._@see AnnotatedBeanDefinitionReader#setScopeMetadataResolver_@see ClassPathBeanDefinitionScanner#setScopeMetadataResolver;public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = scopeMetadataResolver__	};set,a,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,an,link,org,springframework,context,annotation,annotation,scope,metadata,resolver,see,annotated,bean,definition,reader,set,scope,metadata,resolver,see,class,path,bean,definition,scanner,set,scope,metadata,resolver;public,void,set,scope,metadata,resolver,nullable,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver);1519514499;Set a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is an {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}._@see AnnotatedBeanDefinitionReader#setScopeMetadataResolver_@see ClassPathBeanDefinitionScanner#setScopeMetadataResolver;public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = scopeMetadataResolver__	};set,a,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,an,link,org,springframework,context,annotation,annotation,scope,metadata,resolver,see,annotated,bean,definition,reader,set,scope,metadata,resolver,see,class,path,bean,definition,scanner,set,scope,metadata,resolver;public,void,set,scope,metadata,resolver,nullable,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver);1532091916;Set a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is an {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}._@see AnnotatedBeanDefinitionReader#setScopeMetadataResolver_@see ClassPathBeanDefinitionScanner#setScopeMetadataResolver;public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = scopeMetadataResolver__	};set,a,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,an,link,org,springframework,context,annotation,annotation,scope,metadata,resolver,see,annotated,bean,definition,reader,set,scope,metadata,resolver,see,class,path,bean,definition,scanner,set,scope,metadata,resolver;public,void,set,scope,metadata,resolver,nullable,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver);1532555403;Set a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is an {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}._@see AnnotatedBeanDefinitionReader#setScopeMetadataResolver_@see ClassPathBeanDefinitionScanner#setScopeMetadataResolver;public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = scopeMetadataResolver__	};set,a,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,an,link,org,springframework,context,annotation,annotation,scope,metadata,resolver,see,annotated,bean,definition,reader,set,scope,metadata,resolver,see,class,path,bean,definition,scanner,set,scope,metadata,resolver;public,void,set,scope,metadata,resolver,nullable,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> @Nullable 	protected ScopeMetadataResolver getScopeMetadataResolver();1495868221;Return the custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;@Nullable_	protected ScopeMetadataResolver getScopeMetadataResolver() {_		return this.scopeMetadataResolver__	};return,the,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;nullable,protected,scope,metadata,resolver,get,scope,metadata,resolver,return,this,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> @Nullable 	protected ScopeMetadataResolver getScopeMetadataResolver();1496837955;Return the custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;@Nullable_	protected ScopeMetadataResolver getScopeMetadataResolver() {_		return this.scopeMetadataResolver__	};return,the,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;nullable,protected,scope,metadata,resolver,get,scope,metadata,resolver,return,this,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> @Nullable 	protected ScopeMetadataResolver getScopeMetadataResolver();1500448076;Return the custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;@Nullable_	protected ScopeMetadataResolver getScopeMetadataResolver() {_		return this.scopeMetadataResolver__	};return,the,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;nullable,protected,scope,metadata,resolver,get,scope,metadata,resolver,return,this,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> @Nullable 	protected ScopeMetadataResolver getScopeMetadataResolver();1518810557;Return the custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;@Nullable_	protected ScopeMetadataResolver getScopeMetadataResolver() {_		return this.scopeMetadataResolver__	};return,the,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;nullable,protected,scope,metadata,resolver,get,scope,metadata,resolver,return,this,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> @Nullable 	protected ScopeMetadataResolver getScopeMetadataResolver();1519295386;Return the custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;@Nullable_	protected ScopeMetadataResolver getScopeMetadataResolver() {_		return this.scopeMetadataResolver__	};return,the,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;nullable,protected,scope,metadata,resolver,get,scope,metadata,resolver,return,this,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> @Nullable 	protected ScopeMetadataResolver getScopeMetadataResolver();1519514499;Return the custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;@Nullable_	protected ScopeMetadataResolver getScopeMetadataResolver() {_		return this.scopeMetadataResolver__	};return,the,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;nullable,protected,scope,metadata,resolver,get,scope,metadata,resolver,return,this,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> @Nullable 	protected ScopeMetadataResolver getScopeMetadataResolver();1532091916;Return the custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;@Nullable_	protected ScopeMetadataResolver getScopeMetadataResolver() {_		return this.scopeMetadataResolver__	};return,the,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;nullable,protected,scope,metadata,resolver,get,scope,metadata,resolver,return,this,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> @Nullable 	protected ScopeMetadataResolver getScopeMetadataResolver();1532555403;Return the custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;@Nullable_	protected ScopeMetadataResolver getScopeMetadataResolver() {_		return this.scopeMetadataResolver__	};return,the,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;nullable,protected,scope,metadata,resolver,get,scope,metadata,resolver,return,this,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1328020251;Set the {@link ScopeMetadataResolver} to use for detected bean classes._<p>The default is an {@link AnnotationScopeMetadataResolver}.;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = scopeMetadataResolver__	};set,the,link,scope,metadata,resolver,to,use,for,detected,bean,classes,p,the,default,is,an,link,annotation,scope,metadata,resolver;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1329393628;Set the {@link ScopeMetadataResolver} to use for detected bean classes._<p>The default is an {@link AnnotationScopeMetadataResolver}.;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = scopeMetadataResolver__	};set,the,link,scope,metadata,resolver,to,use,for,detected,bean,classes,p,the,default,is,an,link,annotation,scope,metadata,resolver;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1335774711;Set the {@link ScopeMetadataResolver} to use for detected bean classes._<p>The default is an {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}.;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = scopeMetadataResolver__	};set,the,link,scope,metadata,resolver,to,use,for,detected,bean,classes,p,the,default,is,an,link,org,springframework,context,annotation,annotation,scope,metadata,resolver;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1377641093;Set a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is an {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}._@see AnnotatedBeanDefinitionReader#setScopeMetadataResolver_@see ClassPathBeanDefinitionScanner#setScopeMetadataResolver;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = scopeMetadataResolver__	};set,a,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,an,link,org,springframework,context,annotation,annotation,scope,metadata,resolver,see,annotated,bean,definition,reader,set,scope,metadata,resolver,see,class,path,bean,definition,scanner,set,scope,metadata,resolver;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1390432589;Set a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is an {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}._@see AnnotatedBeanDefinitionReader#setScopeMetadataResolver_@see ClassPathBeanDefinitionScanner#setScopeMetadataResolver;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = scopeMetadataResolver__	};set,a,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,an,link,org,springframework,context,annotation,annotation,scope,metadata,resolver,see,annotated,bean,definition,reader,set,scope,metadata,resolver,see,class,path,bean,definition,scanner,set,scope,metadata,resolver;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1403775783;Set a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is an {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}._@see AnnotatedBeanDefinitionReader#setScopeMetadataResolver_@see ClassPathBeanDefinitionScanner#setScopeMetadataResolver;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = scopeMetadataResolver__	};set,a,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,an,link,org,springframework,context,annotation,annotation,scope,metadata,resolver,see,annotated,bean,definition,reader,set,scope,metadata,resolver,see,class,path,bean,definition,scanner,set,scope,metadata,resolver;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1449488792;Set a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is an {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}._@see AnnotatedBeanDefinitionReader#setScopeMetadataResolver_@see ClassPathBeanDefinitionScanner#setScopeMetadataResolver;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = scopeMetadataResolver__	};set,a,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,an,link,org,springframework,context,annotation,annotation,scope,metadata,resolver,see,annotated,bean,definition,reader,set,scope,metadata,resolver,see,class,path,bean,definition,scanner,set,scope,metadata,resolver;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1467730834;Set a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is an {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}._@see AnnotatedBeanDefinitionReader#setScopeMetadataResolver_@see ClassPathBeanDefinitionScanner#setScopeMetadataResolver;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = scopeMetadataResolver__	};set,a,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,an,link,org,springframework,context,annotation,annotation,scope,metadata,resolver,see,annotated,bean,definition,reader,set,scope,metadata,resolver,see,class,path,bean,definition,scanner,set,scope,metadata,resolver;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1495868221;Set a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is an {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}._@see AnnotatedBeanDefinitionReader#setScopeMetadataResolver_@see ClassPathBeanDefinitionScanner#setScopeMetadataResolver;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = scopeMetadataResolver__	};set,a,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,an,link,org,springframework,context,annotation,annotation,scope,metadata,resolver,see,annotated,bean,definition,reader,set,scope,metadata,resolver,see,class,path,bean,definition,scanner,set,scope,metadata,resolver;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver);1496837955;Set a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is an {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}._@see AnnotatedBeanDefinitionReader#setScopeMetadataResolver_@see ClassPathBeanDefinitionScanner#setScopeMetadataResolver;public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {_		this.scopeMetadataResolver = scopeMetadataResolver__	};set,a,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,an,link,org,springframework,context,annotation,annotation,scope,metadata,resolver,see,annotated,bean,definition,reader,set,scope,metadata,resolver,see,class,path,bean,definition,scanner,set,scope,metadata,resolver;public,void,set,scope,metadata,resolver,scope,metadata,resolver,scope,metadata,resolver,this,scope,metadata,resolver,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> public void scan(String... basePackages);1328020251;Perform a scan within the specified base packages._Note that {@link #refresh()} must be called in order for the context to_fully process the new class._@param basePackages the packages to check for annotated classes_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #register(Class...)_@see #setConfigLocation(String)_@see #refresh();public void scan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		this.basePackages = basePackages__	};perform,a,scan,within,the,specified,base,packages,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,class,param,base,packages,the,packages,to,check,for,annotated,classes,see,load,bean,definitions,default,listable,bean,factory,see,register,class,see,set,config,location,string,see,refresh;public,void,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,this,base,packages,base,packages
AnnotationConfigWebApplicationContext -> public void scan(String... basePackages);1329393628;Perform a scan within the specified base packages._Note that {@link #refresh()} must be called in order for the context to_fully process the new class._@param basePackages the packages to check for annotated classes_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #register(Class...)_@see #setConfigLocation(String)_@see #refresh();public void scan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		this.basePackages = basePackages__	};perform,a,scan,within,the,specified,base,packages,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,class,param,base,packages,the,packages,to,check,for,annotated,classes,see,load,bean,definitions,default,listable,bean,factory,see,register,class,see,set,config,location,string,see,refresh;public,void,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,this,base,packages,base,packages
AnnotationConfigWebApplicationContext -> public void scan(String... basePackages);1335774711;Perform a scan within the specified base packages._Note that {@link #refresh()} must be called in order for the context to_fully process the new class._@param basePackages the packages to check for annotated classes_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #register(Class...)_@see #setConfigLocation(String)_@see #refresh();public void scan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		this.basePackages = basePackages__	};perform,a,scan,within,the,specified,base,packages,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,class,param,base,packages,the,packages,to,check,for,annotated,classes,see,load,bean,definitions,default,listable,bean,factory,see,register,class,see,set,config,location,string,see,refresh;public,void,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,this,base,packages,base,packages
AnnotationConfigWebApplicationContext -> public void scan(String... basePackages);1377641093;Perform a scan within the specified base packages._Note that {@link #refresh()} must be called in order for the context to_fully process the new class._@param basePackages the packages to check for annotated classes_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #register(Class...)_@see #setConfigLocation(String)_@see #refresh();public void scan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		this.basePackages.addAll(Arrays.asList(basePackages))__	};perform,a,scan,within,the,specified,base,packages,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,class,param,base,packages,the,packages,to,check,for,annotated,classes,see,load,bean,definitions,default,listable,bean,factory,see,register,class,see,set,config,location,string,see,refresh;public,void,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,this,base,packages,add,all,arrays,as,list,base,packages
AnnotationConfigWebApplicationContext -> public void scan(String... basePackages);1390432589;Perform a scan within the specified base packages._Note that {@link #refresh()} must be called in order for the context to_fully process the new class._@param basePackages the packages to check for annotated classes_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #register(Class...)_@see #setConfigLocation(String)_@see #refresh();public void scan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		this.basePackages.addAll(Arrays.asList(basePackages))__	};perform,a,scan,within,the,specified,base,packages,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,class,param,base,packages,the,packages,to,check,for,annotated,classes,see,load,bean,definitions,default,listable,bean,factory,see,register,class,see,set,config,location,string,see,refresh;public,void,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,this,base,packages,add,all,arrays,as,list,base,packages
AnnotationConfigWebApplicationContext -> public void scan(String... basePackages);1403775783;Perform a scan within the specified base packages._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param basePackages the packages to check for annotated classes_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #register(Class...)_@see #setConfigLocation(String)_@see #refresh();public void scan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		this.basePackages.addAll(Arrays.asList(basePackages))__	};perform,a,scan,within,the,specified,base,packages,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,base,packages,the,packages,to,check,for,annotated,classes,see,load,bean,definitions,default,listable,bean,factory,see,register,class,see,set,config,location,string,see,refresh;public,void,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,this,base,packages,add,all,arrays,as,list,base,packages
AnnotationConfigWebApplicationContext -> public void scan(String... basePackages);1449488792;Perform a scan within the specified base packages._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param basePackages the packages to check for annotated classes_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #register(Class...)_@see #setConfigLocation(String)_@see #refresh();public void scan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		this.basePackages.addAll(Arrays.asList(basePackages))__	};perform,a,scan,within,the,specified,base,packages,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,base,packages,the,packages,to,check,for,annotated,classes,see,load,bean,definitions,default,listable,bean,factory,see,register,class,see,set,config,location,string,see,refresh;public,void,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,this,base,packages,add,all,arrays,as,list,base,packages
AnnotationConfigWebApplicationContext -> public void scan(String... basePackages);1467730834;Perform a scan within the specified base packages._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param basePackages the packages to check for annotated classes_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #register(Class...)_@see #setConfigLocation(String)_@see #refresh();public void scan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		this.basePackages.addAll(Arrays.asList(basePackages))__	};perform,a,scan,within,the,specified,base,packages,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,base,packages,the,packages,to,check,for,annotated,classes,see,load,bean,definitions,default,listable,bean,factory,see,register,class,see,set,config,location,string,see,refresh;public,void,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,this,base,packages,add,all,arrays,as,list,base,packages
AnnotationConfigWebApplicationContext -> public void scan(String... basePackages);1495868221;Perform a scan within the specified base packages._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param basePackages the packages to check for annotated classes_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #register(Class...)_@see #setConfigLocation(String)_@see #refresh();public void scan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		this.basePackages.addAll(Arrays.asList(basePackages))__	};perform,a,scan,within,the,specified,base,packages,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,base,packages,the,packages,to,check,for,annotated,classes,see,load,bean,definitions,default,listable,bean,factory,see,register,class,see,set,config,location,string,see,refresh;public,void,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,this,base,packages,add,all,arrays,as,list,base,packages
AnnotationConfigWebApplicationContext -> public void scan(String... basePackages);1496837955;Perform a scan within the specified base packages._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param basePackages the packages to check for annotated classes_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #register(Class...)_@see #setConfigLocation(String)_@see #refresh();public void scan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		this.basePackages.addAll(Arrays.asList(basePackages))__	};perform,a,scan,within,the,specified,base,packages,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,base,packages,the,packages,to,check,for,annotated,classes,see,load,bean,definitions,default,listable,bean,factory,see,register,class,see,set,config,location,string,see,refresh;public,void,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,this,base,packages,add,all,arrays,as,list,base,packages
AnnotationConfigWebApplicationContext -> public void scan(String... basePackages);1500448076;Perform a scan within the specified base packages._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param basePackages the packages to check for annotated classes_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #register(Class...)_@see #setConfigLocation(String)_@see #refresh();public void scan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		this.basePackages.addAll(Arrays.asList(basePackages))__	};perform,a,scan,within,the,specified,base,packages,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,base,packages,the,packages,to,check,for,annotated,classes,see,load,bean,definitions,default,listable,bean,factory,see,register,class,see,set,config,location,string,see,refresh;public,void,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,this,base,packages,add,all,arrays,as,list,base,packages
AnnotationConfigWebApplicationContext -> public void scan(String... basePackages);1518810557;Perform a scan within the specified base packages._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param basePackages the packages to check for annotated classes_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #register(Class...)_@see #setConfigLocation(String)_@see #refresh();public void scan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		this.basePackages.addAll(Arrays.asList(basePackages))__	};perform,a,scan,within,the,specified,base,packages,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,base,packages,the,packages,to,check,for,annotated,classes,see,load,bean,definitions,default,listable,bean,factory,see,register,class,see,set,config,location,string,see,refresh;public,void,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,this,base,packages,add,all,arrays,as,list,base,packages
AnnotationConfigWebApplicationContext -> public void scan(String... basePackages);1519295386;Perform a scan within the specified base packages._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param basePackages the packages to check for annotated classes_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #register(Class...)_@see #setConfigLocation(String)_@see #refresh();public void scan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		this.basePackages.addAll(Arrays.asList(basePackages))__	};perform,a,scan,within,the,specified,base,packages,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,base,packages,the,packages,to,check,for,annotated,classes,see,load,bean,definitions,default,listable,bean,factory,see,register,class,see,set,config,location,string,see,refresh;public,void,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,this,base,packages,add,all,arrays,as,list,base,packages
AnnotationConfigWebApplicationContext -> public void scan(String... basePackages);1519514499;Perform a scan within the specified base packages._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param basePackages the packages to check for annotated classes_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #register(Class...)_@see #setConfigLocation(String)_@see #refresh();public void scan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Collections.addAll(this.basePackages, basePackages)__	};perform,a,scan,within,the,specified,base,packages,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,base,packages,the,packages,to,check,for,annotated,classes,see,load,bean,definitions,default,listable,bean,factory,see,register,class,see,set,config,location,string,see,refresh;public,void,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,collections,add,all,this,base,packages,base,packages
AnnotationConfigWebApplicationContext -> public void scan(String... basePackages);1532091916;Perform a scan within the specified base packages._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param basePackages the packages to check for annotated classes_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #register(Class...)_@see #setConfigLocation(String)_@see #refresh();public void scan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Collections.addAll(this.basePackages, basePackages)__	};perform,a,scan,within,the,specified,base,packages,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,base,packages,the,packages,to,check,for,annotated,classes,see,load,bean,definitions,default,listable,bean,factory,see,register,class,see,set,config,location,string,see,refresh;public,void,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,collections,add,all,this,base,packages,base,packages
AnnotationConfigWebApplicationContext -> public void scan(String... basePackages);1532555403;Perform a scan within the specified base packages._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param basePackages the packages to check for annotated classes_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #register(Class...)_@see #setConfigLocation(String)_@see #refresh();public void scan(String... basePackages) {_		Assert.notEmpty(basePackages, "At least one base package must be specified")__		Collections.addAll(this.basePackages, basePackages)__	};perform,a,scan,within,the,specified,base,packages,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,base,packages,the,packages,to,check,for,annotated,classes,see,load,bean,definitions,default,listable,bean,factory,see,register,class,see,set,config,location,string,see,refresh;public,void,scan,string,base,packages,assert,not,empty,base,packages,at,least,one,base,package,must,be,specified,collections,add,all,this,base,packages,base,packages
AnnotationConfigWebApplicationContext -> @Override 	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);1328020251;Register a {@link org.springframework.beans.factory.config.BeanDefinition} for_any classes specified by {@link #register(Class...)} and scan any packages_specified by {@link #scan(String...)}._<p>For any values specified by {@link #setConfigLocation(String)} or_{@link #setConfigLocations(String[])}, attempt first to load each location as a_class, registering a {@code BeanDefinition} if class loading is successful,_and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),_assume the value is a package and attempt to scan it for annotated classes._<p>Enables the default set of annotation configuration post processors, such that_{@code @Autowired}, {@code @Required}, and associated annotations can be used._<p>Configuration class bean definitions are registered with generated bean_definition names unless the {@code value} attribute is provided to the stereotype_annotation._@see #register(Class...)_@see #scan(String...)_@see #setConfigLocation()_@see #setConfigLocations()_@see AnnotatedBeanDefinitionReader_@see ClassPathBeanDefinitionScanner;@Override_	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {_		AnnotatedBeanDefinitionReader reader = new AnnotatedBeanDefinitionReader(beanFactory)__		reader.setEnvironment(this.getEnvironment())___		ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(beanFactory)__		scanner.setEnvironment(this.getEnvironment())___		BeanNameGenerator beanNameGenerator = getBeanNameGenerator()__		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver()__		if (beanNameGenerator != null) {_			reader.setBeanNameGenerator(beanNameGenerator)__			scanner.setBeanNameGenerator(beanNameGenerator)__		}_		if (scopeMetadataResolver != null) {_			reader.setScopeMetadataResolver(scopeMetadataResolver)__			scanner.setScopeMetadataResolver(scopeMetadataResolver)__		}__		if (!ObjectUtils.isEmpty(this.annotatedClasses)) {_			if (logger.isInfoEnabled()) {_				logger.info("Registering annotated classes: [" +_						StringUtils.arrayToCommaDelimitedString(this.annotatedClasses) + "]")__			}_			reader.register(this.annotatedClasses)__		}__		if (!ObjectUtils.isEmpty(this.basePackages)) {_			if (logger.isInfoEnabled()) {_				logger.info("Scanning base packages: [" +_						StringUtils.arrayToCommaDelimitedString(this.basePackages) + "]")__			}_			scanner.scan(this.basePackages)__		}__		String[] configLocations = getConfigLocations()__		if (configLocations != null) {_			for (String configLocation : configLocations) {_				try {_					Class<?> clazz = getClassLoader().loadClass(configLocation)__					if (logger.isInfoEnabled()) {_						logger.info("Successfully resolved class for [" + configLocation + "]")__					}_					reader.register(clazz)__				}_				catch (ClassNotFoundException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not load class for config location [" + configLocation +_								"] - trying package scan. " + ex)__					}_					int count = scanner.scan(configLocation)__					if (logger.isInfoEnabled()) {_						if (count == 0) {_							logger.info("No annotated classes found for specified class/package [" + configLocation + "]")__						}_						else {_							logger.info("Found " + count + " annotated classes in package [" + configLocation + "]")__						}_					}_				}_			}_		}_	};register,a,link,org,springframework,beans,factory,config,bean,definition,for,any,classes,specified,by,link,register,class,and,scan,any,packages,specified,by,link,scan,string,p,for,any,values,specified,by,link,set,config,location,string,or,link,set,config,locations,string,attempt,first,to,load,each,location,as,a,class,registering,a,code,bean,definition,if,class,loading,is,successful,and,if,class,loading,fails,i,e,a,code,class,not,found,exception,is,raised,assume,the,value,is,a,package,and,attempt,to,scan,it,for,annotated,classes,p,enables,the,default,set,of,annotation,configuration,post,processors,such,that,code,autowired,code,required,and,associated,annotations,can,be,used,p,configuration,class,bean,definitions,are,registered,with,generated,bean,definition,names,unless,the,code,value,attribute,is,provided,to,the,stereotype,annotation,see,register,class,see,scan,string,see,set,config,location,see,set,config,locations,see,annotated,bean,definition,reader,see,class,path,bean,definition,scanner;override,protected,void,load,bean,definitions,default,listable,bean,factory,bean,factory,annotated,bean,definition,reader,reader,new,annotated,bean,definition,reader,bean,factory,reader,set,environment,this,get,environment,class,path,bean,definition,scanner,scanner,new,class,path,bean,definition,scanner,bean,factory,scanner,set,environment,this,get,environment,bean,name,generator,bean,name,generator,get,bean,name,generator,scope,metadata,resolver,scope,metadata,resolver,get,scope,metadata,resolver,if,bean,name,generator,null,reader,set,bean,name,generator,bean,name,generator,scanner,set,bean,name,generator,bean,name,generator,if,scope,metadata,resolver,null,reader,set,scope,metadata,resolver,scope,metadata,resolver,scanner,set,scope,metadata,resolver,scope,metadata,resolver,if,object,utils,is,empty,this,annotated,classes,if,logger,is,info,enabled,logger,info,registering,annotated,classes,string,utils,array,to,comma,delimited,string,this,annotated,classes,reader,register,this,annotated,classes,if,object,utils,is,empty,this,base,packages,if,logger,is,info,enabled,logger,info,scanning,base,packages,string,utils,array,to,comma,delimited,string,this,base,packages,scanner,scan,this,base,packages,string,config,locations,get,config,locations,if,config,locations,null,for,string,config,location,config,locations,try,class,clazz,get,class,loader,load,class,config,location,if,logger,is,info,enabled,logger,info,successfully,resolved,class,for,config,location,reader,register,clazz,catch,class,not,found,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,class,for,config,location,config,location,trying,package,scan,ex,int,count,scanner,scan,config,location,if,logger,is,info,enabled,if,count,0,logger,info,no,annotated,classes,found,for,specified,class,package,config,location,else,logger,info,found,count,annotated,classes,in,package,config,location
AnnotationConfigWebApplicationContext -> @Override 	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);1329393628;Register a {@link org.springframework.beans.factory.config.BeanDefinition} for_any classes specified by {@link #register(Class...)} and scan any packages_specified by {@link #scan(String...)}._<p>For any values specified by {@link #setConfigLocation(String)} or_{@link #setConfigLocations(String[])}, attempt first to load each location as a_class, registering a {@code BeanDefinition} if class loading is successful,_and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),_assume the value is a package and attempt to scan it for annotated classes._<p>Enables the default set of annotation configuration post processors, such that_{@code @Autowired}, {@code @Required}, and associated annotations can be used._<p>Configuration class bean definitions are registered with generated bean_definition names unless the {@code value} attribute is provided to the stereotype_annotation._@see #register(Class...)_@see #scan(String...)_@see #setConfigLocation()_@see #setConfigLocations()_@see AnnotatedBeanDefinitionReader_@see ClassPathBeanDefinitionScanner;@Override_	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {_		AnnotatedBeanDefinitionReader reader = new AnnotatedBeanDefinitionReader(beanFactory)__		reader.setEnvironment(this.getEnvironment())___		ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(beanFactory)__		scanner.setEnvironment(this.getEnvironment())___		BeanNameGenerator beanNameGenerator = getBeanNameGenerator()__		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver()__		if (beanNameGenerator != null) {_			reader.setBeanNameGenerator(beanNameGenerator)__			scanner.setBeanNameGenerator(beanNameGenerator)__			beanFactory.registerSingleton(_					AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator)__		}_		if (scopeMetadataResolver != null) {_			reader.setScopeMetadataResolver(scopeMetadataResolver)__			scanner.setScopeMetadataResolver(scopeMetadataResolver)__		}__		if (!ObjectUtils.isEmpty(this.annotatedClasses)) {_			if (logger.isInfoEnabled()) {_				logger.info("Registering annotated classes: [" +_						StringUtils.arrayToCommaDelimitedString(this.annotatedClasses) + "]")__			}_			reader.register(this.annotatedClasses)__		}__		if (!ObjectUtils.isEmpty(this.basePackages)) {_			if (logger.isInfoEnabled()) {_				logger.info("Scanning base packages: [" +_						StringUtils.arrayToCommaDelimitedString(this.basePackages) + "]")__			}_			scanner.scan(this.basePackages)__		}__		String[] configLocations = getConfigLocations()__		if (configLocations != null) {_			for (String configLocation : configLocations) {_				try {_					Class<?> clazz = getClassLoader().loadClass(configLocation)__					if (logger.isInfoEnabled()) {_						logger.info("Successfully resolved class for [" + configLocation + "]")__					}_					reader.register(clazz)__				}_				catch (ClassNotFoundException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not load class for config location [" + configLocation +_								"] - trying package scan. " + ex)__					}_					int count = scanner.scan(configLocation)__					if (logger.isInfoEnabled()) {_						if (count == 0) {_							logger.info("No annotated classes found for specified class/package [" + configLocation + "]")__						}_						else {_							logger.info("Found " + count + " annotated classes in package [" + configLocation + "]")__						}_					}_				}_			}_		}_	};register,a,link,org,springframework,beans,factory,config,bean,definition,for,any,classes,specified,by,link,register,class,and,scan,any,packages,specified,by,link,scan,string,p,for,any,values,specified,by,link,set,config,location,string,or,link,set,config,locations,string,attempt,first,to,load,each,location,as,a,class,registering,a,code,bean,definition,if,class,loading,is,successful,and,if,class,loading,fails,i,e,a,code,class,not,found,exception,is,raised,assume,the,value,is,a,package,and,attempt,to,scan,it,for,annotated,classes,p,enables,the,default,set,of,annotation,configuration,post,processors,such,that,code,autowired,code,required,and,associated,annotations,can,be,used,p,configuration,class,bean,definitions,are,registered,with,generated,bean,definition,names,unless,the,code,value,attribute,is,provided,to,the,stereotype,annotation,see,register,class,see,scan,string,see,set,config,location,see,set,config,locations,see,annotated,bean,definition,reader,see,class,path,bean,definition,scanner;override,protected,void,load,bean,definitions,default,listable,bean,factory,bean,factory,annotated,bean,definition,reader,reader,new,annotated,bean,definition,reader,bean,factory,reader,set,environment,this,get,environment,class,path,bean,definition,scanner,scanner,new,class,path,bean,definition,scanner,bean,factory,scanner,set,environment,this,get,environment,bean,name,generator,bean,name,generator,get,bean,name,generator,scope,metadata,resolver,scope,metadata,resolver,get,scope,metadata,resolver,if,bean,name,generator,null,reader,set,bean,name,generator,bean,name,generator,scanner,set,bean,name,generator,bean,name,generator,bean,factory,register,singleton,annotation,config,utils,bean,name,generator,if,scope,metadata,resolver,null,reader,set,scope,metadata,resolver,scope,metadata,resolver,scanner,set,scope,metadata,resolver,scope,metadata,resolver,if,object,utils,is,empty,this,annotated,classes,if,logger,is,info,enabled,logger,info,registering,annotated,classes,string,utils,array,to,comma,delimited,string,this,annotated,classes,reader,register,this,annotated,classes,if,object,utils,is,empty,this,base,packages,if,logger,is,info,enabled,logger,info,scanning,base,packages,string,utils,array,to,comma,delimited,string,this,base,packages,scanner,scan,this,base,packages,string,config,locations,get,config,locations,if,config,locations,null,for,string,config,location,config,locations,try,class,clazz,get,class,loader,load,class,config,location,if,logger,is,info,enabled,logger,info,successfully,resolved,class,for,config,location,reader,register,clazz,catch,class,not,found,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,class,for,config,location,config,location,trying,package,scan,ex,int,count,scanner,scan,config,location,if,logger,is,info,enabled,if,count,0,logger,info,no,annotated,classes,found,for,specified,class,package,config,location,else,logger,info,found,count,annotated,classes,in,package,config,location
AnnotationConfigWebApplicationContext -> @Override 	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);1335774711;Register a {@link org.springframework.beans.factory.config.BeanDefinition} for_any classes specified by {@link #register(Class...)} and scan any packages_specified by {@link #scan(String...)}._<p>For any values specified by {@link #setConfigLocation(String)} or_{@link #setConfigLocations(String[])}, attempt first to load each location as a_class, registering a {@code BeanDefinition} if class loading is successful,_and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),_assume the value is a package and attempt to scan it for annotated classes._<p>Enables the default set of annotation configuration post processors, such that_{@code @Autowired}, {@code @Required}, and associated annotations can be used._<p>Configuration class bean definitions are registered with generated bean_definition names unless the {@code value} attribute is provided to the stereotype_annotation._@see #register(Class...)_@see #scan(String...)_@see #setConfigLocation(String)_@see #setConfigLocations(String[])_@see AnnotatedBeanDefinitionReader_@see ClassPathBeanDefinitionScanner;@Override_	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {_		AnnotatedBeanDefinitionReader reader = new AnnotatedBeanDefinitionReader(beanFactory)__		reader.setEnvironment(this.getEnvironment())___		ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(beanFactory)__		scanner.setEnvironment(this.getEnvironment())___		BeanNameGenerator beanNameGenerator = getBeanNameGenerator()__		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver()__		if (beanNameGenerator != null) {_			reader.setBeanNameGenerator(beanNameGenerator)__			scanner.setBeanNameGenerator(beanNameGenerator)__			beanFactory.registerSingleton(_					AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator)__		}_		if (scopeMetadataResolver != null) {_			reader.setScopeMetadataResolver(scopeMetadataResolver)__			scanner.setScopeMetadataResolver(scopeMetadataResolver)__		}__		if (!ObjectUtils.isEmpty(this.annotatedClasses)) {_			if (logger.isInfoEnabled()) {_				logger.info("Registering annotated classes: [" +_						StringUtils.arrayToCommaDelimitedString(this.annotatedClasses) + "]")__			}_			reader.register(this.annotatedClasses)__		}__		if (!ObjectUtils.isEmpty(this.basePackages)) {_			if (logger.isInfoEnabled()) {_				logger.info("Scanning base packages: [" +_						StringUtils.arrayToCommaDelimitedString(this.basePackages) + "]")__			}_			scanner.scan(this.basePackages)__		}__		String[] configLocations = getConfigLocations()__		if (configLocations != null) {_			for (String configLocation : configLocations) {_				try {_					Class<?> clazz = getClassLoader().loadClass(configLocation)__					if (logger.isInfoEnabled()) {_						logger.info("Successfully resolved class for [" + configLocation + "]")__					}_					reader.register(clazz)__				}_				catch (ClassNotFoundException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not load class for config location [" + configLocation +_								"] - trying package scan. " + ex)__					}_					int count = scanner.scan(configLocation)__					if (logger.isInfoEnabled()) {_						if (count == 0) {_							logger.info("No annotated classes found for specified class/package [" + configLocation + "]")__						}_						else {_							logger.info("Found " + count + " annotated classes in package [" + configLocation + "]")__						}_					}_				}_			}_		}_	};register,a,link,org,springframework,beans,factory,config,bean,definition,for,any,classes,specified,by,link,register,class,and,scan,any,packages,specified,by,link,scan,string,p,for,any,values,specified,by,link,set,config,location,string,or,link,set,config,locations,string,attempt,first,to,load,each,location,as,a,class,registering,a,code,bean,definition,if,class,loading,is,successful,and,if,class,loading,fails,i,e,a,code,class,not,found,exception,is,raised,assume,the,value,is,a,package,and,attempt,to,scan,it,for,annotated,classes,p,enables,the,default,set,of,annotation,configuration,post,processors,such,that,code,autowired,code,required,and,associated,annotations,can,be,used,p,configuration,class,bean,definitions,are,registered,with,generated,bean,definition,names,unless,the,code,value,attribute,is,provided,to,the,stereotype,annotation,see,register,class,see,scan,string,see,set,config,location,string,see,set,config,locations,string,see,annotated,bean,definition,reader,see,class,path,bean,definition,scanner;override,protected,void,load,bean,definitions,default,listable,bean,factory,bean,factory,annotated,bean,definition,reader,reader,new,annotated,bean,definition,reader,bean,factory,reader,set,environment,this,get,environment,class,path,bean,definition,scanner,scanner,new,class,path,bean,definition,scanner,bean,factory,scanner,set,environment,this,get,environment,bean,name,generator,bean,name,generator,get,bean,name,generator,scope,metadata,resolver,scope,metadata,resolver,get,scope,metadata,resolver,if,bean,name,generator,null,reader,set,bean,name,generator,bean,name,generator,scanner,set,bean,name,generator,bean,name,generator,bean,factory,register,singleton,annotation,config,utils,bean,name,generator,if,scope,metadata,resolver,null,reader,set,scope,metadata,resolver,scope,metadata,resolver,scanner,set,scope,metadata,resolver,scope,metadata,resolver,if,object,utils,is,empty,this,annotated,classes,if,logger,is,info,enabled,logger,info,registering,annotated,classes,string,utils,array,to,comma,delimited,string,this,annotated,classes,reader,register,this,annotated,classes,if,object,utils,is,empty,this,base,packages,if,logger,is,info,enabled,logger,info,scanning,base,packages,string,utils,array,to,comma,delimited,string,this,base,packages,scanner,scan,this,base,packages,string,config,locations,get,config,locations,if,config,locations,null,for,string,config,location,config,locations,try,class,clazz,get,class,loader,load,class,config,location,if,logger,is,info,enabled,logger,info,successfully,resolved,class,for,config,location,reader,register,clazz,catch,class,not,found,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,class,for,config,location,config,location,trying,package,scan,ex,int,count,scanner,scan,config,location,if,logger,is,info,enabled,if,count,0,logger,info,no,annotated,classes,found,for,specified,class,package,config,location,else,logger,info,found,count,annotated,classes,in,package,config,location
AnnotationConfigWebApplicationContext -> @Override 	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);1377641093;Register a {@link org.springframework.beans.factory.config.BeanDefinition} for_any classes specified by {@link #register(Class...)} and scan any packages_specified by {@link #scan(String...)}._<p>For any values specified by {@link #setConfigLocation(String)} or_{@link #setConfigLocations(String[])}, attempt first to load each location as a_class, registering a {@code BeanDefinition} if class loading is successful,_and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),_assume the value is a package and attempt to scan it for annotated classes._<p>Enables the default set of annotation configuration post processors, such that_{@code @Autowired}, {@code @Required}, and associated annotations can be used._<p>Configuration class bean definitions are registered with generated bean_definition names unless the {@code value} attribute is provided to the stereotype_annotation._@see #register(Class...)_@see #scan(String...)_@see #setConfigLocation(String)_@see #setConfigLocations(String[])_@see AnnotatedBeanDefinitionReader_@see ClassPathBeanDefinitionScanner;@Override_	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {_		AnnotatedBeanDefinitionReader reader = new AnnotatedBeanDefinitionReader(beanFactory)__		reader.setEnvironment(this.getEnvironment())___		ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(beanFactory)__		scanner.setEnvironment(this.getEnvironment())___		BeanNameGenerator beanNameGenerator = getBeanNameGenerator()__		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver()__		if (beanNameGenerator != null) {_			reader.setBeanNameGenerator(beanNameGenerator)__			scanner.setBeanNameGenerator(beanNameGenerator)__			beanFactory.registerSingleton(_					AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator)__		}_		if (scopeMetadataResolver != null) {_			reader.setScopeMetadataResolver(scopeMetadataResolver)__			scanner.setScopeMetadataResolver(scopeMetadataResolver)__		}__		if (!this.annotatedClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Registering annotated classes: [" +_						StringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + "]")__			}_			reader.register(this.annotatedClasses.toArray(new Class<?>[this.annotatedClasses.size()]))__		}__		if (!this.basePackages.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Scanning base packages: [" +_						StringUtils.collectionToCommaDelimitedString(this.basePackages) + "]")__			}_			scanner.scan(this.basePackages.toArray(new String[this.basePackages.size()]))__		}__		String[] configLocations = getConfigLocations()__		if (configLocations != null) {_			for (String configLocation : configLocations) {_				try {_					Class<?> clazz = getClassLoader().loadClass(configLocation)__					if (logger.isInfoEnabled()) {_						logger.info("Successfully resolved class for [" + configLocation + "]")__					}_					reader.register(clazz)__				}_				catch (ClassNotFoundException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not load class for config location [" + configLocation +_								"] - trying package scan. " + ex)__					}_					int count = scanner.scan(configLocation)__					if (logger.isInfoEnabled()) {_						if (count == 0) {_							logger.info("No annotated classes found for specified class/package [" + configLocation + "]")__						}_						else {_							logger.info("Found " + count + " annotated classes in package [" + configLocation + "]")__						}_					}_				}_			}_		}_	};register,a,link,org,springframework,beans,factory,config,bean,definition,for,any,classes,specified,by,link,register,class,and,scan,any,packages,specified,by,link,scan,string,p,for,any,values,specified,by,link,set,config,location,string,or,link,set,config,locations,string,attempt,first,to,load,each,location,as,a,class,registering,a,code,bean,definition,if,class,loading,is,successful,and,if,class,loading,fails,i,e,a,code,class,not,found,exception,is,raised,assume,the,value,is,a,package,and,attempt,to,scan,it,for,annotated,classes,p,enables,the,default,set,of,annotation,configuration,post,processors,such,that,code,autowired,code,required,and,associated,annotations,can,be,used,p,configuration,class,bean,definitions,are,registered,with,generated,bean,definition,names,unless,the,code,value,attribute,is,provided,to,the,stereotype,annotation,see,register,class,see,scan,string,see,set,config,location,string,see,set,config,locations,string,see,annotated,bean,definition,reader,see,class,path,bean,definition,scanner;override,protected,void,load,bean,definitions,default,listable,bean,factory,bean,factory,annotated,bean,definition,reader,reader,new,annotated,bean,definition,reader,bean,factory,reader,set,environment,this,get,environment,class,path,bean,definition,scanner,scanner,new,class,path,bean,definition,scanner,bean,factory,scanner,set,environment,this,get,environment,bean,name,generator,bean,name,generator,get,bean,name,generator,scope,metadata,resolver,scope,metadata,resolver,get,scope,metadata,resolver,if,bean,name,generator,null,reader,set,bean,name,generator,bean,name,generator,scanner,set,bean,name,generator,bean,name,generator,bean,factory,register,singleton,annotation,config,utils,bean,name,generator,if,scope,metadata,resolver,null,reader,set,scope,metadata,resolver,scope,metadata,resolver,scanner,set,scope,metadata,resolver,scope,metadata,resolver,if,this,annotated,classes,is,empty,if,logger,is,info,enabled,logger,info,registering,annotated,classes,string,utils,collection,to,comma,delimited,string,this,annotated,classes,reader,register,this,annotated,classes,to,array,new,class,this,annotated,classes,size,if,this,base,packages,is,empty,if,logger,is,info,enabled,logger,info,scanning,base,packages,string,utils,collection,to,comma,delimited,string,this,base,packages,scanner,scan,this,base,packages,to,array,new,string,this,base,packages,size,string,config,locations,get,config,locations,if,config,locations,null,for,string,config,location,config,locations,try,class,clazz,get,class,loader,load,class,config,location,if,logger,is,info,enabled,logger,info,successfully,resolved,class,for,config,location,reader,register,clazz,catch,class,not,found,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,class,for,config,location,config,location,trying,package,scan,ex,int,count,scanner,scan,config,location,if,logger,is,info,enabled,if,count,0,logger,info,no,annotated,classes,found,for,specified,class,package,config,location,else,logger,info,found,count,annotated,classes,in,package,config,location
AnnotationConfigWebApplicationContext -> @Override 	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);1390432589;Register a {@link org.springframework.beans.factory.config.BeanDefinition} for_any classes specified by {@link #register(Class...)} and scan any packages_specified by {@link #scan(String...)}._<p>For any values specified by {@link #setConfigLocation(String)} or_{@link #setConfigLocations(String[])}, attempt first to load each location as a_class, registering a {@code BeanDefinition} if class loading is successful,_and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),_assume the value is a package and attempt to scan it for annotated classes._<p>Enables the default set of annotation configuration post processors, such that_{@code @Autowired}, {@code @Required}, and associated annotations can be used._<p>Configuration class bean definitions are registered with generated bean_definition names unless the {@code value} attribute is provided to the stereotype_annotation._@see #register(Class...)_@see #scan(String...)_@see #setConfigLocation(String)_@see #setConfigLocations(String[])_@see AnnotatedBeanDefinitionReader_@see ClassPathBeanDefinitionScanner;@Override_	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {_		AnnotatedBeanDefinitionReader reader = new AnnotatedBeanDefinitionReader(beanFactory)__		reader.setEnvironment(getEnvironment())___		ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(beanFactory)__		scanner.setEnvironment(getEnvironment())___		BeanNameGenerator beanNameGenerator = getBeanNameGenerator()__		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver()__		if (beanNameGenerator != null) {_			reader.setBeanNameGenerator(beanNameGenerator)__			scanner.setBeanNameGenerator(beanNameGenerator)__			beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator)__		}_		if (scopeMetadataResolver != null) {_			reader.setScopeMetadataResolver(scopeMetadataResolver)__			scanner.setScopeMetadataResolver(scopeMetadataResolver)__		}__		if (!this.annotatedClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Registering annotated classes: [" +_						StringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + "]")__			}_			reader.register(this.annotatedClasses.toArray(new Class<?>[this.annotatedClasses.size()]))__		}__		if (!this.basePackages.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Scanning base packages: [" +_						StringUtils.collectionToCommaDelimitedString(this.basePackages) + "]")__			}_			scanner.scan(this.basePackages.toArray(new String[this.basePackages.size()]))__		}__		String[] configLocations = getConfigLocations()__		if (configLocations != null) {_			for (String configLocation : configLocations) {_				try {_					Class<?> clazz = getClassLoader().loadClass(configLocation)__					if (logger.isInfoEnabled()) {_						logger.info("Successfully resolved class for [" + configLocation + "]")__					}_					reader.register(clazz)__				}_				catch (ClassNotFoundException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not load class for config location [" + configLocation +_								"] - trying package scan. " + ex)__					}_					int count = scanner.scan(configLocation)__					if (logger.isInfoEnabled()) {_						if (count == 0) {_							logger.info("No annotated classes found for specified class/package [" + configLocation + "]")__						}_						else {_							logger.info("Found " + count + " annotated classes in package [" + configLocation + "]")__						}_					}_				}_			}_		}_	};register,a,link,org,springframework,beans,factory,config,bean,definition,for,any,classes,specified,by,link,register,class,and,scan,any,packages,specified,by,link,scan,string,p,for,any,values,specified,by,link,set,config,location,string,or,link,set,config,locations,string,attempt,first,to,load,each,location,as,a,class,registering,a,code,bean,definition,if,class,loading,is,successful,and,if,class,loading,fails,i,e,a,code,class,not,found,exception,is,raised,assume,the,value,is,a,package,and,attempt,to,scan,it,for,annotated,classes,p,enables,the,default,set,of,annotation,configuration,post,processors,such,that,code,autowired,code,required,and,associated,annotations,can,be,used,p,configuration,class,bean,definitions,are,registered,with,generated,bean,definition,names,unless,the,code,value,attribute,is,provided,to,the,stereotype,annotation,see,register,class,see,scan,string,see,set,config,location,string,see,set,config,locations,string,see,annotated,bean,definition,reader,see,class,path,bean,definition,scanner;override,protected,void,load,bean,definitions,default,listable,bean,factory,bean,factory,annotated,bean,definition,reader,reader,new,annotated,bean,definition,reader,bean,factory,reader,set,environment,get,environment,class,path,bean,definition,scanner,scanner,new,class,path,bean,definition,scanner,bean,factory,scanner,set,environment,get,environment,bean,name,generator,bean,name,generator,get,bean,name,generator,scope,metadata,resolver,scope,metadata,resolver,get,scope,metadata,resolver,if,bean,name,generator,null,reader,set,bean,name,generator,bean,name,generator,scanner,set,bean,name,generator,bean,name,generator,bean,factory,register,singleton,annotation,config,utils,bean,name,generator,if,scope,metadata,resolver,null,reader,set,scope,metadata,resolver,scope,metadata,resolver,scanner,set,scope,metadata,resolver,scope,metadata,resolver,if,this,annotated,classes,is,empty,if,logger,is,info,enabled,logger,info,registering,annotated,classes,string,utils,collection,to,comma,delimited,string,this,annotated,classes,reader,register,this,annotated,classes,to,array,new,class,this,annotated,classes,size,if,this,base,packages,is,empty,if,logger,is,info,enabled,logger,info,scanning,base,packages,string,utils,collection,to,comma,delimited,string,this,base,packages,scanner,scan,this,base,packages,to,array,new,string,this,base,packages,size,string,config,locations,get,config,locations,if,config,locations,null,for,string,config,location,config,locations,try,class,clazz,get,class,loader,load,class,config,location,if,logger,is,info,enabled,logger,info,successfully,resolved,class,for,config,location,reader,register,clazz,catch,class,not,found,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,class,for,config,location,config,location,trying,package,scan,ex,int,count,scanner,scan,config,location,if,logger,is,info,enabled,if,count,0,logger,info,no,annotated,classes,found,for,specified,class,package,config,location,else,logger,info,found,count,annotated,classes,in,package,config,location
AnnotationConfigWebApplicationContext -> @Override 	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);1403775783;Register a {@link org.springframework.beans.factory.config.BeanDefinition} for_any classes specified by {@link #register(Class...)} and scan any packages_specified by {@link #scan(String...)}._<p>For any values specified by {@link #setConfigLocation(String)} or_{@link #setConfigLocations(String[])}, attempt first to load each location as a_class, registering a {@code BeanDefinition} if class loading is successful,_and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),_assume the value is a package and attempt to scan it for annotated classes._<p>Enables the default set of annotation configuration post processors, such that_{@code @Autowired}, {@code @Required}, and associated annotations can be used._<p>Configuration class bean definitions are registered with generated bean_definition names unless the {@code value} attribute is provided to the stereotype_annotation._@see #register(Class...)_@see #scan(String...)_@see #setConfigLocation(String)_@see #setConfigLocations(String[])_@see AnnotatedBeanDefinitionReader_@see ClassPathBeanDefinitionScanner;@Override_	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {_		AnnotatedBeanDefinitionReader reader = new AnnotatedBeanDefinitionReader(beanFactory)__		reader.setEnvironment(getEnvironment())___		ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(beanFactory)__		scanner.setEnvironment(getEnvironment())___		BeanNameGenerator beanNameGenerator = getBeanNameGenerator()__		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver()__		if (beanNameGenerator != null) {_			reader.setBeanNameGenerator(beanNameGenerator)__			scanner.setBeanNameGenerator(beanNameGenerator)__			beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator)__		}_		if (scopeMetadataResolver != null) {_			reader.setScopeMetadataResolver(scopeMetadataResolver)__			scanner.setScopeMetadataResolver(scopeMetadataResolver)__		}__		if (!this.annotatedClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Registering annotated classes: [" +_						StringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + "]")__			}_			reader.register(this.annotatedClasses.toArray(new Class<?>[this.annotatedClasses.size()]))__		}__		if (!this.basePackages.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Scanning base packages: [" +_						StringUtils.collectionToCommaDelimitedString(this.basePackages) + "]")__			}_			scanner.scan(this.basePackages.toArray(new String[this.basePackages.size()]))__		}__		String[] configLocations = getConfigLocations()__		if (configLocations != null) {_			for (String configLocation : configLocations) {_				try {_					Class<?> clazz = getClassLoader().loadClass(configLocation)__					if (logger.isInfoEnabled()) {_						logger.info("Successfully resolved class for [" + configLocation + "]")__					}_					reader.register(clazz)__				}_				catch (ClassNotFoundException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not load class for config location [" + configLocation +_								"] - trying package scan. " + ex)__					}_					int count = scanner.scan(configLocation)__					if (logger.isInfoEnabled()) {_						if (count == 0) {_							logger.info("No annotated classes found for specified class/package [" + configLocation + "]")__						}_						else {_							logger.info("Found " + count + " annotated classes in package [" + configLocation + "]")__						}_					}_				}_			}_		}_	};register,a,link,org,springframework,beans,factory,config,bean,definition,for,any,classes,specified,by,link,register,class,and,scan,any,packages,specified,by,link,scan,string,p,for,any,values,specified,by,link,set,config,location,string,or,link,set,config,locations,string,attempt,first,to,load,each,location,as,a,class,registering,a,code,bean,definition,if,class,loading,is,successful,and,if,class,loading,fails,i,e,a,code,class,not,found,exception,is,raised,assume,the,value,is,a,package,and,attempt,to,scan,it,for,annotated,classes,p,enables,the,default,set,of,annotation,configuration,post,processors,such,that,code,autowired,code,required,and,associated,annotations,can,be,used,p,configuration,class,bean,definitions,are,registered,with,generated,bean,definition,names,unless,the,code,value,attribute,is,provided,to,the,stereotype,annotation,see,register,class,see,scan,string,see,set,config,location,string,see,set,config,locations,string,see,annotated,bean,definition,reader,see,class,path,bean,definition,scanner;override,protected,void,load,bean,definitions,default,listable,bean,factory,bean,factory,annotated,bean,definition,reader,reader,new,annotated,bean,definition,reader,bean,factory,reader,set,environment,get,environment,class,path,bean,definition,scanner,scanner,new,class,path,bean,definition,scanner,bean,factory,scanner,set,environment,get,environment,bean,name,generator,bean,name,generator,get,bean,name,generator,scope,metadata,resolver,scope,metadata,resolver,get,scope,metadata,resolver,if,bean,name,generator,null,reader,set,bean,name,generator,bean,name,generator,scanner,set,bean,name,generator,bean,name,generator,bean,factory,register,singleton,annotation,config,utils,bean,name,generator,if,scope,metadata,resolver,null,reader,set,scope,metadata,resolver,scope,metadata,resolver,scanner,set,scope,metadata,resolver,scope,metadata,resolver,if,this,annotated,classes,is,empty,if,logger,is,info,enabled,logger,info,registering,annotated,classes,string,utils,collection,to,comma,delimited,string,this,annotated,classes,reader,register,this,annotated,classes,to,array,new,class,this,annotated,classes,size,if,this,base,packages,is,empty,if,logger,is,info,enabled,logger,info,scanning,base,packages,string,utils,collection,to,comma,delimited,string,this,base,packages,scanner,scan,this,base,packages,to,array,new,string,this,base,packages,size,string,config,locations,get,config,locations,if,config,locations,null,for,string,config,location,config,locations,try,class,clazz,get,class,loader,load,class,config,location,if,logger,is,info,enabled,logger,info,successfully,resolved,class,for,config,location,reader,register,clazz,catch,class,not,found,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,class,for,config,location,config,location,trying,package,scan,ex,int,count,scanner,scan,config,location,if,logger,is,info,enabled,if,count,0,logger,info,no,annotated,classes,found,for,specified,class,package,config,location,else,logger,info,found,count,annotated,classes,in,package,config,location
AnnotationConfigWebApplicationContext -> @Override 	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);1449488792;Register a {@link org.springframework.beans.factory.config.BeanDefinition} for_any classes specified by {@link #register(Class...)} and scan any packages_specified by {@link #scan(String...)}._<p>For any values specified by {@link #setConfigLocation(String)} or_{@link #setConfigLocations(String[])}, attempt first to load each location as a_class, registering a {@code BeanDefinition} if class loading is successful,_and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),_assume the value is a package and attempt to scan it for annotated classes._<p>Enables the default set of annotation configuration post processors, such that_{@code @Autowired}, {@code @Required}, and associated annotations can be used._<p>Configuration class bean definitions are registered with generated bean_definition names unless the {@code value} attribute is provided to the stereotype_annotation._@param beanFactory the bean factory to load bean definitions into_@see #register(Class...)_@see #scan(String...)_@see #setConfigLocation(String)_@see #setConfigLocations(String[])_@see AnnotatedBeanDefinitionReader_@see ClassPathBeanDefinitionScanner;@Override_	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {_		AnnotatedBeanDefinitionReader reader = getAnnotatedBeanDefinitionReader(beanFactory)__		ClassPathBeanDefinitionScanner scanner = getClassPathBeanDefinitionScanner(beanFactory)___		BeanNameGenerator beanNameGenerator = getBeanNameGenerator()__		if (beanNameGenerator != null) {_			reader.setBeanNameGenerator(beanNameGenerator)__			scanner.setBeanNameGenerator(beanNameGenerator)__			beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator)__		}__		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver()__		if (scopeMetadataResolver != null) {_			reader.setScopeMetadataResolver(scopeMetadataResolver)__			scanner.setScopeMetadataResolver(scopeMetadataResolver)__		}__		if (!this.annotatedClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Registering annotated classes: [" +_						StringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + "]")__			}_			reader.register(this.annotatedClasses.toArray(new Class<?>[this.annotatedClasses.size()]))__		}__		if (!this.basePackages.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Scanning base packages: [" +_						StringUtils.collectionToCommaDelimitedString(this.basePackages) + "]")__			}_			scanner.scan(this.basePackages.toArray(new String[this.basePackages.size()]))__		}__		String[] configLocations = getConfigLocations()__		if (configLocations != null) {_			for (String configLocation : configLocations) {_				try {_					Class<?> clazz = getClassLoader().loadClass(configLocation)__					if (logger.isInfoEnabled()) {_						logger.info("Successfully resolved class for [" + configLocation + "]")__					}_					reader.register(clazz)__				}_				catch (ClassNotFoundException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not load class for config location [" + configLocation +_								"] - trying package scan. " + ex)__					}_					int count = scanner.scan(configLocation)__					if (logger.isInfoEnabled()) {_						if (count == 0) {_							logger.info("No annotated classes found for specified class/package [" + configLocation + "]")__						}_						else {_							logger.info("Found " + count + " annotated classes in package [" + configLocation + "]")__						}_					}_				}_			}_		}_	};register,a,link,org,springframework,beans,factory,config,bean,definition,for,any,classes,specified,by,link,register,class,and,scan,any,packages,specified,by,link,scan,string,p,for,any,values,specified,by,link,set,config,location,string,or,link,set,config,locations,string,attempt,first,to,load,each,location,as,a,class,registering,a,code,bean,definition,if,class,loading,is,successful,and,if,class,loading,fails,i,e,a,code,class,not,found,exception,is,raised,assume,the,value,is,a,package,and,attempt,to,scan,it,for,annotated,classes,p,enables,the,default,set,of,annotation,configuration,post,processors,such,that,code,autowired,code,required,and,associated,annotations,can,be,used,p,configuration,class,bean,definitions,are,registered,with,generated,bean,definition,names,unless,the,code,value,attribute,is,provided,to,the,stereotype,annotation,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,see,register,class,see,scan,string,see,set,config,location,string,see,set,config,locations,string,see,annotated,bean,definition,reader,see,class,path,bean,definition,scanner;override,protected,void,load,bean,definitions,default,listable,bean,factory,bean,factory,annotated,bean,definition,reader,reader,get,annotated,bean,definition,reader,bean,factory,class,path,bean,definition,scanner,scanner,get,class,path,bean,definition,scanner,bean,factory,bean,name,generator,bean,name,generator,get,bean,name,generator,if,bean,name,generator,null,reader,set,bean,name,generator,bean,name,generator,scanner,set,bean,name,generator,bean,name,generator,bean,factory,register,singleton,annotation,config,utils,bean,name,generator,scope,metadata,resolver,scope,metadata,resolver,get,scope,metadata,resolver,if,scope,metadata,resolver,null,reader,set,scope,metadata,resolver,scope,metadata,resolver,scanner,set,scope,metadata,resolver,scope,metadata,resolver,if,this,annotated,classes,is,empty,if,logger,is,info,enabled,logger,info,registering,annotated,classes,string,utils,collection,to,comma,delimited,string,this,annotated,classes,reader,register,this,annotated,classes,to,array,new,class,this,annotated,classes,size,if,this,base,packages,is,empty,if,logger,is,info,enabled,logger,info,scanning,base,packages,string,utils,collection,to,comma,delimited,string,this,base,packages,scanner,scan,this,base,packages,to,array,new,string,this,base,packages,size,string,config,locations,get,config,locations,if,config,locations,null,for,string,config,location,config,locations,try,class,clazz,get,class,loader,load,class,config,location,if,logger,is,info,enabled,logger,info,successfully,resolved,class,for,config,location,reader,register,clazz,catch,class,not,found,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,class,for,config,location,config,location,trying,package,scan,ex,int,count,scanner,scan,config,location,if,logger,is,info,enabled,if,count,0,logger,info,no,annotated,classes,found,for,specified,class,package,config,location,else,logger,info,found,count,annotated,classes,in,package,config,location
AnnotationConfigWebApplicationContext -> @Override 	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);1467730834;Register a {@link org.springframework.beans.factory.config.BeanDefinition} for_any classes specified by {@link #register(Class...)} and scan any packages_specified by {@link #scan(String...)}._<p>For any values specified by {@link #setConfigLocation(String)} or_{@link #setConfigLocations(String[])}, attempt first to load each location as a_class, registering a {@code BeanDefinition} if class loading is successful,_and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),_assume the value is a package and attempt to scan it for annotated classes._<p>Enables the default set of annotation configuration post processors, such that_{@code @Autowired}, {@code @Required}, and associated annotations can be used._<p>Configuration class bean definitions are registered with generated bean_definition names unless the {@code value} attribute is provided to the stereotype_annotation._@param beanFactory the bean factory to load bean definitions into_@see #register(Class...)_@see #scan(String...)_@see #setConfigLocation(String)_@see #setConfigLocations(String[])_@see AnnotatedBeanDefinitionReader_@see ClassPathBeanDefinitionScanner;@Override_	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {_		AnnotatedBeanDefinitionReader reader = getAnnotatedBeanDefinitionReader(beanFactory)__		ClassPathBeanDefinitionScanner scanner = getClassPathBeanDefinitionScanner(beanFactory)___		BeanNameGenerator beanNameGenerator = getBeanNameGenerator()__		if (beanNameGenerator != null) {_			reader.setBeanNameGenerator(beanNameGenerator)__			scanner.setBeanNameGenerator(beanNameGenerator)__			beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator)__		}__		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver()__		if (scopeMetadataResolver != null) {_			reader.setScopeMetadataResolver(scopeMetadataResolver)__			scanner.setScopeMetadataResolver(scopeMetadataResolver)__		}__		if (!this.annotatedClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Registering annotated classes: [" +_						StringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + "]")__			}_			reader.register(this.annotatedClasses.toArray(new Class<?>[this.annotatedClasses.size()]))__		}__		if (!this.basePackages.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Scanning base packages: [" +_						StringUtils.collectionToCommaDelimitedString(this.basePackages) + "]")__			}_			scanner.scan(this.basePackages.toArray(new String[this.basePackages.size()]))__		}__		String[] configLocations = getConfigLocations()__		if (configLocations != null) {_			for (String configLocation : configLocations) {_				try {_					Class<?> clazz = getClassLoader().loadClass(configLocation)__					if (logger.isInfoEnabled()) {_						logger.info("Successfully resolved class for [" + configLocation + "]")__					}_					reader.register(clazz)__				}_				catch (ClassNotFoundException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not load class for config location [" + configLocation +_								"] - trying package scan. " + ex)__					}_					int count = scanner.scan(configLocation)__					if (logger.isInfoEnabled()) {_						if (count == 0) {_							logger.info("No annotated classes found for specified class/package [" + configLocation + "]")__						}_						else {_							logger.info("Found " + count + " annotated classes in package [" + configLocation + "]")__						}_					}_				}_			}_		}_	};register,a,link,org,springframework,beans,factory,config,bean,definition,for,any,classes,specified,by,link,register,class,and,scan,any,packages,specified,by,link,scan,string,p,for,any,values,specified,by,link,set,config,location,string,or,link,set,config,locations,string,attempt,first,to,load,each,location,as,a,class,registering,a,code,bean,definition,if,class,loading,is,successful,and,if,class,loading,fails,i,e,a,code,class,not,found,exception,is,raised,assume,the,value,is,a,package,and,attempt,to,scan,it,for,annotated,classes,p,enables,the,default,set,of,annotation,configuration,post,processors,such,that,code,autowired,code,required,and,associated,annotations,can,be,used,p,configuration,class,bean,definitions,are,registered,with,generated,bean,definition,names,unless,the,code,value,attribute,is,provided,to,the,stereotype,annotation,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,see,register,class,see,scan,string,see,set,config,location,string,see,set,config,locations,string,see,annotated,bean,definition,reader,see,class,path,bean,definition,scanner;override,protected,void,load,bean,definitions,default,listable,bean,factory,bean,factory,annotated,bean,definition,reader,reader,get,annotated,bean,definition,reader,bean,factory,class,path,bean,definition,scanner,scanner,get,class,path,bean,definition,scanner,bean,factory,bean,name,generator,bean,name,generator,get,bean,name,generator,if,bean,name,generator,null,reader,set,bean,name,generator,bean,name,generator,scanner,set,bean,name,generator,bean,name,generator,bean,factory,register,singleton,annotation,config,utils,bean,name,generator,scope,metadata,resolver,scope,metadata,resolver,get,scope,metadata,resolver,if,scope,metadata,resolver,null,reader,set,scope,metadata,resolver,scope,metadata,resolver,scanner,set,scope,metadata,resolver,scope,metadata,resolver,if,this,annotated,classes,is,empty,if,logger,is,info,enabled,logger,info,registering,annotated,classes,string,utils,collection,to,comma,delimited,string,this,annotated,classes,reader,register,this,annotated,classes,to,array,new,class,this,annotated,classes,size,if,this,base,packages,is,empty,if,logger,is,info,enabled,logger,info,scanning,base,packages,string,utils,collection,to,comma,delimited,string,this,base,packages,scanner,scan,this,base,packages,to,array,new,string,this,base,packages,size,string,config,locations,get,config,locations,if,config,locations,null,for,string,config,location,config,locations,try,class,clazz,get,class,loader,load,class,config,location,if,logger,is,info,enabled,logger,info,successfully,resolved,class,for,config,location,reader,register,clazz,catch,class,not,found,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,class,for,config,location,config,location,trying,package,scan,ex,int,count,scanner,scan,config,location,if,logger,is,info,enabled,if,count,0,logger,info,no,annotated,classes,found,for,specified,class,package,config,location,else,logger,info,found,count,annotated,classes,in,package,config,location
AnnotationConfigWebApplicationContext -> @Override 	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);1495868221;Register a {@link org.springframework.beans.factory.config.BeanDefinition} for_any classes specified by {@link #register(Class...)} and scan any packages_specified by {@link #scan(String...)}._<p>For any values specified by {@link #setConfigLocation(String)} or_{@link #setConfigLocations(String[])}, attempt first to load each location as a_class, registering a {@code BeanDefinition} if class loading is successful,_and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),_assume the value is a package and attempt to scan it for annotated classes._<p>Enables the default set of annotation configuration post processors, such that_{@code @Autowired}, {@code @Required}, and associated annotations can be used._<p>Configuration class bean definitions are registered with generated bean_definition names unless the {@code value} attribute is provided to the stereotype_annotation._@param beanFactory the bean factory to load bean definitions into_@see #register(Class...)_@see #scan(String...)_@see #setConfigLocation(String)_@see #setConfigLocations(String[])_@see AnnotatedBeanDefinitionReader_@see ClassPathBeanDefinitionScanner;@Override_	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {_		AnnotatedBeanDefinitionReader reader = getAnnotatedBeanDefinitionReader(beanFactory)__		ClassPathBeanDefinitionScanner scanner = getClassPathBeanDefinitionScanner(beanFactory)___		BeanNameGenerator beanNameGenerator = getBeanNameGenerator()__		if (beanNameGenerator != null) {_			reader.setBeanNameGenerator(beanNameGenerator)__			scanner.setBeanNameGenerator(beanNameGenerator)__			beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator)__		}__		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver()__		if (scopeMetadataResolver != null) {_			reader.setScopeMetadataResolver(scopeMetadataResolver)__			scanner.setScopeMetadataResolver(scopeMetadataResolver)__		}__		if (!this.annotatedClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Registering annotated classes: [" +_						StringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + "]")__			}_			reader.register(this.annotatedClasses.toArray(new Class<?>[this.annotatedClasses.size()]))__		}__		if (!this.basePackages.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Scanning base packages: [" +_						StringUtils.collectionToCommaDelimitedString(this.basePackages) + "]")__			}_			scanner.scan(this.basePackages.toArray(new String[this.basePackages.size()]))__		}__		String[] configLocations = getConfigLocations()__		if (configLocations != null) {_			for (String configLocation : configLocations) {_				try {_					Class<?> clazz = getClassLoader().loadClass(configLocation)__					if (logger.isInfoEnabled()) {_						logger.info("Successfully resolved class for [" + configLocation + "]")__					}_					reader.register(clazz)__				}_				catch (ClassNotFoundException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not load class for config location [" + configLocation +_								"] - trying package scan. " + ex)__					}_					int count = scanner.scan(configLocation)__					if (logger.isInfoEnabled()) {_						if (count == 0) {_							logger.info("No annotated classes found for specified class/package [" + configLocation + "]")__						}_						else {_							logger.info("Found " + count + " annotated classes in package [" + configLocation + "]")__						}_					}_				}_			}_		}_	};register,a,link,org,springframework,beans,factory,config,bean,definition,for,any,classes,specified,by,link,register,class,and,scan,any,packages,specified,by,link,scan,string,p,for,any,values,specified,by,link,set,config,location,string,or,link,set,config,locations,string,attempt,first,to,load,each,location,as,a,class,registering,a,code,bean,definition,if,class,loading,is,successful,and,if,class,loading,fails,i,e,a,code,class,not,found,exception,is,raised,assume,the,value,is,a,package,and,attempt,to,scan,it,for,annotated,classes,p,enables,the,default,set,of,annotation,configuration,post,processors,such,that,code,autowired,code,required,and,associated,annotations,can,be,used,p,configuration,class,bean,definitions,are,registered,with,generated,bean,definition,names,unless,the,code,value,attribute,is,provided,to,the,stereotype,annotation,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,see,register,class,see,scan,string,see,set,config,location,string,see,set,config,locations,string,see,annotated,bean,definition,reader,see,class,path,bean,definition,scanner;override,protected,void,load,bean,definitions,default,listable,bean,factory,bean,factory,annotated,bean,definition,reader,reader,get,annotated,bean,definition,reader,bean,factory,class,path,bean,definition,scanner,scanner,get,class,path,bean,definition,scanner,bean,factory,bean,name,generator,bean,name,generator,get,bean,name,generator,if,bean,name,generator,null,reader,set,bean,name,generator,bean,name,generator,scanner,set,bean,name,generator,bean,name,generator,bean,factory,register,singleton,annotation,config,utils,bean,name,generator,scope,metadata,resolver,scope,metadata,resolver,get,scope,metadata,resolver,if,scope,metadata,resolver,null,reader,set,scope,metadata,resolver,scope,metadata,resolver,scanner,set,scope,metadata,resolver,scope,metadata,resolver,if,this,annotated,classes,is,empty,if,logger,is,info,enabled,logger,info,registering,annotated,classes,string,utils,collection,to,comma,delimited,string,this,annotated,classes,reader,register,this,annotated,classes,to,array,new,class,this,annotated,classes,size,if,this,base,packages,is,empty,if,logger,is,info,enabled,logger,info,scanning,base,packages,string,utils,collection,to,comma,delimited,string,this,base,packages,scanner,scan,this,base,packages,to,array,new,string,this,base,packages,size,string,config,locations,get,config,locations,if,config,locations,null,for,string,config,location,config,locations,try,class,clazz,get,class,loader,load,class,config,location,if,logger,is,info,enabled,logger,info,successfully,resolved,class,for,config,location,reader,register,clazz,catch,class,not,found,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,class,for,config,location,config,location,trying,package,scan,ex,int,count,scanner,scan,config,location,if,logger,is,info,enabled,if,count,0,logger,info,no,annotated,classes,found,for,specified,class,package,config,location,else,logger,info,found,count,annotated,classes,in,package,config,location
AnnotationConfigWebApplicationContext -> @Override 	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);1496837955;Register a {@link org.springframework.beans.factory.config.BeanDefinition} for_any classes specified by {@link #register(Class...)} and scan any packages_specified by {@link #scan(String...)}._<p>For any values specified by {@link #setConfigLocation(String)} or_{@link #setConfigLocations(String[])}, attempt first to load each location as a_class, registering a {@code BeanDefinition} if class loading is successful,_and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),_assume the value is a package and attempt to scan it for annotated classes._<p>Enables the default set of annotation configuration post processors, such that_{@code @Autowired}, {@code @Required}, and associated annotations can be used._<p>Configuration class bean definitions are registered with generated bean_definition names unless the {@code value} attribute is provided to the stereotype_annotation._@param beanFactory the bean factory to load bean definitions into_@see #register(Class...)_@see #scan(String...)_@see #setConfigLocation(String)_@see #setConfigLocations(String[])_@see AnnotatedBeanDefinitionReader_@see ClassPathBeanDefinitionScanner;@Override_	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {_		AnnotatedBeanDefinitionReader reader = getAnnotatedBeanDefinitionReader(beanFactory)__		ClassPathBeanDefinitionScanner scanner = getClassPathBeanDefinitionScanner(beanFactory)___		BeanNameGenerator beanNameGenerator = getBeanNameGenerator()__		if (beanNameGenerator != null) {_			reader.setBeanNameGenerator(beanNameGenerator)__			scanner.setBeanNameGenerator(beanNameGenerator)__			beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator)__		}__		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver()__		if (scopeMetadataResolver != null) {_			reader.setScopeMetadataResolver(scopeMetadataResolver)__			scanner.setScopeMetadataResolver(scopeMetadataResolver)__		}__		if (!this.annotatedClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Registering annotated classes: [" +_						StringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + "]")__			}_			reader.register(this.annotatedClasses.toArray(new Class<?>[this.annotatedClasses.size()]))__		}__		if (!this.basePackages.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Scanning base packages: [" +_						StringUtils.collectionToCommaDelimitedString(this.basePackages) + "]")__			}_			scanner.scan(this.basePackages.toArray(new String[this.basePackages.size()]))__		}__		String[] configLocations = getConfigLocations()__		if (configLocations != null) {_			for (String configLocation : configLocations) {_				try {_					Class<?> clazz = ClassUtils.forName(configLocation, getClassLoader())__					if (logger.isInfoEnabled()) {_						logger.info("Successfully resolved class for [" + configLocation + "]")__					}_					reader.register(clazz)__				}_				catch (ClassNotFoundException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not load class for config location [" + configLocation +_								"] - trying package scan. " + ex)__					}_					int count = scanner.scan(configLocation)__					if (logger.isInfoEnabled()) {_						if (count == 0) {_							logger.info("No annotated classes found for specified class/package [" + configLocation + "]")__						}_						else {_							logger.info("Found " + count + " annotated classes in package [" + configLocation + "]")__						}_					}_				}_			}_		}_	};register,a,link,org,springframework,beans,factory,config,bean,definition,for,any,classes,specified,by,link,register,class,and,scan,any,packages,specified,by,link,scan,string,p,for,any,values,specified,by,link,set,config,location,string,or,link,set,config,locations,string,attempt,first,to,load,each,location,as,a,class,registering,a,code,bean,definition,if,class,loading,is,successful,and,if,class,loading,fails,i,e,a,code,class,not,found,exception,is,raised,assume,the,value,is,a,package,and,attempt,to,scan,it,for,annotated,classes,p,enables,the,default,set,of,annotation,configuration,post,processors,such,that,code,autowired,code,required,and,associated,annotations,can,be,used,p,configuration,class,bean,definitions,are,registered,with,generated,bean,definition,names,unless,the,code,value,attribute,is,provided,to,the,stereotype,annotation,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,see,register,class,see,scan,string,see,set,config,location,string,see,set,config,locations,string,see,annotated,bean,definition,reader,see,class,path,bean,definition,scanner;override,protected,void,load,bean,definitions,default,listable,bean,factory,bean,factory,annotated,bean,definition,reader,reader,get,annotated,bean,definition,reader,bean,factory,class,path,bean,definition,scanner,scanner,get,class,path,bean,definition,scanner,bean,factory,bean,name,generator,bean,name,generator,get,bean,name,generator,if,bean,name,generator,null,reader,set,bean,name,generator,bean,name,generator,scanner,set,bean,name,generator,bean,name,generator,bean,factory,register,singleton,annotation,config,utils,bean,name,generator,scope,metadata,resolver,scope,metadata,resolver,get,scope,metadata,resolver,if,scope,metadata,resolver,null,reader,set,scope,metadata,resolver,scope,metadata,resolver,scanner,set,scope,metadata,resolver,scope,metadata,resolver,if,this,annotated,classes,is,empty,if,logger,is,info,enabled,logger,info,registering,annotated,classes,string,utils,collection,to,comma,delimited,string,this,annotated,classes,reader,register,this,annotated,classes,to,array,new,class,this,annotated,classes,size,if,this,base,packages,is,empty,if,logger,is,info,enabled,logger,info,scanning,base,packages,string,utils,collection,to,comma,delimited,string,this,base,packages,scanner,scan,this,base,packages,to,array,new,string,this,base,packages,size,string,config,locations,get,config,locations,if,config,locations,null,for,string,config,location,config,locations,try,class,clazz,class,utils,for,name,config,location,get,class,loader,if,logger,is,info,enabled,logger,info,successfully,resolved,class,for,config,location,reader,register,clazz,catch,class,not,found,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,class,for,config,location,config,location,trying,package,scan,ex,int,count,scanner,scan,config,location,if,logger,is,info,enabled,if,count,0,logger,info,no,annotated,classes,found,for,specified,class,package,config,location,else,logger,info,found,count,annotated,classes,in,package,config,location
AnnotationConfigWebApplicationContext -> @Override 	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);1500448076;Register a {@link org.springframework.beans.factory.config.BeanDefinition} for_any classes specified by {@link #register(Class...)} and scan any packages_specified by {@link #scan(String...)}._<p>For any values specified by {@link #setConfigLocation(String)} or_{@link #setConfigLocations(String[])}, attempt first to load each location as a_class, registering a {@code BeanDefinition} if class loading is successful,_and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),_assume the value is a package and attempt to scan it for annotated classes._<p>Enables the default set of annotation configuration post processors, such that_{@code @Autowired}, {@code @Required}, and associated annotations can be used._<p>Configuration class bean definitions are registered with generated bean_definition names unless the {@code value} attribute is provided to the stereotype_annotation._@param beanFactory the bean factory to load bean definitions into_@see #register(Class...)_@see #scan(String...)_@see #setConfigLocation(String)_@see #setConfigLocations(String[])_@see AnnotatedBeanDefinitionReader_@see ClassPathBeanDefinitionScanner;@Override_	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {_		AnnotatedBeanDefinitionReader reader = getAnnotatedBeanDefinitionReader(beanFactory)__		ClassPathBeanDefinitionScanner scanner = getClassPathBeanDefinitionScanner(beanFactory)___		BeanNameGenerator beanNameGenerator = getBeanNameGenerator()__		if (beanNameGenerator != null) {_			reader.setBeanNameGenerator(beanNameGenerator)__			scanner.setBeanNameGenerator(beanNameGenerator)__			beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator)__		}__		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver()__		if (scopeMetadataResolver != null) {_			reader.setScopeMetadataResolver(scopeMetadataResolver)__			scanner.setScopeMetadataResolver(scopeMetadataResolver)__		}__		if (!this.annotatedClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Registering annotated classes: [" +_						StringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + "]")__			}_			reader.register(this.annotatedClasses.toArray(new Class<?>[this.annotatedClasses.size()]))__		}__		if (!this.basePackages.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Scanning base packages: [" +_						StringUtils.collectionToCommaDelimitedString(this.basePackages) + "]")__			}_			scanner.scan(this.basePackages.toArray(new String[this.basePackages.size()]))__		}__		String[] configLocations = getConfigLocations()__		if (configLocations != null) {_			for (String configLocation : configLocations) {_				try {_					Class<?> clazz = ClassUtils.forName(configLocation, getClassLoader())__					if (logger.isInfoEnabled()) {_						logger.info("Successfully resolved class for [" + configLocation + "]")__					}_					reader.register(clazz)__				}_				catch (ClassNotFoundException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not load class for config location [" + configLocation +_								"] - trying package scan. " + ex)__					}_					int count = scanner.scan(configLocation)__					if (logger.isInfoEnabled()) {_						if (count == 0) {_							logger.info("No annotated classes found for specified class/package [" + configLocation + "]")__						}_						else {_							logger.info("Found " + count + " annotated classes in package [" + configLocation + "]")__						}_					}_				}_			}_		}_	};register,a,link,org,springframework,beans,factory,config,bean,definition,for,any,classes,specified,by,link,register,class,and,scan,any,packages,specified,by,link,scan,string,p,for,any,values,specified,by,link,set,config,location,string,or,link,set,config,locations,string,attempt,first,to,load,each,location,as,a,class,registering,a,code,bean,definition,if,class,loading,is,successful,and,if,class,loading,fails,i,e,a,code,class,not,found,exception,is,raised,assume,the,value,is,a,package,and,attempt,to,scan,it,for,annotated,classes,p,enables,the,default,set,of,annotation,configuration,post,processors,such,that,code,autowired,code,required,and,associated,annotations,can,be,used,p,configuration,class,bean,definitions,are,registered,with,generated,bean,definition,names,unless,the,code,value,attribute,is,provided,to,the,stereotype,annotation,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,see,register,class,see,scan,string,see,set,config,location,string,see,set,config,locations,string,see,annotated,bean,definition,reader,see,class,path,bean,definition,scanner;override,protected,void,load,bean,definitions,default,listable,bean,factory,bean,factory,annotated,bean,definition,reader,reader,get,annotated,bean,definition,reader,bean,factory,class,path,bean,definition,scanner,scanner,get,class,path,bean,definition,scanner,bean,factory,bean,name,generator,bean,name,generator,get,bean,name,generator,if,bean,name,generator,null,reader,set,bean,name,generator,bean,name,generator,scanner,set,bean,name,generator,bean,name,generator,bean,factory,register,singleton,annotation,config,utils,bean,name,generator,scope,metadata,resolver,scope,metadata,resolver,get,scope,metadata,resolver,if,scope,metadata,resolver,null,reader,set,scope,metadata,resolver,scope,metadata,resolver,scanner,set,scope,metadata,resolver,scope,metadata,resolver,if,this,annotated,classes,is,empty,if,logger,is,info,enabled,logger,info,registering,annotated,classes,string,utils,collection,to,comma,delimited,string,this,annotated,classes,reader,register,this,annotated,classes,to,array,new,class,this,annotated,classes,size,if,this,base,packages,is,empty,if,logger,is,info,enabled,logger,info,scanning,base,packages,string,utils,collection,to,comma,delimited,string,this,base,packages,scanner,scan,this,base,packages,to,array,new,string,this,base,packages,size,string,config,locations,get,config,locations,if,config,locations,null,for,string,config,location,config,locations,try,class,clazz,class,utils,for,name,config,location,get,class,loader,if,logger,is,info,enabled,logger,info,successfully,resolved,class,for,config,location,reader,register,clazz,catch,class,not,found,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,class,for,config,location,config,location,trying,package,scan,ex,int,count,scanner,scan,config,location,if,logger,is,info,enabled,if,count,0,logger,info,no,annotated,classes,found,for,specified,class,package,config,location,else,logger,info,found,count,annotated,classes,in,package,config,location
AnnotationConfigWebApplicationContext -> @Override 	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);1518810557;Register a {@link org.springframework.beans.factory.config.BeanDefinition} for_any classes specified by {@link #register(Class...)} and scan any packages_specified by {@link #scan(String...)}._<p>For any values specified by {@link #setConfigLocation(String)} or_{@link #setConfigLocations(String[])}, attempt first to load each location as a_class, registering a {@code BeanDefinition} if class loading is successful,_and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),_assume the value is a package and attempt to scan it for annotated classes._<p>Enables the default set of annotation configuration post processors, such that_{@code @Autowired}, {@code @Required}, and associated annotations can be used._<p>Configuration class bean definitions are registered with generated bean_definition names unless the {@code value} attribute is provided to the stereotype_annotation._@param beanFactory the bean factory to load bean definitions into_@see #register(Class...)_@see #scan(String...)_@see #setConfigLocation(String)_@see #setConfigLocations(String[])_@see AnnotatedBeanDefinitionReader_@see ClassPathBeanDefinitionScanner;@Override_	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {_		AnnotatedBeanDefinitionReader reader = getAnnotatedBeanDefinitionReader(beanFactory)__		ClassPathBeanDefinitionScanner scanner = getClassPathBeanDefinitionScanner(beanFactory)___		BeanNameGenerator beanNameGenerator = getBeanNameGenerator()__		if (beanNameGenerator != null) {_			reader.setBeanNameGenerator(beanNameGenerator)__			scanner.setBeanNameGenerator(beanNameGenerator)__			beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator)__		}__		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver()__		if (scopeMetadataResolver != null) {_			reader.setScopeMetadataResolver(scopeMetadataResolver)__			scanner.setScopeMetadataResolver(scopeMetadataResolver)__		}__		if (!this.annotatedClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Registering annotated classes: [" +_						StringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + "]")__			}_			reader.register(this.annotatedClasses.toArray(new Class<?>[this.annotatedClasses.size()]))__		}__		if (!this.basePackages.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Scanning base packages: [" +_						StringUtils.collectionToCommaDelimitedString(this.basePackages) + "]")__			}_			scanner.scan(StringUtils.toStringArray(this.basePackages))__		}__		String[] configLocations = getConfigLocations()__		if (configLocations != null) {_			for (String configLocation : configLocations) {_				try {_					Class<?> clazz = ClassUtils.forName(configLocation, getClassLoader())__					if (logger.isInfoEnabled()) {_						logger.info("Successfully resolved class for [" + configLocation + "]")__					}_					reader.register(clazz)__				}_				catch (ClassNotFoundException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not load class for config location [" + configLocation +_								"] - trying package scan. " + ex)__					}_					int count = scanner.scan(configLocation)__					if (logger.isInfoEnabled()) {_						if (count == 0) {_							logger.info("No annotated classes found for specified class/package [" + configLocation + "]")__						}_						else {_							logger.info("Found " + count + " annotated classes in package [" + configLocation + "]")__						}_					}_				}_			}_		}_	};register,a,link,org,springframework,beans,factory,config,bean,definition,for,any,classes,specified,by,link,register,class,and,scan,any,packages,specified,by,link,scan,string,p,for,any,values,specified,by,link,set,config,location,string,or,link,set,config,locations,string,attempt,first,to,load,each,location,as,a,class,registering,a,code,bean,definition,if,class,loading,is,successful,and,if,class,loading,fails,i,e,a,code,class,not,found,exception,is,raised,assume,the,value,is,a,package,and,attempt,to,scan,it,for,annotated,classes,p,enables,the,default,set,of,annotation,configuration,post,processors,such,that,code,autowired,code,required,and,associated,annotations,can,be,used,p,configuration,class,bean,definitions,are,registered,with,generated,bean,definition,names,unless,the,code,value,attribute,is,provided,to,the,stereotype,annotation,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,see,register,class,see,scan,string,see,set,config,location,string,see,set,config,locations,string,see,annotated,bean,definition,reader,see,class,path,bean,definition,scanner;override,protected,void,load,bean,definitions,default,listable,bean,factory,bean,factory,annotated,bean,definition,reader,reader,get,annotated,bean,definition,reader,bean,factory,class,path,bean,definition,scanner,scanner,get,class,path,bean,definition,scanner,bean,factory,bean,name,generator,bean,name,generator,get,bean,name,generator,if,bean,name,generator,null,reader,set,bean,name,generator,bean,name,generator,scanner,set,bean,name,generator,bean,name,generator,bean,factory,register,singleton,annotation,config,utils,bean,name,generator,scope,metadata,resolver,scope,metadata,resolver,get,scope,metadata,resolver,if,scope,metadata,resolver,null,reader,set,scope,metadata,resolver,scope,metadata,resolver,scanner,set,scope,metadata,resolver,scope,metadata,resolver,if,this,annotated,classes,is,empty,if,logger,is,info,enabled,logger,info,registering,annotated,classes,string,utils,collection,to,comma,delimited,string,this,annotated,classes,reader,register,this,annotated,classes,to,array,new,class,this,annotated,classes,size,if,this,base,packages,is,empty,if,logger,is,info,enabled,logger,info,scanning,base,packages,string,utils,collection,to,comma,delimited,string,this,base,packages,scanner,scan,string,utils,to,string,array,this,base,packages,string,config,locations,get,config,locations,if,config,locations,null,for,string,config,location,config,locations,try,class,clazz,class,utils,for,name,config,location,get,class,loader,if,logger,is,info,enabled,logger,info,successfully,resolved,class,for,config,location,reader,register,clazz,catch,class,not,found,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,class,for,config,location,config,location,trying,package,scan,ex,int,count,scanner,scan,config,location,if,logger,is,info,enabled,if,count,0,logger,info,no,annotated,classes,found,for,specified,class,package,config,location,else,logger,info,found,count,annotated,classes,in,package,config,location
AnnotationConfigWebApplicationContext -> @Override 	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);1519295386;Register a {@link org.springframework.beans.factory.config.BeanDefinition} for_any classes specified by {@link #register(Class...)} and scan any packages_specified by {@link #scan(String...)}._<p>For any values specified by {@link #setConfigLocation(String)} or_{@link #setConfigLocations(String[])}, attempt first to load each location as a_class, registering a {@code BeanDefinition} if class loading is successful,_and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),_assume the value is a package and attempt to scan it for annotated classes._<p>Enables the default set of annotation configuration post processors, such that_{@code @Autowired}, {@code @Required}, and associated annotations can be used._<p>Configuration class bean definitions are registered with generated bean_definition names unless the {@code value} attribute is provided to the stereotype_annotation._@param beanFactory the bean factory to load bean definitions into_@see #register(Class...)_@see #scan(String...)_@see #setConfigLocation(String)_@see #setConfigLocations(String[])_@see AnnotatedBeanDefinitionReader_@see ClassPathBeanDefinitionScanner;@Override_	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {_		AnnotatedBeanDefinitionReader reader = getAnnotatedBeanDefinitionReader(beanFactory)__		ClassPathBeanDefinitionScanner scanner = getClassPathBeanDefinitionScanner(beanFactory)___		BeanNameGenerator beanNameGenerator = getBeanNameGenerator()__		if (beanNameGenerator != null) {_			reader.setBeanNameGenerator(beanNameGenerator)__			scanner.setBeanNameGenerator(beanNameGenerator)__			beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator)__		}__		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver()__		if (scopeMetadataResolver != null) {_			reader.setScopeMetadataResolver(scopeMetadataResolver)__			scanner.setScopeMetadataResolver(scopeMetadataResolver)__		}__		if (!this.annotatedClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Registering annotated classes: [" +_						StringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + "]")__			}_			reader.register(ClassUtils.toClassArray(this.annotatedClasses))__		}__		if (!this.basePackages.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Scanning base packages: [" +_						StringUtils.collectionToCommaDelimitedString(this.basePackages) + "]")__			}_			scanner.scan(StringUtils.toStringArray(this.basePackages))__		}__		String[] configLocations = getConfigLocations()__		if (configLocations != null) {_			for (String configLocation : configLocations) {_				try {_					Class<?> clazz = ClassUtils.forName(configLocation, getClassLoader())__					if (logger.isInfoEnabled()) {_						logger.info("Successfully resolved class for [" + configLocation + "]")__					}_					reader.register(clazz)__				}_				catch (ClassNotFoundException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not load class for config location [" + configLocation +_								"] - trying package scan. " + ex)__					}_					int count = scanner.scan(configLocation)__					if (logger.isInfoEnabled()) {_						if (count == 0) {_							logger.info("No annotated classes found for specified class/package [" + configLocation + "]")__						}_						else {_							logger.info("Found " + count + " annotated classes in package [" + configLocation + "]")__						}_					}_				}_			}_		}_	};register,a,link,org,springframework,beans,factory,config,bean,definition,for,any,classes,specified,by,link,register,class,and,scan,any,packages,specified,by,link,scan,string,p,for,any,values,specified,by,link,set,config,location,string,or,link,set,config,locations,string,attempt,first,to,load,each,location,as,a,class,registering,a,code,bean,definition,if,class,loading,is,successful,and,if,class,loading,fails,i,e,a,code,class,not,found,exception,is,raised,assume,the,value,is,a,package,and,attempt,to,scan,it,for,annotated,classes,p,enables,the,default,set,of,annotation,configuration,post,processors,such,that,code,autowired,code,required,and,associated,annotations,can,be,used,p,configuration,class,bean,definitions,are,registered,with,generated,bean,definition,names,unless,the,code,value,attribute,is,provided,to,the,stereotype,annotation,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,see,register,class,see,scan,string,see,set,config,location,string,see,set,config,locations,string,see,annotated,bean,definition,reader,see,class,path,bean,definition,scanner;override,protected,void,load,bean,definitions,default,listable,bean,factory,bean,factory,annotated,bean,definition,reader,reader,get,annotated,bean,definition,reader,bean,factory,class,path,bean,definition,scanner,scanner,get,class,path,bean,definition,scanner,bean,factory,bean,name,generator,bean,name,generator,get,bean,name,generator,if,bean,name,generator,null,reader,set,bean,name,generator,bean,name,generator,scanner,set,bean,name,generator,bean,name,generator,bean,factory,register,singleton,annotation,config,utils,bean,name,generator,scope,metadata,resolver,scope,metadata,resolver,get,scope,metadata,resolver,if,scope,metadata,resolver,null,reader,set,scope,metadata,resolver,scope,metadata,resolver,scanner,set,scope,metadata,resolver,scope,metadata,resolver,if,this,annotated,classes,is,empty,if,logger,is,info,enabled,logger,info,registering,annotated,classes,string,utils,collection,to,comma,delimited,string,this,annotated,classes,reader,register,class,utils,to,class,array,this,annotated,classes,if,this,base,packages,is,empty,if,logger,is,info,enabled,logger,info,scanning,base,packages,string,utils,collection,to,comma,delimited,string,this,base,packages,scanner,scan,string,utils,to,string,array,this,base,packages,string,config,locations,get,config,locations,if,config,locations,null,for,string,config,location,config,locations,try,class,clazz,class,utils,for,name,config,location,get,class,loader,if,logger,is,info,enabled,logger,info,successfully,resolved,class,for,config,location,reader,register,clazz,catch,class,not,found,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,class,for,config,location,config,location,trying,package,scan,ex,int,count,scanner,scan,config,location,if,logger,is,info,enabled,if,count,0,logger,info,no,annotated,classes,found,for,specified,class,package,config,location,else,logger,info,found,count,annotated,classes,in,package,config,location
AnnotationConfigWebApplicationContext -> @Override 	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);1519514499;Register a {@link org.springframework.beans.factory.config.BeanDefinition} for_any classes specified by {@link #register(Class...)} and scan any packages_specified by {@link #scan(String...)}._<p>For any values specified by {@link #setConfigLocation(String)} or_{@link #setConfigLocations(String[])}, attempt first to load each location as a_class, registering a {@code BeanDefinition} if class loading is successful,_and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),_assume the value is a package and attempt to scan it for annotated classes._<p>Enables the default set of annotation configuration post processors, such that_{@code @Autowired}, {@code @Required}, and associated annotations can be used._<p>Configuration class bean definitions are registered with generated bean_definition names unless the {@code value} attribute is provided to the stereotype_annotation._@param beanFactory the bean factory to load bean definitions into_@see #register(Class...)_@see #scan(String...)_@see #setConfigLocation(String)_@see #setConfigLocations(String[])_@see AnnotatedBeanDefinitionReader_@see ClassPathBeanDefinitionScanner;@Override_	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {_		AnnotatedBeanDefinitionReader reader = getAnnotatedBeanDefinitionReader(beanFactory)__		ClassPathBeanDefinitionScanner scanner = getClassPathBeanDefinitionScanner(beanFactory)___		BeanNameGenerator beanNameGenerator = getBeanNameGenerator()__		if (beanNameGenerator != null) {_			reader.setBeanNameGenerator(beanNameGenerator)__			scanner.setBeanNameGenerator(beanNameGenerator)__			beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator)__		}__		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver()__		if (scopeMetadataResolver != null) {_			reader.setScopeMetadataResolver(scopeMetadataResolver)__			scanner.setScopeMetadataResolver(scopeMetadataResolver)__		}__		if (!this.annotatedClasses.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Registering annotated classes: [" +_						StringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + "]")__			}_			reader.register(ClassUtils.toClassArray(this.annotatedClasses))__		}__		if (!this.basePackages.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Scanning base packages: [" +_						StringUtils.collectionToCommaDelimitedString(this.basePackages) + "]")__			}_			scanner.scan(StringUtils.toStringArray(this.basePackages))__		}__		String[] configLocations = getConfigLocations()__		if (configLocations != null) {_			for (String configLocation : configLocations) {_				try {_					Class<?> clazz = ClassUtils.forName(configLocation, getClassLoader())__					if (logger.isInfoEnabled()) {_						logger.info("Successfully resolved class for [" + configLocation + "]")__					}_					reader.register(clazz)__				}_				catch (ClassNotFoundException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Could not load class for config location [" + configLocation +_								"] - trying package scan. " + ex)__					}_					int count = scanner.scan(configLocation)__					if (logger.isInfoEnabled()) {_						if (count == 0) {_							logger.info("No annotated classes found for specified class/package [" + configLocation + "]")__						}_						else {_							logger.info("Found " + count + " annotated classes in package [" + configLocation + "]")__						}_					}_				}_			}_		}_	};register,a,link,org,springframework,beans,factory,config,bean,definition,for,any,classes,specified,by,link,register,class,and,scan,any,packages,specified,by,link,scan,string,p,for,any,values,specified,by,link,set,config,location,string,or,link,set,config,locations,string,attempt,first,to,load,each,location,as,a,class,registering,a,code,bean,definition,if,class,loading,is,successful,and,if,class,loading,fails,i,e,a,code,class,not,found,exception,is,raised,assume,the,value,is,a,package,and,attempt,to,scan,it,for,annotated,classes,p,enables,the,default,set,of,annotation,configuration,post,processors,such,that,code,autowired,code,required,and,associated,annotations,can,be,used,p,configuration,class,bean,definitions,are,registered,with,generated,bean,definition,names,unless,the,code,value,attribute,is,provided,to,the,stereotype,annotation,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,see,register,class,see,scan,string,see,set,config,location,string,see,set,config,locations,string,see,annotated,bean,definition,reader,see,class,path,bean,definition,scanner;override,protected,void,load,bean,definitions,default,listable,bean,factory,bean,factory,annotated,bean,definition,reader,reader,get,annotated,bean,definition,reader,bean,factory,class,path,bean,definition,scanner,scanner,get,class,path,bean,definition,scanner,bean,factory,bean,name,generator,bean,name,generator,get,bean,name,generator,if,bean,name,generator,null,reader,set,bean,name,generator,bean,name,generator,scanner,set,bean,name,generator,bean,name,generator,bean,factory,register,singleton,annotation,config,utils,bean,name,generator,scope,metadata,resolver,scope,metadata,resolver,get,scope,metadata,resolver,if,scope,metadata,resolver,null,reader,set,scope,metadata,resolver,scope,metadata,resolver,scanner,set,scope,metadata,resolver,scope,metadata,resolver,if,this,annotated,classes,is,empty,if,logger,is,info,enabled,logger,info,registering,annotated,classes,string,utils,collection,to,comma,delimited,string,this,annotated,classes,reader,register,class,utils,to,class,array,this,annotated,classes,if,this,base,packages,is,empty,if,logger,is,info,enabled,logger,info,scanning,base,packages,string,utils,collection,to,comma,delimited,string,this,base,packages,scanner,scan,string,utils,to,string,array,this,base,packages,string,config,locations,get,config,locations,if,config,locations,null,for,string,config,location,config,locations,try,class,clazz,class,utils,for,name,config,location,get,class,loader,if,logger,is,info,enabled,logger,info,successfully,resolved,class,for,config,location,reader,register,clazz,catch,class,not,found,exception,ex,if,logger,is,debug,enabled,logger,debug,could,not,load,class,for,config,location,config,location,trying,package,scan,ex,int,count,scanner,scan,config,location,if,logger,is,info,enabled,if,count,0,logger,info,no,annotated,classes,found,for,specified,class,package,config,location,else,logger,info,found,count,annotated,classes,in,package,config,location
AnnotationConfigWebApplicationContext -> @Override 	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);1532091916;Register a {@link org.springframework.beans.factory.config.BeanDefinition} for_any classes specified by {@link #register(Class...)} and scan any packages_specified by {@link #scan(String...)}._<p>For any values specified by {@link #setConfigLocation(String)} or_{@link #setConfigLocations(String[])}, attempt first to load each location as a_class, registering a {@code BeanDefinition} if class loading is successful,_and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),_assume the value is a package and attempt to scan it for annotated classes._<p>Enables the default set of annotation configuration post processors, such that_{@code @Autowired}, {@code @Required}, and associated annotations can be used._<p>Configuration class bean definitions are registered with generated bean_definition names unless the {@code value} attribute is provided to the stereotype_annotation._@param beanFactory the bean factory to load bean definitions into_@see #register(Class...)_@see #scan(String...)_@see #setConfigLocation(String)_@see #setConfigLocations(String[])_@see AnnotatedBeanDefinitionReader_@see ClassPathBeanDefinitionScanner;@Override_	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {_		AnnotatedBeanDefinitionReader reader = getAnnotatedBeanDefinitionReader(beanFactory)__		ClassPathBeanDefinitionScanner scanner = getClassPathBeanDefinitionScanner(beanFactory)___		BeanNameGenerator beanNameGenerator = getBeanNameGenerator()__		if (beanNameGenerator != null) {_			reader.setBeanNameGenerator(beanNameGenerator)__			scanner.setBeanNameGenerator(beanNameGenerator)__			beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator)__		}__		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver()__		if (scopeMetadataResolver != null) {_			reader.setScopeMetadataResolver(scopeMetadataResolver)__			scanner.setScopeMetadataResolver(scopeMetadataResolver)__		}__		if (!this.annotatedClasses.isEmpty()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Registering annotated classes: [" +_						StringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + "]")__			}_			reader.register(ClassUtils.toClassArray(this.annotatedClasses))__		}__		if (!this.basePackages.isEmpty()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Scanning base packages: [" +_						StringUtils.collectionToCommaDelimitedString(this.basePackages) + "]")__			}_			scanner.scan(StringUtils.toStringArray(this.basePackages))__		}__		String[] configLocations = getConfigLocations()__		if (configLocations != null) {_			for (String configLocation : configLocations) {_				try {_					Class<?> clazz = ClassUtils.forName(configLocation, getClassLoader())__					if (logger.isTraceEnabled()) {_						logger.trace("Successfully resolved class for [" + configLocation + "]")__					}_					reader.register(clazz)__				}_				catch (ClassNotFoundException ex) {_					if (logger.isTraceEnabled()) {_						logger.trace("Could not load class for config location [" + configLocation +_								"] - trying package scan. " + ex)__					}_					int count = scanner.scan(configLocation)__					if (count == 0 && logger.isDebugEnabled()) {_						logger.debug("No annotated classes found for specified class/package [" + configLocation + "]")__					}_				}_			}_		}_	};register,a,link,org,springframework,beans,factory,config,bean,definition,for,any,classes,specified,by,link,register,class,and,scan,any,packages,specified,by,link,scan,string,p,for,any,values,specified,by,link,set,config,location,string,or,link,set,config,locations,string,attempt,first,to,load,each,location,as,a,class,registering,a,code,bean,definition,if,class,loading,is,successful,and,if,class,loading,fails,i,e,a,code,class,not,found,exception,is,raised,assume,the,value,is,a,package,and,attempt,to,scan,it,for,annotated,classes,p,enables,the,default,set,of,annotation,configuration,post,processors,such,that,code,autowired,code,required,and,associated,annotations,can,be,used,p,configuration,class,bean,definitions,are,registered,with,generated,bean,definition,names,unless,the,code,value,attribute,is,provided,to,the,stereotype,annotation,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,see,register,class,see,scan,string,see,set,config,location,string,see,set,config,locations,string,see,annotated,bean,definition,reader,see,class,path,bean,definition,scanner;override,protected,void,load,bean,definitions,default,listable,bean,factory,bean,factory,annotated,bean,definition,reader,reader,get,annotated,bean,definition,reader,bean,factory,class,path,bean,definition,scanner,scanner,get,class,path,bean,definition,scanner,bean,factory,bean,name,generator,bean,name,generator,get,bean,name,generator,if,bean,name,generator,null,reader,set,bean,name,generator,bean,name,generator,scanner,set,bean,name,generator,bean,name,generator,bean,factory,register,singleton,annotation,config,utils,bean,name,generator,scope,metadata,resolver,scope,metadata,resolver,get,scope,metadata,resolver,if,scope,metadata,resolver,null,reader,set,scope,metadata,resolver,scope,metadata,resolver,scanner,set,scope,metadata,resolver,scope,metadata,resolver,if,this,annotated,classes,is,empty,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,string,utils,collection,to,comma,delimited,string,this,annotated,classes,reader,register,class,utils,to,class,array,this,annotated,classes,if,this,base,packages,is,empty,if,logger,is,debug,enabled,logger,debug,scanning,base,packages,string,utils,collection,to,comma,delimited,string,this,base,packages,scanner,scan,string,utils,to,string,array,this,base,packages,string,config,locations,get,config,locations,if,config,locations,null,for,string,config,location,config,locations,try,class,clazz,class,utils,for,name,config,location,get,class,loader,if,logger,is,trace,enabled,logger,trace,successfully,resolved,class,for,config,location,reader,register,clazz,catch,class,not,found,exception,ex,if,logger,is,trace,enabled,logger,trace,could,not,load,class,for,config,location,config,location,trying,package,scan,ex,int,count,scanner,scan,config,location,if,count,0,logger,is,debug,enabled,logger,debug,no,annotated,classes,found,for,specified,class,package,config,location
AnnotationConfigWebApplicationContext -> @Override 	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory);1532555403;Register a {@link org.springframework.beans.factory.config.BeanDefinition} for_any classes specified by {@link #register(Class...)} and scan any packages_specified by {@link #scan(String...)}._<p>For any values specified by {@link #setConfigLocation(String)} or_{@link #setConfigLocations(String[])}, attempt first to load each location as a_class, registering a {@code BeanDefinition} if class loading is successful,_and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),_assume the value is a package and attempt to scan it for annotated classes._<p>Enables the default set of annotation configuration post processors, such that_{@code @Autowired}, {@code @Required}, and associated annotations can be used._<p>Configuration class bean definitions are registered with generated bean_definition names unless the {@code value} attribute is provided to the stereotype_annotation._@param beanFactory the bean factory to load bean definitions into_@see #register(Class...)_@see #scan(String...)_@see #setConfigLocation(String)_@see #setConfigLocations(String[])_@see AnnotatedBeanDefinitionReader_@see ClassPathBeanDefinitionScanner;@Override_	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {_		AnnotatedBeanDefinitionReader reader = getAnnotatedBeanDefinitionReader(beanFactory)__		ClassPathBeanDefinitionScanner scanner = getClassPathBeanDefinitionScanner(beanFactory)___		BeanNameGenerator beanNameGenerator = getBeanNameGenerator()__		if (beanNameGenerator != null) {_			reader.setBeanNameGenerator(beanNameGenerator)__			scanner.setBeanNameGenerator(beanNameGenerator)__			beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator)__		}__		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver()__		if (scopeMetadataResolver != null) {_			reader.setScopeMetadataResolver(scopeMetadataResolver)__			scanner.setScopeMetadataResolver(scopeMetadataResolver)__		}__		if (!this.annotatedClasses.isEmpty()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Registering annotated classes: [" +_						StringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + "]")__			}_			reader.register(ClassUtils.toClassArray(this.annotatedClasses))__		}__		if (!this.basePackages.isEmpty()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Scanning base packages: [" +_						StringUtils.collectionToCommaDelimitedString(this.basePackages) + "]")__			}_			scanner.scan(StringUtils.toStringArray(this.basePackages))__		}__		String[] configLocations = getConfigLocations()__		if (configLocations != null) {_			for (String configLocation : configLocations) {_				try {_					Class<?> clazz = ClassUtils.forName(configLocation, getClassLoader())__					if (logger.isTraceEnabled()) {_						logger.trace("Registering [" + configLocation + "]")__					}_					reader.register(clazz)__				}_				catch (ClassNotFoundException ex) {_					if (logger.isTraceEnabled()) {_						logger.trace("Could not load class for config location [" + configLocation +_								"] - trying package scan. " + ex)__					}_					int count = scanner.scan(configLocation)__					if (count == 0 && logger.isDebugEnabled()) {_						logger.debug("No annotated classes found for specified class/package [" + configLocation + "]")__					}_				}_			}_		}_	};register,a,link,org,springframework,beans,factory,config,bean,definition,for,any,classes,specified,by,link,register,class,and,scan,any,packages,specified,by,link,scan,string,p,for,any,values,specified,by,link,set,config,location,string,or,link,set,config,locations,string,attempt,first,to,load,each,location,as,a,class,registering,a,code,bean,definition,if,class,loading,is,successful,and,if,class,loading,fails,i,e,a,code,class,not,found,exception,is,raised,assume,the,value,is,a,package,and,attempt,to,scan,it,for,annotated,classes,p,enables,the,default,set,of,annotation,configuration,post,processors,such,that,code,autowired,code,required,and,associated,annotations,can,be,used,p,configuration,class,bean,definitions,are,registered,with,generated,bean,definition,names,unless,the,code,value,attribute,is,provided,to,the,stereotype,annotation,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,see,register,class,see,scan,string,see,set,config,location,string,see,set,config,locations,string,see,annotated,bean,definition,reader,see,class,path,bean,definition,scanner;override,protected,void,load,bean,definitions,default,listable,bean,factory,bean,factory,annotated,bean,definition,reader,reader,get,annotated,bean,definition,reader,bean,factory,class,path,bean,definition,scanner,scanner,get,class,path,bean,definition,scanner,bean,factory,bean,name,generator,bean,name,generator,get,bean,name,generator,if,bean,name,generator,null,reader,set,bean,name,generator,bean,name,generator,scanner,set,bean,name,generator,bean,name,generator,bean,factory,register,singleton,annotation,config,utils,bean,name,generator,scope,metadata,resolver,scope,metadata,resolver,get,scope,metadata,resolver,if,scope,metadata,resolver,null,reader,set,scope,metadata,resolver,scope,metadata,resolver,scanner,set,scope,metadata,resolver,scope,metadata,resolver,if,this,annotated,classes,is,empty,if,logger,is,debug,enabled,logger,debug,registering,annotated,classes,string,utils,collection,to,comma,delimited,string,this,annotated,classes,reader,register,class,utils,to,class,array,this,annotated,classes,if,this,base,packages,is,empty,if,logger,is,debug,enabled,logger,debug,scanning,base,packages,string,utils,collection,to,comma,delimited,string,this,base,packages,scanner,scan,string,utils,to,string,array,this,base,packages,string,config,locations,get,config,locations,if,config,locations,null,for,string,config,location,config,locations,try,class,clazz,class,utils,for,name,config,location,get,class,loader,if,logger,is,trace,enabled,logger,trace,registering,config,location,reader,register,clazz,catch,class,not,found,exception,ex,if,logger,is,trace,enabled,logger,trace,could,not,load,class,for,config,location,config,location,trying,package,scan,ex,int,count,scanner,scan,config,location,if,count,0,logger,is,debug,enabled,logger,debug,no,annotated,classes,found,for,specified,class,package,config,location
AnnotationConfigWebApplicationContext -> protected BeanNameGenerator getBeanNameGenerator();1328020251;Provide a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any._<p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}._@see AnnotatedBeanDefinitionReader#setBeanNameGenerator_@see ClassPathBeanDefinitionScanner#setBeanNameGenerator;protected BeanNameGenerator getBeanNameGenerator() {_		return this.beanNameGenerator__	};provide,a,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any,p,default,is,link,org,springframework,context,annotation,annotation,bean,name,generator,see,annotated,bean,definition,reader,set,bean,name,generator,see,class,path,bean,definition,scanner,set,bean,name,generator;protected,bean,name,generator,get,bean,name,generator,return,this,bean,name,generator
AnnotationConfigWebApplicationContext -> protected BeanNameGenerator getBeanNameGenerator();1329393628;Provide a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any._<p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}._@see AnnotatedBeanDefinitionReader#setBeanNameGenerator_@see ClassPathBeanDefinitionScanner#setBeanNameGenerator;protected BeanNameGenerator getBeanNameGenerator() {_		return this.beanNameGenerator__	};provide,a,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any,p,default,is,link,org,springframework,context,annotation,annotation,bean,name,generator,see,annotated,bean,definition,reader,set,bean,name,generator,see,class,path,bean,definition,scanner,set,bean,name,generator;protected,bean,name,generator,get,bean,name,generator,return,this,bean,name,generator
AnnotationConfigWebApplicationContext -> protected BeanNameGenerator getBeanNameGenerator();1335774711;Provide a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any._<p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}._@see AnnotatedBeanDefinitionReader#setBeanNameGenerator_@see ClassPathBeanDefinitionScanner#setBeanNameGenerator;protected BeanNameGenerator getBeanNameGenerator() {_		return this.beanNameGenerator__	};provide,a,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any,p,default,is,link,org,springframework,context,annotation,annotation,bean,name,generator,see,annotated,bean,definition,reader,set,bean,name,generator,see,class,path,bean,definition,scanner,set,bean,name,generator;protected,bean,name,generator,get,bean,name,generator,return,this,bean,name,generator
AnnotationConfigWebApplicationContext -> protected BeanNameGenerator getBeanNameGenerator();1377641093;Return the custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;protected BeanNameGenerator getBeanNameGenerator() {_		return this.beanNameGenerator__	};return,the,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;protected,bean,name,generator,get,bean,name,generator,return,this,bean,name,generator
AnnotationConfigWebApplicationContext -> protected BeanNameGenerator getBeanNameGenerator();1390432589;Return the custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;protected BeanNameGenerator getBeanNameGenerator() {_		return this.beanNameGenerator__	};return,the,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;protected,bean,name,generator,get,bean,name,generator,return,this,bean,name,generator
AnnotationConfigWebApplicationContext -> protected BeanNameGenerator getBeanNameGenerator();1403775783;Return the custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;protected BeanNameGenerator getBeanNameGenerator() {_		return this.beanNameGenerator__	};return,the,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;protected,bean,name,generator,get,bean,name,generator,return,this,bean,name,generator
AnnotationConfigWebApplicationContext -> protected BeanNameGenerator getBeanNameGenerator();1449488792;Return the custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;protected BeanNameGenerator getBeanNameGenerator() {_		return this.beanNameGenerator__	};return,the,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;protected,bean,name,generator,get,bean,name,generator,return,this,bean,name,generator
AnnotationConfigWebApplicationContext -> protected BeanNameGenerator getBeanNameGenerator();1467730834;Return the custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;protected BeanNameGenerator getBeanNameGenerator() {_		return this.beanNameGenerator__	};return,the,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;protected,bean,name,generator,get,bean,name,generator,return,this,bean,name,generator
AnnotationConfigWebApplicationContext -> public void register(Class<?>... annotatedClasses);1328020251;Register one or more annotated classes to be processed._Note that {@link #refresh()} must be called in order for the context to fully_process the new class._<p>Calls to {@link #register} are idempotent_ adding the same_annotated class more than once has no additional effect._@param annotatedClasses one or more annotated classes,_e.g. {@link Configuration @Configuration} classes_@see #scan(String...)_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #setConfigLocation(String)_@see #refresh();public void register(Class<?>... annotatedClasses) {_		Assert.notEmpty(annotatedClasses, "At least one annotated class must be specified")__		this.annotatedClasses = annotatedClasses__	};register,one,or,more,annotated,classes,to,be,processed,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,class,p,calls,to,link,register,are,idempotent,adding,the,same,annotated,class,more,than,once,has,no,additional,effect,param,annotated,classes,one,or,more,annotated,classes,e,g,link,configuration,configuration,classes,see,scan,string,see,load,bean,definitions,default,listable,bean,factory,see,set,config,location,string,see,refresh;public,void,register,class,annotated,classes,assert,not,empty,annotated,classes,at,least,one,annotated,class,must,be,specified,this,annotated,classes,annotated,classes
AnnotationConfigWebApplicationContext -> public void register(Class<?>... annotatedClasses);1329393628;Register one or more annotated classes to be processed._Note that {@link #refresh()} must be called in order for the context to fully_process the new class._<p>Calls to {@link #register} are idempotent_ adding the same_annotated class more than once has no additional effect._@param annotatedClasses one or more annotated classes,_e.g. {@link Configuration @Configuration} classes_@see #scan(String...)_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #setConfigLocation(String)_@see #refresh();public void register(Class<?>... annotatedClasses) {_		Assert.notEmpty(annotatedClasses, "At least one annotated class must be specified")__		this.annotatedClasses = annotatedClasses__	};register,one,or,more,annotated,classes,to,be,processed,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,class,p,calls,to,link,register,are,idempotent,adding,the,same,annotated,class,more,than,once,has,no,additional,effect,param,annotated,classes,one,or,more,annotated,classes,e,g,link,configuration,configuration,classes,see,scan,string,see,load,bean,definitions,default,listable,bean,factory,see,set,config,location,string,see,refresh;public,void,register,class,annotated,classes,assert,not,empty,annotated,classes,at,least,one,annotated,class,must,be,specified,this,annotated,classes,annotated,classes
AnnotationConfigWebApplicationContext -> public void register(Class<?>... annotatedClasses);1335774711;Register one or more annotated classes to be processed._Note that {@link #refresh()} must be called in order for the context to fully_process the new class._<p>Calls to {@link #register} are idempotent_ adding the same_annotated class more than once has no additional effect._@param annotatedClasses one or more annotated classes,_e.g. {@link org.springframework.context.annotation.Configuration @Configuration} classes_@see #scan(String...)_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #setConfigLocation(String)_@see #refresh();public void register(Class<?>... annotatedClasses) {_		Assert.notEmpty(annotatedClasses, "At least one annotated class must be specified")__		this.annotatedClasses = annotatedClasses__	};register,one,or,more,annotated,classes,to,be,processed,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,class,p,calls,to,link,register,are,idempotent,adding,the,same,annotated,class,more,than,once,has,no,additional,effect,param,annotated,classes,one,or,more,annotated,classes,e,g,link,org,springframework,context,annotation,configuration,configuration,classes,see,scan,string,see,load,bean,definitions,default,listable,bean,factory,see,set,config,location,string,see,refresh;public,void,register,class,annotated,classes,assert,not,empty,annotated,classes,at,least,one,annotated,class,must,be,specified,this,annotated,classes,annotated,classes
AnnotationConfigWebApplicationContext -> public void register(Class<?>... annotatedClasses);1377641093;Register one or more annotated classes to be processed._Note that {@link #refresh()} must be called in order for the context_to fully process the new class._<p>Calls to {@code register} are idempotent_ adding the same_annotated class more than once has no additional effect._@param annotatedClasses one or more annotated classes,_e.g. {@link org.springframework.context.annotation.Configuration @Configuration} classes_@see #scan(String...)_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #setConfigLocation(String)_@see #refresh();public void register(Class<?>... annotatedClasses) {_		Assert.notEmpty(annotatedClasses, "At least one annotated class must be specified")__		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses))__	};register,one,or,more,annotated,classes,to,be,processed,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,class,p,calls,to,code,register,are,idempotent,adding,the,same,annotated,class,more,than,once,has,no,additional,effect,param,annotated,classes,one,or,more,annotated,classes,e,g,link,org,springframework,context,annotation,configuration,configuration,classes,see,scan,string,see,load,bean,definitions,default,listable,bean,factory,see,set,config,location,string,see,refresh;public,void,register,class,annotated,classes,assert,not,empty,annotated,classes,at,least,one,annotated,class,must,be,specified,this,annotated,classes,add,all,arrays,as,list,annotated,classes
AnnotationConfigWebApplicationContext -> public void register(Class<?>... annotatedClasses);1390432589;Register one or more annotated classes to be processed._Note that {@link #refresh()} must be called in order for the context_to fully process the new class._<p>Calls to {@code register} are idempotent_ adding the same_annotated class more than once has no additional effect._@param annotatedClasses one or more annotated classes,_e.g. {@link org.springframework.context.annotation.Configuration @Configuration} classes_@see #scan(String...)_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #setConfigLocation(String)_@see #refresh();public void register(Class<?>... annotatedClasses) {_		Assert.notEmpty(annotatedClasses, "At least one annotated class must be specified")__		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses))__	};register,one,or,more,annotated,classes,to,be,processed,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,class,p,calls,to,code,register,are,idempotent,adding,the,same,annotated,class,more,than,once,has,no,additional,effect,param,annotated,classes,one,or,more,annotated,classes,e,g,link,org,springframework,context,annotation,configuration,configuration,classes,see,scan,string,see,load,bean,definitions,default,listable,bean,factory,see,set,config,location,string,see,refresh;public,void,register,class,annotated,classes,assert,not,empty,annotated,classes,at,least,one,annotated,class,must,be,specified,this,annotated,classes,add,all,arrays,as,list,annotated,classes
AnnotationConfigWebApplicationContext -> public void register(Class<?>... annotatedClasses);1403775783;Register one or more annotated classes to be processed._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param annotatedClasses one or more annotated classes,_e.g. {@link org.springframework.context.annotation.Configuration @Configuration} classes_@see #scan(String...)_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #setConfigLocation(String)_@see #refresh();public void register(Class<?>... annotatedClasses) {_		Assert.notEmpty(annotatedClasses, "At least one annotated class must be specified")__		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses))__	};register,one,or,more,annotated,classes,to,be,processed,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,annotated,classes,one,or,more,annotated,classes,e,g,link,org,springframework,context,annotation,configuration,configuration,classes,see,scan,string,see,load,bean,definitions,default,listable,bean,factory,see,set,config,location,string,see,refresh;public,void,register,class,annotated,classes,assert,not,empty,annotated,classes,at,least,one,annotated,class,must,be,specified,this,annotated,classes,add,all,arrays,as,list,annotated,classes
AnnotationConfigWebApplicationContext -> public void register(Class<?>... annotatedClasses);1449488792;Register one or more annotated classes to be processed._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param annotatedClasses one or more annotated classes,_e.g. {@link org.springframework.context.annotation.Configuration @Configuration} classes_@see #scan(String...)_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #setConfigLocation(String)_@see #refresh();public void register(Class<?>... annotatedClasses) {_		Assert.notEmpty(annotatedClasses, "At least one annotated class must be specified")__		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses))__	};register,one,or,more,annotated,classes,to,be,processed,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,annotated,classes,one,or,more,annotated,classes,e,g,link,org,springframework,context,annotation,configuration,configuration,classes,see,scan,string,see,load,bean,definitions,default,listable,bean,factory,see,set,config,location,string,see,refresh;public,void,register,class,annotated,classes,assert,not,empty,annotated,classes,at,least,one,annotated,class,must,be,specified,this,annotated,classes,add,all,arrays,as,list,annotated,classes
AnnotationConfigWebApplicationContext -> public void register(Class<?>... annotatedClasses);1467730834;Register one or more annotated classes to be processed._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param annotatedClasses one or more annotated classes,_e.g. {@link org.springframework.context.annotation.Configuration @Configuration} classes_@see #scan(String...)_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #setConfigLocation(String)_@see #refresh();public void register(Class<?>... annotatedClasses) {_		Assert.notEmpty(annotatedClasses, "At least one annotated class must be specified")__		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses))__	};register,one,or,more,annotated,classes,to,be,processed,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,annotated,classes,one,or,more,annotated,classes,e,g,link,org,springframework,context,annotation,configuration,configuration,classes,see,scan,string,see,load,bean,definitions,default,listable,bean,factory,see,set,config,location,string,see,refresh;public,void,register,class,annotated,classes,assert,not,empty,annotated,classes,at,least,one,annotated,class,must,be,specified,this,annotated,classes,add,all,arrays,as,list,annotated,classes
AnnotationConfigWebApplicationContext -> public void register(Class<?>... annotatedClasses);1495868221;Register one or more annotated classes to be processed._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param annotatedClasses one or more annotated classes,_e.g. {@link org.springframework.context.annotation.Configuration @Configuration} classes_@see #scan(String...)_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #setConfigLocation(String)_@see #refresh();public void register(Class<?>... annotatedClasses) {_		Assert.notEmpty(annotatedClasses, "At least one annotated class must be specified")__		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses))__	};register,one,or,more,annotated,classes,to,be,processed,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,annotated,classes,one,or,more,annotated,classes,e,g,link,org,springframework,context,annotation,configuration,configuration,classes,see,scan,string,see,load,bean,definitions,default,listable,bean,factory,see,set,config,location,string,see,refresh;public,void,register,class,annotated,classes,assert,not,empty,annotated,classes,at,least,one,annotated,class,must,be,specified,this,annotated,classes,add,all,arrays,as,list,annotated,classes
AnnotationConfigWebApplicationContext -> public void register(Class<?>... annotatedClasses);1496837955;Register one or more annotated classes to be processed._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param annotatedClasses one or more annotated classes,_e.g. {@link org.springframework.context.annotation.Configuration @Configuration} classes_@see #scan(String...)_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #setConfigLocation(String)_@see #refresh();public void register(Class<?>... annotatedClasses) {_		Assert.notEmpty(annotatedClasses, "At least one annotated class must be specified")__		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses))__	};register,one,or,more,annotated,classes,to,be,processed,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,annotated,classes,one,or,more,annotated,classes,e,g,link,org,springframework,context,annotation,configuration,configuration,classes,see,scan,string,see,load,bean,definitions,default,listable,bean,factory,see,set,config,location,string,see,refresh;public,void,register,class,annotated,classes,assert,not,empty,annotated,classes,at,least,one,annotated,class,must,be,specified,this,annotated,classes,add,all,arrays,as,list,annotated,classes
AnnotationConfigWebApplicationContext -> public void register(Class<?>... annotatedClasses);1500448076;Register one or more annotated classes to be processed._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param annotatedClasses one or more annotated classes,_e.g. {@link org.springframework.context.annotation.Configuration @Configuration} classes_@see #scan(String...)_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #setConfigLocation(String)_@see #refresh();public void register(Class<?>... annotatedClasses) {_		Assert.notEmpty(annotatedClasses, "At least one annotated class must be specified")__		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses))__	};register,one,or,more,annotated,classes,to,be,processed,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,annotated,classes,one,or,more,annotated,classes,e,g,link,org,springframework,context,annotation,configuration,configuration,classes,see,scan,string,see,load,bean,definitions,default,listable,bean,factory,see,set,config,location,string,see,refresh;public,void,register,class,annotated,classes,assert,not,empty,annotated,classes,at,least,one,annotated,class,must,be,specified,this,annotated,classes,add,all,arrays,as,list,annotated,classes
AnnotationConfigWebApplicationContext -> public void register(Class<?>... annotatedClasses);1518810557;Register one or more annotated classes to be processed._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param annotatedClasses one or more annotated classes,_e.g. {@link org.springframework.context.annotation.Configuration @Configuration} classes_@see #scan(String...)_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #setConfigLocation(String)_@see #refresh();public void register(Class<?>... annotatedClasses) {_		Assert.notEmpty(annotatedClasses, "At least one annotated class must be specified")__		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses))__	};register,one,or,more,annotated,classes,to,be,processed,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,annotated,classes,one,or,more,annotated,classes,e,g,link,org,springframework,context,annotation,configuration,configuration,classes,see,scan,string,see,load,bean,definitions,default,listable,bean,factory,see,set,config,location,string,see,refresh;public,void,register,class,annotated,classes,assert,not,empty,annotated,classes,at,least,one,annotated,class,must,be,specified,this,annotated,classes,add,all,arrays,as,list,annotated,classes
AnnotationConfigWebApplicationContext -> public void register(Class<?>... annotatedClasses);1519295386;Register one or more annotated classes to be processed._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param annotatedClasses one or more annotated classes,_e.g. {@link org.springframework.context.annotation.Configuration @Configuration} classes_@see #scan(String...)_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #setConfigLocation(String)_@see #refresh();public void register(Class<?>... annotatedClasses) {_		Assert.notEmpty(annotatedClasses, "At least one annotated class must be specified")__		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses))__	};register,one,or,more,annotated,classes,to,be,processed,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,annotated,classes,one,or,more,annotated,classes,e,g,link,org,springframework,context,annotation,configuration,configuration,classes,see,scan,string,see,load,bean,definitions,default,listable,bean,factory,see,set,config,location,string,see,refresh;public,void,register,class,annotated,classes,assert,not,empty,annotated,classes,at,least,one,annotated,class,must,be,specified,this,annotated,classes,add,all,arrays,as,list,annotated,classes
AnnotationConfigWebApplicationContext -> public void register(Class<?>... annotatedClasses);1519514499;Register one or more annotated classes to be processed._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param annotatedClasses one or more annotated classes,_e.g. {@link org.springframework.context.annotation.Configuration @Configuration} classes_@see #scan(String...)_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #setConfigLocation(String)_@see #refresh();public void register(Class<?>... annotatedClasses) {_		Assert.notEmpty(annotatedClasses, "At least one annotated class must be specified")__		Collections.addAll(this.annotatedClasses, annotatedClasses)__	};register,one,or,more,annotated,classes,to,be,processed,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,annotated,classes,one,or,more,annotated,classes,e,g,link,org,springframework,context,annotation,configuration,configuration,classes,see,scan,string,see,load,bean,definitions,default,listable,bean,factory,see,set,config,location,string,see,refresh;public,void,register,class,annotated,classes,assert,not,empty,annotated,classes,at,least,one,annotated,class,must,be,specified,collections,add,all,this,annotated,classes,annotated,classes
AnnotationConfigWebApplicationContext -> public void register(Class<?>... annotatedClasses);1532091916;Register one or more annotated classes to be processed._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param annotatedClasses one or more annotated classes,_e.g. {@link org.springframework.context.annotation.Configuration @Configuration} classes_@see #scan(String...)_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #setConfigLocation(String)_@see #refresh();public void register(Class<?>... annotatedClasses) {_		Assert.notEmpty(annotatedClasses, "At least one annotated class must be specified")__		Collections.addAll(this.annotatedClasses, annotatedClasses)__	};register,one,or,more,annotated,classes,to,be,processed,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,annotated,classes,one,or,more,annotated,classes,e,g,link,org,springframework,context,annotation,configuration,configuration,classes,see,scan,string,see,load,bean,definitions,default,listable,bean,factory,see,set,config,location,string,see,refresh;public,void,register,class,annotated,classes,assert,not,empty,annotated,classes,at,least,one,annotated,class,must,be,specified,collections,add,all,this,annotated,classes,annotated,classes
AnnotationConfigWebApplicationContext -> public void register(Class<?>... annotatedClasses);1532555403;Register one or more annotated classes to be processed._<p>Note that {@link #refresh()} must be called in order for the context_to fully process the new classes._@param annotatedClasses one or more annotated classes,_e.g. {@link org.springframework.context.annotation.Configuration @Configuration} classes_@see #scan(String...)_@see #loadBeanDefinitions(DefaultListableBeanFactory)_@see #setConfigLocation(String)_@see #refresh();public void register(Class<?>... annotatedClasses) {_		Assert.notEmpty(annotatedClasses, "At least one annotated class must be specified")__		Collections.addAll(this.annotatedClasses, annotatedClasses)__	};register,one,or,more,annotated,classes,to,be,processed,p,note,that,link,refresh,must,be,called,in,order,for,the,context,to,fully,process,the,new,classes,param,annotated,classes,one,or,more,annotated,classes,e,g,link,org,springframework,context,annotation,configuration,configuration,classes,see,scan,string,see,load,bean,definitions,default,listable,bean,factory,see,set,config,location,string,see,refresh;public,void,register,class,annotated,classes,assert,not,empty,annotated,classes,at,least,one,annotated,class,must,be,specified,collections,add,all,this,annotated,classes,annotated,classes
AnnotationConfigWebApplicationContext -> protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory);1449488792;Build a {@link ClassPathBeanDefinitionScanner} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory) {_		return new ClassPathBeanDefinitionScanner(beanFactory, true, getEnvironment())__	};build,a,link,class,path,bean,definition,scanner,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,class,path,bean,definition,scanner,get,class,path,bean,definition,scanner,default,listable,bean,factory,bean,factory,return,new,class,path,bean,definition,scanner,bean,factory,true,get,environment
AnnotationConfigWebApplicationContext -> protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory);1467730834;Build a {@link ClassPathBeanDefinitionScanner} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory) {_		return new ClassPathBeanDefinitionScanner(beanFactory, true, getEnvironment())__	};build,a,link,class,path,bean,definition,scanner,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,class,path,bean,definition,scanner,get,class,path,bean,definition,scanner,default,listable,bean,factory,bean,factory,return,new,class,path,bean,definition,scanner,bean,factory,true,get,environment
AnnotationConfigWebApplicationContext -> protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory);1495868221;Build a {@link ClassPathBeanDefinitionScanner} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory) {_		return new ClassPathBeanDefinitionScanner(beanFactory, true, getEnvironment())__	};build,a,link,class,path,bean,definition,scanner,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,class,path,bean,definition,scanner,get,class,path,bean,definition,scanner,default,listable,bean,factory,bean,factory,return,new,class,path,bean,definition,scanner,bean,factory,true,get,environment
AnnotationConfigWebApplicationContext -> protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory);1496837955;Build a {@link ClassPathBeanDefinitionScanner} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory) {_		return new ClassPathBeanDefinitionScanner(beanFactory, true, getEnvironment())__	};build,a,link,class,path,bean,definition,scanner,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,class,path,bean,definition,scanner,get,class,path,bean,definition,scanner,default,listable,bean,factory,bean,factory,return,new,class,path,bean,definition,scanner,bean,factory,true,get,environment
AnnotationConfigWebApplicationContext -> protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory);1500448076;Build a {@link ClassPathBeanDefinitionScanner} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory) {_		return new ClassPathBeanDefinitionScanner(beanFactory, true, getEnvironment())__	};build,a,link,class,path,bean,definition,scanner,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,class,path,bean,definition,scanner,get,class,path,bean,definition,scanner,default,listable,bean,factory,bean,factory,return,new,class,path,bean,definition,scanner,bean,factory,true,get,environment
AnnotationConfigWebApplicationContext -> protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory);1518810557;Build a {@link ClassPathBeanDefinitionScanner} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory) {_		return new ClassPathBeanDefinitionScanner(beanFactory, true, getEnvironment())__	};build,a,link,class,path,bean,definition,scanner,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,class,path,bean,definition,scanner,get,class,path,bean,definition,scanner,default,listable,bean,factory,bean,factory,return,new,class,path,bean,definition,scanner,bean,factory,true,get,environment
AnnotationConfigWebApplicationContext -> protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory);1519295386;Build a {@link ClassPathBeanDefinitionScanner} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory) {_		return new ClassPathBeanDefinitionScanner(beanFactory, true, getEnvironment())__	};build,a,link,class,path,bean,definition,scanner,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,class,path,bean,definition,scanner,get,class,path,bean,definition,scanner,default,listable,bean,factory,bean,factory,return,new,class,path,bean,definition,scanner,bean,factory,true,get,environment
AnnotationConfigWebApplicationContext -> protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory);1519514499;Build a {@link ClassPathBeanDefinitionScanner} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory) {_		return new ClassPathBeanDefinitionScanner(beanFactory, true, getEnvironment())__	};build,a,link,class,path,bean,definition,scanner,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,class,path,bean,definition,scanner,get,class,path,bean,definition,scanner,default,listable,bean,factory,bean,factory,return,new,class,path,bean,definition,scanner,bean,factory,true,get,environment
AnnotationConfigWebApplicationContext -> protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory);1532091916;Build a {@link ClassPathBeanDefinitionScanner} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory) {_		return new ClassPathBeanDefinitionScanner(beanFactory, true, getEnvironment())__	};build,a,link,class,path,bean,definition,scanner,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,class,path,bean,definition,scanner,get,class,path,bean,definition,scanner,default,listable,bean,factory,bean,factory,return,new,class,path,bean,definition,scanner,bean,factory,true,get,environment
AnnotationConfigWebApplicationContext -> protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory);1532555403;Build a {@link ClassPathBeanDefinitionScanner} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory) {_		return new ClassPathBeanDefinitionScanner(beanFactory, true, getEnvironment())__	};build,a,link,class,path,bean,definition,scanner,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,class,path,bean,definition,scanner,get,class,path,bean,definition,scanner,default,listable,bean,factory,bean,factory,return,new,class,path,bean,definition,scanner,bean,factory,true,get,environment
AnnotationConfigWebApplicationContext -> public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator);1500448076;Set a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}._@see AnnotatedBeanDefinitionReader#setBeanNameGenerator_@see ClassPathBeanDefinitionScanner#setBeanNameGenerator;public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = beanNameGenerator__	};set,a,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,link,org,springframework,context,annotation,annotation,bean,name,generator,see,annotated,bean,definition,reader,set,bean,name,generator,see,class,path,bean,definition,scanner,set,bean,name,generator;public,void,set,bean,name,generator,nullable,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator
AnnotationConfigWebApplicationContext -> public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator);1518810557;Set a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}._@see AnnotatedBeanDefinitionReader#setBeanNameGenerator_@see ClassPathBeanDefinitionScanner#setBeanNameGenerator;public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = beanNameGenerator__	};set,a,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,link,org,springframework,context,annotation,annotation,bean,name,generator,see,annotated,bean,definition,reader,set,bean,name,generator,see,class,path,bean,definition,scanner,set,bean,name,generator;public,void,set,bean,name,generator,nullable,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator
AnnotationConfigWebApplicationContext -> public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator);1519295386;Set a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}._@see AnnotatedBeanDefinitionReader#setBeanNameGenerator_@see ClassPathBeanDefinitionScanner#setBeanNameGenerator;public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = beanNameGenerator__	};set,a,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,link,org,springframework,context,annotation,annotation,bean,name,generator,see,annotated,bean,definition,reader,set,bean,name,generator,see,class,path,bean,definition,scanner,set,bean,name,generator;public,void,set,bean,name,generator,nullable,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator
AnnotationConfigWebApplicationContext -> public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator);1519514499;Set a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}._@see AnnotatedBeanDefinitionReader#setBeanNameGenerator_@see ClassPathBeanDefinitionScanner#setBeanNameGenerator;public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = beanNameGenerator__	};set,a,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,link,org,springframework,context,annotation,annotation,bean,name,generator,see,annotated,bean,definition,reader,set,bean,name,generator,see,class,path,bean,definition,scanner,set,bean,name,generator;public,void,set,bean,name,generator,nullable,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator
AnnotationConfigWebApplicationContext -> public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator);1532091916;Set a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}._@see AnnotatedBeanDefinitionReader#setBeanNameGenerator_@see ClassPathBeanDefinitionScanner#setBeanNameGenerator;public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = beanNameGenerator__	};set,a,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,link,org,springframework,context,annotation,annotation,bean,name,generator,see,annotated,bean,definition,reader,set,bean,name,generator,see,class,path,bean,definition,scanner,set,bean,name,generator;public,void,set,bean,name,generator,nullable,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator
AnnotationConfigWebApplicationContext -> public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator);1532555403;Set a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}._@see AnnotatedBeanDefinitionReader#setBeanNameGenerator_@see ClassPathBeanDefinitionScanner#setBeanNameGenerator;public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = beanNameGenerator__	};set,a,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,link,org,springframework,context,annotation,annotation,bean,name,generator,see,annotated,bean,definition,reader,set,bean,name,generator,see,class,path,bean,definition,scanner,set,bean,name,generator;public,void,set,bean,name,generator,nullable,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator
AnnotationConfigWebApplicationContext -> protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory);1449488792;Build an {@link AnnotatedBeanDefinitionReader} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory) {_		return new AnnotatedBeanDefinitionReader(beanFactory, getEnvironment())__	};build,an,link,annotated,bean,definition,reader,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,annotated,bean,definition,reader,get,annotated,bean,definition,reader,default,listable,bean,factory,bean,factory,return,new,annotated,bean,definition,reader,bean,factory,get,environment
AnnotationConfigWebApplicationContext -> protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory);1467730834;Build an {@link AnnotatedBeanDefinitionReader} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory) {_		return new AnnotatedBeanDefinitionReader(beanFactory, getEnvironment())__	};build,an,link,annotated,bean,definition,reader,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,annotated,bean,definition,reader,get,annotated,bean,definition,reader,default,listable,bean,factory,bean,factory,return,new,annotated,bean,definition,reader,bean,factory,get,environment
AnnotationConfigWebApplicationContext -> protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory);1495868221;Build an {@link AnnotatedBeanDefinitionReader} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory) {_		return new AnnotatedBeanDefinitionReader(beanFactory, getEnvironment())__	};build,an,link,annotated,bean,definition,reader,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,annotated,bean,definition,reader,get,annotated,bean,definition,reader,default,listable,bean,factory,bean,factory,return,new,annotated,bean,definition,reader,bean,factory,get,environment
AnnotationConfigWebApplicationContext -> protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory);1496837955;Build an {@link AnnotatedBeanDefinitionReader} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory) {_		return new AnnotatedBeanDefinitionReader(beanFactory, getEnvironment())__	};build,an,link,annotated,bean,definition,reader,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,annotated,bean,definition,reader,get,annotated,bean,definition,reader,default,listable,bean,factory,bean,factory,return,new,annotated,bean,definition,reader,bean,factory,get,environment
AnnotationConfigWebApplicationContext -> protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory);1500448076;Build an {@link AnnotatedBeanDefinitionReader} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory) {_		return new AnnotatedBeanDefinitionReader(beanFactory, getEnvironment())__	};build,an,link,annotated,bean,definition,reader,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,annotated,bean,definition,reader,get,annotated,bean,definition,reader,default,listable,bean,factory,bean,factory,return,new,annotated,bean,definition,reader,bean,factory,get,environment
AnnotationConfigWebApplicationContext -> protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory);1518810557;Build an {@link AnnotatedBeanDefinitionReader} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory) {_		return new AnnotatedBeanDefinitionReader(beanFactory, getEnvironment())__	};build,an,link,annotated,bean,definition,reader,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,annotated,bean,definition,reader,get,annotated,bean,definition,reader,default,listable,bean,factory,bean,factory,return,new,annotated,bean,definition,reader,bean,factory,get,environment
AnnotationConfigWebApplicationContext -> protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory);1519295386;Build an {@link AnnotatedBeanDefinitionReader} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory) {_		return new AnnotatedBeanDefinitionReader(beanFactory, getEnvironment())__	};build,an,link,annotated,bean,definition,reader,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,annotated,bean,definition,reader,get,annotated,bean,definition,reader,default,listable,bean,factory,bean,factory,return,new,annotated,bean,definition,reader,bean,factory,get,environment
AnnotationConfigWebApplicationContext -> protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory);1519514499;Build an {@link AnnotatedBeanDefinitionReader} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory) {_		return new AnnotatedBeanDefinitionReader(beanFactory, getEnvironment())__	};build,an,link,annotated,bean,definition,reader,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,annotated,bean,definition,reader,get,annotated,bean,definition,reader,default,listable,bean,factory,bean,factory,return,new,annotated,bean,definition,reader,bean,factory,get,environment
AnnotationConfigWebApplicationContext -> protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory);1532091916;Build an {@link AnnotatedBeanDefinitionReader} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory) {_		return new AnnotatedBeanDefinitionReader(beanFactory, getEnvironment())__	};build,an,link,annotated,bean,definition,reader,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,annotated,bean,definition,reader,get,annotated,bean,definition,reader,default,listable,bean,factory,bean,factory,return,new,annotated,bean,definition,reader,bean,factory,get,environment
AnnotationConfigWebApplicationContext -> protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory);1532555403;Build an {@link AnnotatedBeanDefinitionReader} for the given bean factory._<p>This should be pre-configured with the {@code Environment} (if desired)_but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet._@param beanFactory the bean factory to load bean definitions into_@since 4.1.9_@see #getEnvironment()_@see #getBeanNameGenerator()_@see #getScopeMetadataResolver();protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory) {_		return new AnnotatedBeanDefinitionReader(beanFactory, getEnvironment())__	};build,an,link,annotated,bean,definition,reader,for,the,given,bean,factory,p,this,should,be,pre,configured,with,the,code,environment,if,desired,but,not,with,a,code,bean,name,generator,or,code,scope,metadata,resolver,yet,param,bean,factory,the,bean,factory,to,load,bean,definitions,into,since,4,1,9,see,get,environment,see,get,bean,name,generator,see,get,scope,metadata,resolver;protected,annotated,bean,definition,reader,get,annotated,bean,definition,reader,default,listable,bean,factory,bean,factory,return,new,annotated,bean,definition,reader,bean,factory,get,environment
AnnotationConfigWebApplicationContext -> @Override 	public void setConfigLocations(String[] locations);1328020251;{@inheritDoc}_<p>This implementation accepts individual location values as fully-qualified class_names (typically {@code @Configuration} classes) or fully-qualified packages to_scan. During {@link #loadBeanDefinitions}, these locations will be processed in_order, first attempting to load values as a class, and upon class loading failure_the value is assumed to be a package to be scanned._<p>Note that this method exists primarily for compatibility with Spring's_{@link org.springframework.web.context.ContextLoader} and that if this application_context is being configured through an_{@link org.springframework.context.ApplicationContextInitializer}, use of the_{@link #register} and {@link #scan} methods are preferred._@see #scan(String...)_@see #register(Class...)_@see #setConfigLocation(String)_@see #loadBeanDefinitions(DefaultListableBeanFactory);@Override_	public void setConfigLocations(String[] locations) {_		super.setConfigLocations(locations)__	};inherit,doc,p,this,implementation,accepts,individual,location,values,as,fully,qualified,class,names,typically,code,configuration,classes,or,fully,qualified,packages,to,scan,during,link,load,bean,definitions,these,locations,will,be,processed,in,order,first,attempting,to,load,values,as,a,class,and,upon,class,loading,failure,the,value,is,assumed,to,be,a,package,to,be,scanned,p,note,that,this,method,exists,primarily,for,compatibility,with,spring,s,link,org,springframework,web,context,context,loader,and,that,if,this,application,context,is,being,configured,through,an,link,org,springframework,context,application,context,initializer,use,of,the,link,register,and,link,scan,methods,are,preferred,see,scan,string,see,register,class,see,set,config,location,string,see,load,bean,definitions,default,listable,bean,factory;override,public,void,set,config,locations,string,locations,super,set,config,locations,locations
AnnotationConfigWebApplicationContext -> @Override 	public void setConfigLocations(String[] locations);1329393628;{@inheritDoc}_<p>This implementation accepts individual location values as fully-qualified class_names (typically {@code @Configuration} classes) or fully-qualified packages to_scan. During {@link #loadBeanDefinitions}, these locations will be processed in_order, first attempting to load values as a class, and upon class loading failure_the value is assumed to be a package to be scanned._<p>Note that this method exists primarily for compatibility with Spring's_{@link org.springframework.web.context.ContextLoader} and that if this application_context is being configured through an_{@link org.springframework.context.ApplicationContextInitializer}, use of the_{@link #register} and {@link #scan} methods are preferred._@see #scan(String...)_@see #register(Class...)_@see #setConfigLocation(String)_@see #loadBeanDefinitions(DefaultListableBeanFactory);@Override_	public void setConfigLocations(String[] locations) {_		super.setConfigLocations(locations)__	};inherit,doc,p,this,implementation,accepts,individual,location,values,as,fully,qualified,class,names,typically,code,configuration,classes,or,fully,qualified,packages,to,scan,during,link,load,bean,definitions,these,locations,will,be,processed,in,order,first,attempting,to,load,values,as,a,class,and,upon,class,loading,failure,the,value,is,assumed,to,be,a,package,to,be,scanned,p,note,that,this,method,exists,primarily,for,compatibility,with,spring,s,link,org,springframework,web,context,context,loader,and,that,if,this,application,context,is,being,configured,through,an,link,org,springframework,context,application,context,initializer,use,of,the,link,register,and,link,scan,methods,are,preferred,see,scan,string,see,register,class,see,set,config,location,string,see,load,bean,definitions,default,listable,bean,factory;override,public,void,set,config,locations,string,locations,super,set,config,locations,locations
AnnotationConfigWebApplicationContext -> @Override 	public void setConfigLocations(String[] locations);1335774711;{@inheritDoc}_<p>This implementation accepts individual location values as fully-qualified class_names (typically {@code @Configuration} classes) or fully-qualified packages to_scan. During {@link #loadBeanDefinitions}, these locations will be processed in_order, first attempting to load values as a class, and upon class loading failure_the value is assumed to be a package to be scanned._<p>Note that this method exists primarily for compatibility with Spring's_{@link org.springframework.web.context.ContextLoader} and that if this application_context is being configured through an_{@link org.springframework.context.ApplicationContextInitializer}, use of the_{@link #register} and {@link #scan} methods are preferred._@see #scan(String...)_@see #register(Class...)_@see #setConfigLocation(String)_@see #loadBeanDefinitions(DefaultListableBeanFactory);@Override_	public void setConfigLocations(String[] locations) {_		super.setConfigLocations(locations)__	};inherit,doc,p,this,implementation,accepts,individual,location,values,as,fully,qualified,class,names,typically,code,configuration,classes,or,fully,qualified,packages,to,scan,during,link,load,bean,definitions,these,locations,will,be,processed,in,order,first,attempting,to,load,values,as,a,class,and,upon,class,loading,failure,the,value,is,assumed,to,be,a,package,to,be,scanned,p,note,that,this,method,exists,primarily,for,compatibility,with,spring,s,link,org,springframework,web,context,context,loader,and,that,if,this,application,context,is,being,configured,through,an,link,org,springframework,context,application,context,initializer,use,of,the,link,register,and,link,scan,methods,are,preferred,see,scan,string,see,register,class,see,set,config,location,string,see,load,bean,definitions,default,listable,bean,factory;override,public,void,set,config,locations,string,locations,super,set,config,locations,locations
AnnotationConfigWebApplicationContext -> @Override 	public void setConfigLocation(String location);1328020251;{@inheritDoc}_<p>This implementation accepts delimited values in the form of fully-qualified_class names, (typically of {@code Configuration} classes) or fully-qualified_packages to scan for annotated classes. During {@link #loadBeanDefinitions}, these_locations will be processed in their given order, first attempting to load each_value as a class. If class loading fails (i.e. a {@code ClassNotFoundException}_occurs), the value is assumed to be a package and scanning is attempted._<p>Note that this method exists primarily for compatibility with Spring's_{@link org.springframework.web.context.ContextLoader} and that if this application_context is being configured through an_{@link org.springframework.context.ApplicationContextInitializer}, use of the_{@link #register} and {@link #scan} methods are preferred._@see #register(Class...)_@see #scan(String...)_@see #setConfigLocations(String[])_@see #loadBeanDefinitions(DefaultListableBeanFactory);@Override_	public void setConfigLocation(String location) {_		super.setConfigLocation(location)__	};inherit,doc,p,this,implementation,accepts,delimited,values,in,the,form,of,fully,qualified,class,names,typically,of,code,configuration,classes,or,fully,qualified,packages,to,scan,for,annotated,classes,during,link,load,bean,definitions,these,locations,will,be,processed,in,their,given,order,first,attempting,to,load,each,value,as,a,class,if,class,loading,fails,i,e,a,code,class,not,found,exception,occurs,the,value,is,assumed,to,be,a,package,and,scanning,is,attempted,p,note,that,this,method,exists,primarily,for,compatibility,with,spring,s,link,org,springframework,web,context,context,loader,and,that,if,this,application,context,is,being,configured,through,an,link,org,springframework,context,application,context,initializer,use,of,the,link,register,and,link,scan,methods,are,preferred,see,register,class,see,scan,string,see,set,config,locations,string,see,load,bean,definitions,default,listable,bean,factory;override,public,void,set,config,location,string,location,super,set,config,location,location
AnnotationConfigWebApplicationContext -> @Override 	public void setConfigLocation(String location);1329393628;{@inheritDoc}_<p>This implementation accepts delimited values in the form of fully-qualified_class names, (typically of {@code Configuration} classes) or fully-qualified_packages to scan for annotated classes. During {@link #loadBeanDefinitions}, these_locations will be processed in their given order, first attempting to load each_value as a class. If class loading fails (i.e. a {@code ClassNotFoundException}_occurs), the value is assumed to be a package and scanning is attempted._<p>Note that this method exists primarily for compatibility with Spring's_{@link org.springframework.web.context.ContextLoader} and that if this application_context is being configured through an_{@link org.springframework.context.ApplicationContextInitializer}, use of the_{@link #register} and {@link #scan} methods are preferred._@see #register(Class...)_@see #scan(String...)_@see #setConfigLocations(String[])_@see #loadBeanDefinitions(DefaultListableBeanFactory);@Override_	public void setConfigLocation(String location) {_		super.setConfigLocation(location)__	};inherit,doc,p,this,implementation,accepts,delimited,values,in,the,form,of,fully,qualified,class,names,typically,of,code,configuration,classes,or,fully,qualified,packages,to,scan,for,annotated,classes,during,link,load,bean,definitions,these,locations,will,be,processed,in,their,given,order,first,attempting,to,load,each,value,as,a,class,if,class,loading,fails,i,e,a,code,class,not,found,exception,occurs,the,value,is,assumed,to,be,a,package,and,scanning,is,attempted,p,note,that,this,method,exists,primarily,for,compatibility,with,spring,s,link,org,springframework,web,context,context,loader,and,that,if,this,application,context,is,being,configured,through,an,link,org,springframework,context,application,context,initializer,use,of,the,link,register,and,link,scan,methods,are,preferred,see,register,class,see,scan,string,see,set,config,locations,string,see,load,bean,definitions,default,listable,bean,factory;override,public,void,set,config,location,string,location,super,set,config,location,location
AnnotationConfigWebApplicationContext -> @Override 	public void setConfigLocation(String location);1335774711;{@inheritDoc}_<p>This implementation accepts delimited values in the form of fully-qualified_class names, (typically of {@code Configuration} classes) or fully-qualified_packages to scan for annotated classes. During {@link #loadBeanDefinitions}, these_locations will be processed in their given order, first attempting to load each_value as a class. If class loading fails (i.e. a {@code ClassNotFoundException}_occurs), the value is assumed to be a package and scanning is attempted._<p>Note that this method exists primarily for compatibility with Spring's_{@link org.springframework.web.context.ContextLoader} and that if this application_context is being configured through an_{@link org.springframework.context.ApplicationContextInitializer}, use of the_{@link #register} and {@link #scan} methods are preferred._@see #register(Class...)_@see #scan(String...)_@see #setConfigLocations(String[])_@see #loadBeanDefinitions(DefaultListableBeanFactory);@Override_	public void setConfigLocation(String location) {_		super.setConfigLocation(location)__	};inherit,doc,p,this,implementation,accepts,delimited,values,in,the,form,of,fully,qualified,class,names,typically,of,code,configuration,classes,or,fully,qualified,packages,to,scan,for,annotated,classes,during,link,load,bean,definitions,these,locations,will,be,processed,in,their,given,order,first,attempting,to,load,each,value,as,a,class,if,class,loading,fails,i,e,a,code,class,not,found,exception,occurs,the,value,is,assumed,to,be,a,package,and,scanning,is,attempted,p,note,that,this,method,exists,primarily,for,compatibility,with,spring,s,link,org,springframework,web,context,context,loader,and,that,if,this,application,context,is,being,configured,through,an,link,org,springframework,context,application,context,initializer,use,of,the,link,register,and,link,scan,methods,are,preferred,see,register,class,see,scan,string,see,set,config,locations,string,see,load,bean,definitions,default,listable,bean,factory;override,public,void,set,config,location,string,location,super,set,config,location,location
AnnotationConfigWebApplicationContext -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1377641093;Set a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}._@see AnnotatedBeanDefinitionReader#setBeanNameGenerator_@see ClassPathBeanDefinitionScanner#setBeanNameGenerator;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = beanNameGenerator__	};set,a,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,link,org,springframework,context,annotation,annotation,bean,name,generator,see,annotated,bean,definition,reader,set,bean,name,generator,see,class,path,bean,definition,scanner,set,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator
AnnotationConfigWebApplicationContext -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1390432589;Set a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}._@see AnnotatedBeanDefinitionReader#setBeanNameGenerator_@see ClassPathBeanDefinitionScanner#setBeanNameGenerator;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = beanNameGenerator__	};set,a,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,link,org,springframework,context,annotation,annotation,bean,name,generator,see,annotated,bean,definition,reader,set,bean,name,generator,see,class,path,bean,definition,scanner,set,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator
AnnotationConfigWebApplicationContext -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1403775783;Set a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}._@see AnnotatedBeanDefinitionReader#setBeanNameGenerator_@see ClassPathBeanDefinitionScanner#setBeanNameGenerator;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = beanNameGenerator__	};set,a,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,link,org,springframework,context,annotation,annotation,bean,name,generator,see,annotated,bean,definition,reader,set,bean,name,generator,see,class,path,bean,definition,scanner,set,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator
AnnotationConfigWebApplicationContext -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1449488792;Set a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}._@see AnnotatedBeanDefinitionReader#setBeanNameGenerator_@see ClassPathBeanDefinitionScanner#setBeanNameGenerator;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = beanNameGenerator__	};set,a,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,link,org,springframework,context,annotation,annotation,bean,name,generator,see,annotated,bean,definition,reader,set,bean,name,generator,see,class,path,bean,definition,scanner,set,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator
AnnotationConfigWebApplicationContext -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1467730834;Set a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}._@see AnnotatedBeanDefinitionReader#setBeanNameGenerator_@see ClassPathBeanDefinitionScanner#setBeanNameGenerator;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = beanNameGenerator__	};set,a,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,link,org,springframework,context,annotation,annotation,bean,name,generator,see,annotated,bean,definition,reader,set,bean,name,generator,see,class,path,bean,definition,scanner,set,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator
AnnotationConfigWebApplicationContext -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1495868221;Set a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}._@see AnnotatedBeanDefinitionReader#setBeanNameGenerator_@see ClassPathBeanDefinitionScanner#setBeanNameGenerator;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = beanNameGenerator__	};set,a,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,link,org,springframework,context,annotation,annotation,bean,name,generator,see,annotated,bean,definition,reader,set,bean,name,generator,see,class,path,bean,definition,scanner,set,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator
AnnotationConfigWebApplicationContext -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1496837955;Set a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}._<p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}._@see AnnotatedBeanDefinitionReader#setBeanNameGenerator_@see ClassPathBeanDefinitionScanner#setBeanNameGenerator;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = beanNameGenerator__	};set,a,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,p,default,is,link,org,springframework,context,annotation,annotation,bean,name,generator,see,annotated,bean,definition,reader,set,bean,name,generator,see,class,path,bean,definition,scanner,set,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator
AnnotationConfigWebApplicationContext -> @Nullable 	protected BeanNameGenerator getBeanNameGenerator();1495868221;Return the custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;@Nullable_	protected BeanNameGenerator getBeanNameGenerator() {_		return this.beanNameGenerator__	};return,the,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;nullable,protected,bean,name,generator,get,bean,name,generator,return,this,bean,name,generator
AnnotationConfigWebApplicationContext -> @Nullable 	protected BeanNameGenerator getBeanNameGenerator();1496837955;Return the custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;@Nullable_	protected BeanNameGenerator getBeanNameGenerator() {_		return this.beanNameGenerator__	};return,the,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;nullable,protected,bean,name,generator,get,bean,name,generator,return,this,bean,name,generator
AnnotationConfigWebApplicationContext -> @Nullable 	protected BeanNameGenerator getBeanNameGenerator();1500448076;Return the custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;@Nullable_	protected BeanNameGenerator getBeanNameGenerator() {_		return this.beanNameGenerator__	};return,the,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;nullable,protected,bean,name,generator,get,bean,name,generator,return,this,bean,name,generator
AnnotationConfigWebApplicationContext -> @Nullable 	protected BeanNameGenerator getBeanNameGenerator();1518810557;Return the custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;@Nullable_	protected BeanNameGenerator getBeanNameGenerator() {_		return this.beanNameGenerator__	};return,the,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;nullable,protected,bean,name,generator,get,bean,name,generator,return,this,bean,name,generator
AnnotationConfigWebApplicationContext -> @Nullable 	protected BeanNameGenerator getBeanNameGenerator();1519295386;Return the custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;@Nullable_	protected BeanNameGenerator getBeanNameGenerator() {_		return this.beanNameGenerator__	};return,the,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;nullable,protected,bean,name,generator,get,bean,name,generator,return,this,bean,name,generator
AnnotationConfigWebApplicationContext -> @Nullable 	protected BeanNameGenerator getBeanNameGenerator();1519514499;Return the custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;@Nullable_	protected BeanNameGenerator getBeanNameGenerator() {_		return this.beanNameGenerator__	};return,the,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;nullable,protected,bean,name,generator,get,bean,name,generator,return,this,bean,name,generator
AnnotationConfigWebApplicationContext -> @Nullable 	protected BeanNameGenerator getBeanNameGenerator();1532091916;Return the custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;@Nullable_	protected BeanNameGenerator getBeanNameGenerator() {_		return this.beanNameGenerator__	};return,the,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;nullable,protected,bean,name,generator,get,bean,name,generator,return,this,bean,name,generator
AnnotationConfigWebApplicationContext -> @Nullable 	protected BeanNameGenerator getBeanNameGenerator();1532555403;Return the custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;@Nullable_	protected BeanNameGenerator getBeanNameGenerator() {_		return this.beanNameGenerator__	};return,the,custom,link,bean,name,generator,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;nullable,protected,bean,name,generator,get,bean,name,generator,return,this,bean,name,generator
AnnotationConfigWebApplicationContext -> protected ScopeMetadataResolver getScopeMetadataResolver();1328020251;Provide a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any._<p>Default is {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}._@see AnnotatedBeanDefinitionReader#setScopeMetadataResolver_@see ClassPathBeanDefinitionScanner#setScopeMetadataResolver;protected ScopeMetadataResolver getScopeMetadataResolver() {_		return this.scopeMetadataResolver__	};provide,a,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any,p,default,is,link,org,springframework,context,annotation,annotation,scope,metadata,resolver,see,annotated,bean,definition,reader,set,scope,metadata,resolver,see,class,path,bean,definition,scanner,set,scope,metadata,resolver;protected,scope,metadata,resolver,get,scope,metadata,resolver,return,this,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> protected ScopeMetadataResolver getScopeMetadataResolver();1329393628;Provide a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any._<p>Default is {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}._@see AnnotatedBeanDefinitionReader#setScopeMetadataResolver_@see ClassPathBeanDefinitionScanner#setScopeMetadataResolver;protected ScopeMetadataResolver getScopeMetadataResolver() {_		return this.scopeMetadataResolver__	};provide,a,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any,p,default,is,link,org,springframework,context,annotation,annotation,scope,metadata,resolver,see,annotated,bean,definition,reader,set,scope,metadata,resolver,see,class,path,bean,definition,scanner,set,scope,metadata,resolver;protected,scope,metadata,resolver,get,scope,metadata,resolver,return,this,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> protected ScopeMetadataResolver getScopeMetadataResolver();1335774711;Provide a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any._<p>Default is {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}._@see AnnotatedBeanDefinitionReader#setScopeMetadataResolver_@see ClassPathBeanDefinitionScanner#setScopeMetadataResolver;protected ScopeMetadataResolver getScopeMetadataResolver() {_		return this.scopeMetadataResolver__	};provide,a,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any,p,default,is,link,org,springframework,context,annotation,annotation,scope,metadata,resolver,see,annotated,bean,definition,reader,set,scope,metadata,resolver,see,class,path,bean,definition,scanner,set,scope,metadata,resolver;protected,scope,metadata,resolver,get,scope,metadata,resolver,return,this,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> protected ScopeMetadataResolver getScopeMetadataResolver();1377641093;Return the custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;protected ScopeMetadataResolver getScopeMetadataResolver() {_		return this.scopeMetadataResolver__	};return,the,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;protected,scope,metadata,resolver,get,scope,metadata,resolver,return,this,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> protected ScopeMetadataResolver getScopeMetadataResolver();1390432589;Return the custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;protected ScopeMetadataResolver getScopeMetadataResolver() {_		return this.scopeMetadataResolver__	};return,the,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;protected,scope,metadata,resolver,get,scope,metadata,resolver,return,this,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> protected ScopeMetadataResolver getScopeMetadataResolver();1403775783;Return the custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;protected ScopeMetadataResolver getScopeMetadataResolver() {_		return this.scopeMetadataResolver__	};return,the,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;protected,scope,metadata,resolver,get,scope,metadata,resolver,return,this,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> protected ScopeMetadataResolver getScopeMetadataResolver();1449488792;Return the custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;protected ScopeMetadataResolver getScopeMetadataResolver() {_		return this.scopeMetadataResolver__	};return,the,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;protected,scope,metadata,resolver,get,scope,metadata,resolver,return,this,scope,metadata,resolver
AnnotationConfigWebApplicationContext -> protected ScopeMetadataResolver getScopeMetadataResolver();1467730834;Return the custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}_and/or {@link ClassPathBeanDefinitionScanner}, if any.;protected ScopeMetadataResolver getScopeMetadataResolver() {_		return this.scopeMetadataResolver__	};return,the,custom,link,scope,metadata,resolver,for,use,with,link,annotated,bean,definition,reader,and,or,link,class,path,bean,definition,scanner,if,any;protected,scope,metadata,resolver,get,scope,metadata,resolver,return,this,scope,metadata,resolver
