commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public DefaultCodecs defaultCodecs() {     return this.defaultCodecs. }
false;public;1;4;;@Override public void registerDefaults(boolean shouldRegister) {     this.defaultCodecs.registerDefaults(shouldRegister). }
false;public;0;4;;@Override public CustomCodecs customCodecs() {     return this.customCodecs. }
false;public;0;13;;@Override public List<HttpMessageReader<?>> getReaders() {     List<HttpMessageReader<?>> result = new ArrayList<>().     result.addAll(this.defaultCodecs.getTypedReaders()).     result.addAll(this.customCodecs.getTypedReaders()).     result.addAll(this.defaultCodecs.getObjectReaders()).     result.addAll(this.customCodecs.getObjectReaders()).     result.addAll(this.defaultCodecs.getCatchAllReaders()).     return result. }
false;public;0;4;;@Override public List<HttpMessageWriter<?>> getWriters() {     return getWritersInternal(false). }
true;protected;1;12;/**  * Internal method that returns the configured writers.  * @param forMultipart whether to returns writers for general use ("false"),  * or for multipart requests only ("true"). Generally the two sets are the  * same except for the multipart writer itself.  */ ;/**  * Internal method that returns the configured writers.  * @param forMultipart whether to returns writers for general use ("false"),  * or for multipart requests only ("true"). Generally the two sets are the  * same except for the multipart writer itself.  */ protected List<HttpMessageWriter<?>> getWritersInternal(boolean forMultipart) {     List<HttpMessageWriter<?>> result = new ArrayList<>().     result.addAll(this.defaultCodecs.getTypedWriters(forMultipart)).     result.addAll(this.customCodecs.getTypedWriters()).     result.addAll(this.defaultCodecs.getObjectWriters(forMultipart)).     result.addAll(this.customCodecs.getObjectWriters()).     result.addAll(this.defaultCodecs.getCatchAllWriters()).     return result. }
false;public;1;4;;@Override public void decoder(Decoder<?> decoder) {     reader(new DecoderHttpMessageReader<>(decoder)). }
false;public;1;4;;@Override public void encoder(Encoder<?> encoder) {     writer(new EncoderHttpMessageWriter<>(encoder)). }
false;public;1;5;;@Override public void reader(HttpMessageReader<?> reader) {     boolean canReadToObject = reader.canRead(ResolvableType.forClass(Object.class), null).     (canReadToObject ? this.objectReaders : this.typedReaders).add(reader). }
false;public;1;5;;@Override public void writer(HttpMessageWriter<?> writer) {     boolean canWriteObject = writer.canWrite(ResolvableType.forClass(Object.class), null).     (canWriteObject ? this.objectWriters : this.typedWriters).add(writer). }
false;;0;3;;// Package private accessors... List<HttpMessageReader<?>> getTypedReaders() {     return this.typedReaders. }
false;;0;3;;List<HttpMessageWriter<?>> getTypedWriters() {     return this.typedWriters. }
false;;0;3;;List<HttpMessageReader<?>> getObjectReaders() {     return this.objectReaders. }
false;;0;3;;List<HttpMessageWriter<?>> getObjectWriters() {     return this.objectWriters. }
