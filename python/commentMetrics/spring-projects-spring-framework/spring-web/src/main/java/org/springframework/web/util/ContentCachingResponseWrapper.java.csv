commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void setStatus(int sc) {     super.setStatus(sc).     this.statusCode = sc. }
false;public;2;6;;@SuppressWarnings("deprecation") @Override public void setStatus(int sc, String sm) {     super.setStatus(sc, sm).     this.statusCode = sc. }
false;public;1;12;;@Override public void sendError(int sc) throws IOException {     copyBodyToResponse(false).     try {         super.sendError(sc).     } catch (IllegalStateException ex) {         // Possibly on Tomcat when called too late: fall back to silent setStatus         super.setStatus(sc).     }     this.statusCode = sc. }
false;public;2;13;;@Override @SuppressWarnings("deprecation") public void sendError(int sc, String msg) throws IOException {     copyBodyToResponse(false).     try {         super.sendError(sc, msg).     } catch (IllegalStateException ex) {         // Possibly on Tomcat when called too late: fall back to silent setStatus         super.setStatus(sc, msg).     }     this.statusCode = sc. }
false;public;1;5;;@Override public void sendRedirect(String location) throws IOException {     copyBodyToResponse(false).     super.sendRedirect(location). }
false;public;0;7;;@Override public ServletOutputStream getOutputStream() throws IOException {     if (this.outputStream == null) {         this.outputStream = new ResponseServletOutputStream(getResponse().getOutputStream()).     }     return this.outputStream. }
false;public;0;9;;@Override public PrintWriter getWriter() throws IOException {     if (this.writer == null) {         String characterEncoding = getCharacterEncoding().         this.writer = (characterEncoding != null ? new ResponsePrintWriter(characterEncoding) : new ResponsePrintWriter(WebUtils.DEFAULT_CHARACTER_ENCODING)).     }     return this.writer. }
false;public;0;4;;@Override public void flushBuffer() throws IOException { // do not flush the underlying response as the content as not been copied to it yet }
false;public;1;7;;@Override public void setContentLength(int len) {     if (len > this.content.size()) {         this.content.resize(len).     }     this.contentLength = len. }
true;public;1;11;// Overrides Servlet 3.1 setContentLengthLong(long) at runtime ;// Overrides Servlet 3.1 setContentLengthLong(long) at runtime public void setContentLengthLong(long len) {     if (len > Integer.MAX_VALUE) {         throw new IllegalArgumentException("Content-Length exceeds ContentCachingResponseWrapper's maximum (" + Integer.MAX_VALUE + "): " + len).     }     int lenInt = (int) len.     if (lenInt > this.content.size()) {         this.content.resize(lenInt).     }     this.contentLength = lenInt. }
false;public;1;6;;@Override public void setBufferSize(int size) {     if (size > this.content.size()) {         this.content.resize(size).     } }
false;public;0;4;;@Override public void resetBuffer() {     this.content.reset(). }
false;public;0;5;;@Override public void reset() {     super.reset().     this.content.reset(). }
true;public;0;3;/**  * Return the status code as specified on the response.  */ ;/**  * Return the status code as specified on the response.  */ public int getStatusCode() {     return this.statusCode. }
true;public;0;3;/**  * Return the cached response content as a byte array.  */ ;/**  * Return the cached response content as a byte array.  */ public byte[] getContentAsByteArray() {     return this.content.toByteArray(). }
true;public;0;3;/**  * Return an {@link InputStream} to the cached content.  * @since 4.2  */ ;/**  * Return an {@link InputStream} to the cached content.  * @since 4.2  */ public InputStream getContentInputStream() {     return this.content.getInputStream(). }
true;public;0;3;/**  * Return the current size of the cached content.  * @since 4.2  */ ;/**  * Return the current size of the cached content.  * @since 4.2  */ public int getContentSize() {     return this.content.size(). }
true;public;0;3;/**  * Copy the complete cached body content to the response.  * @since 4.2  */ ;/**  * Copy the complete cached body content to the response.  * @since 4.2  */ public void copyBodyToResponse() throws IOException {     copyBodyToResponse(true). }
true;protected;1;14;/**  * Copy the cached body content to the response.  * @param complete whether to set a corresponding content length  * for the complete cached body content  * @since 4.2  */ ;/**  * Copy the cached body content to the response.  * @param complete whether to set a corresponding content length  * for the complete cached body content  * @since 4.2  */ protected void copyBodyToResponse(boolean complete) throws IOException {     if (this.content.size() > 0) {         HttpServletResponse rawResponse = (HttpServletResponse) getResponse().         if ((complete || this.contentLength != null) && !rawResponse.isCommitted()) {             rawResponse.setContentLength(complete ? this.content.size() : this.contentLength).             this.contentLength = null.         }         this.content.writeTo(rawResponse.getOutputStream()).         this.content.reset().         if (complete) {             super.flushBuffer().         }     } }
false;public;1;4;;@Override public void write(int b) throws IOException {     content.write(b). }
false;public;3;4;;@Override public void write(byte[] b, int off, int len) throws IOException {     content.write(b, off, len). }
false;public;0;4;;@Override public boolean isReady() {     return this.os.isReady(). }
false;public;1;4;;@Override public void setWriteListener(WriteListener writeListener) {     this.os.setWriteListener(writeListener). }
false;public;3;5;;@Override public void write(char[] buf, int off, int len) {     super.write(buf, off, len).     super.flush(). }
false;public;3;5;;@Override public void write(String s, int off, int len) {     super.write(s, off, len).     super.flush(). }
false;public;1;5;;@Override public void write(int c) {     super.write(c).     super.flush(). }
