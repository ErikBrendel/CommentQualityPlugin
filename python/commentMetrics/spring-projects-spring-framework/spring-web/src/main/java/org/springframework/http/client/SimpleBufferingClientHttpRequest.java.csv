commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getMethodValue() {     return this.connection.getRequestMethod(). }
false;public;0;9;;@Override public URI getURI() {     try {         return this.connection.getURL().toURI().     } catch (URISyntaxException ex) {         throw new IllegalStateException("Could not get HttpURLConnection URI: " + ex.getMessage(), ex).     } }
false;protected;2;20;;@Override protected ClientHttpResponse executeInternal(HttpHeaders headers, byte[] bufferedOutput) throws IOException {     addHeaders(this.connection, headers).     // JDK <1.8 doesn't support getOutputStream with HTTP DELETE     if (getMethod() == HttpMethod.DELETE && bufferedOutput.length == 0) {         this.connection.setDoOutput(false).     }     if (this.connection.getDoOutput() && this.outputStreaming) {         this.connection.setFixedLengthStreamingMode(bufferedOutput.length).     }     this.connection.connect().     if (this.connection.getDoOutput()) {         FileCopyUtils.copy(bufferedOutput, this.connection.getOutputStream()).     } else {         // Immediately trigger the request in a no-output scenario as well         this.connection.getResponseCode().     }     return new SimpleClientHttpResponse(this.connection). }
true;static;2;14;/**  * Add the given headers to the given HTTP connection.  * @param connection the connection to add the headers to  * @param headers the headers to add  */ ;/**  * Add the given headers to the given HTTP connection.  * @param connection the connection to add the headers to  * @param headers the headers to add  */ static void addHeaders(HttpURLConnection connection, HttpHeaders headers) {     headers.forEach((headerName, headerValues) -> {         if (HttpHeaders.COOKIE.equalsIgnoreCase(headerName)) {             // RFC 6265             String headerValue = StringUtils.collectionToDelimitedString(headerValues, ". ").             connection.setRequestProperty(headerName, headerValue).         } else {             for (String headerValue : headerValues) {                 String actualHeaderValue = headerValue != null ? headerValue : "".                 connection.addRequestProperty(headerName, actualHeaderValue).             }         }     }). }
