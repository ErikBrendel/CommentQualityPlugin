commented;modifiers;parameterAmount;loc;comment;code
true;public;2;13;/**  * Reads a remote invocation from the request, executes it,  * and writes the remote invocation result to the response.  * @see #readRemoteInvocation(HttpServletRequest)  * @see #invokeAndCreateResult(org.springframework.remoting.support.RemoteInvocation, Object)  * @see #writeRemoteInvocationResult(HttpServletRequest, HttpServletResponse, RemoteInvocationResult)  */ ;/**  * Reads a remote invocation from the request, executes it,  * and writes the remote invocation result to the response.  * @see #readRemoteInvocation(HttpServletRequest)  * @see #invokeAndCreateResult(org.springframework.remoting.support.RemoteInvocation, Object)  * @see #writeRemoteInvocationResult(HttpServletRequest, HttpServletResponse, RemoteInvocationResult)  */ @Override public void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {     try {         RemoteInvocation invocation = readRemoteInvocation(request).         RemoteInvocationResult result = invokeAndCreateResult(invocation, getProxy()).         writeRemoteInvocationResult(request, response, result).     } catch (ClassNotFoundException ex) {         throw new NestedServletException("Class not found during deserialization", ex).     } }
true;protected;1;5;/**  * Read a RemoteInvocation from the given HTTP request.  * <p>Delegates to {@link #readRemoteInvocation(HttpServletRequest, InputStream)} with  * the {@link HttpServletRequest#getInputStream() servlet request's input stream}.  * @param request current HTTP request  * @return the RemoteInvocation object  * @throws IOException in case of I/O failure  * @throws ClassNotFoundException if thrown by deserialization  */ ;/**  * Read a RemoteInvocation from the given HTTP request.  * <p>Delegates to {@link #readRemoteInvocation(HttpServletRequest, InputStream)} with  * the {@link HttpServletRequest#getInputStream() servlet request's input stream}.  * @param request current HTTP request  * @return the RemoteInvocation object  * @throws IOException in case of I/O failure  * @throws ClassNotFoundException if thrown by deserialization  */ protected RemoteInvocation readRemoteInvocation(HttpServletRequest request) throws IOException, ClassNotFoundException {     return readRemoteInvocation(request, request.getInputStream()). }
true;protected;2;11;/**  * Deserialize a RemoteInvocation object from the given InputStream.  * <p>Gives {@link #decorateInputStream} a chance to decorate the stream  * first (for example, for custom encryption or compression). Creates a  * {@link org.springframework.remoting.rmi.CodebaseAwareObjectInputStream}  * and calls {@link #doReadRemoteInvocation} to actually read the object.  * <p>Can be overridden for custom serialization of the invocation.  * @param request current HTTP request  * @param is the InputStream to read from  * @return the RemoteInvocation object  * @throws IOException in case of I/O failure  * @throws ClassNotFoundException if thrown during deserialization  */ ;/**  * Deserialize a RemoteInvocation object from the given InputStream.  * <p>Gives {@link #decorateInputStream} a chance to decorate the stream  * first (for example, for custom encryption or compression). Creates a  * {@link org.springframework.remoting.rmi.CodebaseAwareObjectInputStream}  * and calls {@link #doReadRemoteInvocation} to actually read the object.  * <p>Can be overridden for custom serialization of the invocation.  * @param request current HTTP request  * @param is the InputStream to read from  * @return the RemoteInvocation object  * @throws IOException in case of I/O failure  * @throws ClassNotFoundException if thrown during deserialization  */ protected RemoteInvocation readRemoteInvocation(HttpServletRequest request, InputStream is) throws IOException, ClassNotFoundException {     ObjectInputStream ois = createObjectInputStream(decorateInputStream(request, is)).     try {         return doReadRemoteInvocation(ois).     } finally {         ois.close().     } }
true;protected;2;3;/**  * Return the InputStream to use for reading remote invocations,  * potentially decorating the given original InputStream.  * <p>The default implementation returns the given stream as-is.  * Can be overridden, for example, for custom encryption or compression.  * @param request current HTTP request  * @param is the original InputStream  * @return the potentially decorated InputStream  * @throws IOException in case of I/O failure  */ ;/**  * Return the InputStream to use for reading remote invocations,  * potentially decorating the given original InputStream.  * <p>The default implementation returns the given stream as-is.  * Can be overridden, for example, for custom encryption or compression.  * @param request current HTTP request  * @param is the original InputStream  * @return the potentially decorated InputStream  * @throws IOException in case of I/O failure  */ protected InputStream decorateInputStream(HttpServletRequest request, InputStream is) throws IOException {     return is. }
true;protected;3;7;/**  * Write the given RemoteInvocationResult to the given HTTP response.  * @param request current HTTP request  * @param response current HTTP response  * @param result the RemoteInvocationResult object  * @throws IOException in case of I/O failure  */ ;/**  * Write the given RemoteInvocationResult to the given HTTP response.  * @param request current HTTP request  * @param response current HTTP response  * @param result the RemoteInvocationResult object  * @throws IOException in case of I/O failure  */ protected void writeRemoteInvocationResult(HttpServletRequest request, HttpServletResponse response, RemoteInvocationResult result) throws IOException {     response.setContentType(getContentType()).     writeRemoteInvocationResult(request, response, result, response.getOutputStream()). }
true;protected;4;13;/**  * Serialize the given RemoteInvocation to the given OutputStream.  * <p>The default implementation gives {@link #decorateOutputStream} a chance  * to decorate the stream first (for example, for custom encryption or compression).  * Creates an {@link java.io.ObjectOutputStream} for the final stream and calls  * {@link #doWriteRemoteInvocationResult} to actually write the object.  * <p>Can be overridden for custom serialization of the invocation.  * @param request current HTTP request  * @param response current HTTP response  * @param result the RemoteInvocationResult object  * @param os the OutputStream to write to  * @throws IOException in case of I/O failure  * @see #decorateOutputStream  * @see #doWriteRemoteInvocationResult  */ ;/**  * Serialize the given RemoteInvocation to the given OutputStream.  * <p>The default implementation gives {@link #decorateOutputStream} a chance  * to decorate the stream first (for example, for custom encryption or compression).  * Creates an {@link java.io.ObjectOutputStream} for the final stream and calls  * {@link #doWriteRemoteInvocationResult} to actually write the object.  * <p>Can be overridden for custom serialization of the invocation.  * @param request current HTTP request  * @param response current HTTP response  * @param result the RemoteInvocationResult object  * @param os the OutputStream to write to  * @throws IOException in case of I/O failure  * @see #decorateOutputStream  * @see #doWriteRemoteInvocationResult  */ protected void writeRemoteInvocationResult(HttpServletRequest request, HttpServletResponse response, RemoteInvocationResult result, OutputStream os) throws IOException {     ObjectOutputStream oos = createObjectOutputStream(new FlushGuardedOutputStream(decorateOutputStream(request, response, os))).     try {         doWriteRemoteInvocationResult(result, oos).     } finally {         oos.close().     } }
true;protected;3;5;/**  * Return the OutputStream to use for writing remote invocation results,  * potentially decorating the given original OutputStream.  * <p>The default implementation returns the given stream as-is.  * Can be overridden, for example, for custom encryption or compression.  * @param request current HTTP request  * @param response current HTTP response  * @param os the original OutputStream  * @return the potentially decorated OutputStream  * @throws IOException in case of I/O failure  */ ;/**  * Return the OutputStream to use for writing remote invocation results,  * potentially decorating the given original OutputStream.  * <p>The default implementation returns the given stream as-is.  * Can be overridden, for example, for custom encryption or compression.  * @param request current HTTP request  * @param response current HTTP response  * @param os the original OutputStream  * @return the potentially decorated OutputStream  * @throws IOException in case of I/O failure  */ protected OutputStream decorateOutputStream(HttpServletRequest request, HttpServletResponse response, OutputStream os) throws IOException {     return os. }
false;public;0;4;;@Override public void flush() throws IOException { // Do nothing on flush }
