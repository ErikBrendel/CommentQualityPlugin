commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public DataBufferFactory bufferFactory() {     return this.bufferFactory. }
false;public;0;4;;@Override public HttpMethod getMethod() {     return this.httpMethod. }
false;public;0;4;;@Override public URI getURI() {     return this.uri. }
false;public;1;7;;@Override public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {     return doCommit(() -> {         Flux<ByteBuf> byteBufFlux = Flux.from(body).map(NettyDataBufferFactory::toByteBuf).         return this.outbound.send(byteBufFlux).then().     }). }
false;public;1;5;;@Override public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {     Publisher<Publisher<ByteBuf>> byteBufs = Flux.from(body).map(ReactorClientHttpRequest::toByteBufs).     return doCommit(() -> this.outbound.sendGroups(byteBufs).then()). }
false;private,static;1;3;;private static Publisher<ByteBuf> toByteBufs(Publisher<? extends DataBuffer> dataBuffers) {     return Flux.from(dataBuffers).map(NettyDataBufferFactory::toByteBuf). }
false;public;3;4;;@Override public Mono<Void> writeWith(Path file, long position, long count) {     return doCommit(() -> this.outbound.sendFile(file, position, count).then()). }
false;public;0;4;;@Override public Mono<Void> setComplete() {     return doCommit(this.outbound::then). }
false;protected;0;4;;@Override protected void applyHeaders() {     getHeaders().forEach((key, value) -> this.request.requestHeaders().set(key, value)). }
false;protected;0;6;;@Override protected void applyCookies() {     getCookies().values().stream().flatMap(Collection::stream).map(cookie -> new DefaultCookie(cookie.getName(), cookie.getValue())).forEach(this.request::addCookie). }
