commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;7;;private static HttpClient initHttpClient(ReactorResourceFactory resourceFactory) {     ConnectionProvider provider = resourceFactory.getConnectionProvider().     LoopResources resources = resourceFactory.getLoopResources().     Assert.notNull(provider, "No ConnectionProvider: is ReactorResourceFactory not initialized yet?").     Assert.notNull(resources, "No LoopResources: is ReactorResourceFactory not initialized yet?").     return HttpClient.create(provider).tcpConfiguration(tcpClient -> tcpClient.runOn(resources)). }
false;public;3;15;;@Override public Mono<ClientHttpResponse> connect(HttpMethod method, URI uri, Function<? super ClientHttpRequest, Mono<Void>> requestCallback) {     if (!uri.isAbsolute()) {         return Mono.error(new IllegalArgumentException("URI is not absolute: " + uri)).     }     return this.httpClient.request(io.netty.handler.codec.http.HttpMethod.valueOf(method.name())).uri(uri.toString()).send((request, outbound) -> requestCallback.apply(adaptRequest(method, uri, request, outbound))).responseConnection((res, con) -> Mono.just(adaptResponse(res, con.inbound(), con.outbound().alloc()))).next(). }
false;private;4;5;;private ReactorClientHttpRequest adaptRequest(HttpMethod method, URI uri, HttpClientRequest request, NettyOutbound nettyOutbound) {     return new ReactorClientHttpRequest(method, uri, request, nettyOutbound). }
false;private;3;5;;private ClientHttpResponse adaptResponse(HttpClientResponse response, NettyInbound nettyInbound, ByteBufAllocator allocator) {     return new ReactorClientHttpResponse(response, nettyInbound, allocator). }
