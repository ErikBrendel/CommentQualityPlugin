commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the bean name of the MultipartResolver to fetch from Spring's  * root application context. Default is "filterMultipartResolver".  */ ;/**  * Set the bean name of the MultipartResolver to fetch from Spring's  * root application context. Default is "filterMultipartResolver".  */ public void setMultipartResolverBeanName(String multipartResolverBeanName) {     this.multipartResolverBeanName = multipartResolverBeanName. }
true;protected;0;3;/**  * Return the bean name of the MultipartResolver to fetch from Spring's  * root application context.  */ ;/**  * Return the bean name of the MultipartResolver to fetch from Spring's  * root application context.  */ protected String getMultipartResolverBeanName() {     return this.multipartResolverBeanName. }
true;protected;3;30;/**  * Check for a multipart request via this filter's MultipartResolver,  * and wrap the original request with a MultipartHttpServletRequest if appropriate.  * <p>All later elements in the filter chain, most importantly servlets, benefit  * from proper parameter extraction in the multipart case, and are able to cast to  * MultipartHttpServletRequest if they need to.  */ ;/**  * Check for a multipart request via this filter's MultipartResolver,  * and wrap the original request with a MultipartHttpServletRequest if appropriate.  * <p>All later elements in the filter chain, most importantly servlets, benefit  * from proper parameter extraction in the multipart case, and are able to cast to  * MultipartHttpServletRequest if they need to.  */ @Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {     MultipartResolver multipartResolver = lookupMultipartResolver(request).     HttpServletRequest processedRequest = request.     if (multipartResolver.isMultipart(processedRequest)) {         if (logger.isTraceEnabled()) {             logger.trace("Resolving multipart request").         }         processedRequest = multipartResolver.resolveMultipart(processedRequest).     } else {         // A regular request...         if (logger.isTraceEnabled()) {             logger.trace("Not a multipart request").         }     }     try {         filterChain.doFilter(processedRequest, response).     } finally {         if (processedRequest instanceof MultipartHttpServletRequest) {             multipartResolver.cleanupMultipart((MultipartHttpServletRequest) processedRequest).         }     } }
true;protected;1;3;/**  * Look up the MultipartResolver that this filter should use,  * taking the current HTTP request as argument.  * <p>The default implementation delegates to the {@code lookupMultipartResolver}  * without arguments.  * @return the MultipartResolver to use  * @see #lookupMultipartResolver()  */ ;/**  * Look up the MultipartResolver that this filter should use,  * taking the current HTTP request as argument.  * <p>The default implementation delegates to the {@code lookupMultipartResolver}  * without arguments.  * @return the MultipartResolver to use  * @see #lookupMultipartResolver()  */ protected MultipartResolver lookupMultipartResolver(HttpServletRequest request) {     return lookupMultipartResolver(). }
true;protected;0;13;/**  * Look for a MultipartResolver bean in the root web application context.  * Supports a "multipartResolverBeanName" filter init param. the default  * bean name is "filterMultipartResolver".  * <p>This can be overridden to use a custom MultipartResolver instance,  * for example if not using a Spring web application context.  * @return the MultipartResolver instance  */ ;/**  * Look for a MultipartResolver bean in the root web application context.  * Supports a "multipartResolverBeanName" filter init param. the default  * bean name is "filterMultipartResolver".  * <p>This can be overridden to use a custom MultipartResolver instance,  * for example if not using a Spring web application context.  * @return the MultipartResolver instance  */ protected MultipartResolver lookupMultipartResolver() {     WebApplicationContext wac = WebApplicationContextUtils.getWebApplicationContext(getServletContext()).     String beanName = getMultipartResolverBeanName().     if (wac != null && wac.containsBean(beanName)) {         if (logger.isDebugEnabled()) {             logger.debug("Using MultipartResolver '" + beanName + "' for MultipartFilter").         }         return wac.getBean(beanName, MultipartResolver.class).     } else {         return this.defaultMultipartResolver.     } }
