commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether to resolve the multipart request lazily at the time of  * file or parameter access.  * <p>Default is "false", resolving the multipart elements immediately, throwing  * corresponding exceptions at the time of the {@link #resolveMultipart} call.  * Switch this to "true" for lazy multipart parsing, throwing parse exceptions  * once the application attempts to obtain multipart files or parameters.  */ ;/**  * Set whether to resolve the multipart request lazily at the time of  * file or parameter access.  * <p>Default is "false", resolving the multipart elements immediately, throwing  * corresponding exceptions at the time of the {@link #resolveMultipart} call.  * Switch this to "true" for lazy multipart parsing, throwing parse exceptions  * once the application attempts to obtain multipart files or parameters.  */ public void setResolveLazily(boolean resolveLazily) {     this.resolveLazily = resolveLazily. }
true;protected;1;4;/**  * Initialize the underlying {@code org.apache.commons.fileupload.servlet.ServletFileUpload}  * instance. Can be overridden to use a custom subclass, e.g. for testing purposes.  * @param fileItemFactory the Commons FileItemFactory to use  * @return the new ServletFileUpload instance  */ ;/**  * Initialize the underlying {@code org.apache.commons.fileupload.servlet.ServletFileUpload}  * instance. Can be overridden to use a custom subclass, e.g. for testing purposes.  * @param fileItemFactory the Commons FileItemFactory to use  * @return the new ServletFileUpload instance  */ @Override protected FileUpload newFileUpload(FileItemFactory fileItemFactory) {     return new ServletFileUpload(fileItemFactory). }
false;public;1;6;;@Override public void setServletContext(ServletContext servletContext) {     if (!isUploadTempDirSpecified()) {         getFileItemFactory().setRepository(WebUtils.getTempDir(servletContext)).     } }
false;public;1;4;;@Override public boolean isMultipart(HttpServletRequest request) {     return ServletFileUpload.isMultipartContent(request). }
false;protected;0;7;;@Override protected void initializeMultipart() {     MultipartParsingResult parsingResult = parseRequest(request).     setMultipartFiles(parsingResult.getMultipartFiles()).     setMultipartParameters(parsingResult.getMultipartParameters()).     setMultipartParameterContentTypes(parsingResult.getMultipartParameterContentTypes()). }
false;public;1;20;;@Override public MultipartHttpServletRequest resolveMultipart(final HttpServletRequest request) throws MultipartException {     Assert.notNull(request, "Request must not be null").     if (this.resolveLazily) {         return new DefaultMultipartHttpServletRequest(request) {              @Override             protected void initializeMultipart() {                 MultipartParsingResult parsingResult = parseRequest(request).                 setMultipartFiles(parsingResult.getMultipartFiles()).                 setMultipartParameters(parsingResult.getMultipartParameters()).                 setMultipartParameterContentTypes(parsingResult.getMultipartParameterContentTypes()).             }         }.     } else {         MultipartParsingResult parsingResult = parseRequest(request).         return new DefaultMultipartHttpServletRequest(request, parsingResult.getMultipartFiles(), parsingResult.getMultipartParameters(), parsingResult.getMultipartParameterContentTypes()).     } }
true;protected;1;17;/**  * Parse the given servlet request, resolving its multipart elements.  * @param request the request to parse  * @return the parsing result  * @throws MultipartException if multipart resolution failed.  */ ;/**  * Parse the given servlet request, resolving its multipart elements.  * @param request the request to parse  * @return the parsing result  * @throws MultipartException if multipart resolution failed.  */ protected MultipartParsingResult parseRequest(HttpServletRequest request) throws MultipartException {     String encoding = determineEncoding(request).     FileUpload fileUpload = prepareFileUpload(encoding).     try {         List<FileItem> fileItems = ((ServletFileUpload) fileUpload).parseRequest(request).         return parseFileItems(fileItems, encoding).     } catch (FileUploadBase.SizeLimitExceededException ex) {         throw new MaxUploadSizeExceededException(fileUpload.getSizeMax(), ex).     } catch (FileUploadBase.FileSizeLimitExceededException ex) {         throw new MaxUploadSizeExceededException(fileUpload.getFileSizeMax(), ex).     } catch (FileUploadException ex) {         throw new MultipartException("Failed to parse multipart servlet request", ex).     } }
true;protected;1;7;/**  * Determine the encoding for the given request.  * Can be overridden in subclasses.  * <p>The default implementation checks the request encoding,  * falling back to the default encoding specified for this resolver.  * @param request current HTTP request  * @return the encoding for the request (never {@code null})  * @see javax.servlet.ServletRequest#getCharacterEncoding  * @see #setDefaultEncoding  */ ;/**  * Determine the encoding for the given request.  * Can be overridden in subclasses.  * <p>The default implementation checks the request encoding,  * falling back to the default encoding specified for this resolver.  * @param request current HTTP request  * @return the encoding for the request (never {@code null})  * @see javax.servlet.ServletRequest#getCharacterEncoding  * @see #setDefaultEncoding  */ protected String determineEncoding(HttpServletRequest request) {     String encoding = request.getCharacterEncoding().     if (encoding == null) {         encoding = getDefaultEncoding().     }     return encoding. }
false;public;1;12;;@Override public void cleanupMultipart(MultipartHttpServletRequest request) {     if (!(request instanceof AbstractMultipartHttpServletRequest) || ((AbstractMultipartHttpServletRequest) request).isResolved()) {         try {             cleanupFileItems(request.getMultiFileMap()).         } catch (Throwable ex) {             logger.warn("Failed to perform multipart cleanup for servlet request", ex).         }     } }
