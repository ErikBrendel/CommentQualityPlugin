commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * If set to {@code true}, an {@link XmlMapper} will be created using its  * default constructor. This is only applicable to {@link #build()} calls,  * not to {@link #configure} calls.  */ ;/**  * If set to {@code true}, an {@link XmlMapper} will be created using its  * default constructor. This is only applicable to {@link #build()} calls,  * not to {@link #configure} calls.  */ public Jackson2ObjectMapperBuilder createXmlMapper(boolean createXmlMapper) {     this.createXmlMapper = createXmlMapper.     return this. }
true;public;1;4;/**  * Define the {@link JsonFactory} to be used to create the {@link ObjectMapper}  * instance.  * @since 5.0  */ ;/**  * Define the {@link JsonFactory} to be used to create the {@link ObjectMapper}  * instance.  * @since 5.0  */ public Jackson2ObjectMapperBuilder factory(JsonFactory factory) {     this.factory = factory.     return this. }
true;public;1;4;/**  * Define the format for date/time with the given {@link DateFormat}.  * <p>Note: Setting this property makes the exposed {@link ObjectMapper}  * non-thread-safe, according to Jackson's thread safety rules.  * @see #simpleDateFormat(String)  */ ;/**  * Define the format for date/time with the given {@link DateFormat}.  * <p>Note: Setting this property makes the exposed {@link ObjectMapper}  * non-thread-safe, according to Jackson's thread safety rules.  * @see #simpleDateFormat(String)  */ public Jackson2ObjectMapperBuilder dateFormat(DateFormat dateFormat) {     this.dateFormat = dateFormat.     return this. }
true;public;1;4;/**  * Define the date/time format with a {@link SimpleDateFormat}.  * <p>Note: Setting this property makes the exposed {@link ObjectMapper}  * non-thread-safe, according to Jackson's thread safety rules.  * @see #dateFormat(DateFormat)  */ ;/**  * Define the date/time format with a {@link SimpleDateFormat}.  * <p>Note: Setting this property makes the exposed {@link ObjectMapper}  * non-thread-safe, according to Jackson's thread safety rules.  * @see #dateFormat(DateFormat)  */ public Jackson2ObjectMapperBuilder simpleDateFormat(String format) {     this.dateFormat = new SimpleDateFormat(format).     return this. }
true;public;1;4;/**  * Override the default {@link Locale} to use for formatting.  * Default value used is {@link Locale#getDefault()}.  * @since 4.1.5  */ ;/**  * Override the default {@link Locale} to use for formatting.  * Default value used is {@link Locale#getDefault()}.  * @since 4.1.5  */ public Jackson2ObjectMapperBuilder locale(Locale locale) {     this.locale = locale.     return this. }
true;public;1;4;/**  * Override the default {@link Locale} to use for formatting.  * Default value used is {@link Locale#getDefault()}.  * @param localeString the locale ID as a String representation  * @since 4.1.5  */ ;/**  * Override the default {@link Locale} to use for formatting.  * Default value used is {@link Locale#getDefault()}.  * @param localeString the locale ID as a String representation  * @since 4.1.5  */ public Jackson2ObjectMapperBuilder locale(String localeString) {     this.locale = StringUtils.parseLocale(localeString).     return this. }
true;public;1;4;/**  * Override the default {@link TimeZone} to use for formatting.  * Default value used is UTC (NOT local timezone).  * @since 4.1.5  */ ;/**  * Override the default {@link TimeZone} to use for formatting.  * Default value used is UTC (NOT local timezone).  * @since 4.1.5  */ public Jackson2ObjectMapperBuilder timeZone(TimeZone timeZone) {     this.timeZone = timeZone.     return this. }
true;public;1;4;/**  * Override the default {@link TimeZone} to use for formatting.  * Default value used is UTC (NOT local timezone).  * @param timeZoneString the zone ID as a String representation  * @since 4.1.5  */ ;/**  * Override the default {@link TimeZone} to use for formatting.  * Default value used is UTC (NOT local timezone).  * @param timeZoneString the zone ID as a String representation  * @since 4.1.5  */ public Jackson2ObjectMapperBuilder timeZone(String timeZoneString) {     this.timeZone = StringUtils.parseTimeZoneString(timeZoneString).     return this. }
true;public;1;4;/**  * Set an {@link AnnotationIntrospector} for both serialization and deserialization.  */ ;/**  * Set an {@link AnnotationIntrospector} for both serialization and deserialization.  */ public Jackson2ObjectMapperBuilder annotationIntrospector(AnnotationIntrospector annotationIntrospector) {     this.annotationIntrospector = annotationIntrospector.     return this. }
true;public;1;4;/**  * Specify a {@link com.fasterxml.jackson.databind.PropertyNamingStrategy} to  * configure the {@link ObjectMapper} with.  */ ;/**  * Specify a {@link com.fasterxml.jackson.databind.PropertyNamingStrategy} to  * configure the {@link ObjectMapper} with.  */ public Jackson2ObjectMapperBuilder propertyNamingStrategy(PropertyNamingStrategy propertyNamingStrategy) {     this.propertyNamingStrategy = propertyNamingStrategy.     return this. }
true;public;1;4;/**  * Specify a {@link TypeResolverBuilder} to use for Jackson's default typing.  * @since 4.2.2  */ ;/**  * Specify a {@link TypeResolverBuilder} to use for Jackson's default typing.  * @since 4.2.2  */ public Jackson2ObjectMapperBuilder defaultTyping(TypeResolverBuilder<?> typeResolverBuilder) {     this.defaultTyping = typeResolverBuilder.     return this. }
true;public;1;4;/**  * Set a custom inclusion strategy for serialization.  * @see com.fasterxml.jackson.annotation.JsonInclude.Include  */ ;/**  * Set a custom inclusion strategy for serialization.  * @see com.fasterxml.jackson.annotation.JsonInclude.Include  */ public Jackson2ObjectMapperBuilder serializationInclusion(JsonInclude.Include serializationInclusion) {     this.serializationInclusion = serializationInclusion.     return this. }
true;public;1;4;/**  * Set the global filters to use in order to support {@link JsonFilter @JsonFilter} annotated POJO.  * @since 4.2  * @see MappingJacksonValue#setFilters(FilterProvider)  */ ;/**  * Set the global filters to use in order to support {@link JsonFilter @JsonFilter} annotated POJO.  * @since 4.2  * @see MappingJacksonValue#setFilters(FilterProvider)  */ public Jackson2ObjectMapperBuilder filters(FilterProvider filters) {     this.filters = filters.     return this. }
true;public;2;4;/**  * Add mix-in annotations to use for augmenting specified class or interface.  * @param target class (or interface) whose annotations to effectively override  * @param mixinSource class (or interface) whose annotations are to be "added"  * to target's annotations as value  * @since 4.1.2  * @see com.fasterxml.jackson.databind.ObjectMapper#addMixInAnnotations(Class, Class)  */ ;/**  * Add mix-in annotations to use for augmenting specified class or interface.  * @param target class (or interface) whose annotations to effectively override  * @param mixinSource class (or interface) whose annotations are to be "added"  * to target's annotations as value  * @since 4.1.2  * @see com.fasterxml.jackson.databind.ObjectMapper#addMixInAnnotations(Class, Class)  */ public Jackson2ObjectMapperBuilder mixIn(Class<?> target, Class<?> mixinSource) {     this.mixIns.put(target, mixinSource).     return this. }
true;public;1;4;/**  * Add mix-in annotations to use for augmenting specified class or interface.  * @param mixIns a Map of entries with target classes (or interface) whose annotations  * to effectively override as key and mix-in classes (or interface) whose  * annotations are to be "added" to target's annotations as value.  * @since 4.1.2  * @see com.fasterxml.jackson.databind.ObjectMapper#addMixInAnnotations(Class, Class)  */ ;/**  * Add mix-in annotations to use for augmenting specified class or interface.  * @param mixIns a Map of entries with target classes (or interface) whose annotations  * to effectively override as key and mix-in classes (or interface) whose  * annotations are to be "added" to target's annotations as value.  * @since 4.1.2  * @see com.fasterxml.jackson.databind.ObjectMapper#addMixInAnnotations(Class, Class)  */ public Jackson2ObjectMapperBuilder mixIns(Map<Class<?>, Class<?>> mixIns) {     this.mixIns.putAll(mixIns).     return this. }
true;public;1;10;/**  * Configure custom serializers. Each serializer is registered for the type  * returned by {@link JsonSerializer#handledType()}, which must not be {@code null}.  * @see #serializersByType(Map)  */ ;/**  * Configure custom serializers. Each serializer is registered for the type  * returned by {@link JsonSerializer#handledType()}, which must not be {@code null}.  * @see #serializersByType(Map)  */ public Jackson2ObjectMapperBuilder serializers(JsonSerializer<?>... serializers) {     for (JsonSerializer<?> serializer : serializers) {         Class<?> handledType = serializer.handledType().         if (handledType == null || handledType == Object.class) {             throw new IllegalArgumentException("Unknown handled type in " + serializer.getClass().getName()).         }         this.serializers.put(serializer.handledType(), serializer).     }     return this. }
true;public;2;4;/**  * Configure a custom serializer for the given type.  * @since 4.1.2  * @see #serializers(JsonSerializer...)  */ ;/**  * Configure a custom serializer for the given type.  * @since 4.1.2  * @see #serializers(JsonSerializer...)  */ public Jackson2ObjectMapperBuilder serializerByType(Class<?> type, JsonSerializer<?> serializer) {     this.serializers.put(type, serializer).     return this. }
true;public;1;4;/**  * Configure custom serializers for the given types.  * @see #serializers(JsonSerializer...)  */ ;/**  * Configure custom serializers for the given types.  * @see #serializers(JsonSerializer...)  */ public Jackson2ObjectMapperBuilder serializersByType(Map<Class<?>, JsonSerializer<?>> serializers) {     this.serializers.putAll(serializers).     return this. }
true;public;1;10;/**  * Configure custom deserializers. Each deserializer is registered for the type  * returned by {@link JsonDeserializer#handledType()}, which must not be {@code null}.  * @since 4.3  * @see #deserializersByType(Map)  */ ;/**  * Configure custom deserializers. Each deserializer is registered for the type  * returned by {@link JsonDeserializer#handledType()}, which must not be {@code null}.  * @since 4.3  * @see #deserializersByType(Map)  */ public Jackson2ObjectMapperBuilder deserializers(JsonDeserializer<?>... deserializers) {     for (JsonDeserializer<?> deserializer : deserializers) {         Class<?> handledType = deserializer.handledType().         if (handledType == null || handledType == Object.class) {             throw new IllegalArgumentException("Unknown handled type in " + deserializer.getClass().getName()).         }         this.deserializers.put(deserializer.handledType(), deserializer).     }     return this. }
true;public;2;4;/**  * Configure a custom deserializer for the given type.  * @since 4.1.2  */ ;/**  * Configure a custom deserializer for the given type.  * @since 4.1.2  */ public Jackson2ObjectMapperBuilder deserializerByType(Class<?> type, JsonDeserializer<?> deserializer) {     this.deserializers.put(type, deserializer).     return this. }
true;public;1;4;/**  * Configure custom deserializers for the given types.  */ ;/**  * Configure custom deserializers for the given types.  */ public Jackson2ObjectMapperBuilder deserializersByType(Map<Class<?>, JsonDeserializer<?>> deserializers) {     this.deserializers.putAll(deserializers).     return this. }
true;public;1;4;/**  * Shortcut for {@link MapperFeature#AUTO_DETECT_FIELDS} option.  */ ;/**  * Shortcut for {@link MapperFeature#AUTO_DETECT_FIELDS} option.  */ public Jackson2ObjectMapperBuilder autoDetectFields(boolean autoDetectFields) {     this.features.put(MapperFeature.AUTO_DETECT_FIELDS, autoDetectFields).     return this. }
true;public;1;6;/**  * Shortcut for {@link MapperFeature#AUTO_DETECT_SETTERS}/  * {@link MapperFeature#AUTO_DETECT_GETTERS}/{@link MapperFeature#AUTO_DETECT_IS_GETTERS}  * options.  */ ;/**  * Shortcut for {@link MapperFeature#AUTO_DETECT_SETTERS}/  * {@link MapperFeature#AUTO_DETECT_GETTERS}/{@link MapperFeature#AUTO_DETECT_IS_GETTERS}  * options.  */ public Jackson2ObjectMapperBuilder autoDetectGettersSetters(boolean autoDetectGettersSetters) {     this.features.put(MapperFeature.AUTO_DETECT_GETTERS, autoDetectGettersSetters).     this.features.put(MapperFeature.AUTO_DETECT_SETTERS, autoDetectGettersSetters).     this.features.put(MapperFeature.AUTO_DETECT_IS_GETTERS, autoDetectGettersSetters).     return this. }
true;public;1;4;/**  * Shortcut for {@link MapperFeature#DEFAULT_VIEW_INCLUSION} option.  */ ;/**  * Shortcut for {@link MapperFeature#DEFAULT_VIEW_INCLUSION} option.  */ public Jackson2ObjectMapperBuilder defaultViewInclusion(boolean defaultViewInclusion) {     this.features.put(MapperFeature.DEFAULT_VIEW_INCLUSION, defaultViewInclusion).     return this. }
true;public;1;4;/**  * Shortcut for {@link DeserializationFeature#FAIL_ON_UNKNOWN_PROPERTIES} option.  */ ;/**  * Shortcut for {@link DeserializationFeature#FAIL_ON_UNKNOWN_PROPERTIES} option.  */ public Jackson2ObjectMapperBuilder failOnUnknownProperties(boolean failOnUnknownProperties) {     this.features.put(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, failOnUnknownProperties).     return this. }
true;public;1;4;/**  * Shortcut for {@link SerializationFeature#FAIL_ON_EMPTY_BEANS} option.  */ ;/**  * Shortcut for {@link SerializationFeature#FAIL_ON_EMPTY_BEANS} option.  */ public Jackson2ObjectMapperBuilder failOnEmptyBeans(boolean failOnEmptyBeans) {     this.features.put(SerializationFeature.FAIL_ON_EMPTY_BEANS, failOnEmptyBeans).     return this. }
true;public;1;4;/**  * Shortcut for {@link SerializationFeature#INDENT_OUTPUT} option.  */ ;/**  * Shortcut for {@link SerializationFeature#INDENT_OUTPUT} option.  */ public Jackson2ObjectMapperBuilder indentOutput(boolean indentOutput) {     this.features.put(SerializationFeature.INDENT_OUTPUT, indentOutput).     return this. }
true;public;1;4;/**  * Define if a wrapper will be used for indexed (List, array) properties or not by  * default (only applies to {@link XmlMapper}).  * @since 4.3  */ ;/**  * Define if a wrapper will be used for indexed (List, array) properties or not by  * default (only applies to {@link XmlMapper}).  * @since 4.3  */ public Jackson2ObjectMapperBuilder defaultUseWrapper(boolean defaultUseWrapper) {     this.defaultUseWrapper = defaultUseWrapper.     return this. }
true;public;2;4;/**  * Specify visibility to limit what kind of properties are auto-detected.  * @since 5.1  * @see com.fasterxml.jackson.annotation.PropertyAccessor  * @see com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility  */ ;/**  * Specify visibility to limit what kind of properties are auto-detected.  * @since 5.1  * @see com.fasterxml.jackson.annotation.PropertyAccessor  * @see com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility  */ public Jackson2ObjectMapperBuilder visibility(PropertyAccessor accessor, JsonAutoDetect.Visibility visibility) {     this.visibilities.put(accessor, visibility).     return this. }
true;public;1;6;/**  * Specify features to enable.  * @see com.fasterxml.jackson.core.JsonParser.Feature  * @see com.fasterxml.jackson.core.JsonGenerator.Feature  * @see com.fasterxml.jackson.databind.SerializationFeature  * @see com.fasterxml.jackson.databind.DeserializationFeature  * @see com.fasterxml.jackson.databind.MapperFeature  */ ;/**  * Specify features to enable.  * @see com.fasterxml.jackson.core.JsonParser.Feature  * @see com.fasterxml.jackson.core.JsonGenerator.Feature  * @see com.fasterxml.jackson.databind.SerializationFeature  * @see com.fasterxml.jackson.databind.DeserializationFeature  * @see com.fasterxml.jackson.databind.MapperFeature  */ public Jackson2ObjectMapperBuilder featuresToEnable(Object... featuresToEnable) {     for (Object feature : featuresToEnable) {         this.features.put(feature, Boolean.TRUE).     }     return this. }
true;public;1;6;/**  * Specify features to disable.  * @see com.fasterxml.jackson.core.JsonParser.Feature  * @see com.fasterxml.jackson.core.JsonGenerator.Feature  * @see com.fasterxml.jackson.databind.SerializationFeature  * @see com.fasterxml.jackson.databind.DeserializationFeature  * @see com.fasterxml.jackson.databind.MapperFeature  */ ;/**  * Specify features to disable.  * @see com.fasterxml.jackson.core.JsonParser.Feature  * @see com.fasterxml.jackson.core.JsonGenerator.Feature  * @see com.fasterxml.jackson.databind.SerializationFeature  * @see com.fasterxml.jackson.databind.DeserializationFeature  * @see com.fasterxml.jackson.databind.MapperFeature  */ public Jackson2ObjectMapperBuilder featuresToDisable(Object... featuresToDisable) {     for (Object feature : featuresToDisable) {         this.features.put(feature, Boolean.FALSE).     }     return this. }
true;public;1;3;/**  * Specify one or more modules to be registered with the {@link ObjectMapper}.  * <p>Note: If this is set, no finding of modules is going to happen - not by  * Jackson, and not by Spring either (see {@link #findModulesViaServiceLoader}).  * As a consequence, specifying an empty list here will suppress any kind of  * module detection.  * <p>Specify either this or {@link #modulesToInstall}, not both.  * @since 4.1.5  * @see #modules(List)  * @see com.fasterxml.jackson.databind.Module  */ ;/**  * Specify one or more modules to be registered with the {@link ObjectMapper}.  * <p>Note: If this is set, no finding of modules is going to happen - not by  * Jackson, and not by Spring either (see {@link #findModulesViaServiceLoader}).  * As a consequence, specifying an empty list here will suppress any kind of  * module detection.  * <p>Specify either this or {@link #modulesToInstall}, not both.  * @since 4.1.5  * @see #modules(List)  * @see com.fasterxml.jackson.databind.Module  */ public Jackson2ObjectMapperBuilder modules(Module... modules) {     return modules(Arrays.asList(modules)). }
true;public;1;6;/**  * Set a complete list of modules to be registered with the {@link ObjectMapper}.  * <p>Note: If this is set, no finding of modules is going to happen - not by  * Jackson, and not by Spring either (see {@link #findModulesViaServiceLoader}).  * As a consequence, specifying an empty list here will suppress any kind of  * module detection.  * <p>Specify either this or {@link #modulesToInstall}, not both.  * @see #modules(Module...)  * @see com.fasterxml.jackson.databind.Module  */ ;/**  * Set a complete list of modules to be registered with the {@link ObjectMapper}.  * <p>Note: If this is set, no finding of modules is going to happen - not by  * Jackson, and not by Spring either (see {@link #findModulesViaServiceLoader}).  * As a consequence, specifying an empty list here will suppress any kind of  * module detection.  * <p>Specify either this or {@link #modulesToInstall}, not both.  * @see #modules(Module...)  * @see com.fasterxml.jackson.databind.Module  */ public Jackson2ObjectMapperBuilder modules(List<Module> modules) {     this.modules = new LinkedList<>(modules).     this.findModulesViaServiceLoader = false.     this.findWellKnownModules = false.     return this. }
true;public;1;5;/**  * Specify one or more modules to be registered with the {@link ObjectMapper}.  * <p>Modules specified here will be registered after  * Spring's autodetection of JSR-310 and Joda-Time, or Jackson's  * finding of modules (see {@link #findModulesViaServiceLoader}),  * allowing to eventually override their configuration.  * <p>Specify either this or {@link #modules}, not both.  * @since 4.1.5  * @see com.fasterxml.jackson.databind.Module  */ ;/**  * Specify one or more modules to be registered with the {@link ObjectMapper}.  * <p>Modules specified here will be registered after  * Spring's autodetection of JSR-310 and Joda-Time, or Jackson's  * finding of modules (see {@link #findModulesViaServiceLoader}),  * allowing to eventually override their configuration.  * <p>Specify either this or {@link #modules}, not both.  * @since 4.1.5  * @see com.fasterxml.jackson.databind.Module  */ public Jackson2ObjectMapperBuilder modulesToInstall(Module... modules) {     this.modules = Arrays.asList(modules).     this.findWellKnownModules = true.     return this. }
true;public;1;6;/**  * Specify one or more modules by class to be registered with  * the {@link ObjectMapper}.  * <p>Modules specified here will be registered after  * Spring's autodetection of JSR-310 and Joda-Time, or Jackson's  * finding of modules (see {@link #findModulesViaServiceLoader}),  * allowing to eventually override their configuration.  * <p>Specify either this or {@link #modules}, not both.  * @see #modulesToInstall(Module...)  * @see com.fasterxml.jackson.databind.Module  */ ;/**  * Specify one or more modules by class to be registered with  * the {@link ObjectMapper}.  * <p>Modules specified here will be registered after  * Spring's autodetection of JSR-310 and Joda-Time, or Jackson's  * finding of modules (see {@link #findModulesViaServiceLoader}),  * allowing to eventually override their configuration.  * <p>Specify either this or {@link #modules}, not both.  * @see #modulesToInstall(Module...)  * @see com.fasterxml.jackson.databind.Module  */ @SuppressWarnings("unchecked") public Jackson2ObjectMapperBuilder modulesToInstall(Class<? extends Module>... modules) {     this.moduleClasses = modules.     this.findWellKnownModules = true.     return this. }
true;public;1;4;/**  * Set whether to let Jackson find available modules via the JDK ServiceLoader,  * based on META-INF metadata in the classpath.  * <p>If this mode is not set, Spring's Jackson2ObjectMapperBuilder itself  * will try to find the JSR-310 and Joda-Time support modules on the classpath -  * provided that Java 8 and Joda-Time themselves are available, respectively.  * @see com.fasterxml.jackson.databind.ObjectMapper#findModules()  */ ;/**  * Set whether to let Jackson find available modules via the JDK ServiceLoader,  * based on META-INF metadata in the classpath.  * <p>If this mode is not set, Spring's Jackson2ObjectMapperBuilder itself  * will try to find the JSR-310 and Joda-Time support modules on the classpath -  * provided that Java 8 and Joda-Time themselves are available, respectively.  * @see com.fasterxml.jackson.databind.ObjectMapper#findModules()  */ public Jackson2ObjectMapperBuilder findModulesViaServiceLoader(boolean findModules) {     this.findModulesViaServiceLoader = findModules.     return this. }
true;public;1;4;/**  * Set the ClassLoader to use for loading Jackson extension modules.  */ ;/**  * Set the ClassLoader to use for loading Jackson extension modules.  */ public Jackson2ObjectMapperBuilder moduleClassLoader(ClassLoader moduleClassLoader) {     this.moduleClassLoader = moduleClassLoader.     return this. }
true;public;1;4;/**  * Customize the construction of Jackson handlers ({@link JsonSerializer}, {@link JsonDeserializer},  * {@link KeyDeserializer}, {@code TypeResolverBuilder} and {@code TypeIdResolver}).  * @since 4.1.3  * @see Jackson2ObjectMapperBuilder#applicationContext(ApplicationContext)  */ ;/**  * Customize the construction of Jackson handlers ({@link JsonSerializer}, {@link JsonDeserializer},  * {@link KeyDeserializer}, {@code TypeResolverBuilder} and {@code TypeIdResolver}).  * @since 4.1.3  * @see Jackson2ObjectMapperBuilder#applicationContext(ApplicationContext)  */ public Jackson2ObjectMapperBuilder handlerInstantiator(HandlerInstantiator handlerInstantiator) {     this.handlerInstantiator = handlerInstantiator.     return this. }
true;public;1;4;/**  * Set the Spring {@link ApplicationContext} in order to autowire Jackson handlers ({@link JsonSerializer},  * {@link JsonDeserializer}, {@link KeyDeserializer}, {@code TypeResolverBuilder} and {@code TypeIdResolver}).  * @since 4.1.3  * @see SpringHandlerInstantiator  */ ;/**  * Set the Spring {@link ApplicationContext} in order to autowire Jackson handlers ({@link JsonSerializer},  * {@link JsonDeserializer}, {@link KeyDeserializer}, {@code TypeResolverBuilder} and {@code TypeIdResolver}).  * @since 4.1.3  * @see SpringHandlerInstantiator  */ public Jackson2ObjectMapperBuilder applicationContext(ApplicationContext applicationContext) {     this.applicationContext = applicationContext.     return this. }
true;public;0;14;/**  * Build a new {@link ObjectMapper} instance.  * <p>Each build operation produces an independent {@link ObjectMapper} instance.  * The builder's settings can get modified, with a subsequent build operation  * then producing a new {@link ObjectMapper} based on the most recent settings.  * @return the newly built ObjectMapper  */ ;/**  * Build a new {@link ObjectMapper} instance.  * <p>Each build operation produces an independent {@link ObjectMapper} instance.  * The builder's settings can get modified, with a subsequent build operation  * then producing a new {@link ObjectMapper} based on the most recent settings.  * @return the newly built ObjectMapper  */ @SuppressWarnings("unchecked") public <T extends ObjectMapper> T build() {     ObjectMapper mapper.     if (this.createXmlMapper) {         mapper = (this.defaultUseWrapper != null ? new XmlObjectMapperInitializer().create(this.defaultUseWrapper) : new XmlObjectMapperInitializer().create()).     } else {         mapper = (this.factory != null ? new ObjectMapper(this.factory) : new ObjectMapper()).     }     configure(mapper).     return (T) mapper. }
true;public;1;68;/**  * Configure an existing {@link ObjectMapper} instance with this builder's  * settings. This can be applied to any number of {@code ObjectMappers}.  * @param objectMapper the ObjectMapper to configure  */ ;/**  * Configure an existing {@link ObjectMapper} instance with this builder's  * settings. This can be applied to any number of {@code ObjectMappers}.  * @param objectMapper the ObjectMapper to configure  */ public void configure(ObjectMapper objectMapper) {     Assert.notNull(objectMapper, "ObjectMapper must not be null").     if (this.findModulesViaServiceLoader) {         objectMapper.registerModules(ObjectMapper.findModules(this.moduleClassLoader)).     } else if (this.findWellKnownModules) {         registerWellKnownModulesIfAvailable(objectMapper).     }     if (this.modules != null) {         objectMapper.registerModules(this.modules).     }     if (this.moduleClasses != null) {         for (Class<? extends Module> module : this.moduleClasses) {             objectMapper.registerModule(BeanUtils.instantiateClass(module)).         }     }     if (this.dateFormat != null) {         objectMapper.setDateFormat(this.dateFormat).     }     if (this.locale != null) {         objectMapper.setLocale(this.locale).     }     if (this.timeZone != null) {         objectMapper.setTimeZone(this.timeZone).     }     if (this.annotationIntrospector != null) {         objectMapper.setAnnotationIntrospector(this.annotationIntrospector).     }     if (this.propertyNamingStrategy != null) {         objectMapper.setPropertyNamingStrategy(this.propertyNamingStrategy).     }     if (this.defaultTyping != null) {         objectMapper.setDefaultTyping(this.defaultTyping).     }     if (this.serializationInclusion != null) {         objectMapper.setSerializationInclusion(this.serializationInclusion).     }     if (this.filters != null) {         objectMapper.setFilterProvider(this.filters).     }     this.mixIns.forEach(objectMapper::addMixIn).     if (!this.serializers.isEmpty() || !this.deserializers.isEmpty()) {         SimpleModule module = new SimpleModule().         addSerializers(module).         addDeserializers(module).         objectMapper.registerModule(module).     }     this.visibilities.forEach(objectMapper::setVisibility).     customizeDefaultFeatures(objectMapper).     this.features.forEach((feature, enabled) -> configureFeature(objectMapper, feature, enabled)).     if (this.handlerInstantiator != null) {         objectMapper.setHandlerInstantiator(this.handlerInstantiator).     } else if (this.applicationContext != null) {         objectMapper.setHandlerInstantiator(new SpringHandlerInstantiator(this.applicationContext.getAutowireCapableBeanFactory())).     } }
true;private;1;8;// MappingJackson2MessageConverter default constructors ;// Any change to this method should be also applied to spring-jms and spring-messaging // MappingJackson2MessageConverter default constructors private void customizeDefaultFeatures(ObjectMapper objectMapper) {     if (!this.features.containsKey(MapperFeature.DEFAULT_VIEW_INCLUSION)) {         configureFeature(objectMapper, MapperFeature.DEFAULT_VIEW_INCLUSION, false).     }     if (!this.features.containsKey(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {         configureFeature(objectMapper, DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false).     } }
false;private;1;5;;@SuppressWarnings("unchecked") private <T> void addSerializers(SimpleModule module) {     this.serializers.forEach((type, serializer) -> module.addSerializer((Class<? extends T>) type, (JsonSerializer<T>) serializer)). }
false;private;1;5;;@SuppressWarnings("unchecked") private <T> void addDeserializers(SimpleModule module) {     this.deserializers.forEach((type, deserializer) -> module.addDeserializer((Class<T>) type, (JsonDeserializer<? extends T>) deserializer)). }
false;private;3;20;;private void configureFeature(ObjectMapper objectMapper, Object feature, boolean enabled) {     if (feature instanceof JsonParser.Feature) {         objectMapper.configure((JsonParser.Feature) feature, enabled).     } else if (feature instanceof JsonGenerator.Feature) {         objectMapper.configure((JsonGenerator.Feature) feature, enabled).     } else if (feature instanceof SerializationFeature) {         objectMapper.configure((SerializationFeature) feature, enabled).     } else if (feature instanceof DeserializationFeature) {         objectMapper.configure((DeserializationFeature) feature, enabled).     } else if (feature instanceof MapperFeature) {         objectMapper.configure((MapperFeature) feature, enabled).     } else {         throw new FatalBeanException("Unknown feature class: " + feature.getClass().getName()).     } }
false;private;1;48;;@SuppressWarnings("unchecked") private void registerWellKnownModulesIfAvailable(ObjectMapper objectMapper) {     try {         Class<? extends Module> jdk8Module = (Class<? extends Module>) ClassUtils.forName("com.fasterxml.jackson.datatype.jdk8.Jdk8Module", this.moduleClassLoader).         objectMapper.registerModule(BeanUtils.instantiateClass(jdk8Module)).     } catch (ClassNotFoundException ex) {     // jackson-datatype-jdk8 not available     }     try {         Class<? extends Module> javaTimeModule = (Class<? extends Module>) ClassUtils.forName("com.fasterxml.jackson.datatype.jsr310.JavaTimeModule", this.moduleClassLoader).         objectMapper.registerModule(BeanUtils.instantiateClass(javaTimeModule)).     } catch (ClassNotFoundException ex) {     // jackson-datatype-jsr310 not available     }     // Joda-Time present?     if (ClassUtils.isPresent("org.joda.time.LocalDate", this.moduleClassLoader)) {         try {             Class<? extends Module> jodaModule = (Class<? extends Module>) ClassUtils.forName("com.fasterxml.jackson.datatype.joda.JodaModule", this.moduleClassLoader).             objectMapper.registerModule(BeanUtils.instantiateClass(jodaModule)).         } catch (ClassNotFoundException ex) {         // jackson-datatype-joda not available         }     }     // Kotlin present?     if (KotlinDetector.isKotlinPresent()) {         try {             Class<? extends Module> kotlinModule = (Class<? extends Module>) ClassUtils.forName("com.fasterxml.jackson.module.kotlin.KotlinModule", this.moduleClassLoader).             objectMapper.registerModule(BeanUtils.instantiateClass(kotlinModule)).         } catch (ClassNotFoundException ex) {             if (!kotlinWarningLogged) {                 kotlinWarningLogged = true.                 logger.warn("For Jackson Kotlin classes support please add " + "\"com.fasterxml.jackson.module:jackson-module-kotlin\" to the classpath").             }         }     } }
true;public,static;0;3;/**  * Obtain a {@link Jackson2ObjectMapperBuilder} instance in order to  * build a regular JSON {@link ObjectMapper} instance.  */ ;// Convenience factory methods /**  * Obtain a {@link Jackson2ObjectMapperBuilder} instance in order to  * build a regular JSON {@link ObjectMapper} instance.  */ public static Jackson2ObjectMapperBuilder json() {     return new Jackson2ObjectMapperBuilder(). }
true;public,static;0;3;/**  * Obtain a {@link Jackson2ObjectMapperBuilder} instance in order to  * build an {@link XmlMapper} instance.  */ ;/**  * Obtain a {@link Jackson2ObjectMapperBuilder} instance in order to  * build an {@link XmlMapper} instance.  */ public static Jackson2ObjectMapperBuilder xml() {     return new Jackson2ObjectMapperBuilder().createXmlMapper(true). }
true;public,static;0;3;/**  * Obtain a {@link Jackson2ObjectMapperBuilder} instance in order to  * build a Smile data format {@link ObjectMapper} instance.  * @since 5.0  */ ;/**  * Obtain a {@link Jackson2ObjectMapperBuilder} instance in order to  * build a Smile data format {@link ObjectMapper} instance.  * @since 5.0  */ public static Jackson2ObjectMapperBuilder smile() {     return new Jackson2ObjectMapperBuilder().factory(new SmileFactoryInitializer().create()). }
true;public,static;0;3;/**  * Obtain a {@link Jackson2ObjectMapperBuilder} instance in order to  * build a CBOR data format {@link ObjectMapper} instance.  * @since 5.0  */ ;/**  * Obtain a {@link Jackson2ObjectMapperBuilder} instance in order to  * build a CBOR data format {@link ObjectMapper} instance.  * @since 5.0  */ public static Jackson2ObjectMapperBuilder cbor() {     return new Jackson2ObjectMapperBuilder().factory(new CborFactoryInitializer().create()). }
false;public;0;3;;public ObjectMapper create() {     return new XmlMapper(StaxUtils.createDefensiveInputFactory()). }
false;public;1;5;;public ObjectMapper create(boolean defaultUseWrapper) {     JacksonXmlModule module = new JacksonXmlModule().     module.setDefaultUseWrapper(defaultUseWrapper).     return new XmlMapper(new XmlFactory(StaxUtils.createDefensiveInputFactory()), module). }
false;public;0;3;;public JsonFactory create() {     return new SmileFactory(). }
false;public;0;3;;public JsonFactory create() {     return new CBORFactory(). }
