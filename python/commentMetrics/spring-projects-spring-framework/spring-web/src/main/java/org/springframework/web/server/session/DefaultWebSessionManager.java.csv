commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Configure the id resolution strategy.  * <p>By default an instance of {@link CookieWebSessionIdResolver}.  * @param sessionIdResolver the resolver to use  */ ;/**  * Configure the id resolution strategy.  * <p>By default an instance of {@link CookieWebSessionIdResolver}.  * @param sessionIdResolver the resolver to use  */ public void setSessionIdResolver(WebSessionIdResolver sessionIdResolver) {     Assert.notNull(sessionIdResolver, "WebSessionIdResolver is required").     this.sessionIdResolver = sessionIdResolver. }
true;public;0;3;/**  * Return the configured {@link WebSessionIdResolver}.  */ ;/**  * Return the configured {@link WebSessionIdResolver}.  */ public WebSessionIdResolver getSessionIdResolver() {     return this.sessionIdResolver. }
true;public;1;4;/**  * Configure the persistence strategy.  * <p>By default an instance of {@link InMemoryWebSessionStore}.  * @param sessionStore the persistence strategy to use  */ ;/**  * Configure the persistence strategy.  * <p>By default an instance of {@link InMemoryWebSessionStore}.  * @param sessionStore the persistence strategy to use  */ public void setSessionStore(WebSessionStore sessionStore) {     Assert.notNull(sessionStore, "WebSessionStore is required").     this.sessionStore = sessionStore. }
true;public;0;3;/**  * Return the configured {@link WebSessionStore}.  */ ;/**  * Return the configured {@link WebSessionStore}.  */ public WebSessionStore getSessionStore() {     return this.sessionStore. }
false;public;1;6;;@Override public Mono<WebSession> getSession(ServerWebExchange exchange) {     return Mono.defer(() -> retrieveSession(exchange).switchIfEmpty(this.sessionStore.createWebSession()).doOnNext(session -> exchange.getResponse().beforeCommit(() -> save(exchange, session)))). }
false;private;1;5;;private Mono<WebSession> retrieveSession(ServerWebExchange exchange) {     return Flux.fromIterable(getSessionIdResolver().resolveSessionIds(exchange)).concatMap(this.sessionStore::retrieveSession).next(). }
false;private;2;17;;private Mono<Void> save(ServerWebExchange exchange, WebSession session) {     List<String> ids = getSessionIdResolver().resolveSessionIds(exchange).     if (!session.isStarted() || session.isExpired()) {         if (!ids.isEmpty()) {             // Expired on retrieve or while processing request, or invalidated..             this.sessionIdResolver.expireSession(exchange).         }         return Mono.empty().     }     if (ids.isEmpty() || !session.getId().equals(ids.get(0))) {         this.sessionIdResolver.setSessionId(exchange, session.getId()).     }     return session.save(). }
