commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public <T extends ConstraintValidator<?, ?>> T getInstance(Class<T> key) {     return getWebApplicationContext().getAutowireCapableBeanFactory().createBean(key). }
true;public;1;3;// Bean Validation 1.1 releaseInstance method ;// Bean Validation 1.1 releaseInstance method public void releaseInstance(ConstraintValidator<?, ?> instance) {     getWebApplicationContext().getAutowireCapableBeanFactory().destroyBean(instance). }
true;protected;0;8;/**  * Retrieve the Spring {@link WebApplicationContext} to use.  * The default implementation returns the current {@link WebApplicationContext}  * as registered for the thread context class loader.  * @return the current WebApplicationContext (never {@code null})  * @see ContextLoader#getCurrentWebApplicationContext()  */ ;/**  * Retrieve the Spring {@link WebApplicationContext} to use.  * The default implementation returns the current {@link WebApplicationContext}  * as registered for the thread context class loader.  * @return the current WebApplicationContext (never {@code null})  * @see ContextLoader#getCurrentWebApplicationContext()  */ protected WebApplicationContext getWebApplicationContext() {     WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext().     if (wac == null) {         throw new IllegalStateException("No WebApplicationContext registered for current thread - " + "consider overriding SpringWebConstraintValidatorFactory.getWebApplicationContext()").     }     return wac. }
