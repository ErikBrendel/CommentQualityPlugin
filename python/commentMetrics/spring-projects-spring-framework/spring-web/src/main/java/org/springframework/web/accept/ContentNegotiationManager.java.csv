commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the configured content negotiation strategies.  * @since 3.2.16  */ ;/**  * Return the configured content negotiation strategies.  * @since 3.2.16  */ public List<ContentNegotiationStrategy> getStrategies() {     return this.strategies. }
true;public;1;10;/**  * Find a {@code ContentNegotiationStrategy} of the given type.  * @param strategyType the strategy type  * @return the first matching strategy, or {@code null} if none  * @since 4.3  */ ;/**  * Find a {@code ContentNegotiationStrategy} of the given type.  * @param strategyType the strategy type  * @return the first matching strategy, or {@code null} if none  * @since 4.3  */ @SuppressWarnings("unchecked") @Nullable public <T extends ContentNegotiationStrategy> T getStrategy(Class<T> strategyType) {     for (ContentNegotiationStrategy strategy : getStrategies()) {         if (strategyType.isInstance(strategy)) {             return (T) strategy.         }     }     return null. }
true;public;1;3;/**  * Register more {@code MediaTypeFileExtensionResolver} instances in addition  * to those detected at construction.  * @param resolvers the resolvers to add  */ ;/**  * Register more {@code MediaTypeFileExtensionResolver} instances in addition  * to those detected at construction.  * @param resolvers the resolvers to add  */ public void addFileExtensionResolvers(MediaTypeFileExtensionResolver... resolvers) {     Collections.addAll(this.resolvers, resolvers). }
false;public;1;11;;@Override public List<MediaType> resolveMediaTypes(NativeWebRequest request) throws HttpMediaTypeNotAcceptableException {     for (ContentNegotiationStrategy strategy : this.strategies) {         List<MediaType> mediaTypes = strategy.resolveMediaTypes(request).         if (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) {             continue.         }         return mediaTypes.     }     return MEDIA_TYPE_ALL_LIST. }
false;public;1;8;;@Override public List<String> resolveFileExtensions(MediaType mediaType) {     Set<String> result = new LinkedHashSet<>().     for (MediaTypeFileExtensionResolver resolver : this.resolvers) {         result.addAll(resolver.resolveFileExtensions(mediaType)).     }     return new ArrayList<>(result). }
true;public;0;8;/**  * {@inheritDoc}  * <p>At startup this method returns extensions explicitly registered with  * either {@link PathExtensionContentNegotiationStrategy} or  * {@link ParameterContentNegotiationStrategy}. At runtime if there is a  * "path extension" strategy and its  * {@link PathExtensionContentNegotiationStrategy#setUseRegisteredExtensionsOnly(boolean)  * useRegisteredExtensionsOnly} property is set to "false", the list of extensions may  * increase as file extensions are resolved via  * {@link org.springframework.http.MediaTypeFactory} and cached.  */ ;/**  * {@inheritDoc}  * <p>At startup this method returns extensions explicitly registered with  * either {@link PathExtensionContentNegotiationStrategy} or  * {@link ParameterContentNegotiationStrategy}. At runtime if there is a  * "path extension" strategy and its  * {@link PathExtensionContentNegotiationStrategy#setUseRegisteredExtensionsOnly(boolean)  * useRegisteredExtensionsOnly} property is set to "false", the list of extensions may  * increase as file extensions are resolved via  * {@link org.springframework.http.MediaTypeFactory} and cached.  */ @Override public List<String> getAllFileExtensions() {     Set<String> result = new LinkedHashSet<>().     for (MediaTypeFileExtensionResolver resolver : this.resolvers) {         result.addAll(resolver.getAllFileExtensions()).     }     return new ArrayList<>(result). }
