commented;modifiers;parameterAmount;loc;comment;code
true;public;1;6;/**  * Set CORS configuration based on URL patterns.  */ ;/**  * Set CORS configuration based on URL patterns.  */ public void setCorsConfigurations(@Nullable Map<String, CorsConfiguration> corsConfigurations) {     this.corsConfigurations.clear().     if (corsConfigurations != null) {         corsConfigurations.forEach(this::registerCorsConfiguration).     } }
true;public;2;3;/**  * Register a {@link CorsConfiguration} for the specified path pattern.  */ ;/**  * Register a {@link CorsConfiguration} for the specified path pattern.  */ public void registerCorsConfiguration(String path, CorsConfiguration config) {     this.corsConfigurations.put(this.patternParser.parse(path), config). }
false;public;1;10;;@Override @Nullable public CorsConfiguration getCorsConfiguration(ServerWebExchange exchange) {     PathContainer lookupPath = exchange.getRequest().getPath().pathWithinApplication().     return this.corsConfigurations.entrySet().stream().filter(entry -> entry.getKey().matches(lookupPath)).map(Map.Entry::getValue).findFirst().orElse(null). }
