# id;timestamp;commentText;codeText;commentWords;codeWords
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext servletContext, ServletConfig servletConfig);1412118176;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param servletContext the ServletContext that we're running within_@param servletConfig the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext servletContext, ServletConfig servletConfig) {__		if (servletContext != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, servletContext)__		}__		if (servletConfig != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, servletConfig)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<String, String>()__			if (servletContext != null) {_				Enumeration<?> paramNameEnum = servletContext.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletContext.getInitParameter(paramName))__				}_			}_			if (servletConfig != null) {_				Enumeration<?> paramNameEnum = servletConfig.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletConfig.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<String, Object>()__			if (servletContext != null) {_				Enumeration<?> attrNameEnum = servletContext.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, servletContext.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,servlet,context,the,servlet,context,that,we,re,running,within,param,servlet,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,servlet,context,servlet,config,servlet,config,if,servlet,context,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,servlet,context,if,servlet,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,servlet,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,string,string,if,servlet,context,null,enumeration,param,name,enum,servlet,context,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,context,get,init,parameter,param,name,if,servlet,config,null,enumeration,param,name,enum,servlet,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,string,object,if,servlet,context,null,enumeration,attr,name,enum,servlet,context,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,servlet,context,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext servletContext, ServletConfig servletConfig);1436816047;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param servletContext the ServletContext that we're running within_@param servletConfig the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext servletContext, ServletConfig servletConfig) {__		if (servletContext != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, servletContext)__		}__		if (servletConfig != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, servletConfig)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<String, String>()__			if (servletContext != null) {_				Enumeration<?> paramNameEnum = servletContext.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletContext.getInitParameter(paramName))__				}_			}_			if (servletConfig != null) {_				Enumeration<?> paramNameEnum = servletConfig.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletConfig.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<String, Object>()__			if (servletContext != null) {_				Enumeration<?> attrNameEnum = servletContext.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, servletContext.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,servlet,context,the,servlet,context,that,we,re,running,within,param,servlet,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,servlet,context,servlet,config,servlet,config,if,servlet,context,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,servlet,context,if,servlet,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,servlet,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,string,string,if,servlet,context,null,enumeration,param,name,enum,servlet,context,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,context,get,init,parameter,param,name,if,servlet,config,null,enumeration,param,name,enum,servlet,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,string,object,if,servlet,context,null,enumeration,attr,name,enum,servlet,context,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,servlet,context,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext servletContext, ServletConfig servletConfig);1464879764;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param servletContext the ServletContext that we're running within_@param servletConfig the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext servletContext, ServletConfig servletConfig) {__		if (servletContext != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, servletContext)__		}__		if (servletConfig != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, servletConfig)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<String, String>()__			if (servletContext != null) {_				Enumeration<?> paramNameEnum = servletContext.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletContext.getInitParameter(paramName))__				}_			}_			if (servletConfig != null) {_				Enumeration<?> paramNameEnum = servletConfig.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletConfig.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<String, Object>()__			if (servletContext != null) {_				Enumeration<?> attrNameEnum = servletContext.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, servletContext.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,servlet,context,the,servlet,context,that,we,re,running,within,param,servlet,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,servlet,context,servlet,config,servlet,config,if,servlet,context,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,servlet,context,if,servlet,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,servlet,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,string,string,if,servlet,context,null,enumeration,param,name,enum,servlet,context,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,context,get,init,parameter,param,name,if,servlet,config,null,enumeration,param,name,enum,servlet,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,string,object,if,servlet,context,null,enumeration,attr,name,enum,servlet,context,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,servlet,context,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext servletContext, ServletConfig servletConfig);1467668027;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param servletContext the ServletContext that we're running within_@param servletConfig the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext servletContext, ServletConfig servletConfig) {__		if (servletContext != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, servletContext)__		}__		if (servletConfig != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, servletConfig)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<String, String>()__			if (servletContext != null) {_				Enumeration<?> paramNameEnum = servletContext.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletContext.getInitParameter(paramName))__				}_			}_			if (servletConfig != null) {_				Enumeration<?> paramNameEnum = servletConfig.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletConfig.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<String, Object>()__			if (servletContext != null) {_				Enumeration<?> attrNameEnum = servletContext.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, servletContext.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,servlet,context,the,servlet,context,that,we,re,running,within,param,servlet,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,servlet,context,servlet,config,servlet,config,if,servlet,context,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,servlet,context,if,servlet,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,servlet,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,string,string,if,servlet,context,null,enumeration,param,name,enum,servlet,context,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,context,get,init,parameter,param,name,if,servlet,config,null,enumeration,param,name,enum,servlet,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,string,object,if,servlet,context,null,enumeration,attr,name,enum,servlet,context,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,servlet,context,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext servletContext, ServletConfig servletConfig);1467730834;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param servletContext the ServletContext that we're running within_@param servletConfig the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext servletContext, ServletConfig servletConfig) {__		if (servletContext != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, servletContext)__		}__		if (servletConfig != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, servletConfig)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<>()__			if (servletContext != null) {_				Enumeration<?> paramNameEnum = servletContext.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletContext.getInitParameter(paramName))__				}_			}_			if (servletConfig != null) {_				Enumeration<?> paramNameEnum = servletConfig.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletConfig.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<>()__			if (servletContext != null) {_				Enumeration<?> attrNameEnum = servletContext.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, servletContext.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,servlet,context,the,servlet,context,that,we,re,running,within,param,servlet,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,servlet,context,servlet,config,servlet,config,if,servlet,context,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,servlet,context,if,servlet,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,servlet,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,if,servlet,context,null,enumeration,param,name,enum,servlet,context,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,context,get,init,parameter,param,name,if,servlet,config,null,enumeration,param,name,enum,servlet,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,if,servlet,context,null,enumeration,attr,name,enum,servlet,context,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,servlet,context,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext servletContext, ServletConfig servletConfig);1495868221;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param servletContext the ServletContext that we're running within_@param servletConfig the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext servletContext, ServletConfig servletConfig) {__		if (servletContext != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, servletContext)__		}__		if (servletConfig != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, servletConfig)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<>()__			if (servletContext != null) {_				Enumeration<?> paramNameEnum = servletContext.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletContext.getInitParameter(paramName))__				}_			}_			if (servletConfig != null) {_				Enumeration<?> paramNameEnum = servletConfig.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletConfig.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<>()__			if (servletContext != null) {_				Enumeration<?> attrNameEnum = servletContext.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, servletContext.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,servlet,context,the,servlet,context,that,we,re,running,within,param,servlet,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,servlet,context,servlet,config,servlet,config,if,servlet,context,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,servlet,context,if,servlet,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,servlet,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,if,servlet,context,null,enumeration,param,name,enum,servlet,context,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,context,get,init,parameter,param,name,if,servlet,config,null,enumeration,param,name,enum,servlet,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,if,servlet,context,null,enumeration,attr,name,enum,servlet,context,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,servlet,context,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1328020251;Replace {@code Servlet}-based stub property sources with actual instances_populated with the given context and config objects._@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.web.context.support.WebApplicationContextUtils#initServletPropertySources(MutablePropertySources, ServletContext)_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {_		Assert.notNull(propertySources, "propertySources must not be null")__		if(servletContext != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME)) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,_					new ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if(servletConfig != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME)) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,_					new ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,stub,property,sources,with,actual,instances,populated,with,the,given,context,and,config,objects,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,web,context,support,web,application,context,utils,init,servlet,property,sources,mutable,property,sources,servlet,context,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,standard,servlet,environment,property,sources,replace,standard,servlet,environment,new,servlet,context,property,source,standard,servlet,environment,servlet,context,if,servlet,config,null,property,sources,contains,standard,servlet,environment,property,sources,replace,standard,servlet,environment,new,servlet,config,property,source,standard,servlet,environment,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1329142650;Replace {@code Servlet}-based stub property sources with actual instances_populated with the given context and config objects._@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.web.context.support.WebApplicationContextUtils#initServletPropertySources(MutablePropertySources, ServletContext)_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {_		Assert.notNull(propertySources, "propertySources must not be null")__		if(servletContext != null &&_				propertySources.contains(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, new ServletContextPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if(servletConfig != null &&_				propertySources.contains(SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(SERVLET_CONFIG_PROPERTY_SOURCE_NAME, new ServletConfigPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,stub,property,sources,with,actual,instances,populated,with,the,given,context,and,config,objects,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,web,context,support,web,application,context,utils,init,servlet,property,sources,mutable,property,sources,servlet,context,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,property,sources,get,instanceof,stub,property,source,property,sources,replace,new,servlet,context,property,source,servlet,context,if,servlet,config,null,property,sources,contains,property,sources,get,instanceof,stub,property,source,property,sources,replace,new,servlet,config,property,source,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1351857948;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link PropertySources} to initialize (must not be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {_		Assert.notNull(propertySources, "propertySources must not be null")__		if(servletContext != null &&_				propertySources.contains(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, new ServletContextPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if(servletConfig != null &&_				propertySources.contains(SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(SERVLET_CONFIG_PROPERTY_SOURCE_NAME, new ServletConfigPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,property,sources,get,instanceof,stub,property,source,property,sources,replace,new,servlet,context,property,source,servlet,context,if,servlet,config,null,property,sources,contains,property,sources,get,instanceof,stub,property,source,property,sources,replace,new,servlet,config,property,source,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1355313310;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {_		Assert.notNull(propertySources, "propertySources must not be null")__		if(servletContext != null &&_				propertySources.contains(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, new ServletContextPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if(servletConfig != null &&_				propertySources.contains(SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(SERVLET_CONFIG_PROPERTY_SOURCE_NAME, new ServletConfigPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,property,sources,get,instanceof,stub,property,source,property,sources,replace,new,servlet,context,property,source,servlet,context,if,servlet,config,null,property,sources,contains,property,sources,get,instanceof,stub,property,source,property,sources,replace,new,servlet,config,property,source,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1356735495;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {_		Assert.notNull(propertySources, "propertySources must not be null")__		if(servletContext != null &&_				propertySources.contains(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, new ServletContextPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if(servletConfig != null &&_				propertySources.contains(SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(SERVLET_CONFIG_PROPERTY_SOURCE_NAME, new ServletConfigPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,property,sources,get,instanceof,stub,property,source,property,sources,replace,new,servlet,context,property,source,servlet,context,if,servlet,config,null,property,sources,contains,property,sources,get,instanceof,stub,property,source,property,sources,replace,new,servlet,config,property,source,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1357119239;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {_		Assert.notNull(propertySources, "propertySources must not be null")__		if(servletContext != null &&_				propertySources.contains(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, new ServletContextPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if(servletConfig != null &&_				propertySources.contains(SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(SERVLET_CONFIG_PROPERTY_SOURCE_NAME, new ServletConfigPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,property,sources,get,instanceof,stub,property,source,property,sources,replace,new,servlet,context,property,source,servlet,context,if,servlet,config,null,property,sources,contains,property,sources,get,instanceof,stub,property,source,property,sources,replace,new,servlet,config,property,source,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1368482696;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {_		Assert.notNull(propertySources, "propertySources must not be null")__		if(servletContext != null &&_				propertySources.contains(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, new ServletContextPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if(servletConfig != null &&_				propertySources.contains(SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(SERVLET_CONFIG_PROPERTY_SOURCE_NAME, new ServletConfigPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,property,sources,get,instanceof,stub,property,source,property,sources,replace,new,servlet,context,property,source,servlet,context,if,servlet,config,null,property,sources,contains,property,sources,get,instanceof,stub,property,source,property,sources,replace,new,servlet,config,property,source,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1385501137;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {_		Assert.notNull(propertySources, "propertySources must not be null")__		if(servletContext != null &&_				propertySources.contains(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, new ServletContextPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if(servletConfig != null &&_				propertySources.contains(SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(SERVLET_CONFIG_PROPERTY_SOURCE_NAME, new ServletConfigPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,property,sources,get,instanceof,stub,property,source,property,sources,replace,new,servlet,context,property,source,servlet,context,if,servlet,config,null,property,sources,contains,property,sources,get,instanceof,stub,property,source,property,sources,replace,new,servlet,config,property,source,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1389822826;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {__		Assert.notNull(propertySources, "propertySources must not be null")__		if (servletContext != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,_					new ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if (servletConfig != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,_					new ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,context,property,source,standard,servlet,environment,servlet,context,if,servlet,config,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,config,property,source,standard,servlet,environment,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1389827060;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {__		Assert.notNull(propertySources, "propertySources must not be null")__		if (servletContext != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,_					new ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if (servletConfig != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,_					new ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,context,property,source,standard,servlet,environment,servlet,context,if,servlet,config,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,config,property,source,standard,servlet,environment,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1390507193;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {__		Assert.notNull(propertySources, "propertySources must not be null")__		if (servletContext != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,_					new ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if (servletConfig != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,_					new ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,context,property,source,standard,servlet,environment,servlet,context,if,servlet,config,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,config,property,source,standard,servlet,environment,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1400256389;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {__		Assert.notNull(propertySources, "propertySources must not be null")__		if (servletContext != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,_					new ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if (servletConfig != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,_					new ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,context,property,source,standard,servlet,environment,servlet,context,if,servlet,config,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,config,property,source,standard,servlet,environment,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1412118176;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {__		Assert.notNull(propertySources, "propertySources must not be null")__		if (servletContext != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,_					new ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if (servletConfig != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,_					new ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,context,property,source,standard,servlet,environment,servlet,context,if,servlet,config,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,config,property,source,standard,servlet,environment,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1436816047;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {__		Assert.notNull(propertySources, "propertySources must not be null")__		if (servletContext != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,_					new ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if (servletConfig != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,_					new ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,context,property,source,standard,servlet,environment,servlet,context,if,servlet,config,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,config,property,source,standard,servlet,environment,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1464879764;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {__		Assert.notNull(propertySources, "'propertySources' must not be null")__		if (servletContext != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,_					new ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if (servletConfig != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,_					new ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,context,property,source,standard,servlet,environment,servlet,context,if,servlet,config,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,config,property,source,standard,servlet,environment,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1467668027;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {__		Assert.notNull(propertySources, "'propertySources' must not be null")__		if (servletContext != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,_					new ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if (servletConfig != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,_					new ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,context,property,source,standard,servlet,environment,servlet,context,if,servlet,config,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,config,property,source,standard,servlet,environment,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig);1467730834;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig) {__		Assert.notNull(propertySources, "'propertySources' must not be null")__		if (servletContext != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,_					new ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if (servletConfig != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,_					new ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,context,property,source,standard,servlet,environment,servlet,context,if,servlet,config,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,config,property,source,standard,servlet,environment,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources(MutablePropertySources sources, 			@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig);1508532146;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param sources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(MutablePropertySources sources,_			@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig) {__		Assert.notNull(sources, "'propertySources' must not be null")__		String name = StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME__		if (servletContext != null && sources.contains(name) && sources.get(name) instanceof StubPropertySource) {_			sources.replace(name, new ServletContextPropertySource(name, servletContext))__		}_		name = StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME__		if (servletConfig != null && sources.contains(name) && sources.get(name) instanceof StubPropertySource) {_			sources.replace(name, new ServletConfigPropertySource(name, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,sources,nullable,servlet,context,servlet,context,nullable,servlet,config,servlet,config,assert,not,null,sources,property,sources,must,not,be,null,string,name,standard,servlet,environment,if,servlet,context,null,sources,contains,name,sources,get,name,instanceof,stub,property,source,sources,replace,name,new,servlet,context,property,source,name,servlet,context,name,standard,servlet,environment,if,servlet,config,null,sources,contains,name,sources,get,name,instanceof,stub,property,source,sources,replace,name,new,servlet,config,property,source,name,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources(MutablePropertySources sources, 			@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig);1527090734;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param sources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(MutablePropertySources sources,_			@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig) {__		Assert.notNull(sources, "'propertySources' must not be null")__		String name = StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME__		if (servletContext != null && sources.contains(name) && sources.get(name) instanceof StubPropertySource) {_			sources.replace(name, new ServletContextPropertySource(name, servletContext))__		}_		name = StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME__		if (servletConfig != null && sources.contains(name) && sources.get(name) instanceof StubPropertySource) {_			sources.replace(name, new ServletConfigPropertySource(name, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,sources,nullable,servlet,context,servlet,context,nullable,servlet,config,servlet,config,assert,not,null,sources,property,sources,must,not,be,null,string,name,standard,servlet,environment,if,servlet,context,null,sources,contains,name,sources,get,name,instanceof,stub,property,source,sources,replace,name,new,servlet,context,property,source,name,servlet,context,name,standard,servlet,environment,if,servlet,config,null,sources,contains,name,sources,get,name,instanceof,stub,property,source,sources,replace,name,new,servlet,config,property,source,name,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources(MutablePropertySources sources, 			@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig);1530174524;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param sources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(MutablePropertySources sources,_			@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig) {__		Assert.notNull(sources, "'propertySources' must not be null")__		String name = StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME__		if (servletContext != null && sources.contains(name) && sources.get(name) instanceof StubPropertySource) {_			sources.replace(name, new ServletContextPropertySource(name, servletContext))__		}_		name = StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME__		if (servletConfig != null && sources.contains(name) && sources.get(name) instanceof StubPropertySource) {_			sources.replace(name, new ServletConfigPropertySource(name, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,sources,nullable,servlet,context,servlet,context,nullable,servlet,config,servlet,config,assert,not,null,sources,property,sources,must,not,be,null,string,name,standard,servlet,environment,if,servlet,context,null,sources,contains,name,sources,get,name,instanceof,stub,property,source,sources,replace,name,new,servlet,context,property,source,name,servlet,context,name,standard,servlet,environment,if,servlet,config,null,sources,contains,name,sources,get,name,instanceof,stub,property,source,sources,replace,name,new,servlet,config,property,source,name,servlet,config
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1328020251;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or <code>null</code> if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,code,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1329142650;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or <code>null</code> if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,code,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1351857948;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or <code>null</code> if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,code,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1355313310;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or <code>null</code> if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,code,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1356735495;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1357119239;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1368482696;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1385501137;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1389822826;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1389827060;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1390507193;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1400256389;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1412118176;Find the root {@link WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,link,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1436816047;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1464879764;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1467668027;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc);1467730834;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext getWebApplicationContext(ServletContext sc);1495868221;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;@Nullable_	public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;nullable,public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext getWebApplicationContext(ServletContext sc);1496259743;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;@Nullable_	public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;nullable,public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext getWebApplicationContext(ServletContext sc);1496837955;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;@Nullable_	public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;nullable,public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext getWebApplicationContext(ServletContext sc);1498780456;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;@Nullable_	public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;nullable,public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext getWebApplicationContext(ServletContext sc);1508532146;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;@Nullable_	public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;nullable,public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext getWebApplicationContext(ServletContext sc);1527090734;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;@Nullable_	public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;nullable,public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext getWebApplicationContext(ServletContext sc);1530174524;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc the ServletContext to find the web application context for_@return the root WebApplicationContext for this web app, or {@code null} if none_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;@Nullable_	public static WebApplicationContext getWebApplicationContext(ServletContext sc) {_		return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,the,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,or,code,null,if,none,see,org,springframework,web,context,web,application,context;nullable,public,static,web,application,context,get,web,application,context,servlet,context,sc,return,get,web,application,context,sc,web,application,context
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1328020251;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1329142650;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1351857948;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1355313310;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1356735495;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1357119239;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1368482696;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1385501137;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1389822826;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1389827060;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1390507193;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1400256389;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1412118176;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1436816047;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1464879764;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1467668027;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1467730834;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1495868221;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1496259743;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc);1496837955;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext);1412118176;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext);1436816047;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext);1464879764;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext);1467668027;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext);1467730834;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext);1495868221;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext);1496259743;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext);1496837955;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext);1498780456;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext);1508532146;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext);1527090734;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext);1530174524;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, @Nullable ServletContext sc);1498780456;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, @Nullable ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,nullable,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, @Nullable ServletContext sc);1508532146;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, @Nullable ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,nullable,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, @Nullable ServletContext sc);1527090734;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, @Nullable ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,nullable,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, @Nullable ServletContext sc);1530174524;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, @Nullable ServletContext sc) {_		registerEnvironmentBeans(bf, sc, null)__	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,nullable,servlet,context,sc,register,environment,beans,bf,sc,null
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1328020251;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1329142650;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1351857948;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1355313310;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1356735495;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1357119239;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1368482696;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1385501137;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1389822826;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1389827060;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1390507193;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1400256389;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1412118176;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1436816047;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1464879764;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1467668027;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1467730834;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1495868221;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1496259743;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1496837955;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1498780456;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1508532146;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1527090734;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> private static ServletRequestAttributes currentRequestAttributes();1530174524;Return the current RequestAttributes instance as ServletRequestAttributes._@see RequestContextHolder#currentRequestAttributes();private static ServletRequestAttributes currentRequestAttributes() {_		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes()__		if (!(requestAttr instanceof ServletRequestAttributes)) {_			throw new IllegalStateException("Current request is not a servlet request")__		}_		return (ServletRequestAttributes) requestAttr__	};return,the,current,request,attributes,instance,as,servlet,request,attributes,see,request,context,holder,current,request,attributes;private,static,servlet,request,attributes,current,request,attributes,request,attributes,request,attr,request,context,holder,current,request,attributes,if,request,attr,instanceof,servlet,request,attributes,throw,new,illegal,state,exception,current,request,is,not,a,servlet,request,return,servlet,request,attributes,request,attr
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, @Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig);1495868221;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, @Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig) {__		Assert.notNull(propertySources, "'propertySources' must not be null")__		if (servletContext != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,_					new ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if (servletConfig != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,_					new ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,nullable,servlet,context,servlet,context,nullable,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,context,property,source,standard,servlet,environment,servlet,context,if,servlet,config,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,config,property,source,standard,servlet,environment,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, @Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig);1496259743;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, @Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig) {__		Assert.notNull(propertySources, "'propertySources' must not be null")__		if (servletContext != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,_					new ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if (servletConfig != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,_					new ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,nullable,servlet,context,servlet,context,nullable,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,context,property,source,standard,servlet,environment,servlet,context,if,servlet,config,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,config,property,source,standard,servlet,environment,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, @Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig);1496837955;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, @Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig) {__		Assert.notNull(propertySources, "'propertySources' must not be null")__		if (servletContext != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,_					new ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if (servletConfig != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,_					new ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,nullable,servlet,context,servlet,context,nullable,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,context,property,source,standard,servlet,environment,servlet,context,if,servlet,config,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,config,property,source,standard,servlet,environment,servlet,config
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, @Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig);1498780456;Replace {@code Servlet}-based {@link StubPropertySource stub property sources} with_actual instances populated with the given {@code servletContext} and_{@code servletConfig} objects._<p>This method is idempotent with respect to the fact it may be called any number_of times but will perform replacement of stub property sources with their_corresponding actual property sources once and only once._@param propertySources the {@link MutablePropertySources} to initialize (must not_be {@code null})_@param servletContext the current {@link ServletContext} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME_servlet context property source} has already been initialized)_@param servletConfig the current {@link ServletConfig} (ignored if {@code null}_or if the {@link StandardServletEnvironment#SERVLET_CONFIG_PROPERTY_SOURCE_NAME_servlet config property source} has already been initialized)_@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources();public static void initServletPropertySources(_			MutablePropertySources propertySources, @Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig) {__		Assert.notNull(propertySources, "'propertySources' must not be null")__		if (servletContext != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,_					new ServletContextPropertySource(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext))__		}_		if (servletConfig != null && propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &&_				propertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {_			propertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,_					new ServletConfigPropertySource(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig))__		}_	};replace,code,servlet,based,link,stub,property,source,stub,property,sources,with,actual,instances,populated,with,the,given,code,servlet,context,and,code,servlet,config,objects,p,this,method,is,idempotent,with,respect,to,the,fact,it,may,be,called,any,number,of,times,but,will,perform,replacement,of,stub,property,sources,with,their,corresponding,actual,property,sources,once,and,only,once,param,property,sources,the,link,mutable,property,sources,to,initialize,must,not,be,code,null,param,servlet,context,the,current,link,servlet,context,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,context,property,source,has,already,been,initialized,param,servlet,config,the,current,link,servlet,config,ignored,if,code,null,or,if,the,link,standard,servlet,environment,servlet,config,property,source,has,already,been,initialized,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,nullable,servlet,context,servlet,context,nullable,servlet,config,servlet,config,assert,not,null,property,sources,property,sources,must,not,be,null,if,servlet,context,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,context,property,source,standard,servlet,environment,servlet,context,if,servlet,config,null,property,sources,contains,standard,servlet,environment,property,sources,get,standard,servlet,environment,instanceof,stub,property,source,property,sources,replace,standard,servlet,environment,new,servlet,config,property,source,standard,servlet,environment,servlet,config
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, @Nullable ServletContext sc);1496259743;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, @Nullable ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope())__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(ServletResponse.class, new ResponseObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,nullable,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,servlet,response,class,new,response,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, @Nullable ServletContext sc);1496837955;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, @Nullable ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope())__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(ServletResponse.class, new ResponseObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,nullable,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,servlet,response,class,new,response,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, @Nullable ServletContext sc);1498780456;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, @Nullable ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope())__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(ServletResponse.class, new ResponseObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,nullable,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,servlet,response,class,new,response,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1328020251;Find a custom WebApplicationContext for this web application._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or <code>null</code> if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,web,application,context,for,this,web,application,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,code,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1329142650;Find a custom WebApplicationContext for this web application._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or <code>null</code> if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,web,application,context,for,this,web,application,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,code,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1351857948;Find a custom WebApplicationContext for this web application._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or <code>null</code> if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,web,application,context,for,this,web,application,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,code,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1355313310;Find a custom WebApplicationContext for this web application._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or <code>null</code> if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,web,application,context,for,this,web,application,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,code,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1356735495;Find a custom WebApplicationContext for this web application._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,web,application,context,for,this,web,application,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1357119239;Find a custom WebApplicationContext for this web application._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,web,application,context,for,this,web,application,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1368482696;Find a custom WebApplicationContext for this web application._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,web,application,context,for,this,web,application,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1385501137;Find a custom WebApplicationContext for this web application._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,web,application,context,for,this,web,application,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1389822826;Find a custom WebApplicationContext for this web application._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,web,application,context,for,this,web,application,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1389827060;Find a custom WebApplicationContext for this web application._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,web,application,context,for,this,web,application,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1390507193;Find a custom WebApplicationContext for this web application._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,web,application,context,for,this,web,application,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1400256389;Find a custom WebApplicationContext for this web application._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,web,application,context,for,this,web,application,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1412118176;Find a custom {@link WebApplicationContext} for this web app._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,link,web,application,context,for,this,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1436816047;Find a custom {@code WebApplicationContext} for this web app._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,code,web,application,context,for,this,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1464879764;Find a custom {@code WebApplicationContext} for this web app._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,code,web,application,context,for,this,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1467668027;Find a custom {@code WebApplicationContext} for this web app._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,code,web,application,context,for,this,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1467730834;Find a custom {@code WebApplicationContext} for this web app._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,code,web,application,context,for,this,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1328020251;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false))__		beanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true))__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,false,bean,factory,register,scope,web,application,context,new,session,scope,true,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1329142650;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false))__		beanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true))__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,false,bean,factory,register,scope,web,application,context,new,session,scope,true,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1351857948;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false))__		beanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true))__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,false,bean,factory,register,scope,web,application,context,new,session,scope,true,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1355313310;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false))__		beanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true))__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,false,bean,factory,register,scope,web,application,context,new,session,scope,true,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1356735495;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false))__		beanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true))__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,false,bean,factory,register,scope,web,application,context,new,session,scope,true,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1357119239;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false))__		beanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true))__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,false,bean,factory,register,scope,web,application,context,new,session,scope,true,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1368482696;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false))__		beanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true))__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,false,bean,factory,register,scope,web,application,context,new,session,scope,true,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1385501137;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false))__		beanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true))__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,false,bean,factory,register,scope,web,application,context,new,session,scope,true,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1389822826;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false))__		beanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true))__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,false,bean,factory,register,scope,web,application,context,new,session,scope,true,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1389827060;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false))__		beanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true))__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,false,bean,factory,register,scope,web,application,context,new,session,scope,true,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1390507193;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false))__		beanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true))__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,false,bean,factory,register,scope,web,application,context,new,session,scope,true,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1400256389;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false))__		beanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true))__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(ServletResponse.class, new ResponseObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,false,bean,factory,register,scope,web,application,context,new,session,scope,true,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,servlet,response,class,new,response,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1412118176;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false))__		beanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true))__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(ServletResponse.class, new ResponseObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,false,bean,factory,register,scope,web,application,context,new,session,scope,true,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,servlet,response,class,new,response,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1436816047;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false))__		beanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true))__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(ServletResponse.class, new ResponseObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,false,bean,factory,register,scope,web,application,context,new,session,scope,true,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,servlet,response,class,new,response,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1464879764;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope(false))__		beanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, new SessionScope(true))__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(ServletResponse.class, new ResponseObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,false,bean,factory,register,scope,web,application,context,new,session,scope,true,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,servlet,response,class,new,response,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1467668027;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope())__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(ServletResponse.class, new ResponseObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,servlet,response,class,new,response,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1467730834;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope())__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(ServletResponse.class, new ResponseObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,servlet,response,class,new,response,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc);1495868221;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, ServletContext sc) {_		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope())__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(ServletResponse.class, new ResponseObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,servlet,response,class,new,response,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, 			@Nullable ServletContext sc);1508532146;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory,_			@Nullable ServletContext sc) {__		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope())__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(ServletResponse.class, new ResponseObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,nullable,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,servlet,response,class,new,response,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, 			@Nullable ServletContext sc);1527090734;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory,_			@Nullable ServletContext sc) {__		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope())__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(ServletResponse.class, new ResponseObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,nullable,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,servlet,response,class,new,response,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, 			@Nullable ServletContext sc);1530174524;Register web-specific scopes ("request", "session", "globalSession", "application")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure_@param sc the ServletContext that we're running within;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory,_			@Nullable ServletContext sc) {__		beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, new RequestScope())__		beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, new SessionScope())__		if (sc != null) {_			ServletContextScope appScope = new ServletContextScope(sc)__			beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope)__			_			sc.setAttribute(ServletContextScope.class.getName(), appScope)__		}__		beanFactory.registerResolvableDependency(ServletRequest.class, new RequestObjectFactory())__		beanFactory.registerResolvableDependency(ServletResponse.class, new ResponseObjectFactory())__		beanFactory.registerResolvableDependency(HttpSession.class, new SessionObjectFactory())__		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory())__		if (jsfPresent) {_			FacesDependencyRegistrar.registerFacesDependencies(beanFactory)__		}_	};register,web,specific,scopes,request,session,global,session,application,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,nullable,servlet,context,sc,bean,factory,register,scope,web,application,context,new,request,scope,bean,factory,register,scope,web,application,context,new,session,scope,if,sc,null,servlet,context,scope,app,scope,new,servlet,context,scope,sc,bean,factory,register,scope,web,application,context,app,scope,sc,set,attribute,servlet,context,scope,class,get,name,app,scope,bean,factory,register,resolvable,dependency,servlet,request,class,new,request,object,factory,bean,factory,register,resolvable,dependency,servlet,response,class,new,response,object,factory,bean,factory,register,resolvable,dependency,http,session,class,new,session,object,factory,bean,factory,register,resolvable,dependency,web,request,class,new,web,request,object,factory,if,jsf,present,faces,dependency,registrar,register,faces,dependencies,bean,factory
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1328020251;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1329142650;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1351857948;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1355313310;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1356735495;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1357119239;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1368482696;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1385501137;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1389822826;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1389827060;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1390507193;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1400256389;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1412118176;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1436816047;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1464879764;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1467668027;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1467730834;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1495868221;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1496259743;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1496837955;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1498780456;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1508532146;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1527090734;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory);1530174524;Register web-specific scopes ("request", "session", "globalSession")_with the given BeanFactory, as used by the WebApplicationContext._@param beanFactory the BeanFactory to configure;public static void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {_		registerWebApplicationScopes(beanFactory, null)__	};register,web,specific,scopes,request,session,global,session,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bean,factory,the,bean,factory,to,configure;public,static,void,register,web,application,scopes,configurable,listable,bean,factory,bean,factory,register,web,application,scopes,bean,factory,null
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, 			@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig);1496837955;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param servletContext the ServletContext that we're running within_@param servletConfig the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf,_			@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig) {__		if (servletContext != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, servletContext)__		}__		if (servletConfig != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, servletConfig)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<>()__			if (servletContext != null) {_				Enumeration<?> paramNameEnum = servletContext.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletContext.getInitParameter(paramName))__				}_			}_			if (servletConfig != null) {_				Enumeration<?> paramNameEnum = servletConfig.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletConfig.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<>()__			if (servletContext != null) {_				Enumeration<?> attrNameEnum = servletContext.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, servletContext.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,servlet,context,the,servlet,context,that,we,re,running,within,param,servlet,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,nullable,servlet,context,servlet,context,nullable,servlet,config,servlet,config,if,servlet,context,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,servlet,context,if,servlet,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,servlet,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,if,servlet,context,null,enumeration,param,name,enum,servlet,context,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,context,get,init,parameter,param,name,if,servlet,config,null,enumeration,param,name,enum,servlet,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,if,servlet,context,null,enumeration,attr,name,enum,servlet,context,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,servlet,context,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, 			@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig);1498780456;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param servletContext the ServletContext that we're running within_@param servletConfig the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf,_			@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig) {__		if (servletContext != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, servletContext)__		}__		if (servletConfig != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, servletConfig)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<>()__			if (servletContext != null) {_				Enumeration<?> paramNameEnum = servletContext.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletContext.getInitParameter(paramName))__				}_			}_			if (servletConfig != null) {_				Enumeration<?> paramNameEnum = servletConfig.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletConfig.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<>()__			if (servletContext != null) {_				Enumeration<?> attrNameEnum = servletContext.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, servletContext.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,servlet,context,the,servlet,context,that,we,re,running,within,param,servlet,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,nullable,servlet,context,servlet,context,nullable,servlet,config,servlet,config,if,servlet,context,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,servlet,context,if,servlet,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,servlet,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,if,servlet,context,null,enumeration,param,name,enum,servlet,context,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,context,get,init,parameter,param,name,if,servlet,config,null,enumeration,param,name,enum,servlet,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,if,servlet,context,null,enumeration,attr,name,enum,servlet,context,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,servlet,context,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, 			@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig);1508532146;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param servletContext the ServletContext that we're running within_@param servletConfig the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf,_			@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig) {__		if (servletContext != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, servletContext)__		}__		if (servletConfig != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, servletConfig)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<>()__			if (servletContext != null) {_				Enumeration<?> paramNameEnum = servletContext.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletContext.getInitParameter(paramName))__				}_			}_			if (servletConfig != null) {_				Enumeration<?> paramNameEnum = servletConfig.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletConfig.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<>()__			if (servletContext != null) {_				Enumeration<?> attrNameEnum = servletContext.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, servletContext.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,servlet,context,the,servlet,context,that,we,re,running,within,param,servlet,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,nullable,servlet,context,servlet,context,nullable,servlet,config,servlet,config,if,servlet,context,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,servlet,context,if,servlet,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,servlet,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,if,servlet,context,null,enumeration,param,name,enum,servlet,context,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,context,get,init,parameter,param,name,if,servlet,config,null,enumeration,param,name,enum,servlet,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,if,servlet,context,null,enumeration,attr,name,enum,servlet,context,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,servlet,context,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, 			@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig);1527090734;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param servletContext the ServletContext that we're running within_@param servletConfig the ServletConfig;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf,_			@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig) {__		if (servletContext != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, servletContext)__		}__		if (servletConfig != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, servletConfig)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<>()__			if (servletContext != null) {_				Enumeration<?> paramNameEnum = servletContext.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletContext.getInitParameter(paramName))__				}_			}_			if (servletConfig != null) {_				Enumeration<?> paramNameEnum = servletConfig.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletConfig.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<>()__			if (servletContext != null) {_				Enumeration<?> attrNameEnum = servletContext.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, servletContext.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,servlet,context,the,servlet,context,that,we,re,running,within,param,servlet,config,the,servlet,config;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,nullable,servlet,context,servlet,context,nullable,servlet,config,servlet,config,if,servlet,context,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,servlet,context,if,servlet,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,servlet,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,if,servlet,context,null,enumeration,param,name,enum,servlet,context,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,context,get,init,parameter,param,name,if,servlet,config,null,enumeration,param,name,enum,servlet,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,if,servlet,context,null,enumeration,attr,name,enum,servlet,context,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,servlet,context,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, 			@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig);1530174524;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param servletContext the ServletContext that we're running within_@param servletConfig the ServletConfig;public static void registerEnvironmentBeans(ConfigurableListableBeanFactory bf,_			@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig) {__		if (servletContext != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, servletContext)__		}__		if (servletConfig != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, servletConfig)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<>()__			if (servletContext != null) {_				Enumeration<?> paramNameEnum = servletContext.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletContext.getInitParameter(paramName))__				}_			}_			if (servletConfig != null) {_				Enumeration<?> paramNameEnum = servletConfig.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, servletConfig.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<>()__			if (servletContext != null) {_				Enumeration<?> attrNameEnum = servletContext.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, servletContext.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,servlet,context,the,servlet,context,that,we,re,running,within,param,servlet,config,the,servlet,config;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,nullable,servlet,context,servlet,context,nullable,servlet,config,servlet,config,if,servlet,context,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,servlet,context,if,servlet,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,servlet,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,if,servlet,context,null,enumeration,param,name,enum,servlet,context,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,context,get,init,parameter,param,name,if,servlet,config,null,enumeration,param,name,enum,servlet,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,servlet,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,if,servlet,context,null,enumeration,attr,name,enum,servlet,context,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,servlet,context,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1495868221;Find a custom {@code WebApplicationContext} for this web app._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;@Nullable_	public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,code,web,application,context,for,this,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;nullable,public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1496259743;Find a custom {@code WebApplicationContext} for this web app._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;@Nullable_	public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,code,web,application,context,for,this,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;nullable,public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1496837955;Find a custom {@code WebApplicationContext} for this web app._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;@Nullable_	public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,code,web,application,context,for,this,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;nullable,public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1498780456;Find a custom {@code WebApplicationContext} for this web app._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;@Nullable_	public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,code,web,application,context,for,this,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;nullable,public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1508532146;Find a custom {@code WebApplicationContext} for this web app._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;@Nullable_	public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,code,web,application,context,for,this,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;nullable,public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1527090734;Find a custom {@code WebApplicationContext} for this web app._@param sc ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;@Nullable_	public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,code,web,application,context,for,this,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;nullable,public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName);1530174524;Find a custom {@code WebApplicationContext} for this web app._@param sc the ServletContext to find the web application context for_@param attrName the name of the ServletContext attribute to look for_@return the desired WebApplicationContext for this web app, or {@code null} if none;@Nullable_	public static WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName) {_		Assert.notNull(sc, "ServletContext must not be null")__		Object attr = sc.getAttribute(attrName)__		if (attr == null) {_			return null__		}_		if (attr instanceof RuntimeException) {_			throw (RuntimeException) attr__		}_		if (attr instanceof Error) {_			throw (Error) attr__		}_		if (attr instanceof Exception) {_			throw new IllegalStateException((Exception) attr)__		}_		if (!(attr instanceof WebApplicationContext)) {_			throw new IllegalStateException("Context attribute is not of type WebApplicationContext: " + attr)__		}_		return (WebApplicationContext) attr__	};find,a,custom,code,web,application,context,for,this,web,app,param,sc,the,servlet,context,to,find,the,web,application,context,for,param,attr,name,the,name,of,the,servlet,context,attribute,to,look,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none;nullable,public,static,web,application,context,get,web,application,context,servlet,context,sc,string,attr,name,assert,not,null,sc,servlet,context,must,not,be,null,object,attr,sc,get,attribute,attr,name,if,attr,null,return,null,if,attr,instanceof,runtime,exception,throw,runtime,exception,attr,if,attr,instanceof,error,throw,error,attr,if,attr,instanceof,exception,throw,new,illegal,state,exception,exception,attr,if,attr,instanceof,web,application,context,throw,new,illegal,state,exception,context,attribute,is,not,of,type,web,application,context,attr,return,web,application,context,attr
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext);1328020251;Replace {@code Servlet}-based stub property sources with actual instances_populated with the given context object._@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources()_@see org.springframework.web.context.support.WebApplicationContextUtils#initServletPropertySources(MutablePropertySources, ServletContext);public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};replace,code,servlet,based,stub,property,sources,with,actual,instances,populated,with,the,given,context,object,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources,see,org,springframework,web,context,support,web,application,context,utils,init,servlet,property,sources,mutable,property,sources,servlet,context;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext);1329142650;Replace {@code Servlet}-based stub property sources with actual instances_populated with the given context object._@see org.springframework.core.env.PropertySource.StubPropertySource_@see org.springframework.core.env.ConfigurableEnvironment#getPropertySources()_@see org.springframework.web.context.support.WebApplicationContextUtils#initServletPropertySources(MutablePropertySources, ServletContext);public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};replace,code,servlet,based,stub,property,sources,with,actual,instances,populated,with,the,given,context,object,see,org,springframework,core,env,property,source,stub,property,source,see,org,springframework,core,env,configurable,environment,get,property,sources,see,org,springframework,web,context,support,web,application,context,utils,init,servlet,property,sources,mutable,property,sources,servlet,context;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext);1351857948;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext);1355313310;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext);1356735495;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext);1357119239;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext);1368482696;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext);1385501137;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext);1389822826;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext);1389827060;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext) {_		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext);1390507193;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext) {__		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> public static void initServletPropertySources( 			MutablePropertySources propertySources, ServletContext servletContext);1400256389;Convenient variant of {@link #initServletPropertySources(MutablePropertySources,_ServletContext, ServletConfig)} that always provides {@code null} for the_{@link ServletConfig} parameter._@see #initServletPropertySources(MutablePropertySources, ServletContext, ServletConfig);public static void initServletPropertySources(_			MutablePropertySources propertySources, ServletContext servletContext) {__		initServletPropertySources(propertySources, servletContext, null)__	};convenient,variant,of,link,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config,that,always,provides,code,null,for,the,link,servlet,config,parameter,see,init,servlet,property,sources,mutable,property,sources,servlet,context,servlet,config;public,static,void,init,servlet,property,sources,mutable,property,sources,property,sources,servlet,context,servlet,context,init,servlet,property,sources,property,sources,servlet,context,null
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext findWebApplicationContext(ServletContext sc);1495868221;Find a unique {@code WebApplicationContext} for this web app: either the_root web app context (preferred) or a unique {@code WebApplicationContext}_among the registered {@code ServletContext} attributes (typically coming_from a single {@code DispatcherServlet} in the current web application)._<p>Note that {@code DispatcherServlet}'s exposure of its context can be_controlled through its {@code publishContext} property, which is {@code true}_by default but can be selectively switched to only publish a single context_despite multiple {@code DispatcherServlet} registrations in the web app._@param sc ServletContext to find the web application context for_@return the desired WebApplicationContext for this web app, or {@code null} if none_@since 4.2_@see #getWebApplicationContext(ServletContext)_@see ServletContext#getAttributeNames();@Nullable_	public static WebApplicationContext findWebApplicationContext(ServletContext sc) {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			Enumeration<String> attrNames = sc.getAttributeNames()__			while (attrNames.hasMoreElements()) {_				String attrName = attrNames.nextElement()__				Object attrValue = sc.getAttribute(attrName)__				if (attrValue instanceof WebApplicationContext) {_					if (wac != null) {_						throw new IllegalStateException("No unique WebApplicationContext found: more than one " +_								"DispatcherServlet registered with publishContext=true?")__					}_					wac = (WebApplicationContext) attrValue__				}_			}_		}_		return wac__	};find,a,unique,code,web,application,context,for,this,web,app,either,the,root,web,app,context,preferred,or,a,unique,code,web,application,context,among,the,registered,code,servlet,context,attributes,typically,coming,from,a,single,code,dispatcher,servlet,in,the,current,web,application,p,note,that,code,dispatcher,servlet,s,exposure,of,its,context,can,be,controlled,through,its,code,publish,context,property,which,is,code,true,by,default,but,can,be,selectively,switched,to,only,publish,a,single,context,despite,multiple,code,dispatcher,servlet,registrations,in,the,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none,since,4,2,see,get,web,application,context,servlet,context,see,servlet,context,get,attribute,names;nullable,public,static,web,application,context,find,web,application,context,servlet,context,sc,web,application,context,wac,get,web,application,context,sc,if,wac,null,enumeration,string,attr,names,sc,get,attribute,names,while,attr,names,has,more,elements,string,attr,name,attr,names,next,element,object,attr,value,sc,get,attribute,attr,name,if,attr,value,instanceof,web,application,context,if,wac,null,throw,new,illegal,state,exception,no,unique,web,application,context,found,more,than,one,dispatcher,servlet,registered,with,publish,context,true,wac,web,application,context,attr,value,return,wac
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext findWebApplicationContext(ServletContext sc);1496259743;Find a unique {@code WebApplicationContext} for this web app: either the_root web app context (preferred) or a unique {@code WebApplicationContext}_among the registered {@code ServletContext} attributes (typically coming_from a single {@code DispatcherServlet} in the current web application)._<p>Note that {@code DispatcherServlet}'s exposure of its context can be_controlled through its {@code publishContext} property, which is {@code true}_by default but can be selectively switched to only publish a single context_despite multiple {@code DispatcherServlet} registrations in the web app._@param sc ServletContext to find the web application context for_@return the desired WebApplicationContext for this web app, or {@code null} if none_@since 4.2_@see #getWebApplicationContext(ServletContext)_@see ServletContext#getAttributeNames();@Nullable_	public static WebApplicationContext findWebApplicationContext(ServletContext sc) {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			Enumeration<String> attrNames = sc.getAttributeNames()__			while (attrNames.hasMoreElements()) {_				String attrName = attrNames.nextElement()__				Object attrValue = sc.getAttribute(attrName)__				if (attrValue instanceof WebApplicationContext) {_					if (wac != null) {_						throw new IllegalStateException("No unique WebApplicationContext found: more than one " +_								"DispatcherServlet registered with publishContext=true?")__					}_					wac = (WebApplicationContext) attrValue__				}_			}_		}_		return wac__	};find,a,unique,code,web,application,context,for,this,web,app,either,the,root,web,app,context,preferred,or,a,unique,code,web,application,context,among,the,registered,code,servlet,context,attributes,typically,coming,from,a,single,code,dispatcher,servlet,in,the,current,web,application,p,note,that,code,dispatcher,servlet,s,exposure,of,its,context,can,be,controlled,through,its,code,publish,context,property,which,is,code,true,by,default,but,can,be,selectively,switched,to,only,publish,a,single,context,despite,multiple,code,dispatcher,servlet,registrations,in,the,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none,since,4,2,see,get,web,application,context,servlet,context,see,servlet,context,get,attribute,names;nullable,public,static,web,application,context,find,web,application,context,servlet,context,sc,web,application,context,wac,get,web,application,context,sc,if,wac,null,enumeration,string,attr,names,sc,get,attribute,names,while,attr,names,has,more,elements,string,attr,name,attr,names,next,element,object,attr,value,sc,get,attribute,attr,name,if,attr,value,instanceof,web,application,context,if,wac,null,throw,new,illegal,state,exception,no,unique,web,application,context,found,more,than,one,dispatcher,servlet,registered,with,publish,context,true,wac,web,application,context,attr,value,return,wac
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext findWebApplicationContext(ServletContext sc);1496837955;Find a unique {@code WebApplicationContext} for this web app: either the_root web app context (preferred) or a unique {@code WebApplicationContext}_among the registered {@code ServletContext} attributes (typically coming_from a single {@code DispatcherServlet} in the current web application)._<p>Note that {@code DispatcherServlet}'s exposure of its context can be_controlled through its {@code publishContext} property, which is {@code true}_by default but can be selectively switched to only publish a single context_despite multiple {@code DispatcherServlet} registrations in the web app._@param sc ServletContext to find the web application context for_@return the desired WebApplicationContext for this web app, or {@code null} if none_@since 4.2_@see #getWebApplicationContext(ServletContext)_@see ServletContext#getAttributeNames();@Nullable_	public static WebApplicationContext findWebApplicationContext(ServletContext sc) {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			Enumeration<String> attrNames = sc.getAttributeNames()__			while (attrNames.hasMoreElements()) {_				String attrName = attrNames.nextElement()__				Object attrValue = sc.getAttribute(attrName)__				if (attrValue instanceof WebApplicationContext) {_					if (wac != null) {_						throw new IllegalStateException("No unique WebApplicationContext found: more than one " +_								"DispatcherServlet registered with publishContext=true?")__					}_					wac = (WebApplicationContext) attrValue__				}_			}_		}_		return wac__	};find,a,unique,code,web,application,context,for,this,web,app,either,the,root,web,app,context,preferred,or,a,unique,code,web,application,context,among,the,registered,code,servlet,context,attributes,typically,coming,from,a,single,code,dispatcher,servlet,in,the,current,web,application,p,note,that,code,dispatcher,servlet,s,exposure,of,its,context,can,be,controlled,through,its,code,publish,context,property,which,is,code,true,by,default,but,can,be,selectively,switched,to,only,publish,a,single,context,despite,multiple,code,dispatcher,servlet,registrations,in,the,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none,since,4,2,see,get,web,application,context,servlet,context,see,servlet,context,get,attribute,names;nullable,public,static,web,application,context,find,web,application,context,servlet,context,sc,web,application,context,wac,get,web,application,context,sc,if,wac,null,enumeration,string,attr,names,sc,get,attribute,names,while,attr,names,has,more,elements,string,attr,name,attr,names,next,element,object,attr,value,sc,get,attribute,attr,name,if,attr,value,instanceof,web,application,context,if,wac,null,throw,new,illegal,state,exception,no,unique,web,application,context,found,more,than,one,dispatcher,servlet,registered,with,publish,context,true,wac,web,application,context,attr,value,return,wac
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext findWebApplicationContext(ServletContext sc);1498780456;Find a unique {@code WebApplicationContext} for this web app: either the_root web app context (preferred) or a unique {@code WebApplicationContext}_among the registered {@code ServletContext} attributes (typically coming_from a single {@code DispatcherServlet} in the current web application)._<p>Note that {@code DispatcherServlet}'s exposure of its context can be_controlled through its {@code publishContext} property, which is {@code true}_by default but can be selectively switched to only publish a single context_despite multiple {@code DispatcherServlet} registrations in the web app._@param sc ServletContext to find the web application context for_@return the desired WebApplicationContext for this web app, or {@code null} if none_@since 4.2_@see #getWebApplicationContext(ServletContext)_@see ServletContext#getAttributeNames();@Nullable_	public static WebApplicationContext findWebApplicationContext(ServletContext sc) {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			Enumeration<String> attrNames = sc.getAttributeNames()__			while (attrNames.hasMoreElements()) {_				String attrName = attrNames.nextElement()__				Object attrValue = sc.getAttribute(attrName)__				if (attrValue instanceof WebApplicationContext) {_					if (wac != null) {_						throw new IllegalStateException("No unique WebApplicationContext found: more than one " +_								"DispatcherServlet registered with publishContext=true?")__					}_					wac = (WebApplicationContext) attrValue__				}_			}_		}_		return wac__	};find,a,unique,code,web,application,context,for,this,web,app,either,the,root,web,app,context,preferred,or,a,unique,code,web,application,context,among,the,registered,code,servlet,context,attributes,typically,coming,from,a,single,code,dispatcher,servlet,in,the,current,web,application,p,note,that,code,dispatcher,servlet,s,exposure,of,its,context,can,be,controlled,through,its,code,publish,context,property,which,is,code,true,by,default,but,can,be,selectively,switched,to,only,publish,a,single,context,despite,multiple,code,dispatcher,servlet,registrations,in,the,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none,since,4,2,see,get,web,application,context,servlet,context,see,servlet,context,get,attribute,names;nullable,public,static,web,application,context,find,web,application,context,servlet,context,sc,web,application,context,wac,get,web,application,context,sc,if,wac,null,enumeration,string,attr,names,sc,get,attribute,names,while,attr,names,has,more,elements,string,attr,name,attr,names,next,element,object,attr,value,sc,get,attribute,attr,name,if,attr,value,instanceof,web,application,context,if,wac,null,throw,new,illegal,state,exception,no,unique,web,application,context,found,more,than,one,dispatcher,servlet,registered,with,publish,context,true,wac,web,application,context,attr,value,return,wac
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext findWebApplicationContext(ServletContext sc);1508532146;Find a unique {@code WebApplicationContext} for this web app: either the_root web app context (preferred) or a unique {@code WebApplicationContext}_among the registered {@code ServletContext} attributes (typically coming_from a single {@code DispatcherServlet} in the current web application)._<p>Note that {@code DispatcherServlet}'s exposure of its context can be_controlled through its {@code publishContext} property, which is {@code true}_by default but can be selectively switched to only publish a single context_despite multiple {@code DispatcherServlet} registrations in the web app._@param sc ServletContext to find the web application context for_@return the desired WebApplicationContext for this web app, or {@code null} if none_@since 4.2_@see #getWebApplicationContext(ServletContext)_@see ServletContext#getAttributeNames();@Nullable_	public static WebApplicationContext findWebApplicationContext(ServletContext sc) {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			Enumeration<String> attrNames = sc.getAttributeNames()__			while (attrNames.hasMoreElements()) {_				String attrName = attrNames.nextElement()__				Object attrValue = sc.getAttribute(attrName)__				if (attrValue instanceof WebApplicationContext) {_					if (wac != null) {_						throw new IllegalStateException("No unique WebApplicationContext found: more than one " +_								"DispatcherServlet registered with publishContext=true?")__					}_					wac = (WebApplicationContext) attrValue__				}_			}_		}_		return wac__	};find,a,unique,code,web,application,context,for,this,web,app,either,the,root,web,app,context,preferred,or,a,unique,code,web,application,context,among,the,registered,code,servlet,context,attributes,typically,coming,from,a,single,code,dispatcher,servlet,in,the,current,web,application,p,note,that,code,dispatcher,servlet,s,exposure,of,its,context,can,be,controlled,through,its,code,publish,context,property,which,is,code,true,by,default,but,can,be,selectively,switched,to,only,publish,a,single,context,despite,multiple,code,dispatcher,servlet,registrations,in,the,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none,since,4,2,see,get,web,application,context,servlet,context,see,servlet,context,get,attribute,names;nullable,public,static,web,application,context,find,web,application,context,servlet,context,sc,web,application,context,wac,get,web,application,context,sc,if,wac,null,enumeration,string,attr,names,sc,get,attribute,names,while,attr,names,has,more,elements,string,attr,name,attr,names,next,element,object,attr,value,sc,get,attribute,attr,name,if,attr,value,instanceof,web,application,context,if,wac,null,throw,new,illegal,state,exception,no,unique,web,application,context,found,more,than,one,dispatcher,servlet,registered,with,publish,context,true,wac,web,application,context,attr,value,return,wac
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext findWebApplicationContext(ServletContext sc);1527090734;Find a unique {@code WebApplicationContext} for this web app: either the_root web app context (preferred) or a unique {@code WebApplicationContext}_among the registered {@code ServletContext} attributes (typically coming_from a single {@code DispatcherServlet} in the current web application)._<p>Note that {@code DispatcherServlet}'s exposure of its context can be_controlled through its {@code publishContext} property, which is {@code true}_by default but can be selectively switched to only publish a single context_despite multiple {@code DispatcherServlet} registrations in the web app._@param sc ServletContext to find the web application context for_@return the desired WebApplicationContext for this web app, or {@code null} if none_@since 4.2_@see #getWebApplicationContext(ServletContext)_@see ServletContext#getAttributeNames();@Nullable_	public static WebApplicationContext findWebApplicationContext(ServletContext sc) {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			Enumeration<String> attrNames = sc.getAttributeNames()__			while (attrNames.hasMoreElements()) {_				String attrName = attrNames.nextElement()__				Object attrValue = sc.getAttribute(attrName)__				if (attrValue instanceof WebApplicationContext) {_					if (wac != null) {_						throw new IllegalStateException("No unique WebApplicationContext found: more than one " +_								"DispatcherServlet registered with publishContext=true?")__					}_					wac = (WebApplicationContext) attrValue__				}_			}_		}_		return wac__	};find,a,unique,code,web,application,context,for,this,web,app,either,the,root,web,app,context,preferred,or,a,unique,code,web,application,context,among,the,registered,code,servlet,context,attributes,typically,coming,from,a,single,code,dispatcher,servlet,in,the,current,web,application,p,note,that,code,dispatcher,servlet,s,exposure,of,its,context,can,be,controlled,through,its,code,publish,context,property,which,is,code,true,by,default,but,can,be,selectively,switched,to,only,publish,a,single,context,despite,multiple,code,dispatcher,servlet,registrations,in,the,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none,since,4,2,see,get,web,application,context,servlet,context,see,servlet,context,get,attribute,names;nullable,public,static,web,application,context,find,web,application,context,servlet,context,sc,web,application,context,wac,get,web,application,context,sc,if,wac,null,enumeration,string,attr,names,sc,get,attribute,names,while,attr,names,has,more,elements,string,attr,name,attr,names,next,element,object,attr,value,sc,get,attribute,attr,name,if,attr,value,instanceof,web,application,context,if,wac,null,throw,new,illegal,state,exception,no,unique,web,application,context,found,more,than,one,dispatcher,servlet,registered,with,publish,context,true,wac,web,application,context,attr,value,return,wac
WebApplicationContextUtils -> @Nullable 	public static WebApplicationContext findWebApplicationContext(ServletContext sc);1530174524;Find a unique {@code WebApplicationContext} for this web app: either the_root web app context (preferred) or a unique {@code WebApplicationContext}_among the registered {@code ServletContext} attributes (typically coming_from a single {@code DispatcherServlet} in the current web application)._<p>Note that {@code DispatcherServlet}'s exposure of its context can be_controlled through its {@code publishContext} property, which is {@code true}_by default but can be selectively switched to only publish a single context_despite multiple {@code DispatcherServlet} registrations in the web app._@param sc the ServletContext to find the web application context for_@return the desired WebApplicationContext for this web app, or {@code null} if none_@since 4.2_@see #getWebApplicationContext(ServletContext)_@see ServletContext#getAttributeNames();@Nullable_	public static WebApplicationContext findWebApplicationContext(ServletContext sc) {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			Enumeration<String> attrNames = sc.getAttributeNames()__			while (attrNames.hasMoreElements()) {_				String attrName = attrNames.nextElement()__				Object attrValue = sc.getAttribute(attrName)__				if (attrValue instanceof WebApplicationContext) {_					if (wac != null) {_						throw new IllegalStateException("No unique WebApplicationContext found: more than one " +_								"DispatcherServlet registered with publishContext=true?")__					}_					wac = (WebApplicationContext) attrValue__				}_			}_		}_		return wac__	};find,a,unique,code,web,application,context,for,this,web,app,either,the,root,web,app,context,preferred,or,a,unique,code,web,application,context,among,the,registered,code,servlet,context,attributes,typically,coming,from,a,single,code,dispatcher,servlet,in,the,current,web,application,p,note,that,code,dispatcher,servlet,s,exposure,of,its,context,can,be,controlled,through,its,code,publish,context,property,which,is,code,true,by,default,but,can,be,selectively,switched,to,only,publish,a,single,context,despite,multiple,code,dispatcher,servlet,registrations,in,the,web,app,param,sc,the,servlet,context,to,find,the,web,application,context,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none,since,4,2,see,get,web,application,context,servlet,context,see,servlet,context,get,attribute,names;nullable,public,static,web,application,context,find,web,application,context,servlet,context,sc,web,application,context,wac,get,web,application,context,sc,if,wac,null,enumeration,string,attr,names,sc,get,attribute,names,while,attr,names,has,more,elements,string,attr,name,attr,names,next,element,object,attr,value,sc,get,attribute,attr,name,if,attr,value,instanceof,web,application,context,if,wac,null,throw,new,illegal,state,exception,no,unique,web,application,context,found,more,than,one,dispatcher,servlet,registered,with,publish,context,true,wac,web,application,context,attr,value,return,wac
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config);1328020251;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within_@param config the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config) {__		if (sc != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, sc)__		}__		if (config != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, config)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<String, String>()__			if (sc != null) {_				Enumeration<?> paramNameEnum = sc.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, sc.getInitParameter(paramName))__				}_			}_			if (config != null) {_				Enumeration<?> paramNameEnum = config.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, config.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<String, Object>()__			if (sc != null) {_				Enumeration<?> attrNameEnum = sc.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, sc.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within,param,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,servlet,config,config,if,sc,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,sc,if,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,string,string,if,sc,null,enumeration,param,name,enum,sc,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,sc,get,init,parameter,param,name,if,config,null,enumeration,param,name,enum,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,string,object,if,sc,null,enumeration,attr,name,enum,sc,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,sc,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config);1329142650;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within_@param config the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config) {__		if (sc != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, sc)__		}__		if (config != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, config)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<String, String>()__			if (sc != null) {_				Enumeration<?> paramNameEnum = sc.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, sc.getInitParameter(paramName))__				}_			}_			if (config != null) {_				Enumeration<?> paramNameEnum = config.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, config.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<String, Object>()__			if (sc != null) {_				Enumeration<?> attrNameEnum = sc.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, sc.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within,param,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,servlet,config,config,if,sc,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,sc,if,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,string,string,if,sc,null,enumeration,param,name,enum,sc,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,sc,get,init,parameter,param,name,if,config,null,enumeration,param,name,enum,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,string,object,if,sc,null,enumeration,attr,name,enum,sc,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,sc,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config);1351857948;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within_@param config the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config) {__		if (sc != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, sc)__		}__		if (config != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, config)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<String, String>()__			if (sc != null) {_				Enumeration<?> paramNameEnum = sc.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, sc.getInitParameter(paramName))__				}_			}_			if (config != null) {_				Enumeration<?> paramNameEnum = config.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, config.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<String, Object>()__			if (sc != null) {_				Enumeration<?> attrNameEnum = sc.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, sc.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within,param,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,servlet,config,config,if,sc,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,sc,if,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,string,string,if,sc,null,enumeration,param,name,enum,sc,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,sc,get,init,parameter,param,name,if,config,null,enumeration,param,name,enum,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,string,object,if,sc,null,enumeration,attr,name,enum,sc,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,sc,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config);1355313310;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within_@param config the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config) {__		if (sc != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, sc)__		}__		if (config != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, config)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<String, String>()__			if (sc != null) {_				Enumeration<?> paramNameEnum = sc.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, sc.getInitParameter(paramName))__				}_			}_			if (config != null) {_				Enumeration<?> paramNameEnum = config.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, config.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<String, Object>()__			if (sc != null) {_				Enumeration<?> attrNameEnum = sc.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, sc.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within,param,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,servlet,config,config,if,sc,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,sc,if,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,string,string,if,sc,null,enumeration,param,name,enum,sc,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,sc,get,init,parameter,param,name,if,config,null,enumeration,param,name,enum,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,string,object,if,sc,null,enumeration,attr,name,enum,sc,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,sc,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config);1356735495;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within_@param config the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config) {__		if (sc != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, sc)__		}__		if (config != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, config)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<String, String>()__			if (sc != null) {_				Enumeration<?> paramNameEnum = sc.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, sc.getInitParameter(paramName))__				}_			}_			if (config != null) {_				Enumeration<?> paramNameEnum = config.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, config.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<String, Object>()__			if (sc != null) {_				Enumeration<?> attrNameEnum = sc.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, sc.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within,param,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,servlet,config,config,if,sc,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,sc,if,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,string,string,if,sc,null,enumeration,param,name,enum,sc,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,sc,get,init,parameter,param,name,if,config,null,enumeration,param,name,enum,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,string,object,if,sc,null,enumeration,attr,name,enum,sc,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,sc,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config);1357119239;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within_@param config the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config) {__		if (sc != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, sc)__		}__		if (config != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, config)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<String, String>()__			if (sc != null) {_				Enumeration<?> paramNameEnum = sc.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, sc.getInitParameter(paramName))__				}_			}_			if (config != null) {_				Enumeration<?> paramNameEnum = config.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, config.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<String, Object>()__			if (sc != null) {_				Enumeration<?> attrNameEnum = sc.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, sc.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within,param,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,servlet,config,config,if,sc,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,sc,if,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,string,string,if,sc,null,enumeration,param,name,enum,sc,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,sc,get,init,parameter,param,name,if,config,null,enumeration,param,name,enum,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,string,object,if,sc,null,enumeration,attr,name,enum,sc,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,sc,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config);1368482696;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within_@param config the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config) {__		if (sc != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, sc)__		}__		if (config != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, config)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<String, String>()__			if (sc != null) {_				Enumeration<?> paramNameEnum = sc.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, sc.getInitParameter(paramName))__				}_			}_			if (config != null) {_				Enumeration<?> paramNameEnum = config.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, config.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<String, Object>()__			if (sc != null) {_				Enumeration<?> attrNameEnum = sc.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, sc.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within,param,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,servlet,config,config,if,sc,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,sc,if,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,string,string,if,sc,null,enumeration,param,name,enum,sc,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,sc,get,init,parameter,param,name,if,config,null,enumeration,param,name,enum,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,string,object,if,sc,null,enumeration,attr,name,enum,sc,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,sc,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config);1385501137;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within_@param config the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config) {__		if (sc != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, sc)__		}__		if (config != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, config)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<String, String>()__			if (sc != null) {_				Enumeration<?> paramNameEnum = sc.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, sc.getInitParameter(paramName))__				}_			}_			if (config != null) {_				Enumeration<?> paramNameEnum = config.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, config.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<String, Object>()__			if (sc != null) {_				Enumeration<?> attrNameEnum = sc.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, sc.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within,param,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,servlet,config,config,if,sc,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,sc,if,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,string,string,if,sc,null,enumeration,param,name,enum,sc,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,sc,get,init,parameter,param,name,if,config,null,enumeration,param,name,enum,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,string,object,if,sc,null,enumeration,attr,name,enum,sc,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,sc,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config);1389822826;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within_@param config the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config) {__		if (sc != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, sc)__		}__		if (config != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, config)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<String, String>()__			if (sc != null) {_				Enumeration<?> paramNameEnum = sc.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, sc.getInitParameter(paramName))__				}_			}_			if (config != null) {_				Enumeration<?> paramNameEnum = config.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, config.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<String, Object>()__			if (sc != null) {_				Enumeration<?> attrNameEnum = sc.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, sc.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within,param,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,servlet,config,config,if,sc,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,sc,if,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,string,string,if,sc,null,enumeration,param,name,enum,sc,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,sc,get,init,parameter,param,name,if,config,null,enumeration,param,name,enum,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,string,object,if,sc,null,enumeration,attr,name,enum,sc,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,sc,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config);1389827060;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within_@param config the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config) {__		if (sc != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, sc)__		}__		if (config != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, config)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<String, String>()__			if (sc != null) {_				Enumeration<?> paramNameEnum = sc.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, sc.getInitParameter(paramName))__				}_			}_			if (config != null) {_				Enumeration<?> paramNameEnum = config.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, config.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<String, Object>()__			if (sc != null) {_				Enumeration<?> attrNameEnum = sc.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, sc.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within,param,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,servlet,config,config,if,sc,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,sc,if,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,string,string,if,sc,null,enumeration,param,name,enum,sc,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,sc,get,init,parameter,param,name,if,config,null,enumeration,param,name,enum,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,string,object,if,sc,null,enumeration,attr,name,enum,sc,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,sc,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config);1390507193;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within_@param config the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config) {__		if (sc != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, sc)__		}__		if (config != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, config)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<String, String>()__			if (sc != null) {_				Enumeration<?> paramNameEnum = sc.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, sc.getInitParameter(paramName))__				}_			}_			if (config != null) {_				Enumeration<?> paramNameEnum = config.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, config.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<String, Object>()__			if (sc != null) {_				Enumeration<?> attrNameEnum = sc.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, sc.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within,param,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,servlet,config,config,if,sc,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,sc,if,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,string,string,if,sc,null,enumeration,param,name,enum,sc,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,sc,get,init,parameter,param,name,if,config,null,enumeration,param,name,enum,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,string,object,if,sc,null,enumeration,attr,name,enum,sc,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,sc,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static void registerEnvironmentBeans( 			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config);1400256389;Register web-specific environment beans ("contextParameters", "contextAttributes")_with the given BeanFactory, as used by the WebApplicationContext._@param bf the BeanFactory to configure_@param sc the ServletContext that we're running within_@param config the ServletConfig of the containing Portlet;public static void registerEnvironmentBeans(_			ConfigurableListableBeanFactory bf, ServletContext sc, ServletConfig config) {__		if (sc != null && !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) {_			bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, sc)__		}__		if (config != null && !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) {_			bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, config)__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) {_			Map<String, String> parameterMap = new HashMap<String, String>()__			if (sc != null) {_				Enumeration<?> paramNameEnum = sc.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, sc.getInitParameter(paramName))__				}_			}_			if (config != null) {_				Enumeration<?> paramNameEnum = config.getInitParameterNames()__				while (paramNameEnum.hasMoreElements()) {_					String paramName = (String) paramNameEnum.nextElement()__					parameterMap.put(paramName, config.getInitParameter(paramName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,_					Collections.unmodifiableMap(parameterMap))__		}__		if (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) {_			Map<String, Object> attributeMap = new HashMap<String, Object>()__			if (sc != null) {_				Enumeration<?> attrNameEnum = sc.getAttributeNames()__				while (attrNameEnum.hasMoreElements()) {_					String attrName = (String) attrNameEnum.nextElement()__					attributeMap.put(attrName, sc.getAttribute(attrName))__				}_			}_			bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,_					Collections.unmodifiableMap(attributeMap))__		}_	};register,web,specific,environment,beans,context,parameters,context,attributes,with,the,given,bean,factory,as,used,by,the,web,application,context,param,bf,the,bean,factory,to,configure,param,sc,the,servlet,context,that,we,re,running,within,param,config,the,servlet,config,of,the,containing,portlet;public,static,void,register,environment,beans,configurable,listable,bean,factory,bf,servlet,context,sc,servlet,config,config,if,sc,null,bf,contains,bean,web,application,context,bf,register,singleton,web,application,context,sc,if,config,null,bf,contains,bean,configurable,web,application,context,bf,register,singleton,configurable,web,application,context,config,if,bf,contains,bean,web,application,context,map,string,string,parameter,map,new,hash,map,string,string,if,sc,null,enumeration,param,name,enum,sc,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,sc,get,init,parameter,param,name,if,config,null,enumeration,param,name,enum,config,get,init,parameter,names,while,param,name,enum,has,more,elements,string,param,name,string,param,name,enum,next,element,parameter,map,put,param,name,config,get,init,parameter,param,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,parameter,map,if,bf,contains,bean,web,application,context,map,string,object,attribute,map,new,hash,map,string,object,if,sc,null,enumeration,attr,name,enum,sc,get,attribute,names,while,attr,name,enum,has,more,elements,string,attr,name,string,attr,name,enum,next,element,attribute,map,put,attr,name,sc,get,attribute,attr,name,bf,register,singleton,web,application,context,collections,unmodifiable,map,attribute,map
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException;1412118176;Find the root {@link WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,link,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException;1436816047;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException;1464879764;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException;1467668027;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException;1467730834;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException;1495868221;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException;1496259743;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException;1496837955;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException;1498780456;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException;1508532146;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException;1527090734;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException;1530174524;Find the root {@code WebApplicationContext} for this web app, typically_loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc the ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,code,web,application,context,for,this,web,app,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,the,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) 			throws IllegalStateException;1328020251;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc)_			throws IllegalStateException {__		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) 			throws IllegalStateException;1329142650;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc)_			throws IllegalStateException {__		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) 			throws IllegalStateException;1351857948;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc)_			throws IllegalStateException {__		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) 			throws IllegalStateException;1355313310;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc)_			throws IllegalStateException {__		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) 			throws IllegalStateException;1356735495;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc)_			throws IllegalStateException {__		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) 			throws IllegalStateException;1357119239;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc)_			throws IllegalStateException {__		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) 			throws IllegalStateException;1368482696;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc)_			throws IllegalStateException {__		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) 			throws IllegalStateException;1385501137;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc)_			throws IllegalStateException {__		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) 			throws IllegalStateException;1389822826;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc)_			throws IllegalStateException {__		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) 			throws IllegalStateException;1389827060;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc)_			throws IllegalStateException {__		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) 			throws IllegalStateException;1390507193;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc)_			throws IllegalStateException {__		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) 			throws IllegalStateException;1400256389;Find the root WebApplicationContext for this web application, which is_typically loaded via {@link org.springframework.web.context.ContextLoaderListener}._<p>Will rethrow an exception that happened on root context startup,_to differentiate between a failed context startup and no context at all._@param sc ServletContext to find the web application context for_@return the root WebApplicationContext for this web app_@throws IllegalStateException if the root WebApplicationContext could not be found_@see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;public static WebApplicationContext getRequiredWebApplicationContext(ServletContext sc)_			throws IllegalStateException {__		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?")__		}_		return wac__	};find,the,root,web,application,context,for,this,web,application,which,is,typically,loaded,via,link,org,springframework,web,context,context,loader,listener,p,will,rethrow,an,exception,that,happened,on,root,context,startup,to,differentiate,between,a,failed,context,startup,and,no,context,at,all,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,root,web,application,context,for,this,web,app,throws,illegal,state,exception,if,the,root,web,application,context,could,not,be,found,see,org,springframework,web,context,web,application,context;public,static,web,application,context,get,required,web,application,context,servlet,context,sc,throws,illegal,state,exception,web,application,context,wac,get,web,application,context,sc,if,wac,null,throw,new,illegal,state,exception,no,web,application,context,found,no,context,loader,listener,registered,return,wac
WebApplicationContextUtils -> public static WebApplicationContext findWebApplicationContext(ServletContext sc);1436816047;Find a unique {@code WebApplicationContext} for this web app: either the_root web app context (preferred) or a unique {@code WebApplicationContext}_among the registered {@code ServletContext} attributes (typically coming_from a single {@code DispatcherServlet} in the current web application)._<p>Note that {@code DispatcherServlet}'s exposure of its context can be_controlled through its {@code publishContext} property, which is {@code true}_by default but can be selectively switched to only publish a single context_despite multiple {@code DispatcherServlet} registrations in the web app._@param sc ServletContext to find the web application context for_@return the desired WebApplicationContext for this web app, or {@code null} if none_@since 4.2_@see #getWebApplicationContext(ServletContext)_@see ServletContext#getAttributeNames();public static WebApplicationContext findWebApplicationContext(ServletContext sc) {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			Enumeration<String> attrNames = sc.getAttributeNames()__			while (attrNames.hasMoreElements()) {_				String attrName = attrNames.nextElement()__				Object attrValue = sc.getAttribute(attrName)__				if (attrValue instanceof WebApplicationContext) {_					if (wac != null) {_						throw new IllegalStateException("No unique WebApplicationContext found: more than one " +_								"DispatcherServlet registered with publishContext=true?")__					}_					wac = (WebApplicationContext) attrValue__				}_			}_		}_		return wac__	};find,a,unique,code,web,application,context,for,this,web,app,either,the,root,web,app,context,preferred,or,a,unique,code,web,application,context,among,the,registered,code,servlet,context,attributes,typically,coming,from,a,single,code,dispatcher,servlet,in,the,current,web,application,p,note,that,code,dispatcher,servlet,s,exposure,of,its,context,can,be,controlled,through,its,code,publish,context,property,which,is,code,true,by,default,but,can,be,selectively,switched,to,only,publish,a,single,context,despite,multiple,code,dispatcher,servlet,registrations,in,the,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none,since,4,2,see,get,web,application,context,servlet,context,see,servlet,context,get,attribute,names;public,static,web,application,context,find,web,application,context,servlet,context,sc,web,application,context,wac,get,web,application,context,sc,if,wac,null,enumeration,string,attr,names,sc,get,attribute,names,while,attr,names,has,more,elements,string,attr,name,attr,names,next,element,object,attr,value,sc,get,attribute,attr,name,if,attr,value,instanceof,web,application,context,if,wac,null,throw,new,illegal,state,exception,no,unique,web,application,context,found,more,than,one,dispatcher,servlet,registered,with,publish,context,true,wac,web,application,context,attr,value,return,wac
WebApplicationContextUtils -> public static WebApplicationContext findWebApplicationContext(ServletContext sc);1464879764;Find a unique {@code WebApplicationContext} for this web app: either the_root web app context (preferred) or a unique {@code WebApplicationContext}_among the registered {@code ServletContext} attributes (typically coming_from a single {@code DispatcherServlet} in the current web application)._<p>Note that {@code DispatcherServlet}'s exposure of its context can be_controlled through its {@code publishContext} property, which is {@code true}_by default but can be selectively switched to only publish a single context_despite multiple {@code DispatcherServlet} registrations in the web app._@param sc ServletContext to find the web application context for_@return the desired WebApplicationContext for this web app, or {@code null} if none_@since 4.2_@see #getWebApplicationContext(ServletContext)_@see ServletContext#getAttributeNames();public static WebApplicationContext findWebApplicationContext(ServletContext sc) {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			Enumeration<String> attrNames = sc.getAttributeNames()__			while (attrNames.hasMoreElements()) {_				String attrName = attrNames.nextElement()__				Object attrValue = sc.getAttribute(attrName)__				if (attrValue instanceof WebApplicationContext) {_					if (wac != null) {_						throw new IllegalStateException("No unique WebApplicationContext found: more than one " +_								"DispatcherServlet registered with publishContext=true?")__					}_					wac = (WebApplicationContext) attrValue__				}_			}_		}_		return wac__	};find,a,unique,code,web,application,context,for,this,web,app,either,the,root,web,app,context,preferred,or,a,unique,code,web,application,context,among,the,registered,code,servlet,context,attributes,typically,coming,from,a,single,code,dispatcher,servlet,in,the,current,web,application,p,note,that,code,dispatcher,servlet,s,exposure,of,its,context,can,be,controlled,through,its,code,publish,context,property,which,is,code,true,by,default,but,can,be,selectively,switched,to,only,publish,a,single,context,despite,multiple,code,dispatcher,servlet,registrations,in,the,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none,since,4,2,see,get,web,application,context,servlet,context,see,servlet,context,get,attribute,names;public,static,web,application,context,find,web,application,context,servlet,context,sc,web,application,context,wac,get,web,application,context,sc,if,wac,null,enumeration,string,attr,names,sc,get,attribute,names,while,attr,names,has,more,elements,string,attr,name,attr,names,next,element,object,attr,value,sc,get,attribute,attr,name,if,attr,value,instanceof,web,application,context,if,wac,null,throw,new,illegal,state,exception,no,unique,web,application,context,found,more,than,one,dispatcher,servlet,registered,with,publish,context,true,wac,web,application,context,attr,value,return,wac
WebApplicationContextUtils -> public static WebApplicationContext findWebApplicationContext(ServletContext sc);1467668027;Find a unique {@code WebApplicationContext} for this web app: either the_root web app context (preferred) or a unique {@code WebApplicationContext}_among the registered {@code ServletContext} attributes (typically coming_from a single {@code DispatcherServlet} in the current web application)._<p>Note that {@code DispatcherServlet}'s exposure of its context can be_controlled through its {@code publishContext} property, which is {@code true}_by default but can be selectively switched to only publish a single context_despite multiple {@code DispatcherServlet} registrations in the web app._@param sc ServletContext to find the web application context for_@return the desired WebApplicationContext for this web app, or {@code null} if none_@since 4.2_@see #getWebApplicationContext(ServletContext)_@see ServletContext#getAttributeNames();public static WebApplicationContext findWebApplicationContext(ServletContext sc) {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			Enumeration<String> attrNames = sc.getAttributeNames()__			while (attrNames.hasMoreElements()) {_				String attrName = attrNames.nextElement()__				Object attrValue = sc.getAttribute(attrName)__				if (attrValue instanceof WebApplicationContext) {_					if (wac != null) {_						throw new IllegalStateException("No unique WebApplicationContext found: more than one " +_								"DispatcherServlet registered with publishContext=true?")__					}_					wac = (WebApplicationContext) attrValue__				}_			}_		}_		return wac__	};find,a,unique,code,web,application,context,for,this,web,app,either,the,root,web,app,context,preferred,or,a,unique,code,web,application,context,among,the,registered,code,servlet,context,attributes,typically,coming,from,a,single,code,dispatcher,servlet,in,the,current,web,application,p,note,that,code,dispatcher,servlet,s,exposure,of,its,context,can,be,controlled,through,its,code,publish,context,property,which,is,code,true,by,default,but,can,be,selectively,switched,to,only,publish,a,single,context,despite,multiple,code,dispatcher,servlet,registrations,in,the,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none,since,4,2,see,get,web,application,context,servlet,context,see,servlet,context,get,attribute,names;public,static,web,application,context,find,web,application,context,servlet,context,sc,web,application,context,wac,get,web,application,context,sc,if,wac,null,enumeration,string,attr,names,sc,get,attribute,names,while,attr,names,has,more,elements,string,attr,name,attr,names,next,element,object,attr,value,sc,get,attribute,attr,name,if,attr,value,instanceof,web,application,context,if,wac,null,throw,new,illegal,state,exception,no,unique,web,application,context,found,more,than,one,dispatcher,servlet,registered,with,publish,context,true,wac,web,application,context,attr,value,return,wac
WebApplicationContextUtils -> public static WebApplicationContext findWebApplicationContext(ServletContext sc);1467730834;Find a unique {@code WebApplicationContext} for this web app: either the_root web app context (preferred) or a unique {@code WebApplicationContext}_among the registered {@code ServletContext} attributes (typically coming_from a single {@code DispatcherServlet} in the current web application)._<p>Note that {@code DispatcherServlet}'s exposure of its context can be_controlled through its {@code publishContext} property, which is {@code true}_by default but can be selectively switched to only publish a single context_despite multiple {@code DispatcherServlet} registrations in the web app._@param sc ServletContext to find the web application context for_@return the desired WebApplicationContext for this web app, or {@code null} if none_@since 4.2_@see #getWebApplicationContext(ServletContext)_@see ServletContext#getAttributeNames();public static WebApplicationContext findWebApplicationContext(ServletContext sc) {_		WebApplicationContext wac = getWebApplicationContext(sc)__		if (wac == null) {_			Enumeration<String> attrNames = sc.getAttributeNames()__			while (attrNames.hasMoreElements()) {_				String attrName = attrNames.nextElement()__				Object attrValue = sc.getAttribute(attrName)__				if (attrValue instanceof WebApplicationContext) {_					if (wac != null) {_						throw new IllegalStateException("No unique WebApplicationContext found: more than one " +_								"DispatcherServlet registered with publishContext=true?")__					}_					wac = (WebApplicationContext) attrValue__				}_			}_		}_		return wac__	};find,a,unique,code,web,application,context,for,this,web,app,either,the,root,web,app,context,preferred,or,a,unique,code,web,application,context,among,the,registered,code,servlet,context,attributes,typically,coming,from,a,single,code,dispatcher,servlet,in,the,current,web,application,p,note,that,code,dispatcher,servlet,s,exposure,of,its,context,can,be,controlled,through,its,code,publish,context,property,which,is,code,true,by,default,but,can,be,selectively,switched,to,only,publish,a,single,context,despite,multiple,code,dispatcher,servlet,registrations,in,the,web,app,param,sc,servlet,context,to,find,the,web,application,context,for,return,the,desired,web,application,context,for,this,web,app,or,code,null,if,none,since,4,2,see,get,web,application,context,servlet,context,see,servlet,context,get,attribute,names;public,static,web,application,context,find,web,application,context,servlet,context,sc,web,application,context,wac,get,web,application,context,sc,if,wac,null,enumeration,string,attr,names,sc,get,attribute,names,while,attr,names,has,more,elements,string,attr,name,attr,names,next,element,object,attr,value,sc,get,attribute,attr,name,if,attr,value,instanceof,web,application,context,if,wac,null,throw,new,illegal,state,exception,no,unique,web,application,context,found,more,than,one,dispatcher,servlet,registered,with,publish,context,true,wac,web,application,context,attr,value,return,wac
