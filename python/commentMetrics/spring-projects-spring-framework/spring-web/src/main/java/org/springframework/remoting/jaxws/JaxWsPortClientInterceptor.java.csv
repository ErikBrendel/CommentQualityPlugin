commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set a reference to an existing JAX-WS Service instance,  * for example obtained via {@link org.springframework.jndi.JndiObjectFactoryBean}.  * If not set, {@link LocalJaxWsServiceFactory}'s properties have to be specified.  * @see #setWsdlDocumentUrl  * @see #setNamespaceUri  * @see #setServiceName  * @see org.springframework.jndi.JndiObjectFactoryBean  */ ;/**  * Set a reference to an existing JAX-WS Service instance,  * for example obtained via {@link org.springframework.jndi.JndiObjectFactoryBean}.  * If not set, {@link LocalJaxWsServiceFactory}'s properties have to be specified.  * @see #setWsdlDocumentUrl  * @see #setNamespaceUri  * @see #setServiceName  * @see org.springframework.jndi.JndiObjectFactoryBean  */ public void setJaxWsService(@Nullable Service jaxWsService) {     this.jaxWsService = jaxWsService. }
true;public;0;4;/**  * Return a reference to an existing JAX-WS Service instance, if any.  */ ;/**  * Return a reference to an existing JAX-WS Service instance, if any.  */ @Nullable public Service getJaxWsService() {     return this.jaxWsService. }
true;public;1;3;/**  * Set the name of the port.  * Corresponds to the "wsdl:port" name.  */ ;/**  * Set the name of the port.  * Corresponds to the "wsdl:port" name.  */ public void setPortName(@Nullable String portName) {     this.portName = portName. }
true;public;0;4;/**  * Return the name of the port.  */ ;/**  * Return the name of the port.  */ @Nullable public String getPortName() {     return this.portName. }
true;public;1;3;/**  * Set the username to specify on the stub.  * @see javax.xml.ws.BindingProvider#USERNAME_PROPERTY  */ ;/**  * Set the username to specify on the stub.  * @see javax.xml.ws.BindingProvider#USERNAME_PROPERTY  */ public void setUsername(@Nullable String username) {     this.username = username. }
true;public;0;4;/**  * Return the username to specify on the stub.  */ ;/**  * Return the username to specify on the stub.  */ @Nullable public String getUsername() {     return this.username. }
true;public;1;3;/**  * Set the password to specify on the stub.  * @see javax.xml.ws.BindingProvider#PASSWORD_PROPERTY  */ ;/**  * Set the password to specify on the stub.  * @see javax.xml.ws.BindingProvider#PASSWORD_PROPERTY  */ public void setPassword(@Nullable String password) {     this.password = password. }
true;public;0;4;/**  * Return the password to specify on the stub.  */ ;/**  * Return the password to specify on the stub.  */ @Nullable public String getPassword() {     return this.password. }
true;public;1;3;/**  * Set the endpoint address to specify on the stub.  * @see javax.xml.ws.BindingProvider#ENDPOINT_ADDRESS_PROPERTY  */ ;/**  * Set the endpoint address to specify on the stub.  * @see javax.xml.ws.BindingProvider#ENDPOINT_ADDRESS_PROPERTY  */ public void setEndpointAddress(@Nullable String endpointAddress) {     this.endpointAddress = endpointAddress. }
true;public;0;4;/**  * Return the endpoint address to specify on the stub.  */ ;/**  * Return the endpoint address to specify on the stub.  */ @Nullable public String getEndpointAddress() {     return this.endpointAddress. }
true;public;1;3;/**  * Set the "session.maintain" flag to specify on the stub.  * @see javax.xml.ws.BindingProvider#SESSION_MAINTAIN_PROPERTY  */ ;/**  * Set the "session.maintain" flag to specify on the stub.  * @see javax.xml.ws.BindingProvider#SESSION_MAINTAIN_PROPERTY  */ public void setMaintainSession(boolean maintainSession) {     this.maintainSession = maintainSession. }
true;public;0;3;/**  * Return the "session.maintain" flag to specify on the stub.  */ ;/**  * Return the "session.maintain" flag to specify on the stub.  */ public boolean isMaintainSession() {     return this.maintainSession. }
true;public;1;3;/**  * Set the "soapaction.use" flag to specify on the stub.  * @see javax.xml.ws.BindingProvider#SOAPACTION_USE_PROPERTY  */ ;/**  * Set the "soapaction.use" flag to specify on the stub.  * @see javax.xml.ws.BindingProvider#SOAPACTION_USE_PROPERTY  */ public void setUseSoapAction(boolean useSoapAction) {     this.useSoapAction = useSoapAction. }
true;public;0;3;/**  * Return the "soapaction.use" flag to specify on the stub.  */ ;/**  * Return the "soapaction.use" flag to specify on the stub.  */ public boolean isUseSoapAction() {     return this.useSoapAction. }
true;public;1;3;/**  * Set the SOAP action URI to specify on the stub.  * @see javax.xml.ws.BindingProvider#SOAPACTION_URI_PROPERTY  */ ;/**  * Set the SOAP action URI to specify on the stub.  * @see javax.xml.ws.BindingProvider#SOAPACTION_URI_PROPERTY  */ public void setSoapActionUri(@Nullable String soapActionUri) {     this.soapActionUri = soapActionUri. }
true;public;0;4;/**  * Return the SOAP action URI to specify on the stub.  */ ;/**  * Return the SOAP action URI to specify on the stub.  */ @Nullable public String getSoapActionUri() {     return this.soapActionUri. }
true;public;1;3;/**  * Set custom properties to be set on the stub.  * <p>Can be populated with a String "value" (parsed via PropertiesEditor)  * or a "props" element in XML bean definitions.  * @see javax.xml.ws.BindingProvider#getRequestContext()  */ ;/**  * Set custom properties to be set on the stub.  * <p>Can be populated with a String "value" (parsed via PropertiesEditor)  * or a "props" element in XML bean definitions.  * @see javax.xml.ws.BindingProvider#getRequestContext()  */ public void setCustomProperties(Map<String, Object> customProperties) {     this.customProperties = customProperties. }
true;public;0;6;/**  * Allow Map access to the custom properties to be set on the stub,  * with the option to add or override specific entries.  * <p>Useful for specifying entries directly, for example via  * "customProperties[myKey]". This is particularly useful for  * adding or overriding entries in child bean definitions.  */ ;/**  * Allow Map access to the custom properties to be set on the stub,  * with the option to add or override specific entries.  * <p>Useful for specifying entries directly, for example via  * "customProperties[myKey]". This is particularly useful for  * adding or overriding entries in child bean definitions.  */ public Map<String, Object> getCustomProperties() {     if (this.customProperties == null) {         this.customProperties = new HashMap<>().     }     return this.customProperties. }
true;public;2;3;/**  * Add a custom property to this JAX-WS BindingProvider.  * @param name the name of the attribute to expose  * @param value the attribute value to expose  * @see javax.xml.ws.BindingProvider#getRequestContext()  */ ;/**  * Add a custom property to this JAX-WS BindingProvider.  * @param name the name of the attribute to expose  * @param value the attribute value to expose  * @see javax.xml.ws.BindingProvider#getRequestContext()  */ public void addCustomProperty(String name, Object value) {     getCustomProperties().put(name, value). }
true;public;1;3;/**  * Specify WebServiceFeature objects (e.g. as inner bean definitions)  * to apply to JAX-WS port stub creation.  * @since 4.0  * @see Service#getPort(Class, javax.xml.ws.WebServiceFeature...)  * @see #setServiceFeatures  */ ;/**  * Specify WebServiceFeature objects (e.g. as inner bean definitions)  * to apply to JAX-WS port stub creation.  * @since 4.0  * @see Service#getPort(Class, javax.xml.ws.WebServiceFeature...)  * @see #setServiceFeatures  */ public void setPortFeatures(WebServiceFeature... features) {     this.portFeatures = features. }
true;public;1;6;/**  * Set the interface of the service that this factory should create a proxy for.  */ ;/**  * Set the interface of the service that this factory should create a proxy for.  */ public void setServiceInterface(@Nullable Class<?> serviceInterface) {     if (serviceInterface != null) {         Assert.isTrue(serviceInterface.isInterface(), "'serviceInterface' must be an interface").     }     this.serviceInterface = serviceInterface. }
true;public;0;4;/**  * Return the interface of the service that this factory should create a proxy for.  */ ;/**  * Return the interface of the service that this factory should create a proxy for.  */ @Nullable public Class<?> getServiceInterface() {     return this.serviceInterface. }
true;public;1;3;/**  * Set whether to look up the JAX-WS service on startup.  * <p>Default is "true". Turn this flag off to allow for late start  * of the target server. In this case, the JAX-WS service will be  * lazily fetched on first access.  */ ;/**  * Set whether to look up the JAX-WS service on startup.  * <p>Default is "true". Turn this flag off to allow for late start  * of the target server. In this case, the JAX-WS service will be  * lazily fetched on first access.  */ public void setLookupServiceOnStartup(boolean lookupServiceOnStartup) {     this.lookupServiceOnStartup = lookupServiceOnStartup. }
true;public;1;4;/**  * Set the bean ClassLoader to use for this interceptor: primarily for  * building a client proxy in the {@link JaxWsPortProxyFactoryBean} subclass.  */ ;/**  * Set the bean ClassLoader to use for this interceptor: primarily for  * building a client proxy in the {@link JaxWsPortProxyFactoryBean} subclass.  */ @Override public void setBeanClassLoader(@Nullable ClassLoader classLoader) {     this.beanClassLoader = classLoader. }
true;protected;0;4;/**  * Return the bean ClassLoader to use for this interceptor.  */ ;/**  * Return the bean ClassLoader to use for this interceptor.  */ @Nullable protected ClassLoader getBeanClassLoader() {     return this.beanClassLoader. }
false;public;0;6;;@Override public void afterPropertiesSet() {     if (this.lookupServiceOnStartup) {         prepare().     } }
true;public;0;19;/**  * Initialize the JAX-WS port for this interceptor.  */ ;/**  * Initialize the JAX-WS port for this interceptor.  */ public void prepare() {     Class<?> ifc = getServiceInterface().     Assert.notNull(ifc, "Property 'serviceInterface' is required").     WebService ann = ifc.getAnnotation(WebService.class).     if (ann != null) {         applyDefaultsFromAnnotation(ann).     }     Service serviceToUse = getJaxWsService().     if (serviceToUse == null) {         serviceToUse = createJaxWsService().     }     this.portQName = getQName(getPortName() != null ? getPortName() : ifc.getName()).     Object stub = getPortStub(serviceToUse, (getPortName() != null ? this.portQName : null)).     preparePortStub(stub).     this.portStub = stub. }
true;protected;1;32;/**  * Initialize this client interceptor's properties from the given WebService annotation,  * if necessary and possible (i.e. if "wsdlDocumentUrl", "namespaceUri", "serviceName"  * and "portName" haven't been set but corresponding values are declared at the  * annotation level of the specified service interface).  * @param ann the WebService annotation found on the specified service interface  */ ;/**  * Initialize this client interceptor's properties from the given WebService annotation,  * if necessary and possible (i.e. if "wsdlDocumentUrl", "namespaceUri", "serviceName"  * and "portName" haven't been set but corresponding values are declared at the  * annotation level of the specified service interface).  * @param ann the WebService annotation found on the specified service interface  */ protected void applyDefaultsFromAnnotation(WebService ann) {     if (getWsdlDocumentUrl() == null) {         String wsdl = ann.wsdlLocation().         if (StringUtils.hasText(wsdl)) {             try {                 setWsdlDocumentUrl(new URL(wsdl)).             } catch (MalformedURLException ex) {                 throw new IllegalStateException("Encountered invalid @Service wsdlLocation value [" + wsdl + "]", ex).             }         }     }     if (getNamespaceUri() == null) {         String ns = ann.targetNamespace().         if (StringUtils.hasText(ns)) {             setNamespaceUri(ns).         }     }     if (getServiceName() == null) {         String sn = ann.serviceName().         if (StringUtils.hasText(sn)) {             setServiceName(sn).         }     }     if (getPortName() == null) {         String pn = ann.portName().         if (StringUtils.hasText(pn)) {             setPortName(pn).         }     } }
true;protected;0;5;/**  * Return whether this client interceptor has already been prepared,  * i.e. has already looked up the JAX-WS service and port.  */ ;/**  * Return whether this client interceptor has already been prepared,  * i.e. has already looked up the JAX-WS service and port.  */ protected boolean isPrepared() {     synchronized (this.preparationMonitor) {         return (this.portStub != null).     } }
true;protected,final;0;4;/**  * Return the prepared QName for the port.  * @see #setPortName  * @see #getQName  */ ;/**  * Return the prepared QName for the port.  * @see #setPortName  * @see #getQName  */ @Nullable protected final QName getPortQName() {     return this.portQName. }
true;protected;2;10;/**  * Obtain the port stub from the given JAX-WS Service.  * @param service the Service object to obtain the port from  * @param portQName the name of the desired port, if specified  * @return the corresponding port object as returned from  * {@code Service.getPort(...)}  */ ;/**  * Obtain the port stub from the given JAX-WS Service.  * @param service the Service object to obtain the port from  * @param portQName the name of the desired port, if specified  * @return the corresponding port object as returned from  * {@code Service.getPort(...)}  */ protected Object getPortStub(Service service, @Nullable QName portQName) {     if (this.portFeatures != null) {         return (portQName != null ? service.getPort(portQName, getServiceInterface(), this.portFeatures) : service.getPort(getServiceInterface(), this.portFeatures)).     } else {         return (portQName != null ? service.getPort(portQName, getServiceInterface()) : service.getPort(getServiceInterface())).     } }
true;protected;1;33;/**  * Prepare the given JAX-WS port stub, applying properties to it.  * Called by {@link #prepare}.  * @param stub the current JAX-WS port stub  * @see #setUsername  * @see #setPassword  * @see #setEndpointAddress  * @see #setMaintainSession  * @see #setCustomProperties  */ ;/**  * Prepare the given JAX-WS port stub, applying properties to it.  * Called by {@link #prepare}.  * @param stub the current JAX-WS port stub  * @see #setUsername  * @see #setPassword  * @see #setEndpointAddress  * @see #setMaintainSession  * @see #setCustomProperties  */ protected void preparePortStub(Object stub) {     Map<String, Object> stubProperties = new HashMap<>().     String username = getUsername().     if (username != null) {         stubProperties.put(BindingProvider.USERNAME_PROPERTY, username).     }     String password = getPassword().     if (password != null) {         stubProperties.put(BindingProvider.PASSWORD_PROPERTY, password).     }     String endpointAddress = getEndpointAddress().     if (endpointAddress != null) {         stubProperties.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpointAddress).     }     if (isMaintainSession()) {         stubProperties.put(BindingProvider.SESSION_MAINTAIN_PROPERTY, Boolean.TRUE).     }     if (isUseSoapAction()) {         stubProperties.put(BindingProvider.SOAPACTION_USE_PROPERTY, Boolean.TRUE).     }     String soapActionUri = getSoapActionUri().     if (soapActionUri != null) {         stubProperties.put(BindingProvider.SOAPACTION_URI_PROPERTY, soapActionUri).     }     stubProperties.putAll(getCustomProperties()).     if (!stubProperties.isEmpty()) {         if (!(stub instanceof BindingProvider)) {             throw new RemoteLookupFailureException("Port stub of class [" + stub.getClass().getName() + "] is not a customizable JAX-WS stub: it does not implement interface [javax.xml.ws.BindingProvider]").         }         ((BindingProvider) stub).getRequestContext().putAll(stubProperties).     } }
true;protected;0;4;/**  * Return the underlying JAX-WS port stub that this interceptor delegates to  * for each method invocation on the proxy.  */ ;/**  * Return the underlying JAX-WS port stub that this interceptor delegates to  * for each method invocation on the proxy.  */ @Nullable protected Object getPortStub() {     return this.portStub. }
false;public;1;14;;@Override @Nullable public Object invoke(MethodInvocation invocation) throws Throwable {     if (AopUtils.isToStringMethod(invocation.getMethod())) {         return "JAX-WS proxy for port [" + getPortName() + "] of service [" + getServiceName() + "]".     }     // Lazily prepare service and stub if necessary.     synchronized (this.preparationMonitor) {         if (!isPrepared()) {             prepare().         }     }     return doInvoke(invocation). }
true;protected;1;17;/**  * Perform a JAX-WS service invocation based on the given method invocation.  * @param invocation the AOP method invocation  * @return the invocation result, if any  * @throws Throwable in case of invocation failure  * @see #getPortStub()  * @see #doInvoke(org.aopalliance.intercept.MethodInvocation, Object)  */ ;/**  * Perform a JAX-WS service invocation based on the given method invocation.  * @param invocation the AOP method invocation  * @return the invocation result, if any  * @throws Throwable in case of invocation failure  * @see #getPortStub()  * @see #doInvoke(org.aopalliance.intercept.MethodInvocation, Object)  */ @Nullable protected Object doInvoke(MethodInvocation invocation) throws Throwable {     try {         return doInvoke(invocation, getPortStub()).     } catch (SOAPFaultException ex) {         throw new JaxWsSoapFaultException(ex).     } catch (ProtocolException ex) {         throw new RemoteConnectFailureException("Could not connect to remote service [" + getEndpointAddress() + "]", ex).     } catch (WebServiceException ex) {         throw new RemoteAccessException("Could not access remote service at [" + getEndpointAddress() + "]", ex).     } }
true;protected;2;13;/**  * Perform a JAX-WS service invocation on the given port stub.  * @param invocation the AOP method invocation  * @param portStub the RMI port stub to invoke  * @return the invocation result, if any  * @throws Throwable in case of invocation failure  * @see #getPortStub()  */ ;/**  * Perform a JAX-WS service invocation on the given port stub.  * @param invocation the AOP method invocation  * @param portStub the RMI port stub to invoke  * @return the invocation result, if any  * @throws Throwable in case of invocation failure  * @see #getPortStub()  */ @Nullable protected Object doInvoke(MethodInvocation invocation, @Nullable Object portStub) throws Throwable {     Method method = invocation.getMethod().     try {         return method.invoke(portStub, invocation.getArguments()).     } catch (InvocationTargetException ex) {         throw ex.getTargetException().     } catch (Throwable ex) {         throw new RemoteProxyFailureException("Invocation of stub method failed: " + method, ex).     } }
