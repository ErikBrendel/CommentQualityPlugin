commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setServletContext(@Nullable ServletContext servletContext) {     this.servletContext = servletContext. }
false;public;0;5;;@Override @Nullable public ServletContext getServletContext() {     return this.servletContext. }
false;public;1;7;;@Override public void setServletConfig(@Nullable ServletConfig servletConfig) {     this.servletConfig = servletConfig.     if (servletConfig != null && this.servletContext == null) {         setServletContext(servletConfig.getServletContext()).     } }
false;public;0;5;;@Override @Nullable public ServletConfig getServletConfig() {     return this.servletConfig. }
false;public;1;7;;@Override public void setNamespace(@Nullable String namespace) {     this.namespace = namespace.     if (namespace != null) {         setDisplayName("WebApplicationContext for namespace '" + namespace + "'").     } }
false;public;0;5;;@Override @Nullable public String getNamespace() {     return this.namespace. }
false;public;0;4;;@Override public String[] getConfigLocations() {     return super.getConfigLocations(). }
false;public;0;4;;@Override public String getApplicationName() {     return (this.servletContext != null ? this.servletContext.getContextPath() : ""). }
true;protected;0;4;/**  * Create and return a new {@link StandardServletEnvironment}. Subclasses may override  * in order to configure the environment or specialize the environment type returned.  */ ;/**  * Create and return a new {@link StandardServletEnvironment}. Subclasses may override  * in order to configure the environment or specialize the environment type returned.  */ @Override protected ConfigurableEnvironment createEnvironment() {     return new StandardServletEnvironment(). }
true;protected;1;9;/**  * Register request/session scopes, a {@link ServletContextAwareProcessor}, etc.  */ ;/**  * Register request/session scopes, a {@link ServletContextAwareProcessor}, etc.  */ @Override protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {     beanFactory.addBeanPostProcessor(new ServletContextAwareProcessor(this.servletContext, this.servletConfig)).     beanFactory.ignoreDependencyInterface(ServletContextAware.class).     beanFactory.ignoreDependencyInterface(ServletConfigAware.class).     WebApplicationContextUtils.registerWebApplicationScopes(beanFactory, this.servletContext).     WebApplicationContextUtils.registerEnvironmentBeans(beanFactory, this.servletContext, this.servletConfig). }
true;protected;1;5;/**  * This implementation supports file paths beneath the root of the ServletContext.  * @see ServletContextResource  */ ;/**  * This implementation supports file paths beneath the root of the ServletContext.  * @see ServletContextResource  */ @Override protected Resource getResourceByPath(String path) {     Assert.state(this.servletContext != null, "No ServletContext available").     return new ServletContextResource(this.servletContext, path). }
true;protected;0;4;/**  * This implementation supports pattern matching in unexpanded WARs too.  * @see ServletContextResourcePatternResolver  */ ;/**  * This implementation supports pattern matching in unexpanded WARs too.  * @see ServletContextResourcePatternResolver  */ @Override protected ResourcePatternResolver getResourcePatternResolver() {     return new ServletContextResourcePatternResolver(this). }
true;protected;0;4;/**  * Initialize the theme capability.  */ ;/**  * Initialize the theme capability.  */ @Override protected void onRefresh() {     this.themeSource = UiApplicationContextUtils.initThemeSource(this). }
true;protected;0;7;/**  * {@inheritDoc}  * <p>Replace {@code Servlet}-related property sources.  */ ;/**  * {@inheritDoc}  * <p>Replace {@code Servlet}-related property sources.  */ @Override protected void initPropertySources() {     ConfigurableEnvironment env = getEnvironment().     if (env instanceof ConfigurableWebEnvironment) {         ((ConfigurableWebEnvironment) env).initPropertySources(this.servletContext, this.servletConfig).     } }
false;public;1;6;;@Override @Nullable public Theme getTheme(String themeName) {     Assert.state(this.themeSource != null, "No ThemeSource available").     return this.themeSource.getTheme(themeName). }
