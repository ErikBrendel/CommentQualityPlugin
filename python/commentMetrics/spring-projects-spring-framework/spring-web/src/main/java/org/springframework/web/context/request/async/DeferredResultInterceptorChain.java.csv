commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;public void applyBeforeConcurrentHandling(NativeWebRequest request, DeferredResult<?> deferredResult) throws Exception {     for (DeferredResultProcessingInterceptor interceptor : this.interceptors) {         interceptor.beforeConcurrentHandling(request, deferredResult).     } }
false;public;2;6;;public void applyPreProcess(NativeWebRequest request, DeferredResult<?> deferredResult) throws Exception {     for (DeferredResultProcessingInterceptor interceptor : this.interceptors) {         interceptor.preProcess(request, deferredResult).         this.preProcessingIndex++.     } }
false;public;3;13;;public Object applyPostProcess(NativeWebRequest request, DeferredResult<?> deferredResult, Object concurrentResult) {     try {         for (int i = this.preProcessingIndex. i >= 0. i--) {             this.interceptors.get(i).postProcess(request, deferredResult, concurrentResult).         }     } catch (Throwable ex) {         return ex.     }     return concurrentResult. }
false;public;2;10;;public void triggerAfterTimeout(NativeWebRequest request, DeferredResult<?> deferredResult) throws Exception {     for (DeferredResultProcessingInterceptor interceptor : this.interceptors) {         if (deferredResult.isSetOrExpired()) {             return.         }         if (!interceptor.handleTimeout(request, deferredResult)) {             break.         }     } }
true;public;3;13;/**  * Determine if further error handling should be bypassed.  * @return {@code true} to continue error handling, or false to bypass any further  * error handling  */ ;/**  * Determine if further error handling should be bypassed.  * @return {@code true} to continue error handling, or false to bypass any further  * error handling  */ public boolean triggerAfterError(NativeWebRequest request, DeferredResult<?> deferredResult, Throwable ex) throws Exception {     for (DeferredResultProcessingInterceptor interceptor : this.interceptors) {         if (deferredResult.isSetOrExpired()) {             return false.         }         if (!interceptor.handleError(request, deferredResult, ex)) {             return false.         }     }     return true. }
false;public;2;10;;public void triggerAfterCompletion(NativeWebRequest request, DeferredResult<?> deferredResult) {     for (int i = this.preProcessingIndex. i >= 0. i--) {         try {             this.interceptors.get(i).afterCompletion(request, deferredResult).         } catch (Throwable ex) {             logger.trace("Ignoring failure in afterCompletion method", ex).         }     } }
