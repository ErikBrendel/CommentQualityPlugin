commented;modifiers;parameterAmount;loc;comment;code
true;public;1;18;/**  * Actually resolve the value and check the resolved value is not  * {@link WebArgumentResolver#UNRESOLVED} absorbing _any_ exceptions.  */ ;/**  * Actually resolve the value and check the resolved value is not  * {@link WebArgumentResolver#UNRESOLVED} absorbing _any_ exceptions.  */ @Override public boolean supportsParameter(MethodParameter parameter) {     try {         NativeWebRequest webRequest = getWebRequest().         Object result = this.adaptee.resolveArgument(parameter, webRequest).         if (result == WebArgumentResolver.UNRESOLVED) {             return false.         } else {             return ClassUtils.isAssignableValue(parameter.getParameterType(), result).         }     } catch (Exception ex) {         // ignore (see class-level doc)         logger.debug("Error in checking support for parameter [" + parameter + "], message: " + ex.getMessage()).         return false.     } }
true;public;4;15;/**  * Delegate to the {@link WebArgumentResolver} instance.  * @throws IllegalStateException if the resolved value is not assignable  * to the method parameter.  */ ;/**  * Delegate to the {@link WebArgumentResolver} instance.  * @throws IllegalStateException if the resolved value is not assignable  * to the method parameter.  */ @Override @Nullable public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {     Class<?> paramType = parameter.getParameterType().     Object result = this.adaptee.resolveArgument(parameter, webRequest).     if (result == WebArgumentResolver.UNRESOLVED || !ClassUtils.isAssignableValue(paramType, result)) {         throw new IllegalStateException("Standard argument type [" + paramType.getName() + "] in method " + parameter.getMethod() + "resolved to incompatible value of type [" + (result != null ? result.getClass() : null) + "]. Consider declaring the argument type in a less specific fashion.").     }     return result. }
true;protected,abstract;0;1;/**  * Required for access to NativeWebRequest in {@link #supportsParameter}.  */ ;/**  * Required for access to NativeWebRequest in {@link #supportsParameter}.  */ protected abstract NativeWebRequest getWebRequest().
