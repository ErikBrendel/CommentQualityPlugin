# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractWebArgumentResolverAdapter -> public Object resolveArgument( 			MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) 			throws Exception;1328020251;Delegate to the {@link WebArgumentResolver} instance._@exception IllegalStateException if the resolved value is not assignable_to the method parameter.;public Object resolveArgument(_			MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory)_			throws Exception {__		Class<?> paramType = parameter.getParameterType()__		Object result = this.adaptee.resolveArgument(parameter, webRequest)__		if (result == WebArgumentResolver.UNRESOLVED || !ClassUtils.isAssignableValue(paramType, result)) {_			throw new IllegalStateException(_					"Standard argument type [" + paramType.getName() + "] in method " + parameter.getMethod() +_					"resolved to incompatible value of type [" + (result != null ? result.getClass() : null) +_					"]. Consider declaring the argument type in a less specific fashion.")__		}_		return result__	};delegate,to,the,link,web,argument,resolver,instance,exception,illegal,state,exception,if,the,resolved,value,is,not,assignable,to,the,method,parameter;public,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,class,param,type,parameter,get,parameter,type,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,class,utils,is,assignable,value,param,type,result,throw,new,illegal,state,exception,standard,argument,type,param,type,get,name,in,method,parameter,get,method,resolved,to,incompatible,value,of,type,result,null,result,get,class,null,consider,declaring,the,argument,type,in,a,less,specific,fashion,return,result
AbstractWebArgumentResolverAdapter -> public Object resolveArgument( 			MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) 			throws Exception;1357119239;Delegate to the {@link WebArgumentResolver} instance._@exception IllegalStateException if the resolved value is not assignable_to the method parameter.;public Object resolveArgument(_			MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory)_			throws Exception {__		Class<?> paramType = parameter.getParameterType()__		Object result = this.adaptee.resolveArgument(parameter, webRequest)__		if (result == WebArgumentResolver.UNRESOLVED || !ClassUtils.isAssignableValue(paramType, result)) {_			throw new IllegalStateException(_					"Standard argument type [" + paramType.getName() + "] in method " + parameter.getMethod() +_					"resolved to incompatible value of type [" + (result != null ? result.getClass() : null) +_					"]. Consider declaring the argument type in a less specific fashion.")__		}_		return result__	};delegate,to,the,link,web,argument,resolver,instance,exception,illegal,state,exception,if,the,resolved,value,is,not,assignable,to,the,method,parameter;public,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,class,param,type,parameter,get,parameter,type,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,class,utils,is,assignable,value,param,type,result,throw,new,illegal,state,exception,standard,argument,type,param,type,get,name,in,method,parameter,get,method,resolved,to,incompatible,value,of,type,result,null,result,get,class,null,consider,declaring,the,argument,type,in,a,less,specific,fashion,return,result
AbstractWebArgumentResolverAdapter -> public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee);1328020251;Create a new instance.;public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee) {_		Assert.notNull(adaptee, "'adaptee' must not be null")__		this.adaptee = adaptee__	};create,a,new,instance;public,abstract,web,argument,resolver,adapter,web,argument,resolver,adaptee,assert,not,null,adaptee,adaptee,must,not,be,null,this,adaptee,adaptee
AbstractWebArgumentResolverAdapter -> public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee);1356735495;Create a new instance.;public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee) {_		Assert.notNull(adaptee, "'adaptee' must not be null")__		this.adaptee = adaptee__	};create,a,new,instance;public,abstract,web,argument,resolver,adapter,web,argument,resolver,adaptee,assert,not,null,adaptee,adaptee,must,not,be,null,this,adaptee,adaptee
AbstractWebArgumentResolverAdapter -> public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee);1357119239;Create a new instance.;public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee) {_		Assert.notNull(adaptee, "'adaptee' must not be null")__		this.adaptee = adaptee__	};create,a,new,instance;public,abstract,web,argument,resolver,adapter,web,argument,resolver,adaptee,assert,not,null,adaptee,adaptee,must,not,be,null,this,adaptee,adaptee
AbstractWebArgumentResolverAdapter -> public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee);1368482696;Create a new instance.;public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee) {_		Assert.notNull(adaptee, "'adaptee' must not be null")__		this.adaptee = adaptee__	};create,a,new,instance;public,abstract,web,argument,resolver,adapter,web,argument,resolver,adaptee,assert,not,null,adaptee,adaptee,must,not,be,null,this,adaptee,adaptee
AbstractWebArgumentResolverAdapter -> public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee);1411657245;Create a new instance.;public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee) {_		Assert.notNull(adaptee, "'adaptee' must not be null")__		this.adaptee = adaptee__	};create,a,new,instance;public,abstract,web,argument,resolver,adapter,web,argument,resolver,adaptee,assert,not,null,adaptee,adaptee,must,not,be,null,this,adaptee,adaptee
AbstractWebArgumentResolverAdapter -> public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee);1495868221;Create a new instance.;public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee) {_		Assert.notNull(adaptee, "'adaptee' must not be null")__		this.adaptee = adaptee__	};create,a,new,instance;public,abstract,web,argument,resolver,adapter,web,argument,resolver,adaptee,assert,not,null,adaptee,adaptee,must,not,be,null,this,adaptee,adaptee
AbstractWebArgumentResolverAdapter -> public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee);1496837955;Create a new instance.;public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee) {_		Assert.notNull(adaptee, "'adaptee' must not be null")__		this.adaptee = adaptee__	};create,a,new,instance;public,abstract,web,argument,resolver,adapter,web,argument,resolver,adaptee,assert,not,null,adaptee,adaptee,must,not,be,null,this,adaptee,adaptee
AbstractWebArgumentResolverAdapter -> public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee);1502974979;Create a new instance.;public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee) {_		Assert.notNull(adaptee, "'adaptee' must not be null")__		this.adaptee = adaptee__	};create,a,new,instance;public,abstract,web,argument,resolver,adapter,web,argument,resolver,adaptee,assert,not,null,adaptee,adaptee,must,not,be,null,this,adaptee,adaptee
AbstractWebArgumentResolverAdapter -> public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee);1517867511;Create a new instance.;public AbstractWebArgumentResolverAdapter(WebArgumentResolver adaptee) {_		Assert.notNull(adaptee, "'adaptee' must not be null")__		this.adaptee = adaptee__	};create,a,new,instance;public,abstract,web,argument,resolver,adapter,web,argument,resolver,adaptee,assert,not,null,adaptee,adaptee,must,not,be,null,this,adaptee,adaptee
AbstractWebArgumentResolverAdapter -> public boolean supportsParameter(MethodParameter parameter);1328020251;Actually resolve the value and check the resolved value is not_{@link WebArgumentResolver#UNRESOLVED} absorbing _any_ exceptions.;public boolean supportsParameter(MethodParameter parameter) {_		try {_			NativeWebRequest webRequest = getWebRequest()__			Object result = this.adaptee.resolveArgument(parameter, webRequest)__			if (result == WebArgumentResolver.UNRESOLVED) {_				return false__			}_			else {_				return ClassUtils.isAssignableValue(parameter.getParameterType(), result)__			}_		}_		catch (Exception ex) {_			_			logger.debug("Error in checking support for parameter [" + parameter + "], message: " + ex.getMessage())__			return false__		}_	};actually,resolve,the,value,and,check,the,resolved,value,is,not,link,web,argument,resolver,unresolved,absorbing,exceptions;public,boolean,supports,parameter,method,parameter,parameter,try,native,web,request,web,request,get,web,request,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,return,false,else,return,class,utils,is,assignable,value,parameter,get,parameter,type,result,catch,exception,ex,logger,debug,error,in,checking,support,for,parameter,parameter,message,ex,get,message,return,false
AbstractWebArgumentResolverAdapter -> public boolean supportsParameter(MethodParameter parameter);1357119239;Actually resolve the value and check the resolved value is not_{@link WebArgumentResolver#UNRESOLVED} absorbing _any_ exceptions.;public boolean supportsParameter(MethodParameter parameter) {_		try {_			NativeWebRequest webRequest = getWebRequest()__			Object result = this.adaptee.resolveArgument(parameter, webRequest)__			if (result == WebArgumentResolver.UNRESOLVED) {_				return false__			}_			else {_				return ClassUtils.isAssignableValue(parameter.getParameterType(), result)__			}_		}_		catch (Exception ex) {_			_			logger.debug("Error in checking support for parameter [" + parameter + "], message: " + ex.getMessage())__			return false__		}_	};actually,resolve,the,value,and,check,the,resolved,value,is,not,link,web,argument,resolver,unresolved,absorbing,exceptions;public,boolean,supports,parameter,method,parameter,parameter,try,native,web,request,web,request,get,web,request,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,return,false,else,return,class,utils,is,assignable,value,parameter,get,parameter,type,result,catch,exception,ex,logger,debug,error,in,checking,support,for,parameter,parameter,message,ex,get,message,return,false
AbstractWebArgumentResolverAdapter -> @Override 	public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;1411657245;Delegate to the {@link WebArgumentResolver} instance._@exception IllegalStateException if the resolved value is not assignable_to the method parameter.;@Override_	public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {__		Class<?> paramType = parameter.getParameterType()__		Object result = this.adaptee.resolveArgument(parameter, webRequest)__		if (result == WebArgumentResolver.UNRESOLVED || !ClassUtils.isAssignableValue(paramType, result)) {_			throw new IllegalStateException(_					"Standard argument type [" + paramType.getName() + "] in method " + parameter.getMethod() +_					"resolved to incompatible value of type [" + (result != null ? result.getClass() : null) +_					"]. Consider declaring the argument type in a less specific fashion.")__		}_		return result__	};delegate,to,the,link,web,argument,resolver,instance,exception,illegal,state,exception,if,the,resolved,value,is,not,assignable,to,the,method,parameter;override,public,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,class,param,type,parameter,get,parameter,type,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,class,utils,is,assignable,value,param,type,result,throw,new,illegal,state,exception,standard,argument,type,param,type,get,name,in,method,parameter,get,method,resolved,to,incompatible,value,of,type,result,null,result,get,class,null,consider,declaring,the,argument,type,in,a,less,specific,fashion,return,result
AbstractWebArgumentResolverAdapter -> @Override 	public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;1495868221;Delegate to the {@link WebArgumentResolver} instance._@exception IllegalStateException if the resolved value is not assignable_to the method parameter.;@Override_	public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {__		Class<?> paramType = parameter.getParameterType()__		Object result = this.adaptee.resolveArgument(parameter, webRequest)__		if (result == WebArgumentResolver.UNRESOLVED || !ClassUtils.isAssignableValue(paramType, result)) {_			throw new IllegalStateException(_					"Standard argument type [" + paramType.getName() + "] in method " + parameter.getMethod() +_					"resolved to incompatible value of type [" + (result != null ? result.getClass() : null) +_					"]. Consider declaring the argument type in a less specific fashion.")__		}_		return result__	};delegate,to,the,link,web,argument,resolver,instance,exception,illegal,state,exception,if,the,resolved,value,is,not,assignable,to,the,method,parameter;override,public,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,class,param,type,parameter,get,parameter,type,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,class,utils,is,assignable,value,param,type,result,throw,new,illegal,state,exception,standard,argument,type,param,type,get,name,in,method,parameter,get,method,resolved,to,incompatible,value,of,type,result,null,result,get,class,null,consider,declaring,the,argument,type,in,a,less,specific,fashion,return,result
AbstractWebArgumentResolverAdapter -> protected abstract NativeWebRequest getWebRequest()_;1328020251;Required for access to NativeWebRequest in {@link #supportsParameter}.;protected abstract NativeWebRequest getWebRequest()_;required,for,access,to,native,web,request,in,link,supports,parameter;protected,abstract,native,web,request,get,web,request
AbstractWebArgumentResolverAdapter -> protected abstract NativeWebRequest getWebRequest()_;1356735495;Required for access to NativeWebRequest in {@link #supportsParameter}.;protected abstract NativeWebRequest getWebRequest()_;required,for,access,to,native,web,request,in,link,supports,parameter;protected,abstract,native,web,request,get,web,request
AbstractWebArgumentResolverAdapter -> protected abstract NativeWebRequest getWebRequest()_;1357119239;Required for access to NativeWebRequest in {@link #supportsParameter}.;protected abstract NativeWebRequest getWebRequest()_;required,for,access,to,native,web,request,in,link,supports,parameter;protected,abstract,native,web,request,get,web,request
AbstractWebArgumentResolverAdapter -> protected abstract NativeWebRequest getWebRequest()_;1368482696;Required for access to NativeWebRequest in {@link #supportsParameter}.;protected abstract NativeWebRequest getWebRequest()_;required,for,access,to,native,web,request,in,link,supports,parameter;protected,abstract,native,web,request,get,web,request
AbstractWebArgumentResolverAdapter -> protected abstract NativeWebRequest getWebRequest()_;1411657245;Required for access to NativeWebRequest in {@link #supportsParameter}.;protected abstract NativeWebRequest getWebRequest()_;required,for,access,to,native,web,request,in,link,supports,parameter;protected,abstract,native,web,request,get,web,request
AbstractWebArgumentResolverAdapter -> protected abstract NativeWebRequest getWebRequest()_;1496837955;Required for access to NativeWebRequest in {@link #supportsParameter}.;protected abstract NativeWebRequest getWebRequest()_;required,for,access,to,native,web,request,in,link,supports,parameter;protected,abstract,native,web,request,get,web,request
AbstractWebArgumentResolverAdapter -> protected abstract NativeWebRequest getWebRequest()_;1502974979;Required for access to NativeWebRequest in {@link #supportsParameter}.;protected abstract NativeWebRequest getWebRequest()_;required,for,access,to,native,web,request,in,link,supports,parameter;protected,abstract,native,web,request,get,web,request
AbstractWebArgumentResolverAdapter -> protected abstract NativeWebRequest getWebRequest()_;1517867511;Required for access to NativeWebRequest in {@link #supportsParameter}.;protected abstract NativeWebRequest getWebRequest()_;required,for,access,to,native,web,request,in,link,supports,parameter;protected,abstract,native,web,request,get,web,request
AbstractWebArgumentResolverAdapter -> @Override 	public Object resolveArgument( 			MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) 			throws Exception;1356735495;Delegate to the {@link WebArgumentResolver} instance._@exception IllegalStateException if the resolved value is not assignable_to the method parameter.;@Override_	public Object resolveArgument(_			MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory)_			throws Exception {__		Class<?> paramType = parameter.getParameterType()__		Object result = this.adaptee.resolveArgument(parameter, webRequest)__		if (result == WebArgumentResolver.UNRESOLVED || !ClassUtils.isAssignableValue(paramType, result)) {_			throw new IllegalStateException(_					"Standard argument type [" + paramType.getName() + "] in method " + parameter.getMethod() +_					"resolved to incompatible value of type [" + (result != null ? result.getClass() : null) +_					"]. Consider declaring the argument type in a less specific fashion.")__		}_		return result__	};delegate,to,the,link,web,argument,resolver,instance,exception,illegal,state,exception,if,the,resolved,value,is,not,assignable,to,the,method,parameter;override,public,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,class,param,type,parameter,get,parameter,type,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,class,utils,is,assignable,value,param,type,result,throw,new,illegal,state,exception,standard,argument,type,param,type,get,name,in,method,parameter,get,method,resolved,to,incompatible,value,of,type,result,null,result,get,class,null,consider,declaring,the,argument,type,in,a,less,specific,fashion,return,result
AbstractWebArgumentResolverAdapter -> @Override 	public Object resolveArgument( 			MethodParameter parameter, ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) 			throws Exception;1368482696;Delegate to the {@link WebArgumentResolver} instance._@exception IllegalStateException if the resolved value is not assignable_to the method parameter.;@Override_	public Object resolveArgument(_			MethodParameter parameter, ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, WebDataBinderFactory binderFactory)_			throws Exception {__		Class<?> paramType = parameter.getParameterType()__		Object result = this.adaptee.resolveArgument(parameter, webRequest)__		if (result == WebArgumentResolver.UNRESOLVED || !ClassUtils.isAssignableValue(paramType, result)) {_			throw new IllegalStateException(_					"Standard argument type [" + paramType.getName() + "] in method " + parameter.getMethod() +_					"resolved to incompatible value of type [" + (result != null ? result.getClass() : null) +_					"]. Consider declaring the argument type in a less specific fashion.")__		}_		return result__	};delegate,to,the,link,web,argument,resolver,instance,exception,illegal,state,exception,if,the,resolved,value,is,not,assignable,to,the,method,parameter;override,public,object,resolve,argument,method,parameter,parameter,model,and,view,container,mav,container,native,web,request,web,request,web,data,binder,factory,binder,factory,throws,exception,class,param,type,parameter,get,parameter,type,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,class,utils,is,assignable,value,param,type,result,throw,new,illegal,state,exception,standard,argument,type,param,type,get,name,in,method,parameter,get,method,resolved,to,incompatible,value,of,type,result,null,result,get,class,null,consider,declaring,the,argument,type,in,a,less,specific,fashion,return,result
AbstractWebArgumentResolverAdapter -> @Override 	@Nullable 	public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;1502974979;Delegate to the {@link WebArgumentResolver} instance._@exception IllegalStateException if the resolved value is not assignable_to the method parameter.;@Override_	@Nullable_	public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {__		Class<?> paramType = parameter.getParameterType()__		Object result = this.adaptee.resolveArgument(parameter, webRequest)__		if (result == WebArgumentResolver.UNRESOLVED || !ClassUtils.isAssignableValue(paramType, result)) {_			throw new IllegalStateException(_					"Standard argument type [" + paramType.getName() + "] in method " + parameter.getMethod() +_					"resolved to incompatible value of type [" + (result != null ? result.getClass() : null) +_					"]. Consider declaring the argument type in a less specific fashion.")__		}_		return result__	};delegate,to,the,link,web,argument,resolver,instance,exception,illegal,state,exception,if,the,resolved,value,is,not,assignable,to,the,method,parameter;override,nullable,public,object,resolve,argument,method,parameter,parameter,nullable,model,and,view,container,mav,container,native,web,request,web,request,nullable,web,data,binder,factory,binder,factory,throws,exception,class,param,type,parameter,get,parameter,type,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,class,utils,is,assignable,value,param,type,result,throw,new,illegal,state,exception,standard,argument,type,param,type,get,name,in,method,parameter,get,method,resolved,to,incompatible,value,of,type,result,null,result,get,class,null,consider,declaring,the,argument,type,in,a,less,specific,fashion,return,result
AbstractWebArgumentResolverAdapter -> @Override 	@Nullable 	public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, 			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;1517867511;Delegate to the {@link WebArgumentResolver} instance._@throws IllegalStateException if the resolved value is not assignable_to the method parameter.;@Override_	@Nullable_	public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,_			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {__		Class<?> paramType = parameter.getParameterType()__		Object result = this.adaptee.resolveArgument(parameter, webRequest)__		if (result == WebArgumentResolver.UNRESOLVED || !ClassUtils.isAssignableValue(paramType, result)) {_			throw new IllegalStateException(_					"Standard argument type [" + paramType.getName() + "] in method " + parameter.getMethod() +_					"resolved to incompatible value of type [" + (result != null ? result.getClass() : null) +_					"]. Consider declaring the argument type in a less specific fashion.")__		}_		return result__	};delegate,to,the,link,web,argument,resolver,instance,throws,illegal,state,exception,if,the,resolved,value,is,not,assignable,to,the,method,parameter;override,nullable,public,object,resolve,argument,method,parameter,parameter,nullable,model,and,view,container,mav,container,native,web,request,web,request,nullable,web,data,binder,factory,binder,factory,throws,exception,class,param,type,parameter,get,parameter,type,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,class,utils,is,assignable,value,param,type,result,throw,new,illegal,state,exception,standard,argument,type,param,type,get,name,in,method,parameter,get,method,resolved,to,incompatible,value,of,type,result,null,result,get,class,null,consider,declaring,the,argument,type,in,a,less,specific,fashion,return,result
AbstractWebArgumentResolverAdapter -> @Override 	public boolean supportsParameter(MethodParameter parameter);1356735495;Actually resolve the value and check the resolved value is not_{@link WebArgumentResolver#UNRESOLVED} absorbing _any_ exceptions.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		try {_			NativeWebRequest webRequest = getWebRequest()__			Object result = this.adaptee.resolveArgument(parameter, webRequest)__			if (result == WebArgumentResolver.UNRESOLVED) {_				return false__			}_			else {_				return ClassUtils.isAssignableValue(parameter.getParameterType(), result)__			}_		}_		catch (Exception ex) {_			_			logger.debug("Error in checking support for parameter [" + parameter + "], message: " + ex.getMessage())__			return false__		}_	};actually,resolve,the,value,and,check,the,resolved,value,is,not,link,web,argument,resolver,unresolved,absorbing,exceptions;override,public,boolean,supports,parameter,method,parameter,parameter,try,native,web,request,web,request,get,web,request,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,return,false,else,return,class,utils,is,assignable,value,parameter,get,parameter,type,result,catch,exception,ex,logger,debug,error,in,checking,support,for,parameter,parameter,message,ex,get,message,return,false
AbstractWebArgumentResolverAdapter -> @Override 	public boolean supportsParameter(MethodParameter parameter);1368482696;Actually resolve the value and check the resolved value is not_{@link WebArgumentResolver#UNRESOLVED} absorbing _any_ exceptions.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		try {_			NativeWebRequest webRequest = getWebRequest()__			Object result = this.adaptee.resolveArgument(parameter, webRequest)__			if (result == WebArgumentResolver.UNRESOLVED) {_				return false__			}_			else {_				return ClassUtils.isAssignableValue(parameter.getParameterType(), result)__			}_		}_		catch (Exception ex) {_			_			logger.debug("Error in checking support for parameter [" + parameter + "], message: " + ex.getMessage())__			return false__		}_	};actually,resolve,the,value,and,check,the,resolved,value,is,not,link,web,argument,resolver,unresolved,absorbing,exceptions;override,public,boolean,supports,parameter,method,parameter,parameter,try,native,web,request,web,request,get,web,request,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,return,false,else,return,class,utils,is,assignable,value,parameter,get,parameter,type,result,catch,exception,ex,logger,debug,error,in,checking,support,for,parameter,parameter,message,ex,get,message,return,false
AbstractWebArgumentResolverAdapter -> @Override 	public boolean supportsParameter(MethodParameter parameter);1411657245;Actually resolve the value and check the resolved value is not_{@link WebArgumentResolver#UNRESOLVED} absorbing _any_ exceptions.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		try {_			NativeWebRequest webRequest = getWebRequest()__			Object result = this.adaptee.resolveArgument(parameter, webRequest)__			if (result == WebArgumentResolver.UNRESOLVED) {_				return false__			}_			else {_				return ClassUtils.isAssignableValue(parameter.getParameterType(), result)__			}_		}_		catch (Exception ex) {_			_			logger.debug("Error in checking support for parameter [" + parameter + "], message: " + ex.getMessage())__			return false__		}_	};actually,resolve,the,value,and,check,the,resolved,value,is,not,link,web,argument,resolver,unresolved,absorbing,exceptions;override,public,boolean,supports,parameter,method,parameter,parameter,try,native,web,request,web,request,get,web,request,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,return,false,else,return,class,utils,is,assignable,value,parameter,get,parameter,type,result,catch,exception,ex,logger,debug,error,in,checking,support,for,parameter,parameter,message,ex,get,message,return,false
AbstractWebArgumentResolverAdapter -> @Override 	public boolean supportsParameter(MethodParameter parameter);1495868221;Actually resolve the value and check the resolved value is not_{@link WebArgumentResolver#UNRESOLVED} absorbing _any_ exceptions.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		try {_			NativeWebRequest webRequest = getWebRequest()__			Object result = this.adaptee.resolveArgument(parameter, webRequest)__			if (result == WebArgumentResolver.UNRESOLVED) {_				return false__			}_			else {_				return ClassUtils.isAssignableValue(parameter.getParameterType(), result)__			}_		}_		catch (Exception ex) {_			_			logger.debug("Error in checking support for parameter [" + parameter + "], message: " + ex.getMessage())__			return false__		}_	};actually,resolve,the,value,and,check,the,resolved,value,is,not,link,web,argument,resolver,unresolved,absorbing,exceptions;override,public,boolean,supports,parameter,method,parameter,parameter,try,native,web,request,web,request,get,web,request,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,return,false,else,return,class,utils,is,assignable,value,parameter,get,parameter,type,result,catch,exception,ex,logger,debug,error,in,checking,support,for,parameter,parameter,message,ex,get,message,return,false
AbstractWebArgumentResolverAdapter -> @Override 	public boolean supportsParameter(MethodParameter parameter);1496837955;Actually resolve the value and check the resolved value is not_{@link WebArgumentResolver#UNRESOLVED} absorbing _any_ exceptions.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		try {_			NativeWebRequest webRequest = getWebRequest()__			Object result = this.adaptee.resolveArgument(parameter, webRequest)__			if (result == WebArgumentResolver.UNRESOLVED) {_				return false__			}_			else {_				return ClassUtils.isAssignableValue(parameter.getParameterType(), result)__			}_		}_		catch (Exception ex) {_			_			logger.debug("Error in checking support for parameter [" + parameter + "], message: " + ex.getMessage())__			return false__		}_	};actually,resolve,the,value,and,check,the,resolved,value,is,not,link,web,argument,resolver,unresolved,absorbing,exceptions;override,public,boolean,supports,parameter,method,parameter,parameter,try,native,web,request,web,request,get,web,request,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,return,false,else,return,class,utils,is,assignable,value,parameter,get,parameter,type,result,catch,exception,ex,logger,debug,error,in,checking,support,for,parameter,parameter,message,ex,get,message,return,false
AbstractWebArgumentResolverAdapter -> @Override 	public boolean supportsParameter(MethodParameter parameter);1502974979;Actually resolve the value and check the resolved value is not_{@link WebArgumentResolver#UNRESOLVED} absorbing _any_ exceptions.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		try {_			NativeWebRequest webRequest = getWebRequest()__			Object result = this.adaptee.resolveArgument(parameter, webRequest)__			if (result == WebArgumentResolver.UNRESOLVED) {_				return false__			}_			else {_				return ClassUtils.isAssignableValue(parameter.getParameterType(), result)__			}_		}_		catch (Exception ex) {_			_			logger.debug("Error in checking support for parameter [" + parameter + "], message: " + ex.getMessage())__			return false__		}_	};actually,resolve,the,value,and,check,the,resolved,value,is,not,link,web,argument,resolver,unresolved,absorbing,exceptions;override,public,boolean,supports,parameter,method,parameter,parameter,try,native,web,request,web,request,get,web,request,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,return,false,else,return,class,utils,is,assignable,value,parameter,get,parameter,type,result,catch,exception,ex,logger,debug,error,in,checking,support,for,parameter,parameter,message,ex,get,message,return,false
AbstractWebArgumentResolverAdapter -> @Override 	public boolean supportsParameter(MethodParameter parameter);1517867511;Actually resolve the value and check the resolved value is not_{@link WebArgumentResolver#UNRESOLVED} absorbing _any_ exceptions.;@Override_	public boolean supportsParameter(MethodParameter parameter) {_		try {_			NativeWebRequest webRequest = getWebRequest()__			Object result = this.adaptee.resolveArgument(parameter, webRequest)__			if (result == WebArgumentResolver.UNRESOLVED) {_				return false__			}_			else {_				return ClassUtils.isAssignableValue(parameter.getParameterType(), result)__			}_		}_		catch (Exception ex) {_			_			logger.debug("Error in checking support for parameter [" + parameter + "], message: " + ex.getMessage())__			return false__		}_	};actually,resolve,the,value,and,check,the,resolved,value,is,not,link,web,argument,resolver,unresolved,absorbing,exceptions;override,public,boolean,supports,parameter,method,parameter,parameter,try,native,web,request,web,request,get,web,request,object,result,this,adaptee,resolve,argument,parameter,web,request,if,result,web,argument,resolver,unresolved,return,false,else,return,class,utils,is,assignable,value,parameter,get,parameter,type,result,catch,exception,ex,logger,debug,error,in,checking,support,for,parameter,parameter,message,ex,get,message,return,false
