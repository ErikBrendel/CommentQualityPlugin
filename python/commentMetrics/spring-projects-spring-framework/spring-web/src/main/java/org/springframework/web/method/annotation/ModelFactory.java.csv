# id;timestamp;commentText;codeText;commentWords;codeWords
ModelFactory -> public static String getNameForReturnValue(Object returnValue, MethodParameter returnType);1328020251;Derive the model attribute name for the given return value using_one of the following:_<ol>_<li>The method {@code ModelAttribute} annotation value_<li>The declared return type if it is other than {@code Object}_<li>The actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType the return type of the method_@return the model name, never {@code null} nor empty;public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {_		ModelAttribute annot = returnType.getMethodAnnotation(ModelAttribute.class)__		if (annot != null && StringUtils.hasText(annot.value())) {_			return annot.value()__		}_		else {_			Method method = returnType.getMethod()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, returnType.getDeclaringClass())__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,using,one,of,the,following,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,other,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,the,return,type,of,the,method,return,the,model,name,never,code,null,nor,empty;public,static,string,get,name,for,return,value,object,return,value,method,parameter,return,type,model,attribute,annot,return,type,get,method,annotation,model,attribute,class,if,annot,null,string,utils,has,text,annot,value,return,annot,value,else,method,method,return,type,get,method,class,resolved,type,generic,type,resolver,resolve,return,type,method,return,type,get,declaring,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(Object returnValue, MethodParameter returnType);1356735495;Derive the model attribute name for the given return value using_one of the following:_<ol>_<li>The method {@code ModelAttribute} annotation value_<li>The declared return type if it is other than {@code Object}_<li>The actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType the return type of the method_@return the model name, never {@code null} nor empty;public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {_		ModelAttribute annot = returnType.getMethodAnnotation(ModelAttribute.class)__		if (annot != null && StringUtils.hasText(annot.value())) {_			return annot.value()__		}_		else {_			Method method = returnType.getMethod()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, returnType.getDeclaringClass())__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,using,one,of,the,following,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,other,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,the,return,type,of,the,method,return,the,model,name,never,code,null,nor,empty;public,static,string,get,name,for,return,value,object,return,value,method,parameter,return,type,model,attribute,annot,return,type,get,method,annotation,model,attribute,class,if,annot,null,string,utils,has,text,annot,value,return,annot,value,else,method,method,return,type,get,method,class,resolved,type,generic,type,resolver,resolve,return,type,method,return,type,get,declaring,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(Object returnValue, MethodParameter returnType);1362408075;Derive the model attribute name for the given return value using_one of the following:_<ol>_<li>The method {@code ModelAttribute} annotation value_<li>The declared return type if it is other than {@code Object}_<li>The actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType the return type of the method_@return the model name, never {@code null} nor empty;public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {_		ModelAttribute annot = returnType.getMethodAnnotation(ModelAttribute.class)__		if (annot != null && StringUtils.hasText(annot.value())) {_			return annot.value()__		}_		else {_			Method method = returnType.getMethod()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, returnType.getDeclaringClass())__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,using,one,of,the,following,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,other,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,the,return,type,of,the,method,return,the,model,name,never,code,null,nor,empty;public,static,string,get,name,for,return,value,object,return,value,method,parameter,return,type,model,attribute,annot,return,type,get,method,annotation,model,attribute,class,if,annot,null,string,utils,has,text,annot,value,return,annot,value,else,method,method,return,type,get,method,class,resolved,type,generic,type,resolver,resolve,return,type,method,return,type,get,declaring,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(Object returnValue, MethodParameter returnType);1381788683;Derive the model attribute name for the given return value using_one of the following:_<ol>_<li>The method {@code ModelAttribute} annotation value_<li>The declared return type if it is other than {@code Object}_<li>The actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType the return type of the method_@return the model name, never {@code null} nor empty;public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {_		ModelAttribute annot = returnType.getMethodAnnotation(ModelAttribute.class)__		if (annot != null && StringUtils.hasText(annot.value())) {_			return annot.value()__		}_		else {_			Method method = returnType.getMethod()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, returnType.getContainingClass())__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,using,one,of,the,following,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,other,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,the,return,type,of,the,method,return,the,model,name,never,code,null,nor,empty;public,static,string,get,name,for,return,value,object,return,value,method,parameter,return,type,model,attribute,annot,return,type,get,method,annotation,model,attribute,class,if,annot,null,string,utils,has,text,annot,value,return,annot,value,else,method,method,return,type,get,method,class,resolved,type,generic,type,resolver,resolve,return,type,method,return,type,get,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(Object returnValue, MethodParameter returnType);1402172495;Derive the model attribute name for the given return value using one of:_<ol>_<li>The method {@code ModelAttribute} annotation value_<li>The declared return type if it is more specific than {@code Object}_<li>The actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType the return type of the method_@return the model name, never {@code null} nor empty;public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {_		ModelAttribute annotation = returnType.getMethodAnnotation(ModelAttribute.class)__		if (annotation != null && StringUtils.hasText(annotation.value())) {_			return annotation.value()__		}_		else {_			Method method = returnType.getMethod()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, returnType.getContainingClass())__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,using,one,of,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,the,return,type,of,the,method,return,the,model,name,never,code,null,nor,empty;public,static,string,get,name,for,return,value,object,return,value,method,parameter,return,type,model,attribute,annotation,return,type,get,method,annotation,model,attribute,class,if,annotation,null,string,utils,has,text,annotation,value,return,annotation,value,else,method,method,return,type,get,method,class,resolved,type,generic,type,resolver,resolve,return,type,method,return,type,get,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(Object returnValue, MethodParameter returnType);1402172496;Derive the model attribute name for the given return value using one of:_<ol>_<li>The method {@code ModelAttribute} annotation value_<li>The declared return type if it is more specific than {@code Object}_<li>The actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType the return type of the method_@return the model name, never {@code null} nor empty;public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {_		ModelAttribute annotation = returnType.getMethodAnnotation(ModelAttribute.class)__		if (annotation != null && StringUtils.hasText(annotation.value())) {_			return annotation.value()__		}_		else {_			Method method = returnType.getMethod()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, returnType.getContainingClass())__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,using,one,of,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,the,return,type,of,the,method,return,the,model,name,never,code,null,nor,empty;public,static,string,get,name,for,return,value,object,return,value,method,parameter,return,type,model,attribute,annotation,return,type,get,method,annotation,model,attribute,class,if,annotation,null,string,utils,has,text,annotation,value,return,annotation,value,else,method,method,return,type,get,method,class,resolved,type,generic,type,resolver,resolve,return,type,method,return,type,get,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(Object returnValue, MethodParameter returnType);1413848647;Derive the model attribute name for the given return value using one of:_<ol>_<li>The method {@code ModelAttribute} annotation value_<li>The declared return type if it is more specific than {@code Object}_<li>The actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType the return type of the method_@return the model name, never {@code null} nor empty;public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {_		ModelAttribute annotation = returnType.getMethodAnnotation(ModelAttribute.class)__		if (annotation != null && StringUtils.hasText(annotation.value())) {_			return annotation.value()__		}_		else {_			Method method = returnType.getMethod()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, returnType.getContainingClass())__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,using,one,of,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,the,return,type,of,the,method,return,the,model,name,never,code,null,nor,empty;public,static,string,get,name,for,return,value,object,return,value,method,parameter,return,type,model,attribute,annotation,return,type,get,method,annotation,model,attribute,class,if,annotation,null,string,utils,has,text,annotation,value,return,annotation,value,else,method,method,return,type,get,method,class,resolved,type,generic,type,resolver,resolve,return,type,method,return,type,get,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(Object returnValue, MethodParameter returnType);1419362684;Derive the model attribute name for the given return value using one of:_<ol>_<li>The method {@code ModelAttribute} annotation value_<li>The declared return type if it is more specific than {@code Object}_<li>The actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType the return type of the method_@return the model name, never {@code null} nor empty;public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {_		ModelAttribute annotation = returnType.getMethodAnnotation(ModelAttribute.class)__		if (annotation != null && StringUtils.hasText(annotation.value())) {_			return annotation.value()__		}_		else {_			Method method = returnType.getMethod()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, returnType.getContainingClass())__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,using,one,of,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,the,return,type,of,the,method,return,the,model,name,never,code,null,nor,empty;public,static,string,get,name,for,return,value,object,return,value,method,parameter,return,type,model,attribute,annotation,return,type,get,method,annotation,model,attribute,class,if,annotation,null,string,utils,has,text,annotation,value,return,annotation,value,else,method,method,return,type,get,method,class,resolved,type,generic,type,resolver,resolve,return,type,method,return,type,get,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(Object returnValue, MethodParameter returnType);1453868458;Derive the model attribute name for the given return value using one of:_<ol>_<li>The method {@code ModelAttribute} annotation value_<li>The declared return type if it is more specific than {@code Object}_<li>The actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType the return type of the method_@return the model name, never {@code null} nor empty;public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {_		ModelAttribute annotation = returnType.getMethodAnnotation(ModelAttribute.class)__		if (annotation != null && StringUtils.hasText(annotation.value())) {_			return annotation.value()__		}_		else {_			Method method = returnType.getMethod()__			Class<?> containingClass = returnType.getContainingClass()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, containingClass)__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,using,one,of,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,the,return,type,of,the,method,return,the,model,name,never,code,null,nor,empty;public,static,string,get,name,for,return,value,object,return,value,method,parameter,return,type,model,attribute,annotation,return,type,get,method,annotation,model,attribute,class,if,annotation,null,string,utils,has,text,annotation,value,return,annotation,value,else,method,method,return,type,get,method,class,containing,class,return,type,get,containing,class,class,resolved,type,generic,type,resolver,resolve,return,type,method,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(Object returnValue, MethodParameter returnType);1453870278;Derive the model attribute name for the given return value using one of:_<ol>_<li>The method {@code ModelAttribute} annotation value_<li>The declared return type if it is more specific than {@code Object}_<li>The actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType the return type of the method_@return the model name, never {@code null} nor empty;public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {_		ModelAttribute annotation = returnType.getMethodAnnotation(ModelAttribute.class)__		if (annotation != null && StringUtils.hasText(annotation.value())) {_			return annotation.value()__		}_		else {_			Method method = returnType.getMethod()__			Class<?> containingClass = returnType.getContainingClass()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, containingClass)__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,using,one,of,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,the,return,type,of,the,method,return,the,model,name,never,code,null,nor,empty;public,static,string,get,name,for,return,value,object,return,value,method,parameter,return,type,model,attribute,annotation,return,type,get,method,annotation,model,attribute,class,if,annotation,null,string,utils,has,text,annotation,value,return,annotation,value,else,method,method,return,type,get,method,class,containing,class,return,type,get,containing,class,class,resolved,type,generic,type,resolver,resolve,return,type,method,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(Object returnValue, MethodParameter returnType);1458754769;Derive the model attribute name for the given return value using one of:_<ol>_<li>The method {@code ModelAttribute} annotation value_<li>The declared return type if it is more specific than {@code Object}_<li>The actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType the return type of the method_@return the model name, never {@code null} nor empty;public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {_		ModelAttribute ann = returnType.getMethodAnnotation(ModelAttribute.class)__		if (ann != null && StringUtils.hasText(ann.value())) {_			return ann.value()__		}_		else {_			Method method = returnType.getMethod()__			Class<?> containingClass = returnType.getContainingClass()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, containingClass)__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,using,one,of,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,the,return,type,of,the,method,return,the,model,name,never,code,null,nor,empty;public,static,string,get,name,for,return,value,object,return,value,method,parameter,return,type,model,attribute,ann,return,type,get,method,annotation,model,attribute,class,if,ann,null,string,utils,has,text,ann,value,return,ann,value,else,method,method,return,type,get,method,class,containing,class,return,type,get,containing,class,class,resolved,type,generic,type,resolver,resolve,return,type,method,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(Object returnValue, MethodParameter returnType);1458843770;Derive the model attribute name for the given return value using one of:_<ol>_<li>The method {@code ModelAttribute} annotation value_<li>The declared return type if it is more specific than {@code Object}_<li>The actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType the return type of the method_@return the model name, never {@code null} nor empty;public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {_		ModelAttribute ann = returnType.getMethodAnnotation(ModelAttribute.class)__		if (ann != null && StringUtils.hasText(ann.value())) {_			return ann.value()__		}_		else {_			Method method = returnType.getMethod()__			Class<?> containingClass = returnType.getContainingClass()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, containingClass)__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,using,one,of,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,the,return,type,of,the,method,return,the,model,name,never,code,null,nor,empty;public,static,string,get,name,for,return,value,object,return,value,method,parameter,return,type,model,attribute,ann,return,type,get,method,annotation,model,attribute,class,if,ann,null,string,utils,has,text,ann,value,return,ann,value,else,method,method,return,type,get,method,class,containing,class,return,type,get,containing,class,class,resolved,type,generic,type,resolver,resolve,return,type,method,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(Object returnValue, MethodParameter returnType);1461704770;Derive the model attribute name for the given return value using one of:_<ol>_<li>The method {@code ModelAttribute} annotation value_<li>The declared return type if it is more specific than {@code Object}_<li>The actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType the return type of the method_@return the model name, never {@code null} nor empty;public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {_		ModelAttribute ann = returnType.getMethodAnnotation(ModelAttribute.class)__		if (ann != null && StringUtils.hasText(ann.value())) {_			return ann.value()__		}_		else {_			Method method = returnType.getMethod()__			Class<?> containingClass = returnType.getContainingClass()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, containingClass)__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,using,one,of,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,the,return,type,of,the,method,return,the,model,name,never,code,null,nor,empty;public,static,string,get,name,for,return,value,object,return,value,method,parameter,return,type,model,attribute,ann,return,type,get,method,annotation,model,attribute,class,if,ann,null,string,utils,has,text,ann,value,return,ann,value,else,method,method,return,type,get,method,class,containing,class,return,type,get,containing,class,class,resolved,type,generic,type,resolver,resolve,return,type,method,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(Object returnValue, MethodParameter returnType);1467730834;Derive the model attribute name for the given return value using one of:_<ol>_<li>The method {@code ModelAttribute} annotation value_<li>The declared return type if it is more specific than {@code Object}_<li>The actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType the return type of the method_@return the model name, never {@code null} nor empty;public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {_		ModelAttribute ann = returnType.getMethodAnnotation(ModelAttribute.class)__		if (ann != null && StringUtils.hasText(ann.value())) {_			return ann.value()__		}_		else {_			Method method = returnType.getMethod()__			Class<?> containingClass = returnType.getContainingClass()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, containingClass)__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,using,one,of,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,the,return,type,of,the,method,return,the,model,name,never,code,null,nor,empty;public,static,string,get,name,for,return,value,object,return,value,method,parameter,return,type,model,attribute,ann,return,type,get,method,annotation,model,attribute,class,if,ann,null,string,utils,has,text,ann,value,return,ann,value,else,method,method,return,type,get,method,class,containing,class,return,type,get,containing,class,class,resolved,type,generic,type,resolver,resolve,return,type,method,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(Object returnValue, MethodParameter returnType);1481579380;Derive the model attribute name for the given return value based on:_<ol>_<li>the method {@code ModelAttribute} annotation value_<li>the declared return type if it is more specific than {@code Object}_<li>the actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType a descriptor for the return type of the method_@return the derived name (never {@code null} or empty String);public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {_		ModelAttribute ann = returnType.getMethodAnnotation(ModelAttribute.class)__		if (ann != null && StringUtils.hasText(ann.value())) {_			return ann.value()__		}_		else {_			Method method = returnType.getMethod()__			Class<?> containingClass = returnType.getContainingClass()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, containingClass)__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,based,on,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,a,descriptor,for,the,return,type,of,the,method,return,the,derived,name,never,code,null,or,empty,string;public,static,string,get,name,for,return,value,object,return,value,method,parameter,return,type,model,attribute,ann,return,type,get,method,annotation,model,attribute,class,if,ann,null,string,utils,has,text,ann,value,return,ann,value,else,method,method,return,type,get,method,class,containing,class,return,type,get,containing,class,class,resolved,type,generic,type,resolver,resolve,return,type,method,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod) 			throws Exception;1328020251;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes -- i.e. attributes listed via_{@link SessionAttributes @SessionAttributes} and previously stored in_the in the model at least once_<li>Invoke {@link ModelAttribute @ModelAttribute} methods_<li>Find method arguments eligible as session attributes and retrieve_them if they're not	already	present in the model_</ol>_@param request the current request_@param mavContainer contains the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod)_			throws Exception {__		Map<String, ?> attributesInSession = this.sessionAttributesHandler.retrieveAttributes(request)__		mavContainer.mergeAttributes(attributesInSession)___		invokeModelAttributeMethods(request, mavContainer)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!mavContainer.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'")__				}_				mavContainer.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,i,e,attributes,listed,via,link,session,attributes,session,attributes,and,previously,stored,in,the,in,the,model,at,least,once,li,invoke,link,model,attribute,model,attribute,methods,li,find,method,arguments,eligible,as,session,attributes,and,retrieve,them,if,they,re,not,already,present,in,the,model,ol,param,request,the,current,request,param,mav,container,contains,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,mav,container,handler,method,handler,method,throws,exception,map,string,attributes,in,session,this,session,attributes,handler,retrieve,attributes,request,mav,container,merge,attributes,attributes,in,session,invoke,model,attribute,methods,request,mav,container,for,string,name,find,session,attribute,arguments,handler,method,if,mav,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,mav,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod) 			throws Exception;1356735495;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes -- i.e. attributes listed via_{@link SessionAttributes @SessionAttributes} and previously stored in_the in the model at least once_<li>Invoke {@link ModelAttribute @ModelAttribute} methods_<li>Find method arguments eligible as session attributes and retrieve_them if they're not	already	present in the model_</ol>_@param request the current request_@param mavContainer contains the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod)_			throws Exception {__		Map<String, ?> attributesInSession = this.sessionAttributesHandler.retrieveAttributes(request)__		mavContainer.mergeAttributes(attributesInSession)___		invokeModelAttributeMethods(request, mavContainer)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!mavContainer.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'")__				}_				mavContainer.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,i,e,attributes,listed,via,link,session,attributes,session,attributes,and,previously,stored,in,the,in,the,model,at,least,once,li,invoke,link,model,attribute,model,attribute,methods,li,find,method,arguments,eligible,as,session,attributes,and,retrieve,them,if,they,re,not,already,present,in,the,model,ol,param,request,the,current,request,param,mav,container,contains,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,mav,container,handler,method,handler,method,throws,exception,map,string,attributes,in,session,this,session,attributes,handler,retrieve,attributes,request,mav,container,merge,attributes,attributes,in,session,invoke,model,attribute,methods,request,mav,container,for,string,name,find,session,attribute,arguments,handler,method,if,mav,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,mav,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod) 			throws Exception;1362408075;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes -- i.e. attributes listed via_{@link SessionAttributes @SessionAttributes} and previously stored in_the in the model at least once_<li>Invoke {@link ModelAttribute @ModelAttribute} methods_<li>Find method arguments eligible as session attributes and retrieve_them if they're not	already	present in the model_</ol>_@param request the current request_@param mavContainer contains the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod)_			throws Exception {__		Map<String, ?> attributesInSession = this.sessionAttributesHandler.retrieveAttributes(request)__		mavContainer.mergeAttributes(attributesInSession)___		invokeModelAttributeMethods(request, mavContainer)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!mavContainer.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'")__				}_				mavContainer.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,i,e,attributes,listed,via,link,session,attributes,session,attributes,and,previously,stored,in,the,in,the,model,at,least,once,li,invoke,link,model,attribute,model,attribute,methods,li,find,method,arguments,eligible,as,session,attributes,and,retrieve,them,if,they,re,not,already,present,in,the,model,ol,param,request,the,current,request,param,mav,container,contains,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,mav,container,handler,method,handler,method,throws,exception,map,string,attributes,in,session,this,session,attributes,handler,retrieve,attributes,request,mav,container,merge,attributes,attributes,in,session,invoke,model,attribute,methods,request,mav,container,for,string,name,find,session,attribute,arguments,handler,method,if,mav,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,mav,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod) 			throws Exception;1381788683;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes -- i.e. attributes listed via_{@link SessionAttributes @SessionAttributes} and previously stored in_the in the model at least once_<li>Invoke {@link ModelAttribute @ModelAttribute} methods_<li>Find method arguments eligible as session attributes and retrieve_them if they're not	already	present in the model_</ol>_@param request the current request_@param mavContainer contains the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod)_			throws Exception {__		Map<String, ?> attributesInSession = this.sessionAttributesHandler.retrieveAttributes(request)__		mavContainer.mergeAttributes(attributesInSession)___		invokeModelAttributeMethods(request, mavContainer)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!mavContainer.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'")__				}_				mavContainer.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,i,e,attributes,listed,via,link,session,attributes,session,attributes,and,previously,stored,in,the,in,the,model,at,least,once,li,invoke,link,model,attribute,model,attribute,methods,li,find,method,arguments,eligible,as,session,attributes,and,retrieve,them,if,they,re,not,already,present,in,the,model,ol,param,request,the,current,request,param,mav,container,contains,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,mav,container,handler,method,handler,method,throws,exception,map,string,attributes,in,session,this,session,attributes,handler,retrieve,attributes,request,mav,container,merge,attributes,attributes,in,session,invoke,model,attribute,methods,request,mav,container,for,string,name,find,session,attribute,arguments,handler,method,if,mav,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,mav,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod) 			throws Exception;1402172495;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param mavContainer a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod)_			throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		mavContainer.mergeAttributes(sessionAttributes)___		invokeModelAttributeMethods(request, mavContainer)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!mavContainer.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'")__				}_				mavContainer.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,mav,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,mav,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,mav,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,mav,container,for,string,name,find,session,attribute,arguments,handler,method,if,mav,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,mav,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod) 			throws Exception;1402172496;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param mavContainer a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod)_			throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		mavContainer.mergeAttributes(sessionAttributes)___		invokeModelAttributeMethods(request, mavContainer)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!mavContainer.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'")__				}_				mavContainer.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,mav,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,mav,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,mav,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,mav,container,for,string,name,find,session,attribute,arguments,handler,method,if,mav,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,mav,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod) 			throws Exception;1413848647;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param mavContainer a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod)_			throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		mavContainer.mergeAttributes(sessionAttributes)___		invokeModelAttributeMethods(request, mavContainer)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!mavContainer.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'")__				}_				mavContainer.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,mav,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,mav,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,mav,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,mav,container,for,string,name,find,session,attribute,arguments,handler,method,if,mav,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,mav,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod) 			throws Exception;1419362684;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param mavContainer a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer mavContainer, HandlerMethod handlerMethod)_			throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		mavContainer.mergeAttributes(sessionAttributes)___		invokeModelAttributeMethods(request, mavContainer)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!mavContainer.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'")__				}_				mavContainer.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,mav,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,mav,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,mav,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,mav,container,for,string,name,find,session,attribute,arguments,handler,method,if,mav,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,mav,container,add,attribute,name,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, 			ModelAndViewContainer container) throws Exception;1453868458;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request,_			ModelAndViewContainer container) throws Exception {__		while (!this.modelMethods.isEmpty()) {_			InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod()__			ModelAttribute annot = modelMethod.getMethodAnnotation(ModelAttribute.class)__			String modelName = annot.value()__			if (container.containsAttribute(modelName)) {_				continue__			}__			Object returnValue = modelMethod.invokeForRequest(request, container)___			if (!modelMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType())__				if (!container.containsAttribute(returnValueName)) {_					container.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,container,throws,exception,while,this,model,methods,is,empty,invocable,handler,method,model,method,get,next,model,method,container,get,handler,method,model,attribute,annot,model,method,get,method,annotation,model,attribute,class,string,model,name,annot,value,if,container,contains,attribute,model,name,continue,object,return,value,model,method,invoke,for,request,request,container,if,model,method,is,void,string,return,value,name,get,name,for,return,value,return,value,model,method,get,return,type,if,container,contains,attribute,return,value,name,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, 			ModelAndViewContainer container) throws Exception;1453870278;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request,_			ModelAndViewContainer container) throws Exception {__		while (!this.modelMethods.isEmpty()) {_			InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod()__			ModelAttribute annotation = modelMethod.getMethodAnnotation(ModelAttribute.class)__			if (container.containsAttribute(annotation.name())) {_				if (!annotation.binding()) {_					container.setBindingDisabled(annotation.name())__				}_				continue__			}__			Object returnValue = modelMethod.invokeForRequest(request, container)___			if (!modelMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType())__				if (!annotation.binding()) {_					container.setBindingDisabled(returnValueName)__				}_				if (!container.containsAttribute(returnValueName)) {_					container.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,container,throws,exception,while,this,model,methods,is,empty,invocable,handler,method,model,method,get,next,model,method,container,get,handler,method,model,attribute,annotation,model,method,get,method,annotation,model,attribute,class,if,container,contains,attribute,annotation,name,if,annotation,binding,container,set,binding,disabled,annotation,name,continue,object,return,value,model,method,invoke,for,request,request,container,if,model,method,is,void,string,return,value,name,get,name,for,return,value,return,value,model,method,get,return,type,if,annotation,binding,container,set,binding,disabled,return,value,name,if,container,contains,attribute,return,value,name,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, 			ModelAndViewContainer container) throws Exception;1458754769;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request,_			ModelAndViewContainer container) throws Exception {__		while (!this.modelMethods.isEmpty()) {_			InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod()__			ModelAttribute ann = modelMethod.getMethodAnnotation(ModelAttribute.class)__			if (container.containsAttribute(ann.name())) {_				if (!ann.binding()) {_					container.setBindingDisabled(ann.name())__				}_				continue__			}__			Object returnValue = modelMethod.invokeForRequest(request, container)___			if (!modelMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType())__				if (!ann.binding()) {_					container.setBindingDisabled(returnValueName)__				}_				if (!container.containsAttribute(returnValueName)) {_					container.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,container,throws,exception,while,this,model,methods,is,empty,invocable,handler,method,model,method,get,next,model,method,container,get,handler,method,model,attribute,ann,model,method,get,method,annotation,model,attribute,class,if,container,contains,attribute,ann,name,if,ann,binding,container,set,binding,disabled,ann,name,continue,object,return,value,model,method,invoke,for,request,request,container,if,model,method,is,void,string,return,value,name,get,name,for,return,value,return,value,model,method,get,return,type,if,ann,binding,container,set,binding,disabled,return,value,name,if,container,contains,attribute,return,value,name,container,add,attribute,return,value,name,return,value
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1328020251;Return all {@code @ModelAttribute} arguments declared as session_attributes via {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<String>()__		for (MethodParameter param : handlerMethod.getMethodParameters()) {_			if (param.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(param)__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, param.getParameterType())) {_					result.add(name)__				}_			}_		}_		return result__	};return,all,code,model,attribute,arguments,declared,as,session,attributes,via,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,string,for,method,parameter,param,handler,method,get,method,parameters,if,param,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,param,if,this,session,attributes,handler,is,handler,session,attribute,name,param,get,parameter,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1356735495;Return all {@code @ModelAttribute} arguments declared as session_attributes via {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<String>()__		for (MethodParameter param : handlerMethod.getMethodParameters()) {_			if (param.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(param)__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, param.getParameterType())) {_					result.add(name)__				}_			}_		}_		return result__	};return,all,code,model,attribute,arguments,declared,as,session,attributes,via,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,string,for,method,parameter,param,handler,method,get,method,parameters,if,param,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,param,if,this,session,attributes,handler,is,handler,session,attribute,name,param,get,parameter,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1362408075;Return all {@code @ModelAttribute} arguments declared as session_attributes via {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<String>()__		for (MethodParameter param : handlerMethod.getMethodParameters()) {_			if (param.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(param)__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, param.getParameterType())) {_					result.add(name)__				}_			}_		}_		return result__	};return,all,code,model,attribute,arguments,declared,as,session,attributes,via,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,string,for,method,parameter,param,handler,method,get,method,parameters,if,param,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,param,if,this,session,attributes,handler,is,handler,session,attribute,name,param,get,parameter,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1381788683;Return all {@code @ModelAttribute} arguments declared as session_attributes via {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<String>()__		for (MethodParameter param : handlerMethod.getMethodParameters()) {_			if (param.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(param)__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, param.getParameterType())) {_					result.add(name)__				}_			}_		}_		return result__	};return,all,code,model,attribute,arguments,declared,as,session,attributes,via,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,string,for,method,parameter,param,handler,method,get,method,parameters,if,param,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,param,if,this,session,attributes,handler,is,handler,session,attribute,name,param,get,parameter,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1402172495;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<String>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, parameter.getParameterType())) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,string,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,if,this,session,attributes,handler,is,handler,session,attribute,name,parameter,get,parameter,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1402172496;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<String>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, parameter.getParameterType())) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,string,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,if,this,session,attributes,handler,is,handler,session,attribute,name,parameter,get,parameter,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1413848647;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<String>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, parameter.getParameterType())) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,string,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,if,this,session,attributes,handler,is,handler,session,attribute,name,parameter,get,parameter,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1419362684;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<String>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, parameter.getParameterType())) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,string,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,if,this,session,attributes,handler,is,handler,session,attribute,name,parameter,get,parameter,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1453868458;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<String>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,string,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,this,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1453870278;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<String>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,string,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,this,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1458754769;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<String>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,string,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,this,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1458843770;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<String>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,string,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,this,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1461704770;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<String>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,string,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,this,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1467730834;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,this,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1481579380;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,this,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1496837955;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,this,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1500495740;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,this,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1504993259;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,this,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1519772955;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,this,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1529721864;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,this,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelFactory -> private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod);1530174524;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {_		List<String> result = new ArrayList<>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,session,attribute,arguments,handler,method,handler,method,list,string,result,new,array,list,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,this,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelFactory -> public ModelFactory(List<InvocableHandlerMethod> invocableMethods, WebDataBinderFactory dataBinderFactory, 			SessionAttributesHandler sessionAttributesHandler);1402172496;Create a new instance with the given {@code @ModelAttribute} methods._@param invocableMethods the {@code @ModelAttribute} methods to invoke_@param dataBinderFactory for preparation of {@link BindingResult} attributes_@param sessionAttributesHandler for access to session attributes;public ModelFactory(List<InvocableHandlerMethod> invocableMethods, WebDataBinderFactory dataBinderFactory,_			SessionAttributesHandler sessionAttributesHandler) {__		if (invocableMethods != null) {_			for (InvocableHandlerMethod method : invocableMethods) {_				this.modelMethods.add(new ModelMethod(method))__			}_		}_		this.dataBinderFactory = dataBinderFactory__		this.sessionAttributesHandler = sessionAttributesHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,invocable,methods,the,code,model,attribute,methods,to,invoke,param,data,binder,factory,for,preparation,of,link,binding,result,attributes,param,session,attributes,handler,for,access,to,session,attributes;public,model,factory,list,invocable,handler,method,invocable,methods,web,data,binder,factory,data,binder,factory,session,attributes,handler,session,attributes,handler,if,invocable,methods,null,for,invocable,handler,method,method,invocable,methods,this,model,methods,add,new,model,method,method,this,data,binder,factory,data,binder,factory,this,session,attributes,handler,session,attributes,handler
ModelFactory -> public ModelFactory(List<InvocableHandlerMethod> invocableMethods, WebDataBinderFactory dataBinderFactory, 			SessionAttributesHandler sessionAttributesHandler);1413848647;Create a new instance with the given {@code @ModelAttribute} methods._@param invocableMethods the {@code @ModelAttribute} methods to invoke_@param dataBinderFactory for preparation of {@link BindingResult} attributes_@param sessionAttributesHandler for access to session attributes;public ModelFactory(List<InvocableHandlerMethod> invocableMethods, WebDataBinderFactory dataBinderFactory,_			SessionAttributesHandler sessionAttributesHandler) {__		if (invocableMethods != null) {_			for (InvocableHandlerMethod method : invocableMethods) {_				this.modelMethods.add(new ModelMethod(method))__			}_		}_		this.dataBinderFactory = dataBinderFactory__		this.sessionAttributesHandler = sessionAttributesHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,invocable,methods,the,code,model,attribute,methods,to,invoke,param,data,binder,factory,for,preparation,of,link,binding,result,attributes,param,session,attributes,handler,for,access,to,session,attributes;public,model,factory,list,invocable,handler,method,invocable,methods,web,data,binder,factory,data,binder,factory,session,attributes,handler,session,attributes,handler,if,invocable,methods,null,for,invocable,handler,method,method,invocable,methods,this,model,methods,add,new,model,method,method,this,data,binder,factory,data,binder,factory,this,session,attributes,handler,session,attributes,handler
ModelFactory -> public ModelFactory(List<InvocableHandlerMethod> invocableMethods, WebDataBinderFactory dataBinderFactory, 			SessionAttributesHandler sessionAttributesHandler);1419362684;Create a new instance with the given {@code @ModelAttribute} methods._@param invocableMethods the {@code @ModelAttribute} methods to invoke_@param dataBinderFactory for preparation of {@link BindingResult} attributes_@param sessionAttributesHandler for access to session attributes;public ModelFactory(List<InvocableHandlerMethod> invocableMethods, WebDataBinderFactory dataBinderFactory,_			SessionAttributesHandler sessionAttributesHandler) {__		if (invocableMethods != null) {_			for (InvocableHandlerMethod method : invocableMethods) {_				this.modelMethods.add(new ModelMethod(method))__			}_		}_		this.dataBinderFactory = dataBinderFactory__		this.sessionAttributesHandler = sessionAttributesHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,invocable,methods,the,code,model,attribute,methods,to,invoke,param,data,binder,factory,for,preparation,of,link,binding,result,attributes,param,session,attributes,handler,for,access,to,session,attributes;public,model,factory,list,invocable,handler,method,invocable,methods,web,data,binder,factory,data,binder,factory,session,attributes,handler,session,attributes,handler,if,invocable,methods,null,for,invocable,handler,method,method,invocable,methods,this,model,methods,add,new,model,method,method,this,data,binder,factory,data,binder,factory,this,session,attributes,handler,session,attributes,handler
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception;1453868458;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param container contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception {_		ModelMap defaultModel = container.getDefaultModel()__		if (container.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, defaultModel)__		}_		if (!container.isRequestHandled() && container.getModel() == defaultModel) {_			updateBindingResult(request, defaultModel)__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,container,throws,exception,model,map,default,model,container,get,default,model,if,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,default,model,if,container,is,request,handled,container,get,model,default,model,update,binding,result,request,default,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception;1453870278;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param container contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception {_		ModelMap defaultModel = container.getDefaultModel()__		if (container.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, defaultModel)__		}_		if (!container.isRequestHandled() && container.getModel() == defaultModel) {_			updateBindingResult(request, defaultModel)__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,container,throws,exception,model,map,default,model,container,get,default,model,if,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,default,model,if,container,is,request,handled,container,get,model,default,model,update,binding,result,request,default,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception;1458754769;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param container contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception {_		ModelMap defaultModel = container.getDefaultModel()__		if (container.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, defaultModel)__		}_		if (!container.isRequestHandled() && container.getModel() == defaultModel) {_			updateBindingResult(request, defaultModel)__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,container,throws,exception,model,map,default,model,container,get,default,model,if,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,default,model,if,container,is,request,handled,container,get,model,default,model,update,binding,result,request,default,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception;1458843770;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param container contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception {_		ModelMap defaultModel = container.getDefaultModel()__		if (container.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, defaultModel)__		}_		if (!container.isRequestHandled() && container.getModel() == defaultModel) {_			updateBindingResult(request, defaultModel)__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,container,throws,exception,model,map,default,model,container,get,default,model,if,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,default,model,if,container,is,request,handled,container,get,model,default,model,update,binding,result,request,default,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception;1461704770;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param container contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception {_		ModelMap defaultModel = container.getDefaultModel()__		if (container.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, defaultModel)__		}_		if (!container.isRequestHandled() && container.getModel() == defaultModel) {_			updateBindingResult(request, defaultModel)__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,container,throws,exception,model,map,default,model,container,get,default,model,if,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,default,model,if,container,is,request,handled,container,get,model,default,model,update,binding,result,request,default,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception;1467730834;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param container contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception {_		ModelMap defaultModel = container.getDefaultModel()__		if (container.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, defaultModel)__		}_		if (!container.isRequestHandled() && container.getModel() == defaultModel) {_			updateBindingResult(request, defaultModel)__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,container,throws,exception,model,map,default,model,container,get,default,model,if,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,default,model,if,container,is,request,handled,container,get,model,default,model,update,binding,result,request,default,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception;1481579380;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param container contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception {_		ModelMap defaultModel = container.getDefaultModel()__		if (container.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, defaultModel)__		}_		if (!container.isRequestHandled() && container.getModel() == defaultModel) {_			updateBindingResult(request, defaultModel)__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,container,throws,exception,model,map,default,model,container,get,default,model,if,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,default,model,if,container,is,request,handled,container,get,model,default,model,update,binding,result,request,default,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception;1496837955;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param container contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception {_		ModelMap defaultModel = container.getDefaultModel()__		if (container.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, defaultModel)__		}_		if (!container.isRequestHandled() && container.getModel() == defaultModel) {_			updateBindingResult(request, defaultModel)__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,container,throws,exception,model,map,default,model,container,get,default,model,if,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,default,model,if,container,is,request,handled,container,get,model,default,model,update,binding,result,request,default,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception;1500495740;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param container contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception {_		ModelMap defaultModel = container.getDefaultModel()__		if (container.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, defaultModel)__		}_		if (!container.isRequestHandled() && container.getModel() == defaultModel) {_			updateBindingResult(request, defaultModel)__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,container,throws,exception,model,map,default,model,container,get,default,model,if,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,default,model,if,container,is,request,handled,container,get,model,default,model,update,binding,result,request,default,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception;1504993259;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param container contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception {_		ModelMap defaultModel = container.getDefaultModel()__		if (container.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, defaultModel)__		}_		if (!container.isRequestHandled() && container.getModel() == defaultModel) {_			updateBindingResult(request, defaultModel)__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,container,throws,exception,model,map,default,model,container,get,default,model,if,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,default,model,if,container,is,request,handled,container,get,model,default,model,update,binding,result,request,default,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception;1519772955;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param container contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception {_		ModelMap defaultModel = container.getDefaultModel()__		if (container.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, defaultModel)__		}_		if (!container.isRequestHandled() && container.getModel() == defaultModel) {_			updateBindingResult(request, defaultModel)__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,container,throws,exception,model,map,default,model,container,get,default,model,if,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,default,model,if,container,is,request,handled,container,get,model,default,model,update,binding,result,request,default,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception;1529721864;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param container contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception {_		ModelMap defaultModel = container.getDefaultModel()__		if (container.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, defaultModel)__		}_		if (!container.isRequestHandled() && container.getModel() == defaultModel) {_			updateBindingResult(request, defaultModel)__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,container,throws,exception,model,map,default,model,container,get,default,model,if,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,default,model,if,container,is,request,handled,container,get,model,default,model,update,binding,result,request,default,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception;1530174524;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param container contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer container) throws Exception {_		ModelMap defaultModel = container.getDefaultModel()__		if (container.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, defaultModel)__		}_		if (!container.isRequestHandled() && container.getModel() == defaultModel) {_			updateBindingResult(request, defaultModel)__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,container,throws,exception,model,map,default,model,container,get,default,model,if,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,default,model,if,container,is,request,handled,container,get,model,default,model,update,binding,result,request,default,model
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1328020251;Derives the model attribute name for a method parameter based on:_<ol>_<li>The parameter {@code @ModelAttribute} annotation value_<li>The parameter type_</ol>_@return the derived name_ never {@code null} or an empty string;public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute annot = parameter.getParameterAnnotation(ModelAttribute.class)__		String attrName = (annot != null) ? annot.value() : null__		return StringUtils.hasText(attrName) ? attrName :  Conventions.getVariableNameForParameter(parameter)__	};derives,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,return,the,derived,name,never,code,null,or,an,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,annot,parameter,get,parameter,annotation,model,attribute,class,string,attr,name,annot,null,annot,value,null,return,string,utils,has,text,attr,name,attr,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1356735495;Derives the model attribute name for a method parameter based on:_<ol>_<li>The parameter {@code @ModelAttribute} annotation value_<li>The parameter type_</ol>_@return the derived name_ never {@code null} or an empty string;public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute annot = parameter.getParameterAnnotation(ModelAttribute.class)__		String attrName = (annot != null) ? annot.value() : null__		return StringUtils.hasText(attrName) ? attrName :  Conventions.getVariableNameForParameter(parameter)__	};derives,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,return,the,derived,name,never,code,null,or,an,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,annot,parameter,get,parameter,annotation,model,attribute,class,string,attr,name,annot,null,annot,value,null,return,string,utils,has,text,attr,name,attr,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1362408075;Derives the model attribute name for a method parameter based on:_<ol>_<li>The parameter {@code @ModelAttribute} annotation value_<li>The parameter type_</ol>_@return the derived name_ never {@code null} or an empty string;public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute annot = parameter.getParameterAnnotation(ModelAttribute.class)__		String attrName = (annot != null) ? annot.value() : null__		return StringUtils.hasText(attrName) ? attrName :  Conventions.getVariableNameForParameter(parameter)__	};derives,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,return,the,derived,name,never,code,null,or,an,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,annot,parameter,get,parameter,annotation,model,attribute,class,string,attr,name,annot,null,annot,value,null,return,string,utils,has,text,attr,name,attr,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1381788683;Derives the model attribute name for a method parameter based on:_<ol>_<li>The parameter {@code @ModelAttribute} annotation value_<li>The parameter type_</ol>_@return the derived name_ never {@code null} or an empty string;public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute annot = parameter.getParameterAnnotation(ModelAttribute.class)__		String attrName = (annot != null) ? annot.value() : null__		return StringUtils.hasText(attrName) ? attrName :  Conventions.getVariableNameForParameter(parameter)__	};derives,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,return,the,derived,name,never,code,null,or,an,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,annot,parameter,get,parameter,annotation,model,attribute,class,string,attr,name,annot,null,annot,value,null,return,string,utils,has,text,attr,name,attr,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1402172495;Derives the model attribute name for a method parameter based on:_<ol>_<li>The parameter {@code @ModelAttribute} annotation value_<li>The parameter type_</ol>_@return the derived name_ never {@code null} or an empty string;public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute annot = parameter.getParameterAnnotation(ModelAttribute.class)__		String attrName = (annot != null) ? annot.value() : null__		return StringUtils.hasText(attrName) ? attrName :  Conventions.getVariableNameForParameter(parameter)__	};derives,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,return,the,derived,name,never,code,null,or,an,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,annot,parameter,get,parameter,annotation,model,attribute,class,string,attr,name,annot,null,annot,value,null,return,string,utils,has,text,attr,name,attr,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1402172496;Derives the model attribute name for a method parameter based on:_<ol>_<li>The parameter {@code @ModelAttribute} annotation value_<li>The parameter type_</ol>_@return the derived name_ never {@code null} or an empty string;public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute annot = parameter.getParameterAnnotation(ModelAttribute.class)__		String attrName = (annot != null) ? annot.value() : null__		return StringUtils.hasText(attrName) ? attrName :  Conventions.getVariableNameForParameter(parameter)__	};derives,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,return,the,derived,name,never,code,null,or,an,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,annot,parameter,get,parameter,annotation,model,attribute,class,string,attr,name,annot,null,annot,value,null,return,string,utils,has,text,attr,name,attr,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1413848647;Derives the model attribute name for a method parameter based on:_<ol>_<li>The parameter {@code @ModelAttribute} annotation value_<li>The parameter type_</ol>_@return the derived name_ never {@code null} or an empty string;public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute annot = parameter.getParameterAnnotation(ModelAttribute.class)__		String attrName = (annot != null) ? annot.value() : null__		return StringUtils.hasText(attrName) ? attrName :  Conventions.getVariableNameForParameter(parameter)__	};derives,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,return,the,derived,name,never,code,null,or,an,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,annot,parameter,get,parameter,annotation,model,attribute,class,string,attr,name,annot,null,annot,value,null,return,string,utils,has,text,attr,name,attr,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1419362684;Derives the model attribute name for a method parameter based on:_<ol>_<li>The parameter {@code @ModelAttribute} annotation value_<li>The parameter type_</ol>_@return the derived name_ never {@code null} or an empty string;public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute annot = parameter.getParameterAnnotation(ModelAttribute.class)__		String attrName = (annot != null) ? annot.value() : null__		return StringUtils.hasText(attrName) ? attrName :  Conventions.getVariableNameForParameter(parameter)__	};derives,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,return,the,derived,name,never,code,null,or,an,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,annot,parameter,get,parameter,annotation,model,attribute,class,string,attr,name,annot,null,annot,value,null,return,string,utils,has,text,attr,name,attr,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1453868458;Derives the model attribute name for a method parameter based on:_<ol>_<li>The parameter {@code @ModelAttribute} annotation value_<li>The parameter type_</ol>_@return the derived name_ never {@code null} or an empty string;public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute annot = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (annot != null) ? annot.value() : null__		return StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter)__	};derives,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,return,the,derived,name,never,code,null,or,an,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,annot,parameter,get,parameter,annotation,model,attribute,class,string,name,annot,null,annot,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1453870278;Derives the model attribute name for a method parameter based on:_<ol>_<li>The parameter {@code @ModelAttribute} annotation value_<li>The parameter type_</ol>_@return the derived name_ never {@code null} or an empty string;public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute annot = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (annot != null) ? annot.value() : null__		return StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter)__	};derives,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,return,the,derived,name,never,code,null,or,an,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,annot,parameter,get,parameter,annotation,model,attribute,class,string,name,annot,null,annot,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1458754769;Derives the model attribute name for a method parameter based on:_<ol>_<li>The parameter {@code @ModelAttribute} annotation value_<li>The parameter type_</ol>_@return the derived name_ never {@code null} or an empty string;public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (ann != null ? ann.value() : null)__		return StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter)__	};derives,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,return,the,derived,name,never,code,null,or,an,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,string,name,ann,null,ann,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1458843770;Derives the model attribute name for a method parameter based on:_<ol>_<li>The parameter {@code @ModelAttribute} annotation value_<li>The parameter type_</ol>_@return the derived name_ never {@code null} or an empty string;public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (ann != null ? ann.value() : null)__		return StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter)__	};derives,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,return,the,derived,name,never,code,null,or,an,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,string,name,ann,null,ann,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1461704770;Derives the model attribute name for a method parameter based on:_<ol>_<li>The parameter {@code @ModelAttribute} annotation value_<li>The parameter type_</ol>_@return the derived name_ never {@code null} or an empty string;public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (ann != null ? ann.value() : null)__		return StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter)__	};derives,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,return,the,derived,name,never,code,null,or,an,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,string,name,ann,null,ann,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1467730834;Derives the model attribute name for a method parameter based on:_<ol>_<li>The parameter {@code @ModelAttribute} annotation value_<li>The parameter type_</ol>_@return the derived name_ never {@code null} or an empty string;public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (ann != null ? ann.value() : null)__		return StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter)__	};derives,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,return,the,derived,name,never,code,null,or,an,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,string,name,ann,null,ann,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1481579380;Derive the model attribute name for a method parameter based on:_<ol>_<li>the parameter {@code @ModelAttribute} annotation value_<li>the parameter type_</ol>_@param parameter a descriptor for the method parameter_@return the derived name (never {@code null} or empty String);public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (ann != null ? ann.value() : null)__		return (StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter))__	};derive,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,param,parameter,a,descriptor,for,the,method,parameter,return,the,derived,name,never,code,null,or,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,string,name,ann,null,ann,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1496837955;Derive the model attribute name for a method parameter based on:_<ol>_<li>the parameter {@code @ModelAttribute} annotation value_<li>the parameter type_</ol>_@param parameter a descriptor for the method parameter_@return the derived name (never {@code null} or empty String);public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (ann != null ? ann.value() : null)__		return (StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter))__	};derive,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,param,parameter,a,descriptor,for,the,method,parameter,return,the,derived,name,never,code,null,or,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,string,name,ann,null,ann,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1500495740;Derive the model attribute name for a method parameter based on:_<ol>_<li>the parameter {@code @ModelAttribute} annotation value_<li>the parameter type_</ol>_@param parameter a descriptor for the method parameter_@return the derived name (never {@code null} or empty String);public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (ann != null ? ann.value() : null)__		return (StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter))__	};derive,the,model,attribute,name,for,a,method,parameter,based,on,ol,li,the,parameter,code,model,attribute,annotation,value,li,the,parameter,type,ol,param,parameter,a,descriptor,for,the,method,parameter,return,the,derived,name,never,code,null,or,empty,string;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,string,name,ann,null,ann,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1504993259;Derive the model attribute name for the given method parameter based on_a {@code @ModelAttribute} parameter annotation (if present) or falling_back on parameter type based conventions._@param parameter a descriptor for the method parameter_@return the derived name_@see Conventions#getVariableNameForParameter(MethodParameter);public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (ann != null ? ann.value() : null)__		return (StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter))__	};derive,the,model,attribute,name,for,the,given,method,parameter,based,on,a,code,model,attribute,parameter,annotation,if,present,or,falling,back,on,parameter,type,based,conventions,param,parameter,a,descriptor,for,the,method,parameter,return,the,derived,name,see,conventions,get,variable,name,for,parameter,method,parameter;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,string,name,ann,null,ann,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1519772955;Derive the model attribute name for the given method parameter based on_a {@code @ModelAttribute} parameter annotation (if present) or falling_back on parameter type based conventions._@param parameter a descriptor for the method parameter_@return the derived name_@see Conventions#getVariableNameForParameter(MethodParameter);public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (ann != null ? ann.value() : null)__		return (StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter))__	};derive,the,model,attribute,name,for,the,given,method,parameter,based,on,a,code,model,attribute,parameter,annotation,if,present,or,falling,back,on,parameter,type,based,conventions,param,parameter,a,descriptor,for,the,method,parameter,return,the,derived,name,see,conventions,get,variable,name,for,parameter,method,parameter;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,string,name,ann,null,ann,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1529721864;Derive the model attribute name for the given method parameter based on_a {@code @ModelAttribute} parameter annotation (if present) or falling_back on parameter type based conventions._@param parameter a descriptor for the method parameter_@return the derived name_@see Conventions#getVariableNameForParameter(MethodParameter);public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (ann != null ? ann.value() : null)__		return (StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter))__	};derive,the,model,attribute,name,for,the,given,method,parameter,based,on,a,code,model,attribute,parameter,annotation,if,present,or,falling,back,on,parameter,type,based,conventions,param,parameter,a,descriptor,for,the,method,parameter,return,the,derived,name,see,conventions,get,variable,name,for,parameter,method,parameter;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,string,name,ann,null,ann,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> public static String getNameForParameter(MethodParameter parameter);1530174524;Derive the model attribute name for the given method parameter based on_a {@code @ModelAttribute} parameter annotation (if present) or falling_back on parameter type based conventions._@param parameter a descriptor for the method parameter_@return the derived name_@see Conventions#getVariableNameForParameter(MethodParameter);public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (ann != null ? ann.value() : null)__		return (StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter))__	};derive,the,model,attribute,name,for,the,given,method,parameter,based,on,a,code,model,attribute,parameter,annotation,if,present,or,falling,back,on,parameter,type,based,conventions,param,parameter,a,descriptor,for,the,method,parameter,return,the,derived,name,see,conventions,get,variable,name,for,parameter,method,parameter;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,string,name,ann,null,ann,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1328020251;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}_		_		Class<?> attrType = (value != null) ? value.getClass() : null__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, attrType)) {_			return true__		}_		_		return (value != null && !value.getClass().isArray() && !(value instanceof Collection) && _				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,class,attr,type,value,null,value,get,class,null,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,attr,type,return,true,return,value,null,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1356735495;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		Class<?> attrType = (value != null) ? value.getClass() : null__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, attrType)) {_			return true__		}__		return (value != null && !value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,class,attr,type,value,null,value,get,class,null,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,attr,type,return,true,return,value,null,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1362408075;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		Class<?> attrType = (value != null) ? value.getClass() : null__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, attrType)) {_			return true__		}__		return (value != null && !value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,class,attr,type,value,null,value,get,class,null,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,attr,type,return,true,return,value,null,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1381788683;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		Class<?> attrType = (value != null) ? value.getClass() : null__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, attrType)) {_			return true__		}__		return (value != null && !value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,class,attr,type,value,null,value,get,class,null,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,attr,type,return,true,return,value,null,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1402172495;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		Class<?> attrType = (value != null) ? value.getClass() : null__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, attrType)) {_			return true__		}__		return (value != null && !value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,class,attr,type,value,null,value,get,class,null,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,attr,type,return,true,return,value,null,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1402172496;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		Class<?> attrType = (value != null) ? value.getClass() : null__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, attrType)) {_			return true__		}__		return (value != null && !value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,class,attr,type,value,null,value,get,class,null,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,attr,type,return,true,return,value,null,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1413848647;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		Class<?> attrType = (value != null) ? value.getClass() : null__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, attrType)) {_			return true__		}__		return (value != null && !value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,class,attr,type,value,null,value,get,class,null,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,attr,type,return,true,return,value,null,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1419362684;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		Class<?> attrType = (value != null) ? value.getClass() : null__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, attrType)) {_			return true__		}__		return (value != null && !value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,class,attr,type,value,null,value,get,class,null,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,attr,type,return,true,return,value,null,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1453868458;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		Class<?> attrType = (value != null) ? value.getClass() : null__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, attrType)) {_			return true__		}__		return (value != null && !value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,class,attr,type,value,null,value,get,class,null,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,attr,type,return,true,return,value,null,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1453870278;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		Class<?> attrType = (value != null) ? value.getClass() : null__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, attrType)) {_			return true__		}__		return (value != null && !value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,class,attr,type,value,null,value,get,class,null,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,attr,type,return,true,return,value,null,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1458754769;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		Class<?> attrType = (value != null) ? value.getClass() : null__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, attrType)) {_			return true__		}__		return (value != null && !value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,class,attr,type,value,null,value,get,class,null,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,attr,type,return,true,return,value,null,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1458843770;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		Class<?> attrType = (value != null) ? value.getClass() : null__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, attrType)) {_			return true__		}__		return (value != null && !value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,class,attr,type,value,null,value,get,class,null,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,attr,type,return,true,return,value,null,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1461704770;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		Class<?> attrType = (value != null) ? value.getClass() : null__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, attrType)) {_			return true__		}__		return (value != null && !value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,class,attr,type,value,null,value,get,class,null,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,attr,type,return,true,return,value,null,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1467730834;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		Class<?> attrType = (value != null) ? value.getClass() : null__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, attrType)) {_			return true__		}__		return (value != null && !value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,class,attr,type,value,null,value,get,class,null,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,attr,type,return,true,return,value,null,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1481579380;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		Class<?> attrType = (value != null ? value.getClass() : null)__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, attrType)) {_			return true__		}__		return (value != null && !value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,class,attr,type,value,null,value,get,class,null,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,attr,type,return,true,return,value,null,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1500495740;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, value.getClass())) {_			return true__		}__		return (!value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,value,get,class,return,true,return,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1504993259;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, value.getClass())) {_			return true__		}__		return (!value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,value,get,class,return,true,return,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1519772955;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, value.getClass())) {_			return true__		}__		return (!value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,value,get,class,return,true,return,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1529721864;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, value.getClass())) {_			return true__		}__		return (!value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,value,get,class,return,true,return,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> private boolean isBindingCandidate(String attributeName, Object value);1530174524;Whether the given attribute requires a {@link BindingResult} in the model.;private boolean isBindingCandidate(String attributeName, Object value) {_		if (attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) {_			return false__		}__		if (this.sessionAttributesHandler.isHandlerSessionAttribute(attributeName, value.getClass())) {_			return true__		}__		return (!value.getClass().isArray() && !(value instanceof Collection) &&_				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass()))__	};whether,the,given,attribute,requires,a,link,binding,result,in,the,model;private,boolean,is,binding,candidate,string,attribute,name,object,value,if,attribute,name,starts,with,binding,result,return,false,if,this,session,attributes,handler,is,handler,session,attribute,attribute,name,value,get,class,return,true,return,value,get,class,is,array,value,instanceof,collection,value,instanceof,map,bean,utils,is,simple,value,type,value,get,class
ModelFactory -> public static String getNameForReturnValue(@Nullable Object returnValue, MethodParameter returnType);1496837955;Derive the model attribute name for the given return value based on:_<ol>_<li>the method {@code ModelAttribute} annotation value_<li>the declared return type if it is more specific than {@code Object}_<li>the actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType a descriptor for the return type of the method_@return the derived name (never {@code null} or empty String);public static String getNameForReturnValue(@Nullable Object returnValue, MethodParameter returnType) {_		ModelAttribute ann = returnType.getMethodAnnotation(ModelAttribute.class)__		if (ann != null && StringUtils.hasText(ann.value())) {_			return ann.value()__		}_		else {_			Method method = returnType.getMethod()__			Assert.state(method != null, "No handler method")__			Class<?> containingClass = returnType.getContainingClass()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, containingClass)__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,based,on,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,a,descriptor,for,the,return,type,of,the,method,return,the,derived,name,never,code,null,or,empty,string;public,static,string,get,name,for,return,value,nullable,object,return,value,method,parameter,return,type,model,attribute,ann,return,type,get,method,annotation,model,attribute,class,if,ann,null,string,utils,has,text,ann,value,return,ann,value,else,method,method,return,type,get,method,assert,state,method,null,no,handler,method,class,containing,class,return,type,get,containing,class,class,resolved,type,generic,type,resolver,resolve,return,type,method,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(@Nullable Object returnValue, MethodParameter returnType);1500495740;Derive the model attribute name for the given return value based on:_<ol>_<li>the method {@code ModelAttribute} annotation value_<li>the declared return type if it is more specific than {@code Object}_<li>the actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType a descriptor for the return type of the method_@return the derived name (never {@code null} or empty String);public static String getNameForReturnValue(@Nullable Object returnValue, MethodParameter returnType) {_		ModelAttribute ann = returnType.getMethodAnnotation(ModelAttribute.class)__		if (ann != null && StringUtils.hasText(ann.value())) {_			return ann.value()__		}_		else {_			Method method = returnType.getMethod()__			Assert.state(method != null, "No handler method")__			Class<?> containingClass = returnType.getContainingClass()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, containingClass)__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,based,on,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,a,descriptor,for,the,return,type,of,the,method,return,the,derived,name,never,code,null,or,empty,string;public,static,string,get,name,for,return,value,nullable,object,return,value,method,parameter,return,type,model,attribute,ann,return,type,get,method,annotation,model,attribute,class,if,ann,null,string,utils,has,text,ann,value,return,ann,value,else,method,method,return,type,get,method,assert,state,method,null,no,handler,method,class,containing,class,return,type,get,containing,class,class,resolved,type,generic,type,resolver,resolve,return,type,method,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(@Nullable Object returnValue, MethodParameter returnType);1504993259;Derive the model attribute name for the given return value based on:_<ol>_<li>the method {@code ModelAttribute} annotation value_<li>the declared return type if it is more specific than {@code Object}_<li>the actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType a descriptor for the return type of the method_@return the derived name (never {@code null} or empty String);public static String getNameForReturnValue(@Nullable Object returnValue, MethodParameter returnType) {_		ModelAttribute ann = returnType.getMethodAnnotation(ModelAttribute.class)__		if (ann != null && StringUtils.hasText(ann.value())) {_			return ann.value()__		}_		else {_			Method method = returnType.getMethod()__			Assert.state(method != null, "No handler method")__			Class<?> containingClass = returnType.getContainingClass()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, containingClass)__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,based,on,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,a,descriptor,for,the,return,type,of,the,method,return,the,derived,name,never,code,null,or,empty,string;public,static,string,get,name,for,return,value,nullable,object,return,value,method,parameter,return,type,model,attribute,ann,return,type,get,method,annotation,model,attribute,class,if,ann,null,string,utils,has,text,ann,value,return,ann,value,else,method,method,return,type,get,method,assert,state,method,null,no,handler,method,class,containing,class,return,type,get,containing,class,class,resolved,type,generic,type,resolver,resolve,return,type,method,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(@Nullable Object returnValue, MethodParameter returnType);1519772955;Derive the model attribute name for the given return value based on:_<ol>_<li>the method {@code ModelAttribute} annotation value_<li>the declared return type if it is more specific than {@code Object}_<li>the actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType a descriptor for the return type of the method_@return the derived name (never {@code null} or empty String);public static String getNameForReturnValue(@Nullable Object returnValue, MethodParameter returnType) {_		ModelAttribute ann = returnType.getMethodAnnotation(ModelAttribute.class)__		if (ann != null && StringUtils.hasText(ann.value())) {_			return ann.value()__		}_		else {_			Method method = returnType.getMethod()__			Assert.state(method != null, "No handler method")__			Class<?> containingClass = returnType.getContainingClass()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, containingClass)__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,based,on,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,a,descriptor,for,the,return,type,of,the,method,return,the,derived,name,never,code,null,or,empty,string;public,static,string,get,name,for,return,value,nullable,object,return,value,method,parameter,return,type,model,attribute,ann,return,type,get,method,annotation,model,attribute,class,if,ann,null,string,utils,has,text,ann,value,return,ann,value,else,method,method,return,type,get,method,assert,state,method,null,no,handler,method,class,containing,class,return,type,get,containing,class,class,resolved,type,generic,type,resolver,resolve,return,type,method,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(@Nullable Object returnValue, MethodParameter returnType);1529721864;Derive the model attribute name for the given return value based on:_<ol>_<li>the method {@code ModelAttribute} annotation value_<li>the declared return type if it is more specific than {@code Object}_<li>the actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType a descriptor for the return type of the method_@return the derived name (never {@code null} or empty String);public static String getNameForReturnValue(@Nullable Object returnValue, MethodParameter returnType) {_		ModelAttribute ann = returnType.getMethodAnnotation(ModelAttribute.class)__		if (ann != null && StringUtils.hasText(ann.value())) {_			return ann.value()__		}_		else {_			Method method = returnType.getMethod()__			Assert.state(method != null, "No handler method")__			Class<?> containingClass = returnType.getContainingClass()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, containingClass)__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,based,on,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,a,descriptor,for,the,return,type,of,the,method,return,the,derived,name,never,code,null,or,empty,string;public,static,string,get,name,for,return,value,nullable,object,return,value,method,parameter,return,type,model,attribute,ann,return,type,get,method,annotation,model,attribute,class,if,ann,null,string,utils,has,text,ann,value,return,ann,value,else,method,method,return,type,get,method,assert,state,method,null,no,handler,method,class,containing,class,return,type,get,containing,class,class,resolved,type,generic,type,resolver,resolve,return,type,method,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public static String getNameForReturnValue(@Nullable Object returnValue, MethodParameter returnType);1530174524;Derive the model attribute name for the given return value. Results will be_based on:_<ol>_<li>the method {@code ModelAttribute} annotation value_<li>the declared return type if it is more specific than {@code Object}_<li>the actual return value type_</ol>_@param returnValue the value returned from a method invocation_@param returnType a descriptor for the return type of the method_@return the derived name (never {@code null} or empty String);public static String getNameForReturnValue(@Nullable Object returnValue, MethodParameter returnType) {_		ModelAttribute ann = returnType.getMethodAnnotation(ModelAttribute.class)__		if (ann != null && StringUtils.hasText(ann.value())) {_			return ann.value()__		}_		else {_			Method method = returnType.getMethod()__			Assert.state(method != null, "No handler method")__			Class<?> containingClass = returnType.getContainingClass()__			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, containingClass)__			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue)__		}_	};derive,the,model,attribute,name,for,the,given,return,value,results,will,be,based,on,ol,li,the,method,code,model,attribute,annotation,value,li,the,declared,return,type,if,it,is,more,specific,than,code,object,li,the,actual,return,value,type,ol,param,return,value,the,value,returned,from,a,method,invocation,param,return,type,a,descriptor,for,the,return,type,of,the,method,return,the,derived,name,never,code,null,or,empty,string;public,static,string,get,name,for,return,value,nullable,object,return,value,method,parameter,return,type,model,attribute,ann,return,type,get,method,annotation,model,attribute,class,if,ann,null,string,utils,has,text,ann,value,return,ann,value,else,method,method,return,type,get,method,assert,state,method,null,no,handler,method,class,containing,class,return,type,get,containing,class,class,resolved,type,generic,type,resolver,resolve,return,type,method,containing,class,return,conventions,get,variable,name,for,return,type,method,resolved,type,return,value
ModelFactory -> public ModelFactory(List<InvocableHandlerMethod> handlerMethods, 			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler);1453868458;Create a new instance with the given {@code @ModelAttribute} methods._@param handlerMethods the {@code @ModelAttribute} methods to invoke_@param binderFactory for preparation of {@link BindingResult} attributes_@param attributeHandler for access to session attributes;public ModelFactory(List<InvocableHandlerMethod> handlerMethods,_			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler) {__		if (handlerMethods != null) {_			for (InvocableHandlerMethod handlerMethod : handlerMethods) {_				this.modelMethods.add(new ModelMethod(handlerMethod))__			}_		}_		this.dataBinderFactory = binderFactory__		this.sessionAttributesHandler = attributeHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,handler,methods,the,code,model,attribute,methods,to,invoke,param,binder,factory,for,preparation,of,link,binding,result,attributes,param,attribute,handler,for,access,to,session,attributes;public,model,factory,list,invocable,handler,method,handler,methods,web,data,binder,factory,binder,factory,session,attributes,handler,attribute,handler,if,handler,methods,null,for,invocable,handler,method,handler,method,handler,methods,this,model,methods,add,new,model,method,handler,method,this,data,binder,factory,binder,factory,this,session,attributes,handler,attribute,handler
ModelFactory -> public ModelFactory(List<InvocableHandlerMethod> handlerMethods, 			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler);1453870278;Create a new instance with the given {@code @ModelAttribute} methods._@param handlerMethods the {@code @ModelAttribute} methods to invoke_@param binderFactory for preparation of {@link BindingResult} attributes_@param attributeHandler for access to session attributes;public ModelFactory(List<InvocableHandlerMethod> handlerMethods,_			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler) {__		if (handlerMethods != null) {_			for (InvocableHandlerMethod handlerMethod : handlerMethods) {_				this.modelMethods.add(new ModelMethod(handlerMethod))__			}_		}_		this.dataBinderFactory = binderFactory__		this.sessionAttributesHandler = attributeHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,handler,methods,the,code,model,attribute,methods,to,invoke,param,binder,factory,for,preparation,of,link,binding,result,attributes,param,attribute,handler,for,access,to,session,attributes;public,model,factory,list,invocable,handler,method,handler,methods,web,data,binder,factory,binder,factory,session,attributes,handler,attribute,handler,if,handler,methods,null,for,invocable,handler,method,handler,method,handler,methods,this,model,methods,add,new,model,method,handler,method,this,data,binder,factory,binder,factory,this,session,attributes,handler,attribute,handler
ModelFactory -> public ModelFactory(List<InvocableHandlerMethod> handlerMethods, 			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler);1458754769;Create a new instance with the given {@code @ModelAttribute} methods._@param handlerMethods the {@code @ModelAttribute} methods to invoke_@param binderFactory for preparation of {@link BindingResult} attributes_@param attributeHandler for access to session attributes;public ModelFactory(List<InvocableHandlerMethod> handlerMethods,_			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler) {__		if (handlerMethods != null) {_			for (InvocableHandlerMethod handlerMethod : handlerMethods) {_				this.modelMethods.add(new ModelMethod(handlerMethod))__			}_		}_		this.dataBinderFactory = binderFactory__		this.sessionAttributesHandler = attributeHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,handler,methods,the,code,model,attribute,methods,to,invoke,param,binder,factory,for,preparation,of,link,binding,result,attributes,param,attribute,handler,for,access,to,session,attributes;public,model,factory,list,invocable,handler,method,handler,methods,web,data,binder,factory,binder,factory,session,attributes,handler,attribute,handler,if,handler,methods,null,for,invocable,handler,method,handler,method,handler,methods,this,model,methods,add,new,model,method,handler,method,this,data,binder,factory,binder,factory,this,session,attributes,handler,attribute,handler
ModelFactory -> public ModelFactory(List<InvocableHandlerMethod> handlerMethods, 			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler);1458843770;Create a new instance with the given {@code @ModelAttribute} methods._@param handlerMethods the {@code @ModelAttribute} methods to invoke_@param binderFactory for preparation of {@link BindingResult} attributes_@param attributeHandler for access to session attributes;public ModelFactory(List<InvocableHandlerMethod> handlerMethods,_			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler) {__		if (handlerMethods != null) {_			for (InvocableHandlerMethod handlerMethod : handlerMethods) {_				this.modelMethods.add(new ModelMethod(handlerMethod))__			}_		}_		this.dataBinderFactory = binderFactory__		this.sessionAttributesHandler = attributeHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,handler,methods,the,code,model,attribute,methods,to,invoke,param,binder,factory,for,preparation,of,link,binding,result,attributes,param,attribute,handler,for,access,to,session,attributes;public,model,factory,list,invocable,handler,method,handler,methods,web,data,binder,factory,binder,factory,session,attributes,handler,attribute,handler,if,handler,methods,null,for,invocable,handler,method,handler,method,handler,methods,this,model,methods,add,new,model,method,handler,method,this,data,binder,factory,binder,factory,this,session,attributes,handler,attribute,handler
ModelFactory -> public ModelFactory(List<InvocableHandlerMethod> handlerMethods, 			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler);1461704770;Create a new instance with the given {@code @ModelAttribute} methods._@param handlerMethods the {@code @ModelAttribute} methods to invoke_@param binderFactory for preparation of {@link BindingResult} attributes_@param attributeHandler for access to session attributes;public ModelFactory(List<InvocableHandlerMethod> handlerMethods,_			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler) {__		if (handlerMethods != null) {_			for (InvocableHandlerMethod handlerMethod : handlerMethods) {_				this.modelMethods.add(new ModelMethod(handlerMethod))__			}_		}_		this.dataBinderFactory = binderFactory__		this.sessionAttributesHandler = attributeHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,handler,methods,the,code,model,attribute,methods,to,invoke,param,binder,factory,for,preparation,of,link,binding,result,attributes,param,attribute,handler,for,access,to,session,attributes;public,model,factory,list,invocable,handler,method,handler,methods,web,data,binder,factory,binder,factory,session,attributes,handler,attribute,handler,if,handler,methods,null,for,invocable,handler,method,handler,method,handler,methods,this,model,methods,add,new,model,method,handler,method,this,data,binder,factory,binder,factory,this,session,attributes,handler,attribute,handler
ModelFactory -> public ModelFactory(List<InvocableHandlerMethod> handlerMethods, 			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler);1467730834;Create a new instance with the given {@code @ModelAttribute} methods._@param handlerMethods the {@code @ModelAttribute} methods to invoke_@param binderFactory for preparation of {@link BindingResult} attributes_@param attributeHandler for access to session attributes;public ModelFactory(List<InvocableHandlerMethod> handlerMethods,_			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler) {__		if (handlerMethods != null) {_			for (InvocableHandlerMethod handlerMethod : handlerMethods) {_				this.modelMethods.add(new ModelMethod(handlerMethod))__			}_		}_		this.dataBinderFactory = binderFactory__		this.sessionAttributesHandler = attributeHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,handler,methods,the,code,model,attribute,methods,to,invoke,param,binder,factory,for,preparation,of,link,binding,result,attributes,param,attribute,handler,for,access,to,session,attributes;public,model,factory,list,invocable,handler,method,handler,methods,web,data,binder,factory,binder,factory,session,attributes,handler,attribute,handler,if,handler,methods,null,for,invocable,handler,method,handler,method,handler,methods,this,model,methods,add,new,model,method,handler,method,this,data,binder,factory,binder,factory,this,session,attributes,handler,attribute,handler
ModelFactory -> public ModelFactory(List<InvocableHandlerMethod> handlerMethods, 			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler);1481579380;Create a new instance with the given {@code @ModelAttribute} methods._@param handlerMethods the {@code @ModelAttribute} methods to invoke_@param binderFactory for preparation of {@link BindingResult} attributes_@param attributeHandler for access to session attributes;public ModelFactory(List<InvocableHandlerMethod> handlerMethods,_			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler) {__		if (handlerMethods != null) {_			for (InvocableHandlerMethod handlerMethod : handlerMethods) {_				this.modelMethods.add(new ModelMethod(handlerMethod))__			}_		}_		this.dataBinderFactory = binderFactory__		this.sessionAttributesHandler = attributeHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,handler,methods,the,code,model,attribute,methods,to,invoke,param,binder,factory,for,preparation,of,link,binding,result,attributes,param,attribute,handler,for,access,to,session,attributes;public,model,factory,list,invocable,handler,method,handler,methods,web,data,binder,factory,binder,factory,session,attributes,handler,attribute,handler,if,handler,methods,null,for,invocable,handler,method,handler,method,handler,methods,this,model,methods,add,new,model,method,handler,method,this,data,binder,factory,binder,factory,this,session,attributes,handler,attribute,handler
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer container, 			HandlerMethod handlerMethod) throws Exception;1453868458;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param container a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer container,_			HandlerMethod handlerMethod) throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		container.mergeAttributes(sessionAttributes)___		invokeModelAttributeMethods(request, container)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!container.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException(_							"Expected session attribute '" + name + "'")__				}_				container.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,container,for,string,name,find,session,attribute,arguments,handler,method,if,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer container, 			HandlerMethod handlerMethod) throws Exception;1453870278;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param container a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer container,_			HandlerMethod handlerMethod) throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		container.mergeAttributes(sessionAttributes)___		invokeModelAttributeMethods(request, container)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!container.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException(_							"Expected session attribute '" + name + "'")__				}_				container.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,container,for,string,name,find,session,attribute,arguments,handler,method,if,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer container, 			HandlerMethod handlerMethod) throws Exception;1458754769;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param container a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer container,_			HandlerMethod handlerMethod) throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		container.mergeAttributes(sessionAttributes)___		invokeModelAttributeMethods(request, container)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!container.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException(_							"Expected session attribute '" + name + "'")__				}_				container.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,container,for,string,name,find,session,attribute,arguments,handler,method,if,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer container, 			HandlerMethod handlerMethod) throws Exception;1458843770;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param container a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer container,_			HandlerMethod handlerMethod) throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		container.mergeAttributes(sessionAttributes)__		invokeModelAttributeMethods(request, container)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!container.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'")__				}_				container.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,container,for,string,name,find,session,attribute,arguments,handler,method,if,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer container, 			HandlerMethod handlerMethod) throws Exception;1461704770;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param container a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer container,_			HandlerMethod handlerMethod) throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		container.mergeAttributes(sessionAttributes)__		invokeModelAttributeMethods(request, container)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!container.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'", name)__				}_				container.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,container,for,string,name,find,session,attribute,arguments,handler,method,if,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,name,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer container, 			HandlerMethod handlerMethod) throws Exception;1467730834;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param container a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer container,_			HandlerMethod handlerMethod) throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		container.mergeAttributes(sessionAttributes)__		invokeModelAttributeMethods(request, container)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!container.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'", name)__				}_				container.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,container,for,string,name,find,session,attribute,arguments,handler,method,if,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,name,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer container, 			HandlerMethod handlerMethod) throws Exception;1481579380;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param container a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer container,_			HandlerMethod handlerMethod) throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		container.mergeAttributes(sessionAttributes)__		invokeModelAttributeMethods(request, container)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!container.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'", name)__				}_				container.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,container,for,string,name,find,session,attribute,arguments,handler,method,if,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,name,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer container, 			HandlerMethod handlerMethod) throws Exception;1496837955;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param container a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer container,_			HandlerMethod handlerMethod) throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		container.mergeAttributes(sessionAttributes)__		invokeModelAttributeMethods(request, container)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!container.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'", name)__				}_				container.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,container,for,string,name,find,session,attribute,arguments,handler,method,if,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,name,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer container, 			HandlerMethod handlerMethod) throws Exception;1500495740;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param container a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer container,_			HandlerMethod handlerMethod) throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		container.mergeAttributes(sessionAttributes)__		invokeModelAttributeMethods(request, container)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!container.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'", name)__				}_				container.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,container,for,string,name,find,session,attribute,arguments,handler,method,if,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,name,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer container, 			HandlerMethod handlerMethod) throws Exception;1504993259;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param container a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer container,_			HandlerMethod handlerMethod) throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		container.mergeAttributes(sessionAttributes)__		invokeModelAttributeMethods(request, container)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!container.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'", name)__				}_				container.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,container,for,string,name,find,session,attribute,arguments,handler,method,if,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,name,container,add,attribute,name,value
ModelFactory -> public ModelFactory(List<InvocableHandlerMethod> attributeMethods, 						WebDataBinderFactory binderFactory, 						SessionAttributesHandler sessionAttributesHandler);1328020251;Create a new instance with the given {@code @ModelAttribute} methods._@param attributeMethods for model initialization_@param binderFactory for adding {@link BindingResult} attributes_@param sessionAttributesHandler for access to session attributes;public ModelFactory(List<InvocableHandlerMethod> attributeMethods,_						WebDataBinderFactory binderFactory,_						SessionAttributesHandler sessionAttributesHandler) {_		this.attributeMethods = (attributeMethods != null) ? attributeMethods : new ArrayList<InvocableHandlerMethod>()__		this.binderFactory = binderFactory__		this.sessionAttributesHandler = sessionAttributesHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,attribute,methods,for,model,initialization,param,binder,factory,for,adding,link,binding,result,attributes,param,session,attributes,handler,for,access,to,session,attributes;public,model,factory,list,invocable,handler,method,attribute,methods,web,data,binder,factory,binder,factory,session,attributes,handler,session,attributes,handler,this,attribute,methods,attribute,methods,null,attribute,methods,new,array,list,invocable,handler,method,this,binder,factory,binder,factory,this,session,attributes,handler,session,attributes,handler
ModelFactory -> public ModelFactory(List<InvocableHandlerMethod> attributeMethods, 						WebDataBinderFactory binderFactory, 						SessionAttributesHandler sessionAttributesHandler);1356735495;Create a new instance with the given {@code @ModelAttribute} methods._@param attributeMethods for model initialization_@param binderFactory for adding {@link BindingResult} attributes_@param sessionAttributesHandler for access to session attributes;public ModelFactory(List<InvocableHandlerMethod> attributeMethods,_						WebDataBinderFactory binderFactory,_						SessionAttributesHandler sessionAttributesHandler) {_		this.attributeMethods = (attributeMethods != null) ? attributeMethods : new ArrayList<InvocableHandlerMethod>()__		this.binderFactory = binderFactory__		this.sessionAttributesHandler = sessionAttributesHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,attribute,methods,for,model,initialization,param,binder,factory,for,adding,link,binding,result,attributes,param,session,attributes,handler,for,access,to,session,attributes;public,model,factory,list,invocable,handler,method,attribute,methods,web,data,binder,factory,binder,factory,session,attributes,handler,session,attributes,handler,this,attribute,methods,attribute,methods,null,attribute,methods,new,array,list,invocable,handler,method,this,binder,factory,binder,factory,this,session,attributes,handler,session,attributes,handler
ModelFactory -> public ModelFactory(List<InvocableHandlerMethod> attributeMethods, 						WebDataBinderFactory binderFactory, 						SessionAttributesHandler sessionAttributesHandler);1362408075;Create a new instance with the given {@code @ModelAttribute} methods._@param attributeMethods for model initialization_@param binderFactory for adding {@link BindingResult} attributes_@param sessionAttributesHandler for access to session attributes;public ModelFactory(List<InvocableHandlerMethod> attributeMethods,_						WebDataBinderFactory binderFactory,_						SessionAttributesHandler sessionAttributesHandler) {_		this.attributeMethods = (attributeMethods != null) ? attributeMethods : new ArrayList<InvocableHandlerMethod>()__		this.binderFactory = binderFactory__		this.sessionAttributesHandler = sessionAttributesHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,attribute,methods,for,model,initialization,param,binder,factory,for,adding,link,binding,result,attributes,param,session,attributes,handler,for,access,to,session,attributes;public,model,factory,list,invocable,handler,method,attribute,methods,web,data,binder,factory,binder,factory,session,attributes,handler,session,attributes,handler,this,attribute,methods,attribute,methods,null,attribute,methods,new,array,list,invocable,handler,method,this,binder,factory,binder,factory,this,session,attributes,handler,session,attributes,handler
ModelFactory -> public ModelFactory(List<InvocableHandlerMethod> attributeMethods, 						WebDataBinderFactory binderFactory, 						SessionAttributesHandler sessionAttributesHandler);1381788683;Create a new instance with the given {@code @ModelAttribute} methods._@param attributeMethods for model initialization_@param binderFactory for adding {@link BindingResult} attributes_@param sessionAttributesHandler for access to session attributes;public ModelFactory(List<InvocableHandlerMethod> attributeMethods,_						WebDataBinderFactory binderFactory,_						SessionAttributesHandler sessionAttributesHandler) {_		this.attributeMethods = (attributeMethods != null) ? attributeMethods : new ArrayList<InvocableHandlerMethod>()__		this.binderFactory = binderFactory__		this.sessionAttributesHandler = sessionAttributesHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,attribute,methods,for,model,initialization,param,binder,factory,for,adding,link,binding,result,attributes,param,session,attributes,handler,for,access,to,session,attributes;public,model,factory,list,invocable,handler,method,attribute,methods,web,data,binder,factory,binder,factory,session,attributes,handler,session,attributes,handler,this,attribute,methods,attribute,methods,null,attribute,methods,new,array,list,invocable,handler,method,this,binder,factory,binder,factory,this,session,attributes,handler,session,attributes,handler
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer mavContainer) throws Exception;1328020251;Synchronize model attributes with the session. Add {@link BindingResult}_attributes where necessary._@param request the current request_@param mavContainer contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer mavContainer) throws Exception {_		_		if (mavContainer.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, mavContainer.getModel())__		}_		_		if (!mavContainer.isRequestHandled()) {_			updateBindingResult(request, mavContainer.getModel())__		} _	};synchronize,model,attributes,with,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,mav,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,mav,container,throws,exception,if,mav,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,mav,container,get,model,if,mav,container,is,request,handled,update,binding,result,request,mav,container,get,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer mavContainer) throws Exception;1356735495;Synchronize model attributes with the session. Add {@link BindingResult}_attributes where necessary._@param request the current request_@param mavContainer contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer mavContainer) throws Exception {__		if (mavContainer.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, mavContainer.getModel())__		}__		if (!mavContainer.isRequestHandled()) {_			updateBindingResult(request, mavContainer.getModel())__		}_	};synchronize,model,attributes,with,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,mav,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,mav,container,throws,exception,if,mav,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,mav,container,get,model,if,mav,container,is,request,handled,update,binding,result,request,mav,container,get,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer mavContainer) throws Exception;1362408075;Synchronize model attributes with the session. Add {@link BindingResult}_attributes where necessary._@param request the current request_@param mavContainer contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer mavContainer) throws Exception {__		if (mavContainer.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, mavContainer.getModel())__		}__		if (!mavContainer.isRequestHandled()) {_			updateBindingResult(request, mavContainer.getModel())__		}_	};synchronize,model,attributes,with,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,mav,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,mav,container,throws,exception,if,mav,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,mav,container,get,model,if,mav,container,is,request,handled,update,binding,result,request,mav,container,get,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer mavContainer) throws Exception;1381788683;Synchronize model attributes with the session. Add {@link BindingResult}_attributes where necessary._@param request the current request_@param mavContainer contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer mavContainer) throws Exception {__		if (mavContainer.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, mavContainer.getModel())__		}__		if (!mavContainer.isRequestHandled()) {_			updateBindingResult(request, mavContainer.getModel())__		}_	};synchronize,model,attributes,with,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,mav,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,mav,container,throws,exception,if,mav,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,mav,container,get,model,if,mav,container,is,request,handled,update,binding,result,request,mav,container,get,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer mavContainer) throws Exception;1402172495;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param mavContainer contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer mavContainer) throws Exception {_		if (mavContainer.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, mavContainer.getModel())__		}_		if (!mavContainer.isRequestHandled()) {_			updateBindingResult(request, mavContainer.getModel())__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,mav,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,mav,container,throws,exception,if,mav,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,mav,container,get,model,if,mav,container,is,request,handled,update,binding,result,request,mav,container,get,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer mavContainer) throws Exception;1402172496;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param mavContainer contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer mavContainer) throws Exception {_		if (mavContainer.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, mavContainer.getModel())__		}_		if (!mavContainer.isRequestHandled()) {_			updateBindingResult(request, mavContainer.getModel())__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,mav,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,mav,container,throws,exception,if,mav,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,mav,container,get,model,if,mav,container,is,request,handled,update,binding,result,request,mav,container,get,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer mavContainer) throws Exception;1413848647;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param mavContainer contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer mavContainer) throws Exception {_		if (mavContainer.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, mavContainer.getModel())__		}_		if (!mavContainer.isRequestHandled()) {_			updateBindingResult(request, mavContainer.getModel())__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,mav,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,mav,container,throws,exception,if,mav,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,mav,container,get,model,if,mav,container,is,request,handled,update,binding,result,request,mav,container,get,model
ModelFactory -> public void updateModel(NativeWebRequest request, ModelAndViewContainer mavContainer) throws Exception;1419362684;Promote model attributes listed as {@code @SessionAttributes} to the session._Add {@link BindingResult} attributes where necessary._@param request the current request_@param mavContainer contains the model to update_@throws Exception if creating BindingResult attributes fails;public void updateModel(NativeWebRequest request, ModelAndViewContainer mavContainer) throws Exception {_		ModelMap defaultModel = mavContainer.getDefaultModel()__		if (mavContainer.getSessionStatus().isComplete()){_			this.sessionAttributesHandler.cleanupAttributes(request)__		}_		else {_			this.sessionAttributesHandler.storeAttributes(request, defaultModel)__		}_		if (!mavContainer.isRequestHandled() && mavContainer.getModel() == defaultModel) {_			updateBindingResult(request, defaultModel)__		}_	};promote,model,attributes,listed,as,code,session,attributes,to,the,session,add,link,binding,result,attributes,where,necessary,param,request,the,current,request,param,mav,container,contains,the,model,to,update,throws,exception,if,creating,binding,result,attributes,fails;public,void,update,model,native,web,request,request,model,and,view,container,mav,container,throws,exception,model,map,default,model,mav,container,get,default,model,if,mav,container,get,session,status,is,complete,this,session,attributes,handler,cleanup,attributes,request,else,this,session,attributes,handler,store,attributes,request,default,model,if,mav,container,is,request,handled,mav,container,get,model,default,model,update,binding,result,request,default,model
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer mavContainer) 			throws Exception;1328020251;Invoke model attribute methods to populate the model. Attributes are_added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer mavContainer)_			throws Exception {_		_		for (InvocableHandlerMethod attrMethod : this.attributeMethods) {_			String modelName = attrMethod.getMethodAnnotation(ModelAttribute.class).value()__			if (mavContainer.containsAttribute(modelName)) {_				continue__			}_			_			Object returnValue = attrMethod.invokeForRequest(request, mavContainer)___			if (!attrMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, attrMethod.getReturnType())__				if (!mavContainer.containsAttribute(returnValueName)) {_					mavContainer.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,mav,container,throws,exception,for,invocable,handler,method,attr,method,this,attribute,methods,string,model,name,attr,method,get,method,annotation,model,attribute,class,value,if,mav,container,contains,attribute,model,name,continue,object,return,value,attr,method,invoke,for,request,request,mav,container,if,attr,method,is,void,string,return,value,name,get,name,for,return,value,return,value,attr,method,get,return,type,if,mav,container,contains,attribute,return,value,name,mav,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer mavContainer) 			throws Exception;1356735495;Invoke model attribute methods to populate the model. Attributes are_added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer mavContainer)_			throws Exception {__		for (InvocableHandlerMethod attrMethod : this.attributeMethods) {_			String modelName = attrMethod.getMethodAnnotation(ModelAttribute.class).value()__			if (mavContainer.containsAttribute(modelName)) {_				continue__			}__			Object returnValue = attrMethod.invokeForRequest(request, mavContainer)___			if (!attrMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, attrMethod.getReturnType())__				if (!mavContainer.containsAttribute(returnValueName)) {_					mavContainer.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,mav,container,throws,exception,for,invocable,handler,method,attr,method,this,attribute,methods,string,model,name,attr,method,get,method,annotation,model,attribute,class,value,if,mav,container,contains,attribute,model,name,continue,object,return,value,attr,method,invoke,for,request,request,mav,container,if,attr,method,is,void,string,return,value,name,get,name,for,return,value,return,value,attr,method,get,return,type,if,mav,container,contains,attribute,return,value,name,mav,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer mavContainer) 			throws Exception;1362408075;Invoke model attribute methods to populate the model. Attributes are_added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer mavContainer)_			throws Exception {__		for (InvocableHandlerMethod attrMethod : this.attributeMethods) {_			String modelName = attrMethod.getMethodAnnotation(ModelAttribute.class).value()__			if (mavContainer.containsAttribute(modelName)) {_				continue__			}__			Object returnValue = attrMethod.invokeForRequest(request, mavContainer)___			if (!attrMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, attrMethod.getReturnType())__				if (!mavContainer.containsAttribute(returnValueName)) {_					mavContainer.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,mav,container,throws,exception,for,invocable,handler,method,attr,method,this,attribute,methods,string,model,name,attr,method,get,method,annotation,model,attribute,class,value,if,mav,container,contains,attribute,model,name,continue,object,return,value,attr,method,invoke,for,request,request,mav,container,if,attr,method,is,void,string,return,value,name,get,name,for,return,value,return,value,attr,method,get,return,type,if,mav,container,contains,attribute,return,value,name,mav,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer mavContainer) 			throws Exception;1381788683;Invoke model attribute methods to populate the model. Attributes are_added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer mavContainer)_			throws Exception {__		for (InvocableHandlerMethod attrMethod : this.attributeMethods) {_			String modelName = attrMethod.getMethodAnnotation(ModelAttribute.class).value()__			if (mavContainer.containsAttribute(modelName)) {_				continue__			}__			Object returnValue = attrMethod.invokeForRequest(request, mavContainer)___			if (!attrMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, attrMethod.getReturnType())__				if (!mavContainer.containsAttribute(returnValueName)) {_					mavContainer.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,mav,container,throws,exception,for,invocable,handler,method,attr,method,this,attribute,methods,string,model,name,attr,method,get,method,annotation,model,attribute,class,value,if,mav,container,contains,attribute,model,name,continue,object,return,value,attr,method,invoke,for,request,request,mav,container,if,attr,method,is,void,string,return,value,name,get,name,for,return,value,return,value,attr,method,get,return,type,if,mav,container,contains,attribute,return,value,name,mav,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer mavContainer) 			throws Exception;1402172495;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer mavContainer)_			throws Exception {__		for (InvocableHandlerMethod attrMethod : this.handlerMethods) {_			String modelName = attrMethod.getMethodAnnotation(ModelAttribute.class).value()__			if (mavContainer.containsAttribute(modelName)) {_				continue__			}__			Object returnValue = attrMethod.invokeForRequest(request, mavContainer)___			if (!attrMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, attrMethod.getReturnType())__				if (!mavContainer.containsAttribute(returnValueName)) {_					mavContainer.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,mav,container,throws,exception,for,invocable,handler,method,attr,method,this,handler,methods,string,model,name,attr,method,get,method,annotation,model,attribute,class,value,if,mav,container,contains,attribute,model,name,continue,object,return,value,attr,method,invoke,for,request,request,mav,container,if,attr,method,is,void,string,return,value,name,get,name,for,return,value,return,value,attr,method,get,return,type,if,mav,container,contains,attribute,return,value,name,mav,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer mavContainer) 			throws Exception;1402172496;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer mavContainer)_			throws Exception {__		while (!this.modelMethods.isEmpty()) {_			InvocableHandlerMethod attrMethod = getNextModelMethod(mavContainer).getHandlerMethod()__			String modelName = attrMethod.getMethodAnnotation(ModelAttribute.class).value()__			if (mavContainer.containsAttribute(modelName)) {_				continue__			}__			Object returnValue = attrMethod.invokeForRequest(request, mavContainer)___			if (!attrMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, attrMethod.getReturnType())__				if (!mavContainer.containsAttribute(returnValueName)) {_					mavContainer.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,mav,container,throws,exception,while,this,model,methods,is,empty,invocable,handler,method,attr,method,get,next,model,method,mav,container,get,handler,method,string,model,name,attr,method,get,method,annotation,model,attribute,class,value,if,mav,container,contains,attribute,model,name,continue,object,return,value,attr,method,invoke,for,request,request,mav,container,if,attr,method,is,void,string,return,value,name,get,name,for,return,value,return,value,attr,method,get,return,type,if,mav,container,contains,attribute,return,value,name,mav,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer mavContainer) 			throws Exception;1413848647;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer mavContainer)_			throws Exception {__		while (!this.modelMethods.isEmpty()) {_			InvocableHandlerMethod attrMethod = getNextModelMethod(mavContainer).getHandlerMethod()__			String modelName = attrMethod.getMethodAnnotation(ModelAttribute.class).value()__			if (mavContainer.containsAttribute(modelName)) {_				continue__			}__			Object returnValue = attrMethod.invokeForRequest(request, mavContainer)___			if (!attrMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, attrMethod.getReturnType())__				if (!mavContainer.containsAttribute(returnValueName)) {_					mavContainer.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,mav,container,throws,exception,while,this,model,methods,is,empty,invocable,handler,method,attr,method,get,next,model,method,mav,container,get,handler,method,string,model,name,attr,method,get,method,annotation,model,attribute,class,value,if,mav,container,contains,attribute,model,name,continue,object,return,value,attr,method,invoke,for,request,request,mav,container,if,attr,method,is,void,string,return,value,name,get,name,for,return,value,return,value,attr,method,get,return,type,if,mav,container,contains,attribute,return,value,name,mav,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer mavContainer) 			throws Exception;1419362684;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer mavContainer)_			throws Exception {__		while (!this.modelMethods.isEmpty()) {_			InvocableHandlerMethod attrMethod = getNextModelMethod(mavContainer).getHandlerMethod()__			String modelName = attrMethod.getMethodAnnotation(ModelAttribute.class).value()__			if (mavContainer.containsAttribute(modelName)) {_				continue__			}__			Object returnValue = attrMethod.invokeForRequest(request, mavContainer)___			if (!attrMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, attrMethod.getReturnType())__				if (!mavContainer.containsAttribute(returnValueName)) {_					mavContainer.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,mav,container,throws,exception,while,this,model,methods,is,empty,invocable,handler,method,attr,method,get,next,model,method,mav,container,get,handler,method,string,model,name,attr,method,get,method,annotation,model,attribute,class,value,if,mav,container,contains,attribute,model,name,continue,object,return,value,attr,method,invoke,for,request,request,mav,container,if,attr,method,is,void,string,return,value,name,get,name,for,return,value,return,value,attr,method,get,return,type,if,mav,container,contains,attribute,return,value,name,mav,container,add,attribute,return,value,name,return,value
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1328020251;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<String>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)___			if (isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name__			_				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = binderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,string,model,key,set,for,string,name,key,names,object,value,model,get,name,if,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1356735495;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<String>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)___			if (isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name___				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = binderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,string,model,key,set,for,string,name,key,names,object,value,model,get,name,if,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1362408075;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<String>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)___			if (isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name___				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = binderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,string,model,key,set,for,string,name,key,names,object,value,model,get,name,if,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1381788683;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<String>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)___			if (isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name___				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = binderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,string,model,key,set,for,string,name,key,names,object,value,model,get,name,if,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1402172495;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<String>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)___			if (isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name___				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,string,model,key,set,for,string,name,key,names,object,value,model,get,name,if,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1402172496;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<String>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)___			if (isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name___				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,string,model,key,set,for,string,name,key,names,object,value,model,get,name,if,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1413848647;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<String>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)___			if (isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name___				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,string,model,key,set,for,string,name,key,names,object,value,model,get,name,if,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1419362684;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<String>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)___			if (isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name___				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,string,model,key,set,for,string,name,key,names,object,value,model,get,name,if,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1453868458;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<String>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)___			if (isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name___				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = this.dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,string,model,key,set,for,string,name,key,names,object,value,model,get,name,if,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,this,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1453870278;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<String>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)___			if (isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name___				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = this.dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,string,model,key,set,for,string,name,key,names,object,value,model,get,name,if,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,this,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1458754769;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<String>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)___			if (isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name___				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = this.dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,string,model,key,set,for,string,name,key,names,object,value,model,get,name,if,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,this,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1458843770;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<String>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)___			if (isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name___				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = this.dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,string,model,key,set,for,string,name,key,names,object,value,model,get,name,if,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,this,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1461704770;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<String>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)___			if (isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name___				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = this.dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,string,model,key,set,for,string,name,key,names,object,value,model,get,name,if,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,this,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1467730834;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)___			if (isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name___				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = this.dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,model,key,set,for,string,name,key,names,object,value,model,get,name,if,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,this,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1481579380;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)__			if (isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name__				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = this.dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,model,key,set,for,string,name,key,names,object,value,model,get,name,if,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,this,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1496837955;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)__			if (isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name__				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = this.dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,model,key,set,for,string,name,key,names,object,value,model,get,name,if,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,this,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1500495740;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)__			if (value != null && isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name__				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = this.dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,model,key,set,for,string,name,key,names,object,value,model,get,name,if,value,null,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,this,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1504993259;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)__			if (value != null && isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name__				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = this.dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,model,key,set,for,string,name,key,names,object,value,model,get,name,if,value,null,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,this,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1519772955;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)__			if (value != null && isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name__				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = this.dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,model,key,set,for,string,name,key,names,object,value,model,get,name,if,value,null,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,this,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1529721864;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)__			if (value != null && isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name__				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = this.dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,model,key,set,for,string,name,key,names,object,value,model,get,name,if,value,null,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,this,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception;1530174524;Add {@link BindingResult} attributes to the model for attributes that require it.;private void updateBindingResult(NativeWebRequest request, ModelMap model) throws Exception {_		List<String> keyNames = new ArrayList<>(model.keySet())__		for (String name : keyNames) {_			Object value = model.get(name)__			if (value != null && isBindingCandidate(name, value)) {_				String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + name__				if (!model.containsAttribute(bindingResultKey)) {_					WebDataBinder dataBinder = this.dataBinderFactory.createBinder(request, value, name)__					model.put(bindingResultKey, dataBinder.getBindingResult())__				}_			}_		}_	};add,link,binding,result,attributes,to,the,model,for,attributes,that,require,it;private,void,update,binding,result,native,web,request,request,model,map,model,throws,exception,list,string,key,names,new,array,list,model,key,set,for,string,name,key,names,object,value,model,get,name,if,value,null,is,binding,candidate,name,value,string,binding,result,key,binding,result,name,if,model,contains,attribute,binding,result,key,web,data,binder,data,binder,this,data,binder,factory,create,binder,request,value,name,model,put,binding,result,key,data,binder,get,binding,result
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer container, HandlerMethod handlerMethod) 			throws Exception;1519772955;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param container a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer container, HandlerMethod handlerMethod)_			throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		container.mergeAttributes(sessionAttributes)__		invokeModelAttributeMethods(request, container)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!container.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'", name)__				}_				container.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,container,for,string,name,find,session,attribute,arguments,handler,method,if,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,name,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer container, HandlerMethod handlerMethod) 			throws Exception;1529721864;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param container a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer container, HandlerMethod handlerMethod)_			throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		container.mergeAttributes(sessionAttributes)__		invokeModelAttributeMethods(request, container)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!container.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'", name)__				}_				container.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,container,for,string,name,find,session,attribute,arguments,handler,method,if,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,name,container,add,attribute,name,value
ModelFactory -> public void initModel(NativeWebRequest request, ModelAndViewContainer container, HandlerMethod handlerMethod) 			throws Exception;1530174524;Populate the model in the following order:_<ol>_<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}._<li>Invoke {@code @ModelAttribute} methods_<li>Find {@code @ModelAttribute} method arguments also listed as_{@code @SessionAttributes} and ensure they're present in the model raising_an exception if necessary._</ol>_@param request the current request_@param container a container with the model to be initialized_@param handlerMethod the method for which the model is initialized_@throws Exception may arise from {@code @ModelAttribute} methods;public void initModel(NativeWebRequest request, ModelAndViewContainer container, HandlerMethod handlerMethod)_			throws Exception {__		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request)__		container.mergeAttributes(sessionAttributes)__		invokeModelAttributeMethods(request, container)___		for (String name : findSessionAttributeArguments(handlerMethod)) {_			if (!container.containsAttribute(name)) {_				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name)__				if (value == null) {_					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'", name)__				}_				container.addAttribute(name, value)__			}_		}_	};populate,the,model,in,the,following,order,ol,li,retrieve,known,session,attributes,listed,as,code,session,attributes,li,invoke,code,model,attribute,methods,li,find,code,model,attribute,method,arguments,also,listed,as,code,session,attributes,and,ensure,they,re,present,in,the,model,raising,an,exception,if,necessary,ol,param,request,the,current,request,param,container,a,container,with,the,model,to,be,initialized,param,handler,method,the,method,for,which,the,model,is,initialized,throws,exception,may,arise,from,code,model,attribute,methods;public,void,init,model,native,web,request,request,model,and,view,container,container,handler,method,handler,method,throws,exception,map,string,session,attributes,this,session,attributes,handler,retrieve,attributes,request,container,merge,attributes,session,attributes,invoke,model,attribute,methods,request,container,for,string,name,find,session,attribute,arguments,handler,method,if,container,contains,attribute,name,object,value,this,session,attributes,handler,retrieve,attribute,request,name,if,value,null,throw,new,http,session,required,exception,expected,session,attribute,name,name,container,add,attribute,name,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container) 			throws Exception;1458843770;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container)_			throws Exception {__		while (!this.modelMethods.isEmpty()) {_			InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod()__			ModelAttribute ann = modelMethod.getMethodAnnotation(ModelAttribute.class)__			if (container.containsAttribute(ann.name())) {_				if (!ann.binding()) {_					container.setBindingDisabled(ann.name())__				}_				continue__			}__			Object returnValue = modelMethod.invokeForRequest(request, container)__			if (!modelMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType())__				if (!ann.binding()) {_					container.setBindingDisabled(returnValueName)__				}_				if (!container.containsAttribute(returnValueName)) {_					container.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,container,throws,exception,while,this,model,methods,is,empty,invocable,handler,method,model,method,get,next,model,method,container,get,handler,method,model,attribute,ann,model,method,get,method,annotation,model,attribute,class,if,container,contains,attribute,ann,name,if,ann,binding,container,set,binding,disabled,ann,name,continue,object,return,value,model,method,invoke,for,request,request,container,if,model,method,is,void,string,return,value,name,get,name,for,return,value,return,value,model,method,get,return,type,if,ann,binding,container,set,binding,disabled,return,value,name,if,container,contains,attribute,return,value,name,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container) 			throws Exception;1461704770;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container)_			throws Exception {__		while (!this.modelMethods.isEmpty()) {_			InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod()__			ModelAttribute ann = modelMethod.getMethodAnnotation(ModelAttribute.class)__			if (container.containsAttribute(ann.name())) {_				if (!ann.binding()) {_					container.setBindingDisabled(ann.name())__				}_				continue__			}__			Object returnValue = modelMethod.invokeForRequest(request, container)__			if (!modelMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType())__				if (!ann.binding()) {_					container.setBindingDisabled(returnValueName)__				}_				if (!container.containsAttribute(returnValueName)) {_					container.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,container,throws,exception,while,this,model,methods,is,empty,invocable,handler,method,model,method,get,next,model,method,container,get,handler,method,model,attribute,ann,model,method,get,method,annotation,model,attribute,class,if,container,contains,attribute,ann,name,if,ann,binding,container,set,binding,disabled,ann,name,continue,object,return,value,model,method,invoke,for,request,request,container,if,model,method,is,void,string,return,value,name,get,name,for,return,value,return,value,model,method,get,return,type,if,ann,binding,container,set,binding,disabled,return,value,name,if,container,contains,attribute,return,value,name,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container) 			throws Exception;1467730834;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container)_			throws Exception {__		while (!this.modelMethods.isEmpty()) {_			InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod()__			ModelAttribute ann = modelMethod.getMethodAnnotation(ModelAttribute.class)__			if (container.containsAttribute(ann.name())) {_				if (!ann.binding()) {_					container.setBindingDisabled(ann.name())__				}_				continue__			}__			Object returnValue = modelMethod.invokeForRequest(request, container)__			if (!modelMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType())__				if (!ann.binding()) {_					container.setBindingDisabled(returnValueName)__				}_				if (!container.containsAttribute(returnValueName)) {_					container.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,container,throws,exception,while,this,model,methods,is,empty,invocable,handler,method,model,method,get,next,model,method,container,get,handler,method,model,attribute,ann,model,method,get,method,annotation,model,attribute,class,if,container,contains,attribute,ann,name,if,ann,binding,container,set,binding,disabled,ann,name,continue,object,return,value,model,method,invoke,for,request,request,container,if,model,method,is,void,string,return,value,name,get,name,for,return,value,return,value,model,method,get,return,type,if,ann,binding,container,set,binding,disabled,return,value,name,if,container,contains,attribute,return,value,name,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container) 			throws Exception;1481579380;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container)_			throws Exception {__		while (!this.modelMethods.isEmpty()) {_			InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod()__			ModelAttribute ann = modelMethod.getMethodAnnotation(ModelAttribute.class)__			if (container.containsAttribute(ann.name())) {_				if (!ann.binding()) {_					container.setBindingDisabled(ann.name())__				}_				continue__			}__			Object returnValue = modelMethod.invokeForRequest(request, container)__			if (!modelMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType())__				if (!ann.binding()) {_					container.setBindingDisabled(returnValueName)__				}_				if (!container.containsAttribute(returnValueName)) {_					container.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,container,throws,exception,while,this,model,methods,is,empty,invocable,handler,method,model,method,get,next,model,method,container,get,handler,method,model,attribute,ann,model,method,get,method,annotation,model,attribute,class,if,container,contains,attribute,ann,name,if,ann,binding,container,set,binding,disabled,ann,name,continue,object,return,value,model,method,invoke,for,request,request,container,if,model,method,is,void,string,return,value,name,get,name,for,return,value,return,value,model,method,get,return,type,if,ann,binding,container,set,binding,disabled,return,value,name,if,container,contains,attribute,return,value,name,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container) 			throws Exception;1496837955;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container)_			throws Exception {__		while (!this.modelMethods.isEmpty()) {_			InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod()__			ModelAttribute ann = modelMethod.getMethodAnnotation(ModelAttribute.class)__			Assert.state(ann != null, "No ModelAttribute annotation")__			if (container.containsAttribute(ann.name())) {_				if (!ann.binding()) {_					container.setBindingDisabled(ann.name())__				}_				continue__			}__			Object returnValue = modelMethod.invokeForRequest(request, container)__			if (!modelMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType())__				if (!ann.binding()) {_					container.setBindingDisabled(returnValueName)__				}_				if (!container.containsAttribute(returnValueName)) {_					container.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,container,throws,exception,while,this,model,methods,is,empty,invocable,handler,method,model,method,get,next,model,method,container,get,handler,method,model,attribute,ann,model,method,get,method,annotation,model,attribute,class,assert,state,ann,null,no,model,attribute,annotation,if,container,contains,attribute,ann,name,if,ann,binding,container,set,binding,disabled,ann,name,continue,object,return,value,model,method,invoke,for,request,request,container,if,model,method,is,void,string,return,value,name,get,name,for,return,value,return,value,model,method,get,return,type,if,ann,binding,container,set,binding,disabled,return,value,name,if,container,contains,attribute,return,value,name,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container) 			throws Exception;1500495740;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container)_			throws Exception {__		while (!this.modelMethods.isEmpty()) {_			InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod()__			ModelAttribute ann = modelMethod.getMethodAnnotation(ModelAttribute.class)__			Assert.state(ann != null, "No ModelAttribute annotation")__			if (container.containsAttribute(ann.name())) {_				if (!ann.binding()) {_					container.setBindingDisabled(ann.name())__				}_				continue__			}__			Object returnValue = modelMethod.invokeForRequest(request, container)__			if (!modelMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType())__				if (!ann.binding()) {_					container.setBindingDisabled(returnValueName)__				}_				if (!container.containsAttribute(returnValueName)) {_					container.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,container,throws,exception,while,this,model,methods,is,empty,invocable,handler,method,model,method,get,next,model,method,container,get,handler,method,model,attribute,ann,model,method,get,method,annotation,model,attribute,class,assert,state,ann,null,no,model,attribute,annotation,if,container,contains,attribute,ann,name,if,ann,binding,container,set,binding,disabled,ann,name,continue,object,return,value,model,method,invoke,for,request,request,container,if,model,method,is,void,string,return,value,name,get,name,for,return,value,return,value,model,method,get,return,type,if,ann,binding,container,set,binding,disabled,return,value,name,if,container,contains,attribute,return,value,name,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container) 			throws Exception;1504993259;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container)_			throws Exception {__		while (!this.modelMethods.isEmpty()) {_			InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod()__			ModelAttribute ann = modelMethod.getMethodAnnotation(ModelAttribute.class)__			Assert.state(ann != null, "No ModelAttribute annotation")__			if (container.containsAttribute(ann.name())) {_				if (!ann.binding()) {_					container.setBindingDisabled(ann.name())__				}_				continue__			}__			Object returnValue = modelMethod.invokeForRequest(request, container)__			if (!modelMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType())__				if (!ann.binding()) {_					container.setBindingDisabled(returnValueName)__				}_				if (!container.containsAttribute(returnValueName)) {_					container.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,container,throws,exception,while,this,model,methods,is,empty,invocable,handler,method,model,method,get,next,model,method,container,get,handler,method,model,attribute,ann,model,method,get,method,annotation,model,attribute,class,assert,state,ann,null,no,model,attribute,annotation,if,container,contains,attribute,ann,name,if,ann,binding,container,set,binding,disabled,ann,name,continue,object,return,value,model,method,invoke,for,request,request,container,if,model,method,is,void,string,return,value,name,get,name,for,return,value,return,value,model,method,get,return,type,if,ann,binding,container,set,binding,disabled,return,value,name,if,container,contains,attribute,return,value,name,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container) 			throws Exception;1519772955;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container)_			throws Exception {__		while (!this.modelMethods.isEmpty()) {_			InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod()__			ModelAttribute ann = modelMethod.getMethodAnnotation(ModelAttribute.class)__			Assert.state(ann != null, "No ModelAttribute annotation")__			if (container.containsAttribute(ann.name())) {_				if (!ann.binding()) {_					container.setBindingDisabled(ann.name())__				}_				continue__			}__			Object returnValue = modelMethod.invokeForRequest(request, container)__			if (!modelMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType())__				if (!ann.binding()) {_					container.setBindingDisabled(returnValueName)__				}_				if (!container.containsAttribute(returnValueName)) {_					container.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,container,throws,exception,while,this,model,methods,is,empty,invocable,handler,method,model,method,get,next,model,method,container,get,handler,method,model,attribute,ann,model,method,get,method,annotation,model,attribute,class,assert,state,ann,null,no,model,attribute,annotation,if,container,contains,attribute,ann,name,if,ann,binding,container,set,binding,disabled,ann,name,continue,object,return,value,model,method,invoke,for,request,request,container,if,model,method,is,void,string,return,value,name,get,name,for,return,value,return,value,model,method,get,return,type,if,ann,binding,container,set,binding,disabled,return,value,name,if,container,contains,attribute,return,value,name,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container) 			throws Exception;1529721864;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container)_			throws Exception {__		while (!this.modelMethods.isEmpty()) {_			InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod()__			ModelAttribute ann = modelMethod.getMethodAnnotation(ModelAttribute.class)__			Assert.state(ann != null, "No ModelAttribute annotation")__			if (container.containsAttribute(ann.name())) {_				if (!ann.binding()) {_					container.setBindingDisabled(ann.name())__				}_				continue__			}__			Object returnValue = modelMethod.invokeForRequest(request, container)__			if (!modelMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType())__				if (!ann.binding()) {_					container.setBindingDisabled(returnValueName)__				}_				if (!container.containsAttribute(returnValueName)) {_					container.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,container,throws,exception,while,this,model,methods,is,empty,invocable,handler,method,model,method,get,next,model,method,container,get,handler,method,model,attribute,ann,model,method,get,method,annotation,model,attribute,class,assert,state,ann,null,no,model,attribute,annotation,if,container,contains,attribute,ann,name,if,ann,binding,container,set,binding,disabled,ann,name,continue,object,return,value,model,method,invoke,for,request,request,container,if,model,method,is,void,string,return,value,name,get,name,for,return,value,return,value,model,method,get,return,type,if,ann,binding,container,set,binding,disabled,return,value,name,if,container,contains,attribute,return,value,name,container,add,attribute,return,value,name,return,value
ModelFactory -> private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container) 			throws Exception;1530174524;Invoke model attribute methods to populate the model._Attributes are added only if not already present in the model.;private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container)_			throws Exception {__		while (!this.modelMethods.isEmpty()) {_			InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod()__			ModelAttribute ann = modelMethod.getMethodAnnotation(ModelAttribute.class)__			Assert.state(ann != null, "No ModelAttribute annotation")__			if (container.containsAttribute(ann.name())) {_				if (!ann.binding()) {_					container.setBindingDisabled(ann.name())__				}_				continue__			}__			Object returnValue = modelMethod.invokeForRequest(request, container)__			if (!modelMethod.isVoid()){_				String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType())__				if (!ann.binding()) {_					container.setBindingDisabled(returnValueName)__				}_				if (!container.containsAttribute(returnValueName)) {_					container.addAttribute(returnValueName, returnValue)__				}_			}_		}_	};invoke,model,attribute,methods,to,populate,the,model,attributes,are,added,only,if,not,already,present,in,the,model;private,void,invoke,model,attribute,methods,native,web,request,request,model,and,view,container,container,throws,exception,while,this,model,methods,is,empty,invocable,handler,method,model,method,get,next,model,method,container,get,handler,method,model,attribute,ann,model,method,get,method,annotation,model,attribute,class,assert,state,ann,null,no,model,attribute,annotation,if,container,contains,attribute,ann,name,if,ann,binding,container,set,binding,disabled,ann,name,continue,object,return,value,model,method,invoke,for,request,request,container,if,model,method,is,void,string,return,value,name,get,name,for,return,value,return,value,model,method,get,return,type,if,ann,binding,container,set,binding,disabled,return,value,name,if,container,contains,attribute,return,value,name,container,add,attribute,return,value,name,return,value
ModelFactory -> public ModelFactory(@Nullable List<InvocableHandlerMethod> handlerMethods, 			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler);1496837955;Create a new instance with the given {@code @ModelAttribute} methods._@param handlerMethods the {@code @ModelAttribute} methods to invoke_@param binderFactory for preparation of {@link BindingResult} attributes_@param attributeHandler for access to session attributes;public ModelFactory(@Nullable List<InvocableHandlerMethod> handlerMethods,_			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler) {__		if (handlerMethods != null) {_			for (InvocableHandlerMethod handlerMethod : handlerMethods) {_				this.modelMethods.add(new ModelMethod(handlerMethod))__			}_		}_		this.dataBinderFactory = binderFactory__		this.sessionAttributesHandler = attributeHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,handler,methods,the,code,model,attribute,methods,to,invoke,param,binder,factory,for,preparation,of,link,binding,result,attributes,param,attribute,handler,for,access,to,session,attributes;public,model,factory,nullable,list,invocable,handler,method,handler,methods,web,data,binder,factory,binder,factory,session,attributes,handler,attribute,handler,if,handler,methods,null,for,invocable,handler,method,handler,method,handler,methods,this,model,methods,add,new,model,method,handler,method,this,data,binder,factory,binder,factory,this,session,attributes,handler,attribute,handler
ModelFactory -> public ModelFactory(@Nullable List<InvocableHandlerMethod> handlerMethods, 			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler);1500495740;Create a new instance with the given {@code @ModelAttribute} methods._@param handlerMethods the {@code @ModelAttribute} methods to invoke_@param binderFactory for preparation of {@link BindingResult} attributes_@param attributeHandler for access to session attributes;public ModelFactory(@Nullable List<InvocableHandlerMethod> handlerMethods,_			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler) {__		if (handlerMethods != null) {_			for (InvocableHandlerMethod handlerMethod : handlerMethods) {_				this.modelMethods.add(new ModelMethod(handlerMethod))__			}_		}_		this.dataBinderFactory = binderFactory__		this.sessionAttributesHandler = attributeHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,handler,methods,the,code,model,attribute,methods,to,invoke,param,binder,factory,for,preparation,of,link,binding,result,attributes,param,attribute,handler,for,access,to,session,attributes;public,model,factory,nullable,list,invocable,handler,method,handler,methods,web,data,binder,factory,binder,factory,session,attributes,handler,attribute,handler,if,handler,methods,null,for,invocable,handler,method,handler,method,handler,methods,this,model,methods,add,new,model,method,handler,method,this,data,binder,factory,binder,factory,this,session,attributes,handler,attribute,handler
ModelFactory -> public ModelFactory(@Nullable List<InvocableHandlerMethod> handlerMethods, 			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler);1504993259;Create a new instance with the given {@code @ModelAttribute} methods._@param handlerMethods the {@code @ModelAttribute} methods to invoke_@param binderFactory for preparation of {@link BindingResult} attributes_@param attributeHandler for access to session attributes;public ModelFactory(@Nullable List<InvocableHandlerMethod> handlerMethods,_			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler) {__		if (handlerMethods != null) {_			for (InvocableHandlerMethod handlerMethod : handlerMethods) {_				this.modelMethods.add(new ModelMethod(handlerMethod))__			}_		}_		this.dataBinderFactory = binderFactory__		this.sessionAttributesHandler = attributeHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,handler,methods,the,code,model,attribute,methods,to,invoke,param,binder,factory,for,preparation,of,link,binding,result,attributes,param,attribute,handler,for,access,to,session,attributes;public,model,factory,nullable,list,invocable,handler,method,handler,methods,web,data,binder,factory,binder,factory,session,attributes,handler,attribute,handler,if,handler,methods,null,for,invocable,handler,method,handler,method,handler,methods,this,model,methods,add,new,model,method,handler,method,this,data,binder,factory,binder,factory,this,session,attributes,handler,attribute,handler
ModelFactory -> public ModelFactory(@Nullable List<InvocableHandlerMethod> handlerMethods, 			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler);1519772955;Create a new instance with the given {@code @ModelAttribute} methods._@param handlerMethods the {@code @ModelAttribute} methods to invoke_@param binderFactory for preparation of {@link BindingResult} attributes_@param attributeHandler for access to session attributes;public ModelFactory(@Nullable List<InvocableHandlerMethod> handlerMethods,_			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler) {__		if (handlerMethods != null) {_			for (InvocableHandlerMethod handlerMethod : handlerMethods) {_				this.modelMethods.add(new ModelMethod(handlerMethod))__			}_		}_		this.dataBinderFactory = binderFactory__		this.sessionAttributesHandler = attributeHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,handler,methods,the,code,model,attribute,methods,to,invoke,param,binder,factory,for,preparation,of,link,binding,result,attributes,param,attribute,handler,for,access,to,session,attributes;public,model,factory,nullable,list,invocable,handler,method,handler,methods,web,data,binder,factory,binder,factory,session,attributes,handler,attribute,handler,if,handler,methods,null,for,invocable,handler,method,handler,method,handler,methods,this,model,methods,add,new,model,method,handler,method,this,data,binder,factory,binder,factory,this,session,attributes,handler,attribute,handler
ModelFactory -> public ModelFactory(@Nullable List<InvocableHandlerMethod> handlerMethods, 			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler);1529721864;Create a new instance with the given {@code @ModelAttribute} methods._@param handlerMethods the {@code @ModelAttribute} methods to invoke_@param binderFactory for preparation of {@link BindingResult} attributes_@param attributeHandler for access to session attributes;public ModelFactory(@Nullable List<InvocableHandlerMethod> handlerMethods,_			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler) {__		if (handlerMethods != null) {_			for (InvocableHandlerMethod handlerMethod : handlerMethods) {_				this.modelMethods.add(new ModelMethod(handlerMethod))__			}_		}_		this.dataBinderFactory = binderFactory__		this.sessionAttributesHandler = attributeHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,handler,methods,the,code,model,attribute,methods,to,invoke,param,binder,factory,for,preparation,of,link,binding,result,attributes,param,attribute,handler,for,access,to,session,attributes;public,model,factory,nullable,list,invocable,handler,method,handler,methods,web,data,binder,factory,binder,factory,session,attributes,handler,attribute,handler,if,handler,methods,null,for,invocable,handler,method,handler,method,handler,methods,this,model,methods,add,new,model,method,handler,method,this,data,binder,factory,binder,factory,this,session,attributes,handler,attribute,handler
ModelFactory -> public ModelFactory(@Nullable List<InvocableHandlerMethod> handlerMethods, 			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler);1530174524;Create a new instance with the given {@code @ModelAttribute} methods._@param handlerMethods the {@code @ModelAttribute} methods to invoke_@param binderFactory for preparation of {@link BindingResult} attributes_@param attributeHandler for access to session attributes;public ModelFactory(@Nullable List<InvocableHandlerMethod> handlerMethods,_			WebDataBinderFactory binderFactory, SessionAttributesHandler attributeHandler) {__		if (handlerMethods != null) {_			for (InvocableHandlerMethod handlerMethod : handlerMethods) {_				this.modelMethods.add(new ModelMethod(handlerMethod))__			}_		}_		this.dataBinderFactory = binderFactory__		this.sessionAttributesHandler = attributeHandler__	};create,a,new,instance,with,the,given,code,model,attribute,methods,param,handler,methods,the,code,model,attribute,methods,to,invoke,param,binder,factory,for,preparation,of,link,binding,result,attributes,param,attribute,handler,for,access,to,session,attributes;public,model,factory,nullable,list,invocable,handler,method,handler,methods,web,data,binder,factory,binder,factory,session,attributes,handler,attribute,handler,if,handler,methods,null,for,invocable,handler,method,handler,method,handler,methods,this,model,methods,add,new,model,method,handler,method,this,data,binder,factory,binder,factory,this,session,attributes,handler,attribute,handler
