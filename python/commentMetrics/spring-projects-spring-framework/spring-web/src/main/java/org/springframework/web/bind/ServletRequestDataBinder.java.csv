commented;modifiers;parameterAmount;loc;comment;code
true;public;1;9;/**  * Bind the parameters of the given request to this binder's target,  * also binding multipart files in case of a multipart request.  * <p>This call can create field errors, representing basic binding  * errors like a required field (code "required"), or type mismatch  * between value and bean property (code "typeMismatch").  * <p>Multipart files are bound via their parameter name, just like normal  * HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,  * invoking a "setUploadedFile" setter method.  * <p>The type of the target property for a multipart file can be MultipartFile,  * byte[], or String. The latter two receive the contents of the uploaded file.  * all metadata like original file name, content type, etc are lost in those cases.  * @param request request with parameters to bind (can be multipart)  * @see org.springframework.web.multipart.MultipartHttpServletRequest  * @see org.springframework.web.multipart.MultipartFile  * @see #bind(org.springframework.beans.PropertyValues)  */ ;/**  * Bind the parameters of the given request to this binder's target,  * also binding multipart files in case of a multipart request.  * <p>This call can create field errors, representing basic binding  * errors like a required field (code "required"), or type mismatch  * between value and bean property (code "typeMismatch").  * <p>Multipart files are bound via their parameter name, just like normal  * HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,  * invoking a "setUploadedFile" setter method.  * <p>The type of the target property for a multipart file can be MultipartFile,  * byte[], or String. The latter two receive the contents of the uploaded file.  * all metadata like original file name, content type, etc are lost in those cases.  * @param request request with parameters to bind (can be multipart)  * @see org.springframework.web.multipart.MultipartHttpServletRequest  * @see org.springframework.web.multipart.MultipartFile  * @see #bind(org.springframework.beans.PropertyValues)  */ public void bind(ServletRequest request) {     MutablePropertyValues mpvs = new ServletRequestParameterPropertyValues(request).     MultipartRequest multipartRequest = WebUtils.getNativeRequest(request, MultipartRequest.class).     if (multipartRequest != null) {         bindMultipart(multipartRequest.getMultiFileMap(), mpvs).     }     addBindValues(mpvs, request).     doBind(mpvs). }
true;protected;2;2;/**  * Extension point that subclasses can use to add extra bind values for a  * request. Invoked before {@link #doBind(MutablePropertyValues)}.  * The default implementation is empty.  * @param mpvs the property values that will be used for data binding  * @param request the current request  */ ;/**  * Extension point that subclasses can use to add extra bind values for a  * request. Invoked before {@link #doBind(MutablePropertyValues)}.  * The default implementation is empty.  * @param mpvs the property values that will be used for data binding  * @param request the current request  */ protected void addBindValues(MutablePropertyValues mpvs, ServletRequest request) { }
true;public;0;7;/**  * Treats errors as fatal.  * <p>Use this method only if it's an error if the input isn't valid.  * This might be appropriate if all input is from dropdowns, for example.  * @throws ServletRequestBindingException subclass of ServletException on any binding problem  */ ;/**  * Treats errors as fatal.  * <p>Use this method only if it's an error if the input isn't valid.  * This might be appropriate if all input is from dropdowns, for example.  * @throws ServletRequestBindingException subclass of ServletException on any binding problem  */ public void closeNoCatch() throws ServletRequestBindingException {     if (getBindingResult().hasErrors()) {         throw new ServletRequestBindingException("Errors binding onto object '" + getBindingResult().getObjectName() + "'", new BindException(getBindingResult())).     } }
