commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the request interceptors that this accessor should use.  * @param interceptors the list of interceptors  */ ;/**  * Set the request interceptors that this accessor should use.  * @param interceptors the list of interceptors  */ public void setInterceptors(List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> interceptors) {     this.interceptors = interceptors. }
true;public;0;3;/**  * Return the request interceptor that this accessor uses.  */ ;/**  * Return the request interceptor that this accessor uses.  */ public List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> getInterceptors() {     return this.interceptors. }
false;public;0;10;;@Override public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory() {     org.springframework.http.client.AsyncClientHttpRequestFactory delegate = super.getAsyncRequestFactory().     if (!CollectionUtils.isEmpty(getInterceptors())) {         return new org.springframework.http.client.InterceptingAsyncClientHttpRequestFactory(delegate, getInterceptors()).     } else {         return delegate.     } }
