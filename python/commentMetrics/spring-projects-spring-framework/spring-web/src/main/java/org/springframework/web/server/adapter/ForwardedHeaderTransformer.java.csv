commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Enable mode in which any "Forwarded" or "X-Forwarded-*" headers are  * removed only and the information in them ignored.  * @param removeOnly whether to discard and ignore forwarded headers  */ ;/**  * Enable mode in which any "Forwarded" or "X-Forwarded-*" headers are  * removed only and the information in them ignored.  * @param removeOnly whether to discard and ignore forwarded headers  */ public void setRemoveOnly(boolean removeOnly) {     this.removeOnly = removeOnly. }
true;public;0;3;/**  * Whether the "remove only" mode is on.  * @see #setRemoveOnly  */ ;/**  * Whether the "remove only" mode is on.  * @see #setRemoveOnly  */ public boolean isRemoveOnly() {     return this.removeOnly. }
true;public;1;18;/**  * Apply and remove, or remove Forwarded type headers.  * @param request the request  */ ;/**  * Apply and remove, or remove Forwarded type headers.  * @param request the request  */ @Override public ServerHttpRequest apply(ServerHttpRequest request) {     if (hasForwardedHeaders(request)) {         ServerHttpRequest.Builder builder = request.mutate().         if (!this.removeOnly) {             URI uri = UriComponentsBuilder.fromHttpRequest(request).build(true).toUri().             builder.uri(uri).             String prefix = getForwardedPrefix(request).             if (prefix != null) {                 builder.path(prefix + uri.getPath()).                 builder.contextPath(prefix).             }         }         removeForwardedHeaders(builder).         request = builder.build().     }     return request. }
true;protected;1;9;/**  * Whether the request has any Forwarded headers.  * @param request the request  */ ;/**  * Whether the request has any Forwarded headers.  * @param request the request  */ protected boolean hasForwardedHeaders(ServerHttpRequest request) {     HttpHeaders headers = request.getHeaders().     for (String headerName : FORWARDED_HEADER_NAMES) {         if (headers.containsKey(headerName)) {             return true.         }     }     return false. }
false;private;1;3;;private void removeForwardedHeaders(ServerHttpRequest.Builder builder) {     builder.headers(map -> FORWARDED_HEADER_NAMES.forEach(map::remove)). }
false;private,static;1;13;;@Nullable private static String getForwardedPrefix(ServerHttpRequest request) {     HttpHeaders headers = request.getHeaders().     String prefix = headers.getFirst("X-Forwarded-Prefix").     if (prefix != null) {         int endIndex = prefix.length().         while (endIndex > 1 && prefix.charAt(endIndex - 1) == '/') {             endIndex--.         }         prefix = (endIndex != prefix.length() ? prefix.substring(0, endIndex) : prefix).     }     return prefix. }
