commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setTaskFuture(Future<?> taskFuture) {     this.taskFuture = taskFuture. }
false;public;2;5;;public void applyBeforeConcurrentHandling(NativeWebRequest request, Callable<?> task) throws Exception {     for (CallableProcessingInterceptor interceptor : this.interceptors) {         interceptor.beforeConcurrentHandling(request, task).     } }
false;public;2;6;;public void applyPreProcess(NativeWebRequest request, Callable<?> task) throws Exception {     for (CallableProcessingInterceptor interceptor : this.interceptors) {         interceptor.preProcess(request, task).         this.preProcessIndex++.     } }
false;public;3;20;;public Object applyPostProcess(NativeWebRequest request, Callable<?> task, Object concurrentResult) {     Throwable exceptionResult = null.     for (int i = this.preProcessIndex. i >= 0. i--) {         try {             this.interceptors.get(i).postProcess(request, task, concurrentResult).         } catch (Throwable ex) {             // Save the first exception but invoke all interceptors             if (exceptionResult != null) {                 if (logger.isTraceEnabled()) {                     logger.trace("Ignoring failure in postProcess method", ex).                 }             } else {                 exceptionResult = ex.             }         }     }     return (exceptionResult != null) ? exceptionResult : concurrentResult. }
false;public;2;18;;public Object triggerAfterTimeout(NativeWebRequest request, Callable<?> task) {     cancelTask().     for (CallableProcessingInterceptor interceptor : this.interceptors) {         try {             Object result = interceptor.handleTimeout(request, task).             if (result == CallableProcessingInterceptor.RESPONSE_HANDLED) {                 break.             } else if (result != CallableProcessingInterceptor.RESULT_NONE) {                 return result.             }         } catch (Throwable ex) {             return ex.         }     }     return CallableProcessingInterceptor.RESULT_NONE. }
false;private;0;11;;private void cancelTask() {     Future<?> future = this.taskFuture.     if (future != null) {         try {             future.cancel(true).         } catch (Throwable ex) {         // Ignore         }     } }
false;public;3;18;;public Object triggerAfterError(NativeWebRequest request, Callable<?> task, Throwable throwable) {     cancelTask().     for (CallableProcessingInterceptor interceptor : this.interceptors) {         try {             Object result = interceptor.handleError(request, task, throwable).             if (result == CallableProcessingInterceptor.RESPONSE_HANDLED) {                 break.             } else if (result != CallableProcessingInterceptor.RESULT_NONE) {                 return result.             }         } catch (Throwable ex) {             return ex.         }     }     return CallableProcessingInterceptor.RESULT_NONE. }
false;public;2;12;;public void triggerAfterCompletion(NativeWebRequest request, Callable<?> task) {     for (int i = this.interceptors.size() - 1. i >= 0. i--) {         try {             this.interceptors.get(i).afterCompletion(request, task).         } catch (Throwable ex) {             if (logger.isTraceEnabled()) {                 logger.trace("Ignoring failure in afterCompletion method", ex).             }         }     } }
