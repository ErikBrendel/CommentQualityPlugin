commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public HttpMethod getMethod() {     HttpMethod method = HttpMethod.resolve(this.jettyRequest.getMethod()).     Assert.state(method != null, "Method must not be null").     return method. }
false;public;0;4;;@Override public URI getURI() {     return this.jettyRequest.getURI(). }
false;public;0;4;;@Override public Mono<Void> setComplete() {     return doCommit(this::completes). }
false;public;0;4;;@Override public DataBufferFactory bufferFactory() {     return this.bufferFactory. }
false;public;1;7;;@Override public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {     Flux<ContentChunk> chunks = Flux.from(body).map(this::toContentChunk).     ReactiveRequest.Content content = ReactiveRequest.Content.fromPublisher(chunks, getContentType()).     this.reactiveRequest = ReactiveRequest.newBuilder(this.jettyRequest).content(content).build().     return doCommit(this::completes). }
false;public;1;10;;@Override public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {     Flux<ContentChunk> chunks = Flux.from(body).flatMap(Function.identity()).doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release).map(this::toContentChunk).     ReactiveRequest.Content content = ReactiveRequest.Content.fromPublisher(chunks, getContentType()).     this.reactiveRequest = ReactiveRequest.newBuilder(this.jettyRequest).content(content).build().     return doCommit(this::completes). }
false;private;0;4;;private String getContentType() {     MediaType contentType = getHeaders().getContentType().     return contentType != null ? contentType.toString() : MediaType.APPLICATION_OCTET_STREAM_VALUE. }
false;private;0;3;;private Mono<Void> completes() {     return Mono.empty(). }
false;public;0;4;;@Override public void succeeded() {     DataBufferUtils.release(buffer). }
false;public;1;5;;@Override public void failed(Throwable x) {     DataBufferUtils.release(buffer).     throw Exceptions.propagate(x). }
false;private;1;14;;private ContentChunk toContentChunk(DataBuffer buffer) {     return new ContentChunk(buffer.asByteBuffer(), new Callback() {          @Override         public void succeeded() {             DataBufferUtils.release(buffer).         }          @Override         public void failed(Throwable x) {             DataBufferUtils.release(buffer).             throw Exceptions.propagate(x).         }     }). }
false;protected;0;6;;@Override protected void applyCookies() {     getCookies().values().stream().flatMap(Collection::stream).map(cookie -> new HttpCookie(cookie.getName(), cookie.getValue())).forEach(this.jettyRequest::cookie). }
false;protected;0;8;;@Override protected void applyHeaders() {     HttpHeaders headers = getHeaders().     headers.forEach((key, value) -> value.forEach(v -> this.jettyRequest.header(key, v))).     if (!headers.containsKey(HttpHeaders.ACCEPT)) {         this.jettyRequest.header(HttpHeaders.ACCEPT, "*/*").     } }
false;;0;6;;ReactiveRequest getReactiveRequest() {     if (this.reactiveRequest == null) {         this.reactiveRequest = ReactiveRequest.newBuilder(this.jettyRequest).build().     }     return this.reactiveRequest. }
