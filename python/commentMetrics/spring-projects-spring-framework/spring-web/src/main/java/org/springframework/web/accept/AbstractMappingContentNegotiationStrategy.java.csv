commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Whether to only use the registered mappings to look up file extensions,  * or also to use dynamic resolution (e.g. via {@link MediaTypeFactory}.  * <p>By default this is set to {@code false}.  */ ;/**  * Whether to only use the registered mappings to look up file extensions,  * or also to use dynamic resolution (e.g. via {@link MediaTypeFactory}.  * <p>By default this is set to {@code false}.  */ public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {     this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly. }
false;public;0;3;;public boolean isUseRegisteredExtensionsOnly() {     return this.useRegisteredExtensionsOnly. }
true;public;1;3;/**  * Whether to ignore requests with unknown file extension. Setting this to  * {@code false} results in {@code HttpMediaTypeNotAcceptableException}.  * <p>By default this is set to {@literal false} but is overridden in  * {@link PathExtensionContentNegotiationStrategy} to {@literal true}.  */ ;/**  * Whether to ignore requests with unknown file extension. Setting this to  * {@code false} results in {@code HttpMediaTypeNotAcceptableException}.  * <p>By default this is set to {@literal false} but is overridden in  * {@link PathExtensionContentNegotiationStrategy} to {@literal true}.  */ public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {     this.ignoreUnknownExtensions = ignoreUnknownExtensions. }
false;public;0;3;;public boolean isIgnoreUnknownExtensions() {     return this.ignoreUnknownExtensions. }
false;public;1;6;;@Override public List<MediaType> resolveMediaTypes(NativeWebRequest webRequest) throws HttpMediaTypeNotAcceptableException {     return resolveMediaTypeKey(webRequest, getMediaTypeKey(webRequest)). }
true;public;2;17;/**  * An alternative to {@link #resolveMediaTypes(NativeWebRequest)} that accepts  * an already extracted key.  * @since 3.2.16  */ ;/**  * An alternative to {@link #resolveMediaTypes(NativeWebRequest)} that accepts  * an already extracted key.  * @since 3.2.16  */ public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, @Nullable String key) throws HttpMediaTypeNotAcceptableException {     if (StringUtils.hasText(key)) {         MediaType mediaType = lookupMediaType(key).         if (mediaType != null) {             handleMatch(key, mediaType).             return Collections.singletonList(mediaType).         }         mediaType = handleNoMatch(webRequest, key).         if (mediaType != null) {             addMapping(key, mediaType).             return Collections.singletonList(mediaType).         }     }     return MEDIA_TYPE_ALL_LIST. }
true;protected,abstract;1;2;/**  * Extract a key from the request to use to look up media types.  * @return the lookup key, or {@code null} if none  */ ;/**  * Extract a key from the request to use to look up media types.  * @return the lookup key, or {@code null} if none  */ @Nullable protected abstract String getMediaTypeKey(NativeWebRequest request).
true;protected;2;2;/**  * Override to provide handling when a key is successfully resolved via  * {@link #lookupMediaType}.  */ ;/**  * Override to provide handling when a key is successfully resolved via  * {@link #lookupMediaType}.  */ protected void handleMatch(String key, MediaType mediaType) { }
true;protected;2;15;/**  * Override to provide handling when a key is not resolved via.  * {@link #lookupMediaType}. Sub-classes can take further steps to  * determine the media type(s). If a MediaType is returned from  * this method it will be added to the cache in the base class.  */ ;/**  * Override to provide handling when a key is not resolved via.  * {@link #lookupMediaType}. Sub-classes can take further steps to  * determine the media type(s). If a MediaType is returned from  * this method it will be added to the cache in the base class.  */ @Nullable protected MediaType handleNoMatch(NativeWebRequest request, String key) throws HttpMediaTypeNotAcceptableException {     if (!isUseRegisteredExtensionsOnly()) {         Optional<MediaType> mediaType = MediaTypeFactory.getMediaType("file." + key).         if (mediaType.isPresent()) {             return mediaType.get().         }     }     if (isIgnoreUnknownExtensions()) {         return null.     }     throw new HttpMediaTypeNotAcceptableException(getAllMediaTypes()). }
