# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMappingContentNegotiationStrategy -> public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1499788456;Whether to only use the registered mappings to look up file extensions,_or also to use dynamic resolution (e.g. via {@link MediaTypeFactory}._<p>By default this is set to {@code false}.;public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__	};whether,to,only,use,the,registered,mappings,to,look,up,file,extensions,or,also,to,use,dynamic,resolution,e,g,via,link,media,type,factory,p,by,default,this,is,set,to,code,false;public,void,set,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only
AbstractMappingContentNegotiationStrategy -> public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1522184059;Whether to only use the registered mappings to look up file extensions,_or also to use dynamic resolution (e.g. via {@link MediaTypeFactory}._<p>By default this is set to {@code false}.;public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__	};whether,to,only,use,the,registered,mappings,to,look,up,file,extensions,or,also,to,use,dynamic,resolution,e,g,via,link,media,type,factory,p,by,default,this,is,set,to,code,false;public,void,set,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only
AbstractMappingContentNegotiationStrategy -> public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1529361191;Whether to only use the registered mappings to look up file extensions,_or also to use dynamic resolution (e.g. via {@link MediaTypeFactory}._<p>By default this is set to {@code false}.;public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__	};whether,to,only,use,the,registered,mappings,to,look,up,file,extensions,or,also,to,use,dynamic,resolution,e,g,via,link,media,type,factory,p,by,default,this,is,set,to,code,false;public,void,set,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only
AbstractMappingContentNegotiationStrategy -> protected abstract String getMediaTypeKey(NativeWebRequest request)_;1340380546;Sub-classes must extract the key to use to look up a media type._@return the lookup key or {@code null} if the key cannot be derived;protected abstract String getMediaTypeKey(NativeWebRequest request)_;sub,classes,must,extract,the,key,to,use,to,look,up,a,media,type,return,the,lookup,key,or,code,null,if,the,key,cannot,be,derived;protected,abstract,string,get,media,type,key,native,web,request,request
AbstractMappingContentNegotiationStrategy -> protected abstract String getMediaTypeKey(NativeWebRequest request)_;1340652245;Sub-classes must extract the key to use to look up a media type._@return the lookup key or {@code null} if the key cannot be derived;protected abstract String getMediaTypeKey(NativeWebRequest request)_;sub,classes,must,extract,the,key,to,use,to,look,up,a,media,type,return,the,lookup,key,or,code,null,if,the,key,cannot,be,derived;protected,abstract,string,get,media,type,key,native,web,request,request
AbstractMappingContentNegotiationStrategy -> protected abstract String getMediaTypeKey(NativeWebRequest request)_;1356735495;Sub-classes must extract the key to use to look up a media type._@return the lookup key or {@code null} if the key cannot be derived;protected abstract String getMediaTypeKey(NativeWebRequest request)_;sub,classes,must,extract,the,key,to,use,to,look,up,a,media,type,return,the,lookup,key,or,code,null,if,the,key,cannot,be,derived;protected,abstract,string,get,media,type,key,native,web,request,request
AbstractMappingContentNegotiationStrategy -> protected abstract String getMediaTypeKey(NativeWebRequest request)_;1357119239;Sub-classes must extract the key to use to look up a media type._@return the lookup key or {@code null} if the key cannot be derived;protected abstract String getMediaTypeKey(NativeWebRequest request)_;sub,classes,must,extract,the,key,to,use,to,look,up,a,media,type,return,the,lookup,key,or,code,null,if,the,key,cannot,be,derived;protected,abstract,string,get,media,type,key,native,web,request,request
AbstractMappingContentNegotiationStrategy -> protected abstract String getMediaTypeKey(NativeWebRequest request)_;1368482696;Sub-classes must extract the key to use to look up a media type._@return the lookup key or {@code null} if the key cannot be derived;protected abstract String getMediaTypeKey(NativeWebRequest request)_;sub,classes,must,extract,the,key,to,use,to,look,up,a,media,type,return,the,lookup,key,or,code,null,if,the,key,cannot,be,derived;protected,abstract,string,get,media,type,key,native,web,request,request
AbstractMappingContentNegotiationStrategy -> protected abstract String getMediaTypeKey(NativeWebRequest request)_;1398960186;Sub-classes must extract the key to use to look up a media type._@return the lookup key or {@code null} if the key cannot be derived;protected abstract String getMediaTypeKey(NativeWebRequest request)_;sub,classes,must,extract,the,key,to,use,to,look,up,a,media,type,return,the,lookup,key,or,code,null,if,the,key,cannot,be,derived;protected,abstract,string,get,media,type,key,native,web,request,request
AbstractMappingContentNegotiationStrategy -> protected abstract String getMediaTypeKey(NativeWebRequest request)_;1443560917;Extract a key from the request to use to look up media types._@return the lookup key or {@code null}.;protected abstract String getMediaTypeKey(NativeWebRequest request)_;extract,a,key,from,the,request,to,use,to,look,up,media,types,return,the,lookup,key,or,code,null;protected,abstract,string,get,media,type,key,native,web,request,request
AbstractMappingContentNegotiationStrategy -> protected abstract String getMediaTypeKey(NativeWebRequest request)_;1446846341;Extract a key from the request to use to look up media types._@return the lookup key or {@code null}.;protected abstract String getMediaTypeKey(NativeWebRequest request)_;extract,a,key,from,the,request,to,use,to,look,up,media,types,return,the,lookup,key,or,code,null;protected,abstract,string,get,media,type,key,native,web,request,request
AbstractMappingContentNegotiationStrategy -> protected abstract String getMediaTypeKey(NativeWebRequest request)_;1464879764;Extract a key from the request to use to look up media types._@return the lookup key or {@code null}.;protected abstract String getMediaTypeKey(NativeWebRequest request)_;extract,a,key,from,the,request,to,use,to,look,up,media,types,return,the,lookup,key,or,code,null;protected,abstract,string,get,media,type,key,native,web,request,request
AbstractMappingContentNegotiationStrategy -> public AbstractMappingContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes);1496837955;Create an instance with the given map of file extensions and media types.;public AbstractMappingContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,abstract,mapping,content,negotiation,strategy,nullable,map,string,media,type,media,types,super,media,types
AbstractMappingContentNegotiationStrategy -> public AbstractMappingContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes);1499788456;Create an instance with the given map of file extensions and media types.;public AbstractMappingContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,abstract,mapping,content,negotiation,strategy,nullable,map,string,media,type,media,types,super,media,types
AbstractMappingContentNegotiationStrategy -> public AbstractMappingContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes);1522184059;Create an instance with the given map of file extensions and media types.;public AbstractMappingContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,abstract,mapping,content,negotiation,strategy,nullable,map,string,media,type,media,types,super,media,types
AbstractMappingContentNegotiationStrategy -> public AbstractMappingContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes);1529361191;Create an instance with the given map of file extensions and media types.;public AbstractMappingContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,abstract,mapping,content,negotiation,strategy,nullable,map,string,media,type,media,types,super,media,types
AbstractMappingContentNegotiationStrategy -> public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, String key) 			throws HttpMediaTypeNotAcceptableException;1446846341;An alternative to {@link #resolveMediaTypes(NativeWebRequest)} that accepts_an already extracted key._@since 3.2.16;public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, String key)_			throws HttpMediaTypeNotAcceptableException {__		if (StringUtils.hasText(key)) {_			MediaType mediaType = lookupMediaType(key)__			if (mediaType != null) {_				handleMatch(key, mediaType)__				return Collections.singletonList(mediaType)__			}_			mediaType = handleNoMatch(webRequest, key)__			if (mediaType != null) {_				addMapping(key, mediaType)__				return Collections.singletonList(mediaType)__			}_		}_		return Collections.emptyList()__	};an,alternative,to,link,resolve,media,types,native,web,request,that,accepts,an,already,extracted,key,since,3,2,16;public,list,media,type,resolve,media,type,key,native,web,request,web,request,string,key,throws,http,media,type,not,acceptable,exception,if,string,utils,has,text,key,media,type,media,type,lookup,media,type,key,if,media,type,null,handle,match,key,media,type,return,collections,singleton,list,media,type,media,type,handle,no,match,web,request,key,if,media,type,null,add,mapping,key,media,type,return,collections,singleton,list,media,type,return,collections,empty,list
AbstractMappingContentNegotiationStrategy -> public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, String key) 			throws HttpMediaTypeNotAcceptableException;1464879764;An alternative to {@link #resolveMediaTypes(NativeWebRequest)} that accepts_an already extracted key._@since 3.2.16;public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, String key)_			throws HttpMediaTypeNotAcceptableException {__		if (StringUtils.hasText(key)) {_			MediaType mediaType = lookupMediaType(key)__			if (mediaType != null) {_				handleMatch(key, mediaType)__				return Collections.singletonList(mediaType)__			}_			mediaType = handleNoMatch(webRequest, key)__			if (mediaType != null) {_				addMapping(key, mediaType)__				return Collections.singletonList(mediaType)__			}_		}_		return Collections.emptyList()__	};an,alternative,to,link,resolve,media,types,native,web,request,that,accepts,an,already,extracted,key,since,3,2,16;public,list,media,type,resolve,media,type,key,native,web,request,web,request,string,key,throws,http,media,type,not,acceptable,exception,if,string,utils,has,text,key,media,type,media,type,lookup,media,type,key,if,media,type,null,handle,match,key,media,type,return,collections,singleton,list,media,type,media,type,handle,no,match,web,request,key,if,media,type,null,add,mapping,key,media,type,return,collections,singleton,list,media,type,return,collections,empty,list
AbstractMappingContentNegotiationStrategy -> public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, String key) 			throws HttpMediaTypeNotAcceptableException;1495868221;An alternative to {@link #resolveMediaTypes(NativeWebRequest)} that accepts_an already extracted key._@since 3.2.16;public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, String key)_			throws HttpMediaTypeNotAcceptableException {__		if (StringUtils.hasText(key)) {_			MediaType mediaType = lookupMediaType(key)__			if (mediaType != null) {_				handleMatch(key, mediaType)__				return Collections.singletonList(mediaType)__			}_			mediaType = handleNoMatch(webRequest, key)__			if (mediaType != null) {_				addMapping(key, mediaType)__				return Collections.singletonList(mediaType)__			}_		}_		return Collections.emptyList()__	};an,alternative,to,link,resolve,media,types,native,web,request,that,accepts,an,already,extracted,key,since,3,2,16;public,list,media,type,resolve,media,type,key,native,web,request,web,request,string,key,throws,http,media,type,not,acceptable,exception,if,string,utils,has,text,key,media,type,media,type,lookup,media,type,key,if,media,type,null,handle,match,key,media,type,return,collections,singleton,list,media,type,media,type,handle,no,match,web,request,key,if,media,type,null,add,mapping,key,media,type,return,collections,singleton,list,media,type,return,collections,empty,list
AbstractMappingContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1499788456;Whether to ignore requests with unknown file extension. Setting this to_{@code false} results in {@code HttpMediaTypeNotAcceptableException}._<p>By default this is set to {@literal false} but is overridden in_{@link PathExtensionContentNegotiationStrategy} to {@literal true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,with,unknown,file,extension,setting,this,to,code,false,results,in,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,literal,false,but,is,overridden,in,link,path,extension,content,negotiation,strategy,to,literal,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
AbstractMappingContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1522184059;Whether to ignore requests with unknown file extension. Setting this to_{@code false} results in {@code HttpMediaTypeNotAcceptableException}._<p>By default this is set to {@literal false} but is overridden in_{@link PathExtensionContentNegotiationStrategy} to {@literal true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,with,unknown,file,extension,setting,this,to,code,false,results,in,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,literal,false,but,is,overridden,in,link,path,extension,content,negotiation,strategy,to,literal,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
AbstractMappingContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1529361191;Whether to ignore requests with unknown file extension. Setting this to_{@code false} results in {@code HttpMediaTypeNotAcceptableException}._<p>By default this is set to {@literal false} but is overridden in_{@link PathExtensionContentNegotiationStrategy} to {@literal true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,with,unknown,file,extension,setting,this,to,code,false,results,in,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,literal,false,but,is,overridden,in,link,path,extension,content,negotiation,strategy,to,literal,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
AbstractMappingContentNegotiationStrategy -> protected void handleMatch(String key, MediaType mediaType);1443560917;Override to provide handling when a key is successfully resolved via_{@link #lookupMediaType}.;protected void handleMatch(String key, MediaType mediaType) {_	};override,to,provide,handling,when,a,key,is,successfully,resolved,via,link,lookup,media,type;protected,void,handle,match,string,key,media,type,media,type
AbstractMappingContentNegotiationStrategy -> protected void handleMatch(String key, MediaType mediaType);1446846341;Override to provide handling when a key is successfully resolved via_{@link #lookupMediaType}.;protected void handleMatch(String key, MediaType mediaType) {_	};override,to,provide,handling,when,a,key,is,successfully,resolved,via,link,lookup,media,type;protected,void,handle,match,string,key,media,type,media,type
AbstractMappingContentNegotiationStrategy -> protected void handleMatch(String key, MediaType mediaType);1464879764;Override to provide handling when a key is successfully resolved via_{@link #lookupMediaType}.;protected void handleMatch(String key, MediaType mediaType) {_	};override,to,provide,handling,when,a,key,is,successfully,resolved,via,link,lookup,media,type;protected,void,handle,match,string,key,media,type,media,type
AbstractMappingContentNegotiationStrategy -> protected void handleMatch(String key, MediaType mediaType);1495868221;Override to provide handling when a key is successfully resolved via_{@link #lookupMediaType}.;protected void handleMatch(String key, MediaType mediaType) {_	};override,to,provide,handling,when,a,key,is,successfully,resolved,via,link,lookup,media,type;protected,void,handle,match,string,key,media,type,media,type
AbstractMappingContentNegotiationStrategy -> protected void handleMatch(String key, MediaType mediaType);1496259743;Override to provide handling when a key is successfully resolved via_{@link #lookupMediaType}.;protected void handleMatch(String key, MediaType mediaType) {_	};override,to,provide,handling,when,a,key,is,successfully,resolved,via,link,lookup,media,type;protected,void,handle,match,string,key,media,type,media,type
AbstractMappingContentNegotiationStrategy -> protected void handleMatch(String key, MediaType mediaType);1496837955;Override to provide handling when a key is successfully resolved via_{@link #lookupMediaType}.;protected void handleMatch(String key, MediaType mediaType) {_	};override,to,provide,handling,when,a,key,is,successfully,resolved,via,link,lookup,media,type;protected,void,handle,match,string,key,media,type,media,type
AbstractMappingContentNegotiationStrategy -> protected void handleMatch(String key, MediaType mediaType);1499788456;Override to provide handling when a key is successfully resolved via_{@link #lookupMediaType}.;protected void handleMatch(String key, MediaType mediaType) {_		if (logger.isTraceEnabled()) {_			logger.trace("Requested MediaType='" + mediaType + "' based on key='" + key + "'.")__		}_	};override,to,provide,handling,when,a,key,is,successfully,resolved,via,link,lookup,media,type;protected,void,handle,match,string,key,media,type,media,type,if,logger,is,trace,enabled,logger,trace,requested,media,type,media,type,based,on,key,key
AbstractMappingContentNegotiationStrategy -> protected void handleMatch(String key, MediaType mediaType);1522184059;Override to provide handling when a key is successfully resolved via_{@link #lookupMediaType}.;protected void handleMatch(String key, MediaType mediaType) {_		if (logger.isTraceEnabled()) {_			logger.trace("Requested MediaType='" + mediaType + "' based on key='" + key + "'.")__		}_	};override,to,provide,handling,when,a,key,is,successfully,resolved,via,link,lookup,media,type;protected,void,handle,match,string,key,media,type,media,type,if,logger,is,trace,enabled,logger,trace,requested,media,type,media,type,based,on,key,key
AbstractMappingContentNegotiationStrategy -> protected void handleMatch(String key, MediaType mediaType);1529361191;Override to provide handling when a key is successfully resolved via_{@link #lookupMediaType}.;protected void handleMatch(String key, MediaType mediaType) {_	};override,to,provide,handling,when,a,key,is,successfully,resolved,via,link,lookup,media,type;protected,void,handle,match,string,key,media,type,media,type
AbstractMappingContentNegotiationStrategy -> protected MediaType handleNoMatch(NativeWebRequest request, String key) 			throws HttpMediaTypeNotAcceptableException;1443560917;Override to provide handling when a key is not resolved via._{@link #lookupMediaType}. Sub-classes can take further steps to_determine the media type(s). If a MediaType is returned from_this method it will be added to the cache in the base class.;protected MediaType handleNoMatch(NativeWebRequest request, String key)_			throws HttpMediaTypeNotAcceptableException {__		return null__	};override,to,provide,handling,when,a,key,is,not,resolved,via,link,lookup,media,type,sub,classes,can,take,further,steps,to,determine,the,media,type,s,if,a,media,type,is,returned,from,this,method,it,will,be,added,to,the,cache,in,the,base,class;protected,media,type,handle,no,match,native,web,request,request,string,key,throws,http,media,type,not,acceptable,exception,return,null
AbstractMappingContentNegotiationStrategy -> protected MediaType handleNoMatch(NativeWebRequest request, String key) 			throws HttpMediaTypeNotAcceptableException;1446846341;Override to provide handling when a key is not resolved via._{@link #lookupMediaType}. Sub-classes can take further steps to_determine the media type(s). If a MediaType is returned from_this method it will be added to the cache in the base class.;protected MediaType handleNoMatch(NativeWebRequest request, String key)_			throws HttpMediaTypeNotAcceptableException {__		return null__	};override,to,provide,handling,when,a,key,is,not,resolved,via,link,lookup,media,type,sub,classes,can,take,further,steps,to,determine,the,media,type,s,if,a,media,type,is,returned,from,this,method,it,will,be,added,to,the,cache,in,the,base,class;protected,media,type,handle,no,match,native,web,request,request,string,key,throws,http,media,type,not,acceptable,exception,return,null
AbstractMappingContentNegotiationStrategy -> protected MediaType handleNoMatch(NativeWebRequest request, String key) 			throws HttpMediaTypeNotAcceptableException;1464879764;Override to provide handling when a key is not resolved via._{@link #lookupMediaType}. Sub-classes can take further steps to_determine the media type(s). If a MediaType is returned from_this method it will be added to the cache in the base class.;protected MediaType handleNoMatch(NativeWebRequest request, String key)_			throws HttpMediaTypeNotAcceptableException {__		return null__	};override,to,provide,handling,when,a,key,is,not,resolved,via,link,lookup,media,type,sub,classes,can,take,further,steps,to,determine,the,media,type,s,if,a,media,type,is,returned,from,this,method,it,will,be,added,to,the,cache,in,the,base,class;protected,media,type,handle,no,match,native,web,request,request,string,key,throws,http,media,type,not,acceptable,exception,return,null
AbstractMappingContentNegotiationStrategy -> @Nullable 	protected MediaType handleNoMatch(NativeWebRequest request, String key) 			throws HttpMediaTypeNotAcceptableException;1495868221;Override to provide handling when a key is not resolved via._{@link #lookupMediaType}. Sub-classes can take further steps to_determine the media type(s). If a MediaType is returned from_this method it will be added to the cache in the base class.;@Nullable_	protected MediaType handleNoMatch(NativeWebRequest request, String key)_			throws HttpMediaTypeNotAcceptableException {__		return null__	};override,to,provide,handling,when,a,key,is,not,resolved,via,link,lookup,media,type,sub,classes,can,take,further,steps,to,determine,the,media,type,s,if,a,media,type,is,returned,from,this,method,it,will,be,added,to,the,cache,in,the,base,class;nullable,protected,media,type,handle,no,match,native,web,request,request,string,key,throws,http,media,type,not,acceptable,exception,return,null
AbstractMappingContentNegotiationStrategy -> @Nullable 	protected MediaType handleNoMatch(NativeWebRequest request, String key) 			throws HttpMediaTypeNotAcceptableException;1496259743;Override to provide handling when a key is not resolved via._{@link #lookupMediaType}. Sub-classes can take further steps to_determine the media type(s). If a MediaType is returned from_this method it will be added to the cache in the base class.;@Nullable_	protected MediaType handleNoMatch(NativeWebRequest request, String key)_			throws HttpMediaTypeNotAcceptableException {__		return null__	};override,to,provide,handling,when,a,key,is,not,resolved,via,link,lookup,media,type,sub,classes,can,take,further,steps,to,determine,the,media,type,s,if,a,media,type,is,returned,from,this,method,it,will,be,added,to,the,cache,in,the,base,class;nullable,protected,media,type,handle,no,match,native,web,request,request,string,key,throws,http,media,type,not,acceptable,exception,return,null
AbstractMappingContentNegotiationStrategy -> @Nullable 	protected MediaType handleNoMatch(NativeWebRequest request, String key) 			throws HttpMediaTypeNotAcceptableException;1496837955;Override to provide handling when a key is not resolved via._{@link #lookupMediaType}. Sub-classes can take further steps to_determine the media type(s). If a MediaType is returned from_this method it will be added to the cache in the base class.;@Nullable_	protected MediaType handleNoMatch(NativeWebRequest request, String key)_			throws HttpMediaTypeNotAcceptableException {__		return null__	};override,to,provide,handling,when,a,key,is,not,resolved,via,link,lookup,media,type,sub,classes,can,take,further,steps,to,determine,the,media,type,s,if,a,media,type,is,returned,from,this,method,it,will,be,added,to,the,cache,in,the,base,class;nullable,protected,media,type,handle,no,match,native,web,request,request,string,key,throws,http,media,type,not,acceptable,exception,return,null
AbstractMappingContentNegotiationStrategy -> @Nullable 	protected MediaType handleNoMatch(NativeWebRequest request, String key) 			throws HttpMediaTypeNotAcceptableException;1499788456;Override to provide handling when a key is not resolved via._{@link #lookupMediaType}. Sub-classes can take further steps to_determine the media type(s). If a MediaType is returned from_this method it will be added to the cache in the base class.;@Nullable_	protected MediaType handleNoMatch(NativeWebRequest request, String key)_			throws HttpMediaTypeNotAcceptableException {__		if (!isUseRegisteredExtensionsOnly()) {_			Optional<MediaType> mediaType = MediaTypeFactory.getMediaType("file." + key)__			if (mediaType.isPresent()) {_				return mediaType.get()__			}_		}_		if (isIgnoreUnknownExtensions()) {_			return null__		}_		throw new HttpMediaTypeNotAcceptableException(getAllMediaTypes())__	};override,to,provide,handling,when,a,key,is,not,resolved,via,link,lookup,media,type,sub,classes,can,take,further,steps,to,determine,the,media,type,s,if,a,media,type,is,returned,from,this,method,it,will,be,added,to,the,cache,in,the,base,class;nullable,protected,media,type,handle,no,match,native,web,request,request,string,key,throws,http,media,type,not,acceptable,exception,if,is,use,registered,extensions,only,optional,media,type,media,type,media,type,factory,get,media,type,file,key,if,media,type,is,present,return,media,type,get,if,is,ignore,unknown,extensions,return,null,throw,new,http,media,type,not,acceptable,exception,get,all,media,types
AbstractMappingContentNegotiationStrategy -> @Nullable 	protected MediaType handleNoMatch(NativeWebRequest request, String key) 			throws HttpMediaTypeNotAcceptableException;1522184059;Override to provide handling when a key is not resolved via._{@link #lookupMediaType}. Sub-classes can take further steps to_determine the media type(s). If a MediaType is returned from_this method it will be added to the cache in the base class.;@Nullable_	protected MediaType handleNoMatch(NativeWebRequest request, String key)_			throws HttpMediaTypeNotAcceptableException {__		if (!isUseRegisteredExtensionsOnly()) {_			Optional<MediaType> mediaType = MediaTypeFactory.getMediaType("file." + key)__			if (mediaType.isPresent()) {_				return mediaType.get()__			}_		}_		if (isIgnoreUnknownExtensions()) {_			return null__		}_		throw new HttpMediaTypeNotAcceptableException(getAllMediaTypes())__	};override,to,provide,handling,when,a,key,is,not,resolved,via,link,lookup,media,type,sub,classes,can,take,further,steps,to,determine,the,media,type,s,if,a,media,type,is,returned,from,this,method,it,will,be,added,to,the,cache,in,the,base,class;nullable,protected,media,type,handle,no,match,native,web,request,request,string,key,throws,http,media,type,not,acceptable,exception,if,is,use,registered,extensions,only,optional,media,type,media,type,media,type,factory,get,media,type,file,key,if,media,type,is,present,return,media,type,get,if,is,ignore,unknown,extensions,return,null,throw,new,http,media,type,not,acceptable,exception,get,all,media,types
AbstractMappingContentNegotiationStrategy -> @Nullable 	protected MediaType handleNoMatch(NativeWebRequest request, String key) 			throws HttpMediaTypeNotAcceptableException;1529361191;Override to provide handling when a key is not resolved via._{@link #lookupMediaType}. Sub-classes can take further steps to_determine the media type(s). If a MediaType is returned from_this method it will be added to the cache in the base class.;@Nullable_	protected MediaType handleNoMatch(NativeWebRequest request, String key)_			throws HttpMediaTypeNotAcceptableException {__		if (!isUseRegisteredExtensionsOnly()) {_			Optional<MediaType> mediaType = MediaTypeFactory.getMediaType("file." + key)__			if (mediaType.isPresent()) {_				return mediaType.get()__			}_		}_		if (isIgnoreUnknownExtensions()) {_			return null__		}_		throw new HttpMediaTypeNotAcceptableException(getAllMediaTypes())__	};override,to,provide,handling,when,a,key,is,not,resolved,via,link,lookup,media,type,sub,classes,can,take,further,steps,to,determine,the,media,type,s,if,a,media,type,is,returned,from,this,method,it,will,be,added,to,the,cache,in,the,base,class;nullable,protected,media,type,handle,no,match,native,web,request,request,string,key,throws,http,media,type,not,acceptable,exception,if,is,use,registered,extensions,only,optional,media,type,media,type,media,type,factory,get,media,type,file,key,if,media,type,is,present,return,media,type,get,if,is,ignore,unknown,extensions,return,null,throw,new,http,media,type,not,acceptable,exception,get,all,media,types
AbstractMappingContentNegotiationStrategy -> public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1340652245;Create an instance with the given extension-to-MediaType lookup._@throws IllegalArgumentException if a media type string cannot be parsed;public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,extension,to,media,type,lookup,throws,illegal,argument,exception,if,a,media,type,string,cannot,be,parsed;public,abstract,mapping,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
AbstractMappingContentNegotiationStrategy -> public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1356735495;Create an instance with the given extension-to-MediaType lookup._@throws IllegalArgumentException if a media type string cannot be parsed;public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,extension,to,media,type,lookup,throws,illegal,argument,exception,if,a,media,type,string,cannot,be,parsed;public,abstract,mapping,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
AbstractMappingContentNegotiationStrategy -> public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1357119239;Create an instance with the given extension-to-MediaType lookup._@throws IllegalArgumentException if a media type string cannot be parsed;public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,extension,to,media,type,lookup,throws,illegal,argument,exception,if,a,media,type,string,cannot,be,parsed;public,abstract,mapping,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
AbstractMappingContentNegotiationStrategy -> public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1368482696;Create an instance with the given extension-to-MediaType lookup._@throws IllegalArgumentException if a media type string cannot be parsed;public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,extension,to,media,type,lookup,throws,illegal,argument,exception,if,a,media,type,string,cannot,be,parsed;public,abstract,mapping,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
AbstractMappingContentNegotiationStrategy -> public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1398960186;Create an instance with the given extension-to-MediaType lookup._@throws IllegalArgumentException if a media type string cannot be parsed;public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,extension,to,media,type,lookup,throws,illegal,argument,exception,if,a,media,type,string,cannot,be,parsed;public,abstract,mapping,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
AbstractMappingContentNegotiationStrategy -> public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1443560917;Create an instance with the given map of file extensions and media types.;public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,abstract,mapping,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
AbstractMappingContentNegotiationStrategy -> public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1446846341;Create an instance with the given map of file extensions and media types.;public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,abstract,mapping,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
AbstractMappingContentNegotiationStrategy -> public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1464879764;Create an instance with the given map of file extensions and media types.;public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,abstract,mapping,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
AbstractMappingContentNegotiationStrategy -> public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1495868221;Create an instance with the given map of file extensions and media types.;public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,abstract,mapping,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
AbstractMappingContentNegotiationStrategy -> public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1496259743;Create an instance with the given map of file extensions and media types.;public AbstractMappingContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,abstract,mapping,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
AbstractMappingContentNegotiationStrategy -> protected void handleMatch(String mappingKey, MediaType mediaType);1340380546;Invoked when a matching media type is found in the lookup map.;protected void handleMatch(String mappingKey, MediaType mediaType) {_	};invoked,when,a,matching,media,type,is,found,in,the,lookup,map;protected,void,handle,match,string,mapping,key,media,type,media,type
AbstractMappingContentNegotiationStrategy -> protected void handleMatch(String mappingKey, MediaType mediaType);1340652245;Invoked when a matching media type is found in the lookup map.;protected void handleMatch(String mappingKey, MediaType mediaType) {_	};invoked,when,a,matching,media,type,is,found,in,the,lookup,map;protected,void,handle,match,string,mapping,key,media,type,media,type
AbstractMappingContentNegotiationStrategy -> protected void handleMatch(String mappingKey, MediaType mediaType);1356735495;Invoked when a matching media type is found in the lookup map.;protected void handleMatch(String mappingKey, MediaType mediaType) {_	};invoked,when,a,matching,media,type,is,found,in,the,lookup,map;protected,void,handle,match,string,mapping,key,media,type,media,type
AbstractMappingContentNegotiationStrategy -> protected void handleMatch(String mappingKey, MediaType mediaType);1357119239;Invoked when a matching media type is found in the lookup map.;protected void handleMatch(String mappingKey, MediaType mediaType) {_	};invoked,when,a,matching,media,type,is,found,in,the,lookup,map;protected,void,handle,match,string,mapping,key,media,type,media,type
AbstractMappingContentNegotiationStrategy -> protected void handleMatch(String mappingKey, MediaType mediaType);1368482696;Invoked when a matching media type is found in the lookup map.;protected void handleMatch(String mappingKey, MediaType mediaType) {_	};invoked,when,a,matching,media,type,is,found,in,the,lookup,map;protected,void,handle,match,string,mapping,key,media,type,media,type
AbstractMappingContentNegotiationStrategy -> protected void handleMatch(String mappingKey, MediaType mediaType);1398960186;Invoked when a matching media type is found in the lookup map.;protected void handleMatch(String mappingKey, MediaType mediaType) {_	};invoked,when,a,matching,media,type,is,found,in,the,lookup,map;protected,void,handle,match,string,mapping,key,media,type,media,type
AbstractMappingContentNegotiationStrategy -> @Nullable 	protected abstract String getMediaTypeKey(NativeWebRequest request)_;1495868221;Extract a key from the request to use to look up media types._@return the lookup key or {@code null}.;@Nullable_	protected abstract String getMediaTypeKey(NativeWebRequest request)_;extract,a,key,from,the,request,to,use,to,look,up,media,types,return,the,lookup,key,or,code,null;nullable,protected,abstract,string,get,media,type,key,native,web,request,request
AbstractMappingContentNegotiationStrategy -> @Nullable 	protected abstract String getMediaTypeKey(NativeWebRequest request)_;1496259743;Extract a key from the request to use to look up media types._@return the lookup key or {@code null}.;@Nullable_	protected abstract String getMediaTypeKey(NativeWebRequest request)_;extract,a,key,from,the,request,to,use,to,look,up,media,types,return,the,lookup,key,or,code,null;nullable,protected,abstract,string,get,media,type,key,native,web,request,request
AbstractMappingContentNegotiationStrategy -> @Nullable 	protected abstract String getMediaTypeKey(NativeWebRequest request)_;1496837955;Extract a key from the request to use to look up media types._@return the lookup key, or {@code null} if none;@Nullable_	protected abstract String getMediaTypeKey(NativeWebRequest request)_;extract,a,key,from,the,request,to,use,to,look,up,media,types,return,the,lookup,key,or,code,null,if,none;nullable,protected,abstract,string,get,media,type,key,native,web,request,request
AbstractMappingContentNegotiationStrategy -> @Nullable 	protected abstract String getMediaTypeKey(NativeWebRequest request)_;1499788456;Extract a key from the request to use to look up media types._@return the lookup key, or {@code null} if none;@Nullable_	protected abstract String getMediaTypeKey(NativeWebRequest request)_;extract,a,key,from,the,request,to,use,to,look,up,media,types,return,the,lookup,key,or,code,null,if,none;nullable,protected,abstract,string,get,media,type,key,native,web,request,request
AbstractMappingContentNegotiationStrategy -> @Nullable 	protected abstract String getMediaTypeKey(NativeWebRequest request)_;1522184059;Extract a key from the request to use to look up media types._@return the lookup key, or {@code null} if none;@Nullable_	protected abstract String getMediaTypeKey(NativeWebRequest request)_;extract,a,key,from,the,request,to,use,to,look,up,media,types,return,the,lookup,key,or,code,null,if,none;nullable,protected,abstract,string,get,media,type,key,native,web,request,request
AbstractMappingContentNegotiationStrategy -> @Nullable 	protected abstract String getMediaTypeKey(NativeWebRequest request)_;1529361191;Extract a key from the request to use to look up media types._@return the lookup key, or {@code null} if none;@Nullable_	protected abstract String getMediaTypeKey(NativeWebRequest request)_;extract,a,key,from,the,request,to,use,to,look,up,media,types,return,the,lookup,key,or,code,null,if,none;nullable,protected,abstract,string,get,media,type,key,native,web,request,request
AbstractMappingContentNegotiationStrategy -> protected MediaType handleNoMatch(NativeWebRequest request, String mappingKey);1340380546;Invoked when no matching media type is found in the lookup map._Sub-classes can take further steps to determine the media type.;protected MediaType handleNoMatch(NativeWebRequest request, String mappingKey) {_		return null__	};invoked,when,no,matching,media,type,is,found,in,the,lookup,map,sub,classes,can,take,further,steps,to,determine,the,media,type;protected,media,type,handle,no,match,native,web,request,request,string,mapping,key,return,null
AbstractMappingContentNegotiationStrategy -> protected MediaType handleNoMatch(NativeWebRequest request, String mappingKey);1340652245;Invoked when no matching media type is found in the lookup map._Sub-classes can take further steps to determine the media type.;protected MediaType handleNoMatch(NativeWebRequest request, String mappingKey) {_		return null__	};invoked,when,no,matching,media,type,is,found,in,the,lookup,map,sub,classes,can,take,further,steps,to,determine,the,media,type;protected,media,type,handle,no,match,native,web,request,request,string,mapping,key,return,null
AbstractMappingContentNegotiationStrategy -> protected MediaType handleNoMatch(NativeWebRequest request, String mappingKey);1356735495;Invoked when no matching media type is found in the lookup map._Sub-classes can take further steps to determine the media type.;protected MediaType handleNoMatch(NativeWebRequest request, String mappingKey) {_		return null__	};invoked,when,no,matching,media,type,is,found,in,the,lookup,map,sub,classes,can,take,further,steps,to,determine,the,media,type;protected,media,type,handle,no,match,native,web,request,request,string,mapping,key,return,null
AbstractMappingContentNegotiationStrategy -> protected MediaType handleNoMatch(NativeWebRequest request, String mappingKey);1357119239;Invoked when no matching media type is found in the lookup map._Sub-classes can take further steps to determine the media type.;protected MediaType handleNoMatch(NativeWebRequest request, String mappingKey) {_		return null__	};invoked,when,no,matching,media,type,is,found,in,the,lookup,map,sub,classes,can,take,further,steps,to,determine,the,media,type;protected,media,type,handle,no,match,native,web,request,request,string,mapping,key,return,null
AbstractMappingContentNegotiationStrategy -> protected MediaType handleNoMatch(NativeWebRequest request, String mappingKey);1368482696;Invoked when no matching media type is found in the lookup map._Sub-classes can take further steps to determine the media type.;protected MediaType handleNoMatch(NativeWebRequest request, String mappingKey) {_		return null__	};invoked,when,no,matching,media,type,is,found,in,the,lookup,map,sub,classes,can,take,further,steps,to,determine,the,media,type;protected,media,type,handle,no,match,native,web,request,request,string,mapping,key,return,null
AbstractMappingContentNegotiationStrategy -> public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, @Nullable String key) 			throws HttpMediaTypeNotAcceptableException;1496837955;An alternative to {@link #resolveMediaTypes(NativeWebRequest)} that accepts_an already extracted key._@since 3.2.16;public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, @Nullable String key)_			throws HttpMediaTypeNotAcceptableException {__		if (StringUtils.hasText(key)) {_			MediaType mediaType = lookupMediaType(key)__			if (mediaType != null) {_				handleMatch(key, mediaType)__				return Collections.singletonList(mediaType)__			}_			mediaType = handleNoMatch(webRequest, key)__			if (mediaType != null) {_				addMapping(key, mediaType)__				return Collections.singletonList(mediaType)__			}_		}_		return Collections.emptyList()__	};an,alternative,to,link,resolve,media,types,native,web,request,that,accepts,an,already,extracted,key,since,3,2,16;public,list,media,type,resolve,media,type,key,native,web,request,web,request,nullable,string,key,throws,http,media,type,not,acceptable,exception,if,string,utils,has,text,key,media,type,media,type,lookup,media,type,key,if,media,type,null,handle,match,key,media,type,return,collections,singleton,list,media,type,media,type,handle,no,match,web,request,key,if,media,type,null,add,mapping,key,media,type,return,collections,singleton,list,media,type,return,collections,empty,list
AbstractMappingContentNegotiationStrategy -> public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, @Nullable String key) 			throws HttpMediaTypeNotAcceptableException;1499788456;An alternative to {@link #resolveMediaTypes(NativeWebRequest)} that accepts_an already extracted key._@since 3.2.16;public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, @Nullable String key)_			throws HttpMediaTypeNotAcceptableException {__		if (StringUtils.hasText(key)) {_			MediaType mediaType = lookupMediaType(key)__			if (mediaType != null) {_				handleMatch(key, mediaType)__				return Collections.singletonList(mediaType)__			}_			mediaType = handleNoMatch(webRequest, key)__			if (mediaType != null) {_				addMapping(key, mediaType)__				return Collections.singletonList(mediaType)__			}_		}_		return Collections.emptyList()__	};an,alternative,to,link,resolve,media,types,native,web,request,that,accepts,an,already,extracted,key,since,3,2,16;public,list,media,type,resolve,media,type,key,native,web,request,web,request,nullable,string,key,throws,http,media,type,not,acceptable,exception,if,string,utils,has,text,key,media,type,media,type,lookup,media,type,key,if,media,type,null,handle,match,key,media,type,return,collections,singleton,list,media,type,media,type,handle,no,match,web,request,key,if,media,type,null,add,mapping,key,media,type,return,collections,singleton,list,media,type,return,collections,empty,list
AbstractMappingContentNegotiationStrategy -> public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, @Nullable String key) 			throws HttpMediaTypeNotAcceptableException;1522184059;An alternative to {@link #resolveMediaTypes(NativeWebRequest)} that accepts_an already extracted key._@since 3.2.16;public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, @Nullable String key)_			throws HttpMediaTypeNotAcceptableException {__		if (StringUtils.hasText(key)) {_			MediaType mediaType = lookupMediaType(key)__			if (mediaType != null) {_				handleMatch(key, mediaType)__				return Collections.singletonList(mediaType)__			}_			mediaType = handleNoMatch(webRequest, key)__			if (mediaType != null) {_				addMapping(key, mediaType)__				return Collections.singletonList(mediaType)__			}_		}_		return MEDIA_TYPE_ALL_LIST__	};an,alternative,to,link,resolve,media,types,native,web,request,that,accepts,an,already,extracted,key,since,3,2,16;public,list,media,type,resolve,media,type,key,native,web,request,web,request,nullable,string,key,throws,http,media,type,not,acceptable,exception,if,string,utils,has,text,key,media,type,media,type,lookup,media,type,key,if,media,type,null,handle,match,key,media,type,return,collections,singleton,list,media,type,media,type,handle,no,match,web,request,key,if,media,type,null,add,mapping,key,media,type,return,collections,singleton,list,media,type,return
AbstractMappingContentNegotiationStrategy -> public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, @Nullable String key) 			throws HttpMediaTypeNotAcceptableException;1529361191;An alternative to {@link #resolveMediaTypes(NativeWebRequest)} that accepts_an already extracted key._@since 3.2.16;public List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, @Nullable String key)_			throws HttpMediaTypeNotAcceptableException {__		if (StringUtils.hasText(key)) {_			MediaType mediaType = lookupMediaType(key)__			if (mediaType != null) {_				handleMatch(key, mediaType)__				return Collections.singletonList(mediaType)__			}_			mediaType = handleNoMatch(webRequest, key)__			if (mediaType != null) {_				addMapping(key, mediaType)__				return Collections.singletonList(mediaType)__			}_		}_		return MEDIA_TYPE_ALL_LIST__	};an,alternative,to,link,resolve,media,types,native,web,request,that,accepts,an,already,extracted,key,since,3,2,16;public,list,media,type,resolve,media,type,key,native,web,request,web,request,nullable,string,key,throws,http,media,type,not,acceptable,exception,if,string,utils,has,text,key,media,type,media,type,lookup,media,type,key,if,media,type,null,handle,match,key,media,type,return,collections,singleton,list,media,type,media,type,handle,no,match,web,request,key,if,media,type,null,add,mapping,key,media,type,return,collections,singleton,list,media,type,return
