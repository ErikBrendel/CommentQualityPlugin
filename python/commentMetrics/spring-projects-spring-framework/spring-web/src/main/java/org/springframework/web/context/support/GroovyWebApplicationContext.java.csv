commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;15;/**  * Loads the bean definitions via an GroovyBeanDefinitionReader.  * @see org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader  * @see #initBeanDefinitionReader  * @see #loadBeanDefinitions  */ ;/**  * Loads the bean definitions via an GroovyBeanDefinitionReader.  * @see org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader  * @see #initBeanDefinitionReader  * @see #loadBeanDefinitions  */ @Override protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException {     // Create a new XmlBeanDefinitionReader for the given BeanFactory.     GroovyBeanDefinitionReader beanDefinitionReader = new GroovyBeanDefinitionReader(beanFactory).     // Configure the bean definition reader with this context's     // resource loading environment.     beanDefinitionReader.setEnvironment(getEnvironment()).     beanDefinitionReader.setResourceLoader(this).     // Allow a subclass to provide custom initialization of the reader,     // then proceed with actually loading the bean definitions.     initBeanDefinitionReader(beanDefinitionReader).     loadBeanDefinitions(beanDefinitionReader). }
true;protected;1;2;/**  * Initialize the bean definition reader used for loading the bean  * definitions of this context. Default implementation is empty.  * <p>Can be overridden in subclasses.  * @param beanDefinitionReader the bean definition reader used by this context  */ ;/**  * Initialize the bean definition reader used for loading the bean  * definitions of this context. Default implementation is empty.  * <p>Can be overridden in subclasses.  * @param beanDefinitionReader the bean definition reader used by this context  */ protected void initBeanDefinitionReader(GroovyBeanDefinitionReader beanDefinitionReader) { }
true;protected;1;8;/**  * Load the bean definitions with the given GroovyBeanDefinitionReader.  * <p>The lifecycle of the bean factory is handled by the refreshBeanFactory method.  * therefore this method is just supposed to load and/or register bean definitions.  * <p>Delegates to a ResourcePatternResolver for resolving location patterns  * into Resource instances.  * @throws IOException if the required Groovy script or XML file isn't found  * @see #refreshBeanFactory  * @see #getConfigLocations  * @see #getResources  * @see #getResourcePatternResolver  */ ;/**  * Load the bean definitions with the given GroovyBeanDefinitionReader.  * <p>The lifecycle of the bean factory is handled by the refreshBeanFactory method.  * therefore this method is just supposed to load and/or register bean definitions.  * <p>Delegates to a ResourcePatternResolver for resolving location patterns  * into Resource instances.  * @throws IOException if the required Groovy script or XML file isn't found  * @see #refreshBeanFactory  * @see #getConfigLocations  * @see #getResources  * @see #getResourcePatternResolver  */ protected void loadBeanDefinitions(GroovyBeanDefinitionReader reader) throws IOException {     String[] configLocations = getConfigLocations().     if (configLocations != null) {         for (String configLocation : configLocations) {             reader.loadBeanDefinitions(configLocation).         }     } }
true;protected;0;9;/**  * The default location for the root context is "/WEB-INF/applicationContext.groovy",  * and "/WEB-INF/test-servlet.groovy" for a context with the namespace "test-servlet"  * (like for a DispatcherServlet instance with the servlet-name "test").  */ ;/**  * The default location for the root context is "/WEB-INF/applicationContext.groovy",  * and "/WEB-INF/test-servlet.groovy" for a context with the namespace "test-servlet"  * (like for a DispatcherServlet instance with the servlet-name "test").  */ @Override protected String[] getDefaultConfigLocations() {     if (getNamespace() != null) {         return new String[] { DEFAULT_CONFIG_LOCATION_PREFIX + getNamespace() + DEFAULT_CONFIG_LOCATION_SUFFIX }.     } else {         return new String[] { DEFAULT_CONFIG_LOCATION }.     } }
false;public;1;3;;// Implementation of the GroovyObject interface public void setMetaClass(MetaClass metaClass) {     this.metaClass = metaClass. }
false;public;0;3;;public MetaClass getMetaClass() {     return this.metaClass. }
false;public;2;3;;public Object invokeMethod(String name, Object args) {     return this.metaClass.invokeMethod(this, name, args). }
false;public;2;3;;public void setProperty(String property, Object newValue) {     this.metaClass.setProperty(this, property, newValue). }
false;public;1;10;;@Nullable public Object getProperty(String property) {     if (containsBean(property)) {         return getBean(property).     } else if (this.contextWrapper.isReadableProperty(property)) {         return this.contextWrapper.getPropertyValue(property).     }     throw new NoSuchBeanDefinitionException(property). }
