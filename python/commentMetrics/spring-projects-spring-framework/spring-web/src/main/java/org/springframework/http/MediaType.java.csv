# id;timestamp;commentText;codeText;commentWords;codeWords
MediaType -> public String getType();1328020251;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MediaType -> public String getType();1329142650;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MediaType -> public String getType();1336761838;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MediaType -> public String getType();1339678518;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MediaType -> public String getType();1346940376;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MediaType -> public String getType();1349532116;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MediaType -> public String getType();1349535392;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MediaType -> public String getType();1356735495;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MediaType -> public String getType();1357119239;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MediaType -> public String getType();1362408075;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MediaType -> public String getType();1368482696;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MediaType -> public String getType();1374666015;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MediaType -> public String getType();1375479608;Return the primary type.;public String getType() {_		return this.type__	};return,the,primary,type;public,string,get,type,return,this,type
MediaType -> public MediaType(String type, String subtype, double qualityValue);1328020251;Create a new {@code MediaType} for the given type, subtype, and quality value.__@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1329142650;Create a new {@code MediaType} for the given type, subtype, and quality value.__@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1336761838;Create a new {@code MediaType} for the given type, subtype, and quality value.__@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1339678518;Create a new {@code MediaType} for the given type, subtype, and quality value.__@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1346940376;Create a new {@code MediaType} for the given type, subtype, and quality value.__@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1349532116;Create a new {@code MediaType} for the given type, subtype, and quality value.__@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1349535392;Create a new {@code MediaType} for the given type, subtype, and quality value.__@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1356735495;Create a new {@code MediaType} for the given type, subtype, and quality value.__@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1357119239;Create a new {@code MediaType} for the given type, subtype, and quality value.__@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1362408075;Create a new {@code MediaType} for the given type, subtype, and quality value.__@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1368482696;Create a new {@code MediaType} for the given type, subtype, and quality value.__@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1374666015;Create a new {@code MediaType} for the given type, subtype, and quality value.__@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1375479608;Create a new {@code MediaType} for the given type, subtype, and quality value.__@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1375896097;Create a new {@code MediaType} for the given type, subtype, and quality value.__@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1377201944;Create a new {@code MediaType} for the given type, subtype, and quality value.__@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1377633635;Create a new {@code MediaType} for the given type, subtype, and quality value.__@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1386541651;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1407415845;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1426880143;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1446549639;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1452801429;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1452851471;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1456785272;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1461592650;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1464161032;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1467730834;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1468513835;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1468947211;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1469219278;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1472594218;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1472602111;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1474905889;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1477386718;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1484249067;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1484252281;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1484260238;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1484835275;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1484857261;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1486401293;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1487178332;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1495868221;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1496837955;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1497341397;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1499413370;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1499413442;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1503008146;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1508532146;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1518772998;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1519945587;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1520077318;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1520094828;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1520528267;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1523268197;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1542168307;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1549373623;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1549375593;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public MediaType(String type, String subtype, double qualityValue);1549878350;Create a new {@code MediaType} for the given type, subtype, and quality value._@param type the primary type_@param subtype the subtype_@param qualityValue the quality value_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, double qualityValue) {_		this(type, subtype, Collections.singletonMap(PARAM_QUALITY_FACTOR, Double.toString(qualityValue)))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,quality,value,param,type,the,primary,type,param,subtype,the,subtype,param,quality,value,the,quality,value,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,double,quality,value,this,type,subtype,collections,singleton,map,double,to,string,quality,value
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1336761838;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Comparator<?>[] comparators = new Comparator[2]__			comparators[0] = MediaType.SPECIFICITY_COMPARATOR__			comparators[1] = MediaType.QUALITY_VALUE_COMPARATOR__			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(comparators))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,comparator,comparators,new,comparator,2,comparators,0,media,type,comparators,1,media,type,collections,sort,media,types,new,compound,comparator,media,type,comparators
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1339678518;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Comparator<?>[] comparators = new Comparator[2]__			comparators[0] = MediaType.SPECIFICITY_COMPARATOR__			comparators[1] = MediaType.QUALITY_VALUE_COMPARATOR__			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(comparators))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,comparator,comparators,new,comparator,2,comparators,0,media,type,comparators,1,media,type,collections,sort,media,types,new,compound,comparator,media,type,comparators
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1346940376;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1349532116;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1349535392;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1356735495;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1357119239;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1362408075;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1368482696;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1374666015;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1375479608;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1375896097;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1377201944;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1377633635;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1386541651;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1407415845;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1426880143;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1446549639;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1452801429;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1452851471;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1456785272;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1461592650;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1464161032;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1467730834;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1468513835;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1468947211;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1469219278;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1472594218;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1472602111;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1474905889;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1477386718;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1484249067;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1484252281;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1484260238;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1484835275;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1484857261;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1486401293;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, new CompoundComparator<>(_					MediaType.SPECIFICITY_COMPARATOR, MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,new,compound,comparator,media,type,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1487178332;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes,_					MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1495868221;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes,_					MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1496837955;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes,_					MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1497341397;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes,_					MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1499413370;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes,_					MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1499413442;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes,_					MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1503008146;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes,_					MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1508532146;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes,_					MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1518772998;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1519945587;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1520077318;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1520094828;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1520528267;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1523268197;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1542168307;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1549373623;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1549375593;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort,media,type,then,comparing,media,type
MediaType -> public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes);1549878350;Sorts the given list of {@code MediaType} objects by specificity as the_primary criteria and quality value the secondary._@see MediaType#sortBySpecificity(List)_@see MediaType#sortByQualityValue(List);public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(MediaType.SPECIFICITY_COMPARATOR.thenComparing(MediaType.QUALITY_VALUE_COMPARATOR))__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,as,the,primary,criteria,and,quality,value,the,secondary,see,media,type,sort,by,specificity,list,see,media,type,sort,by,quality,value,list;public,static,void,sort,by,specificity,and,quality,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort,media,type,then,comparing,media,type
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1495868221;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1496837955;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1497341397;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1499413370;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1499413442;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1503008146;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1508532146;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1518772998;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1519945587;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1520077318;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1520094828;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1520528267;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1523268197;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1542168307;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1549373623;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1549375593;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, @Nullable Map<String, String> parameters);1549878350;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, @Nullable Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,nullable,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public static MediaType parseMediaType(String mediaType);1328020251;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws IllegalArgumentException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		Assert.hasLength(mediaType, "'mediaType' must not be empty")__		String[] parts = StringUtils.tokenizeToStringArray(mediaType, "_")___		String fullType = parts[0].trim()__		_		if (WILDCARD_TYPE.equals(fullType)) {_			fullType = "*/*"__		}_		int subIndex = fullType.indexOf('/')__		if (subIndex == -1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain '/'")__		}_		if (subIndex == fullType.length() - 1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain subtype after '/'")__		}_		String type = fullType.substring(0, subIndex)__		String subtype = fullType.substring(subIndex + 1, fullType.length())__		if (WILDCARD_TYPE.equals(type) && !WILDCARD_TYPE.equals(subtype)) {_			throw new IllegalArgumentException("A wildcard type is legal only in '*/*' (all media types).")__		}__		Map<String, String> parameters = null__		if (parts.length > 1) {_			parameters = new LinkedHashMap<String, String>(parts.length - 1)__			for (int i = 1_ i < parts.length_ i++) {_				String parameter = parts[i]__				int eqIndex = parameter.indexOf('=')__				if (eqIndex != -1) {_					String attribute = parameter.substring(0, eqIndex)__					String value = parameter.substring(eqIndex + 1, parameter.length())__					parameters.put(attribute, value)__				}_			}_		}__		return new MediaType(type, subtype, parameters)__	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,assert,has,length,media,type,media,type,must,not,be,empty,string,parts,string,utils,tokenize,to,string,array,media,type,string,full,type,parts,0,trim,if,equals,full,type,full,type,int,sub,index,full,type,index,of,if,sub,index,1,throw,new,illegal,argument,exception,media,type,does,not,contain,if,sub,index,full,type,length,1,throw,new,illegal,argument,exception,media,type,does,not,contain,subtype,after,string,type,full,type,substring,0,sub,index,string,subtype,full,type,substring,sub,index,1,full,type,length,if,equals,type,equals,subtype,throw,new,illegal,argument,exception,a,wildcard,type,is,legal,only,in,all,media,types,map,string,string,parameters,null,if,parts,length,1,parameters,new,linked,hash,map,string,string,parts,length,1,for,int,i,1,i,parts,length,i,string,parameter,parts,i,int,eq,index,parameter,index,of,if,eq,index,1,string,attribute,parameter,substring,0,eq,index,string,value,parameter,substring,eq,index,1,parameter,length,parameters,put,attribute,value,return,new,media,type,type,subtype,parameters
MediaType -> public static MediaType parseMediaType(String mediaType);1329142650;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws IllegalArgumentException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		Assert.hasLength(mediaType, "'mediaType' must not be empty")__		String[] parts = StringUtils.tokenizeToStringArray(mediaType, "_")___		String fullType = parts[0].trim()__		_		if (WILDCARD_TYPE.equals(fullType)) {_			fullType = "*/*"__		}_		int subIndex = fullType.indexOf('/')__		if (subIndex == -1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain '/'")__		}_		if (subIndex == fullType.length() - 1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain subtype after '/'")__		}_		String type = fullType.substring(0, subIndex)__		String subtype = fullType.substring(subIndex + 1, fullType.length())__		if (WILDCARD_TYPE.equals(type) && !WILDCARD_TYPE.equals(subtype)) {_			throw new IllegalArgumentException("A wildcard type is legal only in '*/*' (all media types).")__		}__		Map<String, String> parameters = null__		if (parts.length > 1) {_			parameters = new LinkedHashMap<String, String>(parts.length - 1)__			for (int i = 1_ i < parts.length_ i++) {_				String parameter = parts[i]__				int eqIndex = parameter.indexOf('=')__				if (eqIndex != -1) {_					String attribute = parameter.substring(0, eqIndex)__					String value = parameter.substring(eqIndex + 1, parameter.length())__					parameters.put(attribute, value)__				}_			}_		}__		return new MediaType(type, subtype, parameters)__	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,assert,has,length,media,type,media,type,must,not,be,empty,string,parts,string,utils,tokenize,to,string,array,media,type,string,full,type,parts,0,trim,if,equals,full,type,full,type,int,sub,index,full,type,index,of,if,sub,index,1,throw,new,illegal,argument,exception,media,type,does,not,contain,if,sub,index,full,type,length,1,throw,new,illegal,argument,exception,media,type,does,not,contain,subtype,after,string,type,full,type,substring,0,sub,index,string,subtype,full,type,substring,sub,index,1,full,type,length,if,equals,type,equals,subtype,throw,new,illegal,argument,exception,a,wildcard,type,is,legal,only,in,all,media,types,map,string,string,parameters,null,if,parts,length,1,parameters,new,linked,hash,map,string,string,parts,length,1,for,int,i,1,i,parts,length,i,string,parameter,parts,i,int,eq,index,parameter,index,of,if,eq,index,1,string,attribute,parameter,substring,0,eq,index,string,value,parameter,substring,eq,index,1,parameter,length,parameters,put,attribute,value,return,new,media,type,type,subtype,parameters
MediaType -> public static MediaType parseMediaType(String mediaType);1336761838;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws IllegalArgumentException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		Assert.hasLength(mediaType, "'mediaType' must not be empty")__		String[] parts = StringUtils.tokenizeToStringArray(mediaType, "_")___		String fullType = parts[0].trim()__		_		if (WILDCARD_TYPE.equals(fullType)) {_			fullType = "*/*"__		}_		int subIndex = fullType.indexOf('/')__		if (subIndex == -1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain '/'")__		}_		if (subIndex == fullType.length() - 1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain subtype after '/'")__		}_		String type = fullType.substring(0, subIndex)__		String subtype = fullType.substring(subIndex + 1, fullType.length())__		if (WILDCARD_TYPE.equals(type) && !WILDCARD_TYPE.equals(subtype)) {_			throw new IllegalArgumentException("A wildcard type is legal only in '*/*' (all media types).")__		}__		Map<String, String> parameters = null__		if (parts.length > 1) {_			parameters = new LinkedHashMap<String, String>(parts.length - 1)__			for (int i = 1_ i < parts.length_ i++) {_				String parameter = parts[i]__				int eqIndex = parameter.indexOf('=')__				if (eqIndex != -1) {_					String attribute = parameter.substring(0, eqIndex)__					String value = parameter.substring(eqIndex + 1, parameter.length())__					parameters.put(attribute, value)__				}_			}_		}__		return new MediaType(type, subtype, parameters)__	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,assert,has,length,media,type,media,type,must,not,be,empty,string,parts,string,utils,tokenize,to,string,array,media,type,string,full,type,parts,0,trim,if,equals,full,type,full,type,int,sub,index,full,type,index,of,if,sub,index,1,throw,new,illegal,argument,exception,media,type,does,not,contain,if,sub,index,full,type,length,1,throw,new,illegal,argument,exception,media,type,does,not,contain,subtype,after,string,type,full,type,substring,0,sub,index,string,subtype,full,type,substring,sub,index,1,full,type,length,if,equals,type,equals,subtype,throw,new,illegal,argument,exception,a,wildcard,type,is,legal,only,in,all,media,types,map,string,string,parameters,null,if,parts,length,1,parameters,new,linked,hash,map,string,string,parts,length,1,for,int,i,1,i,parts,length,i,string,parameter,parts,i,int,eq,index,parameter,index,of,if,eq,index,1,string,attribute,parameter,substring,0,eq,index,string,value,parameter,substring,eq,index,1,parameter,length,parameters,put,attribute,value,return,new,media,type,type,subtype,parameters
MediaType -> public static MediaType parseMediaType(String mediaType);1339678518;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws IllegalArgumentException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		Assert.hasLength(mediaType, "'mediaType' must not be empty")__		String[] parts = StringUtils.tokenizeToStringArray(mediaType, "_")___		String fullType = parts[0].trim()__		_		if (WILDCARD_TYPE.equals(fullType)) {_			fullType = "*/*"__		}_		int subIndex = fullType.indexOf('/')__		if (subIndex == -1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain '/'")__		}_		if (subIndex == fullType.length() - 1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain subtype after '/'")__		}_		String type = fullType.substring(0, subIndex)__		String subtype = fullType.substring(subIndex + 1, fullType.length())__		if (WILDCARD_TYPE.equals(type) && !WILDCARD_TYPE.equals(subtype)) {_			throw new IllegalArgumentException("A wildcard type is legal only in '*/*' (all media types).")__		}__		Map<String, String> parameters = null__		if (parts.length > 1) {_			parameters = new LinkedHashMap<String, String>(parts.length - 1)__			for (int i = 1_ i < parts.length_ i++) {_				String parameter = parts[i]__				int eqIndex = parameter.indexOf('=')__				if (eqIndex != -1) {_					String attribute = parameter.substring(0, eqIndex)__					String value = parameter.substring(eqIndex + 1, parameter.length())__					parameters.put(attribute, value)__				}_			}_		}__		return new MediaType(type, subtype, parameters)__	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,assert,has,length,media,type,media,type,must,not,be,empty,string,parts,string,utils,tokenize,to,string,array,media,type,string,full,type,parts,0,trim,if,equals,full,type,full,type,int,sub,index,full,type,index,of,if,sub,index,1,throw,new,illegal,argument,exception,media,type,does,not,contain,if,sub,index,full,type,length,1,throw,new,illegal,argument,exception,media,type,does,not,contain,subtype,after,string,type,full,type,substring,0,sub,index,string,subtype,full,type,substring,sub,index,1,full,type,length,if,equals,type,equals,subtype,throw,new,illegal,argument,exception,a,wildcard,type,is,legal,only,in,all,media,types,map,string,string,parameters,null,if,parts,length,1,parameters,new,linked,hash,map,string,string,parts,length,1,for,int,i,1,i,parts,length,i,string,parameter,parts,i,int,eq,index,parameter,index,of,if,eq,index,1,string,attribute,parameter,substring,0,eq,index,string,value,parameter,substring,eq,index,1,parameter,length,parameters,put,attribute,value,return,new,media,type,type,subtype,parameters
MediaType -> public static MediaType parseMediaType(String mediaType);1346940376;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws IllegalArgumentException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		Assert.hasLength(mediaType, "'mediaType' must not be empty")__		String[] parts = StringUtils.tokenizeToStringArray(mediaType, "_")___		String fullType = parts[0].trim()__		_		if (WILDCARD_TYPE.equals(fullType)) {_			fullType = "*/*"__		}_		int subIndex = fullType.indexOf('/')__		if (subIndex == -1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain '/'")__		}_		if (subIndex == fullType.length() - 1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain subtype after '/'")__		}_		String type = fullType.substring(0, subIndex)__		String subtype = fullType.substring(subIndex + 1, fullType.length())__		if (WILDCARD_TYPE.equals(type) && !WILDCARD_TYPE.equals(subtype)) {_			throw new IllegalArgumentException("A wildcard type is legal only in '*/*' (all media types).")__		}__		Map<String, String> parameters = null__		if (parts.length > 1) {_			parameters = new LinkedHashMap<String, String>(parts.length - 1)__			for (int i = 1_ i < parts.length_ i++) {_				String parameter = parts[i]__				int eqIndex = parameter.indexOf('=')__				if (eqIndex != -1) {_					String attribute = parameter.substring(0, eqIndex)__					String value = parameter.substring(eqIndex + 1, parameter.length())__					parameters.put(attribute, value)__				}_			}_		}__		return new MediaType(type, subtype, parameters)__	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,assert,has,length,media,type,media,type,must,not,be,empty,string,parts,string,utils,tokenize,to,string,array,media,type,string,full,type,parts,0,trim,if,equals,full,type,full,type,int,sub,index,full,type,index,of,if,sub,index,1,throw,new,illegal,argument,exception,media,type,does,not,contain,if,sub,index,full,type,length,1,throw,new,illegal,argument,exception,media,type,does,not,contain,subtype,after,string,type,full,type,substring,0,sub,index,string,subtype,full,type,substring,sub,index,1,full,type,length,if,equals,type,equals,subtype,throw,new,illegal,argument,exception,a,wildcard,type,is,legal,only,in,all,media,types,map,string,string,parameters,null,if,parts,length,1,parameters,new,linked,hash,map,string,string,parts,length,1,for,int,i,1,i,parts,length,i,string,parameter,parts,i,int,eq,index,parameter,index,of,if,eq,index,1,string,attribute,parameter,substring,0,eq,index,string,value,parameter,substring,eq,index,1,parameter,length,parameters,put,attribute,value,return,new,media,type,type,subtype,parameters
MediaType -> public static MediaType parseMediaType(String mediaType);1349532116;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws IllegalArgumentException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		Assert.hasLength(mediaType, "'mediaType' must not be empty")__		String[] parts = StringUtils.tokenizeToStringArray(mediaType, "_")___		String fullType = parts[0].trim()__		_		if (WILDCARD_TYPE.equals(fullType)) {_			fullType = "*/*"__		}_		int subIndex = fullType.indexOf('/')__		if (subIndex == -1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain '/'")__		}_		if (subIndex == fullType.length() - 1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain subtype after '/'")__		}_		String type = fullType.substring(0, subIndex)__		String subtype = fullType.substring(subIndex + 1, fullType.length())__		if (WILDCARD_TYPE.equals(type) && !WILDCARD_TYPE.equals(subtype)) {_			throw new IllegalArgumentException("A wildcard type is legal only in '*/*' (all media types).")__		}__		Map<String, String> parameters = null__		if (parts.length > 1) {_			parameters = new LinkedHashMap<String, String>(parts.length - 1)__			for (int i = 1_ i < parts.length_ i++) {_				String parameter = parts[i]__				int eqIndex = parameter.indexOf('=')__				if (eqIndex != -1) {_					String attribute = parameter.substring(0, eqIndex)__					String value = parameter.substring(eqIndex + 1, parameter.length())__					parameters.put(attribute, value)__				}_			}_		}__		return new MediaType(type, subtype, parameters)__	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,assert,has,length,media,type,media,type,must,not,be,empty,string,parts,string,utils,tokenize,to,string,array,media,type,string,full,type,parts,0,trim,if,equals,full,type,full,type,int,sub,index,full,type,index,of,if,sub,index,1,throw,new,illegal,argument,exception,media,type,does,not,contain,if,sub,index,full,type,length,1,throw,new,illegal,argument,exception,media,type,does,not,contain,subtype,after,string,type,full,type,substring,0,sub,index,string,subtype,full,type,substring,sub,index,1,full,type,length,if,equals,type,equals,subtype,throw,new,illegal,argument,exception,a,wildcard,type,is,legal,only,in,all,media,types,map,string,string,parameters,null,if,parts,length,1,parameters,new,linked,hash,map,string,string,parts,length,1,for,int,i,1,i,parts,length,i,string,parameter,parts,i,int,eq,index,parameter,index,of,if,eq,index,1,string,attribute,parameter,substring,0,eq,index,string,value,parameter,substring,eq,index,1,parameter,length,parameters,put,attribute,value,return,new,media,type,type,subtype,parameters
MediaType -> public static MediaType parseMediaType(String mediaType);1349535392;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws IllegalArgumentException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		Assert.hasLength(mediaType, "'mediaType' must not be empty")__		String[] parts = StringUtils.tokenizeToStringArray(mediaType, "_")___		String fullType = parts[0].trim()__		_		if (WILDCARD_TYPE.equals(fullType)) {_			fullType = "*/*"__		}_		int subIndex = fullType.indexOf('/')__		if (subIndex == -1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain '/'")__		}_		if (subIndex == fullType.length() - 1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain subtype after '/'")__		}_		String type = fullType.substring(0, subIndex)__		String subtype = fullType.substring(subIndex + 1, fullType.length())__		if (WILDCARD_TYPE.equals(type) && !WILDCARD_TYPE.equals(subtype)) {_			throw new IllegalArgumentException("A wildcard type is legal only in '*/*' (all media types).")__		}__		Map<String, String> parameters = null__		if (parts.length > 1) {_			parameters = new LinkedHashMap<String, String>(parts.length - 1)__			for (int i = 1_ i < parts.length_ i++) {_				String parameter = parts[i]__				int eqIndex = parameter.indexOf('=')__				if (eqIndex != -1) {_					String attribute = parameter.substring(0, eqIndex)__					String value = parameter.substring(eqIndex + 1, parameter.length())__					parameters.put(attribute, value)__				}_			}_		}__		return new MediaType(type, subtype, parameters)__	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,assert,has,length,media,type,media,type,must,not,be,empty,string,parts,string,utils,tokenize,to,string,array,media,type,string,full,type,parts,0,trim,if,equals,full,type,full,type,int,sub,index,full,type,index,of,if,sub,index,1,throw,new,illegal,argument,exception,media,type,does,not,contain,if,sub,index,full,type,length,1,throw,new,illegal,argument,exception,media,type,does,not,contain,subtype,after,string,type,full,type,substring,0,sub,index,string,subtype,full,type,substring,sub,index,1,full,type,length,if,equals,type,equals,subtype,throw,new,illegal,argument,exception,a,wildcard,type,is,legal,only,in,all,media,types,map,string,string,parameters,null,if,parts,length,1,parameters,new,linked,hash,map,string,string,parts,length,1,for,int,i,1,i,parts,length,i,string,parameter,parts,i,int,eq,index,parameter,index,of,if,eq,index,1,string,attribute,parameter,substring,0,eq,index,string,value,parameter,substring,eq,index,1,parameter,length,parameters,put,attribute,value,return,new,media,type,type,subtype,parameters
MediaType -> public static MediaType parseMediaType(String mediaType);1356735495;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws IllegalArgumentException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		Assert.hasLength(mediaType, "'mediaType' must not be empty")__		String[] parts = StringUtils.tokenizeToStringArray(mediaType, "_")___		String fullType = parts[0].trim()__		_		if (WILDCARD_TYPE.equals(fullType)) {_			fullType = "*/*"__		}_		int subIndex = fullType.indexOf('/')__		if (subIndex == -1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain '/'")__		}_		if (subIndex == fullType.length() - 1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain subtype after '/'")__		}_		String type = fullType.substring(0, subIndex)__		String subtype = fullType.substring(subIndex + 1, fullType.length())__		if (WILDCARD_TYPE.equals(type) && !WILDCARD_TYPE.equals(subtype)) {_			throw new IllegalArgumentException("A wildcard type is legal only in '*/*' (all media types).")__		}__		Map<String, String> parameters = null__		if (parts.length > 1) {_			parameters = new LinkedHashMap<String, String>(parts.length - 1)__			for (int i = 1_ i < parts.length_ i++) {_				String parameter = parts[i]__				int eqIndex = parameter.indexOf('=')__				if (eqIndex != -1) {_					String attribute = parameter.substring(0, eqIndex)__					String value = parameter.substring(eqIndex + 1, parameter.length())__					parameters.put(attribute, value)__				}_			}_		}__		return new MediaType(type, subtype, parameters)__	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,assert,has,length,media,type,media,type,must,not,be,empty,string,parts,string,utils,tokenize,to,string,array,media,type,string,full,type,parts,0,trim,if,equals,full,type,full,type,int,sub,index,full,type,index,of,if,sub,index,1,throw,new,illegal,argument,exception,media,type,does,not,contain,if,sub,index,full,type,length,1,throw,new,illegal,argument,exception,media,type,does,not,contain,subtype,after,string,type,full,type,substring,0,sub,index,string,subtype,full,type,substring,sub,index,1,full,type,length,if,equals,type,equals,subtype,throw,new,illegal,argument,exception,a,wildcard,type,is,legal,only,in,all,media,types,map,string,string,parameters,null,if,parts,length,1,parameters,new,linked,hash,map,string,string,parts,length,1,for,int,i,1,i,parts,length,i,string,parameter,parts,i,int,eq,index,parameter,index,of,if,eq,index,1,string,attribute,parameter,substring,0,eq,index,string,value,parameter,substring,eq,index,1,parameter,length,parameters,put,attribute,value,return,new,media,type,type,subtype,parameters
MediaType -> public static MediaType parseMediaType(String mediaType);1357119239;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws IllegalArgumentException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		Assert.hasLength(mediaType, "'mediaType' must not be empty")__		String[] parts = StringUtils.tokenizeToStringArray(mediaType, "_")___		String fullType = parts[0].trim()__		_		if (WILDCARD_TYPE.equals(fullType)) {_			fullType = "*/*"__		}_		int subIndex = fullType.indexOf('/')__		if (subIndex == -1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain '/'")__		}_		if (subIndex == fullType.length() - 1) {_			throw new IllegalArgumentException("\"" + mediaType + "\" does not contain subtype after '/'")__		}_		String type = fullType.substring(0, subIndex)__		String subtype = fullType.substring(subIndex + 1, fullType.length())__		if (WILDCARD_TYPE.equals(type) && !WILDCARD_TYPE.equals(subtype)) {_			throw new IllegalArgumentException("A wildcard type is legal only in '*/*' (all media types).")__		}__		Map<String, String> parameters = null__		if (parts.length > 1) {_			parameters = new LinkedHashMap<String, String>(parts.length - 1)__			for (int i = 1_ i < parts.length_ i++) {_				String parameter = parts[i]__				int eqIndex = parameter.indexOf('=')__				if (eqIndex != -1) {_					String attribute = parameter.substring(0, eqIndex)__					String value = parameter.substring(eqIndex + 1, parameter.length())__					parameters.put(attribute, value)__				}_			}_		}__		return new MediaType(type, subtype, parameters)__	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,assert,has,length,media,type,media,type,must,not,be,empty,string,parts,string,utils,tokenize,to,string,array,media,type,string,full,type,parts,0,trim,if,equals,full,type,full,type,int,sub,index,full,type,index,of,if,sub,index,1,throw,new,illegal,argument,exception,media,type,does,not,contain,if,sub,index,full,type,length,1,throw,new,illegal,argument,exception,media,type,does,not,contain,subtype,after,string,type,full,type,substring,0,sub,index,string,subtype,full,type,substring,sub,index,1,full,type,length,if,equals,type,equals,subtype,throw,new,illegal,argument,exception,a,wildcard,type,is,legal,only,in,all,media,types,map,string,string,parameters,null,if,parts,length,1,parameters,new,linked,hash,map,string,string,parts,length,1,for,int,i,1,i,parts,length,i,string,parameter,parts,i,int,eq,index,parameter,index,of,if,eq,index,1,string,attribute,parameter,substring,0,eq,index,string,value,parameter,substring,eq,index,1,parameter,length,parameters,put,attribute,value,return,new,media,type,type,subtype,parameters
MediaType -> public static MediaType parseMediaType(String mediaType);1362408075;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		Assert.hasLength(mediaType, "'mediaType' must not be empty")__		String[] parts = StringUtils.tokenizeToStringArray(mediaType, "_")___		String fullType = parts[0].trim()__		_		if (WILDCARD_TYPE.equals(fullType)) {_			fullType = "*/*"__		}_		int subIndex = fullType.indexOf('/')__		if (subIndex == -1) {_			throw new InvalidMediaTypeException(mediaType, "does not contain '/'")__		}_		if (subIndex == fullType.length() - 1) {_			throw new InvalidMediaTypeException(mediaType, "does not contain subtype after '/'")__		}_		String type = fullType.substring(0, subIndex)__		String subtype = fullType.substring(subIndex + 1, fullType.length())__		if (WILDCARD_TYPE.equals(type) && !WILDCARD_TYPE.equals(subtype)) {_			throw new InvalidMediaTypeException(mediaType, "wildcard type is legal only in '*/*' (all media types)")__		}__		Map<String, String> parameters = null__		if (parts.length > 1) {_			parameters = new LinkedHashMap<String, String>(parts.length - 1)__			for (int i = 1_ i < parts.length_ i++) {_				String parameter = parts[i]__				int eqIndex = parameter.indexOf('=')__				if (eqIndex != -1) {_					String attribute = parameter.substring(0, eqIndex)__					String value = parameter.substring(eqIndex + 1, parameter.length())__					parameters.put(attribute, value)__				}_			}_		}__		try {_			return new MediaType(type, subtype, parameters)__		}_		catch (UnsupportedCharsetException ex) {_			throw new InvalidMediaTypeException(mediaType, "unsupported charset '" + ex.getCharsetName() + "'")__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,assert,has,length,media,type,media,type,must,not,be,empty,string,parts,string,utils,tokenize,to,string,array,media,type,string,full,type,parts,0,trim,if,equals,full,type,full,type,int,sub,index,full,type,index,of,if,sub,index,1,throw,new,invalid,media,type,exception,media,type,does,not,contain,if,sub,index,full,type,length,1,throw,new,invalid,media,type,exception,media,type,does,not,contain,subtype,after,string,type,full,type,substring,0,sub,index,string,subtype,full,type,substring,sub,index,1,full,type,length,if,equals,type,equals,subtype,throw,new,invalid,media,type,exception,media,type,wildcard,type,is,legal,only,in,all,media,types,map,string,string,parameters,null,if,parts,length,1,parameters,new,linked,hash,map,string,string,parts,length,1,for,int,i,1,i,parts,length,i,string,parameter,parts,i,int,eq,index,parameter,index,of,if,eq,index,1,string,attribute,parameter,substring,0,eq,index,string,value,parameter,substring,eq,index,1,parameter,length,parameters,put,attribute,value,try,return,new,media,type,type,subtype,parameters,catch,unsupported,charset,exception,ex,throw,new,invalid,media,type,exception,media,type,unsupported,charset,ex,get,charset,name,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1368482696;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		Assert.hasLength(mediaType, "'mediaType' must not be empty")__		String[] parts = StringUtils.tokenizeToStringArray(mediaType, "_")___		String fullType = parts[0].trim()__		_		if (WILDCARD_TYPE.equals(fullType)) {_			fullType = "*/*"__		}_		int subIndex = fullType.indexOf('/')__		if (subIndex == -1) {_			throw new InvalidMediaTypeException(mediaType, "does not contain '/'")__		}_		if (subIndex == fullType.length() - 1) {_			throw new InvalidMediaTypeException(mediaType, "does not contain subtype after '/'")__		}_		String type = fullType.substring(0, subIndex)__		String subtype = fullType.substring(subIndex + 1, fullType.length())__		if (WILDCARD_TYPE.equals(type) && !WILDCARD_TYPE.equals(subtype)) {_			throw new InvalidMediaTypeException(mediaType, "wildcard type is legal only in '*/*' (all media types)")__		}__		Map<String, String> parameters = null__		if (parts.length > 1) {_			parameters = new LinkedHashMap<String, String>(parts.length - 1)__			for (int i = 1_ i < parts.length_ i++) {_				String parameter = parts[i]__				int eqIndex = parameter.indexOf('=')__				if (eqIndex != -1) {_					String attribute = parameter.substring(0, eqIndex)__					String value = parameter.substring(eqIndex + 1, parameter.length())__					parameters.put(attribute, value)__				}_			}_		}__		try {_			return new MediaType(type, subtype, parameters)__		}_		catch (UnsupportedCharsetException ex) {_			throw new InvalidMediaTypeException(mediaType, "unsupported charset '" + ex.getCharsetName() + "'")__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,assert,has,length,media,type,media,type,must,not,be,empty,string,parts,string,utils,tokenize,to,string,array,media,type,string,full,type,parts,0,trim,if,equals,full,type,full,type,int,sub,index,full,type,index,of,if,sub,index,1,throw,new,invalid,media,type,exception,media,type,does,not,contain,if,sub,index,full,type,length,1,throw,new,invalid,media,type,exception,media,type,does,not,contain,subtype,after,string,type,full,type,substring,0,sub,index,string,subtype,full,type,substring,sub,index,1,full,type,length,if,equals,type,equals,subtype,throw,new,invalid,media,type,exception,media,type,wildcard,type,is,legal,only,in,all,media,types,map,string,string,parameters,null,if,parts,length,1,parameters,new,linked,hash,map,string,string,parts,length,1,for,int,i,1,i,parts,length,i,string,parameter,parts,i,int,eq,index,parameter,index,of,if,eq,index,1,string,attribute,parameter,substring,0,eq,index,string,value,parameter,substring,eq,index,1,parameter,length,parameters,put,attribute,value,try,return,new,media,type,type,subtype,parameters,catch,unsupported,charset,exception,ex,throw,new,invalid,media,type,exception,media,type,unsupported,charset,ex,get,charset,name,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1374666015;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		Assert.hasLength(mediaType, "'mediaType' must not be empty")__		String[] parts = StringUtils.tokenizeToStringArray(mediaType, "_")___		String fullType = parts[0].trim()__		_		if (WILDCARD_TYPE.equals(fullType)) {_			fullType = "*/*"__		}_		int subIndex = fullType.indexOf('/')__		if (subIndex == -1) {_			throw new InvalidMediaTypeException(mediaType, "does not contain '/'")__		}_		if (subIndex == fullType.length() - 1) {_			throw new InvalidMediaTypeException(mediaType, "does not contain subtype after '/'")__		}_		String type = fullType.substring(0, subIndex)__		String subtype = fullType.substring(subIndex + 1, fullType.length())__		if (WILDCARD_TYPE.equals(type) && !WILDCARD_TYPE.equals(subtype)) {_			throw new InvalidMediaTypeException(mediaType, "wildcard type is legal only in '*/*' (all media types)")__		}__		Map<String, String> parameters = null__		if (parts.length > 1) {_			parameters = new LinkedHashMap<String, String>(parts.length - 1)__			for (int i = 1_ i < parts.length_ i++) {_				String parameter = parts[i]__				int eqIndex = parameter.indexOf('=')__				if (eqIndex != -1) {_					String attribute = parameter.substring(0, eqIndex)__					String value = parameter.substring(eqIndex + 1, parameter.length())__					parameters.put(attribute, value)__				}_			}_		}__		try {_			return new MediaType(type, subtype, parameters)__		}_		catch (UnsupportedCharsetException ex) {_			throw new InvalidMediaTypeException(mediaType, "unsupported charset '" + ex.getCharsetName() + "'")__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,assert,has,length,media,type,media,type,must,not,be,empty,string,parts,string,utils,tokenize,to,string,array,media,type,string,full,type,parts,0,trim,if,equals,full,type,full,type,int,sub,index,full,type,index,of,if,sub,index,1,throw,new,invalid,media,type,exception,media,type,does,not,contain,if,sub,index,full,type,length,1,throw,new,invalid,media,type,exception,media,type,does,not,contain,subtype,after,string,type,full,type,substring,0,sub,index,string,subtype,full,type,substring,sub,index,1,full,type,length,if,equals,type,equals,subtype,throw,new,invalid,media,type,exception,media,type,wildcard,type,is,legal,only,in,all,media,types,map,string,string,parameters,null,if,parts,length,1,parameters,new,linked,hash,map,string,string,parts,length,1,for,int,i,1,i,parts,length,i,string,parameter,parts,i,int,eq,index,parameter,index,of,if,eq,index,1,string,attribute,parameter,substring,0,eq,index,string,value,parameter,substring,eq,index,1,parameter,length,parameters,put,attribute,value,try,return,new,media,type,type,subtype,parameters,catch,unsupported,charset,exception,ex,throw,new,invalid,media,type,exception,media,type,unsupported,charset,ex,get,charset,name,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1375479608;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		if (!StringUtils.hasLength(mediaType)) {_			throw new InvalidMediaTypeException(mediaType, "'mediaType' must not be empty")__		}_		String[] parts = StringUtils.tokenizeToStringArray(mediaType, "_")___		String fullType = parts[0].trim()__		_		if (WILDCARD_TYPE.equals(fullType)) {_			fullType = "*/*"__		}_		int subIndex = fullType.indexOf('/')__		if (subIndex == -1) {_			throw new InvalidMediaTypeException(mediaType, "does not contain '/'")__		}_		if (subIndex == fullType.length() - 1) {_			throw new InvalidMediaTypeException(mediaType, "does not contain subtype after '/'")__		}_		String type = fullType.substring(0, subIndex)__		String subtype = fullType.substring(subIndex + 1, fullType.length())__		if (WILDCARD_TYPE.equals(type) && !WILDCARD_TYPE.equals(subtype)) {_			throw new InvalidMediaTypeException(mediaType, "wildcard type is legal only in '*/*' (all media types)")__		}__		Map<String, String> parameters = null__		if (parts.length > 1) {_			parameters = new LinkedHashMap<String, String>(parts.length - 1)__			for (int i = 1_ i < parts.length_ i++) {_				String parameter = parts[i]__				int eqIndex = parameter.indexOf('=')__				if (eqIndex != -1) {_					String attribute = parameter.substring(0, eqIndex)__					String value = parameter.substring(eqIndex + 1, parameter.length())__					parameters.put(attribute, value)__				}_			}_		}__		try {_			return new MediaType(type, subtype, parameters)__		}_		catch (UnsupportedCharsetException ex) {_			throw new InvalidMediaTypeException(mediaType, "unsupported charset '" + ex.getCharsetName() + "'")__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,if,string,utils,has,length,media,type,throw,new,invalid,media,type,exception,media,type,media,type,must,not,be,empty,string,parts,string,utils,tokenize,to,string,array,media,type,string,full,type,parts,0,trim,if,equals,full,type,full,type,int,sub,index,full,type,index,of,if,sub,index,1,throw,new,invalid,media,type,exception,media,type,does,not,contain,if,sub,index,full,type,length,1,throw,new,invalid,media,type,exception,media,type,does,not,contain,subtype,after,string,type,full,type,substring,0,sub,index,string,subtype,full,type,substring,sub,index,1,full,type,length,if,equals,type,equals,subtype,throw,new,invalid,media,type,exception,media,type,wildcard,type,is,legal,only,in,all,media,types,map,string,string,parameters,null,if,parts,length,1,parameters,new,linked,hash,map,string,string,parts,length,1,for,int,i,1,i,parts,length,i,string,parameter,parts,i,int,eq,index,parameter,index,of,if,eq,index,1,string,attribute,parameter,substring,0,eq,index,string,value,parameter,substring,eq,index,1,parameter,length,parameters,put,attribute,value,try,return,new,media,type,type,subtype,parameters,catch,unsupported,charset,exception,ex,throw,new,invalid,media,type,exception,media,type,unsupported,charset,ex,get,charset,name,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1375896097;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {__		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}__		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1377201944;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {__		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}__		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1377633635;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {__		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}__		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1386541651;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1407415845;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1426880143;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1446549639;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1452801429;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1452851471;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1456785272;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1461592650;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1464161032;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1467730834;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1468513835;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1468947211;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the string cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,string,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1469219278;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1472594218;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1472602111;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1474905889;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1477386718;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1484249067;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1484252281;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1484260238;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1484835275;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1484857261;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1486401293;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1487178332;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1495868221;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1496837955;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1497341397;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1499413370;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1499413442;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1503008146;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1508532146;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1518772998;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1519945587;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1520077318;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1520094828;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1520528267;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1523268197;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1542168307;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1549373623;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1549375593;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> public static MediaType parseMediaType(String mediaType);1549878350;Parse the given String into a single {@code MediaType}._@param mediaType the string to parse_@return the media type_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static MediaType parseMediaType(String mediaType) {_		MimeType type__		try {_			type = MimeTypeUtils.parseMimeType(mediaType)__		}_		catch (InvalidMimeTypeException ex) {_			throw new InvalidMediaTypeException(ex)__		}_		try {_			return new MediaType(type.getType(), type.getSubtype(), type.getParameters())__		}_		catch (IllegalArgumentException ex) {_			throw new InvalidMediaTypeException(mediaType, ex.getMessage())__		}_	};parse,the,given,string,into,a,single,code,media,type,param,media,type,the,string,to,parse,return,the,media,type,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,media,type,parse,media,type,string,media,type,mime,type,type,try,type,mime,type,utils,parse,mime,type,media,type,catch,invalid,mime,type,exception,ex,throw,new,invalid,media,type,exception,ex,try,return,new,media,type,type,get,type,type,get,subtype,type,get,parameters,catch,illegal,argument,exception,ex,throw,new,invalid,media,type,exception,media,type,ex,get,message
MediaType -> private void checkToken(String s);1328020251;Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String s) {_		for (int i=0_ i < s.length()_ i++ ) {_			char ch = s.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + s + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,s,for,int,i,0,i,s,length,i,char,ch,s,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,s
MediaType -> private void checkToken(String s);1329142650;Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String s) {_		for (int i=0_ i < s.length()_ i++ ) {_			char ch = s.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + s + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,s,for,int,i,0,i,s,length,i,char,ch,s,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,s
MediaType -> private void checkToken(String s);1336761838;Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String s) {_		for (int i=0_ i < s.length()_ i++ ) {_			char ch = s.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + s + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,s,for,int,i,0,i,s,length,i,char,ch,s,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,s
MediaType -> private void checkToken(String s);1339678518;Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String s) {_		for (int i=0_ i < s.length()_ i++ ) {_			char ch = s.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + s + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,s,for,int,i,0,i,s,length,i,char,ch,s,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,s
MediaType -> private void checkToken(String s);1346940376;Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String s) {_		for (int i=0_ i < s.length()_ i++ ) {_			char ch = s.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + s + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,s,for,int,i,0,i,s,length,i,char,ch,s,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,s
MediaType -> private void checkToken(String s);1349532116;Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String s) {_		for (int i=0_ i < s.length()_ i++ ) {_			char ch = s.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + s + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,s,for,int,i,0,i,s,length,i,char,ch,s,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,s
MediaType -> private void checkToken(String s);1349535392;Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String s) {_		for (int i=0_ i < s.length()_ i++ ) {_			char ch = s.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + s + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,s,for,int,i,0,i,s,length,i,char,ch,s,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,s
MediaType -> private void checkToken(String s);1356735495;Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String s) {_		for (int i=0_ i < s.length()_ i++ ) {_			char ch = s.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + s + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,s,for,int,i,0,i,s,length,i,char,ch,s,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,s
MediaType -> private void checkToken(String s);1357119239;Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String s) {_		for (int i=0_ i < s.length()_ i++ ) {_			char ch = s.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + s + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,s,for,int,i,0,i,s,length,i,char,ch,s,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,s
MediaType -> public Map<String, String> getParameters();1329142650;Return all generic parameter values._@return a read-only map, possibly empty, never <code>null</code>;public Map<String, String> getParameters() {_	        return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null,code;public,map,string,string,get,parameters,return,parameters
MediaType -> public Map<String, String> getParameters();1336761838;Return all generic parameter values._@return a read-only map, possibly empty, never <code>null</code>;public Map<String, String> getParameters() {_	        return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null,code;public,map,string,string,get,parameters,return,parameters
MediaType -> public Map<String, String> getParameters();1339678518;Return all generic parameter values._@return a read-only map, possibly empty, never <code>null</code>;public Map<String, String> getParameters() {_	        return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null,code;public,map,string,string,get,parameters,return,parameters
MediaType -> public Map<String, String> getParameters();1346940376;Return all generic parameter values._@return a read-only map, possibly empty, never <code>null</code>;public Map<String, String> getParameters() {_	        return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null,code;public,map,string,string,get,parameters,return,parameters
MediaType -> public Map<String, String> getParameters();1349532116;Return all generic parameter values._@return a read-only map, possibly empty, never <code>null</code>;public Map<String, String> getParameters() {_	        return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null,code;public,map,string,string,get,parameters,return,parameters
MediaType -> public Map<String, String> getParameters();1349535392;Return all generic parameter values._@return a read-only map, possibly empty, never <code>null</code>;public Map<String, String> getParameters() {_	        return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null,code;public,map,string,string,get,parameters,return,parameters
MediaType -> public Map<String, String> getParameters();1356735495;Return all generic parameter values._@return a read-only map, possibly empty, never {@code null};public Map<String, String> getParameters() {_			return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,parameters
MediaType -> public Map<String, String> getParameters();1357119239;Return all generic parameter values._@return a read-only map, possibly empty, never {@code null};public Map<String, String> getParameters() {_			return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,parameters
MediaType -> public Map<String, String> getParameters();1362408075;Return all generic parameter values._@return a read-only map, possibly empty, never {@code null};public Map<String, String> getParameters() {_			return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,parameters
MediaType -> public Map<String, String> getParameters();1368482696;Return all generic parameter values._@return a read-only map, possibly empty, never {@code null};public Map<String, String> getParameters() {_			return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,parameters
MediaType -> public Map<String, String> getParameters();1374666015;Return all generic parameter values._@return a read-only map, possibly empty, never {@code null};public Map<String, String> getParameters() {_			return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,parameters
MediaType -> public Map<String, String> getParameters();1375479608;Return all generic parameter values._@return a read-only map, possibly empty, never {@code null};public Map<String, String> getParameters() {_			return parameters__	};return,all,generic,parameter,values,return,a,read,only,map,possibly,empty,never,code,null;public,map,string,string,get,parameters,return,parameters
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1336761838;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.put(PARAM_QUALITY_FACTOR, mediaType.parameters.get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,put,media,type,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1339678518;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.put(PARAM_QUALITY_FACTOR, mediaType.parameters.get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,put,media,type,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1346940376;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.put(PARAM_QUALITY_FACTOR, mediaType.parameters.get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,put,media,type,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1349532116;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.put(PARAM_QUALITY_FACTOR, mediaType.parameters.get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,put,media,type,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1349535392;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.put(PARAM_QUALITY_FACTOR, mediaType.parameters.get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,put,media,type,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1356735495;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.put(PARAM_QUALITY_FACTOR, mediaType.parameters.get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,put,media,type,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1357119239;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.put(PARAM_QUALITY_FACTOR, mediaType.parameters.get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,put,media,type,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1362408075;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.put(PARAM_QUALITY_FACTOR, mediaType.parameters.get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,put,media,type,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1368482696;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.put(PARAM_QUALITY_FACTOR, mediaType.parameters.get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,put,media,type,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1374666015;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.put(PARAM_QUALITY_FACTOR, mediaType.parameters.get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,put,media,type,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1375479608;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.put(PARAM_QUALITY_FACTOR, mediaType.parameters.get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,put,media,type,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1375896097;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1377201944;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1377633635;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1386541651;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1407415845;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1426880143;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1446549639;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1452801429;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1452851471;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1456785272;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1461592650;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1464161032;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1467730834;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1468513835;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1468947211;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1469219278;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1472594218;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1472602111;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1474905889;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1477386718;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1484249067;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1484252281;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1484260238;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1484835275;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1484857261;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1486401293;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1487178332;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1495868221;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1496837955;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1497341397;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1499413370;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1499413442;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1503008146;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1508532146;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1518772998;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1519945587;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1520077318;Return a replica of this instance with the quality value of the given MediaType._@return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1520094828;Return a replica of this instance with the quality value of the given {@code MediaType}._@return the same instance if the given MediaType doesn't have a quality value,_or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,code,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1520528267;Return a replica of this instance with the quality value of the given {@code MediaType}._@return the same instance if the given MediaType doesn't have a quality value,_or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,code,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1523268197;Return a replica of this instance with the quality value of the given {@code MediaType}._@return the same instance if the given MediaType doesn't have a quality value,_or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,code,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1542168307;Return a replica of this instance with the quality value of the given {@code MediaType}._@return the same instance if the given MediaType doesn't have a quality value,_or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,code,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1549373623;Return a replica of this instance with the quality value of the given {@code MediaType}._@return the same instance if the given MediaType doesn't have a quality value,_or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,code,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1549375593;Return a replica of this instance with the quality value of the given {@code MediaType}._@return the same instance if the given MediaType doesn't have a quality value,_or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,code,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType copyQualityValue(MediaType mediaType);1549878350;Return a replica of this instance with the quality value of the given {@code MediaType}._@return the same instance if the given MediaType doesn't have a quality value,_or a new one otherwise;public MediaType copyQualityValue(MediaType mediaType) {_		if (!mediaType.getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.put(PARAM_QUALITY_FACTOR, mediaType.getParameters().get(PARAM_QUALITY_FACTOR))__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,the,quality,value,of,the,given,code,media,type,return,the,same,instance,if,the,given,media,type,doesn,t,have,a,quality,value,or,a,new,one,otherwise;public,media,type,copy,quality,value,media,type,media,type,if,media,type,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,put,media,type,get,parameters,get,return,new,media,type,this,params
MediaType -> public MediaType(MediaType other, Charset charset);1456785272;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1461592650;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1464161032;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1467730834;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1468513835;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1468947211;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1469219278;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1472594218;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1472602111;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1474905889;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1477386718;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1484249067;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1484252281;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1484260238;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1484835275;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1484857261;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1486401293;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1487178332;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1495868221;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1496837955;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1497341397;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1499413370;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1499413442;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1503008146;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1508532146;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1518772998;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1519945587;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1520077318;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1520094828;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1520528267;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1523268197;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1542168307;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1549373623;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1549375593;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(MediaType other, Charset charset);1549878350;Copy-constructor that copies the type, subtype and parameters of the given_{@code MediaType}, and allows to set the specified character set._@param other the other media type_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters_@since 4.3;public MediaType(MediaType other, Charset charset) {_		super(other, charset)__	};copy,constructor,that,copies,the,type,subtype,and,parameters,of,the,given,code,media,type,and,allows,to,set,the,specified,character,set,param,other,the,other,media,type,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters,since,4,3;public,media,type,media,type,other,charset,charset,super,other,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1386541651;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1407415845;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1426880143;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1446549639;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1452801429;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1452851471;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1456785272;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1461592650;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1464161032;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1467730834;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1468513835;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1468947211;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1469219278;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1472594218;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1472602111;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1474905889;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1477386718;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1484249067;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1484252281;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1484260238;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1484835275;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1484857261;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1486401293;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1487178332;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1495868221;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1496837955;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1497341397;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1499413370;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1499413442;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1503008146;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1508532146;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1518772998;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1519945587;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1520077318;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1520094828;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1520528267;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1523268197;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1542168307;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1549373623;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1549375593;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(String type, String subtype, Charset charset);1549878350;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charset the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charset) {_		super(type, subtype, charset)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,charset,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,charset,super,type,subtype,charset
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1495868221;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1496837955;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1497341397;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1499413370;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1499413442;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1503008146;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1508532146;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1518772998;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1519945587;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1520077318;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1520094828;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1520528267;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1523268197;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1542168307;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1549373623;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1549375593;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, @Nullable Map<String, String> parameters);1549878350;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, @Nullable Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,nullable,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public boolean isConcrete();1328020251;Indicates whether this media type is concrete, i.e. whether neither the type or subtype is a wildcard_character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MediaType -> public boolean isConcrete();1329142650;Indicates whether this media type is concrete, i.e. whether neither the type or subtype is a wildcard_character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MediaType -> public boolean isConcrete();1336761838;Indicates whether this media type is concrete, i.e. whether neither the type or subtype is a wildcard_character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MediaType -> public boolean isConcrete();1339678518;Indicates whether this media type is concrete, i.e. whether neither the type or subtype is a wildcard_character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MediaType -> public boolean isConcrete();1346940376;Indicates whether this media type is concrete, i.e. whether neither the type or subtype is a wildcard_character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MediaType -> public boolean isConcrete();1349532116;Indicates whether this media type is concrete, i.e. whether neither the type or subtype is a wildcard_character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MediaType -> public boolean isConcrete();1349535392;Indicates whether this media type is concrete, i.e. whether neither the type or subtype is a wildcard_character <code>&#42_</code>._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,code,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MediaType -> public boolean isConcrete();1356735495;Indicates whether this media type is concrete, i.e. whether neither the type or subtype is a wildcard_character {@code &#42_}._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MediaType -> public boolean isConcrete();1357119239;Indicates whether this media type is concrete, i.e. whether neither the type or subtype is a wildcard_character {@code &#42_}._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MediaType -> public boolean isConcrete();1362408075;Indicates whether this media type is concrete, i.e. whether neither the type or subtype is a wildcard_character {@code &#42_}._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MediaType -> public boolean isConcrete();1368482696;Indicates whether this media type is concrete, i.e. whether neither the type or subtype is a wildcard_character {@code &#42_}._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MediaType -> public boolean isConcrete();1374666015;Indicates whether this media type is concrete, i.e. whether neither the type or subtype is a wildcard_character {@code &#42_}._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MediaType -> public boolean isConcrete();1375479608;Indicates whether this media type is concrete, i.e. whether neither the type or subtype is a wildcard_character {@code &#42_}._@return whether this media type is concrete;public boolean isConcrete() {_		return !isWildcardType() && !isWildcardSubtype()__	};indicates,whether,this,media,type,is,concrete,i,e,whether,neither,the,type,or,subtype,is,a,wildcard,character,code,42,return,whether,this,media,type,is,concrete;public,boolean,is,concrete,return,is,wildcard,type,is,wildcard,subtype
MediaType -> public static MediaType valueOf(String value);1328020251;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1329142650;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1336761838;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1339678518;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1346940376;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1349532116;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1349535392;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1356735495;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1357119239;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1362408075;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1368482696;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1374666015;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1375479608;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1375896097;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1377201944;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1377633635;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1386541651;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1407415845;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1426880143;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1446549639;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1452801429;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1452851471;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1456785272;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1461592650;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1464161032;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1467730834;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1468513835;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1468947211;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1469219278;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1472594218;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1472602111;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1474905889;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1477386718;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1484249067;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1484252281;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1484260238;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1484835275;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1484857261;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1486401293;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1487178332;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1495868221;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1496837955;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1497341397;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1499413370;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1499413442;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1503008146;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1508532146;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1518772998;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1519945587;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1520077318;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1520094828;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1520528267;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1523268197;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1542168307;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1549373623;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1549375593;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public static MediaType valueOf(String value);1549878350;Parse the given String value into a {@code MediaType} object,_with this method name following the 'valueOf' naming convention_(as supported by {@link org.springframework.core.convert.ConversionService}._@param value the string to parse_@throws InvalidMediaTypeException if the media type value cannot be parsed_@see #parseMediaType(String);public static MediaType valueOf(String value) {_		return parseMediaType(value)__	};parse,the,given,string,value,into,a,code,media,type,object,with,this,method,name,following,the,value,of,naming,convention,as,supported,by,link,org,springframework,core,convert,conversion,service,param,value,the,string,to,parse,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,see,parse,media,type,string;public,static,media,type,value,of,string,value,return,parse,media,type,value
MediaType -> public boolean isCompatibleWith(@Nullable MediaType other);1496837955;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(@Nullable MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(@Nullable MediaType other);1497341397;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(@Nullable MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(@Nullable MediaType other);1499413370;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(@Nullable MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(@Nullable MediaType other);1499413442;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(@Nullable MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(@Nullable MediaType other);1503008146;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(@Nullable MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(@Nullable MediaType other);1508532146;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(@Nullable MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(@Nullable MediaType other);1518772998;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(@Nullable MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(@Nullable MediaType other);1520077318;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(@Nullable MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(@Nullable MediaType other);1520094828;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._<p>Simply calls {@link #isCompatibleWith(MimeType)} but declared with a_{@code MediaType} parameter for binary backwards compatibility._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,p,simply,calls,link,is,compatible,with,mime,type,but,declared,with,a,code,media,type,parameter,for,binary,backwards,compatibility,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(@Nullable MediaType other);1520528267;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._<p>Simply calls {@link #isCompatibleWith(MimeType)} but declared with a_{@code MediaType} parameter for binary backwards compatibility._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,p,simply,calls,link,is,compatible,with,mime,type,but,declared,with,a,code,media,type,parameter,for,binary,backwards,compatibility,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(@Nullable MediaType other);1523268197;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._<p>Simply calls {@link #isCompatibleWith(MimeType)} but declared with a_{@code MediaType} parameter for binary backwards compatibility._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,p,simply,calls,link,is,compatible,with,mime,type,but,declared,with,a,code,media,type,parameter,for,binary,backwards,compatibility,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(@Nullable MediaType other);1542168307;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._<p>Simply calls {@link #isCompatibleWith(MimeType)} but declared with a_{@code MediaType} parameter for binary backwards compatibility._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,p,simply,calls,link,is,compatible,with,mime,type,but,declared,with,a,code,media,type,parameter,for,binary,backwards,compatibility,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(@Nullable MediaType other);1549373623;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._<p>Simply calls {@link #isCompatibleWith(MimeType)} but declared with a_{@code MediaType} parameter for binary backwards compatibility._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,p,simply,calls,link,is,compatible,with,mime,type,but,declared,with,a,code,media,type,parameter,for,binary,backwards,compatibility,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(@Nullable MediaType other);1549375593;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._<p>Simply calls {@link #isCompatibleWith(MimeType)} but declared with a_{@code MediaType} parameter for binary backwards compatibility._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,p,simply,calls,link,is,compatible,with,mime,type,but,declared,with,a,code,media,type,parameter,for,binary,backwards,compatibility,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(@Nullable MediaType other);1549878350;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain},_{@code text/html}, and vice versa. In effect, this method is similar to_{@link #includes}, except that it <b>is</b> symmetric._<p>Simply calls {@link #isCompatibleWith(MimeType)} but declared with a_{@code MediaType} parameter for binary backwards compatibility._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type__{@code false} otherwise;public boolean isCompatibleWith(@Nullable MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,except,that,it,b,is,b,symmetric,p,simply,calls,link,is,compatible,with,mime,type,but,declared,with,a,code,media,type,parameter,for,binary,backwards,compatibility,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,nullable,media,type,other,return,super,is,compatible,with,other
MediaType -> public double getQualityValue();1328020251;Return the quality value, as indicated by a <code>q</code> parameter, if any._Defaults to <code>1.0</code>._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,code,parameter,if,any,defaults,to,code,1,0,code,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1329142650;Return the quality value, as indicated by a <code>q</code> parameter, if any._Defaults to <code>1.0</code>._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,code,parameter,if,any,defaults,to,code,1,0,code,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1336761838;Return the quality value, as indicated by a <code>q</code> parameter, if any._Defaults to <code>1.0</code>._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,code,parameter,if,any,defaults,to,code,1,0,code,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1339678518;Return the quality value, as indicated by a <code>q</code> parameter, if any._Defaults to <code>1.0</code>._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,code,parameter,if,any,defaults,to,code,1,0,code,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1346940376;Return the quality value, as indicated by a <code>q</code> parameter, if any._Defaults to <code>1.0</code>._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,code,parameter,if,any,defaults,to,code,1,0,code,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1349532116;Return the quality value, as indicated by a <code>q</code> parameter, if any._Defaults to <code>1.0</code>._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,code,parameter,if,any,defaults,to,code,1,0,code,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1349535392;Return the quality value, as indicated by a <code>q</code> parameter, if any._Defaults to <code>1.0</code>._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,code,parameter,if,any,defaults,to,code,1,0,code,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1356735495;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1357119239;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1362408075;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1368482696;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1374666015;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1375479608;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1375896097;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1377201944;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1377633635;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1386541651;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1407415845;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1426880143;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1446549639;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1452801429;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1452851471;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1456785272;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1461592650;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1464161032;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1467730834;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1468513835;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1468947211;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1469219278;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1472594218;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1472602111;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1474905889;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1477386718;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1484249067;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1484252281;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1484260238;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1484835275;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1484857261;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1486401293;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1487178332;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1495868221;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1496837955;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1497341397;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1499413370;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1499413442;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1503008146;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1508532146;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1518772998;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1519945587;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1520077318;Return the quality value, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factory;public double getQualityValue() {_		String qualityFactory = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactory != null ? Double.parseDouble(unquote(qualityFactory)) : 1D)__	};return,the,quality,value,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factory;public,double,get,quality,value,string,quality,factory,get,parameter,return,quality,factory,null,double,parse,double,unquote,quality,factory,1d
MediaType -> public double getQualityValue();1520094828;Return the quality factor, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factor as double value;public double getQualityValue() {_		String qualityFactor = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactor != null ? Double.parseDouble(unquote(qualityFactor)) : 1D)__	};return,the,quality,factor,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factor,as,double,value;public,double,get,quality,value,string,quality,factor,get,parameter,return,quality,factor,null,double,parse,double,unquote,quality,factor,1d
MediaType -> public double getQualityValue();1520528267;Return the quality factor, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factor as double value;public double getQualityValue() {_		String qualityFactor = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactor != null ? Double.parseDouble(unquote(qualityFactor)) : 1D)__	};return,the,quality,factor,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factor,as,double,value;public,double,get,quality,value,string,quality,factor,get,parameter,return,quality,factor,null,double,parse,double,unquote,quality,factor,1d
MediaType -> public double getQualityValue();1523268197;Return the quality factor, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factor as double value;public double getQualityValue() {_		String qualityFactor = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactor != null ? Double.parseDouble(unquote(qualityFactor)) : 1D)__	};return,the,quality,factor,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factor,as,double,value;public,double,get,quality,value,string,quality,factor,get,parameter,return,quality,factor,null,double,parse,double,unquote,quality,factor,1d
MediaType -> public double getQualityValue();1542168307;Return the quality factor, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factor as double value;public double getQualityValue() {_		String qualityFactor = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactor != null ? Double.parseDouble(unquote(qualityFactor)) : 1D)__	};return,the,quality,factor,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factor,as,double,value;public,double,get,quality,value,string,quality,factor,get,parameter,return,quality,factor,null,double,parse,double,unquote,quality,factor,1d
MediaType -> public double getQualityValue();1549373623;Return the quality factor, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factor as double value;public double getQualityValue() {_		String qualityFactor = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactor != null ? Double.parseDouble(unquote(qualityFactor)) : 1D)__	};return,the,quality,factor,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factor,as,double,value;public,double,get,quality,value,string,quality,factor,get,parameter,return,quality,factor,null,double,parse,double,unquote,quality,factor,1d
MediaType -> public double getQualityValue();1549375593;Return the quality factor, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factor as double value;public double getQualityValue() {_		String qualityFactor = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactor != null ? Double.parseDouble(unquote(qualityFactor)) : 1D)__	};return,the,quality,factor,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factor,as,double,value;public,double,get,quality,value,string,quality,factor,get,parameter,return,quality,factor,null,double,parse,double,unquote,quality,factor,1d
MediaType -> public double getQualityValue();1549878350;Return the quality factor, as indicated by a {@code q} parameter, if any._Defaults to {@code 1.0}._@return the quality factor as double value;public double getQualityValue() {_		String qualityFactor = getParameter(PARAM_QUALITY_FACTOR)__		return (qualityFactor != null ? Double.parseDouble(unquote(qualityFactor)) : 1D)__	};return,the,quality,factor,as,indicated,by,a,code,q,parameter,if,any,defaults,to,code,1,0,return,the,quality,factor,as,double,value;public,double,get,quality,value,string,quality,factor,get,parameter,return,quality,factor,null,double,parse,double,unquote,quality,factor,1d
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1468947211;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1469219278;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1472594218;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1472602111;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1474905889;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1477386718;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1484249067;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1484252281;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1484260238;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1484835275;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1484857261;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1486401293;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1487178332;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1495868221;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1496837955;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1497341397;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1499413370;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1499413442;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1503008146;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1508532146;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1518772998;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1519945587;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1520077318;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1520094828;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1520528267;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1523268197;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1542168307;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		return mimeTypes.stream().map(MediaType::asMediaType).collect(Collectors.toList())__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,return,mime,types,stream,map,media,type,as,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1549373623;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		List<MediaType> mediaTypes = new ArrayList<>(mimeTypes.size())__		for(MimeType mimeType : mimeTypes) {_			mediaTypes.add(MediaType.asMediaType(mimeType))__		}_		return mediaTypes__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,list,media,type,media,types,new,array,list,mime,types,size,for,mime,type,mime,type,mime,types,media,types,add,media,type,as,media,type,mime,type,return,media,types
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1549375593;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		List<MediaType> mediaTypes = new ArrayList<>(mimeTypes.size())__		for(MimeType mimeType : mimeTypes) {_			mediaTypes.add(MediaType.asMediaType(mimeType))__		}_		return mediaTypes__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,list,media,type,media,types,new,array,list,mime,types,size,for,mime,type,mime,type,mime,types,media,types,add,media,type,as,media,type,mime,type,return,media,types
MediaType -> public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes);1549878350;Re-create the given mime types as media types._@since 5.0;public static List<MediaType> asMediaTypes(List<MimeType> mimeTypes) {_		List<MediaType> mediaTypes = new ArrayList<>(mimeTypes.size())__		for(MimeType mimeType : mimeTypes) {_			mediaTypes.add(MediaType.asMediaType(mimeType))__		}_		return mediaTypes__	};re,create,the,given,mime,types,as,media,types,since,5,0;public,static,list,media,type,as,media,types,list,mime,type,mime,types,list,media,type,media,types,new,array,list,mime,types,size,for,mime,type,mime,type,mime,types,media,types,add,media,type,as,media,type,mime,type,return,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1328020251;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1329142650;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1336761838;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1339678518;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1346940376;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1349532116;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1349535392;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1356735495;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1357119239;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1362408075;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1368482696;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1374666015;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1375479608;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1375896097;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1377201944;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1377633635;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1386541651;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc2616#section-14.1">HTTP 1.1, section 14.1</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc2616,section,14,1,http,1,1,section,14,1,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1407415845;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1426880143;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1446549639;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1452801429;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1452851471;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1456785272;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1461592650;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1464161032;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1467730834;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1468513835;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1468947211;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1469219278;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1472594218;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1472602111;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1474905889;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1477386718;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1484249067;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1484252281;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1484260238;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1484835275;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1484857261;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1486401293;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1487178332;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1495868221;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1496837955;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1497341397;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1499413370;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1499413442;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1503008146;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1508532146;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1518772998;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1519945587;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1520077318;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1520094828;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1520528267;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1523268197;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1542168307;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1549373623;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1549375593;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortBySpecificity(List<MediaType> mediaTypes);1549878350;Sorts the given list of {@code MediaType} objects by specificity._<p>Given two media types:_<ol>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_<p>For example:_<blockquote>audio/basic &lt_ audio/* &lt_ *&#047_*</blockquote>_<blockquote>audio/* &lt_ audio/*_q=0.7_ audio/*_q=0.3</blockquote>_<blockquote>audio/basic_level=1 &lt_ audio/basic</blockquote>_<blockquote>audio/basic == text/html</blockquote>_<blockquote>audio/basic == audio/wave</blockquote>_@param mediaTypes the list of media types to be sorted_@see <a href="http://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics_and Content, section 5.3.2</a>;public static void sortBySpecificity(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(SPECIFICITY_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,specificity,p,given,two,media,types,ol,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,p,for,example,blockquote,audio,basic,lt,audio,lt,047,blockquote,blockquote,audio,lt,audio,q,0,7,audio,q,0,3,blockquote,blockquote,audio,basic,level,1,lt,audio,basic,blockquote,blockquote,audio,basic,text,html,blockquote,blockquote,audio,basic,audio,wave,blockquote,param,media,types,the,list,of,media,types,to,be,sorted,see,a,href,http,tools,ietf,org,html,rfc7231,section,5,3,2,http,1,1,semantics,and,content,section,5,3,2,a;public,static,void,sort,by,specificity,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public boolean includes(@Nullable MediaType other);1496837955;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(@Nullable MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,media,type,other,return,super,includes,other
MediaType -> public boolean includes(@Nullable MediaType other);1497341397;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(@Nullable MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,media,type,other,return,super,includes,other
MediaType -> public boolean includes(@Nullable MediaType other);1499413370;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(@Nullable MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,media,type,other,return,super,includes,other
MediaType -> public boolean includes(@Nullable MediaType other);1499413442;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(@Nullable MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,media,type,other,return,super,includes,other
MediaType -> public boolean includes(@Nullable MediaType other);1503008146;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(@Nullable MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,media,type,other,return,super,includes,other
MediaType -> public boolean includes(@Nullable MediaType other);1508532146;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(@Nullable MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,media,type,other,return,super,includes,other
MediaType -> public boolean includes(@Nullable MediaType other);1518772998;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(@Nullable MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,media,type,other,return,super,includes,other
MediaType -> public boolean includes(@Nullable MediaType other);1520077318;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(@Nullable MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,media,type,other,return,super,includes,other
MediaType -> public boolean includes(@Nullable MediaType other);1520094828;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc._This method is <b>not</b> symmetric._<p>Simply calls {@link #includes(MimeType)} but declared with a_{@code MediaType} parameter for binary backwards compatibility._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(@Nullable MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,p,simply,calls,link,includes,mime,type,but,declared,with,a,code,media,type,parameter,for,binary,backwards,compatibility,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,media,type,other,return,super,includes,other
MediaType -> public boolean includes(@Nullable MediaType other);1520528267;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc._This method is <b>not</b> symmetric._<p>Simply calls {@link #includes(MimeType)} but declared with a_{@code MediaType} parameter for binary backwards compatibility._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(@Nullable MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,p,simply,calls,link,includes,mime,type,but,declared,with,a,code,media,type,parameter,for,binary,backwards,compatibility,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,media,type,other,return,super,includes,other
MediaType -> public boolean includes(@Nullable MediaType other);1523268197;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc._This method is <b>not</b> symmetric._<p>Simply calls {@link #includes(MimeType)} but declared with a_{@code MediaType} parameter for binary backwards compatibility._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(@Nullable MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,p,simply,calls,link,includes,mime,type,but,declared,with,a,code,media,type,parameter,for,binary,backwards,compatibility,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,media,type,other,return,super,includes,other
MediaType -> public boolean includes(@Nullable MediaType other);1542168307;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc._This method is <b>not</b> symmetric._<p>Simply calls {@link #includes(MimeType)} but declared with a_{@code MediaType} parameter for binary backwards compatibility._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(@Nullable MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,p,simply,calls,link,includes,mime,type,but,declared,with,a,code,media,type,parameter,for,binary,backwards,compatibility,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,media,type,other,return,super,includes,other
MediaType -> public boolean includes(@Nullable MediaType other);1549373623;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc._This method is <b>not</b> symmetric._<p>Simply calls {@link #includes(MimeType)} but declared with a_{@code MediaType} parameter for binary backwards compatibility._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(@Nullable MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,p,simply,calls,link,includes,mime,type,but,declared,with,a,code,media,type,parameter,for,binary,backwards,compatibility,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,media,type,other,return,super,includes,other
MediaType -> public boolean includes(@Nullable MediaType other);1549375593;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc._This method is <b>not</b> symmetric._<p>Simply calls {@link #includes(MimeType)} but declared with a_{@code MediaType} parameter for binary backwards compatibility._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(@Nullable MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,p,simply,calls,link,includes,mime,type,but,declared,with,a,code,media,type,parameter,for,binary,backwards,compatibility,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,media,type,other,return,super,includes,other
MediaType -> public boolean includes(@Nullable MediaType other);1549878350;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},_and {@code application/*+xml} includes {@code application/soap+xml}, etc._This method is <b>not</b> symmetric._<p>Simply calls {@link #includes(MimeType)} but declared with a_{@code MediaType} parameter for binary backwards compatibility._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type__{@code false} otherwise;public boolean includes(@Nullable MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,p,simply,calls,link,includes,mime,type,but,declared,with,a,code,media,type,parameter,for,binary,backwards,compatibility,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,nullable,media,type,other,return,super,includes,other
MediaType -> public String getParameter(String name);1328020251;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or <code>null</code> if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,code,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MediaType -> public String getParameter(String name);1329142650;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or <code>null</code> if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,code,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MediaType -> public String getParameter(String name);1336761838;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or <code>null</code> if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,code,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MediaType -> public String getParameter(String name);1339678518;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or <code>null</code> if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,code,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MediaType -> public String getParameter(String name);1346940376;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or <code>null</code> if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,code,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MediaType -> public String getParameter(String name);1349532116;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or <code>null</code> if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,code,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MediaType -> public String getParameter(String name);1349535392;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or <code>null</code> if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,code,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MediaType -> public String getParameter(String name);1356735495;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MediaType -> public String getParameter(String name);1357119239;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MediaType -> public String getParameter(String name);1362408075;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MediaType -> public String getParameter(String name);1368482696;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MediaType -> public String getParameter(String name);1374666015;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MediaType -> public String getParameter(String name);1375479608;Return a generic parameter value, given a parameter name._@param name the parameter name_@return the parameter value_ or {@code null} if not present;public String getParameter(String name) {_		return this.parameters.get(name)__	};return,a,generic,parameter,value,given,a,parameter,name,param,name,the,parameter,name,return,the,parameter,value,or,code,null,if,not,present;public,string,get,parameter,string,name,return,this,parameters,get,name
MediaType -> public MediaType removeQualityValue();1336761838;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!this.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,this,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1339678518;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!this.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,this,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1346940376;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!this.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,this,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1349532116;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!this.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,this,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1349535392;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!this.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,this,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1356735495;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!this.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,this,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1357119239;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!this.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,this,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1362408075;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!this.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,this,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1368482696;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!this.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,this,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1374666015;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!this.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,this,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1375479608;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!this.parameters.containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters)__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,this,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,this,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1375896097;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1377201944;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1377633635;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1386541651;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1407415845;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1426880143;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1446549639;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1452801429;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1452851471;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1456785272;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1461592650;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1464161032;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<String, String>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,string,string,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1467730834;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1468513835;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1468947211;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1469219278;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1472594218;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1472602111;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1474905889;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1477386718;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1484249067;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1484252281;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1484260238;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1484835275;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1484857261;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1486401293;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1487178332;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1495868221;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1496837955;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1497341397;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1499413370;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1499413442;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1503008146;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1508532146;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1518772998;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1519945587;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1520077318;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value, or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1520094828;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value,_or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1520528267;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value,_or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1523268197;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value,_or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1542168307;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value,_or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1549373623;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value,_or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1549375593;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value,_or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public MediaType removeQualityValue();1549878350;Return a replica of this instance with its quality value removed._@return the same instance if the media type doesn't contain a quality value,_or a new one otherwise;public MediaType removeQualityValue() {_		if (!getParameters().containsKey(PARAM_QUALITY_FACTOR)) {_			return this__		}_		Map<String, String> params = new LinkedHashMap<>(getParameters())__		params.remove(PARAM_QUALITY_FACTOR)__		return new MediaType(this, params)__	};return,a,replica,of,this,instance,with,its,quality,value,removed,return,the,same,instance,if,the,media,type,doesn,t,contain,a,quality,value,or,a,new,one,otherwise;public,media,type,remove,quality,value,if,get,parameters,contains,key,return,this,map,string,string,params,new,linked,hash,map,get,parameters,params,remove,return,new,media,type,this,params
MediaType -> public boolean isWildcardType();1328020251;Indicates whether the {@linkplain #getType() type} is the wildcard character <code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(type)__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,type
MediaType -> public boolean isWildcardType();1329142650;Indicates whether the {@linkplain #getType() type} is the wildcard character <code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(type)__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,type
MediaType -> public boolean isWildcardType();1336761838;Indicates whether the {@linkplain #getType() type} is the wildcard character <code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(type)__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,type
MediaType -> public boolean isWildcardType();1339678518;Indicates whether the {@linkplain #getType() type} is the wildcard character <code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(type)__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,type
MediaType -> public boolean isWildcardType();1346940376;Indicates whether the {@linkplain #getType() type} is the wildcard character <code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(type)__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,type
MediaType -> public boolean isWildcardType();1349532116;Indicates whether the {@linkplain #getType() type} is the wildcard character <code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(type)__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,type
MediaType -> public boolean isWildcardType();1349535392;Indicates whether the {@linkplain #getType() type} is the wildcard character <code>&#42_</code> or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(type)__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,code,or,not;public,boolean,is,wildcard,type,return,equals,type
MediaType -> public boolean isWildcardType();1356735495;Indicates whether the {@linkplain #getType() type} is the wildcard character {@code &#42_} or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(type)__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,or,not;public,boolean,is,wildcard,type,return,equals,type
MediaType -> public boolean isWildcardType();1357119239;Indicates whether the {@linkplain #getType() type} is the wildcard character {@code &#42_} or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(type)__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,or,not;public,boolean,is,wildcard,type,return,equals,type
MediaType -> public boolean isWildcardType();1362408075;Indicates whether the {@linkplain #getType() type} is the wildcard character {@code &#42_} or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(type)__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,or,not;public,boolean,is,wildcard,type,return,equals,type
MediaType -> public boolean isWildcardType();1368482696;Indicates whether the {@linkplain #getType() type} is the wildcard character {@code &#42_} or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(type)__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,or,not;public,boolean,is,wildcard,type,return,equals,type
MediaType -> public boolean isWildcardType();1374666015;Indicates whether the {@linkplain #getType() type} is the wildcard character {@code &#42_} or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(this.type)__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,or,not;public,boolean,is,wildcard,type,return,equals,this,type
MediaType -> public boolean isWildcardType();1375479608;Indicates whether the {@linkplain #getType() type} is the wildcard character {@code &#42_} or not.;public boolean isWildcardType() {_		return WILDCARD_TYPE.equals(this.type)__	};indicates,whether,the,linkplain,get,type,type,is,the,wildcard,character,code,42,or,not;public,boolean,is,wildcard,type,return,equals,this,type
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes);1496837955;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,nullable,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes);1497341397;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,nullable,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes);1499413370;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,nullable,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes);1499413442;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,nullable,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes);1503008146;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,nullable,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes);1508532146;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,nullable,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes);1518772998;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,nullable,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes);1519945587;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,nullable,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes);1520077318;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,nullable,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes);1520094828;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,nullable,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes);1520528267;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,nullable,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes);1523268197;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,nullable,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes);1542168307;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,nullable,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes);1549373623;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,nullable,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes);1549375593;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,nullable,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes);1549878350;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(@Nullable List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,nullable,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public boolean includes(MediaType other);1328020251;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return <code>true</code> if this media type includes the given media type_ <code>false</code> otherwise;public boolean includes(MediaType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype) || this.isWildcardSubtype()) {_				return true__			}_			_			int thisPlusIdx = this.subtype.indexOf('+')__			int otherPlusIdx = other.subtype.indexOf('+')__			if (thisPlusIdx != -1 && otherPlusIdx != -1) {_				String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__				String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__				String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)__				if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_					return true__				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,code,if,this,media,type,includes,the,given,media,type,code,false,code,otherwise;public,boolean,includes,media,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,this,is,wildcard,subtype,return,true,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MediaType -> public boolean includes(MediaType other);1329142650;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return <code>true</code> if this media type includes the given media type_ <code>false</code> otherwise;public boolean includes(MediaType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype) || this.isWildcardSubtype()) {_				return true__			}_			_			int thisPlusIdx = this.subtype.indexOf('+')__			int otherPlusIdx = other.subtype.indexOf('+')__			if (thisPlusIdx != -1 && otherPlusIdx != -1) {_				String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__				String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__				String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)__				if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_					return true__				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,code,if,this,media,type,includes,the,given,media,type,code,false,code,otherwise;public,boolean,includes,media,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,this,is,wildcard,subtype,return,true,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MediaType -> public boolean includes(MediaType other);1336761838;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return <code>true</code> if this media type includes the given media type_ <code>false</code> otherwise;public boolean includes(MediaType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype) || this.isWildcardSubtype()) {_				return true__			}_			_			int thisPlusIdx = this.subtype.indexOf('+')__			int otherPlusIdx = other.subtype.indexOf('+')__			if (thisPlusIdx != -1 && otherPlusIdx != -1) {_				String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__				String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__				String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)__				if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_					return true__				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,code,if,this,media,type,includes,the,given,media,type,code,false,code,otherwise;public,boolean,includes,media,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,this,is,wildcard,subtype,return,true,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MediaType -> public boolean includes(MediaType other);1339678518;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return <code>true</code> if this media type includes the given media type_ <code>false</code> otherwise;public boolean includes(MediaType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype) || this.isWildcardSubtype()) {_				return true__			}_			_			int thisPlusIdx = this.subtype.indexOf('+')__			int otherPlusIdx = other.subtype.indexOf('+')__			if (thisPlusIdx != -1 && otherPlusIdx != -1) {_				String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__				String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__				String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)__				if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_					return true__				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,code,if,this,media,type,includes,the,given,media,type,code,false,code,otherwise;public,boolean,includes,media,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,this,is,wildcard,subtype,return,true,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MediaType -> public boolean includes(MediaType other);1346940376;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return <code>true</code> if this media type includes the given media type_ <code>false</code> otherwise;public boolean includes(MediaType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype) || this.isWildcardSubtype()) {_				return true__			}_			_			int thisPlusIdx = this.subtype.indexOf('+')__			int otherPlusIdx = other.subtype.indexOf('+')__			if (thisPlusIdx != -1 && otherPlusIdx != -1) {_				String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__				String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__				String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)__				if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_					return true__				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,code,if,this,media,type,includes,the,given,media,type,code,false,code,otherwise;public,boolean,includes,media,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,this,is,wildcard,subtype,return,true,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MediaType -> public boolean includes(MediaType other);1349532116;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return <code>true</code> if this media type includes the given media type_ <code>false</code> otherwise;public boolean includes(MediaType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype) || this.isWildcardSubtype()) {_				return true__			}_			_			int thisPlusIdx = this.subtype.indexOf('+')__			int otherPlusIdx = other.subtype.indexOf('+')__			if (thisPlusIdx != -1 && otherPlusIdx != -1) {_				String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__				String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__				String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)__				if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_					return true__				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,code,if,this,media,type,includes,the,given,media,type,code,false,code,otherwise;public,boolean,includes,media,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,this,is,wildcard,subtype,return,true,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MediaType -> public boolean includes(MediaType other);1349535392;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return <code>true</code> if this media type includes the given media type_ <code>false</code> otherwise;public boolean includes(MediaType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype)) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = this.subtype.indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.subtype.indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__						String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,code,if,this,media,type,includes,the,given,media,type,code,false,code,otherwise;public,boolean,includes,media,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,this,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MediaType -> public boolean includes(MediaType other);1356735495;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype)) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = this.subtype.indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.subtype.indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__						String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,this,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MediaType -> public boolean includes(MediaType other);1357119239;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype)) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = this.subtype.indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.subtype.indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__						String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,this,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MediaType -> public boolean includes(MediaType other);1362408075;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype)) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = this.subtype.indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.subtype.indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__						String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,this,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MediaType -> public boolean includes(MediaType other);1368482696;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype)) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = this.subtype.indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.subtype.indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__						String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,this,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MediaType -> public boolean includes(MediaType other);1374666015;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype)) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = this.subtype.indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.subtype.indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__						String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,this,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MediaType -> public boolean includes(MediaType other);1375479608;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		if (other == null) {_			return false__		}_		if (this.isWildcardType()) {_			_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype)) {_				return true__			}_			if (this.isWildcardSubtype()) {_				_				int thisPlusIdx = this.subtype.indexOf('+')__				if (thisPlusIdx == -1) {_					return true__				}_				else {_					_					int otherPlusIdx = other.subtype.indexOf('+')__					if (otherPlusIdx != -1) {_						String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__						String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__						String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)__						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {_							return true__						}_					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,if,other,null,return,false,if,this,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,return,true,if,this,is,wildcard,subtype,int,this,plus,idx,this,subtype,index,of,if,this,plus,idx,1,return,true,else,int,other,plus,idx,other,subtype,index,of,if,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,return,true,return,false
MediaType -> public boolean includes(MediaType other);1377633635;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1386541651;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1407415845;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1426880143;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1446549639;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1452801429;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1452851471;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1456785272;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1461592650;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1464161032;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1467730834;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1468513835;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1468947211;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1469219278;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1472594218;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1472602111;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1474905889;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1477386718;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1484249067;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1484252281;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1484260238;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1484835275;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1484857261;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1486401293;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1487178332;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean includes(MediaType other);1495868221;Indicate whether this {@code MediaType} includes the given media type._<p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html}, and {@code application/*+xml}_includes {@code application/soap+xml}, etc. This method is <b>not</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type includes the given media type_ {@code false} otherwise;public boolean includes(MediaType other) {_		return super.includes(other)__	};indicate,whether,this,code,media,type,includes,the,given,media,type,p,for,instance,code,text,includes,code,text,plain,and,code,text,html,and,code,application,xml,includes,code,application,soap,xml,etc,this,method,is,b,not,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,includes,the,given,media,type,code,false,otherwise;public,boolean,includes,media,type,other,return,super,includes,other
MediaType -> public boolean isCompatibleWith(MediaType other);1328020251;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return <code>true</code> if this media type is compatible with the given media type_ <code>false</code> otherwise;public boolean isCompatibleWith(MediaType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype) || this.isWildcardSubtype() || other.isWildcardSubtype()) {_				return true__			}_			_			int thisPlusIdx = this.subtype.indexOf('+')__			int otherPlusIdx = other.subtype.indexOf('+')__			if (thisPlusIdx != -1 && otherPlusIdx != -1) {_				String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__				String otherSubtypeNoSuffix = other.subtype.substring(0, otherPlusIdx)___				String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__				String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)___				if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_						(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_					return true__				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,code,if,this,media,type,is,compatible,with,the,given,media,type,code,false,code,otherwise;public,boolean,is,compatible,with,media,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,this,is,wildcard,subtype,other,is,wildcard,subtype,return,true,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MediaType -> public boolean isCompatibleWith(MediaType other);1329142650;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return <code>true</code> if this media type is compatible with the given media type_ <code>false</code> otherwise;public boolean isCompatibleWith(MediaType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype) || this.isWildcardSubtype() || other.isWildcardSubtype()) {_				return true__			}_			_			int thisPlusIdx = this.subtype.indexOf('+')__			int otherPlusIdx = other.subtype.indexOf('+')__			if (thisPlusIdx != -1 && otherPlusIdx != -1) {_				String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__				String otherSubtypeNoSuffix = other.subtype.substring(0, otherPlusIdx)___				String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__				String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)___				if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_						(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_					return true__				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,code,if,this,media,type,is,compatible,with,the,given,media,type,code,false,code,otherwise;public,boolean,is,compatible,with,media,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,this,is,wildcard,subtype,other,is,wildcard,subtype,return,true,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MediaType -> public boolean isCompatibleWith(MediaType other);1336761838;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return <code>true</code> if this media type is compatible with the given media type_ <code>false</code> otherwise;public boolean isCompatibleWith(MediaType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype) || this.isWildcardSubtype() || other.isWildcardSubtype()) {_				return true__			}_			_			int thisPlusIdx = this.subtype.indexOf('+')__			int otherPlusIdx = other.subtype.indexOf('+')__			if (thisPlusIdx != -1 && otherPlusIdx != -1) {_				String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__				String otherSubtypeNoSuffix = other.subtype.substring(0, otherPlusIdx)___				String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__				String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)___				if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_						(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_					return true__				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,code,if,this,media,type,is,compatible,with,the,given,media,type,code,false,code,otherwise;public,boolean,is,compatible,with,media,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,this,is,wildcard,subtype,other,is,wildcard,subtype,return,true,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MediaType -> public boolean isCompatibleWith(MediaType other);1339678518;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return <code>true</code> if this media type is compatible with the given media type_ <code>false</code> otherwise;public boolean isCompatibleWith(MediaType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype) || this.isWildcardSubtype() || other.isWildcardSubtype()) {_				return true__			}_			_			int thisPlusIdx = this.subtype.indexOf('+')__			int otherPlusIdx = other.subtype.indexOf('+')__			if (thisPlusIdx != -1 && otherPlusIdx != -1) {_				String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__				String otherSubtypeNoSuffix = other.subtype.substring(0, otherPlusIdx)___				String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__				String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)___				if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_						(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_					return true__				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,code,if,this,media,type,is,compatible,with,the,given,media,type,code,false,code,otherwise;public,boolean,is,compatible,with,media,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,this,is,wildcard,subtype,other,is,wildcard,subtype,return,true,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MediaType -> public boolean isCompatibleWith(MediaType other);1346940376;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return <code>true</code> if this media type is compatible with the given media type_ <code>false</code> otherwise;public boolean isCompatibleWith(MediaType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype) || this.isWildcardSubtype() || other.isWildcardSubtype()) {_				return true__			}_			_			int thisPlusIdx = this.subtype.indexOf('+')__			int otherPlusIdx = other.subtype.indexOf('+')__			if (thisPlusIdx != -1 && otherPlusIdx != -1) {_				String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__				String otherSubtypeNoSuffix = other.subtype.substring(0, otherPlusIdx)___				String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__				String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)___				if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_						(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_					return true__				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,code,if,this,media,type,is,compatible,with,the,given,media,type,code,false,code,otherwise;public,boolean,is,compatible,with,media,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,this,is,wildcard,subtype,other,is,wildcard,subtype,return,true,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MediaType -> public boolean isCompatibleWith(MediaType other);1349532116;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return <code>true</code> if this media type is compatible with the given media type_ <code>false</code> otherwise;public boolean isCompatibleWith(MediaType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype) || this.isWildcardSubtype() || other.isWildcardSubtype()) {_				return true__			}_			_			int thisPlusIdx = this.subtype.indexOf('+')__			int otherPlusIdx = other.subtype.indexOf('+')__			if (thisPlusIdx != -1 && otherPlusIdx != -1) {_				String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__				String otherSubtypeNoSuffix = other.subtype.substring(0, otherPlusIdx)___				String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__				String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)___				if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_						(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_					return true__				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,code,if,this,media,type,is,compatible,with,the,given,media,type,code,false,code,otherwise;public,boolean,is,compatible,with,media,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,this,is,wildcard,subtype,other,is,wildcard,subtype,return,true,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MediaType -> public boolean isCompatibleWith(MediaType other);1349535392;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return <code>true</code> if this media type is compatible with the given media type_ <code>false</code> otherwise;public boolean isCompatibleWith(MediaType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype)) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = this.subtype.indexOf('+')__				int otherPlusIdx = other.subtype.indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.subtype.substring(0, otherPlusIdx)___					String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,code,if,this,media,type,is,compatible,with,the,given,media,type,code,false,code,otherwise;public,boolean,is,compatible,with,media,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MediaType -> public boolean isCompatibleWith(MediaType other);1356735495;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype)) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = this.subtype.indexOf('+')__				int otherPlusIdx = other.subtype.indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.subtype.substring(0, otherPlusIdx)___					String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MediaType -> public boolean isCompatibleWith(MediaType other);1357119239;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype)) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = this.subtype.indexOf('+')__				int otherPlusIdx = other.subtype.indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.subtype.substring(0, otherPlusIdx)___					String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MediaType -> public boolean isCompatibleWith(MediaType other);1362408075;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype)) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = this.subtype.indexOf('+')__				int otherPlusIdx = other.subtype.indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.subtype.substring(0, otherPlusIdx)___					String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MediaType -> public boolean isCompatibleWith(MediaType other);1368482696;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype)) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = this.subtype.indexOf('+')__				int otherPlusIdx = other.subtype.indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.subtype.substring(0, otherPlusIdx)___					String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MediaType -> public boolean isCompatibleWith(MediaType other);1374666015;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype)) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = this.subtype.indexOf('+')__				int otherPlusIdx = other.subtype.indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.subtype.substring(0, otherPlusIdx)___					String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MediaType -> public boolean isCompatibleWith(MediaType other);1375479608;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		if (other == null) {_			return false__		}_		if (isWildcardType() || other.isWildcardType()) {_			return true__		}_		else if (this.type.equals(other.type)) {_			if (this.subtype.equals(other.subtype)) {_				return true__			}_			_			if (this.isWildcardSubtype() || other.isWildcardSubtype()) {__				int thisPlusIdx = this.subtype.indexOf('+')__				int otherPlusIdx = other.subtype.indexOf('+')___				if (thisPlusIdx == -1 && otherPlusIdx == -1) {_					return true__				}_				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {_					String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx)__					String otherSubtypeNoSuffix = other.subtype.substring(0, otherPlusIdx)___					String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1)__					String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1)___					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&_							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {_						return true__					}_				}_			}_		}_		return false__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,if,other,null,return,false,if,is,wildcard,type,other,is,wildcard,type,return,true,else,if,this,type,equals,other,type,if,this,subtype,equals,other,subtype,return,true,if,this,is,wildcard,subtype,other,is,wildcard,subtype,int,this,plus,idx,this,subtype,index,of,int,other,plus,idx,other,subtype,index,of,if,this,plus,idx,1,other,plus,idx,1,return,true,else,if,this,plus,idx,1,other,plus,idx,1,string,this,subtype,no,suffix,this,subtype,substring,0,this,plus,idx,string,other,subtype,no,suffix,other,subtype,substring,0,other,plus,idx,string,this,subtype,suffix,this,subtype,substring,this,plus,idx,1,string,other,subtype,suffix,other,subtype,substring,other,plus,idx,1,if,this,subtype,suffix,equals,other,subtype,suffix,equals,this,subtype,no,suffix,equals,other,subtype,no,suffix,return,true,return,false
MediaType -> public boolean isCompatibleWith(MediaType other);1377633635;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1386541651;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1407415845;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1426880143;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1446549639;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1452801429;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1452851471;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1456785272;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1461592650;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1464161032;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1467730834;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1468513835;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1468947211;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1469219278;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1472594218;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1472602111;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1474905889;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1477386718;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1484249067;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1484252281;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1484260238;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1484835275;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1484857261;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1486401293;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1487178332;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public boolean isCompatibleWith(MediaType other);1495868221;Indicate whether this {@code MediaType} is compatible with the given media type._<p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa._In effect, this method is similar to {@link #includes(MediaType)}, except that it <b>is</b> symmetric._@param other the reference media type with which to compare_@return {@code true} if this media type is compatible with the given media type_ {@code false} otherwise;public boolean isCompatibleWith(MediaType other) {_		return super.isCompatibleWith(other)__	};indicate,whether,this,code,media,type,is,compatible,with,the,given,media,type,p,for,instance,code,text,is,compatible,with,code,text,plain,code,text,html,and,vice,versa,in,effect,this,method,is,similar,to,link,includes,media,type,except,that,it,b,is,b,symmetric,param,other,the,reference,media,type,with,which,to,compare,return,code,true,if,this,media,type,is,compatible,with,the,given,media,type,code,false,otherwise;public,boolean,is,compatible,with,media,type,other,return,super,is,compatible,with,other
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1328020251;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be <code>null</code>_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,code,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1329142650;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be <code>null</code>_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,code,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1336761838;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be <code>null</code>_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,code,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1339678518;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be <code>null</code>_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,code,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1346940376;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be <code>null</code>_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,code,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1349532116;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be <code>null</code>_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,code,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1349535392;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be <code>null</code>_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,code,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1356735495;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1357119239;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1362408075;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1368482696;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1374666015;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1375479608;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		this(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,this,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1375896097;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1377201944;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1377633635;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1386541651;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1407415845;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1426880143;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1446549639;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1452801429;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1452851471;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1456785272;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1461592650;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1464161032;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1467730834;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1468513835;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1468947211;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1469219278;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1472594218;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1472602111;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1474905889;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1477386718;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1484249067;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1484252281;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1484260238;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1484835275;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1484857261;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1486401293;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public MediaType(MediaType other, Map<String, String> parameters);1487178332;Copy-constructor that copies the type and subtype of the given {@code MediaType},_and allows for different parameter._@param other the other media type_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(MediaType other, Map<String, String> parameters) {_		super(other.getType(), other.getSubtype(), parameters)__	};copy,constructor,that,copies,the,type,and,subtype,of,the,given,code,media,type,and,allows,for,different,parameter,param,other,the,other,media,type,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,media,type,other,map,string,string,parameters,super,other,get,type,other,get,subtype,parameters
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1328020251;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1329142650;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1336761838;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1339678518;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1346940376;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1349532116;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1349535392;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1356735495;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1357119239;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1362408075;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1368482696;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1374666015;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1375479608;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1375896097;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1377201944;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1377633635;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1386541651;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1407415845;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1426880143;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1446549639;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1452801429;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1452851471;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1456785272;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1461592650;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1464161032;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1467730834;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1468513835;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1468947211;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1469219278;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1472594218;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1472602111;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1474905889;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1477386718;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1484249067;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1484252281;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1484260238;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1484835275;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1484857261;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1486401293;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1487178332;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1495868221;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1496837955;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1497341397;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1499413370;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1499413442;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1503008146;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1508532146;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			Collections.sort(mediaTypes, QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,collections,sort,media,types
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1518772998;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1519945587;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1520077318;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1520094828;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1520528267;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1523268197;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1542168307;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1549373623;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1549375593;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static void sortByQualityValue(List<MediaType> mediaTypes);1549878350;Sorts the given list of {@code MediaType} objects by quality value._<p>Given two media types:_<ol>_<li>if the two media types have different {@linkplain #getQualityValue() quality value}, then the media type_with the highest quality value is ordered before the other.</li>_<li>if either media type has a {@linkplain #isWildcardType() wildcard type}, then the media type without the_wildcard is ordered before the other.</li>_<li>if the two media types have different {@linkplain #getType() types}, then they are considered equal and_remain their current order.</li>_<li>if either media type has a {@linkplain #isWildcardSubtype() wildcard subtype}, then the media type without_the wildcard is sorted before the other.</li>_<li>if the two media types have different {@linkplain #getSubtype() subtypes}, then they are considered equal_and remain their current order.</li>_<li>if the two media types have a different amount of {@linkplain #getParameter(String) parameters}, then the_media type with the most parameters is ordered before the other.</li>_</ol>_@param mediaTypes the list of media types to be sorted_@see #getQualityValue();public static void sortByQualityValue(List<MediaType> mediaTypes) {_		Assert.notNull(mediaTypes, "'mediaTypes' must not be null")__		if (mediaTypes.size() > 1) {_			mediaTypes.sort(QUALITY_VALUE_COMPARATOR)__		}_	};sorts,the,given,list,of,code,media,type,objects,by,quality,value,p,given,two,media,types,ol,li,if,the,two,media,types,have,different,linkplain,get,quality,value,quality,value,then,the,media,type,with,the,highest,quality,value,is,ordered,before,the,other,li,li,if,either,media,type,has,a,linkplain,is,wildcard,type,wildcard,type,then,the,media,type,without,the,wildcard,is,ordered,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,type,types,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,either,media,type,has,a,linkplain,is,wildcard,subtype,wildcard,subtype,then,the,media,type,without,the,wildcard,is,sorted,before,the,other,li,li,if,the,two,media,types,have,different,linkplain,get,subtype,subtypes,then,they,are,considered,equal,and,remain,their,current,order,li,li,if,the,two,media,types,have,a,different,amount,of,linkplain,get,parameter,string,parameters,then,the,media,type,with,the,most,parameters,is,ordered,before,the,other,li,ol,param,media,types,the,list,of,media,types,to,be,sorted,see,get,quality,value;public,static,void,sort,by,quality,value,list,media,type,media,types,assert,not,null,media,types,media,types,must,not,be,null,if,media,types,size,1,media,types,sort
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1328020251;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1329142650;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1336761838;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1339678518;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1346940376;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1349532116;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1349535392;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1356735495;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1357119239;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1362408075;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1368482696;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1374666015;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1375479608;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1375896097;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1377201944;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1377633635;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1386541651;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1407415845;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1426880143;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1446549639;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1452801429;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1452851471;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1456785272;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1461592650;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1464161032;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<MediaType>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,media,type,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1467730834;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1468513835;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1468947211;Parse the given, comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the string cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1469219278;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = mediaTypes.split(",\\s*")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,media,types,split,s,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1472594218;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1472602111;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1474905889;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1477386718;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1484249067;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1484252281;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1484260238;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1484835275;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1484857261;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1486401293;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1487178332;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1495868221;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1496837955;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1497341397;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1499413370;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(String mediaTypes);1499413442;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1328020251;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be <code>null</code>_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,code,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1329142650;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be <code>null</code>_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,code,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1336761838;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be <code>null</code>_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,code,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1339678518;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be <code>null</code>_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,code,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1346940376;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be <code>null</code>_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,code,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1349532116;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be <code>null</code>_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,code,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1349535392;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be <code>null</code>_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,code,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1356735495;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1357119239;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "'type' must not be empty")__		Assert.hasLength(subtype, "'subtype' must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1362408075;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1368482696;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1374666015;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1375479608;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		Assert.hasLength(type, "type must not be empty")__		Assert.hasLength(subtype, "subtype must not be empty")__		checkToken(type)__		checkToken(subtype)__		this.type = type.toLowerCase(Locale.ENGLISH)__		this.subtype = subtype.toLowerCase(Locale.ENGLISH)__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			for (Map.Entry<String, String> entry : parameters.entrySet()) {_				String attribute = entry.getKey()__				String value = entry.getValue()__				checkParameters(attribute, value)__				m.put(attribute, value)__			}_			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,assert,has,length,type,type,must,not,be,empty,assert,has,length,subtype,subtype,must,not,be,empty,check,token,type,check,token,subtype,this,type,type,to,lower,case,locale,english,this,subtype,subtype,to,lower,case,locale,english,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,for,map,entry,string,string,entry,parameters,entry,set,string,attribute,entry,get,key,string,value,entry,get,value,check,parameters,attribute,value,m,put,attribute,value,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1375896097;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1377201944;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1377633635;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1386541651;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1407415845;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1426880143;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1446549639;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1452801429;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1452851471;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1456785272;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1461592650;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1464161032;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1467730834;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1468513835;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1468947211;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1469219278;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1472594218;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1472602111;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1474905889;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1477386718;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1484249067;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1484252281;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1484260238;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1484835275;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1484857261;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1486401293;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> public MediaType(String type, String subtype, Map<String, String> parameters);1487178332;Create a new {@code MediaType} for the given type, subtype, and parameters._@param type the primary type_@param subtype the subtype_@param parameters the parameters, may be {@code null}_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Map<String, String> parameters) {_		super(type, subtype, parameters)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,parameters,param,type,the,primary,type,param,subtype,the,subtype,param,parameters,the,parameters,may,be,code,null,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,map,string,string,parameters,super,type,subtype,parameters
MediaType -> @Override 	public int compareTo(MediaType other);1356735495;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see #sortBySpecificity(List);@Override_	public int compareTo(MediaType other) {_		int comp = this.type.compareToIgnoreCase(other.type)__		if (comp != 0) {_			return comp__		}_		comp = this.subtype.compareToIgnoreCase(other.subtype)__		if (comp != 0) {_			return comp__		}_		comp = this.parameters.size() - other.parameters.size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(this.parameters.keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.parameters.keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = this.parameters.get(thisAttribute)__			String otherValue = other.parameters.get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,sort,by,specificity,list;override,public,int,compare,to,media,type,other,int,comp,this,type,compare,to,ignore,case,other,type,if,comp,0,return,comp,comp,this,subtype,compare,to,ignore,case,other,subtype,if,comp,0,return,comp,comp,this,parameters,size,other,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,this,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,this,parameters,get,this,attribute,string,other,value,other,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MediaType -> @Override 	public int compareTo(MediaType other);1368482696;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see #sortBySpecificity(List);@Override_	public int compareTo(MediaType other) {_		int comp = this.type.compareToIgnoreCase(other.type)__		if (comp != 0) {_			return comp__		}_		comp = this.subtype.compareToIgnoreCase(other.subtype)__		if (comp != 0) {_			return comp__		}_		comp = this.parameters.size() - other.parameters.size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(this.parameters.keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.parameters.keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = this.parameters.get(thisAttribute)__			String otherValue = other.parameters.get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,sort,by,specificity,list;override,public,int,compare,to,media,type,other,int,comp,this,type,compare,to,ignore,case,other,type,if,comp,0,return,comp,comp,this,subtype,compare,to,ignore,case,other,subtype,if,comp,0,return,comp,comp,this,parameters,size,other,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,this,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,this,parameters,get,this,attribute,string,other,value,other,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MediaType -> @Override 	public int compareTo(MediaType other);1374666015;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see #sortBySpecificity(List);@Override_	public int compareTo(MediaType other) {_		int comp = this.type.compareToIgnoreCase(other.type)__		if (comp != 0) {_			return comp__		}_		comp = this.subtype.compareToIgnoreCase(other.subtype)__		if (comp != 0) {_			return comp__		}_		comp = this.parameters.size() - other.parameters.size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(this.parameters.keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.parameters.keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = this.parameters.get(thisAttribute)__			String otherValue = other.parameters.get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,sort,by,specificity,list;override,public,int,compare,to,media,type,other,int,comp,this,type,compare,to,ignore,case,other,type,if,comp,0,return,comp,comp,this,subtype,compare,to,ignore,case,other,subtype,if,comp,0,return,comp,comp,this,parameters,size,other,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,this,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,this,parameters,get,this,attribute,string,other,value,other,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MediaType -> @Override 	public int compareTo(MediaType other);1375479608;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see #sortBySpecificity(List);@Override_	public int compareTo(MediaType other) {_		int comp = this.type.compareToIgnoreCase(other.type)__		if (comp != 0) {_			return comp__		}_		comp = this.subtype.compareToIgnoreCase(other.subtype)__		if (comp != 0) {_			return comp__		}_		comp = this.parameters.size() - other.parameters.size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(this.parameters.keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.parameters.keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = this.parameters.get(thisAttribute)__			String otherValue = other.parameters.get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,sort,by,specificity,list;override,public,int,compare,to,media,type,other,int,comp,this,type,compare,to,ignore,case,other,type,if,comp,0,return,comp,comp,this,subtype,compare,to,ignore,case,other,subtype,if,comp,0,return,comp,comp,this,parameters,size,other,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,this,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,this,parameters,get,this,attribute,string,other,value,other,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MediaType -> public boolean isWildcardSubtype();1328020251;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character <code>&#42_</code> or not._@return whether the subtype is <code>&#42_</code>;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(subtype)__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,not,return,whether,the,subtype,is,code,42,code;public,boolean,is,wildcard,subtype,return,equals,subtype
MediaType -> public boolean isWildcardSubtype();1329142650;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character <code>&#42_</code> or not._@return whether the subtype is <code>&#42_</code>;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(subtype)__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,not,return,whether,the,subtype,is,code,42,code;public,boolean,is,wildcard,subtype,return,equals,subtype
MediaType -> public boolean isWildcardSubtype();1336761838;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character <code>&#42_</code> or not._@return whether the subtype is <code>&#42_</code>;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(subtype)__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,not,return,whether,the,subtype,is,code,42,code;public,boolean,is,wildcard,subtype,return,equals,subtype
MediaType -> public boolean isWildcardSubtype();1339678518;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character <code>&#42_</code> or not._@return whether the subtype is <code>&#42_</code>;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(subtype)__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,not,return,whether,the,subtype,is,code,42,code;public,boolean,is,wildcard,subtype,return,equals,subtype
MediaType -> public boolean isWildcardSubtype();1346940376;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character <code>&#42_</code> or not._@return whether the subtype is <code>&#42_</code>;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(subtype)__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,not,return,whether,the,subtype,is,code,42,code;public,boolean,is,wildcard,subtype,return,equals,subtype
MediaType -> public boolean isWildcardSubtype();1349532116;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character <code>&#42_</code>_or the wildcard character followed by a sufiix (e.g. <code>&#42_+xml</code>), or not._@return whether the subtype is <code>&#42_</code>;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(subtype) || subtype.startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,sufiix,e,g,code,42,xml,code,or,not,return,whether,the,subtype,is,code,42,code;public,boolean,is,wildcard,subtype,return,equals,subtype,subtype,starts,with
MediaType -> public boolean isWildcardSubtype();1349535392;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character <code>&#42_</code>_or the wildcard character followed by a sufiix (e.g. <code>&#42_+xml</code>), or not._@return whether the subtype is <code>&#42_</code>;public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(subtype) || subtype.startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,code,or,the,wildcard,character,followed,by,a,sufiix,e,g,code,42,xml,code,or,not,return,whether,the,subtype,is,code,42,code;public,boolean,is,wildcard,subtype,return,equals,subtype,subtype,starts,with
MediaType -> public boolean isWildcardSubtype();1356735495;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character {@code &#42_}_or the wildcard character followed by a sufiix (e.g. {@code &#42_+xml}), or not._@return whether the subtype is {@code &#42_};public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(subtype) || subtype.startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,or,the,wildcard,character,followed,by,a,sufiix,e,g,code,42,xml,or,not,return,whether,the,subtype,is,code,42;public,boolean,is,wildcard,subtype,return,equals,subtype,subtype,starts,with
MediaType -> public boolean isWildcardSubtype();1357119239;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character {@code &#42_}_or the wildcard character followed by a sufiix (e.g. {@code &#42_+xml}), or not._@return whether the subtype is {@code &#42_};public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(subtype) || subtype.startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,or,the,wildcard,character,followed,by,a,sufiix,e,g,code,42,xml,or,not,return,whether,the,subtype,is,code,42;public,boolean,is,wildcard,subtype,return,equals,subtype,subtype,starts,with
MediaType -> public boolean isWildcardSubtype();1362408075;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character {@code &#42_}_or the wildcard character followed by a sufiix (e.g. {@code &#42_+xml}), or not._@return whether the subtype is {@code &#42_};public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(subtype) || subtype.startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,or,the,wildcard,character,followed,by,a,sufiix,e,g,code,42,xml,or,not,return,whether,the,subtype,is,code,42;public,boolean,is,wildcard,subtype,return,equals,subtype,subtype,starts,with
MediaType -> public boolean isWildcardSubtype();1368482696;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character {@code &#42_}_or the wildcard character followed by a sufiix (e.g. {@code &#42_+xml}), or not._@return whether the subtype is {@code &#42_};public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(subtype) || subtype.startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,or,the,wildcard,character,followed,by,a,sufiix,e,g,code,42,xml,or,not,return,whether,the,subtype,is,code,42;public,boolean,is,wildcard,subtype,return,equals,subtype,subtype,starts,with
MediaType -> public boolean isWildcardSubtype();1374666015;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character {@code &#42_}_or the wildcard character followed by a sufiix (e.g. {@code &#42_+xml}), or not._@return whether the subtype is {@code &#42_};public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(this.subtype) || this.subtype.startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,or,the,wildcard,character,followed,by,a,sufiix,e,g,code,42,xml,or,not,return,whether,the,subtype,is,code,42;public,boolean,is,wildcard,subtype,return,equals,this,subtype,this,subtype,starts,with
MediaType -> public boolean isWildcardSubtype();1375479608;Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard character {@code &#42_}_or the wildcard character followed by a sufiix (e.g. {@code &#42_+xml}), or not._@return whether the subtype is {@code &#42_};public boolean isWildcardSubtype() {_		return WILDCARD_TYPE.equals(this.subtype) || this.subtype.startsWith("*+")__	};indicates,whether,the,linkplain,get,subtype,subtype,is,the,wildcard,character,code,42,or,the,wildcard,character,followed,by,a,sufiix,e,g,code,42,xml,or,not,return,whether,the,subtype,is,code,42;public,boolean,is,wildcard,subtype,return,equals,this,subtype,this,subtype,starts,with
MediaType -> public int compareTo(MediaType other);1328020251;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see #sortBySpecificity(List);public int compareTo(MediaType other) {_		int comp = this.type.compareToIgnoreCase(other.type)__		if (comp != 0) {_			return comp__		}_		comp = this.subtype.compareToIgnoreCase(other.subtype)__		if (comp != 0) {_			return comp__		}_		comp = this.parameters.size() - other.parameters.size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(this.parameters.keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.parameters.keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = this.parameters.get(thisAttribute)__			String otherValue = other.parameters.get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,sort,by,specificity,list;public,int,compare,to,media,type,other,int,comp,this,type,compare,to,ignore,case,other,type,if,comp,0,return,comp,comp,this,subtype,compare,to,ignore,case,other,subtype,if,comp,0,return,comp,comp,this,parameters,size,other,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,this,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,this,parameters,get,this,attribute,string,other,value,other,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MediaType -> public int compareTo(MediaType other);1329142650;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see #sortBySpecificity(List);public int compareTo(MediaType other) {_		int comp = this.type.compareToIgnoreCase(other.type)__		if (comp != 0) {_			return comp__		}_		comp = this.subtype.compareToIgnoreCase(other.subtype)__		if (comp != 0) {_			return comp__		}_		comp = this.parameters.size() - other.parameters.size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(this.parameters.keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.parameters.keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = this.parameters.get(thisAttribute)__			String otherValue = other.parameters.get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,sort,by,specificity,list;public,int,compare,to,media,type,other,int,comp,this,type,compare,to,ignore,case,other,type,if,comp,0,return,comp,comp,this,subtype,compare,to,ignore,case,other,subtype,if,comp,0,return,comp,comp,this,parameters,size,other,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,this,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,this,parameters,get,this,attribute,string,other,value,other,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MediaType -> public int compareTo(MediaType other);1336761838;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see #sortBySpecificity(List);public int compareTo(MediaType other) {_		int comp = this.type.compareToIgnoreCase(other.type)__		if (comp != 0) {_			return comp__		}_		comp = this.subtype.compareToIgnoreCase(other.subtype)__		if (comp != 0) {_			return comp__		}_		comp = this.parameters.size() - other.parameters.size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(this.parameters.keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.parameters.keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = this.parameters.get(thisAttribute)__			String otherValue = other.parameters.get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,sort,by,specificity,list;public,int,compare,to,media,type,other,int,comp,this,type,compare,to,ignore,case,other,type,if,comp,0,return,comp,comp,this,subtype,compare,to,ignore,case,other,subtype,if,comp,0,return,comp,comp,this,parameters,size,other,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,this,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,this,parameters,get,this,attribute,string,other,value,other,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MediaType -> public int compareTo(MediaType other);1339678518;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see #sortBySpecificity(List);public int compareTo(MediaType other) {_		int comp = this.type.compareToIgnoreCase(other.type)__		if (comp != 0) {_			return comp__		}_		comp = this.subtype.compareToIgnoreCase(other.subtype)__		if (comp != 0) {_			return comp__		}_		comp = this.parameters.size() - other.parameters.size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(this.parameters.keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.parameters.keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = this.parameters.get(thisAttribute)__			String otherValue = other.parameters.get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,sort,by,specificity,list;public,int,compare,to,media,type,other,int,comp,this,type,compare,to,ignore,case,other,type,if,comp,0,return,comp,comp,this,subtype,compare,to,ignore,case,other,subtype,if,comp,0,return,comp,comp,this,parameters,size,other,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,this,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,this,parameters,get,this,attribute,string,other,value,other,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MediaType -> public int compareTo(MediaType other);1346940376;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see #sortBySpecificity(List);public int compareTo(MediaType other) {_		int comp = this.type.compareToIgnoreCase(other.type)__		if (comp != 0) {_			return comp__		}_		comp = this.subtype.compareToIgnoreCase(other.subtype)__		if (comp != 0) {_			return comp__		}_		comp = this.parameters.size() - other.parameters.size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(this.parameters.keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.parameters.keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = this.parameters.get(thisAttribute)__			String otherValue = other.parameters.get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,sort,by,specificity,list;public,int,compare,to,media,type,other,int,comp,this,type,compare,to,ignore,case,other,type,if,comp,0,return,comp,comp,this,subtype,compare,to,ignore,case,other,subtype,if,comp,0,return,comp,comp,this,parameters,size,other,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,this,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,this,parameters,get,this,attribute,string,other,value,other,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MediaType -> public int compareTo(MediaType other);1349532116;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see #sortBySpecificity(List);public int compareTo(MediaType other) {_		int comp = this.type.compareToIgnoreCase(other.type)__		if (comp != 0) {_			return comp__		}_		comp = this.subtype.compareToIgnoreCase(other.subtype)__		if (comp != 0) {_			return comp__		}_		comp = this.parameters.size() - other.parameters.size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(this.parameters.keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.parameters.keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = this.parameters.get(thisAttribute)__			String otherValue = other.parameters.get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,sort,by,specificity,list;public,int,compare,to,media,type,other,int,comp,this,type,compare,to,ignore,case,other,type,if,comp,0,return,comp,comp,this,subtype,compare,to,ignore,case,other,subtype,if,comp,0,return,comp,comp,this,parameters,size,other,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,this,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,this,parameters,get,this,attribute,string,other,value,other,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MediaType -> public int compareTo(MediaType other);1349535392;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see #sortBySpecificity(List);public int compareTo(MediaType other) {_		int comp = this.type.compareToIgnoreCase(other.type)__		if (comp != 0) {_			return comp__		}_		comp = this.subtype.compareToIgnoreCase(other.subtype)__		if (comp != 0) {_			return comp__		}_		comp = this.parameters.size() - other.parameters.size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(this.parameters.keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.parameters.keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = this.parameters.get(thisAttribute)__			String otherValue = other.parameters.get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,sort,by,specificity,list;public,int,compare,to,media,type,other,int,comp,this,type,compare,to,ignore,case,other,type,if,comp,0,return,comp,comp,this,subtype,compare,to,ignore,case,other,subtype,if,comp,0,return,comp,comp,this,parameters,size,other,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,this,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,this,parameters,get,this,attribute,string,other,value,other,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MediaType -> public int compareTo(MediaType other);1357119239;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see #sortBySpecificity(List);public int compareTo(MediaType other) {_		int comp = this.type.compareToIgnoreCase(other.type)__		if (comp != 0) {_			return comp__		}_		comp = this.subtype.compareToIgnoreCase(other.subtype)__		if (comp != 0) {_			return comp__		}_		comp = this.parameters.size() - other.parameters.size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(this.parameters.keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.parameters.keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = this.parameters.get(thisAttribute)__			String otherValue = other.parameters.get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,sort,by,specificity,list;public,int,compare,to,media,type,other,int,comp,this,type,compare,to,ignore,case,other,type,if,comp,0,return,comp,comp,this,subtype,compare,to,ignore,case,other,subtype,if,comp,0,return,comp,comp,this,parameters,size,other,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,this,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,this,parameters,get,this,attribute,string,other,value,other,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MediaType -> public int compareTo(MediaType other);1362408075;Compares this {@code MediaType} to another alphabetically._@param other media type to compare to_@see #sortBySpecificity(List);public int compareTo(MediaType other) {_		int comp = this.type.compareToIgnoreCase(other.type)__		if (comp != 0) {_			return comp__		}_		comp = this.subtype.compareToIgnoreCase(other.subtype)__		if (comp != 0) {_			return comp__		}_		comp = this.parameters.size() - other.parameters.size()__		if (comp != 0) {_			return comp__		}_		TreeSet<String> thisAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		thisAttributes.addAll(this.parameters.keySet())__		TreeSet<String> otherAttributes = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER)__		otherAttributes.addAll(other.parameters.keySet())__		Iterator<String> thisAttributesIterator = thisAttributes.iterator()__		Iterator<String> otherAttributesIterator = otherAttributes.iterator()__		while (thisAttributesIterator.hasNext()) {_			String thisAttribute = thisAttributesIterator.next()__			String otherAttribute = otherAttributesIterator.next()__			comp = thisAttribute.compareToIgnoreCase(otherAttribute)__			if (comp != 0) {_				return comp__			}_			String thisValue = this.parameters.get(thisAttribute)__			String otherValue = other.parameters.get(otherAttribute)__			if (otherValue == null) {_				otherValue = ""__			}_			comp = thisValue.compareTo(otherValue)__			if (comp != 0) {_				return comp__			}_		}_		return 0__	};compares,this,code,media,type,to,another,alphabetically,param,other,media,type,to,compare,to,see,sort,by,specificity,list;public,int,compare,to,media,type,other,int,comp,this,type,compare,to,ignore,case,other,type,if,comp,0,return,comp,comp,this,subtype,compare,to,ignore,case,other,subtype,if,comp,0,return,comp,comp,this,parameters,size,other,parameters,size,if,comp,0,return,comp,tree,set,string,this,attributes,new,tree,set,string,string,this,attributes,add,all,this,parameters,key,set,tree,set,string,other,attributes,new,tree,set,string,string,other,attributes,add,all,other,parameters,key,set,iterator,string,this,attributes,iterator,this,attributes,iterator,iterator,string,other,attributes,iterator,other,attributes,iterator,while,this,attributes,iterator,has,next,string,this,attribute,this,attributes,iterator,next,string,other,attribute,other,attributes,iterator,next,comp,this,attribute,compare,to,ignore,case,other,attribute,if,comp,0,return,comp,string,this,value,this,parameters,get,this,attribute,string,other,value,other,parameters,get,other,attribute,if,other,value,null,other,value,comp,this,value,compare,to,other,value,if,comp,0,return,comp,return,0
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1328020251;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		StringBuilder builder = new StringBuilder()__		for (Iterator<MediaType> iterator = mediaTypes.iterator()_ iterator.hasNext()_) {_			MediaType mediaType = iterator.next()__			mediaType.appendTo(builder)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,string,builder,builder,new,string,builder,for,iterator,media,type,iterator,media,types,iterator,iterator,has,next,media,type,media,type,iterator,next,media,type,append,to,builder,if,iterator,has,next,builder,append,return,builder,to,string
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1329142650;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		StringBuilder builder = new StringBuilder()__		for (Iterator<MediaType> iterator = mediaTypes.iterator()_ iterator.hasNext()_) {_			MediaType mediaType = iterator.next()__			mediaType.appendTo(builder)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,string,builder,builder,new,string,builder,for,iterator,media,type,iterator,media,types,iterator,iterator,has,next,media,type,media,type,iterator,next,media,type,append,to,builder,if,iterator,has,next,builder,append,return,builder,to,string
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1336761838;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		StringBuilder builder = new StringBuilder()__		for (Iterator<MediaType> iterator = mediaTypes.iterator()_ iterator.hasNext()_) {_			MediaType mediaType = iterator.next()__			mediaType.appendTo(builder)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,string,builder,builder,new,string,builder,for,iterator,media,type,iterator,media,types,iterator,iterator,has,next,media,type,media,type,iterator,next,media,type,append,to,builder,if,iterator,has,next,builder,append,return,builder,to,string
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1339678518;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		StringBuilder builder = new StringBuilder()__		for (Iterator<MediaType> iterator = mediaTypes.iterator()_ iterator.hasNext()_) {_			MediaType mediaType = iterator.next()__			mediaType.appendTo(builder)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,string,builder,builder,new,string,builder,for,iterator,media,type,iterator,media,types,iterator,iterator,has,next,media,type,media,type,iterator,next,media,type,append,to,builder,if,iterator,has,next,builder,append,return,builder,to,string
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1346940376;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		StringBuilder builder = new StringBuilder()__		for (Iterator<MediaType> iterator = mediaTypes.iterator()_ iterator.hasNext()_) {_			MediaType mediaType = iterator.next()__			mediaType.appendTo(builder)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,string,builder,builder,new,string,builder,for,iterator,media,type,iterator,media,types,iterator,iterator,has,next,media,type,media,type,iterator,next,media,type,append,to,builder,if,iterator,has,next,builder,append,return,builder,to,string
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1349532116;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		StringBuilder builder = new StringBuilder()__		for (Iterator<MediaType> iterator = mediaTypes.iterator()_ iterator.hasNext()_) {_			MediaType mediaType = iterator.next()__			mediaType.appendTo(builder)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,string,builder,builder,new,string,builder,for,iterator,media,type,iterator,media,types,iterator,iterator,has,next,media,type,media,type,iterator,next,media,type,append,to,builder,if,iterator,has,next,builder,append,return,builder,to,string
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1349535392;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		StringBuilder builder = new StringBuilder()__		for (Iterator<MediaType> iterator = mediaTypes.iterator()_ iterator.hasNext()_) {_			MediaType mediaType = iterator.next()__			mediaType.appendTo(builder)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,string,builder,builder,new,string,builder,for,iterator,media,type,iterator,media,types,iterator,iterator,has,next,media,type,media,type,iterator,next,media,type,append,to,builder,if,iterator,has,next,builder,append,return,builder,to,string
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1356735495;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		StringBuilder builder = new StringBuilder()__		for (Iterator<MediaType> iterator = mediaTypes.iterator()_ iterator.hasNext()_) {_			MediaType mediaType = iterator.next()__			mediaType.appendTo(builder)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,string,builder,builder,new,string,builder,for,iterator,media,type,iterator,media,types,iterator,iterator,has,next,media,type,media,type,iterator,next,media,type,append,to,builder,if,iterator,has,next,builder,append,return,builder,to,string
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1357119239;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		StringBuilder builder = new StringBuilder()__		for (Iterator<MediaType> iterator = mediaTypes.iterator()_ iterator.hasNext()_) {_			MediaType mediaType = iterator.next()__			mediaType.appendTo(builder)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,string,builder,builder,new,string,builder,for,iterator,media,type,iterator,media,types,iterator,iterator,has,next,media,type,media,type,iterator,next,media,type,append,to,builder,if,iterator,has,next,builder,append,return,builder,to,string
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1362408075;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		StringBuilder builder = new StringBuilder()__		for (Iterator<MediaType> iterator = mediaTypes.iterator()_ iterator.hasNext()_) {_			MediaType mediaType = iterator.next()__			mediaType.appendTo(builder)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,string,builder,builder,new,string,builder,for,iterator,media,type,iterator,media,types,iterator,iterator,has,next,media,type,media,type,iterator,next,media,type,append,to,builder,if,iterator,has,next,builder,append,return,builder,to,string
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1368482696;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		StringBuilder builder = new StringBuilder()__		for (Iterator<MediaType> iterator = mediaTypes.iterator()_ iterator.hasNext()_) {_			MediaType mediaType = iterator.next()__			mediaType.appendTo(builder)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,string,builder,builder,new,string,builder,for,iterator,media,type,iterator,media,types,iterator,iterator,has,next,media,type,media,type,iterator,next,media,type,append,to,builder,if,iterator,has,next,builder,append,return,builder,to,string
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1374666015;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		StringBuilder builder = new StringBuilder()__		for (Iterator<MediaType> iterator = mediaTypes.iterator()_ iterator.hasNext()_) {_			MediaType mediaType = iterator.next()__			mediaType.appendTo(builder)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,string,builder,builder,new,string,builder,for,iterator,media,type,iterator,media,types,iterator,iterator,has,next,media,type,media,type,iterator,next,media,type,append,to,builder,if,iterator,has,next,builder,append,return,builder,to,string
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1375479608;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		StringBuilder builder = new StringBuilder()__		for (Iterator<MediaType> iterator = mediaTypes.iterator()_ iterator.hasNext()_) {_			MediaType mediaType = iterator.next()__			mediaType.appendTo(builder)__			if (iterator.hasNext()) {_				builder.append(", ")__			}_		}_		return builder.toString()__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,string,builder,builder,new,string,builder,for,iterator,media,type,iterator,media,types,iterator,iterator,has,next,media,type,media,type,iterator,next,media,type,append,to,builder,if,iterator,has,next,builder,append,return,builder,to,string
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1375896097;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1377201944;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1377633635;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1386541651;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1407415845;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the string to parse_@return the list of media types_@throws IllegalArgumentException if the String cannot be parsed;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1426880143;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1446549639;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1452801429;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1452851471;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1456785272;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1461592650;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1464161032;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1467730834;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1468513835;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1468947211;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1469219278;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1472594218;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1472602111;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1474905889;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1477386718;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1484249067;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1484252281;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1484260238;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1484835275;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1484857261;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1486401293;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1487178332;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1495868221;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1496837955;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1497341397;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1499413370;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1499413442;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1503008146;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1508532146;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1518772998;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1519945587;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1520077318;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1520094828;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1520528267;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1523268197;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1542168307;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1549373623;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1549375593;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static String toString(Collection<MediaType> mediaTypes);1549878350;Return a string representation of the given list of {@code MediaType} objects._<p>This method can be used to for an {@code Accept} or {@code Content-Type} header._@param mediaTypes the media types to create a string representation for_@return the string representation;public static String toString(Collection<MediaType> mediaTypes) {_		return MimeTypeUtils.toString(mediaTypes)__	};return,a,string,representation,of,the,given,list,of,code,media,type,objects,p,this,method,can,be,used,to,for,an,code,accept,or,code,content,type,header,param,media,types,the,media,types,to,create,a,string,representation,for,return,the,string,representation;public,static,string,to,string,collection,media,type,media,types,return,mime,type,utils,to,string,media,types
MediaType -> public static MediaType asMediaType(MimeType mimeType);1468947211;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1469219278;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1472594218;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1472602111;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1474905889;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1477386718;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1484249067;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1484252281;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1484260238;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1484835275;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1484857261;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1486401293;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1487178332;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1495868221;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1496837955;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1497341397;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1499413370;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1499413442;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1503008146;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1508532146;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1518772998;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1519945587;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1520077318;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1520094828;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1520528267;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1523268197;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1542168307;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1549373623;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1549375593;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public static MediaType asMediaType(MimeType mimeType);1549878350;Re-create the given mime type as a media type._@since 5.0;public static MediaType asMediaType(MimeType mimeType) {_		if (mimeType instanceof MediaType) {_			return (MediaType) mimeType__		}_		return new MediaType(mimeType.getType(), mimeType.getSubtype(), mimeType.getParameters())__	};re,create,the,given,mime,type,as,a,media,type,since,5,0;public,static,media,type,as,media,type,mime,type,mime,type,if,mime,type,instanceof,media,type,return,media,type,mime,type,return,new,media,type,mime,type,get,type,mime,type,get,subtype,mime,type,get,parameters
MediaType -> public Charset getCharSet();1328020251;Return the character set, as indicated by a <code>charset</code> parameter, if any._@return the character set_ or <code>null</code> if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,code,parameter,if,any,return,the,character,set,or,code,null,code,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MediaType -> public Charset getCharSet();1329142650;Return the character set, as indicated by a <code>charset</code> parameter, if any._@return the character set_ or <code>null</code> if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,code,parameter,if,any,return,the,character,set,or,code,null,code,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MediaType -> public Charset getCharSet();1336761838;Return the character set, as indicated by a <code>charset</code> parameter, if any._@return the character set_ or <code>null</code> if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,code,parameter,if,any,return,the,character,set,or,code,null,code,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MediaType -> public Charset getCharSet();1339678518;Return the character set, as indicated by a <code>charset</code> parameter, if any._@return the character set_ or <code>null</code> if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,code,parameter,if,any,return,the,character,set,or,code,null,code,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MediaType -> public Charset getCharSet();1346940376;Return the character set, as indicated by a <code>charset</code> parameter, if any._@return the character set_ or <code>null</code> if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,code,parameter,if,any,return,the,character,set,or,code,null,code,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MediaType -> public Charset getCharSet();1349532116;Return the character set, as indicated by a <code>charset</code> parameter, if any._@return the character set_ or <code>null</code> if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,code,parameter,if,any,return,the,character,set,or,code,null,code,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MediaType -> public Charset getCharSet();1349535392;Return the character set, as indicated by a <code>charset</code> parameter, if any._@return the character set_ or <code>null</code> if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,code,parameter,if,any,return,the,character,set,or,code,null,code,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MediaType -> public Charset getCharSet();1356735495;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set_ or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MediaType -> public Charset getCharSet();1357119239;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set_ or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MediaType -> public Charset getCharSet();1362408075;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set_ or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MediaType -> public Charset getCharSet();1368482696;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set_ or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MediaType -> public Charset getCharSet();1374666015;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set_ or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MediaType -> public Charset getCharSet();1375479608;Return the character set, as indicated by a {@code charset} parameter, if any._@return the character set_ or {@code null} if not available;public Charset getCharSet() {_		String charSet = getParameter(PARAM_CHARSET)__		return (charSet != null ? Charset.forName(unquote(charSet)) : null)__	};return,the,character,set,as,indicated,by,a,code,charset,parameter,if,any,return,the,character,set,or,code,null,if,not,available;public,charset,get,char,set,string,char,set,get,parameter,return,char,set,null,charset,for,name,unquote,char,set,null
MediaType -> private void checkToken(String token);1362408075;Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i=0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MediaType -> private void checkToken(String token);1368482696;Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i=0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MediaType -> private void checkToken(String token);1374666015;Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i=0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MediaType -> private void checkToken(String token);1375479608;Checks the given token string for illegal characters, as defined in RFC 2616, section 2.2._@throws IllegalArgumentException in case of illegal characters_@see <a href="http://tools.ietf.org/html/rfc2616#section-2.2">HTTP 1.1, section 2.2</a>;private void checkToken(String token) {_		for (int i=0_ i < token.length()_ i++ ) {_			char ch = token.charAt(i)__			if (!TOKEN.get(ch)) {_				throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \"" + token + "\"")__			}_		}_	};checks,the,given,token,string,for,illegal,characters,as,defined,in,rfc,2616,section,2,2,throws,illegal,argument,exception,in,case,of,illegal,characters,see,a,href,http,tools,ietf,org,html,rfc2616,section,2,2,http,1,1,section,2,2,a;private,void,check,token,string,token,for,int,i,0,i,token,length,i,char,ch,token,char,at,i,if,token,get,ch,throw,new,illegal,argument,exception,invalid,token,character,ch,in,token,token
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes);1503008146;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,nullable,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes);1508532146;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,nullable,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes);1518772998;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,nullable,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes);1519945587;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,nullable,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes);1520077318;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,nullable,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes);1520094828;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,nullable,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes);1520528267;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,nullable,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes);1523268197;Parse the given comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, ",")__		List<MediaType> result = new ArrayList<>(tokens.length)__		for (String token : tokens) {_			result.add(parseMediaType(token))__		}_		return result__	};parse,the,given,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,nullable,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,string,tokens,string,utils,tokenize,to,string,array,media,types,list,media,type,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,media,type,token,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes);1542168307;Parse the comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		return MimeTypeUtils.tokenize(mediaTypes).stream()_				.map(MediaType::parseMediaType).collect(Collectors.toList())__	};parse,the,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,nullable,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,return,mime,type,utils,tokenize,media,types,stream,map,media,type,parse,media,type,collect,collectors,to,list
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes);1549373623;Parse the comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		List<String> tokenizedTypes = MimeTypeUtils.tokenize(mediaTypes)__		List<MediaType> result = new ArrayList<>(tokenizedTypes.size())__		for (String type : tokenizedTypes) {_			result.add(parseMediaType(type))__		}_		return result__	};parse,the,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,nullable,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,list,string,tokenized,types,mime,type,utils,tokenize,media,types,list,media,type,result,new,array,list,tokenized,types,size,for,string,type,tokenized,types,result,add,parse,media,type,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes);1549375593;Parse the comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		List<String> tokenizedTypes = MimeTypeUtils.tokenize(mediaTypes)__		List<MediaType> result = new ArrayList<>(tokenizedTypes.size())__		for (String type : tokenizedTypes) {_			result.add(parseMediaType(type))__		}_		return result__	};parse,the,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,nullable,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,list,string,tokenized,types,mime,type,utils,tokenize,media,types,list,media,type,result,new,array,list,tokenized,types,size,for,string,type,tokenized,types,result,add,parse,media,type,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes);1549878350;Parse the comma-separated string into a list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed;public static List<MediaType> parseMediaTypes(@Nullable String mediaTypes) {_		if (!StringUtils.hasLength(mediaTypes)) {_			return Collections.emptyList()__		}_		_		List<String> tokenizedTypes = MimeTypeUtils.tokenize(mediaTypes)__		List<MediaType> result = new ArrayList<>(tokenizedTypes.size())__		for (String type : tokenizedTypes) {_			result.add(parseMediaType(type))__		}_		return result__	};parse,the,comma,separated,string,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed;public,static,list,media,type,parse,media,types,nullable,string,media,types,if,string,utils,has,length,media,types,return,collections,empty,list,list,string,tokenized,types,mime,type,utils,tokenize,media,types,list,media,type,result,new,array,list,tokenized,types,size,for,string,type,tokenized,types,result,add,parse,media,type,type,return,result
MediaType -> public String getSubtype();1328020251;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MediaType -> public String getSubtype();1329142650;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MediaType -> public String getSubtype();1336761838;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MediaType -> public String getSubtype();1339678518;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MediaType -> public String getSubtype();1346940376;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MediaType -> public String getSubtype();1349532116;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MediaType -> public String getSubtype();1349535392;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MediaType -> public String getSubtype();1356735495;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MediaType -> public String getSubtype();1357119239;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MediaType -> public String getSubtype();1362408075;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MediaType -> public String getSubtype();1368482696;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MediaType -> public String getSubtype();1374666015;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MediaType -> public String getSubtype();1375479608;Return the subtype.;public String getSubtype() {_		return this.subtype__	};return,the,subtype;public,string,get,subtype,return,this,subtype
MediaType -> public MediaType(String type);1328020251;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>&#42_</code>, parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,this,type
MediaType -> public MediaType(String type);1329142650;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>&#42_</code>, parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,this,type
MediaType -> public MediaType(String type);1336761838;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>&#42_</code>, parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,this,type
MediaType -> public MediaType(String type);1339678518;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>&#42_</code>, parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,this,type
MediaType -> public MediaType(String type);1346940376;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>&#42_</code>, parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,this,type
MediaType -> public MediaType(String type);1349532116;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>&#42_</code>, parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,this,type
MediaType -> public MediaType(String type);1349535392;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to <code>&#42_</code>, parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,code,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,this,type
MediaType -> public MediaType(String type);1356735495;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to {@code &#42_}, parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,this,type
MediaType -> public MediaType(String type);1357119239;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to {@code &#42_}, parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,this,type
MediaType -> public MediaType(String type);1362408075;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to {@code &#42_}, parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,this,type
MediaType -> public MediaType(String type);1368482696;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to {@code &#42_}, parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,this,type
MediaType -> public MediaType(String type);1374666015;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to {@code &#42_}, parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,this,type
MediaType -> public MediaType(String type);1375479608;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to {@code &#42_}, parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		this(type, WILDCARD_TYPE)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,code,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,this,type
MediaType -> public MediaType(String type);1375896097;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1377201944;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1377633635;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1386541651;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1407415845;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1426880143;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1446549639;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1452801429;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1452851471;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1456785272;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1461592650;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1464161032;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1467730834;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1468513835;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1468947211;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1469219278;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1472594218;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1472602111;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1474905889;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1477386718;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1484249067;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1484252281;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1484260238;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1484835275;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1484857261;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1486401293;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1487178332;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1495868221;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1496837955;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1497341397;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1499413370;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1499413442;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1503008146;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1508532146;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1518772998;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1519945587;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1520077318;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1520094828;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1520528267;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1523268197;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1542168307;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1549373623;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1549375593;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public MediaType(String type);1549878350;Create a new {@code MediaType} for the given primary type._<p>The {@linkplain #getSubtype() subtype} is set to "&#42_", parameters empty._@param type the primary type_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type) {_		super(type)__	};create,a,new,code,media,type,for,the,given,primary,type,p,the,linkplain,get,subtype,subtype,is,set,to,42,parameters,empty,param,type,the,primary,type,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,super,type
MediaType -> public static List<MediaType> parseMediaTypes(List<String> mediaTypes);1469219278;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.<MediaType>emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,media,type,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(List<String> mediaTypes);1472594218;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.<MediaType>emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,media,type,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(List<String> mediaTypes);1472602111;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.<MediaType>emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,media,type,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(List<String> mediaTypes);1474905889;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(List<String> mediaTypes);1477386718;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(List<String> mediaTypes);1484249067;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(List<String> mediaTypes);1484252281;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(List<String> mediaTypes);1484260238;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(List<String> mediaTypes);1484835275;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(List<String> mediaTypes);1484857261;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(List<String> mediaTypes);1486401293;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(List<String> mediaTypes);1487178332;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public static List<MediaType> parseMediaTypes(List<String> mediaTypes);1495868221;Parse the given list of (potentially) comma-separated strings into a_list of {@code MediaType} objects._<p>This method can be used to parse an Accept or Content-Type header._@param mediaTypes the string to parse_@return the list of media types_@throws InvalidMediaTypeException if the media type value cannot be parsed_@since 4.3.2;public static List<MediaType> parseMediaTypes(List<String> mediaTypes) {_		if (CollectionUtils.isEmpty(mediaTypes)) {_			return Collections.emptyList()__		}_		else if (mediaTypes.size() == 1) {_			return parseMediaTypes(mediaTypes.get(0))__		}_		else {_			List<MediaType> result = new ArrayList<>(8)__			for (String mediaType : mediaTypes) {_				result.addAll(parseMediaTypes(mediaType))__			}_			return result__		}_	};parse,the,given,list,of,potentially,comma,separated,strings,into,a,list,of,code,media,type,objects,p,this,method,can,be,used,to,parse,an,accept,or,content,type,header,param,media,types,the,string,to,parse,return,the,list,of,media,types,throws,invalid,media,type,exception,if,the,media,type,value,cannot,be,parsed,since,4,3,2;public,static,list,media,type,parse,media,types,list,string,media,types,if,collection,utils,is,empty,media,types,return,collections,empty,list,else,if,media,types,size,1,return,parse,media,types,media,types,get,0,else,list,media,type,result,new,array,list,8,for,string,media,type,media,types,result,add,all,parse,media,types,media,type,return,result
MediaType -> public MediaType(String type, String subtype);1328020251;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1329142650;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1336761838;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1339678518;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1346940376;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1349532116;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1349535392;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1356735495;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1357119239;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1362408075;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1368482696;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1374666015;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1375479608;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		this(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,this,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1375896097;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1377201944;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1377633635;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1386541651;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1407415845;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1426880143;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1446549639;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1452801429;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1452851471;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1456785272;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1461592650;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1464161032;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1467730834;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1468513835;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1468947211;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1469219278;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1472594218;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1472602111;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.<String, String>emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,string,string,empty,map
MediaType -> public MediaType(String type, String subtype);1474905889;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1477386718;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1484249067;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1484252281;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1484260238;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1484835275;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1484857261;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1486401293;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1487178332;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1495868221;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1496837955;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1497341397;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1499413370;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1499413442;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1503008146;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1508532146;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1518772998;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1519945587;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1520077318;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1520094828;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1520528267;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1523268197;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1542168307;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1549373623;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1549375593;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype);1549878350;Create a new {@code MediaType} for the given primary type and subtype._<p>The parameters are empty._@param type the primary type_@param subtype the subtype_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype) {_		super(type, subtype, Collections.emptyMap())__	};create,a,new,code,media,type,for,the,given,primary,type,and,subtype,p,the,parameters,are,empty,param,type,the,primary,type,param,subtype,the,subtype,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,super,type,subtype,collections,empty,map
MediaType -> public MediaType(String type, String subtype, Charset charSet);1328020251;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MediaType -> public MediaType(String type, String subtype, Charset charSet);1329142650;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MediaType -> public MediaType(String type, String subtype, Charset charSet);1336761838;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MediaType -> public MediaType(String type, String subtype, Charset charSet);1339678518;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MediaType -> public MediaType(String type, String subtype, Charset charSet);1346940376;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MediaType -> public MediaType(String type, String subtype, Charset charSet);1349532116;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MediaType -> public MediaType(String type, String subtype, Charset charSet);1349535392;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MediaType -> public MediaType(String type, String subtype, Charset charSet);1356735495;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MediaType -> public MediaType(String type, String subtype, Charset charSet);1357119239;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MediaType -> public MediaType(String type, String subtype, Charset charSet);1362408075;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MediaType -> public MediaType(String type, String subtype, Charset charSet);1368482696;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MediaType -> public MediaType(String type, String subtype, Charset charSet);1374666015;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MediaType -> public MediaType(String type, String subtype, Charset charSet);1375479608;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charSet) {_		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charSet.name()))__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,char,set,this,type,subtype,collections,singleton,map,char,set,name
MediaType -> public MediaType(String type, String subtype, Charset charSet);1375896097;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charSet) {_		super(type, subtype, charSet)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,char,set,super,type,subtype,char,set
MediaType -> public MediaType(String type, String subtype, Charset charSet);1377201944;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charSet) {_		super(type, subtype, charSet)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,char,set,super,type,subtype,char,set
MediaType -> public MediaType(String type, String subtype, Charset charSet);1377633635;Create a new {@code MediaType} for the given type, subtype, and character set._@param type the primary type_@param subtype the subtype_@param charSet the character set_@throws IllegalArgumentException if any of the parameters contain illegal characters;public MediaType(String type, String subtype, Charset charSet) {_		super(type, subtype, charSet)__	};create,a,new,code,media,type,for,the,given,type,subtype,and,character,set,param,type,the,primary,type,param,subtype,the,subtype,param,char,set,the,character,set,throws,illegal,argument,exception,if,any,of,the,parameters,contain,illegal,characters;public,media,type,string,type,string,subtype,charset,char,set,super,type,subtype,char,set
