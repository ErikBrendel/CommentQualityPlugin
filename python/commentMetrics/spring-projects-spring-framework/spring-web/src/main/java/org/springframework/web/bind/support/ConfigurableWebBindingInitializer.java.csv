commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether a binder should attempt to "auto-grow" a nested path that contains a null value.  * <p>If "true", a null path location will be populated with a default object value and traversed  * instead of resulting in an exception. This flag also enables auto-growth of collection elements  * when accessing an out-of-bounds index.  * <p>Default is "true" on a standard DataBinder. Note that this feature is only supported  * for bean property access (DataBinder's default mode), not for field access.  * @see org.springframework.validation.DataBinder#initBeanPropertyAccess()  * @see org.springframework.validation.DataBinder#setAutoGrowNestedPaths  */ ;/**  * Set whether a binder should attempt to "auto-grow" a nested path that contains a null value.  * <p>If "true", a null path location will be populated with a default object value and traversed  * instead of resulting in an exception. This flag also enables auto-growth of collection elements  * when accessing an out-of-bounds index.  * <p>Default is "true" on a standard DataBinder. Note that this feature is only supported  * for bean property access (DataBinder's default mode), not for field access.  * @see org.springframework.validation.DataBinder#initBeanPropertyAccess()  * @see org.springframework.validation.DataBinder#setAutoGrowNestedPaths  */ public void setAutoGrowNestedPaths(boolean autoGrowNestedPaths) {     this.autoGrowNestedPaths = autoGrowNestedPaths. }
true;public;0;3;/**  * Return whether a binder should attempt to "auto-grow" a nested path that contains a null value.  */ ;/**  * Return whether a binder should attempt to "auto-grow" a nested path that contains a null value.  */ public boolean isAutoGrowNestedPaths() {     return this.autoGrowNestedPaths. }
true;public,final;1;3;/**  * Set whether to use direct field access instead of bean property access.  * <p>Default is {@code false}, using bean property access.  * Switch this to {@code true} in order to enforce direct field access.  * @see org.springframework.validation.DataBinder#initDirectFieldAccess()  * @see org.springframework.validation.DataBinder#initBeanPropertyAccess()  */ ;/**  * Set whether to use direct field access instead of bean property access.  * <p>Default is {@code false}, using bean property access.  * Switch this to {@code true} in order to enforce direct field access.  * @see org.springframework.validation.DataBinder#initDirectFieldAccess()  * @see org.springframework.validation.DataBinder#initBeanPropertyAccess()  */ public final void setDirectFieldAccess(boolean directFieldAccess) {     this.directFieldAccess = directFieldAccess. }
true;public;0;3;/**  * Return whether to use direct field access instead of bean property access.  */ ;/**  * Return whether to use direct field access instead of bean property access.  */ public boolean isDirectFieldAccess() {     return this.directFieldAccess. }
true;public,final;1;3;/**  * Set the strategy to use for resolving errors into message codes.  * Applies the given strategy to all data binders used by this controller.  * <p>Default is {@code null}, i.e. using the default strategy of  * the data binder.  * @see org.springframework.validation.DataBinder#setMessageCodesResolver  */ ;/**  * Set the strategy to use for resolving errors into message codes.  * Applies the given strategy to all data binders used by this controller.  * <p>Default is {@code null}, i.e. using the default strategy of  * the data binder.  * @see org.springframework.validation.DataBinder#setMessageCodesResolver  */ public final void setMessageCodesResolver(@Nullable MessageCodesResolver messageCodesResolver) {     this.messageCodesResolver = messageCodesResolver. }
true;public,final;0;4;/**  * Return the strategy to use for resolving errors into message codes.  */ ;/**  * Return the strategy to use for resolving errors into message codes.  */ @Nullable public final MessageCodesResolver getMessageCodesResolver() {     return this.messageCodesResolver. }
true;public,final;1;3;/**  * Set the strategy to use for processing binding errors, that is,  * required field errors and {@code PropertyAccessException}s.  * <p>Default is {@code null}, that is, using the default strategy  * of the data binder.  * @see org.springframework.validation.DataBinder#setBindingErrorProcessor  */ ;/**  * Set the strategy to use for processing binding errors, that is,  * required field errors and {@code PropertyAccessException}s.  * <p>Default is {@code null}, that is, using the default strategy  * of the data binder.  * @see org.springframework.validation.DataBinder#setBindingErrorProcessor  */ public final void setBindingErrorProcessor(@Nullable BindingErrorProcessor bindingErrorProcessor) {     this.bindingErrorProcessor = bindingErrorProcessor. }
true;public,final;0;4;/**  * Return the strategy to use for processing binding errors.  */ ;/**  * Return the strategy to use for processing binding errors.  */ @Nullable public final BindingErrorProcessor getBindingErrorProcessor() {     return this.bindingErrorProcessor. }
true;public,final;1;3;/**  * Set the Validator to apply after each binding step.  */ ;/**  * Set the Validator to apply after each binding step.  */ public final void setValidator(@Nullable Validator validator) {     this.validator = validator. }
true;public,final;0;4;/**  * Return the Validator to apply after each binding step, if any.  */ ;/**  * Return the Validator to apply after each binding step, if any.  */ @Nullable public final Validator getValidator() {     return this.validator. }
true;public,final;1;3;/**  * Specify a ConversionService which will apply to every DataBinder.  * @since 3.0  */ ;/**  * Specify a ConversionService which will apply to every DataBinder.  * @since 3.0  */ public final void setConversionService(@Nullable ConversionService conversionService) {     this.conversionService = conversionService. }
true;public,final;0;4;/**  * Return the ConversionService which will apply to every DataBinder.  */ ;/**  * Return the ConversionService which will apply to every DataBinder.  */ @Nullable public final ConversionService getConversionService() {     return this.conversionService. }
true;public,final;1;3;/**  * Specify a single PropertyEditorRegistrar to be applied to every DataBinder.  */ ;/**  * Specify a single PropertyEditorRegistrar to be applied to every DataBinder.  */ public final void setPropertyEditorRegistrar(PropertyEditorRegistrar propertyEditorRegistrar) {     this.propertyEditorRegistrars = new PropertyEditorRegistrar[] { propertyEditorRegistrar }. }
true;public,final;1;3;/**  * Specify multiple PropertyEditorRegistrars to be applied to every DataBinder.  */ ;/**  * Specify multiple PropertyEditorRegistrars to be applied to every DataBinder.  */ public final void setPropertyEditorRegistrars(@Nullable PropertyEditorRegistrar[] propertyEditorRegistrars) {     this.propertyEditorRegistrars = propertyEditorRegistrars. }
true;public,final;0;4;/**  * Return the PropertyEditorRegistrars to be applied to every DataBinder.  */ ;/**  * Return the PropertyEditorRegistrars to be applied to every DataBinder.  */ @Nullable public final PropertyEditorRegistrar[] getPropertyEditorRegistrars() {     return this.propertyEditorRegistrars. }
false;public;1;25;;@Override public void initBinder(WebDataBinder binder) {     binder.setAutoGrowNestedPaths(this.autoGrowNestedPaths).     if (this.directFieldAccess) {         binder.initDirectFieldAccess().     }     if (this.messageCodesResolver != null) {         binder.setMessageCodesResolver(this.messageCodesResolver).     }     if (this.bindingErrorProcessor != null) {         binder.setBindingErrorProcessor(this.bindingErrorProcessor).     }     if (this.validator != null && binder.getTarget() != null && this.validator.supports(binder.getTarget().getClass())) {         binder.setValidator(this.validator).     }     if (this.conversionService != null) {         binder.setConversionService(this.conversionService).     }     if (this.propertyEditorRegistrars != null) {         for (PropertyEditorRegistrar propertyEditorRegistrar : this.propertyEditorRegistrars) {             propertyEditorRegistrar.registerCustomEditors(binder).         }     } }
