commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the ServletContext attributes to expose as key-value pairs.  * Each key will be considered a ServletContext attributes key,  * and each value will be used as corresponding attribute value.  * <p>Usually, you will use bean references for the values,  * to export Spring-defined beans as ServletContext attributes.  * Of course, it is also possible to define plain values to export.  */ ;/**  * Set the ServletContext attributes to expose as key-value pairs.  * Each key will be considered a ServletContext attributes key,  * and each value will be used as corresponding attribute value.  * <p>Usually, you will use bean references for the values,  * to export Spring-defined beans as ServletContext attributes.  * Of course, it is also possible to define plain values to export.  */ public void setAttributes(Map<String, Object> attributes) {     this.attributes = attributes. }
false;public;1;17;;@Override public void setServletContext(ServletContext servletContext) {     if (this.attributes != null) {         for (Map.Entry<String, Object> entry : this.attributes.entrySet()) {             String attributeName = entry.getKey().             if (logger.isDebugEnabled()) {                 if (servletContext.getAttribute(attributeName) != null) {                     logger.debug("Replacing existing ServletContext attribute with name '" + attributeName + "'").                 }             }             servletContext.setAttribute(attributeName, entry.getValue()).             if (logger.isTraceEnabled()) {                 logger.trace("Exported ServletContext attribute with name '" + attributeName + "'").             }         }     } }
