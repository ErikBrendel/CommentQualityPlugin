commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override @Nullable @SuppressWarnings("rawtypes") public Object scanUnsafe(Attr key) {     if (key == Attr.PREFETCH) {         return Integer.MAX_VALUE.     }     if (key == Attr.PARENT) {         return this.source.     }     return null. }
false;public;1;4;;@Override public void subscribe(CoreSubscriber<? super Void> actual) {     this.source.subscribe(new WriteBarrier(actual)). }
false;public,final;1;8;;// Subscriber<T> methods (we're the subscriber to the write source).. @Override public final void onSubscribe(Subscription s) {     if (Operators.validate(this.subscription, s)) {         this.subscription = s.         this.writeCompletionBarrier.connect().         s.request(1).     } }
false;public,final;1;24;;@Override public final void onNext(T item) {     if (this.state == State.READY_TO_WRITE) {         requiredWriteSubscriber().onNext(item).         return.     }     // FIXME revisit in case of reentrant sync deadlock     synchronized (this) {         if (this.state == State.READY_TO_WRITE) {             requiredWriteSubscriber().onNext(item).         } else if (this.state == State.NEW) {             this.item = item.             this.state = State.FIRST_SIGNAL_RECEIVED.             writeFunction.apply(this).subscribe(this.writeCompletionBarrier).         } else {             if (this.subscription != null) {                 this.subscription.cancel().             }             this.writeCompletionBarrier.onError(new IllegalStateException("Unexpected item.")).         }     } }
false;private;0;4;;private Subscriber<? super T> requiredWriteSubscriber() {     Assert.state(this.writeSubscriber != null, "No write subscriber").     return this.writeSubscriber. }
false;public,final;1;19;;@Override public final void onError(Throwable ex) {     if (this.state == State.READY_TO_WRITE) {         requiredWriteSubscriber().onError(ex).         return.     }     synchronized (this) {         if (this.state == State.READY_TO_WRITE) {             requiredWriteSubscriber().onError(ex).         } else if (this.state == State.NEW) {             this.state = State.FIRST_SIGNAL_RECEIVED.             this.writeCompletionBarrier.onError(ex).         } else {             this.error = ex.         }     } }
false;public,final;0;20;;@Override public final void onComplete() {     if (this.state == State.READY_TO_WRITE) {         requiredWriteSubscriber().onComplete().         return.     }     synchronized (this) {         if (this.state == State.READY_TO_WRITE) {             requiredWriteSubscriber().onComplete().         } else if (this.state == State.NEW) {             this.completed = true.             this.state = State.FIRST_SIGNAL_RECEIVED.             writeFunction.apply(this).subscribe(this.writeCompletionBarrier).         } else {             this.completed = true.         }     } }
false;public;0;4;;@Override public Context currentContext() {     return this.writeCompletionBarrier.currentContext(). }
false;public;1;33;;// Subscription methods (we're the Subscription to the writeSubscriber).. @Override public void request(long n) {     Subscription s = this.subscription.     if (s == null) {         return.     }     if (this.state == State.READY_TO_WRITE) {         s.request(n).         return.     }     synchronized (this) {         if (this.writeSubscriber != null) {             if (this.state == State.EMITTING_CACHED_SIGNALS) {                 this.demandBeforeReadyToWrite = n.                 return.             }             try {                 this.state = State.EMITTING_CACHED_SIGNALS.                 if (emitCachedSignals()) {                     return.                 }                 n = n + this.demandBeforeReadyToWrite - 1.                 if (n == 0) {                     return.                 }             } finally {                 this.state = State.READY_TO_WRITE.             }         }     }     s.request(n). }
false;private;0;14;;private boolean emitCachedSignals() {     if (this.item != null) {         requiredWriteSubscriber().onNext(this.item).     }     if (this.error != null) {         requiredWriteSubscriber().onError(this.error).         return true.     }     if (this.completed) {         requiredWriteSubscriber().onComplete().         return true.     }     return false. }
false;public;0;8;;@Override public void cancel() {     Subscription s = this.subscription.     if (s != null) {         this.subscription = null.         s.cancel().     } }
false;public;1;14;;// Publisher<T> methods (we're the Publisher to the writeSubscriber).. @Override public void subscribe(Subscriber<? super T> writeSubscriber) {     synchronized (this) {         Assert.state(this.writeSubscriber == null, "Only one write subscriber supported").         this.writeSubscriber = writeSubscriber.         if (this.error != null || this.completed) {             this.writeSubscriber.onSubscribe(Operators.emptySubscription()).             emitCachedSignals().         } else {             this.writeSubscriber.onSubscribe(this).         }     } }
true;public;0;3;/**  * Connect the underlying completion subscriber to this barrier in order  * to track cancel signals and pass them on to the write barrier.  */ ;/**  * Connect the underlying completion subscriber to this barrier in order  * to track cancel signals and pass them on to the write barrier.  */ public void connect() {     this.completionSubscriber.onSubscribe(this). }
false;public;1;5;;// Subscriber methods (we're the subscriber to the write function).. @Override public void onSubscribe(Subscription subscription) {     this.subscription = subscription.     subscription.request(Long.MAX_VALUE). }
false;public;1;3;;@Override public void onNext(Void aVoid) { }
false;public;1;4;;@Override public void onError(Throwable ex) {     this.completionSubscriber.onError(ex). }
false;public;0;4;;@Override public void onComplete() {     this.completionSubscriber.onComplete(). }
false;public;0;4;;@Override public Context currentContext() {     return this.completionSubscriber.currentContext(). }
false;public;1;4;;@Override public void request(long n) { // Ignore: we don't produce data }
false;public;0;8;;@Override public void cancel() {     this.writeBarrier.cancel().     Subscription subscription = this.subscription.     if (subscription != null) {         subscription.cancel().     } }
