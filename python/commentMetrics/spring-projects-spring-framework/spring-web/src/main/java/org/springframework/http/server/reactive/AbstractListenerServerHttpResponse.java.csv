commented;modifiers;parameterAmount;loc;comment;code
false;protected,final;1;4;;@Override protected final Mono<Void> writeWithInternal(Publisher<? extends DataBuffer> body) {     return writeAndFlushWithInternal(Mono.just(body)). }
false;protected,final;1;14;;@Override protected final Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<? extends DataBuffer>> body) {     if (this.writeCalled.compareAndSet(false, true)) {         Processor<? super Publisher<? extends DataBuffer>, Void> processor = createBodyFlushProcessor().         return Mono.from(subscriber -> {             body.subscribe(processor).             processor.subscribe(subscriber).         }).     }     return Mono.error(new IllegalStateException("writeWith() or writeAndFlushWith() has already been called")). }
true;protected,abstract;0;1;/**  * Abstract template method to create a {@code Processor<Publisher<DataBuffer>, Void>}  * that will write the response body with flushes to the underlying output. Called from  * {@link #writeAndFlushWithInternal(Publisher)}.  */ ;/**  * Abstract template method to create a {@code Processor<Publisher<DataBuffer>, Void>}  * that will write the response body with flushes to the underlying output. Called from  * {@link #writeAndFlushWithInternal(Publisher)}.  */ protected abstract Processor<? super Publisher<? extends DataBuffer>, Void> createBodyFlushProcessor().
