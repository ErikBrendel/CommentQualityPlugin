# id;timestamp;commentText;codeText;commentWords;codeWords
DecoratingNavigationHandler -> protected final void callNextHandlerInChain( 			FacesContext facesContext, String fromAction, String outcome, NavigationHandler originalNavigationHandler);1328020251;Method to be called by subclasses when intending to delegate to the next_handler in the NavigationHandler chain. Will always call the most_appropriate next handler, either the decorated NavigationHandler passed_in as constructor argument or the original NavigationHandler as passed_into this method - according to the position of this instance in the chain._<p>Will call the decorated NavigationHandler specified as constructor_argument, if any. In case of a DecoratingNavigationHandler as target, the_original NavigationHandler as passed into this method will be passed on to_the next element in the chain: This ensures propagation of the original_handler that the last element in the handler chain might delegate back to._In case of a standard NavigationHandler as target, the original handler_will simply not get passed on_ no delegating back to the original is_possible further down the chain in that scenario._<p>If no decorated NavigationHandler specified as constructor argument,_this instance is the last element in the chain. Hence, this method will_call the original NavigationHandler as passed into this method. If no_original NavigantionHandler has been passed in (for example if this_instance is the last element in a chain with standard NavigationHandlers_as earlier elements), this method corresponds to a no-op._@param facesContext the current JSF context_@param fromAction the action binding expression that was evaluated to retrieve the_specified outcome, or <code>null</code> if the outcome was acquired by some other means_@param outcome the logical outcome returned by a previous invoked application action_(which may be <code>null</code>)_@param originalNavigationHandler the original NavigationHandler,_or <code>null</code> if none;protected final void callNextHandlerInChain(_			FacesContext facesContext, String fromAction, String outcome, NavigationHandler originalNavigationHandler) {__		NavigationHandler decoratedNavigationHandler = getDecoratedNavigationHandler()___		if (decoratedNavigationHandler instanceof DecoratingNavigationHandler) {_			_			_			DecoratingNavigationHandler decHandler = (DecoratingNavigationHandler) decoratedNavigationHandler__			decHandler.handleNavigation(facesContext, fromAction, outcome, originalNavigationHandler)__		}_		else if (decoratedNavigationHandler != null) {_			_			_			_			decoratedNavigationHandler.handleNavigation(facesContext, fromAction, outcome)__		}_		else if (originalNavigationHandler != null) {_			_			_			originalNavigationHandler.handleNavigation(facesContext, fromAction, outcome)__		}_	};method,to,be,called,by,subclasses,when,intending,to,delegate,to,the,next,handler,in,the,navigation,handler,chain,will,always,call,the,most,appropriate,next,handler,either,the,decorated,navigation,handler,passed,in,as,constructor,argument,or,the,original,navigation,handler,as,passed,into,this,method,according,to,the,position,of,this,instance,in,the,chain,p,will,call,the,decorated,navigation,handler,specified,as,constructor,argument,if,any,in,case,of,a,decorating,navigation,handler,as,target,the,original,navigation,handler,as,passed,into,this,method,will,be,passed,on,to,the,next,element,in,the,chain,this,ensures,propagation,of,the,original,handler,that,the,last,element,in,the,handler,chain,might,delegate,back,to,in,case,of,a,standard,navigation,handler,as,target,the,original,handler,will,simply,not,get,passed,on,no,delegating,back,to,the,original,is,possible,further,down,the,chain,in,that,scenario,p,if,no,decorated,navigation,handler,specified,as,constructor,argument,this,instance,is,the,last,element,in,the,chain,hence,this,method,will,call,the,original,navigation,handler,as,passed,into,this,method,if,no,original,navigantion,handler,has,been,passed,in,for,example,if,this,instance,is,the,last,element,in,a,chain,with,standard,navigation,handlers,as,earlier,elements,this,method,corresponds,to,a,no,op,param,faces,context,the,current,jsf,context,param,from,action,the,action,binding,expression,that,was,evaluated,to,retrieve,the,specified,outcome,or,code,null,code,if,the,outcome,was,acquired,by,some,other,means,param,outcome,the,logical,outcome,returned,by,a,previous,invoked,application,action,which,may,be,code,null,code,param,original,navigation,handler,the,original,navigation,handler,or,code,null,code,if,none;protected,final,void,call,next,handler,in,chain,faces,context,faces,context,string,from,action,string,outcome,navigation,handler,original,navigation,handler,navigation,handler,decorated,navigation,handler,get,decorated,navigation,handler,if,decorated,navigation,handler,instanceof,decorating,navigation,handler,decorating,navigation,handler,dec,handler,decorating,navigation,handler,decorated,navigation,handler,dec,handler,handle,navigation,faces,context,from,action,outcome,original,navigation,handler,else,if,decorated,navigation,handler,null,decorated,navigation,handler,handle,navigation,faces,context,from,action,outcome,else,if,original,navigation,handler,null,original,navigation,handler,handle,navigation,faces,context,from,action,outcome
DecoratingNavigationHandler -> protected final void callNextHandlerInChain( 			FacesContext facesContext, String fromAction, String outcome, NavigationHandler originalNavigationHandler);1354631886;Method to be called by subclasses when intending to delegate to the next_handler in the NavigationHandler chain. Will always call the most_appropriate next handler, either the decorated NavigationHandler passed_in as constructor argument or the original NavigationHandler as passed_into this method - according to the position of this instance in the chain._<p>Will call the decorated NavigationHandler specified as constructor_argument, if any. In case of a DecoratingNavigationHandler as target, the_original NavigationHandler as passed into this method will be passed on to_the next element in the chain: This ensures propagation of the original_handler that the last element in the handler chain might delegate back to._In case of a standard NavigationHandler as target, the original handler_will simply not get passed on_ no delegating back to the original is_possible further down the chain in that scenario._<p>If no decorated NavigationHandler specified as constructor argument,_this instance is the last element in the chain. Hence, this method will_call the original NavigationHandler as passed into this method. If no_original NavigantionHandler has been passed in (for example if this_instance is the last element in a chain with standard NavigationHandlers_as earlier elements), this method corresponds to a no-op._@param facesContext the current JSF context_@param fromAction the action binding expression that was evaluated to retrieve the_specified outcome, or <code>null</code> if the outcome was acquired by some other means_@param outcome the logical outcome returned by a previous invoked application action_(which may be <code>null</code>)_@param originalNavigationHandler the original NavigationHandler,_or <code>null</code> if none;protected final void callNextHandlerInChain(_			FacesContext facesContext, String fromAction, String outcome, NavigationHandler originalNavigationHandler) {__		NavigationHandler decoratedNavigationHandler = getDecoratedNavigationHandler()___		if (decoratedNavigationHandler instanceof DecoratingNavigationHandler) {_			_			_			DecoratingNavigationHandler decHandler = (DecoratingNavigationHandler) decoratedNavigationHandler__			decHandler.handleNavigation(facesContext, fromAction, outcome, originalNavigationHandler)__		}_		else if (decoratedNavigationHandler != null) {_			_			_			_			decoratedNavigationHandler.handleNavigation(facesContext, fromAction, outcome)__		}_		else if (originalNavigationHandler != null) {_			_			_			originalNavigationHandler.handleNavigation(facesContext, fromAction, outcome)__		}_	};method,to,be,called,by,subclasses,when,intending,to,delegate,to,the,next,handler,in,the,navigation,handler,chain,will,always,call,the,most,appropriate,next,handler,either,the,decorated,navigation,handler,passed,in,as,constructor,argument,or,the,original,navigation,handler,as,passed,into,this,method,according,to,the,position,of,this,instance,in,the,chain,p,will,call,the,decorated,navigation,handler,specified,as,constructor,argument,if,any,in,case,of,a,decorating,navigation,handler,as,target,the,original,navigation,handler,as,passed,into,this,method,will,be,passed,on,to,the,next,element,in,the,chain,this,ensures,propagation,of,the,original,handler,that,the,last,element,in,the,handler,chain,might,delegate,back,to,in,case,of,a,standard,navigation,handler,as,target,the,original,handler,will,simply,not,get,passed,on,no,delegating,back,to,the,original,is,possible,further,down,the,chain,in,that,scenario,p,if,no,decorated,navigation,handler,specified,as,constructor,argument,this,instance,is,the,last,element,in,the,chain,hence,this,method,will,call,the,original,navigation,handler,as,passed,into,this,method,if,no,original,navigantion,handler,has,been,passed,in,for,example,if,this,instance,is,the,last,element,in,a,chain,with,standard,navigation,handlers,as,earlier,elements,this,method,corresponds,to,a,no,op,param,faces,context,the,current,jsf,context,param,from,action,the,action,binding,expression,that,was,evaluated,to,retrieve,the,specified,outcome,or,code,null,code,if,the,outcome,was,acquired,by,some,other,means,param,outcome,the,logical,outcome,returned,by,a,previous,invoked,application,action,which,may,be,code,null,code,param,original,navigation,handler,the,original,navigation,handler,or,code,null,code,if,none;protected,final,void,call,next,handler,in,chain,faces,context,faces,context,string,from,action,string,outcome,navigation,handler,original,navigation,handler,navigation,handler,decorated,navigation,handler,get,decorated,navigation,handler,if,decorated,navigation,handler,instanceof,decorating,navigation,handler,decorating,navigation,handler,dec,handler,decorating,navigation,handler,decorated,navigation,handler,dec,handler,handle,navigation,faces,context,from,action,outcome,original,navigation,handler,else,if,decorated,navigation,handler,null,decorated,navigation,handler,handle,navigation,faces,context,from,action,outcome,else,if,original,navigation,handler,null,original,navigation,handler,handle,navigation,faces,context,from,action,outcome
DecoratingNavigationHandler -> protected final void callNextHandlerInChain( 			FacesContext facesContext, String fromAction, String outcome, NavigationHandler originalNavigationHandler);1356735495;Method to be called by subclasses when intending to delegate to the next_handler in the NavigationHandler chain. Will always call the most_appropriate next handler, either the decorated NavigationHandler passed_in as constructor argument or the original NavigationHandler as passed_into this method - according to the position of this instance in the chain._<p>Will call the decorated NavigationHandler specified as constructor_argument, if any. In case of a DecoratingNavigationHandler as target, the_original NavigationHandler as passed into this method will be passed on to_the next element in the chain: This ensures propagation of the original_handler that the last element in the handler chain might delegate back to._In case of a standard NavigationHandler as target, the original handler_will simply not get passed on_ no delegating back to the original is_possible further down the chain in that scenario._<p>If no decorated NavigationHandler specified as constructor argument,_this instance is the last element in the chain. Hence, this method will_call the original NavigationHandler as passed into this method. If no_original NavigantionHandler has been passed in (for example if this_instance is the last element in a chain with standard NavigationHandlers_as earlier elements), this method corresponds to a no-op._@param facesContext the current JSF context_@param fromAction the action binding expression that was evaluated to retrieve the_specified outcome, or {@code null} if the outcome was acquired by some other means_@param outcome the logical outcome returned by a previous invoked application action_(which may be {@code null})_@param originalNavigationHandler the original NavigationHandler,_or {@code null} if none;protected final void callNextHandlerInChain(_			FacesContext facesContext, String fromAction, String outcome, NavigationHandler originalNavigationHandler) {__		NavigationHandler decoratedNavigationHandler = getDecoratedNavigationHandler()___		if (decoratedNavigationHandler instanceof DecoratingNavigationHandler) {_			_			_			DecoratingNavigationHandler decHandler = (DecoratingNavigationHandler) decoratedNavigationHandler__			decHandler.handleNavigation(facesContext, fromAction, outcome, originalNavigationHandler)__		}_		else if (decoratedNavigationHandler != null) {_			_			_			_			decoratedNavigationHandler.handleNavigation(facesContext, fromAction, outcome)__		}_		else if (originalNavigationHandler != null) {_			_			_			originalNavigationHandler.handleNavigation(facesContext, fromAction, outcome)__		}_	};method,to,be,called,by,subclasses,when,intending,to,delegate,to,the,next,handler,in,the,navigation,handler,chain,will,always,call,the,most,appropriate,next,handler,either,the,decorated,navigation,handler,passed,in,as,constructor,argument,or,the,original,navigation,handler,as,passed,into,this,method,according,to,the,position,of,this,instance,in,the,chain,p,will,call,the,decorated,navigation,handler,specified,as,constructor,argument,if,any,in,case,of,a,decorating,navigation,handler,as,target,the,original,navigation,handler,as,passed,into,this,method,will,be,passed,on,to,the,next,element,in,the,chain,this,ensures,propagation,of,the,original,handler,that,the,last,element,in,the,handler,chain,might,delegate,back,to,in,case,of,a,standard,navigation,handler,as,target,the,original,handler,will,simply,not,get,passed,on,no,delegating,back,to,the,original,is,possible,further,down,the,chain,in,that,scenario,p,if,no,decorated,navigation,handler,specified,as,constructor,argument,this,instance,is,the,last,element,in,the,chain,hence,this,method,will,call,the,original,navigation,handler,as,passed,into,this,method,if,no,original,navigantion,handler,has,been,passed,in,for,example,if,this,instance,is,the,last,element,in,a,chain,with,standard,navigation,handlers,as,earlier,elements,this,method,corresponds,to,a,no,op,param,faces,context,the,current,jsf,context,param,from,action,the,action,binding,expression,that,was,evaluated,to,retrieve,the,specified,outcome,or,code,null,if,the,outcome,was,acquired,by,some,other,means,param,outcome,the,logical,outcome,returned,by,a,previous,invoked,application,action,which,may,be,code,null,param,original,navigation,handler,the,original,navigation,handler,or,code,null,if,none;protected,final,void,call,next,handler,in,chain,faces,context,faces,context,string,from,action,string,outcome,navigation,handler,original,navigation,handler,navigation,handler,decorated,navigation,handler,get,decorated,navigation,handler,if,decorated,navigation,handler,instanceof,decorating,navigation,handler,decorating,navigation,handler,dec,handler,decorating,navigation,handler,decorated,navigation,handler,dec,handler,handle,navigation,faces,context,from,action,outcome,original,navigation,handler,else,if,decorated,navigation,handler,null,decorated,navigation,handler,handle,navigation,faces,context,from,action,outcome,else,if,original,navigation,handler,null,original,navigation,handler,handle,navigation,faces,context,from,action,outcome
DecoratingNavigationHandler -> protected final void callNextHandlerInChain( 			FacesContext facesContext, String fromAction, String outcome, NavigationHandler originalNavigationHandler);1385423968;Method to be called by subclasses when intending to delegate to the next_handler in the NavigationHandler chain. Will always call the most_appropriate next handler, either the decorated NavigationHandler passed_in as constructor argument or the original NavigationHandler as passed_into this method - according to the position of this instance in the chain._<p>Will call the decorated NavigationHandler specified as constructor_argument, if any. In case of a DecoratingNavigationHandler as target, the_original NavigationHandler as passed into this method will be passed on to_the next element in the chain: This ensures propagation of the original_handler that the last element in the handler chain might delegate back to._In case of a standard NavigationHandler as target, the original handler_will simply not get passed on_ no delegating back to the original is_possible further down the chain in that scenario._<p>If no decorated NavigationHandler specified as constructor argument,_this instance is the last element in the chain. Hence, this method will_call the original NavigationHandler as passed into this method. If no_original NavigationHandler has been passed in (for example if this_instance is the last element in a chain with standard NavigationHandlers_as earlier elements), this method corresponds to a no-op._@param facesContext the current JSF context_@param fromAction the action binding expression that was evaluated to retrieve the_specified outcome, or {@code null} if the outcome was acquired by some other means_@param outcome the logical outcome returned by a previous invoked application action_(which may be {@code null})_@param originalNavigationHandler the original NavigationHandler,_or {@code null} if none;protected final void callNextHandlerInChain(_			FacesContext facesContext, String fromAction, String outcome, NavigationHandler originalNavigationHandler) {__		NavigationHandler decoratedNavigationHandler = getDecoratedNavigationHandler()___		if (decoratedNavigationHandler instanceof DecoratingNavigationHandler) {_			_			_			DecoratingNavigationHandler decHandler = (DecoratingNavigationHandler) decoratedNavigationHandler__			decHandler.handleNavigation(facesContext, fromAction, outcome, originalNavigationHandler)__		}_		else if (decoratedNavigationHandler != null) {_			_			_			_			decoratedNavigationHandler.handleNavigation(facesContext, fromAction, outcome)__		}_		else if (originalNavigationHandler != null) {_			_			_			originalNavigationHandler.handleNavigation(facesContext, fromAction, outcome)__		}_	};method,to,be,called,by,subclasses,when,intending,to,delegate,to,the,next,handler,in,the,navigation,handler,chain,will,always,call,the,most,appropriate,next,handler,either,the,decorated,navigation,handler,passed,in,as,constructor,argument,or,the,original,navigation,handler,as,passed,into,this,method,according,to,the,position,of,this,instance,in,the,chain,p,will,call,the,decorated,navigation,handler,specified,as,constructor,argument,if,any,in,case,of,a,decorating,navigation,handler,as,target,the,original,navigation,handler,as,passed,into,this,method,will,be,passed,on,to,the,next,element,in,the,chain,this,ensures,propagation,of,the,original,handler,that,the,last,element,in,the,handler,chain,might,delegate,back,to,in,case,of,a,standard,navigation,handler,as,target,the,original,handler,will,simply,not,get,passed,on,no,delegating,back,to,the,original,is,possible,further,down,the,chain,in,that,scenario,p,if,no,decorated,navigation,handler,specified,as,constructor,argument,this,instance,is,the,last,element,in,the,chain,hence,this,method,will,call,the,original,navigation,handler,as,passed,into,this,method,if,no,original,navigation,handler,has,been,passed,in,for,example,if,this,instance,is,the,last,element,in,a,chain,with,standard,navigation,handlers,as,earlier,elements,this,method,corresponds,to,a,no,op,param,faces,context,the,current,jsf,context,param,from,action,the,action,binding,expression,that,was,evaluated,to,retrieve,the,specified,outcome,or,code,null,if,the,outcome,was,acquired,by,some,other,means,param,outcome,the,logical,outcome,returned,by,a,previous,invoked,application,action,which,may,be,code,null,param,original,navigation,handler,the,original,navigation,handler,or,code,null,if,none;protected,final,void,call,next,handler,in,chain,faces,context,faces,context,string,from,action,string,outcome,navigation,handler,original,navigation,handler,navigation,handler,decorated,navigation,handler,get,decorated,navigation,handler,if,decorated,navigation,handler,instanceof,decorating,navigation,handler,decorating,navigation,handler,dec,handler,decorating,navigation,handler,decorated,navigation,handler,dec,handler,handle,navigation,faces,context,from,action,outcome,original,navigation,handler,else,if,decorated,navigation,handler,null,decorated,navigation,handler,handle,navigation,faces,context,from,action,outcome,else,if,original,navigation,handler,null,original,navigation,handler,handle,navigation,faces,context,from,action,outcome
DecoratingNavigationHandler -> @Override 	public final void handleNavigation(FacesContext facesContext, String fromAction, String outcome);1328020251;This implementation of the standard JSF <code>handleNavigation</code> method_delegates to the overloaded variant, passing in constructor-injected_NavigationHandler as argument._@see #handleNavigation(javax.faces.context.FacesContext, String, String, javax.faces.application.NavigationHandler);@Override_	public final void handleNavigation(FacesContext facesContext, String fromAction, String outcome) {_		handleNavigation(facesContext, fromAction, outcome, this.decoratedNavigationHandler)__	};this,implementation,of,the,standard,jsf,code,handle,navigation,code,method,delegates,to,the,overloaded,variant,passing,in,constructor,injected,navigation,handler,as,argument,see,handle,navigation,javax,faces,context,faces,context,string,string,javax,faces,application,navigation,handler;override,public,final,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,handle,navigation,faces,context,from,action,outcome,this,decorated,navigation,handler
DecoratingNavigationHandler -> @Override 	public final void handleNavigation(FacesContext facesContext, String fromAction, String outcome);1354631886;This implementation of the standard JSF <code>handleNavigation</code> method_delegates to the overloaded variant, passing in constructor-injected_NavigationHandler as argument._@see #handleNavigation(javax.faces.context.FacesContext, String, String, javax.faces.application.NavigationHandler);@Override_	public final void handleNavigation(FacesContext facesContext, String fromAction, String outcome) {_		handleNavigation(facesContext, fromAction, outcome, this.decoratedNavigationHandler)__	};this,implementation,of,the,standard,jsf,code,handle,navigation,code,method,delegates,to,the,overloaded,variant,passing,in,constructor,injected,navigation,handler,as,argument,see,handle,navigation,javax,faces,context,faces,context,string,string,javax,faces,application,navigation,handler;override,public,final,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,handle,navigation,faces,context,from,action,outcome,this,decorated,navigation,handler
DecoratingNavigationHandler -> @Override 	public final void handleNavigation(FacesContext facesContext, String fromAction, String outcome);1356735495;This implementation of the standard JSF {@code handleNavigation} method_delegates to the overloaded variant, passing in constructor-injected_NavigationHandler as argument._@see #handleNavigation(javax.faces.context.FacesContext, String, String, javax.faces.application.NavigationHandler);@Override_	public final void handleNavigation(FacesContext facesContext, String fromAction, String outcome) {_		handleNavigation(facesContext, fromAction, outcome, this.decoratedNavigationHandler)__	};this,implementation,of,the,standard,jsf,code,handle,navigation,method,delegates,to,the,overloaded,variant,passing,in,constructor,injected,navigation,handler,as,argument,see,handle,navigation,javax,faces,context,faces,context,string,string,javax,faces,application,navigation,handler;override,public,final,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,handle,navigation,faces,context,from,action,outcome,this,decorated,navigation,handler
DecoratingNavigationHandler -> @Override 	public final void handleNavigation(FacesContext facesContext, String fromAction, String outcome);1385423968;This implementation of the standard JSF {@code handleNavigation} method_delegates to the overloaded variant, passing in constructor-injected_NavigationHandler as argument._@see #handleNavigation(javax.faces.context.FacesContext, String, String, javax.faces.application.NavigationHandler);@Override_	public final void handleNavigation(FacesContext facesContext, String fromAction, String outcome) {_		handleNavigation(facesContext, fromAction, outcome, this.decoratedNavigationHandler)__	};this,implementation,of,the,standard,jsf,code,handle,navigation,method,delegates,to,the,overloaded,variant,passing,in,constructor,injected,navigation,handler,as,argument,see,handle,navigation,javax,faces,context,faces,context,string,string,javax,faces,application,navigation,handler;override,public,final,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,handle,navigation,faces,context,from,action,outcome,this,decorated,navigation,handler
DecoratingNavigationHandler -> @Override 	public final void handleNavigation(FacesContext facesContext, String fromAction, String outcome);1495868221;This implementation of the standard JSF {@code handleNavigation} method_delegates to the overloaded variant, passing in constructor-injected_NavigationHandler as argument._@see #handleNavigation(javax.faces.context.FacesContext, String, String, javax.faces.application.NavigationHandler);@Override_	public final void handleNavigation(FacesContext facesContext, String fromAction, String outcome) {_		handleNavigation(facesContext, fromAction, outcome, this.decoratedNavigationHandler)__	};this,implementation,of,the,standard,jsf,code,handle,navigation,method,delegates,to,the,overloaded,variant,passing,in,constructor,injected,navigation,handler,as,argument,see,handle,navigation,javax,faces,context,faces,context,string,string,javax,faces,application,navigation,handler;override,public,final,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,handle,navigation,faces,context,from,action,outcome,this,decorated,navigation,handler
DecoratingNavigationHandler -> @Override 	public final void handleNavigation(FacesContext facesContext, String fromAction, String outcome);1500448076;This implementation of the standard JSF {@code handleNavigation} method_delegates to the overloaded variant, passing in constructor-injected_NavigationHandler as argument._@see #handleNavigation(javax.faces.context.FacesContext, String, String, javax.faces.application.NavigationHandler);@Override_	public final void handleNavigation(FacesContext facesContext, String fromAction, String outcome) {_		handleNavigation(facesContext, fromAction, outcome, this.decoratedNavigationHandler)__	};this,implementation,of,the,standard,jsf,code,handle,navigation,method,delegates,to,the,overloaded,variant,passing,in,constructor,injected,navigation,handler,as,argument,see,handle,navigation,javax,faces,context,faces,context,string,string,javax,faces,application,navigation,handler;override,public,final,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,handle,navigation,faces,context,from,action,outcome,this,decorated,navigation,handler
DecoratingNavigationHandler -> @Override 	public final void handleNavigation(FacesContext facesContext, String fromAction, String outcome);1508532146;This implementation of the standard JSF {@code handleNavigation} method_delegates to the overloaded variant, passing in constructor-injected_NavigationHandler as argument._@see #handleNavigation(javax.faces.context.FacesContext, String, String, javax.faces.application.NavigationHandler);@Override_	public final void handleNavigation(FacesContext facesContext, String fromAction, String outcome) {_		handleNavigation(facesContext, fromAction, outcome, this.decoratedNavigationHandler)__	};this,implementation,of,the,standard,jsf,code,handle,navigation,method,delegates,to,the,overloaded,variant,passing,in,constructor,injected,navigation,handler,as,argument,see,handle,navigation,javax,faces,context,faces,context,string,string,javax,faces,application,navigation,handler;override,public,final,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,handle,navigation,faces,context,from,action,outcome,this,decorated,navigation,handler
DecoratingNavigationHandler -> protected final void callNextHandlerInChain( 			FacesContext facesContext, @Nullable String fromAction, @Nullable String outcome, @Nullable NavigationHandler originalNavigationHandler);1495868221;Method to be called by subclasses when intending to delegate to the next_handler in the NavigationHandler chain. Will always call the most_appropriate next handler, either the decorated NavigationHandler passed_in as constructor argument or the original NavigationHandler as passed_into this method - according to the position of this instance in the chain._<p>Will call the decorated NavigationHandler specified as constructor_argument, if any. In case of a DecoratingNavigationHandler as target, the_original NavigationHandler as passed into this method will be passed on to_the next element in the chain: This ensures propagation of the original_handler that the last element in the handler chain might delegate back to._In case of a standard NavigationHandler as target, the original handler_will simply not get passed on_ no delegating back to the original is_possible further down the chain in that scenario._<p>If no decorated NavigationHandler specified as constructor argument,_this instance is the last element in the chain. Hence, this method will_call the original NavigationHandler as passed into this method. If no_original NavigationHandler has been passed in (for example if this_instance is the last element in a chain with standard NavigationHandlers_as earlier elements), this method corresponds to a no-op._@param facesContext the current JSF context_@param fromAction the action binding expression that was evaluated to retrieve the_specified outcome, or {@code null} if the outcome was acquired by some other means_@param outcome the logical outcome returned by a previous invoked application action_(which may be {@code null})_@param originalNavigationHandler the original NavigationHandler,_or {@code null} if none;protected final void callNextHandlerInChain(_			FacesContext facesContext, @Nullable String fromAction, @Nullable String outcome, @Nullable NavigationHandler originalNavigationHandler) {__		NavigationHandler decoratedNavigationHandler = getDecoratedNavigationHandler()___		if (decoratedNavigationHandler instanceof DecoratingNavigationHandler) {_			_			_			DecoratingNavigationHandler decHandler = (DecoratingNavigationHandler) decoratedNavigationHandler__			decHandler.handleNavigation(facesContext, fromAction, outcome, originalNavigationHandler)__		}_		else if (decoratedNavigationHandler != null) {_			_			_			_			decoratedNavigationHandler.handleNavigation(facesContext, fromAction, outcome)__		}_		else if (originalNavigationHandler != null) {_			_			_			originalNavigationHandler.handleNavigation(facesContext, fromAction, outcome)__		}_	};method,to,be,called,by,subclasses,when,intending,to,delegate,to,the,next,handler,in,the,navigation,handler,chain,will,always,call,the,most,appropriate,next,handler,either,the,decorated,navigation,handler,passed,in,as,constructor,argument,or,the,original,navigation,handler,as,passed,into,this,method,according,to,the,position,of,this,instance,in,the,chain,p,will,call,the,decorated,navigation,handler,specified,as,constructor,argument,if,any,in,case,of,a,decorating,navigation,handler,as,target,the,original,navigation,handler,as,passed,into,this,method,will,be,passed,on,to,the,next,element,in,the,chain,this,ensures,propagation,of,the,original,handler,that,the,last,element,in,the,handler,chain,might,delegate,back,to,in,case,of,a,standard,navigation,handler,as,target,the,original,handler,will,simply,not,get,passed,on,no,delegating,back,to,the,original,is,possible,further,down,the,chain,in,that,scenario,p,if,no,decorated,navigation,handler,specified,as,constructor,argument,this,instance,is,the,last,element,in,the,chain,hence,this,method,will,call,the,original,navigation,handler,as,passed,into,this,method,if,no,original,navigation,handler,has,been,passed,in,for,example,if,this,instance,is,the,last,element,in,a,chain,with,standard,navigation,handlers,as,earlier,elements,this,method,corresponds,to,a,no,op,param,faces,context,the,current,jsf,context,param,from,action,the,action,binding,expression,that,was,evaluated,to,retrieve,the,specified,outcome,or,code,null,if,the,outcome,was,acquired,by,some,other,means,param,outcome,the,logical,outcome,returned,by,a,previous,invoked,application,action,which,may,be,code,null,param,original,navigation,handler,the,original,navigation,handler,or,code,null,if,none;protected,final,void,call,next,handler,in,chain,faces,context,faces,context,nullable,string,from,action,nullable,string,outcome,nullable,navigation,handler,original,navigation,handler,navigation,handler,decorated,navigation,handler,get,decorated,navigation,handler,if,decorated,navigation,handler,instanceof,decorating,navigation,handler,decorating,navigation,handler,dec,handler,decorating,navigation,handler,decorated,navigation,handler,dec,handler,handle,navigation,faces,context,from,action,outcome,original,navigation,handler,else,if,decorated,navigation,handler,null,decorated,navigation,handler,handle,navigation,faces,context,from,action,outcome,else,if,original,navigation,handler,null,original,navigation,handler,handle,navigation,faces,context,from,action,outcome
DecoratingNavigationHandler -> protected final void callNextHandlerInChain( 			FacesContext facesContext, @Nullable String fromAction, @Nullable String outcome, @Nullable NavigationHandler originalNavigationHandler);1500448076;Method to be called by subclasses when intending to delegate to the next_handler in the NavigationHandler chain. Will always call the most_appropriate next handler, either the decorated NavigationHandler passed_in as constructor argument or the original NavigationHandler as passed_into this method - according to the position of this instance in the chain._<p>Will call the decorated NavigationHandler specified as constructor_argument, if any. In case of a DecoratingNavigationHandler as target, the_original NavigationHandler as passed into this method will be passed on to_the next element in the chain: This ensures propagation of the original_handler that the last element in the handler chain might delegate back to._In case of a standard NavigationHandler as target, the original handler_will simply not get passed on_ no delegating back to the original is_possible further down the chain in that scenario._<p>If no decorated NavigationHandler specified as constructor argument,_this instance is the last element in the chain. Hence, this method will_call the original NavigationHandler as passed into this method. If no_original NavigationHandler has been passed in (for example if this_instance is the last element in a chain with standard NavigationHandlers_as earlier elements), this method corresponds to a no-op._@param facesContext the current JSF context_@param fromAction the action binding expression that was evaluated to retrieve the_specified outcome, or {@code null} if the outcome was acquired by some other means_@param outcome the logical outcome returned by a previous invoked application action_(which may be {@code null})_@param originalNavigationHandler the original NavigationHandler,_or {@code null} if none;protected final void callNextHandlerInChain(_			FacesContext facesContext, @Nullable String fromAction, @Nullable String outcome, @Nullable NavigationHandler originalNavigationHandler) {__		NavigationHandler decoratedNavigationHandler = getDecoratedNavigationHandler()___		if (decoratedNavigationHandler instanceof DecoratingNavigationHandler) {_			_			_			DecoratingNavigationHandler decHandler = (DecoratingNavigationHandler) decoratedNavigationHandler__			decHandler.handleNavigation(facesContext, fromAction, outcome, originalNavigationHandler)__		}_		else if (decoratedNavigationHandler != null) {_			_			_			_			decoratedNavigationHandler.handleNavigation(facesContext, fromAction, outcome)__		}_		else if (originalNavigationHandler != null) {_			_			_			originalNavigationHandler.handleNavigation(facesContext, fromAction, outcome)__		}_	};method,to,be,called,by,subclasses,when,intending,to,delegate,to,the,next,handler,in,the,navigation,handler,chain,will,always,call,the,most,appropriate,next,handler,either,the,decorated,navigation,handler,passed,in,as,constructor,argument,or,the,original,navigation,handler,as,passed,into,this,method,according,to,the,position,of,this,instance,in,the,chain,p,will,call,the,decorated,navigation,handler,specified,as,constructor,argument,if,any,in,case,of,a,decorating,navigation,handler,as,target,the,original,navigation,handler,as,passed,into,this,method,will,be,passed,on,to,the,next,element,in,the,chain,this,ensures,propagation,of,the,original,handler,that,the,last,element,in,the,handler,chain,might,delegate,back,to,in,case,of,a,standard,navigation,handler,as,target,the,original,handler,will,simply,not,get,passed,on,no,delegating,back,to,the,original,is,possible,further,down,the,chain,in,that,scenario,p,if,no,decorated,navigation,handler,specified,as,constructor,argument,this,instance,is,the,last,element,in,the,chain,hence,this,method,will,call,the,original,navigation,handler,as,passed,into,this,method,if,no,original,navigation,handler,has,been,passed,in,for,example,if,this,instance,is,the,last,element,in,a,chain,with,standard,navigation,handlers,as,earlier,elements,this,method,corresponds,to,a,no,op,param,faces,context,the,current,jsf,context,param,from,action,the,action,binding,expression,that,was,evaluated,to,retrieve,the,specified,outcome,or,code,null,if,the,outcome,was,acquired,by,some,other,means,param,outcome,the,logical,outcome,returned,by,a,previous,invoked,application,action,which,may,be,code,null,param,original,navigation,handler,the,original,navigation,handler,or,code,null,if,none;protected,final,void,call,next,handler,in,chain,faces,context,faces,context,nullable,string,from,action,nullable,string,outcome,nullable,navigation,handler,original,navigation,handler,navigation,handler,decorated,navigation,handler,get,decorated,navigation,handler,if,decorated,navigation,handler,instanceof,decorating,navigation,handler,decorating,navigation,handler,dec,handler,decorating,navigation,handler,decorated,navigation,handler,dec,handler,handle,navigation,faces,context,from,action,outcome,original,navigation,handler,else,if,decorated,navigation,handler,null,decorated,navigation,handler,handle,navigation,faces,context,from,action,outcome,else,if,original,navigation,handler,null,original,navigation,handler,handle,navigation,faces,context,from,action,outcome
DecoratingNavigationHandler -> @Nullable 	public final NavigationHandler getDecoratedNavigationHandler();1495868221;Return the fixed original NavigationHandler decorated by this handler, if any_(that is, if passed in through the constructor).;@Nullable_	public final NavigationHandler getDecoratedNavigationHandler() {_		return this.decoratedNavigationHandler__	};return,the,fixed,original,navigation,handler,decorated,by,this,handler,if,any,that,is,if,passed,in,through,the,constructor;nullable,public,final,navigation,handler,get,decorated,navigation,handler,return,this,decorated,navigation,handler
DecoratingNavigationHandler -> @Nullable 	public final NavigationHandler getDecoratedNavigationHandler();1500448076;Return the fixed original NavigationHandler decorated by this handler, if any_(that is, if passed in through the constructor).;@Nullable_	public final NavigationHandler getDecoratedNavigationHandler() {_		return this.decoratedNavigationHandler__	};return,the,fixed,original,navigation,handler,decorated,by,this,handler,if,any,that,is,if,passed,in,through,the,constructor;nullable,public,final,navigation,handler,get,decorated,navigation,handler,return,this,decorated,navigation,handler
DecoratingNavigationHandler -> @Nullable 	public final NavigationHandler getDecoratedNavigationHandler();1508532146;Return the fixed original NavigationHandler decorated by this handler, if any_(that is, if passed in through the constructor).;@Nullable_	public final NavigationHandler getDecoratedNavigationHandler() {_		return this.decoratedNavigationHandler__	};return,the,fixed,original,navigation,handler,decorated,by,this,handler,if,any,that,is,if,passed,in,through,the,constructor;nullable,public,final,navigation,handler,get,decorated,navigation,handler,return,this,decorated,navigation,handler
DecoratingNavigationHandler -> public abstract void handleNavigation( 			FacesContext facesContext, @Nullable String fromAction, @Nullable String outcome, @Nullable NavigationHandler originalNavigationHandler)_;1495868221;Special {@code handleNavigation} variant with explicit NavigationHandler_argument. Either called directly, by code with an explicit original handler,_or called from the standard {@code handleNavigation} method, as_plain JSF-defined NavigationHandler._<p>Implementations should invoke {@code callNextHandlerInChain} to_delegate to the next handler in the chain. This will always call the most_appropriate next handler (see {@code callNextHandlerInChain} javadoc)._Alternatively, the decorated NavigationHandler or the passed-in original_NavigationHandler can also be called directly_ however, this is not as_flexible in terms of reacting to potential positions in the chain._@param facesContext the current JSF context_@param fromAction the action binding expression that was evaluated to retrieve the_specified outcome, or {@code null} if the outcome was acquired by some other means_@param outcome the logical outcome returned by a previous invoked application action_(which may be {@code null})_@param originalNavigationHandler the original NavigationHandler,_or {@code null} if none_@see #callNextHandlerInChain;public abstract void handleNavigation(_			FacesContext facesContext, @Nullable String fromAction, @Nullable String outcome, @Nullable NavigationHandler originalNavigationHandler)_;special,code,handle,navigation,variant,with,explicit,navigation,handler,argument,either,called,directly,by,code,with,an,explicit,original,handler,or,called,from,the,standard,code,handle,navigation,method,as,plain,jsf,defined,navigation,handler,p,implementations,should,invoke,code,call,next,handler,in,chain,to,delegate,to,the,next,handler,in,the,chain,this,will,always,call,the,most,appropriate,next,handler,see,code,call,next,handler,in,chain,javadoc,alternatively,the,decorated,navigation,handler,or,the,passed,in,original,navigation,handler,can,also,be,called,directly,however,this,is,not,as,flexible,in,terms,of,reacting,to,potential,positions,in,the,chain,param,faces,context,the,current,jsf,context,param,from,action,the,action,binding,expression,that,was,evaluated,to,retrieve,the,specified,outcome,or,code,null,if,the,outcome,was,acquired,by,some,other,means,param,outcome,the,logical,outcome,returned,by,a,previous,invoked,application,action,which,may,be,code,null,param,original,navigation,handler,the,original,navigation,handler,or,code,null,if,none,see,call,next,handler,in,chain;public,abstract,void,handle,navigation,faces,context,faces,context,nullable,string,from,action,nullable,string,outcome,nullable,navigation,handler,original,navigation,handler
DecoratingNavigationHandler -> public abstract void handleNavigation( 			FacesContext facesContext, @Nullable String fromAction, @Nullable String outcome, @Nullable NavigationHandler originalNavigationHandler)_;1500448076;Special {@code handleNavigation} variant with explicit NavigationHandler_argument. Either called directly, by code with an explicit original handler,_or called from the standard {@code handleNavigation} method, as_plain JSF-defined NavigationHandler._<p>Implementations should invoke {@code callNextHandlerInChain} to_delegate to the next handler in the chain. This will always call the most_appropriate next handler (see {@code callNextHandlerInChain} javadoc)._Alternatively, the decorated NavigationHandler or the passed-in original_NavigationHandler can also be called directly_ however, this is not as_flexible in terms of reacting to potential positions in the chain._@param facesContext the current JSF context_@param fromAction the action binding expression that was evaluated to retrieve the_specified outcome, or {@code null} if the outcome was acquired by some other means_@param outcome the logical outcome returned by a previous invoked application action_(which may be {@code null})_@param originalNavigationHandler the original NavigationHandler,_or {@code null} if none_@see #callNextHandlerInChain;public abstract void handleNavigation(_			FacesContext facesContext, @Nullable String fromAction, @Nullable String outcome, @Nullable NavigationHandler originalNavigationHandler)_;special,code,handle,navigation,variant,with,explicit,navigation,handler,argument,either,called,directly,by,code,with,an,explicit,original,handler,or,called,from,the,standard,code,handle,navigation,method,as,plain,jsf,defined,navigation,handler,p,implementations,should,invoke,code,call,next,handler,in,chain,to,delegate,to,the,next,handler,in,the,chain,this,will,always,call,the,most,appropriate,next,handler,see,code,call,next,handler,in,chain,javadoc,alternatively,the,decorated,navigation,handler,or,the,passed,in,original,navigation,handler,can,also,be,called,directly,however,this,is,not,as,flexible,in,terms,of,reacting,to,potential,positions,in,the,chain,param,faces,context,the,current,jsf,context,param,from,action,the,action,binding,expression,that,was,evaluated,to,retrieve,the,specified,outcome,or,code,null,if,the,outcome,was,acquired,by,some,other,means,param,outcome,the,logical,outcome,returned,by,a,previous,invoked,application,action,which,may,be,code,null,param,original,navigation,handler,the,original,navigation,handler,or,code,null,if,none,see,call,next,handler,in,chain;public,abstract,void,handle,navigation,faces,context,faces,context,nullable,string,from,action,nullable,string,outcome,nullable,navigation,handler,original,navigation,handler
DecoratingNavigationHandler -> public final NavigationHandler getDecoratedNavigationHandler();1328020251;Return the fixed original NavigationHandler decorated by this handler, if any_(that is, if passed in through the constructor).;public final NavigationHandler getDecoratedNavigationHandler() {_		return decoratedNavigationHandler__	};return,the,fixed,original,navigation,handler,decorated,by,this,handler,if,any,that,is,if,passed,in,through,the,constructor;public,final,navigation,handler,get,decorated,navigation,handler,return,decorated,navigation,handler
DecoratingNavigationHandler -> public final NavigationHandler getDecoratedNavigationHandler();1354631886;Return the fixed original NavigationHandler decorated by this handler, if any_(that is, if passed in through the constructor).;public final NavigationHandler getDecoratedNavigationHandler() {_		return this.decoratedNavigationHandler__	};return,the,fixed,original,navigation,handler,decorated,by,this,handler,if,any,that,is,if,passed,in,through,the,constructor;public,final,navigation,handler,get,decorated,navigation,handler,return,this,decorated,navigation,handler
DecoratingNavigationHandler -> public final NavigationHandler getDecoratedNavigationHandler();1356735495;Return the fixed original NavigationHandler decorated by this handler, if any_(that is, if passed in through the constructor).;public final NavigationHandler getDecoratedNavigationHandler() {_		return this.decoratedNavigationHandler__	};return,the,fixed,original,navigation,handler,decorated,by,this,handler,if,any,that,is,if,passed,in,through,the,constructor;public,final,navigation,handler,get,decorated,navigation,handler,return,this,decorated,navigation,handler
DecoratingNavigationHandler -> public final NavigationHandler getDecoratedNavigationHandler();1385423968;Return the fixed original NavigationHandler decorated by this handler, if any_(that is, if passed in through the constructor).;public final NavigationHandler getDecoratedNavigationHandler() {_		return this.decoratedNavigationHandler__	};return,the,fixed,original,navigation,handler,decorated,by,this,handler,if,any,that,is,if,passed,in,through,the,constructor;public,final,navigation,handler,get,decorated,navigation,handler,return,this,decorated,navigation,handler
DecoratingNavigationHandler -> protected DecoratingNavigationHandler(NavigationHandler originalNavigationHandler);1328020251;Create a DecoratingNavigationHandler with fixed original NavigationHandler._@param originalNavigationHandler the original NavigationHandler to decorate;protected DecoratingNavigationHandler(NavigationHandler originalNavigationHandler) {_		this.decoratedNavigationHandler = originalNavigationHandler__	};create,a,decorating,navigation,handler,with,fixed,original,navigation,handler,param,original,navigation,handler,the,original,navigation,handler,to,decorate;protected,decorating,navigation,handler,navigation,handler,original,navigation,handler,this,decorated,navigation,handler,original,navigation,handler
DecoratingNavigationHandler -> protected DecoratingNavigationHandler(NavigationHandler originalNavigationHandler);1354631886;Create a DecoratingNavigationHandler with fixed original NavigationHandler._@param originalNavigationHandler the original NavigationHandler to decorate;protected DecoratingNavigationHandler(NavigationHandler originalNavigationHandler) {_		this.decoratedNavigationHandler = originalNavigationHandler__	};create,a,decorating,navigation,handler,with,fixed,original,navigation,handler,param,original,navigation,handler,the,original,navigation,handler,to,decorate;protected,decorating,navigation,handler,navigation,handler,original,navigation,handler,this,decorated,navigation,handler,original,navigation,handler
DecoratingNavigationHandler -> protected DecoratingNavigationHandler(NavigationHandler originalNavigationHandler);1356735495;Create a DecoratingNavigationHandler with fixed original NavigationHandler._@param originalNavigationHandler the original NavigationHandler to decorate;protected DecoratingNavigationHandler(NavigationHandler originalNavigationHandler) {_		this.decoratedNavigationHandler = originalNavigationHandler__	};create,a,decorating,navigation,handler,with,fixed,original,navigation,handler,param,original,navigation,handler,the,original,navigation,handler,to,decorate;protected,decorating,navigation,handler,navigation,handler,original,navigation,handler,this,decorated,navigation,handler,original,navigation,handler
DecoratingNavigationHandler -> protected DecoratingNavigationHandler(NavigationHandler originalNavigationHandler);1385423968;Create a DecoratingNavigationHandler with fixed original NavigationHandler._@param originalNavigationHandler the original NavigationHandler to decorate;protected DecoratingNavigationHandler(NavigationHandler originalNavigationHandler) {_		this.decoratedNavigationHandler = originalNavigationHandler__	};create,a,decorating,navigation,handler,with,fixed,original,navigation,handler,param,original,navigation,handler,the,original,navigation,handler,to,decorate;protected,decorating,navigation,handler,navigation,handler,original,navigation,handler,this,decorated,navigation,handler,original,navigation,handler
DecoratingNavigationHandler -> protected DecoratingNavigationHandler(NavigationHandler originalNavigationHandler);1495868221;Create a DecoratingNavigationHandler with fixed original NavigationHandler._@param originalNavigationHandler the original NavigationHandler to decorate;protected DecoratingNavigationHandler(NavigationHandler originalNavigationHandler) {_		this.decoratedNavigationHandler = originalNavigationHandler__	};create,a,decorating,navigation,handler,with,fixed,original,navigation,handler,param,original,navigation,handler,the,original,navigation,handler,to,decorate;protected,decorating,navigation,handler,navigation,handler,original,navigation,handler,this,decorated,navigation,handler,original,navigation,handler
DecoratingNavigationHandler -> protected DecoratingNavigationHandler(NavigationHandler originalNavigationHandler);1500448076;Create a DecoratingNavigationHandler with fixed original NavigationHandler._@param originalNavigationHandler the original NavigationHandler to decorate;protected DecoratingNavigationHandler(NavigationHandler originalNavigationHandler) {_		this.decoratedNavigationHandler = originalNavigationHandler__	};create,a,decorating,navigation,handler,with,fixed,original,navigation,handler,param,original,navigation,handler,the,original,navigation,handler,to,decorate;protected,decorating,navigation,handler,navigation,handler,original,navigation,handler,this,decorated,navigation,handler,original,navigation,handler
DecoratingNavigationHandler -> protected DecoratingNavigationHandler(NavigationHandler originalNavigationHandler);1508532146;Create a DecoratingNavigationHandler with fixed original NavigationHandler._@param originalNavigationHandler the original NavigationHandler to decorate;protected DecoratingNavigationHandler(NavigationHandler originalNavigationHandler) {_		this.decoratedNavigationHandler = originalNavigationHandler__	};create,a,decorating,navigation,handler,with,fixed,original,navigation,handler,param,original,navigation,handler,the,original,navigation,handler,to,decorate;protected,decorating,navigation,handler,navigation,handler,original,navigation,handler,this,decorated,navigation,handler,original,navigation,handler
DecoratingNavigationHandler -> protected DecoratingNavigationHandler();1328020251;Create a DecoratingNavigationHandler without fixed original NavigationHandler.;protected DecoratingNavigationHandler() {_	};create,a,decorating,navigation,handler,without,fixed,original,navigation,handler;protected,decorating,navigation,handler
DecoratingNavigationHandler -> protected DecoratingNavigationHandler();1354631886;Create a DecoratingNavigationHandler without fixed original NavigationHandler.;protected DecoratingNavigationHandler() {_	};create,a,decorating,navigation,handler,without,fixed,original,navigation,handler;protected,decorating,navigation,handler
DecoratingNavigationHandler -> protected DecoratingNavigationHandler();1356735495;Create a DecoratingNavigationHandler without fixed original NavigationHandler.;protected DecoratingNavigationHandler() {_	};create,a,decorating,navigation,handler,without,fixed,original,navigation,handler;protected,decorating,navigation,handler
DecoratingNavigationHandler -> protected DecoratingNavigationHandler();1385423968;Create a DecoratingNavigationHandler without fixed original NavigationHandler.;protected DecoratingNavigationHandler() {_	};create,a,decorating,navigation,handler,without,fixed,original,navigation,handler;protected,decorating,navigation,handler
DecoratingNavigationHandler -> protected DecoratingNavigationHandler();1495868221;Create a DecoratingNavigationHandler without fixed original NavigationHandler.;protected DecoratingNavigationHandler() {_	};create,a,decorating,navigation,handler,without,fixed,original,navigation,handler;protected,decorating,navigation,handler
DecoratingNavigationHandler -> protected DecoratingNavigationHandler();1500448076;Create a DecoratingNavigationHandler without fixed original NavigationHandler.;protected DecoratingNavigationHandler() {_	};create,a,decorating,navigation,handler,without,fixed,original,navigation,handler;protected,decorating,navigation,handler
DecoratingNavigationHandler -> protected DecoratingNavigationHandler();1508532146;Create a DecoratingNavigationHandler without fixed original NavigationHandler.;protected DecoratingNavigationHandler() {_	};create,a,decorating,navigation,handler,without,fixed,original,navigation,handler;protected,decorating,navigation,handler
DecoratingNavigationHandler -> public abstract void handleNavigation( 			FacesContext facesContext, String fromAction, String outcome, NavigationHandler originalNavigationHandler)_;1328020251;Special <code>handleNavigation</code> variant with explicit NavigationHandler_argument. Either called directly, by code with an explicit original handler,_or called from the standard <code>handleNavigation</code> method, as_plain JSF-defined NavigationHandler._<p>Implementations should invoke <code>callNextHandlerInChain</code> to_delegate to the next handler in the chain. This will always call the most_appropriate next handler (see <code>callNextHandlerInChain</code> javadoc)._Alternatively, the decorated NavigationHandler or the passed-in original_NavigationHandler can also be called directly_ however, this is not as_flexible in terms of reacting to potential positions in the chain._@param facesContext the current JSF context_@param fromAction the action binding expression that was evaluated to retrieve the_specified outcome, or <code>null</code> if the outcome was acquired by some other means_@param outcome the logical outcome returned by a previous invoked application action_(which may be <code>null</code>)_@param originalNavigationHandler the original NavigationHandler,_or <code>null</code> if none_@see #callNextHandlerInChain;public abstract void handleNavigation(_			FacesContext facesContext, String fromAction, String outcome, NavigationHandler originalNavigationHandler)_;special,code,handle,navigation,code,variant,with,explicit,navigation,handler,argument,either,called,directly,by,code,with,an,explicit,original,handler,or,called,from,the,standard,code,handle,navigation,code,method,as,plain,jsf,defined,navigation,handler,p,implementations,should,invoke,code,call,next,handler,in,chain,code,to,delegate,to,the,next,handler,in,the,chain,this,will,always,call,the,most,appropriate,next,handler,see,code,call,next,handler,in,chain,code,javadoc,alternatively,the,decorated,navigation,handler,or,the,passed,in,original,navigation,handler,can,also,be,called,directly,however,this,is,not,as,flexible,in,terms,of,reacting,to,potential,positions,in,the,chain,param,faces,context,the,current,jsf,context,param,from,action,the,action,binding,expression,that,was,evaluated,to,retrieve,the,specified,outcome,or,code,null,code,if,the,outcome,was,acquired,by,some,other,means,param,outcome,the,logical,outcome,returned,by,a,previous,invoked,application,action,which,may,be,code,null,code,param,original,navigation,handler,the,original,navigation,handler,or,code,null,code,if,none,see,call,next,handler,in,chain;public,abstract,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,navigation,handler,original,navigation,handler
DecoratingNavigationHandler -> public abstract void handleNavigation( 			FacesContext facesContext, String fromAction, String outcome, NavigationHandler originalNavigationHandler)_;1354631886;Special <code>handleNavigation</code> variant with explicit NavigationHandler_argument. Either called directly, by code with an explicit original handler,_or called from the standard <code>handleNavigation</code> method, as_plain JSF-defined NavigationHandler._<p>Implementations should invoke <code>callNextHandlerInChain</code> to_delegate to the next handler in the chain. This will always call the most_appropriate next handler (see <code>callNextHandlerInChain</code> javadoc)._Alternatively, the decorated NavigationHandler or the passed-in original_NavigationHandler can also be called directly_ however, this is not as_flexible in terms of reacting to potential positions in the chain._@param facesContext the current JSF context_@param fromAction the action binding expression that was evaluated to retrieve the_specified outcome, or <code>null</code> if the outcome was acquired by some other means_@param outcome the logical outcome returned by a previous invoked application action_(which may be <code>null</code>)_@param originalNavigationHandler the original NavigationHandler,_or <code>null</code> if none_@see #callNextHandlerInChain;public abstract void handleNavigation(_			FacesContext facesContext, String fromAction, String outcome, NavigationHandler originalNavigationHandler)_;special,code,handle,navigation,code,variant,with,explicit,navigation,handler,argument,either,called,directly,by,code,with,an,explicit,original,handler,or,called,from,the,standard,code,handle,navigation,code,method,as,plain,jsf,defined,navigation,handler,p,implementations,should,invoke,code,call,next,handler,in,chain,code,to,delegate,to,the,next,handler,in,the,chain,this,will,always,call,the,most,appropriate,next,handler,see,code,call,next,handler,in,chain,code,javadoc,alternatively,the,decorated,navigation,handler,or,the,passed,in,original,navigation,handler,can,also,be,called,directly,however,this,is,not,as,flexible,in,terms,of,reacting,to,potential,positions,in,the,chain,param,faces,context,the,current,jsf,context,param,from,action,the,action,binding,expression,that,was,evaluated,to,retrieve,the,specified,outcome,or,code,null,code,if,the,outcome,was,acquired,by,some,other,means,param,outcome,the,logical,outcome,returned,by,a,previous,invoked,application,action,which,may,be,code,null,code,param,original,navigation,handler,the,original,navigation,handler,or,code,null,code,if,none,see,call,next,handler,in,chain;public,abstract,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,navigation,handler,original,navigation,handler
DecoratingNavigationHandler -> public abstract void handleNavigation( 			FacesContext facesContext, String fromAction, String outcome, NavigationHandler originalNavigationHandler)_;1356735495;Special {@code handleNavigation} variant with explicit NavigationHandler_argument. Either called directly, by code with an explicit original handler,_or called from the standard {@code handleNavigation} method, as_plain JSF-defined NavigationHandler._<p>Implementations should invoke {@code callNextHandlerInChain} to_delegate to the next handler in the chain. This will always call the most_appropriate next handler (see {@code callNextHandlerInChain} javadoc)._Alternatively, the decorated NavigationHandler or the passed-in original_NavigationHandler can also be called directly_ however, this is not as_flexible in terms of reacting to potential positions in the chain._@param facesContext the current JSF context_@param fromAction the action binding expression that was evaluated to retrieve the_specified outcome, or {@code null} if the outcome was acquired by some other means_@param outcome the logical outcome returned by a previous invoked application action_(which may be {@code null})_@param originalNavigationHandler the original NavigationHandler,_or {@code null} if none_@see #callNextHandlerInChain;public abstract void handleNavigation(_			FacesContext facesContext, String fromAction, String outcome, NavigationHandler originalNavigationHandler)_;special,code,handle,navigation,variant,with,explicit,navigation,handler,argument,either,called,directly,by,code,with,an,explicit,original,handler,or,called,from,the,standard,code,handle,navigation,method,as,plain,jsf,defined,navigation,handler,p,implementations,should,invoke,code,call,next,handler,in,chain,to,delegate,to,the,next,handler,in,the,chain,this,will,always,call,the,most,appropriate,next,handler,see,code,call,next,handler,in,chain,javadoc,alternatively,the,decorated,navigation,handler,or,the,passed,in,original,navigation,handler,can,also,be,called,directly,however,this,is,not,as,flexible,in,terms,of,reacting,to,potential,positions,in,the,chain,param,faces,context,the,current,jsf,context,param,from,action,the,action,binding,expression,that,was,evaluated,to,retrieve,the,specified,outcome,or,code,null,if,the,outcome,was,acquired,by,some,other,means,param,outcome,the,logical,outcome,returned,by,a,previous,invoked,application,action,which,may,be,code,null,param,original,navigation,handler,the,original,navigation,handler,or,code,null,if,none,see,call,next,handler,in,chain;public,abstract,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,navigation,handler,original,navigation,handler
DecoratingNavigationHandler -> public abstract void handleNavigation( 			FacesContext facesContext, String fromAction, String outcome, NavigationHandler originalNavigationHandler)_;1385423968;Special {@code handleNavigation} variant with explicit NavigationHandler_argument. Either called directly, by code with an explicit original handler,_or called from the standard {@code handleNavigation} method, as_plain JSF-defined NavigationHandler._<p>Implementations should invoke {@code callNextHandlerInChain} to_delegate to the next handler in the chain. This will always call the most_appropriate next handler (see {@code callNextHandlerInChain} javadoc)._Alternatively, the decorated NavigationHandler or the passed-in original_NavigationHandler can also be called directly_ however, this is not as_flexible in terms of reacting to potential positions in the chain._@param facesContext the current JSF context_@param fromAction the action binding expression that was evaluated to retrieve the_specified outcome, or {@code null} if the outcome was acquired by some other means_@param outcome the logical outcome returned by a previous invoked application action_(which may be {@code null})_@param originalNavigationHandler the original NavigationHandler,_or {@code null} if none_@see #callNextHandlerInChain;public abstract void handleNavigation(_			FacesContext facesContext, String fromAction, String outcome, NavigationHandler originalNavigationHandler)_;special,code,handle,navigation,variant,with,explicit,navigation,handler,argument,either,called,directly,by,code,with,an,explicit,original,handler,or,called,from,the,standard,code,handle,navigation,method,as,plain,jsf,defined,navigation,handler,p,implementations,should,invoke,code,call,next,handler,in,chain,to,delegate,to,the,next,handler,in,the,chain,this,will,always,call,the,most,appropriate,next,handler,see,code,call,next,handler,in,chain,javadoc,alternatively,the,decorated,navigation,handler,or,the,passed,in,original,navigation,handler,can,also,be,called,directly,however,this,is,not,as,flexible,in,terms,of,reacting,to,potential,positions,in,the,chain,param,faces,context,the,current,jsf,context,param,from,action,the,action,binding,expression,that,was,evaluated,to,retrieve,the,specified,outcome,or,code,null,if,the,outcome,was,acquired,by,some,other,means,param,outcome,the,logical,outcome,returned,by,a,previous,invoked,application,action,which,may,be,code,null,param,original,navigation,handler,the,original,navigation,handler,or,code,null,if,none,see,call,next,handler,in,chain;public,abstract,void,handle,navigation,faces,context,faces,context,string,from,action,string,outcome,navigation,handler,original,navigation,handler
