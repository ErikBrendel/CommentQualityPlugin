# id;timestamp;commentText;codeText;commentWords;codeWords
ForwardedHeaderFilter -> public void setContextPath(String contextPath);1456961905;Configure a contextPath value that will replace the contextPath of_proxy-forwarded requests.__<p>This is useful when external clients are not aware of the application_context path. However a proxy forwards the request to a URL that includes_a contextPath.__@param contextPath the context path_ the given value will be sanitized to_ensure it starts with a '/' but does not end with one, or if the context_path is empty (default, root context) it is left as-is.;public void setContextPath(String contextPath) {_		Assert.notNull(contextPath, "'contextPath' must not be null")__		this.contextPathHelper = new ContextPathHelper(contextPath)__	};configure,a,context,path,value,that,will,replace,the,context,path,of,proxy,forwarded,requests,p,this,is,useful,when,external,clients,are,not,aware,of,the,application,context,path,however,a,proxy,forwards,the,request,to,a,url,that,includes,a,context,path,param,context,path,the,context,path,the,given,value,will,be,sanitized,to,ensure,it,starts,with,a,but,does,not,end,with,one,or,if,the,context,path,is,empty,default,root,context,it,is,left,as,is;public,void,set,context,path,string,context,path,assert,not,null,context,path,context,path,must,not,be,null,this,context,path,helper,new,context,path,helper,context,path
ForwardedHeaderFilter -> public void setContextPath(String contextPath);1457705279;Configure a contextPath value that will replace the contextPath of_proxy-forwarded requests._<p>This is useful when external clients are not aware of the application_context path. However a proxy forwards the request to a URL that includes_a contextPath._@param contextPath the context path_ the given value will be sanitized to_ensure it starts with a '/' but does not end with one, or if the context_path is empty (default, root context) it is left as-is.;public void setContextPath(String contextPath) {_		Assert.notNull(contextPath, "'contextPath' must not be null")__		this.contextPathHelper = new ContextPathHelper(contextPath)__	};configure,a,context,path,value,that,will,replace,the,context,path,of,proxy,forwarded,requests,p,this,is,useful,when,external,clients,are,not,aware,of,the,application,context,path,however,a,proxy,forwards,the,request,to,a,url,that,includes,a,context,path,param,context,path,the,context,path,the,given,value,will,be,sanitized,to,ensure,it,starts,with,a,but,does,not,end,with,one,or,if,the,context,path,is,empty,default,root,context,it,is,left,as,is;public,void,set,context,path,string,context,path,assert,not,null,context,path,context,path,must,not,be,null,this,context,path,helper,new,context,path,helper,context,path
ForwardedHeaderFilter -> public void setContextPath(String contextPath);1464809665;Configure a contextPath value that will replace the contextPath of_proxy-forwarded requests._<p>This is useful when external clients are not aware of the application_context path. However a proxy forwards the request to a URL that includes_a contextPath._@param contextPath the context path_ the given value will be sanitized to_ensure it starts with a '/' but does not end with one, or if the context_path is empty (default, root context) it is left as-is.;public void setContextPath(String contextPath) {_		Assert.notNull(contextPath, "'contextPath' must not be null")__		this.contextPathHelper = new ContextPathHelper(contextPath)__	};configure,a,context,path,value,that,will,replace,the,context,path,of,proxy,forwarded,requests,p,this,is,useful,when,external,clients,are,not,aware,of,the,application,context,path,however,a,proxy,forwards,the,request,to,a,url,that,includes,a,context,path,param,context,path,the,context,path,the,given,value,will,be,sanitized,to,ensure,it,starts,with,a,but,does,not,end,with,one,or,if,the,context,path,is,empty,default,root,context,it,is,left,as,is;public,void,set,context,path,string,context,path,assert,not,null,context,path,context,path,must,not,be,null,this,context,path,helper,new,context,path,helper,context,path
ForwardedHeaderFilter -> public void setContextPathOverride(String contextPath);1464810344;Configure a contextPath override that will replace the contextPath of_proxy-forwarded requests. This is useful when external clients are not_aware of the application context path to which the proxy is configured_to forward to.__<p>For example, a client may connect to a proxy at:<br>_{@code https://example.com/}__<p>In turn the proxy forwards to the application at:<br>_{@code 192.168.1.1:8080/example/}__@param contextPath the context path_ the given value will be sanitized to_ensure it starts with a '/' but does not end with one, or if the context_path is empty (default, root context) it is left as-is.;public void setContextPathOverride(String contextPath) {_		Assert.notNull(contextPath, "'contextPath' must not be null")__		this.contextPathHelper = new ContextPathHelper(contextPath)__	};configure,a,context,path,override,that,will,replace,the,context,path,of,proxy,forwarded,requests,this,is,useful,when,external,clients,are,not,aware,of,the,application,context,path,to,which,the,proxy,is,configured,to,forward,to,p,for,example,a,client,may,connect,to,a,proxy,at,br,code,https,example,com,p,in,turn,the,proxy,forwards,to,the,application,at,br,code,192,168,1,1,8080,example,param,context,path,the,context,path,the,given,value,will,be,sanitized,to,ensure,it,starts,with,a,but,does,not,end,with,one,or,if,the,context,path,is,empty,default,root,context,it,is,left,as,is;public,void,set,context,path,override,string,context,path,assert,not,null,context,path,context,path,must,not,be,null,this,context,path,helper,new,context,path,helper,context,path
ForwardedHeaderFilter -> public void setContextPathOverride(String contextPath);1464811292;Configure a context path override that will replace the context path of_proxy-forwarded requests. This is useful when external clients are not_aware of the application context path to which the proxy is configured_to forward to._<p>For example, a client may connect to a proxy at:<br>_{@code https://example.com/}_<p>In turn the proxy forwards to the application at:<br>_{@code 192.168.1.1:8080/example/}_@param contextPath the context path_ the given value will be sanitized to_ensure it starts with a '/' but does not end with one, or if the context_path is empty (default, root context) it is left as-is.;public void setContextPathOverride(String contextPath) {_		Assert.notNull(contextPath, "'contextPath' must not be null")__		this.contextPathHelper = new ContextPathHelper(contextPath)__	};configure,a,context,path,override,that,will,replace,the,context,path,of,proxy,forwarded,requests,this,is,useful,when,external,clients,are,not,aware,of,the,application,context,path,to,which,the,proxy,is,configured,to,forward,to,p,for,example,a,client,may,connect,to,a,proxy,at,br,code,https,example,com,p,in,turn,the,proxy,forwards,to,the,application,at,br,code,192,168,1,1,8080,example,param,context,path,the,context,path,the,given,value,will,be,sanitized,to,ensure,it,starts,with,a,but,does,not,end,with,one,or,if,the,context,path,is,empty,default,root,context,it,is,left,as,is;public,void,set,context,path,override,string,context,path,assert,not,null,context,path,context,path,must,not,be,null,this,context,path,helper,new,context,path,helper,context,path
ForwardedHeaderFilter -> ForwardedPrefixExtractor -> public ForwardedPrefixExtractor( 				Supplier<HttpServletRequest> delegateRequest, UrlPathHelper pathHelper, String baseUrl);1540310026;Constructor with required information._@param delegateRequest supplier for the current_{@link HttpServletRequestWrapper#getRequest() delegate request} which_may change during a forward (e.g. Tocat._@param pathHelper the path helper instance_@param baseUrl the host, scheme, and port based on forwarded headers;public ForwardedPrefixExtractor(_				Supplier<HttpServletRequest> delegateRequest, UrlPathHelper pathHelper, String baseUrl) {__			this.delegate = delegateRequest__			this.pathHelper = pathHelper__			this.baseUrl = baseUrl__			this.actualRequestUri = delegateRequest.get().getRequestURI()___			this.forwardedPrefix = initForwardedPrefix(delegateRequest.get())__			this.requestUri = initRequestUri()__			this.requestUrl = initRequestUrl()_ _		};constructor,with,required,information,param,delegate,request,supplier,for,the,current,link,http,servlet,request,wrapper,get,request,delegate,request,which,may,change,during,a,forward,e,g,tocat,param,path,helper,the,path,helper,instance,param,base,url,the,host,scheme,and,port,based,on,forwarded,headers;public,forwarded,prefix,extractor,supplier,http,servlet,request,delegate,request,url,path,helper,path,helper,string,base,url,this,delegate,delegate,request,this,path,helper,path,helper,this,base,url,base,url,this,actual,request,uri,delegate,request,get,get,request,uri,this,forwarded,prefix,init,forwarded,prefix,delegate,request,get,this,request,uri,init,request,uri,this,request,url,init,request,url
ForwardedHeaderFilter -> ForwardedPrefixExtractor -> public ForwardedPrefixExtractor( 				Supplier<HttpServletRequest> delegateRequest, UrlPathHelper pathHelper, String baseUrl);1542468661;Constructor with required information._@param delegateRequest supplier for the current_{@link HttpServletRequestWrapper#getRequest() delegate request} which_may change during a forward (e.g. Tocat._@param pathHelper the path helper instance_@param baseUrl the host, scheme, and port based on forwarded headers;public ForwardedPrefixExtractor(_				Supplier<HttpServletRequest> delegateRequest, UrlPathHelper pathHelper, String baseUrl) {__			this.delegate = delegateRequest__			this.pathHelper = pathHelper__			this.baseUrl = baseUrl__			this.actualRequestUri = delegateRequest.get().getRequestURI()___			this.forwardedPrefix = initForwardedPrefix(delegateRequest.get())__			this.requestUri = initRequestUri()__			this.requestUrl = initRequestUrl()_ _		};constructor,with,required,information,param,delegate,request,supplier,for,the,current,link,http,servlet,request,wrapper,get,request,delegate,request,which,may,change,during,a,forward,e,g,tocat,param,path,helper,the,path,helper,instance,param,base,url,the,host,scheme,and,port,based,on,forwarded,headers;public,forwarded,prefix,extractor,supplier,http,servlet,request,delegate,request,url,path,helper,path,helper,string,base,url,this,delegate,delegate,request,this,path,helper,path,helper,this,base,url,base,url,this,actual,request,uri,delegate,request,get,get,request,uri,this,forwarded,prefix,init,forwarded,prefix,delegate,request,get,this,request,uri,init,request,uri,this,request,url,init,request,url
ForwardedHeaderFilter -> ForwardedPrefixExtractor -> public ForwardedPrefixExtractor( 				Supplier<HttpServletRequest> delegateRequest, UrlPathHelper pathHelper, String baseUrl);1542613849;Constructor with required information._@param delegateRequest supplier for the current_{@link HttpServletRequestWrapper#getRequest() delegate request} which_may change during a forward (e.g. Tomcat._@param pathHelper the path helper instance_@param baseUrl the host, scheme, and port based on forwarded headers;public ForwardedPrefixExtractor(_				Supplier<HttpServletRequest> delegateRequest, UrlPathHelper pathHelper, String baseUrl) {__			this.delegate = delegateRequest__			this.pathHelper = pathHelper__			this.baseUrl = baseUrl__			this.actualRequestUri = delegateRequest.get().getRequestURI()___			this.forwardedPrefix = initForwardedPrefix(delegateRequest.get())__			this.requestUri = initRequestUri()__			this.requestUrl = initRequestUrl()_ _		};constructor,with,required,information,param,delegate,request,supplier,for,the,current,link,http,servlet,request,wrapper,get,request,delegate,request,which,may,change,during,a,forward,e,g,tomcat,param,path,helper,the,path,helper,instance,param,base,url,the,host,scheme,and,port,based,on,forwarded,headers;public,forwarded,prefix,extractor,supplier,http,servlet,request,delegate,request,url,path,helper,path,helper,string,base,url,this,delegate,delegate,request,this,path,helper,path,helper,this,base,url,base,url,this,actual,request,uri,delegate,request,get,get,request,uri,this,forwarded,prefix,init,forwarded,prefix,delegate,request,get,this,request,uri,init,request,uri,this,request,url,init,request,url
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1456961905;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedHashMap<String, List<String>>()__			Enumeration<String> headerNames = request.getHeaderNames()__			while (headerNames.hasMoreElements()) {_				String name = headerNames.nextElement()__				headers.put(name, Collections.list(request.getHeaders(name)))__			}_			for (String name : FORWARDED_HEADER_NAMES) {_				headers.remove(name)__			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,hash,map,string,list,string,enumeration,string,header,names,request,get,header,names,while,header,names,has,more,elements,string,name,header,names,next,element,headers,put,name,collections,list,request,get,headers,name,for,string,name,headers,remove,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1456961905;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedHashMap<String, List<String>>()__			Enumeration<String> headerNames = request.getHeaderNames()__			while (headerNames.hasMoreElements()) {_				String name = headerNames.nextElement()__				headers.put(name, Collections.list(request.getHeaders(name)))__			}_			for (String name : FORWARDED_HEADER_NAMES) {_				headers.remove(name)__			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,hash,map,string,list,string,enumeration,string,header,names,request,get,header,names,while,header,names,has,more,elements,string,name,header,names,next,element,headers,put,name,collections,list,request,get,headers,name,for,string,name,headers,remove,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1457705279;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedHashMap<String, List<String>>()__			Enumeration<String> headerNames = request.getHeaderNames()__			while (headerNames.hasMoreElements()) {_				String name = headerNames.nextElement()__				headers.put(name, Collections.list(request.getHeaders(name)))__			}_			for (String name : FORWARDED_HEADER_NAMES) {_				headers.remove(name)__			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,hash,map,string,list,string,enumeration,string,header,names,request,get,header,names,while,header,names,has,more,elements,string,name,header,names,next,element,headers,put,name,collections,list,request,get,headers,name,for,string,name,headers,remove,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1464809665;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedHashMap<String, List<String>>()__			Enumeration<String> headerNames = request.getHeaderNames()__			while (headerNames.hasMoreElements()) {_				String name = headerNames.nextElement()__				headers.put(name, Collections.list(request.getHeaders(name)))__			}_			for (String name : FORWARDED_HEADER_NAMES) {_				headers.remove(name)__			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,hash,map,string,list,string,enumeration,string,header,names,request,get,header,names,while,header,names,has,more,elements,string,name,header,names,next,element,headers,put,name,collections,list,request,get,headers,name,for,string,name,headers,remove,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1464810344;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedHashMap<String, List<String>>()__			Enumeration<String> headerNames = request.getHeaderNames()__			while (headerNames.hasMoreElements()) {_				String name = headerNames.nextElement()__				headers.put(name, Collections.list(request.getHeaders(name)))__			}_			for (String name : FORWARDED_HEADER_NAMES) {_				headers.remove(name)__			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,hash,map,string,list,string,enumeration,string,header,names,request,get,header,names,while,header,names,has,more,elements,string,name,header,names,next,element,headers,put,name,collections,list,request,get,headers,name,for,string,name,headers,remove,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1464811292;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedHashMap<String, List<String>>()__			Enumeration<String> headerNames = request.getHeaderNames()__			while (headerNames.hasMoreElements()) {_				String name = headerNames.nextElement()__				headers.put(name, Collections.list(request.getHeaders(name)))__			}_			for (String name : FORWARDED_HEADER_NAMES) {_				headers.remove(name)__			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,hash,map,string,list,string,enumeration,string,header,names,request,get,header,names,while,header,names,has,more,elements,string,name,header,names,next,element,headers,put,name,collections,list,request,get,headers,name,for,string,name,headers,remove,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1465231042;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedHashMap<String, List<String>>()__			Enumeration<String> headerNames = request.getHeaderNames()__			while (headerNames.hasMoreElements()) {_				String name = headerNames.nextElement()__				headers.put(name, Collections.list(request.getHeaders(name)))__			}_			for (String name : FORWARDED_HEADER_NAMES) {_				headers.remove(name)__			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,hash,map,string,list,string,enumeration,string,header,names,request,get,header,names,while,header,names,has,more,elements,string,name,header,names,next,element,headers,put,name,collections,list,request,get,headers,name,for,string,name,headers,remove,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1465306936;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedHashMap<String, List<String>>()__			Enumeration<String> headerNames = request.getHeaderNames()__			while (headerNames.hasMoreElements()) {_				String name = headerNames.nextElement()__				headers.put(name, Collections.list(request.getHeaders(name)))__			}_			for (String name : FORWARDED_HEADER_NAMES) {_				headers.remove(name)__			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,hash,map,string,list,string,enumeration,string,header,names,request,get,header,names,while,header,names,has,more,elements,string,name,header,names,next,element,headers,put,name,collections,list,request,get,headers,name,for,string,name,headers,remove,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1466187642;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedCaseInsensitiveMap<List<String>>(Locale.ENGLISH)__			Enumeration<String> names = request.getHeaderNames()__			while (names.hasMoreElements()) {_				String name = names.nextElement()__				if (!FORWARDED_HEADER_NAMES.contains(name)) {_					headers.put(name, Collections.list(request.getHeaders(name)))__				}_			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,case,insensitive,map,list,string,locale,english,enumeration,string,names,request,get,header,names,while,names,has,more,elements,string,name,names,next,element,if,contains,name,headers,put,name,collections,list,request,get,headers,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1467730834;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedCaseInsensitiveMap<>(Locale.ENGLISH)__			Enumeration<String> names = request.getHeaderNames()__			while (names.hasMoreElements()) {_				String name = names.nextElement()__				if (!FORWARDED_HEADER_NAMES.contains(name)) {_					headers.put(name, Collections.list(request.getHeaders(name)))__				}_			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,case,insensitive,map,locale,english,enumeration,string,names,request,get,header,names,while,names,has,more,elements,string,name,names,next,element,if,contains,name,headers,put,name,collections,list,request,get,headers,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1474905889;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedCaseInsensitiveMap<>(Locale.ENGLISH)__			Enumeration<String> names = request.getHeaderNames()__			while (names.hasMoreElements()) {_				String name = names.nextElement()__				if (!FORWARDED_HEADER_NAMES.contains(name)) {_					headers.put(name, Collections.list(request.getHeaders(name)))__				}_			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,case,insensitive,map,locale,english,enumeration,string,names,request,get,header,names,while,names,has,more,elements,string,name,names,next,element,if,contains,name,headers,put,name,collections,list,request,get,headers,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1481839497;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedCaseInsensitiveMap<>(Locale.ENGLISH)__			Enumeration<String> names = request.getHeaderNames()__			while (names.hasMoreElements()) {_				String name = names.nextElement()__				if (!FORWARDED_HEADER_NAMES.contains(name)) {_					headers.put(name, Collections.list(request.getHeaders(name)))__				}_			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,case,insensitive,map,locale,english,enumeration,string,names,request,get,header,names,while,names,has,more,elements,string,name,names,next,element,if,contains,name,headers,put,name,collections,list,request,get,headers,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1481848473;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedCaseInsensitiveMap<>(Locale.ENGLISH)__			Enumeration<String> names = request.getHeaderNames()__			while (names.hasMoreElements()) {_				String name = names.nextElement()__				if (!FORWARDED_HEADER_NAMES.contains(name)) {_					headers.put(name, Collections.list(request.getHeaders(name)))__				}_			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,case,insensitive,map,locale,english,enumeration,string,names,request,get,header,names,while,names,has,more,elements,string,name,names,next,element,if,contains,name,headers,put,name,collections,list,request,get,headers,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1483476691;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedCaseInsensitiveMap<>(Locale.ENGLISH)__			Enumeration<String> names = request.getHeaderNames()__			while (names.hasMoreElements()) {_				String name = names.nextElement()__				if (!FORWARDED_HEADER_NAMES.contains(name)) {_					headers.put(name, Collections.list(request.getHeaders(name)))__				}_			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,case,insensitive,map,locale,english,enumeration,string,names,request,get,header,names,while,names,has,more,elements,string,name,names,next,element,if,contains,name,headers,put,name,collections,list,request,get,headers,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1491598271;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedCaseInsensitiveMap<>(Locale.ENGLISH)__			Enumeration<String> names = request.getHeaderNames()__			while (names.hasMoreElements()) {_				String name = names.nextElement()__				if (!FORWARDED_HEADER_NAMES.contains(name)) {_					headers.put(name, Collections.list(request.getHeaders(name)))__				}_			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,case,insensitive,map,locale,english,enumeration,string,names,request,get,header,names,while,names,has,more,elements,string,name,names,next,element,if,contains,name,headers,put,name,collections,list,request,get,headers,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1491831405;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedCaseInsensitiveMap<>(Locale.ENGLISH)__			Enumeration<String> names = request.getHeaderNames()__			while (names.hasMoreElements()) {_				String name = names.nextElement()__				if (!FORWARDED_HEADER_NAMES.contains(name)) {_					headers.put(name, Collections.list(request.getHeaders(name)))__				}_			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,case,insensitive,map,locale,english,enumeration,string,names,request,get,header,names,while,names,has,more,elements,string,name,names,next,element,if,contains,name,headers,put,name,collections,list,request,get,headers,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1491835843;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedCaseInsensitiveMap<>(Locale.ENGLISH)__			Enumeration<String> names = request.getHeaderNames()__			while (names.hasMoreElements()) {_				String name = names.nextElement()__				if (!FORWARDED_HEADER_NAMES.contains(name)) {_					headers.put(name, Collections.list(request.getHeaders(name)))__				}_			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,case,insensitive,map,locale,english,enumeration,string,names,request,get,header,names,while,names,has,more,elements,string,name,names,next,element,if,contains,name,headers,put,name,collections,list,request,get,headers,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1491835844;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedCaseInsensitiveMap<>(Locale.ENGLISH)__			Enumeration<String> names = request.getHeaderNames()__			while (names.hasMoreElements()) {_				String name = names.nextElement()__				if (!FORWARDED_HEADER_NAMES.contains(name)) {_					headers.put(name, Collections.list(request.getHeaders(name)))__				}_			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,case,insensitive,map,locale,english,enumeration,string,names,request,get,header,names,while,names,has,more,elements,string,name,names,next,element,if,contains,name,headers,put,name,collections,list,request,get,headers,name,return,headers
ForwardedHeaderFilter -> ForwardedHeaderRequestWrapper -> private static Map<String, List<String>> initHeaders(HttpServletRequest request);1492093025;Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}.;private static Map<String, List<String>> initHeaders(HttpServletRequest request) {_			Map<String, List<String>> headers = new LinkedCaseInsensitiveMap<>(Locale.ENGLISH)__			Enumeration<String> names = request.getHeaderNames()__			while (names.hasMoreElements()) {_				String name = names.nextElement()__				if (!FORWARDED_HEADER_NAMES.contains(name)) {_					headers.put(name, Collections.list(request.getHeaders(name)))__				}_			}_			return headers__		};copy,the,headers,excluding,any,link;private,static,map,string,list,string,init,headers,http,servlet,request,request,map,string,list,string,headers,new,linked,case,insensitive,map,locale,english,enumeration,string,names,request,get,header,names,while,names,has,more,elements,string,name,names,next,element,if,contains,name,headers,put,name,collections,list,request,get,headers,name,return,headers
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1496345959;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ingore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ingore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1496837955;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ingore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ingore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1497175385;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ingore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ingore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1498780456;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ingore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ingore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1500477333;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ingore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ingore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1500477333;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ingore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ingore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1500482776;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ingore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ingore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1500495747;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ignore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ignore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1515504834;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ignore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ignore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1518797450;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ignore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ignore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1518801443;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ignore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ignore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1518802465;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ignore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ignore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1527125003;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ignore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ignore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1527269977;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ignore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ignore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1530174524;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ignore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ignore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1533555138;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ignore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ignore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1540310026;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ignore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ignore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1542468661;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ignore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ignore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRemoveOnly(boolean removeOnly);1542613849;Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are_removed only and the information in them ignored._@param removeOnly whether to discard and ignore forwarded headers_@since 4.3.9;public void setRemoveOnly(boolean removeOnly) {_		this.removeOnly = removeOnly__	};enables,mode,in,which,any,forwarded,or,x,forwarded,headers,are,removed,only,and,the,information,in,them,ignored,param,remove,only,whether,to,discard,and,ignore,forwarded,headers,since,4,3,9;public,void,set,remove,only,boolean,remove,only,this,remove,only,remove,only
ForwardedHeaderFilter -> public void setRequestOnly(boolean requestOnly);1500477333;Enables mode in which only the HttpServletRequest is modified. This means that_{@link HttpServletResponse#sendRedirect(String)} will only work when the application is configured to use_relative redirects. This can be done with Servlet Container specific setup. For example,  using Tomcat's_<a href="https://tomcat.apache.org/tomcat-8.0-doc/config/context.html#Common_Attributes">useRelativeRedirects</a>_attribute.__@param requestOnly whether to customize the {@code HttpServletResponse} or not. Default is false (customize the_{@code HttpServletResponse})_@since 4.3.10;public void setRequestOnly(boolean requestOnly) {_		this.requestOnly = requestOnly__	};enables,mode,in,which,only,the,http,servlet,request,is,modified,this,means,that,link,http,servlet,response,send,redirect,string,will,only,work,when,the,application,is,configured,to,use,relative,redirects,this,can,be,done,with,servlet,container,specific,setup,for,example,using,tomcat,s,a,href,https,tomcat,apache,org,tomcat,8,0,doc,config,context,html,use,relative,redirects,a,attribute,param,request,only,whether,to,customize,the,code,http,servlet,response,or,not,default,is,false,customize,the,code,http,servlet,response,since,4,3,10;public,void,set,request,only,boolean,request,only,this,request,only,request,only
ForwardedHeaderFilter -> public void setRequestOnly(boolean requestOnly);1500477333;Enables mode in which only the HttpServletRequest is modified. This means that_{@link HttpServletResponse#sendRedirect(String)} will only work when the application is configured to use_relative redirects. This can be done by placing {@link RelativeRedirectFilter} after this Filter or Servlet_Container specific setup. For example, using Tomcat's_<a href="https://tomcat.apache.org/tomcat-8.0-doc/config/context.html#Common_Attributes">useRelativeRedirects</a>_attribute.__@param requestOnly whether to customize the {@code HttpServletResponse} or not. Default is false (customize the_{@code HttpServletResponse})_@since 4.3.10;public void setRequestOnly(boolean requestOnly) {_		this.requestOnly = requestOnly__	};enables,mode,in,which,only,the,http,servlet,request,is,modified,this,means,that,link,http,servlet,response,send,redirect,string,will,only,work,when,the,application,is,configured,to,use,relative,redirects,this,can,be,done,by,placing,link,relative,redirect,filter,after,this,filter,or,servlet,container,specific,setup,for,example,using,tomcat,s,a,href,https,tomcat,apache,org,tomcat,8,0,doc,config,context,html,use,relative,redirects,a,attribute,param,request,only,whether,to,customize,the,code,http,servlet,response,or,not,default,is,false,customize,the,code,http,servlet,response,since,4,3,10;public,void,set,request,only,boolean,request,only,this,request,only,request,only
ForwardedHeaderFilter -> public void setRelativeRedirects(boolean relativeRedirects);1500482776;Use this property to enable relative redirects as explained in and also_using the same response wrapper as {@link RelativeRedirectFilter} does._Or if both filters are used, only one will wrap the response._<p>By default, if this property is set to false, in which case calls to_{@link HttpServletResponse#sendRedirect(String)} are overridden in order_to turn relative into absolute URLs since (which Servlet containers are_also required to do) also taking forwarded headers into consideration._@param relativeRedirects whether to use relative redirects_@since 5.0;public void setRelativeRedirects(boolean relativeRedirects) {_		this.relativeRedirects = relativeRedirects__	};use,this,property,to,enable,relative,redirects,as,explained,in,and,also,using,the,same,response,wrapper,as,link,relative,redirect,filter,does,or,if,both,filters,are,used,only,one,will,wrap,the,response,p,by,default,if,this,property,is,set,to,false,in,which,case,calls,to,link,http,servlet,response,send,redirect,string,are,overridden,in,order,to,turn,relative,into,absolute,urls,since,which,servlet,containers,are,also,required,to,do,also,taking,forwarded,headers,into,consideration,param,relative,redirects,whether,to,use,relative,redirects,since,5,0;public,void,set,relative,redirects,boolean,relative,redirects,this,relative,redirects,relative,redirects
ForwardedHeaderFilter -> public void setRelativeRedirects(boolean relativeRedirects);1500495747;Use this property to enable relative redirects as explained in and also_using the same response wrapper as {@link RelativeRedirectFilter} does._Or if both filters are used, only one will wrap the response._<p>By default, if this property is set to false, in which case calls to_{@link HttpServletResponse#sendRedirect(String)} are overridden in order_to turn relative into absolute URLs since (which Servlet containers are_also required to do) also taking forwarded headers into consideration._@param relativeRedirects whether to use relative redirects_@since 4.3.10;public void setRelativeRedirects(boolean relativeRedirects) {_		this.relativeRedirects = relativeRedirects__	};use,this,property,to,enable,relative,redirects,as,explained,in,and,also,using,the,same,response,wrapper,as,link,relative,redirect,filter,does,or,if,both,filters,are,used,only,one,will,wrap,the,response,p,by,default,if,this,property,is,set,to,false,in,which,case,calls,to,link,http,servlet,response,send,redirect,string,are,overridden,in,order,to,turn,relative,into,absolute,urls,since,which,servlet,containers,are,also,required,to,do,also,taking,forwarded,headers,into,consideration,param,relative,redirects,whether,to,use,relative,redirects,since,4,3,10;public,void,set,relative,redirects,boolean,relative,redirects,this,relative,redirects,relative,redirects
ForwardedHeaderFilter -> public void setRelativeRedirects(boolean relativeRedirects);1515504834;Use this property to enable relative redirects as explained in and also_using the same response wrapper as {@link RelativeRedirectFilter} does._Or if both filters are used, only one will wrap the response._<p>By default, if this property is set to false, in which case calls to_{@link HttpServletResponse#sendRedirect(String)} are overridden in order_to turn relative into absolute URLs since (which Servlet containers are_also required to do) also taking forwarded headers into consideration._@param relativeRedirects whether to use relative redirects_@since 4.3.10;public void setRelativeRedirects(boolean relativeRedirects) {_		this.relativeRedirects = relativeRedirects__	};use,this,property,to,enable,relative,redirects,as,explained,in,and,also,using,the,same,response,wrapper,as,link,relative,redirect,filter,does,or,if,both,filters,are,used,only,one,will,wrap,the,response,p,by,default,if,this,property,is,set,to,false,in,which,case,calls,to,link,http,servlet,response,send,redirect,string,are,overridden,in,order,to,turn,relative,into,absolute,urls,since,which,servlet,containers,are,also,required,to,do,also,taking,forwarded,headers,into,consideration,param,relative,redirects,whether,to,use,relative,redirects,since,4,3,10;public,void,set,relative,redirects,boolean,relative,redirects,this,relative,redirects,relative,redirects
ForwardedHeaderFilter -> public void setRelativeRedirects(boolean relativeRedirects);1518797450;Use this property to enable relative redirects as explained in and also_using the same response wrapper as {@link RelativeRedirectFilter} does._Or if both filters are used, only one will wrap the response._<p>By default, if this property is set to false, in which case calls to_{@link HttpServletResponse#sendRedirect(String)} are overridden in order_to turn relative into absolute URLs since (which Servlet containers are_also required to do) also taking forwarded headers into consideration._@param relativeRedirects whether to use relative redirects_@since 4.3.10;public void setRelativeRedirects(boolean relativeRedirects) {_		this.relativeRedirects = relativeRedirects__	};use,this,property,to,enable,relative,redirects,as,explained,in,and,also,using,the,same,response,wrapper,as,link,relative,redirect,filter,does,or,if,both,filters,are,used,only,one,will,wrap,the,response,p,by,default,if,this,property,is,set,to,false,in,which,case,calls,to,link,http,servlet,response,send,redirect,string,are,overridden,in,order,to,turn,relative,into,absolute,urls,since,which,servlet,containers,are,also,required,to,do,also,taking,forwarded,headers,into,consideration,param,relative,redirects,whether,to,use,relative,redirects,since,4,3,10;public,void,set,relative,redirects,boolean,relative,redirects,this,relative,redirects,relative,redirects
ForwardedHeaderFilter -> public void setRelativeRedirects(boolean relativeRedirects);1518801443;Use this property to enable relative redirects as explained in_{@link RelativeRedirectFilter}, and also using the same response wrapper_as that filter does, or if both are configured, only one will wrap._<p>By default, if this property is set to false, in which case calls to_{@link HttpServletResponse#sendRedirect(String)} are overridden in order_to turn relative into absolute URLs, also taking into account forwarded_headers._@param relativeRedirects whether to use relative redirects_@since 4.3.10;public void setRelativeRedirects(boolean relativeRedirects) {_		this.relativeRedirects = relativeRedirects__	};use,this,property,to,enable,relative,redirects,as,explained,in,link,relative,redirect,filter,and,also,using,the,same,response,wrapper,as,that,filter,does,or,if,both,are,configured,only,one,will,wrap,p,by,default,if,this,property,is,set,to,false,in,which,case,calls,to,link,http,servlet,response,send,redirect,string,are,overridden,in,order,to,turn,relative,into,absolute,urls,also,taking,into,account,forwarded,headers,param,relative,redirects,whether,to,use,relative,redirects,since,4,3,10;public,void,set,relative,redirects,boolean,relative,redirects,this,relative,redirects,relative,redirects
ForwardedHeaderFilter -> public void setRelativeRedirects(boolean relativeRedirects);1518802465;Use this property to enable relative redirects as explained in_{@link RelativeRedirectFilter}, and also using the same response wrapper_as that filter does, or if both are configured, only one will wrap._<p>By default, if this property is set to false, in which case calls to_{@link HttpServletResponse#sendRedirect(String)} are overridden in order_to turn relative into absolute URLs, also taking into account forwarded_headers._@param relativeRedirects whether to use relative redirects_@since 4.3.10;public void setRelativeRedirects(boolean relativeRedirects) {_		this.relativeRedirects = relativeRedirects__	};use,this,property,to,enable,relative,redirects,as,explained,in,link,relative,redirect,filter,and,also,using,the,same,response,wrapper,as,that,filter,does,or,if,both,are,configured,only,one,will,wrap,p,by,default,if,this,property,is,set,to,false,in,which,case,calls,to,link,http,servlet,response,send,redirect,string,are,overridden,in,order,to,turn,relative,into,absolute,urls,also,taking,into,account,forwarded,headers,param,relative,redirects,whether,to,use,relative,redirects,since,4,3,10;public,void,set,relative,redirects,boolean,relative,redirects,this,relative,redirects,relative,redirects
ForwardedHeaderFilter -> public void setRelativeRedirects(boolean relativeRedirects);1527125003;Use this property to enable relative redirects as explained in_{@link RelativeRedirectFilter}, and also using the same response wrapper_as that filter does, or if both are configured, only one will wrap._<p>By default, if this property is set to false, in which case calls to_{@link HttpServletResponse#sendRedirect(String)} are overridden in order_to turn relative into absolute URLs, also taking into account forwarded_headers._@param relativeRedirects whether to use relative redirects_@since 4.3.10;public void setRelativeRedirects(boolean relativeRedirects) {_		this.relativeRedirects = relativeRedirects__	};use,this,property,to,enable,relative,redirects,as,explained,in,link,relative,redirect,filter,and,also,using,the,same,response,wrapper,as,that,filter,does,or,if,both,are,configured,only,one,will,wrap,p,by,default,if,this,property,is,set,to,false,in,which,case,calls,to,link,http,servlet,response,send,redirect,string,are,overridden,in,order,to,turn,relative,into,absolute,urls,also,taking,into,account,forwarded,headers,param,relative,redirects,whether,to,use,relative,redirects,since,4,3,10;public,void,set,relative,redirects,boolean,relative,redirects,this,relative,redirects,relative,redirects
ForwardedHeaderFilter -> public void setRelativeRedirects(boolean relativeRedirects);1527269977;Use this property to enable relative redirects as explained in_{@link RelativeRedirectFilter}, and also using the same response wrapper_as that filter does, or if both are configured, only one will wrap._<p>By default, if this property is set to false, in which case calls to_{@link HttpServletResponse#sendRedirect(String)} are overridden in order_to turn relative into absolute URLs, also taking into account forwarded_headers._@param relativeRedirects whether to use relative redirects_@since 4.3.10;public void setRelativeRedirects(boolean relativeRedirects) {_		this.relativeRedirects = relativeRedirects__	};use,this,property,to,enable,relative,redirects,as,explained,in,link,relative,redirect,filter,and,also,using,the,same,response,wrapper,as,that,filter,does,or,if,both,are,configured,only,one,will,wrap,p,by,default,if,this,property,is,set,to,false,in,which,case,calls,to,link,http,servlet,response,send,redirect,string,are,overridden,in,order,to,turn,relative,into,absolute,urls,also,taking,into,account,forwarded,headers,param,relative,redirects,whether,to,use,relative,redirects,since,4,3,10;public,void,set,relative,redirects,boolean,relative,redirects,this,relative,redirects,relative,redirects
ForwardedHeaderFilter -> public void setRelativeRedirects(boolean relativeRedirects);1530174524;Use this property to enable relative redirects as explained in_{@link RelativeRedirectFilter}, and also using the same response wrapper_as that filter does, or if both are configured, only one will wrap._<p>By default, if this property is set to false, in which case calls to_{@link HttpServletResponse#sendRedirect(String)} are overridden in order_to turn relative into absolute URLs, also taking into account forwarded_headers._@param relativeRedirects whether to use relative redirects_@since 4.3.10;public void setRelativeRedirects(boolean relativeRedirects) {_		this.relativeRedirects = relativeRedirects__	};use,this,property,to,enable,relative,redirects,as,explained,in,link,relative,redirect,filter,and,also,using,the,same,response,wrapper,as,that,filter,does,or,if,both,are,configured,only,one,will,wrap,p,by,default,if,this,property,is,set,to,false,in,which,case,calls,to,link,http,servlet,response,send,redirect,string,are,overridden,in,order,to,turn,relative,into,absolute,urls,also,taking,into,account,forwarded,headers,param,relative,redirects,whether,to,use,relative,redirects,since,4,3,10;public,void,set,relative,redirects,boolean,relative,redirects,this,relative,redirects,relative,redirects
ForwardedHeaderFilter -> public void setRelativeRedirects(boolean relativeRedirects);1533555138;Use this property to enable relative redirects as explained in_{@link RelativeRedirectFilter}, and also using the same response wrapper_as that filter does, or if both are configured, only one will wrap._<p>By default, if this property is set to false, in which case calls to_{@link HttpServletResponse#sendRedirect(String)} are overridden in order_to turn relative into absolute URLs, also taking into account forwarded_headers._@param relativeRedirects whether to use relative redirects_@since 4.3.10;public void setRelativeRedirects(boolean relativeRedirects) {_		this.relativeRedirects = relativeRedirects__	};use,this,property,to,enable,relative,redirects,as,explained,in,link,relative,redirect,filter,and,also,using,the,same,response,wrapper,as,that,filter,does,or,if,both,are,configured,only,one,will,wrap,p,by,default,if,this,property,is,set,to,false,in,which,case,calls,to,link,http,servlet,response,send,redirect,string,are,overridden,in,order,to,turn,relative,into,absolute,urls,also,taking,into,account,forwarded,headers,param,relative,redirects,whether,to,use,relative,redirects,since,4,3,10;public,void,set,relative,redirects,boolean,relative,redirects,this,relative,redirects,relative,redirects
ForwardedHeaderFilter -> public void setRelativeRedirects(boolean relativeRedirects);1540310026;Use this property to enable relative redirects as explained in_{@link RelativeRedirectFilter}, and also using the same response wrapper_as that filter does, or if both are configured, only one will wrap._<p>By default, if this property is set to false, in which case calls to_{@link HttpServletResponse#sendRedirect(String)} are overridden in order_to turn relative into absolute URLs, also taking into account forwarded_headers._@param relativeRedirects whether to use relative redirects_@since 4.3.10;public void setRelativeRedirects(boolean relativeRedirects) {_		this.relativeRedirects = relativeRedirects__	};use,this,property,to,enable,relative,redirects,as,explained,in,link,relative,redirect,filter,and,also,using,the,same,response,wrapper,as,that,filter,does,or,if,both,are,configured,only,one,will,wrap,p,by,default,if,this,property,is,set,to,false,in,which,case,calls,to,link,http,servlet,response,send,redirect,string,are,overridden,in,order,to,turn,relative,into,absolute,urls,also,taking,into,account,forwarded,headers,param,relative,redirects,whether,to,use,relative,redirects,since,4,3,10;public,void,set,relative,redirects,boolean,relative,redirects,this,relative,redirects,relative,redirects
ForwardedHeaderFilter -> public void setRelativeRedirects(boolean relativeRedirects);1542468661;Use this property to enable relative redirects as explained in_{@link RelativeRedirectFilter}, and also using the same response wrapper_as that filter does, or if both are configured, only one will wrap._<p>By default, if this property is set to false, in which case calls to_{@link HttpServletResponse#sendRedirect(String)} are overridden in order_to turn relative into absolute URLs, also taking into account forwarded_headers._@param relativeRedirects whether to use relative redirects_@since 4.3.10;public void setRelativeRedirects(boolean relativeRedirects) {_		this.relativeRedirects = relativeRedirects__	};use,this,property,to,enable,relative,redirects,as,explained,in,link,relative,redirect,filter,and,also,using,the,same,response,wrapper,as,that,filter,does,or,if,both,are,configured,only,one,will,wrap,p,by,default,if,this,property,is,set,to,false,in,which,case,calls,to,link,http,servlet,response,send,redirect,string,are,overridden,in,order,to,turn,relative,into,absolute,urls,also,taking,into,account,forwarded,headers,param,relative,redirects,whether,to,use,relative,redirects,since,4,3,10;public,void,set,relative,redirects,boolean,relative,redirects,this,relative,redirects,relative,redirects
ForwardedHeaderFilter -> public void setRelativeRedirects(boolean relativeRedirects);1542613849;Use this property to enable relative redirects as explained in_{@link RelativeRedirectFilter}, and also using the same response wrapper_as that filter does, or if both are configured, only one will wrap._<p>By default, if this property is set to false, in which case calls to_{@link HttpServletResponse#sendRedirect(String)} are overridden in order_to turn relative into absolute URLs, also taking into account forwarded_headers._@param relativeRedirects whether to use relative redirects_@since 4.3.10;public void setRelativeRedirects(boolean relativeRedirects) {_		this.relativeRedirects = relativeRedirects__	};use,this,property,to,enable,relative,redirects,as,explained,in,link,relative,redirect,filter,and,also,using,the,same,response,wrapper,as,that,filter,does,or,if,both,are,configured,only,one,will,wrap,p,by,default,if,this,property,is,set,to,false,in,which,case,calls,to,link,http,servlet,response,send,redirect,string,are,overridden,in,order,to,turn,relative,into,absolute,urls,also,taking,into,account,forwarded,headers,param,relative,redirects,whether,to,use,relative,redirects,since,4,3,10;public,void,set,relative,redirects,boolean,relative,redirects,this,relative,redirects,relative,redirects
