# id;timestamp;commentText;codeText;commentWords;codeWords
RequestContextFilter -> public void setThreadContextInheritable(boolean threadContextInheritable);1328020251;Set whether to expose the LocaleContext and RequestAttributes as inheritable_for child threads (using an {@link java.lang.InheritableThreadLocal})._<p>Default is "false", to avoid side effects on spawned background threads._Switch this to "true" to enable inheritance for custom child threads which_are spawned during request processing and only used for this request_(that is, ending after their initial task, without reuse of the thread)._<p><b>WARNING:</b> Do not use inheritance for child threads if you are_accessing a thread pool which is configured to potentially add new threads_on demand (e.g. a JDK {@link java.util.concurrent.ThreadPoolExecutor}),_since this will expose the inherited context to such a pooled thread.;public void setThreadContextInheritable(boolean threadContextInheritable) {_		this.threadContextInheritable = threadContextInheritable__	};set,whether,to,expose,the,locale,context,and,request,attributes,as,inheritable,for,child,threads,using,an,link,java,lang,inheritable,thread,local,p,default,is,false,to,avoid,side,effects,on,spawned,background,threads,switch,this,to,true,to,enable,inheritance,for,custom,child,threads,which,are,spawned,during,request,processing,and,only,used,for,this,request,that,is,ending,after,their,initial,task,without,reuse,of,the,thread,p,b,warning,b,do,not,use,inheritance,for,child,threads,if,you,are,accessing,a,thread,pool,which,is,configured,to,potentially,add,new,threads,on,demand,e,g,a,jdk,link,java,util,concurrent,thread,pool,executor,since,this,will,expose,the,inherited,context,to,such,a,pooled,thread;public,void,set,thread,context,inheritable,boolean,thread,context,inheritable,this,thread,context,inheritable,thread,context,inheritable
RequestContextFilter -> public void setThreadContextInheritable(boolean threadContextInheritable);1334781369;Set whether to expose the LocaleContext and RequestAttributes as inheritable_for child threads (using an {@link java.lang.InheritableThreadLocal})._<p>Default is "false", to avoid side effects on spawned background threads._Switch this to "true" to enable inheritance for custom child threads which_are spawned during request processing and only used for this request_(that is, ending after their initial task, without reuse of the thread)._<p><b>WARNING:</b> Do not use inheritance for child threads if you are_accessing a thread pool which is configured to potentially add new threads_on demand (e.g. a JDK {@link java.util.concurrent.ThreadPoolExecutor}),_since this will expose the inherited context to such a pooled thread.;public void setThreadContextInheritable(boolean threadContextInheritable) {_		this.threadContextInheritable = threadContextInheritable__	};set,whether,to,expose,the,locale,context,and,request,attributes,as,inheritable,for,child,threads,using,an,link,java,lang,inheritable,thread,local,p,default,is,false,to,avoid,side,effects,on,spawned,background,threads,switch,this,to,true,to,enable,inheritance,for,custom,child,threads,which,are,spawned,during,request,processing,and,only,used,for,this,request,that,is,ending,after,their,initial,task,without,reuse,of,the,thread,p,b,warning,b,do,not,use,inheritance,for,child,threads,if,you,are,accessing,a,thread,pool,which,is,configured,to,potentially,add,new,threads,on,demand,e,g,a,jdk,link,java,util,concurrent,thread,pool,executor,since,this,will,expose,the,inherited,context,to,such,a,pooled,thread;public,void,set,thread,context,inheritable,boolean,thread,context,inheritable,this,thread,context,inheritable,thread,context,inheritable
RequestContextFilter -> public void setThreadContextInheritable(boolean threadContextInheritable);1342803001;Set whether to expose the LocaleContext and RequestAttributes as inheritable_for child threads (using an {@link java.lang.InheritableThreadLocal})._<p>Default is "false", to avoid side effects on spawned background threads._Switch this to "true" to enable inheritance for custom child threads which_are spawned during request processing and only used for this request_(that is, ending after their initial task, without reuse of the thread)._<p><b>WARNING:</b> Do not use inheritance for child threads if you are_accessing a thread pool which is configured to potentially add new threads_on demand (e.g. a JDK {@link java.util.concurrent.ThreadPoolExecutor}),_since this will expose the inherited context to such a pooled thread.;public void setThreadContextInheritable(boolean threadContextInheritable) {_		this.threadContextInheritable = threadContextInheritable__	};set,whether,to,expose,the,locale,context,and,request,attributes,as,inheritable,for,child,threads,using,an,link,java,lang,inheritable,thread,local,p,default,is,false,to,avoid,side,effects,on,spawned,background,threads,switch,this,to,true,to,enable,inheritance,for,custom,child,threads,which,are,spawned,during,request,processing,and,only,used,for,this,request,that,is,ending,after,their,initial,task,without,reuse,of,the,thread,p,b,warning,b,do,not,use,inheritance,for,child,threads,if,you,are,accessing,a,thread,pool,which,is,configured,to,potentially,add,new,threads,on,demand,e,g,a,jdk,link,java,util,concurrent,thread,pool,executor,since,this,will,expose,the,inherited,context,to,such,a,pooled,thread;public,void,set,thread,context,inheritable,boolean,thread,context,inheritable,this,thread,context,inheritable,thread,context,inheritable
RequestContextFilter -> public void setThreadContextInheritable(boolean threadContextInheritable);1344035753;Set whether to expose the LocaleContext and RequestAttributes as inheritable_for child threads (using an {@link java.lang.InheritableThreadLocal})._<p>Default is "false", to avoid side effects on spawned background threads._Switch this to "true" to enable inheritance for custom child threads which_are spawned during request processing and only used for this request_(that is, ending after their initial task, without reuse of the thread)._<p><b>WARNING:</b> Do not use inheritance for child threads if you are_accessing a thread pool which is configured to potentially add new threads_on demand (e.g. a JDK {@link java.util.concurrent.ThreadPoolExecutor}),_since this will expose the inherited context to such a pooled thread.;public void setThreadContextInheritable(boolean threadContextInheritable) {_		this.threadContextInheritable = threadContextInheritable__	};set,whether,to,expose,the,locale,context,and,request,attributes,as,inheritable,for,child,threads,using,an,link,java,lang,inheritable,thread,local,p,default,is,false,to,avoid,side,effects,on,spawned,background,threads,switch,this,to,true,to,enable,inheritance,for,custom,child,threads,which,are,spawned,during,request,processing,and,only,used,for,this,request,that,is,ending,after,their,initial,task,without,reuse,of,the,thread,p,b,warning,b,do,not,use,inheritance,for,child,threads,if,you,are,accessing,a,thread,pool,which,is,configured,to,potentially,add,new,threads,on,demand,e,g,a,jdk,link,java,util,concurrent,thread,pool,executor,since,this,will,expose,the,inherited,context,to,such,a,pooled,thread;public,void,set,thread,context,inheritable,boolean,thread,context,inheritable,this,thread,context,inheritable,thread,context,inheritable
RequestContextFilter -> public void setThreadContextInheritable(boolean threadContextInheritable);1351440638;Set whether to expose the LocaleContext and RequestAttributes as inheritable_for child threads (using an {@link java.lang.InheritableThreadLocal})._<p>Default is "false", to avoid side effects on spawned background threads._Switch this to "true" to enable inheritance for custom child threads which_are spawned during request processing and only used for this request_(that is, ending after their initial task, without reuse of the thread)._<p><b>WARNING:</b> Do not use inheritance for child threads if you are_accessing a thread pool which is configured to potentially add new threads_on demand (e.g. a JDK {@link java.util.concurrent.ThreadPoolExecutor}),_since this will expose the inherited context to such a pooled thread.;public void setThreadContextInheritable(boolean threadContextInheritable) {_		this.threadContextInheritable = threadContextInheritable__	};set,whether,to,expose,the,locale,context,and,request,attributes,as,inheritable,for,child,threads,using,an,link,java,lang,inheritable,thread,local,p,default,is,false,to,avoid,side,effects,on,spawned,background,threads,switch,this,to,true,to,enable,inheritance,for,custom,child,threads,which,are,spawned,during,request,processing,and,only,used,for,this,request,that,is,ending,after,their,initial,task,without,reuse,of,the,thread,p,b,warning,b,do,not,use,inheritance,for,child,threads,if,you,are,accessing,a,thread,pool,which,is,configured,to,potentially,add,new,threads,on,demand,e,g,a,jdk,link,java,util,concurrent,thread,pool,executor,since,this,will,expose,the,inherited,context,to,such,a,pooled,thread;public,void,set,thread,context,inheritable,boolean,thread,context,inheritable,this,thread,context,inheritable,thread,context,inheritable
RequestContextFilter -> public void setThreadContextInheritable(boolean threadContextInheritable);1351442820;Set whether to expose the LocaleContext and RequestAttributes as inheritable_for child threads (using an {@link java.lang.InheritableThreadLocal})._<p>Default is "false", to avoid side effects on spawned background threads._Switch this to "true" to enable inheritance for custom child threads which_are spawned during request processing and only used for this request_(that is, ending after their initial task, without reuse of the thread)._<p><b>WARNING:</b> Do not use inheritance for child threads if you are_accessing a thread pool which is configured to potentially add new threads_on demand (e.g. a JDK {@link java.util.concurrent.ThreadPoolExecutor}),_since this will expose the inherited context to such a pooled thread.;public void setThreadContextInheritable(boolean threadContextInheritable) {_		this.threadContextInheritable = threadContextInheritable__	};set,whether,to,expose,the,locale,context,and,request,attributes,as,inheritable,for,child,threads,using,an,link,java,lang,inheritable,thread,local,p,default,is,false,to,avoid,side,effects,on,spawned,background,threads,switch,this,to,true,to,enable,inheritance,for,custom,child,threads,which,are,spawned,during,request,processing,and,only,used,for,this,request,that,is,ending,after,their,initial,task,without,reuse,of,the,thread,p,b,warning,b,do,not,use,inheritance,for,child,threads,if,you,are,accessing,a,thread,pool,which,is,configured,to,potentially,add,new,threads,on,demand,e,g,a,jdk,link,java,util,concurrent,thread,pool,executor,since,this,will,expose,the,inherited,context,to,such,a,pooled,thread;public,void,set,thread,context,inheritable,boolean,thread,context,inheritable,this,thread,context,inheritable,thread,context,inheritable
RequestContextFilter -> public void setThreadContextInheritable(boolean threadContextInheritable);1356735495;Set whether to expose the LocaleContext and RequestAttributes as inheritable_for child threads (using an {@link java.lang.InheritableThreadLocal})._<p>Default is "false", to avoid side effects on spawned background threads._Switch this to "true" to enable inheritance for custom child threads which_are spawned during request processing and only used for this request_(that is, ending after their initial task, without reuse of the thread)._<p><b>WARNING:</b> Do not use inheritance for child threads if you are_accessing a thread pool which is configured to potentially add new threads_on demand (e.g. a JDK {@link java.util.concurrent.ThreadPoolExecutor}),_since this will expose the inherited context to such a pooled thread.;public void setThreadContextInheritable(boolean threadContextInheritable) {_		this.threadContextInheritable = threadContextInheritable__	};set,whether,to,expose,the,locale,context,and,request,attributes,as,inheritable,for,child,threads,using,an,link,java,lang,inheritable,thread,local,p,default,is,false,to,avoid,side,effects,on,spawned,background,threads,switch,this,to,true,to,enable,inheritance,for,custom,child,threads,which,are,spawned,during,request,processing,and,only,used,for,this,request,that,is,ending,after,their,initial,task,without,reuse,of,the,thread,p,b,warning,b,do,not,use,inheritance,for,child,threads,if,you,are,accessing,a,thread,pool,which,is,configured,to,potentially,add,new,threads,on,demand,e,g,a,jdk,link,java,util,concurrent,thread,pool,executor,since,this,will,expose,the,inherited,context,to,such,a,pooled,thread;public,void,set,thread,context,inheritable,boolean,thread,context,inheritable,this,thread,context,inheritable,thread,context,inheritable
RequestContextFilter -> public void setThreadContextInheritable(boolean threadContextInheritable);1400256389;Set whether to expose the LocaleContext and RequestAttributes as inheritable_for child threads (using an {@link java.lang.InheritableThreadLocal})._<p>Default is "false", to avoid side effects on spawned background threads._Switch this to "true" to enable inheritance for custom child threads which_are spawned during request processing and only used for this request_(that is, ending after their initial task, without reuse of the thread)._<p><b>WARNING:</b> Do not use inheritance for child threads if you are_accessing a thread pool which is configured to potentially add new threads_on demand (e.g. a JDK {@link java.util.concurrent.ThreadPoolExecutor}),_since this will expose the inherited context to such a pooled thread.;public void setThreadContextInheritable(boolean threadContextInheritable) {_		this.threadContextInheritable = threadContextInheritable__	};set,whether,to,expose,the,locale,context,and,request,attributes,as,inheritable,for,child,threads,using,an,link,java,lang,inheritable,thread,local,p,default,is,false,to,avoid,side,effects,on,spawned,background,threads,switch,this,to,true,to,enable,inheritance,for,custom,child,threads,which,are,spawned,during,request,processing,and,only,used,for,this,request,that,is,ending,after,their,initial,task,without,reuse,of,the,thread,p,b,warning,b,do,not,use,inheritance,for,child,threads,if,you,are,accessing,a,thread,pool,which,is,configured,to,potentially,add,new,threads,on,demand,e,g,a,jdk,link,java,util,concurrent,thread,pool,executor,since,this,will,expose,the,inherited,context,to,such,a,pooled,thread;public,void,set,thread,context,inheritable,boolean,thread,context,inheritable,this,thread,context,inheritable,thread,context,inheritable
RequestContextFilter -> public void setThreadContextInheritable(boolean threadContextInheritable);1427228652;Set whether to expose the LocaleContext and RequestAttributes as inheritable_for child threads (using an {@link java.lang.InheritableThreadLocal})._<p>Default is "false", to avoid side effects on spawned background threads._Switch this to "true" to enable inheritance for custom child threads which_are spawned during request processing and only used for this request_(that is, ending after their initial task, without reuse of the thread)._<p><b>WARNING:</b> Do not use inheritance for child threads if you are_accessing a thread pool which is configured to potentially add new threads_on demand (e.g. a JDK {@link java.util.concurrent.ThreadPoolExecutor}),_since this will expose the inherited context to such a pooled thread.;public void setThreadContextInheritable(boolean threadContextInheritable) {_		this.threadContextInheritable = threadContextInheritable__	};set,whether,to,expose,the,locale,context,and,request,attributes,as,inheritable,for,child,threads,using,an,link,java,lang,inheritable,thread,local,p,default,is,false,to,avoid,side,effects,on,spawned,background,threads,switch,this,to,true,to,enable,inheritance,for,custom,child,threads,which,are,spawned,during,request,processing,and,only,used,for,this,request,that,is,ending,after,their,initial,task,without,reuse,of,the,thread,p,b,warning,b,do,not,use,inheritance,for,child,threads,if,you,are,accessing,a,thread,pool,which,is,configured,to,potentially,add,new,threads,on,demand,e,g,a,jdk,link,java,util,concurrent,thread,pool,executor,since,this,will,expose,the,inherited,context,to,such,a,pooled,thread;public,void,set,thread,context,inheritable,boolean,thread,context,inheritable,this,thread,context,inheritable,thread,context,inheritable
RequestContextFilter -> public void setThreadContextInheritable(boolean threadContextInheritable);1529721864;Set whether to expose the LocaleContext and RequestAttributes as inheritable_for child threads (using an {@link java.lang.InheritableThreadLocal})._<p>Default is "false", to avoid side effects on spawned background threads._Switch this to "true" to enable inheritance for custom child threads which_are spawned during request processing and only used for this request_(that is, ending after their initial task, without reuse of the thread)._<p><b>WARNING:</b> Do not use inheritance for child threads if you are_accessing a thread pool which is configured to potentially add new threads_on demand (e.g. a JDK {@link java.util.concurrent.ThreadPoolExecutor}),_since this will expose the inherited context to such a pooled thread.;public void setThreadContextInheritable(boolean threadContextInheritable) {_		this.threadContextInheritable = threadContextInheritable__	};set,whether,to,expose,the,locale,context,and,request,attributes,as,inheritable,for,child,threads,using,an,link,java,lang,inheritable,thread,local,p,default,is,false,to,avoid,side,effects,on,spawned,background,threads,switch,this,to,true,to,enable,inheritance,for,custom,child,threads,which,are,spawned,during,request,processing,and,only,used,for,this,request,that,is,ending,after,their,initial,task,without,reuse,of,the,thread,p,b,warning,b,do,not,use,inheritance,for,child,threads,if,you,are,accessing,a,thread,pool,which,is,configured,to,potentially,add,new,threads,on,demand,e,g,a,jdk,link,java,util,concurrent,thread,pool,executor,since,this,will,expose,the,inherited,context,to,such,a,pooled,thread;public,void,set,thread,context,inheritable,boolean,thread,context,inheritable,this,thread,context,inheritable,thread,context,inheritable
RequestContextFilter -> @Override 	protected boolean shouldNotFilterAsyncDispatch();1351440638;The default value is "false" in which case the filter will set up the request_context in each asynchronously dispatched thread.;@Override_	protected boolean shouldNotFilterAsyncDispatch() {_		return false__	};the,default,value,is,false,in,which,case,the,filter,will,set,up,the,request,context,in,each,asynchronously,dispatched,thread;override,protected,boolean,should,not,filter,async,dispatch,return,false
RequestContextFilter -> @Override 	protected boolean shouldNotFilterAsyncDispatch();1351442820;Returns "false" so that the filter may set up the request context in each_asynchronously dispatched thread.;@Override_	protected boolean shouldNotFilterAsyncDispatch() {_		return false__	};returns,false,so,that,the,filter,may,set,up,the,request,context,in,each,asynchronously,dispatched,thread;override,protected,boolean,should,not,filter,async,dispatch,return,false
RequestContextFilter -> @Override 	protected boolean shouldNotFilterAsyncDispatch();1356735495;Returns "false" so that the filter may set up the request context in each_asynchronously dispatched thread.;@Override_	protected boolean shouldNotFilterAsyncDispatch() {_		return false__	};returns,false,so,that,the,filter,may,set,up,the,request,context,in,each,asynchronously,dispatched,thread;override,protected,boolean,should,not,filter,async,dispatch,return,false
RequestContextFilter -> @Override 	protected boolean shouldNotFilterAsyncDispatch();1400256389;Returns "false" so that the filter may set up the request context in each_asynchronously dispatched thread.;@Override_	protected boolean shouldNotFilterAsyncDispatch() {_		return false__	};returns,false,so,that,the,filter,may,set,up,the,request,context,in,each,asynchronously,dispatched,thread;override,protected,boolean,should,not,filter,async,dispatch,return,false
RequestContextFilter -> @Override 	protected boolean shouldNotFilterAsyncDispatch();1427228652;Returns "false" so that the filter may set up the request context in each_asynchronously dispatched thread.;@Override_	protected boolean shouldNotFilterAsyncDispatch() {_		return false__	};returns,false,so,that,the,filter,may,set,up,the,request,context,in,each,asynchronously,dispatched,thread;override,protected,boolean,should,not,filter,async,dispatch,return,false
RequestContextFilter -> @Override 	protected boolean shouldNotFilterAsyncDispatch();1529721864;Returns "false" so that the filter may set up the request context in each_asynchronously dispatched thread.;@Override_	protected boolean shouldNotFilterAsyncDispatch() {_		return false__	};returns,false,so,that,the,filter,may,set,up,the,request,context,in,each,asynchronously,dispatched,thread;override,protected,boolean,should,not,filter,async,dispatch,return,false
RequestContextFilter -> @Override 	protected boolean shouldNotFilterErrorDispatch();1351442820;Returns "false" so that the filter may set up the request context in an_error dispatch.;@Override_	protected boolean shouldNotFilterErrorDispatch() {_		return false__	};returns,false,so,that,the,filter,may,set,up,the,request,context,in,an,error,dispatch;override,protected,boolean,should,not,filter,error,dispatch,return,false
RequestContextFilter -> @Override 	protected boolean shouldNotFilterErrorDispatch();1356735495;Returns "false" so that the filter may set up the request context in an_error dispatch.;@Override_	protected boolean shouldNotFilterErrorDispatch() {_		return false__	};returns,false,so,that,the,filter,may,set,up,the,request,context,in,an,error,dispatch;override,protected,boolean,should,not,filter,error,dispatch,return,false
RequestContextFilter -> @Override 	protected boolean shouldNotFilterErrorDispatch();1400256389;Returns "false" so that the filter may set up the request context in an_error dispatch.;@Override_	protected boolean shouldNotFilterErrorDispatch() {_		return false__	};returns,false,so,that,the,filter,may,set,up,the,request,context,in,an,error,dispatch;override,protected,boolean,should,not,filter,error,dispatch,return,false
RequestContextFilter -> @Override 	protected boolean shouldNotFilterErrorDispatch();1427228652;Returns "false" so that the filter may set up the request context in an_error dispatch.;@Override_	protected boolean shouldNotFilterErrorDispatch() {_		return false__	};returns,false,so,that,the,filter,may,set,up,the,request,context,in,an,error,dispatch;override,protected,boolean,should,not,filter,error,dispatch,return,false
RequestContextFilter -> @Override 	protected boolean shouldNotFilterErrorDispatch();1529721864;Returns "false" so that the filter may set up the request context in an_error dispatch.;@Override_	protected boolean shouldNotFilterErrorDispatch() {_		return false__	};returns,false,so,that,the,filter,may,set,up,the,request,context,in,an,error,dispatch;override,protected,boolean,should,not,filter,error,dispatch,return,false
RequestContextFilter -> private AbstractDelegatingCallable getChainedCallable(final HttpServletRequest request, 			final ServletRequestAttributes requestAttributes);1334781369;Create a Callable to use to complete processing in an async execution chain.;private AbstractDelegatingCallable getChainedCallable(final HttpServletRequest request,_			final ServletRequestAttributes requestAttributes) {__		return new AbstractDelegatingCallable() {_			public Object call() throws Exception {_				initContextHolders(request, requestAttributes)__				try {_					getNextCallable().call()__				}_				finally {_					resetContextHolders()__					requestAttributes.requestCompleted()__					if (logger.isDebugEnabled()) {_						logger.debug("Cleared thread-bound request context: " + request)__					}_				}_				return null__			}_		}__	};create,a,callable,to,use,to,complete,processing,in,an,async,execution,chain;private,abstract,delegating,callable,get,chained,callable,final,http,servlet,request,request,final,servlet,request,attributes,request,attributes,return,new,abstract,delegating,callable,public,object,call,throws,exception,init,context,holders,request,request,attributes,try,get,next,callable,call,finally,reset,context,holders,request,attributes,request,completed,if,logger,is,debug,enabled,logger,debug,cleared,thread,bound,request,context,request,return,null
RequestContextFilter -> private AbstractDelegatingCallable getChainedCallable(final HttpServletRequest request, 			final ServletRequestAttributes requestAttributes);1342803001;Create a Callable to use to complete processing in an async execution chain.;private AbstractDelegatingCallable getChainedCallable(final HttpServletRequest request,_			final ServletRequestAttributes requestAttributes) {__		return new AbstractDelegatingCallable() {_			public Object call() throws Exception {_				initContextHolders(request, requestAttributes)__				try {_					getNext().call()__				}_				finally {_					resetContextHolders()__					requestAttributes.requestCompleted()__					if (logger.isDebugEnabled()) {_						logger.debug("Cleared thread-bound request context: " + request)__					}_				}_				return null__			}_		}__	};create,a,callable,to,use,to,complete,processing,in,an,async,execution,chain;private,abstract,delegating,callable,get,chained,callable,final,http,servlet,request,request,final,servlet,request,attributes,request,attributes,return,new,abstract,delegating,callable,public,object,call,throws,exception,init,context,holders,request,request,attributes,try,get,next,call,finally,reset,context,holders,request,attributes,request,completed,if,logger,is,debug,enabled,logger,debug,cleared,thread,bound,request,context,request,return,null
