commented;modifiers;parameterAmount;loc;comment;code
false;private,static;2;22;;private static PathContainer initContextPath(PathContainer path, @Nullable String contextPath) {     if (!StringUtils.hasText(contextPath) || "/".equals(contextPath)) {         return PathContainer.parsePath("").     }     validateContextPath(path.value(), contextPath).     int length = contextPath.length().     int counter = 0.     for (int i = 0. i < path.elements().size(). i++) {         PathContainer.Element element = path.elements().get(i).         counter += element.value().length().         if (length == counter) {             return path.subPath(0, i + 1).         }     }     // Should not happen..     throw new IllegalStateException("Failed to initialize contextPath '" + contextPath + "'" + " for requestPath '" + path.value() + "'"). }
false;private,static;2;15;;private static void validateContextPath(String fullPath, String contextPath) {     int length = contextPath.length().     if (contextPath.charAt(0) != '/' || contextPath.charAt(length - 1) == '/') {         throw new IllegalArgumentException("Invalid contextPath: '" + contextPath + "': " + "must start with '/' and not end with '/'").     }     if (!fullPath.startsWith(contextPath)) {         throw new IllegalArgumentException("Invalid contextPath '" + contextPath + "': " + "must match the start of requestPath: '" + fullPath + "'").     }     if (fullPath.length() > length && fullPath.charAt(length) != '/') {         throw new IllegalArgumentException("Invalid contextPath '" + contextPath + "': " + "must match to full path segments for requestPath: '" + fullPath + "'").     } }
false;private,static;2;3;;private static PathContainer extractPathWithinApplication(PathContainer fullPath, PathContainer contextPath) {     return fullPath.subPath(contextPath.elements().size()). }
false;public;0;4;;// PathContainer methods.. @Override public String value() {     return this.fullPath.value(). }
false;public;0;4;;@Override public List<Element> elements() {     return this.fullPath.elements(). }
false;public;0;4;;// RequestPath methods.. @Override public PathContainer contextPath() {     return this.contextPath. }
false;public;0;4;;@Override public PathContainer pathWithinApplication() {     return this.pathWithinApplication. }
false;public;1;4;;@Override public RequestPath modifyContextPath(String contextPath) {     return new DefaultRequestPath(this, contextPath). }
false;public;1;13;;@Override public boolean equals(@Nullable Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     DefaultRequestPath otherPath = (DefaultRequestPath) other.     return (this.fullPath.equals(otherPath.fullPath) && this.contextPath.equals(otherPath.contextPath) && this.pathWithinApplication.equals(otherPath.pathWithinApplication)). }
false;public;0;7;;@Override public int hashCode() {     int result = this.fullPath.hashCode().     result = 31 * result + this.contextPath.hashCode().     result = 31 * result + this.pathWithinApplication.hashCode().     return result. }
false;public;0;4;;@Override public String toString() {     return this.fullPath.toString(). }
