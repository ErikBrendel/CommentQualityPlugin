commented;modifiers;parameterAmount;loc;comment;code
false;private,static;2;4;;private static String initReason(@Nullable MediaType contentType, @Nullable ResolvableType bodyType) {     return "Content type '" + (contentType != null ? contentType : "") + "' not supported" + (bodyType != null ? " for bodyType=" + bodyType.toString() : ""). }
true;public;0;4;/**  * Return the request Content-Type header if it was parsed successfully,  * or {@code null} otherwise.  */ ;/**  * Return the request Content-Type header if it was parsed successfully,  * or {@code null} otherwise.  */ @Nullable public MediaType getContentType() {     return this.contentType. }
true;public;0;3;/**  * Return the list of supported content types in cases when the Content-Type  * header is parsed but not supported, or an empty list otherwise.  */ ;/**  * Return the list of supported content types in cases when the Content-Type  * header is parsed but not supported, or an empty list otherwise.  */ public List<MediaType> getSupportedMediaTypes() {     return this.supportedMediaTypes. }
true;public;0;4;/**  * Return the body type in the context of which this exception was generated.  * <p>This is applicable when the exception was raised as a result trying to  * encode from or decode to a specific Java type.  * @return the body type, or {@code null} if not available  * @since 5.1  */ ;/**  * Return the body type in the context of which this exception was generated.  * <p>This is applicable when the exception was raised as a result trying to  * encode from or decode to a specific Java type.  * @return the body type, or {@code null} if not available  * @since 5.1  */ @Nullable public ResolvableType getBodyType() {     return this.bodyType. }
