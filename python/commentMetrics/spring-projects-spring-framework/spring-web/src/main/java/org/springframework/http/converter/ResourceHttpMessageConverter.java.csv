commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected boolean supports(Class<?> clazz) {     return Resource.class.isAssignableFrom(clazz). }
false;public;0;5;;@Override @Nullable public String getFilename() {     return inputMessage.getHeaders().getContentDisposition().getFilename(). }
false;public;0;4;;@Override public String getFilename() {     return inputMessage.getHeaders().getContentDisposition().getFilename(). }
false;protected;2;26;;@Override protected Resource readInternal(Class<? extends Resource> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {     if (this.supportsReadStreaming && InputStreamResource.class == clazz) {         return new InputStreamResource(inputMessage.getBody()) {              @Override             public String getFilename() {                 return inputMessage.getHeaders().getContentDisposition().getFilename().             }         }.     } else if (Resource.class == clazz || ByteArrayResource.class.isAssignableFrom(clazz)) {         byte[] body = StreamUtils.copyToByteArray(inputMessage.getBody()).         return new ByteArrayResource(body) {              @Override             @Nullable             public String getFilename() {                 return inputMessage.getHeaders().getContentDisposition().getFilename().             }         }.     } else {         throw new HttpMessageNotReadableException("Unsupported resource class: " + clazz, inputMessage).     } }
false;protected;1;4;;@Override protected MediaType getDefaultContentType(Resource resource) {     return MediaTypeFactory.getMediaType(resource).orElse(MediaType.APPLICATION_OCTET_STREAM). }
false;protected;2;10;;@Override protected Long getContentLength(Resource resource, @Nullable MediaType contentType) throws IOException {     // Note: custom InputStreamResource subclasses could provide a pre-calculated content length!     if (InputStreamResource.class == resource.getClass()) {         return null.     }     long contentLength = resource.contentLength().     return (contentLength < 0 ? null : contentLength). }
false;protected;2;6;;@Override protected void writeInternal(Resource resource, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {     writeContent(resource, outputMessage). }
false;protected;2;23;;protected void writeContent(Resource resource, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {     try {         InputStream in = resource.getInputStream().         try {             StreamUtils.copy(in, outputMessage.getBody()).         } catch (NullPointerException ex) {         // ignore, see SPR-13620         } finally {             try {                 in.close().             } catch (Throwable ex) {             // ignore, see SPR-12999             }         }     } catch (FileNotFoundException ex) {     // ignore, see SPR-12999     } }
