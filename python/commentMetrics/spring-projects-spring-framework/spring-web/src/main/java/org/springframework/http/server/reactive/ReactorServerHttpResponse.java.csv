commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@SuppressWarnings("unchecked") @Override public <T> T getNativeResponse() {     return (T) this.response. }
false;public;0;10;;@Override @SuppressWarnings("ConstantConditions") public HttpStatus getStatusCode() {     HttpStatus httpStatus = super.getStatusCode().     if (httpStatus == null) {         HttpResponseStatus status = this.response.status().         httpStatus = status != null ? HttpStatus.resolve(status.code()) : null.     }     return httpStatus. }
false;protected;0;7;;@Override protected void applyStatusCode() {     Integer statusCode = getStatusCodeValue().     if (statusCode != null) {         this.response.status(statusCode).     } }
false;protected;1;4;;@Override protected Mono<Void> writeWithInternal(Publisher<? extends DataBuffer> publisher) {     return this.response.send(toByteBufs(publisher)).then(). }
false;protected;1;4;;@Override protected Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<? extends DataBuffer>> publisher) {     return this.response.sendGroups(Flux.from(publisher).map(this::toByteBufs)).then(). }
false;protected;0;3;;@Override protected void applyHeaders() { }
false;protected;0;20;;@Override protected void applyCookies() {     for (String name : getCookies().keySet()) {         for (ResponseCookie httpCookie : getCookies().get(name)) {             Cookie cookie = new DefaultCookie(name, httpCookie.getValue()).             if (!httpCookie.getMaxAge().isNegative()) {                 cookie.setMaxAge(httpCookie.getMaxAge().getSeconds()).             }             if (httpCookie.getDomain() != null) {                 cookie.setDomain(httpCookie.getDomain()).             }             if (httpCookie.getPath() != null) {                 cookie.setPath(httpCookie.getPath()).             }             cookie.setSecure(httpCookie.isSecure()).             cookie.setHttpOnly(httpCookie.isHttpOnly()).             this.response.addCookie(cookie).         }     } }
false;public;3;4;;@Override public Mono<Void> writeWith(Path file, long position, long count) {     return doCommit(() -> this.response.sendFile(file, position, count).then()). }
false;private;1;3;;private Publisher<ByteBuf> toByteBufs(Publisher<? extends DataBuffer> dataBuffers) {     return Flux.from(dataBuffers).map(NettyDataBufferFactory::toByteBuf). }
