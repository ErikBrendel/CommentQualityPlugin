# id;timestamp;commentText;codeText;commentWords;codeWords
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions);1398960186;Whether to ignore requests that have a file extension that does not match_any mapped media types. Setting this to {@code false} will result in a_{@code HttpMediaTypeNotAcceptableException} when there is no match.__<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions) {_		this.ignoreUnknownPathExtensions = ignoreUnknownPathExtensions__	};whether,to,ignore,requests,that,have,a,file,extension,that,does,not,match,any,mapped,media,types,setting,this,to,code,false,will,result,in,a,code,http,media,type,not,acceptable,exception,when,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,unknown,path,extensions,this,ignore,unknown,path,extensions,ignore,unknown,path,extensions
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions);1405696918;Whether to ignore requests that have a file extension that does not match_any mapped media types. Setting this to {@code false} will result in a_{@code HttpMediaTypeNotAcceptableException} when there is no match.__<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions) {_		this.ignoreUnknownPathExtensions = ignoreUnknownPathExtensions__	};whether,to,ignore,requests,that,have,a,file,extension,that,does,not,match,any,mapped,media,types,setting,this,to,code,false,will,result,in,a,code,http,media,type,not,acceptable,exception,when,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,unknown,path,extensions,this,ignore,unknown,path,extensions,ignore,unknown,path,extensions
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions);1413988332;Whether to ignore requests that have a file extension that does not match_any mapped media types. Setting this to {@code false} will result in a_{@code HttpMediaTypeNotAcceptableException} when there is no match.__<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions) {_		this.ignoreUnknownPathExtensions = ignoreUnknownPathExtensions__	};whether,to,ignore,requests,that,have,a,file,extension,that,does,not,match,any,mapped,media,types,setting,this,to,code,false,will,result,in,a,code,http,media,type,not,acceptable,exception,when,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,unknown,path,extensions,this,ignore,unknown,path,extensions,ignore,unknown,path,extensions
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions);1414005334;Whether to ignore requests that have a file extension that does not match_any mapped media types. Setting this to {@code false} will result in a_{@code HttpMediaTypeNotAcceptableException} when there is no match.__<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions) {_		this.ignoreUnknownPathExtensions = ignoreUnknownPathExtensions__	};whether,to,ignore,requests,that,have,a,file,extension,that,does,not,match,any,mapped,media,types,setting,this,to,code,false,will,result,in,a,code,http,media,type,not,acceptable,exception,when,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,unknown,path,extensions,this,ignore,unknown,path,extensions,ignore,unknown,path,extensions
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions);1414031301;Whether to ignore requests that have a file extension that does not match_any mapped media types. Setting this to {@code false} will result in a_{@code HttpMediaTypeNotAcceptableException} when there is no match.__<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions) {_		this.ignoreUnknownPathExtensions = ignoreUnknownPathExtensions__	};whether,to,ignore,requests,that,have,a,file,extension,that,does,not,match,any,mapped,media,types,setting,this,to,code,false,will,result,in,a,code,http,media,type,not,acceptable,exception,when,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,unknown,path,extensions,this,ignore,unknown,path,extensions,ignore,unknown,path,extensions
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions);1441370327;Whether to ignore requests that have a file extension that does not match_any mapped media types. Setting this to {@code false} will result in a_{@code HttpMediaTypeNotAcceptableException} when there is no match.__<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions) {_		this.ignoreUnknownPathExtensions = ignoreUnknownPathExtensions__	};whether,to,ignore,requests,that,have,a,file,extension,that,does,not,match,any,mapped,media,types,setting,this,to,code,false,will,result,in,a,code,http,media,type,not,acceptable,exception,when,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,unknown,path,extensions,this,ignore,unknown,path,extensions,ignore,unknown,path,extensions
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions);1443560917;Whether to ignore requests that have a file extension that does not match_any mapped media types. Setting this to {@code false} will result in a_{@code HttpMediaTypeNotAcceptableException} when there is no match.__<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignoreUnknownPathExtensions) {_		this.ignoreUnknownPathExtensions = ignoreUnknownPathExtensions__	};whether,to,ignore,requests,that,have,a,file,extension,that,does,not,match,any,mapped,media,types,setting,this,to,code,false,will,result,in,a,code,http,media,type,not,acceptable,exception,when,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,unknown,path,extensions,this,ignore,unknown,path,extensions,ignore,unknown,path,extensions
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1342865802;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1348666123;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1355313310;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1356735495;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1357119239;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1357248712;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1362408075;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1368482696;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1398960186;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1405696918;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1413988332;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1414005334;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1414031301;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1441370327;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1443560917;Set the parameter name that can be used to determine the requested media type_if the {@link #setFavorParameter} property is {@code true}._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,parameter,name,that,can,be,used,to,determine,the,requested,media,type,if,the,link,set,favor,parameter,property,is,code,true,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1443636308;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1444898007;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1446769889;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1446771757;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1464879764;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1467730834;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1490104706;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1490285806;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1491926110;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1496837955;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1498780456;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1499788456;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1499799657;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1502974979;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1506534768;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1522103912;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setParameterName(String parameterName);1530174524;Set the query parameter name to use when {@link #setFavorParameter} is on._<p>The default parameter name is {@code "format"}.;public void setParameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__	};set,the,query,parameter,name,to,use,when,link,set,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,void,set,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypes(List<MediaType> contentTypes);1491926110;Set the default content types to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy_@since 5.0;public void setDefaultContentTypes(List<MediaType> contentTypes) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentTypes)__	};set,the,default,content,types,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy,since,5,0;public,void,set,default,content,types,list,media,type,content,types,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,types
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypes(List<MediaType> contentTypes);1496837955;Set the default content types to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy_@since 5.0;public void setDefaultContentTypes(List<MediaType> contentTypes) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentTypes)__	};set,the,default,content,types,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy,since,5,0;public,void,set,default,content,types,list,media,type,content,types,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,types
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypes(List<MediaType> contentTypes);1498780456;Set the default content types to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy_@since 5.0;public void setDefaultContentTypes(List<MediaType> contentTypes) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentTypes)__	};set,the,default,content,types,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy,since,5,0;public,void,set,default,content,types,list,media,type,content,types,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,types
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypes(List<MediaType> contentTypes);1499788456;Set the default content types to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy_@since 5.0;public void setDefaultContentTypes(List<MediaType> contentTypes) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentTypes)__	};set,the,default,content,types,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy,since,5,0;public,void,set,default,content,types,list,media,type,content,types,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,types
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypes(List<MediaType> contentTypes);1499799657;Set the default content types to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy_@since 5.0;public void setDefaultContentTypes(List<MediaType> contentTypes) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentTypes)__	};set,the,default,content,types,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy,since,5,0;public,void,set,default,content,types,list,media,type,content,types,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,types
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypes(List<MediaType> contentTypes);1502974979;Set the default content types to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy_@since 5.0;public void setDefaultContentTypes(List<MediaType> contentTypes) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentTypes)__	};set,the,default,content,types,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy,since,5,0;public,void,set,default,content,types,list,media,type,content,types,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,types
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypes(List<MediaType> contentTypes);1506534768;Set the default content types to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy_@since 5.0;public void setDefaultContentTypes(List<MediaType> contentTypes) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentTypes)__	};set,the,default,content,types,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy,since,5,0;public,void,set,default,content,types,list,media,type,content,types,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,types
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypes(List<MediaType> contentTypes);1522103912;Set the default content types to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy_@since 5.0;public void setDefaultContentTypes(List<MediaType> contentTypes) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentTypes)__	};set,the,default,content,types,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy,since,5,0;public,void,set,default,content,types,list,media,type,content,types,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,types
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypes(List<MediaType> contentTypes);1530174524;Set the default content types to use when no content type is requested._<p>By default this is not set._@since 5.0_@see #setDefaultContentTypeStrategy;public void setDefaultContentTypes(List<MediaType> contentTypes) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentTypes)__	};set,the,default,content,types,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,since,5,0,see,set,default,content,type,strategy;public,void,set,default,content,types,list,media,type,content,types,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,types
ContentNegotiationManagerFactoryBean -> @Deprecated 	public void setUseJaf(boolean useJaf);1490104706;@deprecated as 5.0, in favor of {@link MediaTypeFactory}, which has no JAF dependency.;@Deprecated_	public void setUseJaf(boolean useJaf) {_	};deprecated,as,5,0,in,favor,of,link,media,type,factory,which,has,no,jaf,dependency;deprecated,public,void,set,use,jaf,boolean,use,jaf
ContentNegotiationManagerFactoryBean -> @Deprecated 	public void setUseJaf(boolean useJaf);1490285806;@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}, which_has reverse behavior.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
ContentNegotiationManagerFactoryBean -> @Deprecated 	public void setUseJaf(boolean useJaf);1491926110;@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}, which_has reverse behavior.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
ContentNegotiationManagerFactoryBean -> @Deprecated 	public void setUseJaf(boolean useJaf);1496837955;@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}, which_has reverse behavior.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
ContentNegotiationManagerFactoryBean -> @Deprecated 	public void setUseJaf(boolean useJaf);1498780456;@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}, which_has reverse behavior.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
ContentNegotiationManagerFactoryBean -> @Deprecated 	public void setUseJaf(boolean useJaf);1499788456;@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}, which_has reverse behavior.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
ContentNegotiationManagerFactoryBean -> @Deprecated 	public void setUseJaf(boolean useJaf);1499799657;@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}, which_has reverse behavior.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
ContentNegotiationManagerFactoryBean -> @Deprecated 	public void setUseJaf(boolean useJaf);1502974979;@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}, which_has reverse behavior.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
ContentNegotiationManagerFactoryBean -> @Deprecated 	public void setUseJaf(boolean useJaf);1506534768;@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}, which_has reverse behavior.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
ContentNegotiationManagerFactoryBean -> @Deprecated 	public void setUseJaf(boolean useJaf);1522103912;@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}, which_has reverse behavior.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
ContentNegotiationManagerFactoryBean -> @Deprecated 	public void setUseJaf(boolean useJaf);1530174524;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types._@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}, which_has reverse behavior.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean,which,has,reverse,behavior;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1490285806;When {@link #setFavorPathExtension favorPathExtension} is set, this_property determines whether to use only registered {@code MediaType} mappings_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use defaults if available.;public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__	};when,link,set,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,defaults,if,available;public,void,set,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only
ContentNegotiationManagerFactoryBean -> public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1491926110;When {@link #setFavorPathExtension favorPathExtension} is set, this_property determines whether to use only registered {@code MediaType} mappings_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use defaults if available.;public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__	};when,link,set,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,defaults,if,available;public,void,set,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only
ContentNegotiationManagerFactoryBean -> public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1496837955;When {@link #setFavorPathExtension favorPathExtension} is set, this_property determines whether to use only registered {@code MediaType} mappings_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use defaults if available.;public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__	};when,link,set,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,defaults,if,available;public,void,set,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only
ContentNegotiationManagerFactoryBean -> public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1498780456;When {@link #setFavorPathExtension favorPathExtension} is set, this_property determines whether to use only registered {@code MediaType} mappings_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use defaults if available.;public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__	};when,link,set,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,defaults,if,available;public,void,set,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only
ContentNegotiationManagerFactoryBean -> public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1499788456;When {@link #setFavorPathExtension favorPathExtension} or_{@link #setFavorParameter(boolean)} is set, this property determines_whether to use only registered {@code MediaType} mappings or to allow_dynamic resolution, e.g. via {@link MediaTypeFactory}._<p>By default this is not set in which case dynamic resolution is on.;public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__	};when,link,set,favor,path,extension,favor,path,extension,or,link,set,favor,parameter,boolean,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,or,to,allow,dynamic,resolution,e,g,via,link,media,type,factory,p,by,default,this,is,not,set,in,which,case,dynamic,resolution,is,on;public,void,set,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only
ContentNegotiationManagerFactoryBean -> public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1499799657;When {@link #setFavorPathExtension favorPathExtension} or_{@link #setFavorParameter(boolean)} is set, this property determines_whether to use only registered {@code MediaType} mappings or to allow_dynamic resolution, e.g. via {@link MediaTypeFactory}._<p>By default this is not set in which case dynamic resolution is on.;public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__	};when,link,set,favor,path,extension,favor,path,extension,or,link,set,favor,parameter,boolean,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,or,to,allow,dynamic,resolution,e,g,via,link,media,type,factory,p,by,default,this,is,not,set,in,which,case,dynamic,resolution,is,on;public,void,set,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only
ContentNegotiationManagerFactoryBean -> public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1502974979;When {@link #setFavorPathExtension favorPathExtension} or_{@link #setFavorParameter(boolean)} is set, this property determines_whether to use only registered {@code MediaType} mappings or to allow_dynamic resolution, e.g. via {@link MediaTypeFactory}._<p>By default this is not set in which case dynamic resolution is on.;public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__	};when,link,set,favor,path,extension,favor,path,extension,or,link,set,favor,parameter,boolean,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,or,to,allow,dynamic,resolution,e,g,via,link,media,type,factory,p,by,default,this,is,not,set,in,which,case,dynamic,resolution,is,on;public,void,set,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only
ContentNegotiationManagerFactoryBean -> public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1506534768;When {@link #setFavorPathExtension favorPathExtension} or_{@link #setFavorParameter(boolean)} is set, this property determines_whether to use only registered {@code MediaType} mappings or to allow_dynamic resolution, e.g. via {@link MediaTypeFactory}._<p>By default this is not set in which case dynamic resolution is on.;public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__	};when,link,set,favor,path,extension,favor,path,extension,or,link,set,favor,parameter,boolean,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,or,to,allow,dynamic,resolution,e,g,via,link,media,type,factory,p,by,default,this,is,not,set,in,which,case,dynamic,resolution,is,on;public,void,set,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only
ContentNegotiationManagerFactoryBean -> public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1522103912;When {@link #setFavorPathExtension favorPathExtension} or_{@link #setFavorParameter(boolean)} is set, this property determines_whether to use only registered {@code MediaType} mappings or to allow_dynamic resolution, e.g. via {@link MediaTypeFactory}._<p>By default this is not set in which case dynamic resolution is on.;public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__	};when,link,set,favor,path,extension,favor,path,extension,or,link,set,favor,parameter,boolean,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,or,to,allow,dynamic,resolution,e,g,via,link,media,type,factory,p,by,default,this,is,not,set,in,which,case,dynamic,resolution,is,on;public,void,set,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only
ContentNegotiationManagerFactoryBean -> public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1530174524;When {@link #setFavorPathExtension favorPathExtension} or_{@link #setFavorParameter(boolean)} is set, this property determines_whether to use only registered {@code MediaType} mappings or to allow_dynamic resolution, e.g. via {@link MediaTypeFactory}._<p>By default this is not set in which case dynamic resolution is on.;public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__	};when,link,set,favor,path,extension,favor,path,extension,or,link,set,favor,parameter,boolean,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,or,to,allow,dynamic,resolution,e,g,via,link,media,type,factory,p,by,default,this,is,not,set,in,which,case,dynamic,resolution,is,on;public,void,set,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only
ContentNegotiationManagerFactoryBean -> public void setStrategies(@Nullable List<ContentNegotiationStrategy> strategies);1499799657;Set the exact list of strategies to use._<p><strong>Note:</strong> use of this method is mutually exclusive with_use of all other setters in this class which customize a default, fixed_set of strategies. See class level doc for more details._@param strategies the strategies to use_@since 5.0;public void setStrategies(@Nullable List<ContentNegotiationStrategy> strategies) {_		this.strategies = (strategies != null ? new ArrayList<>(strategies) : null)__	};set,the,exact,list,of,strategies,to,use,p,strong,note,strong,use,of,this,method,is,mutually,exclusive,with,use,of,all,other,setters,in,this,class,which,customize,a,default,fixed,set,of,strategies,see,class,level,doc,for,more,details,param,strategies,the,strategies,to,use,since,5,0;public,void,set,strategies,nullable,list,content,negotiation,strategy,strategies,this,strategies,strategies,null,new,array,list,strategies,null
ContentNegotiationManagerFactoryBean -> public void setStrategies(@Nullable List<ContentNegotiationStrategy> strategies);1502974979;Set the exact list of strategies to use._<p><strong>Note:</strong> use of this method is mutually exclusive with_use of all other setters in this class which customize a default, fixed_set of strategies. See class level doc for more details._@param strategies the strategies to use_@since 5.0;public void setStrategies(@Nullable List<ContentNegotiationStrategy> strategies) {_		this.strategies = (strategies != null ? new ArrayList<>(strategies) : null)__	};set,the,exact,list,of,strategies,to,use,p,strong,note,strong,use,of,this,method,is,mutually,exclusive,with,use,of,all,other,setters,in,this,class,which,customize,a,default,fixed,set,of,strategies,see,class,level,doc,for,more,details,param,strategies,the,strategies,to,use,since,5,0;public,void,set,strategies,nullable,list,content,negotiation,strategy,strategies,this,strategies,strategies,null,new,array,list,strategies,null
ContentNegotiationManagerFactoryBean -> public void setStrategies(@Nullable List<ContentNegotiationStrategy> strategies);1506534768;Set the exact list of strategies to use._<p><strong>Note:</strong> use of this method is mutually exclusive with_use of all other setters in this class which customize a default, fixed_set of strategies. See class level doc for more details._@param strategies the strategies to use_@since 5.0;public void setStrategies(@Nullable List<ContentNegotiationStrategy> strategies) {_		this.strategies = (strategies != null ? new ArrayList<>(strategies) : null)__	};set,the,exact,list,of,strategies,to,use,p,strong,note,strong,use,of,this,method,is,mutually,exclusive,with,use,of,all,other,setters,in,this,class,which,customize,a,default,fixed,set,of,strategies,see,class,level,doc,for,more,details,param,strategies,the,strategies,to,use,since,5,0;public,void,set,strategies,nullable,list,content,negotiation,strategy,strategies,this,strategies,strategies,null,new,array,list,strategies,null
ContentNegotiationManagerFactoryBean -> public void setStrategies(@Nullable List<ContentNegotiationStrategy> strategies);1522103912;Set the exact list of strategies to use._<p><strong>Note:</strong> use of this method is mutually exclusive with_use of all other setters in this class which customize a default, fixed_set of strategies. See class level doc for more details._@param strategies the strategies to use_@since 5.0;public void setStrategies(@Nullable List<ContentNegotiationStrategy> strategies) {_		this.strategies = (strategies != null ? new ArrayList<>(strategies) : null)__	};set,the,exact,list,of,strategies,to,use,p,strong,note,strong,use,of,this,method,is,mutually,exclusive,with,use,of,all,other,setters,in,this,class,which,customize,a,default,fixed,set,of,strategies,see,class,level,doc,for,more,details,param,strategies,the,strategies,to,use,since,5,0;public,void,set,strategies,nullable,list,content,negotiation,strategy,strategies,this,strategies,strategies,null,new,array,list,strategies,null
ContentNegotiationManagerFactoryBean -> public void setStrategies(@Nullable List<ContentNegotiationStrategy> strategies);1530174524;Set the exact list of strategies to use._<p><strong>Note:</strong> use of this method is mutually exclusive with_use of all other setters in this class which customize a default, fixed_set of strategies. See class level doc for more details._@param strategies the strategies to use_@since 5.0;public void setStrategies(@Nullable List<ContentNegotiationStrategy> strategies) {_		this.strategies = (strategies != null ? new ArrayList<>(strategies) : null)__	};set,the,exact,list,of,strategies,to,use,p,strong,note,strong,use,of,this,method,is,mutually,exclusive,with,use,of,all,other,setters,in,this,class,which,customize,a,default,fixed,set,of,strategies,see,class,level,doc,for,more,details,param,strategies,the,strategies,to,use,since,5,0;public,void,set,strategies,nullable,list,content,negotiation,strategy,strategies,this,strategies,strategies,null,new,array,list,strategies,null
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1342865802;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #setFavorPathExtension(boolean)}.;public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Map.Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String) entry.getKey()).toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, MediaType.valueOf((String) entry.getValue()))__			}_		}_	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,set,favor,path,extension,boolean;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,map,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,media,type,value,of,string,entry,get,value
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1348666123;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #setFavorPathExtension(boolean)}.;public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Map.Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String) entry.getKey()).toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, MediaType.valueOf((String) entry.getValue()))__			}_		}_	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,set,favor,path,extension,boolean;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,map,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,media,type,value,of,string,entry,get,value
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1355313310;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #setFavorPathExtension(boolean)}.;public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Map.Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String) entry.getKey()).toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, MediaType.valueOf((String) entry.getValue()))__			}_		}_	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,set,favor,path,extension,boolean;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,map,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,media,type,value,of,string,entry,get,value
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1356735495;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #setFavorPathExtension(boolean)}.;public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Map.Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String) entry.getKey()).toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, MediaType.valueOf((String) entry.getValue()))__			}_		}_	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,set,favor,path,extension,boolean;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,map,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,media,type,value,of,string,entry,get,value
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1357119239;Add mappings from file extensions to media types._<p>If this property is not set, the Java Action Framework, if available, may_still be used in conjunction with {@link #setFavorPathExtension(boolean)}.;public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Map.Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String) entry.getKey()).toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, MediaType.valueOf((String) entry.getValue()))__			}_		}_	};add,mappings,from,file,extensions,to,media,types,p,if,this,property,is,not,set,the,java,action,framework,if,available,may,still,be,used,in,conjunction,with,link,set,favor,path,extension,boolean;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,map,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,media,type,value,of,string,entry,get,value
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1357248712;Add mappings from file extensions to media types represented as strings._<p>When this mapping is not set or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.__@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, MediaType.valueOf((String) entry.getValue()))__			}_		}_	};add,mappings,from,file,extensions,to,media,types,represented,as,strings,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,media,type,value,of,string,entry,get,value
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1362408075;Add mappings from file extensions to media types represented as strings._<p>When this mapping is not set or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}._@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, MediaType.valueOf((String) entry.getValue()))__			}_		}_	};add,mappings,from,file,extensions,to,media,types,represented,as,strings,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,media,type,value,of,string,entry,get,value
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1368482696;Add mappings from file extensions to media types represented as strings._<p>When this mapping is not set or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}._@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, MediaType.valueOf((String) entry.getValue()))__			}_		}_	};add,mappings,from,file,extensions,to,media,types,represented,as,strings,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,media,type,value,of,string,entry,get,value
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1398960186;Add mappings from file extensions to media types represented as strings._<p>When this mapping is not set or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}._@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, MediaType.valueOf((String) entry.getValue()))__			}_		}_	};add,mappings,from,file,extensions,to,media,types,represented,as,strings,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,media,type,value,of,string,entry,get,value
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1405696918;Add mappings from file extensions to media types represented as strings._<p>When this mapping is not set or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}._@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, MediaType.valueOf((String) entry.getValue()))__			}_		}_	};add,mappings,from,file,extensions,to,media,types,represented,as,strings,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,media,type,value,of,string,entry,get,value
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1413988332;Add mappings from file extensions to media types represented as strings._<p>When this mapping is not set or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}._@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, MediaType.valueOf((String) entry.getValue()))__			}_		}_	};add,mappings,from,file,extensions,to,media,types,represented,as,strings,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,media,type,value,of,string,entry,get,value
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1414005334;Add mappings from file extensions to media types represented as strings._<p>When this mapping is not set or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}._@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, MediaType.valueOf((String) entry.getValue()))__			}_		}_	};add,mappings,from,file,extensions,to,media,types,represented,as,strings,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,media,type,value,of,string,entry,get,value
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1414031301;Add mappings from file extensions to media types represented as strings._<p>When this mapping is not set or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}._@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, MediaType.valueOf((String) entry.getValue()))__			}_		}_	};add,mappings,from,file,extensions,to,media,types,represented,as,strings,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,media,type,value,of,string,entry,get,value
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1441370327;Add mappings from file extensions to media types represented as strings._<p>When this mapping is not set or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}._@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, MediaType.valueOf((String) entry.getValue()))__			}_		}_	};add,mappings,from,file,extensions,to,media,types,represented,as,strings,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,media,type,value,of,string,entry,get,value
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1443560917;Add mappings from file extensions to media types represented as strings._<p>When this mapping is not set or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}._@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, MediaType.valueOf((String) entry.getValue()))__			}_		}_	};add,mappings,from,file,extensions,to,media,types,represented,as,strings,p,when,this,mapping,is,not,set,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,media,type,value,of,string,entry,get,value
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1443636308;Add mappings from keys, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. The path extension strategy will also try_{@link ServletContext#getMimeType} and JAF if it is present and is not_suppressed via {@link #setUseJaf}._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) entry.getValue())__				this.mediaTypes.put(extension, mediaType)__			}_		}_	};add,mappings,from,keys,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,the,path,extension,strategy,will,also,try,link,servlet,context,get,mime,type,and,jaf,if,it,is,present,and,is,not,suppressed,via,link,set,use,jaf,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1444898007;Add mappings from keys, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. The path extension strategy will also try_{@link ServletContext#getMimeType} and JAF if it is present and is not_suppressed via {@link #setUseJaf}._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) entry.getValue())__				this.mediaTypes.put(extension, mediaType)__			}_		}_	};add,mappings,from,keys,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,the,path,extension,strategy,will,also,try,link,servlet,context,get,mime,type,and,jaf,if,it,is,present,and,is,not,suppressed,via,link,set,use,jaf,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1446769889;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and JAF (if present) to resolve path_extensions. To change this behavior see the {@link #useJaf} property._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) entry.getValue())__				this.mediaTypes.put(extension, mediaType)__			}_		}_	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,jaf,if,present,to,resolve,path,extensions,to,change,this,behavior,see,the,link,use,jaf,property,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1446771757;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and JAF (if present) to resolve path_extensions. To change this behavior see the {@link #useJaf} property._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) entry.getValue())__				this.mediaTypes.put(extension, mediaType)__			}_		}_	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,jaf,if,present,to,resolve,path,extensions,to,change,this,behavior,see,the,link,use,jaf,property,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1464879764;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and JAF (if present) to resolve path_extensions. To change this behavior see the {@link #useJaf} property._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) entry.getValue())__				this.mediaTypes.put(extension, mediaType)__			}_		}_	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,jaf,if,present,to,resolve,path,extensions,to,change,this,behavior,see,the,link,use,jaf,property,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1467730834;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and JAF (if present) to resolve path_extensions. To change this behavior see the {@link #useJaf} property._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) entry.getValue())__				this.mediaTypes.put(extension, mediaType)__			}_		}_	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,jaf,if,present,to,resolve,path,extensions,to,change,this,behavior,see,the,link,use,jaf,property,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1490104706;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and_{@link org.springframework.http.MediaTypeFactory} to resolve path extensions._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) entry.getValue())__				this.mediaTypes.put(extension, mediaType)__			}_		}_	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,org,springframework,http,media,type,factory,to,resolve,path,extensions,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1490285806;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and_{@link org.springframework.http.MediaTypeFactory} to resolve path extensions._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) entry.getValue())__				this.mediaTypes.put(extension, mediaType)__			}_		}_	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,org,springframework,http,media,type,factory,to,resolve,path,extensions,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1491926110;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and_{@link org.springframework.http.MediaTypeFactory} to resolve path extensions._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) entry.getValue())__				this.mediaTypes.put(extension, mediaType)__			}_		}_	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,org,springframework,http,media,type,factory,to,resolve,path,extensions,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1496837955;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and_{@link org.springframework.http.MediaTypeFactory} to resolve path extensions._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) entry.getValue())__				this.mediaTypes.put(extension, mediaType)__			}_		}_	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,org,springframework,http,media,type,factory,to,resolve,path,extensions,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1498780456;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and_{@link org.springframework.http.MediaTypeFactory} to resolve path extensions._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) entry.getValue())__				this.mediaTypes.put(extension, mediaType)__			}_		}_	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,org,springframework,http,media,type,factory,to,resolve,path,extensions,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1499788456;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and_{@link org.springframework.http.MediaTypeFactory} to resolve path extensions._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) entry.getValue())__				this.mediaTypes.put(extension, mediaType)__			}_		}_	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,org,springframework,http,media,type,factory,to,resolve,path,extensions,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1499799657;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and_{@link org.springframework.http.MediaTypeFactory} to resolve path extensions._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) entry.getValue())__				this.mediaTypes.put(extension, mediaType)__			}_		}_	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,org,springframework,http,media,type,factory,to,resolve,path,extensions,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1502974979;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and_{@link org.springframework.http.MediaTypeFactory} to resolve path extensions._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) entry.getValue())__				this.mediaTypes.put(extension, mediaType)__			}_		}_	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,org,springframework,http,media,type,factory,to,resolve,path,extensions,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1506534768;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and_{@link org.springframework.http.MediaTypeFactory} to resolve path extensions._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {_				String extension = ((String)entry.getKey()).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) entry.getValue())__				this.mediaTypes.put(extension, mediaType)__			}_		}_	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,org,springframework,http,media,type,factory,to,resolve,path,extensions,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,for,entry,object,object,entry,media,types,entry,set,string,extension,string,entry,get,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,entry,get,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1522103912;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and_{@link org.springframework.http.MediaTypeFactory} to resolve path extensions._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			mediaTypes.forEach((key, value) -> {_				String extension = ((String) key).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) value)__				this.mediaTypes.put(extension, mediaType)__			})__		}_	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,org,springframework,http,media,type,factory,to,resolve,path,extensions,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,media,types,for,each,key,value,string,extension,string,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setMediaTypes(Properties mediaTypes);1530174524;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use_{@link ServletContext#getMimeType} and_{@link org.springframework.http.MediaTypeFactory} to resolve path extensions._@param mediaTypes media type mappings_@see #addMediaType(String, MediaType)_@see #addMediaTypes(Map);public void setMediaTypes(Properties mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			mediaTypes.forEach((key, value) -> {_				String extension = ((String) key).toLowerCase(Locale.ENGLISH)__				MediaType mediaType = MediaType.valueOf((String) value)__				this.mediaTypes.put(extension, mediaType)__			})__		}_	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,link,servlet,context,get,mime,type,and,link,org,springframework,http,media,type,factory,to,resolve,path,extensions,param,media,types,media,type,mappings,see,add,media,type,string,media,type,see,add,media,types,map;public,void,set,media,types,properties,media,types,if,collection,utils,is,empty,media,types,media,types,for,each,key,value,string,extension,string,key,to,lower,case,locale,english,media,type,media,type,media,type,value,of,string,value,this,media,types,put,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1443636308;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1444898007;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1446769889;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1446771757;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1464879764;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1467730834;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1490104706;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1490285806;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1491926110;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1496837955;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1498780456;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1499788456;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1499799657;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1502974979;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1506534768;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1522103912;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setIgnoreUnknownPathExtensions(boolean ignore);1530174524;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@code HttpMediaTypeNotAcceptableException} if there is no match._<p>By default this is set to {@code true}.;public void setIgnoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,code,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1414005334;Set the {@link ContentNegotiationStrategy} to be used to resolving the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help determine_the requested content type._@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.defaultNegotiationStrategy = defaultStrategy__	};set,the,link,content,negotiation,strategy,to,be,used,to,resolving,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,default,negotiation,strategy,default,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1414031301;Configure a custom {@link ContentNegotiationStrategy} to use to determine_the default content type to use when no content type was requested._<p>However also consider using {@link #setDefaultContentType} which_provides a simpler alternative to doing the same._@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.defaultNegotiationStrategy = defaultStrategy__	};configure,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,default,content,type,to,use,when,no,content,type,was,requested,p,however,also,consider,using,link,set,default,content,type,which,provides,a,simpler,alternative,to,doing,the,same,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,default,negotiation,strategy,default,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy);1441370327;Configure a custom {@link ContentNegotiationStrategy} to use to determine_the default content type to use when no content type was requested._<p>However also consider using {@link #setDefaultContentType} which_provides a simpler alternative to doing the same._@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {_		this.defaultNegotiationStrategy = defaultStrategy__	};configure,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,default,content,type,to,use,when,no,content,type,was,requested,p,however,also,consider,using,link,set,default,content,type,which,provides,a,simpler,alternative,to,doing,the,same,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,default,strategy,this,default,negotiation,strategy,default,strategy
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes);1496837955;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,nullable,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes);1498780456;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,nullable,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes);1499788456;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,nullable,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes);1499799657;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,nullable,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes);1502974979;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,nullable,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes);1506534768;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,nullable,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes);1522103912;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,nullable,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes);1530174524;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,nullable,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1342865802;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Map)}._@see #setParameterName(String);public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,map,see,set,parameter,name,string;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1348666123;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Map)}._@see #setParameterName(String);public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,map,see,set,parameter,name,string;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1355313310;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Properties)}._@see #setParameterName(String);public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,properties,see,set,parameter,name,string;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1356735495;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Properties)}._@see #setParameterName(String);public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,properties,see,set,parameter,name,string;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1357119239;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Properties)}._@see #setParameterName(String);public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,properties,see,set,parameter,name,string;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1357248712;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Properties)}.__@see #setParameterName(String);public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,properties,see,set,parameter,name,string;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1362408075;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Properties)}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,properties,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1368482696;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Properties)}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,properties,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1398960186;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Properties)}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,properties,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1405696918;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Properties)}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,properties,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1413988332;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Properties)}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,properties,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1414005334;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Properties)}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,properties,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1414031301;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Properties)}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,properties,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1441370327;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Properties)}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,properties,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1443560917;Indicate whether a request parameter should be used to determine the_requested media type with the <em>2nd highest priority</em>, i.e._after path extensions but before the {@code Accept} header._<p>The default value is {@code false}. If set to to {@code true}, a request_for {@code /hotels?format=pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header._<p>To use this option effectively you must also configure the MediaType_type mappings via {@link #setMediaTypes(Properties)}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};indicate,whether,a,request,parameter,should,be,used,to,determine,the,requested,media,type,with,the,em,2nd,highest,priority,em,i,e,after,path,extensions,but,before,the,code,accept,header,p,the,default,value,is,code,false,if,set,to,to,code,true,a,request,for,code,hotels,format,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header,p,to,use,this,option,effectively,you,must,also,configure,the,media,type,type,mappings,via,link,set,media,types,properties,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1443636308;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1444898007;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1446769889;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1446771757;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1464879764;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1467730834;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1490104706;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1490285806;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1491926110;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1496837955;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1498780456;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1499788456;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1499799657;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1502974979;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1506534768;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1522103912;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void setFavorParameter(boolean favorParameter);1530174524;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #setMediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #setParameterName;public void setFavorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,set,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,set,parameter,name;public,void,set,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1357248712;Add mappings from file extensions to media types._<p>If no mappings are added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};add,mappings,from,file,extensions,to,media,types,p,if,no,mappings,are,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1362408075;Add mappings from file extensions to media types._<p>If no mappings are added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};add,mappings,from,file,extensions,to,media,types,p,if,no,mappings,are,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1368482696;Add mappings from file extensions to media types._<p>If no mappings are added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};add,mappings,from,file,extensions,to,media,types,p,if,no,mappings,are,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1398960186;Add mappings from file extensions to media types._<p>If no mappings are added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};add,mappings,from,file,extensions,to,media,types,p,if,no,mappings,are,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1405696918;Add mappings from file extensions to media types._<p>If no mappings are added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};add,mappings,from,file,extensions,to,media,types,p,if,no,mappings,are,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1413988332;Add mappings from file extensions to media types._<p>If no mappings are added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};add,mappings,from,file,extensions,to,media,types,p,if,no,mappings,are,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1414005334;Add mappings from file extensions to media types._<p>If no mappings are added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};add,mappings,from,file,extensions,to,media,types,p,if,no,mappings,are,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1414031301;Add mappings from file extensions to media types._<p>If no mappings are added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};add,mappings,from,file,extensions,to,media,types,p,if,no,mappings,are,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1441370327;Add mappings from file extensions to media types._<p>If no mappings are added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};add,mappings,from,file,extensions,to,media,types,p,if,no,mappings,are,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1443560917;Add mappings from file extensions to media types._<p>If no mappings are added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};add,mappings,from,file,extensions,to,media,types,p,if,no,mappings,are,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1443636308;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1444898007;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1446769889;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1446771757;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1464879764;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1467730834;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1490104706;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1490285806;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void addMediaTypes(Map<String, MediaType> mediaTypes);1491926110;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaType;public void addMediaTypes(Map<String, MediaType> mediaTypes) {_		if (mediaTypes != null) {_			this.mediaTypes.putAll(mediaTypes)__		}_	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,type;public,void,add,media,types,map,string,media,type,media,types,if,media,types,null,this,media,types,put,all,media,types
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1342865802;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1348666123;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1355313310;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1356735495;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1357119239;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1357248712;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1362408075;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1368482696;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1398960186;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1405696918;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1413988332;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1414005334;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1414031301;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1441370327;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1443560917;Indicate whether the extension of the request path should be used to determine_the requested media type with the <em>highest priority</em>._<p>By default this value is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the {@code Accept} header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};indicate,whether,the,extension,of,the,request,path,should,be,used,to,determine,the,requested,media,type,with,the,em,highest,priority,em,p,by,default,this,value,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,code,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1443636308;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1444898007;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1446769889;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1446771757;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1464879764;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1467730834;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1490104706;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1490285806;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1491926110;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1496837955;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1498780456;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1499788456;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1499799657;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1502974979;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1506534768;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1522103912;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setFavorPathExtension(boolean favorPathExtension);1530174524;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public void setFavorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,void,set,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1443560917;Set the default content type to use when no content type was requested._<p>Note that internally this method creates and adds a_{@link org.springframework.web.accept.FixedContentNegotiationStrategy_FixedContentNegotiationStrategy}. Alternatively you can also provide a_custom strategy via {@link #setDefaultContentTypeStrategy}.;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,was,requested,p,note,that,internally,this,method,creates,and,adds,a,link,org,springframework,web,accept,fixed,content,negotiation,strategy,fixed,content,negotiation,strategy,alternatively,you,can,also,provide,a,custom,strategy,via,link,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1443636308;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1444898007;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1446769889;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1446771757;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1464879764;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1467730834;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1490104706;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1490285806;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1491926110;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1496837955;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1498780456;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1499788456;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1499799657;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1502974979;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1506534768;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1522103912;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType contentType);1530174524;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentTypeStrategy;public void setDefaultContentType(MediaType contentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType)__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,strategy;public,void,set,default,content,type,media,type,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,content,type
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1342865802;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1348666123;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1355313310;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1356735495;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1357119239;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1357248712;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1362408075;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1368482696;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1398960186;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1405696918;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1413988332;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1414005334;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1414031301;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1441370327;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1443560917;Indicate whether the HTTP {@code Accept} header should be ignored altogether._If set the {@code Accept} header is checked at the_<em>3rd highest priority</em>, i.e. after the request path extension and_possibly a request parameter if configured._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};indicate,whether,the,http,code,accept,header,should,be,ignored,altogether,if,set,the,code,accept,header,is,checked,at,the,em,3rd,highest,priority,em,i,e,after,the,request,path,extension,and,possibly,a,request,parameter,if,configured,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1443636308;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1444898007;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1446769889;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1446771757;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1464879764;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1467730834;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1490104706;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1490285806;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1491926110;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1496837955;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1498780456;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1499788456;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1499799657;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1502974979;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1506534768;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1522103912;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader);1530174524;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,void,set,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1443636308;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1444898007;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1446769889;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1446771757;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1464879764;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1467730834;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1490104706;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1490285806;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1491926110;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1496837955;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1498780456;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1499788456;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1499799657;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1502974979;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1506534768;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1522103912;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> @Override 	public void setServletContext(ServletContext servletContext);1530174524;Invoked by Spring to inject the ServletContext.;@Override_	public void setServletContext(ServletContext servletContext) {_		this.servletContext = servletContext__	};invoked,by,spring,to,inject,the,servlet,context;override,public,void,set,servlet,context,servlet,context,servlet,context,this,servlet,context,servlet,context
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType defaultContentType);1342865802;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help determine_the requested content type.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,void,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType defaultContentType);1348666123;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help determine_the requested content type.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,void,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType defaultContentType);1355313310;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help determine_the requested content type.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,void,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType defaultContentType);1356735495;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help determine_the requested content type.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,void,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType defaultContentType);1357119239;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help determine_the requested content type.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,void,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType defaultContentType);1357248712;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help_determine the requested content type.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,void,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType defaultContentType);1362408075;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help_determine the requested content type.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,void,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType defaultContentType);1368482696;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help_determine the requested content type.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,void,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType defaultContentType);1398960186;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help_determine the requested content type.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,void,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType defaultContentType);1405696918;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help_determine the requested content type.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,void,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType defaultContentType);1413988332;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help_determine the requested content type.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultContentType = defaultContentType__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,void,set,default,content,type,media,type,default,content,type,this,default,content,type,default,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType defaultContentType);1414005334;Set the default content type._<p>This content type will be used when neither the request path extension,_nor a request parameter, nor the {@code Accept} header could help_determine the requested content type.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(defaultContentType)__	};set,the,default,content,type,p,this,content,type,will,be,used,when,neither,the,request,path,extension,nor,a,request,parameter,nor,the,code,accept,header,could,help,determine,the,requested,content,type;public,void,set,default,content,type,media,type,default,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,default,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType defaultContentType);1414031301;Set the default content type to use when no content type was requested._<p>Note that internally this method creates and adds a_{@link org.springframework.web.accept.FixedContentNegotiationStrategy_FixedContentNegotiationStrategy}. Alternatively you can also provide a_custom strategy via {@link #setDefaultContentTypeStrategy}.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(defaultContentType)__	};set,the,default,content,type,to,use,when,no,content,type,was,requested,p,note,that,internally,this,method,creates,and,adds,a,link,org,springframework,web,accept,fixed,content,negotiation,strategy,fixed,content,negotiation,strategy,alternatively,you,can,also,provide,a,custom,strategy,via,link,set,default,content,type,strategy;public,void,set,default,content,type,media,type,default,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,default,content,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentType(MediaType defaultContentType);1441370327;Set the default content type to use when no content type was requested._<p>Note that internally this method creates and adds a_{@link org.springframework.web.accept.FixedContentNegotiationStrategy_FixedContentNegotiationStrategy}. Alternatively you can also provide a_custom strategy via {@link #setDefaultContentTypeStrategy}.;public void setDefaultContentType(MediaType defaultContentType) {_		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(defaultContentType)__	};set,the,default,content,type,to,use,when,no,content,type,was,requested,p,note,that,internally,this,method,creates,and,adds,a,link,org,springframework,web,accept,fixed,content,negotiation,strategy,fixed,content,negotiation,strategy,alternatively,you,can,also,provide,a,custom,strategy,via,link,set,default,content,type,strategy;public,void,set,default,content,type,media,type,default,content,type,this,default,negotiation,strategy,new,fixed,content,negotiation,strategy,default,content,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1357248712;Add a mapping from a file extension to a media type._<p>If no mapping is added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};add,a,mapping,from,a,file,extension,to,a,media,type,p,if,no,mapping,is,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1362408075;Add a mapping from a file extension to a media type._<p>If no mapping is added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};add,a,mapping,from,a,file,extension,to,a,media,type,p,if,no,mapping,is,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1368482696;Add a mapping from a file extension to a media type._<p>If no mapping is added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};add,a,mapping,from,a,file,extension,to,a,media,type,p,if,no,mapping,is,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1398960186;Add a mapping from a file extension to a media type._<p>If no mapping is added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};add,a,mapping,from,a,file,extension,to,a,media,type,p,if,no,mapping,is,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1405696918;Add a mapping from a file extension to a media type._<p>If no mapping is added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};add,a,mapping,from,a,file,extension,to,a,media,type,p,if,no,mapping,is,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1413988332;Add a mapping from a file extension to a media type._<p>If no mapping is added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};add,a,mapping,from,a,file,extension,to,a,media,type,p,if,no,mapping,is,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1414005334;Add a mapping from a file extension to a media type._<p>If no mapping is added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};add,a,mapping,from,a,file,extension,to,a,media,type,p,if,no,mapping,is,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1414031301;Add a mapping from a file extension to a media type._<p>If no mapping is added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};add,a,mapping,from,a,file,extension,to,a,media,type,p,if,no,mapping,is,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1441370327;Add a mapping from a file extension to a media type._<p>If no mapping is added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};add,a,mapping,from,a,file,extension,to,a,media,type,p,if,no,mapping,is,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1443560917;Add a mapping from a file extension to a media type._<p>If no mapping is added or when an extension is not found, the Java_Action Framework, if available, may be used if enabled via_{@link #setFavorPathExtension(boolean)}.;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};add,a,mapping,from,a,file,extension,to,a,media,type,p,if,no,mapping,is,added,or,when,an,extension,is,not,found,the,java,action,framework,if,available,may,be,used,if,enabled,via,link,set,favor,path,extension,boolean;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1443636308;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1444898007;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1446769889;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1446771757;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1464879764;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1467730834;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1490104706;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1490285806;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1491926110;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1496837955;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1498780456;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1499788456;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1499799657;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1502974979;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1506534768;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1522103912;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void addMediaType(String fileExtension, MediaType mediaType);1530174524;An alternative to {@link #setMediaTypes} for use in Java code._@see #setMediaTypes_@see #addMediaTypes;public void addMediaType(String fileExtension, MediaType mediaType) {_		this.mediaTypes.put(fileExtension, mediaType)__	};an,alternative,to,link,set,media,types,for,use,in,java,code,see,set,media,types,see,add,media,types;public,void,add,media,type,string,file,extension,media,type,media,type,this,media,types,put,file,extension,media,type
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1443560917;Configure a custom {@link ContentNegotiationStrategy} to use to determine_the default content type to use when no content type was requested._<p>However also consider using {@link #setDefaultContentType} which_provides a simpler alternative to doing the same._@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};configure,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,default,content,type,to,use,when,no,content,type,was,requested,p,however,also,consider,using,link,set,default,content,type,which,provides,a,simpler,alternative,to,doing,the,same,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1443636308;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._@see #setDefaultContentType_@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,see,set,default,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1444898007;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._@see #setDefaultContentType_@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,see,set,default,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1446769889;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._@see #setDefaultContentType_@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,see,set,default,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1446771757;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentType_@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1464879764;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentType_@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1467730834;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentType_@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1490104706;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentType_@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1490285806;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentType_@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1491926110;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentType_@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1496837955;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentType_@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1498780456;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentType_@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1499788456;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentType_@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1499799657;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentType_@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1502974979;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentType_@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1506534768;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentType_@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1522103912;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #setDefaultContentType_@since 4.1.2;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,set,default,content,type,since,4,1,2;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy);1530174524;Set a custom {@link ContentNegotiationStrategy} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@since 4.1.2_@see #setDefaultContentType;public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {_		this.defaultNegotiationStrategy = strategy__	};set,a,custom,link,content,negotiation,strategy,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,since,4,1,2,see,set,default,content,type;public,void,set,default,content,type,strategy,content,negotiation,strategy,strategy,this,default,negotiation,strategy,strategy
ContentNegotiationManagerFactoryBean -> public ContentNegotiationManager build();1506534768;Actually build the {@link ContentNegotiationManager}._@since 5.0;public ContentNegotiationManager build() {_		List<ContentNegotiationStrategy> strategies = new ArrayList<>()___		if (this.strategies != null) {_			strategies.addAll(this.strategies)__		}_		else {_			if (this.favorPathExtension) {_				PathExtensionContentNegotiationStrategy strategy__				if (this.servletContext != null && !useRegisteredExtensionsOnly()) {_					strategy = new ServletPathExtensionContentNegotiationStrategy(this.servletContext, this.mediaTypes)__				}_				else {_					strategy = new PathExtensionContentNegotiationStrategy(this.mediaTypes)__				}_				strategy.setIgnoreUnknownExtensions(this.ignoreUnknownPathExtensions)__				if (this.useRegisteredExtensionsOnly != null) {_					strategy.setUseRegisteredExtensionsOnly(this.useRegisteredExtensionsOnly)__				}_				strategies.add(strategy)__			}__			if (this.favorParameter) {_				ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(this.mediaTypes)__				strategy.setParameterName(this.parameterName)__				if (this.useRegisteredExtensionsOnly != null) {_					strategy.setUseRegisteredExtensionsOnly(this.useRegisteredExtensionsOnly)__				}_				else {_					strategy.setUseRegisteredExtensionsOnly(true)_  _				}_				strategies.add(strategy)__			}__			if (!this.ignoreAcceptHeader) {_				strategies.add(new HeaderContentNegotiationStrategy())__			}__			if (this.defaultNegotiationStrategy != null) {_				strategies.add(this.defaultNegotiationStrategy)__			}_		}__		this.contentNegotiationManager = new ContentNegotiationManager(strategies)__		return this.contentNegotiationManager__	};actually,build,the,link,content,negotiation,manager,since,5,0;public,content,negotiation,manager,build,list,content,negotiation,strategy,strategies,new,array,list,if,this,strategies,null,strategies,add,all,this,strategies,else,if,this,favor,path,extension,path,extension,content,negotiation,strategy,strategy,if,this,servlet,context,null,use,registered,extensions,only,strategy,new,servlet,path,extension,content,negotiation,strategy,this,servlet,context,this,media,types,else,strategy,new,path,extension,content,negotiation,strategy,this,media,types,strategy,set,ignore,unknown,extensions,this,ignore,unknown,path,extensions,if,this,use,registered,extensions,only,null,strategy,set,use,registered,extensions,only,this,use,registered,extensions,only,strategies,add,strategy,if,this,favor,parameter,parameter,content,negotiation,strategy,strategy,new,parameter,content,negotiation,strategy,this,media,types,strategy,set,parameter,name,this,parameter,name,if,this,use,registered,extensions,only,null,strategy,set,use,registered,extensions,only,this,use,registered,extensions,only,else,strategy,set,use,registered,extensions,only,true,strategies,add,strategy,if,this,ignore,accept,header,strategies,add,new,header,content,negotiation,strategy,if,this,default,negotiation,strategy,null,strategies,add,this,default,negotiation,strategy,this,content,negotiation,manager,new,content,negotiation,manager,strategies,return,this,content,negotiation,manager
ContentNegotiationManagerFactoryBean -> public ContentNegotiationManager build();1522103912;Actually build the {@link ContentNegotiationManager}._@since 5.0;public ContentNegotiationManager build() {_		List<ContentNegotiationStrategy> strategies = new ArrayList<>()___		if (this.strategies != null) {_			strategies.addAll(this.strategies)__		}_		else {_			if (this.favorPathExtension) {_				PathExtensionContentNegotiationStrategy strategy__				if (this.servletContext != null && !useRegisteredExtensionsOnly()) {_					strategy = new ServletPathExtensionContentNegotiationStrategy(this.servletContext, this.mediaTypes)__				}_				else {_					strategy = new PathExtensionContentNegotiationStrategy(this.mediaTypes)__				}_				strategy.setIgnoreUnknownExtensions(this.ignoreUnknownPathExtensions)__				if (this.useRegisteredExtensionsOnly != null) {_					strategy.setUseRegisteredExtensionsOnly(this.useRegisteredExtensionsOnly)__				}_				strategies.add(strategy)__			}__			if (this.favorParameter) {_				ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(this.mediaTypes)__				strategy.setParameterName(this.parameterName)__				if (this.useRegisteredExtensionsOnly != null) {_					strategy.setUseRegisteredExtensionsOnly(this.useRegisteredExtensionsOnly)__				}_				else {_					strategy.setUseRegisteredExtensionsOnly(true)_  _				}_				strategies.add(strategy)__			}__			if (!this.ignoreAcceptHeader) {_				strategies.add(new HeaderContentNegotiationStrategy())__			}__			if (this.defaultNegotiationStrategy != null) {_				strategies.add(this.defaultNegotiationStrategy)__			}_		}__		this.contentNegotiationManager = new ContentNegotiationManager(strategies)__		return this.contentNegotiationManager__	};actually,build,the,link,content,negotiation,manager,since,5,0;public,content,negotiation,manager,build,list,content,negotiation,strategy,strategies,new,array,list,if,this,strategies,null,strategies,add,all,this,strategies,else,if,this,favor,path,extension,path,extension,content,negotiation,strategy,strategy,if,this,servlet,context,null,use,registered,extensions,only,strategy,new,servlet,path,extension,content,negotiation,strategy,this,servlet,context,this,media,types,else,strategy,new,path,extension,content,negotiation,strategy,this,media,types,strategy,set,ignore,unknown,extensions,this,ignore,unknown,path,extensions,if,this,use,registered,extensions,only,null,strategy,set,use,registered,extensions,only,this,use,registered,extensions,only,strategies,add,strategy,if,this,favor,parameter,parameter,content,negotiation,strategy,strategy,new,parameter,content,negotiation,strategy,this,media,types,strategy,set,parameter,name,this,parameter,name,if,this,use,registered,extensions,only,null,strategy,set,use,registered,extensions,only,this,use,registered,extensions,only,else,strategy,set,use,registered,extensions,only,true,strategies,add,strategy,if,this,ignore,accept,header,strategies,add,new,header,content,negotiation,strategy,if,this,default,negotiation,strategy,null,strategies,add,this,default,negotiation,strategy,this,content,negotiation,manager,new,content,negotiation,manager,strategies,return,this,content,negotiation,manager
ContentNegotiationManagerFactoryBean -> public ContentNegotiationManager build();1530174524;Actually build the {@link ContentNegotiationManager}._@since 5.0;public ContentNegotiationManager build() {_		List<ContentNegotiationStrategy> strategies = new ArrayList<>()___		if (this.strategies != null) {_			strategies.addAll(this.strategies)__		}_		else {_			if (this.favorPathExtension) {_				PathExtensionContentNegotiationStrategy strategy__				if (this.servletContext != null && !useRegisteredExtensionsOnly()) {_					strategy = new ServletPathExtensionContentNegotiationStrategy(this.servletContext, this.mediaTypes)__				}_				else {_					strategy = new PathExtensionContentNegotiationStrategy(this.mediaTypes)__				}_				strategy.setIgnoreUnknownExtensions(this.ignoreUnknownPathExtensions)__				if (this.useRegisteredExtensionsOnly != null) {_					strategy.setUseRegisteredExtensionsOnly(this.useRegisteredExtensionsOnly)__				}_				strategies.add(strategy)__			}__			if (this.favorParameter) {_				ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(this.mediaTypes)__				strategy.setParameterName(this.parameterName)__				if (this.useRegisteredExtensionsOnly != null) {_					strategy.setUseRegisteredExtensionsOnly(this.useRegisteredExtensionsOnly)__				}_				else {_					strategy.setUseRegisteredExtensionsOnly(true)_  _				}_				strategies.add(strategy)__			}__			if (!this.ignoreAcceptHeader) {_				strategies.add(new HeaderContentNegotiationStrategy())__			}__			if (this.defaultNegotiationStrategy != null) {_				strategies.add(this.defaultNegotiationStrategy)__			}_		}__		this.contentNegotiationManager = new ContentNegotiationManager(strategies)__		return this.contentNegotiationManager__	};actually,build,the,link,content,negotiation,manager,since,5,0;public,content,negotiation,manager,build,list,content,negotiation,strategy,strategies,new,array,list,if,this,strategies,null,strategies,add,all,this,strategies,else,if,this,favor,path,extension,path,extension,content,negotiation,strategy,strategy,if,this,servlet,context,null,use,registered,extensions,only,strategy,new,servlet,path,extension,content,negotiation,strategy,this,servlet,context,this,media,types,else,strategy,new,path,extension,content,negotiation,strategy,this,media,types,strategy,set,ignore,unknown,extensions,this,ignore,unknown,path,extensions,if,this,use,registered,extensions,only,null,strategy,set,use,registered,extensions,only,this,use,registered,extensions,only,strategies,add,strategy,if,this,favor,parameter,parameter,content,negotiation,strategy,strategy,new,parameter,content,negotiation,strategy,this,media,types,strategy,set,parameter,name,this,parameter,name,if,this,use,registered,extensions,only,null,strategy,set,use,registered,extensions,only,this,use,registered,extensions,only,else,strategy,set,use,registered,extensions,only,true,strategies,add,strategy,if,this,ignore,accept,header,strategies,add,new,header,content,negotiation,strategy,if,this,default,negotiation,strategy,null,strategies,add,this,default,negotiation,strategy,this,content,negotiation,manager,new,content,negotiation,manager,strategies,return,this,content,negotiation,manager
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1342865802;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #parameterName_@see #setMediaTypes(Map);public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,set,media,types,map;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1348666123;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #parameterName_@see #setMediaTypes(Map);public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,set,media,types,map;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1355313310;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #parameterName_@see #setMediaTypes(Properties);public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,set,media,types,properties;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1356735495;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #parameterName_@see #setMediaTypes(Properties);public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,set,media,types,properties;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1357119239;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #parameterName_@see #setMediaTypes(Properties);public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,set,media,types,properties;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1357248712;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}.__@see #parameterName_@see #setMediaTypes(Properties);public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,parameter,name,see,set,media,types,properties;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1362408075;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #setParameterName_@see #setMediaTypes;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,set,parameter,name,see,set,media,types;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1368482696;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #setParameterName_@see #setMediaTypes;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,set,parameter,name,see,set,media,types;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1398960186;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #setParameterName_@see #setMediaTypes;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,set,parameter,name,see,set,media,types;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1405696918;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #setParameterName_@see #setMediaTypes;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,set,parameter,name,see,set,media,types;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1413988332;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #setParameterName_@see #setMediaTypes;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,set,parameter,name,see,set,media,types;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1414005334;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #setParameterName_@see #setMediaTypes;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,set,parameter,name,see,set,media,types;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1414031301;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #setParameterName_@see #setMediaTypes;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,set,parameter,name,see,set,media,types;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1441370327;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #setParameterName_@see #setMediaTypes;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,set,parameter,name,see,set,media,types;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1443560917;Whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types. This is used only when_{@link #setFavorPathExtension(boolean)} is set to {@code true}._<p>The default value is {@code true}._@see #setParameterName_@see #setMediaTypes;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,this,is,used,only,when,link,set,favor,path,extension,boolean,is,set,to,code,true,p,the,default,value,is,code,true,see,set,parameter,name,see,set,media,types;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1443636308;When {@link #setFavorPathExtension favorPathExtension} is set, this_property determines whether to allow use of JAF (Java Activation Framework)_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use JAF if available.;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};when,link,set,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,allow,use,of,jaf,java,activation,framework,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,jaf,if,available;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1444898007;When {@link #setFavorPathExtension favorPathExtension} is set, this_property determines whether to allow use of JAF (Java Activation Framework)_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use JAF if available.;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};when,link,set,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,allow,use,of,jaf,java,activation,framework,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,jaf,if,available;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1446769889;When {@link #setFavorPathExtension favorPathExtension} is set, this_property determines whether to allow use of JAF (Java Activation Framework)_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use JAF if available.;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};when,link,set,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,allow,use,of,jaf,java,activation,framework,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,jaf,if,available;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1446771757;When {@link #setFavorPathExtension favorPathExtension} is set, this_property determines whether to allow use of JAF (Java Activation Framework)_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use JAF if available.;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};when,link,set,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,allow,use,of,jaf,java,activation,framework,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,jaf,if,available;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1464879764;When {@link #setFavorPathExtension favorPathExtension} is set, this_property determines whether to allow use of JAF (Java Activation Framework)_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use JAF if available.;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};when,link,set,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,allow,use,of,jaf,java,activation,framework,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,jaf,if,available;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
ContentNegotiationManagerFactoryBean -> public void setUseJaf(boolean useJaf);1467730834;When {@link #setFavorPathExtension favorPathExtension} is set, this_property determines whether to allow use of JAF (Java Activation Framework)_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use JAF if available.;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};when,link,set,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,allow,use,of,jaf,java,activation,framework,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,jaf,if,available;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
