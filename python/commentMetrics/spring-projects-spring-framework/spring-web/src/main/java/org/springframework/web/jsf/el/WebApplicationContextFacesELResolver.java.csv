commented;modifiers;parameterAmount;loc;comment;code
false;public;3;37;;@Override @Nullable public Object getValue(ELContext elContext, @Nullable Object base, Object property) throws ELException {     if (base != null) {         if (base instanceof WebApplicationContext) {             WebApplicationContext wac = (WebApplicationContext) base.             String beanName = property.toString().             if (logger.isTraceEnabled()) {                 logger.trace("Attempting to resolve property '" + beanName + "' in root WebApplicationContext").             }             if (wac.containsBean(beanName)) {                 if (logger.isDebugEnabled()) {                     logger.debug("Successfully resolved property '" + beanName + "' in root WebApplicationContext").                 }                 elContext.setPropertyResolved(true).                 try {                     return wac.getBean(beanName).                 } catch (BeansException ex) {                     throw new ELException(ex).                 }             } else {                 // Mimic standard JSF/JSP behavior when base is a Map by returning null.                 return null.             }         }     } else {         if (WEB_APPLICATION_CONTEXT_VARIABLE_NAME.equals(property)) {             elContext.setPropertyResolved(true).             return getWebApplicationContext(elContext).         }     }     return null. }
false;public;3;37;;@Override @Nullable public Class<?> getType(ELContext elContext, @Nullable Object base, Object property) throws ELException {     if (base != null) {         if (base instanceof WebApplicationContext) {             WebApplicationContext wac = (WebApplicationContext) base.             String beanName = property.toString().             if (logger.isDebugEnabled()) {                 logger.debug("Attempting to resolve property '" + beanName + "' in root WebApplicationContext").             }             if (wac.containsBean(beanName)) {                 if (logger.isDebugEnabled()) {                     logger.debug("Successfully resolved property '" + beanName + "' in root WebApplicationContext").                 }                 elContext.setPropertyResolved(true).                 try {                     return wac.getType(beanName).                 } catch (BeansException ex) {                     throw new ELException(ex).                 }             } else {                 // Mimic standard JSF/JSP behavior when base is a Map by returning null.                 return null.             }         }     } else {         if (WEB_APPLICATION_CONTEXT_VARIABLE_NAME.equals(property)) {             elContext.setPropertyResolved(true).             return WebApplicationContext.class.         }     }     return null. }
false;public;4;3;;@Override public void setValue(ELContext elContext, Object base, Object property, Object value) throws ELException { }
false;public;3;8;;@Override public boolean isReadOnly(ELContext elContext, Object base, Object property) throws ELException {     if (base instanceof WebApplicationContext) {         elContext.setPropertyResolved(true).         return true.     }     return false. }
false;public;2;5;;@Override @Nullable public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext elContext, Object base) {     return null. }
false;public;2;4;;@Override public Class<?> getCommonPropertyType(ELContext elContext, Object base) {     return Object.class. }
true;protected;1;5;/**  * Retrieve the {@link WebApplicationContext} reference to expose.  * <p>The default implementation delegates to {@link FacesContextUtils},  * returning {@code null} if no {@code WebApplicationContext} found.  * @param elContext the current JSF ELContext  * @return the Spring web application context  * @see org.springframework.web.jsf.FacesContextUtils#getWebApplicationContext  */ ;/**  * Retrieve the {@link WebApplicationContext} reference to expose.  * <p>The default implementation delegates to {@link FacesContextUtils},  * returning {@code null} if no {@code WebApplicationContext} found.  * @param elContext the current JSF ELContext  * @return the Spring web application context  * @see org.springframework.web.jsf.FacesContextUtils#getWebApplicationContext  */ @Nullable protected WebApplicationContext getWebApplicationContext(ELContext elContext) {     FacesContext facesContext = FacesContext.getCurrentInstance().     return FacesContextUtils.getRequiredWebApplicationContext(facesContext). }
