commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Set the time required for concurrent handling to complete.  * This property should not be set when concurrent handling is in progress,  * i.e. when {@link #isAsyncStarted()} is {@code true}.  * @param timeout amount of time in milliseconds. {@code null} means no  * 	timeout, i.e. rely on the default timeout of the container.  */ ;/**  * Set the time required for concurrent handling to complete.  * This property should not be set when concurrent handling is in progress,  * i.e. when {@link #isAsyncStarted()} is {@code true}.  * @param timeout amount of time in milliseconds. {@code null} means no  * 	timeout, i.e. rely on the default timeout of the container.  */ void setTimeout(@Nullable Long timeout).
true;;1;1;/**  * Add a handler to invoke when concurrent handling has timed out.  */ ;/**  * Add a handler to invoke when concurrent handling has timed out.  */ void addTimeoutHandler(Runnable runnable).
true;;1;1;/**  * Add a handler to invoke when an error occurred while concurrent  * handling of a request.  * @since 5.0  */ ;/**  * Add a handler to invoke when an error occurred while concurrent  * handling of a request.  * @since 5.0  */ void addErrorHandler(Consumer<Throwable> exceptionHandler).
true;;1;1;/**  * Add a handler to invoke when request processing completes.  */ ;/**  * Add a handler to invoke when request processing completes.  */ void addCompletionHandler(Runnable runnable).
true;;0;1;/**  * Mark the start of asynchronous request processing so that when the main  * processing thread exits, the response remains open for further processing  * in another thread.  * @throws IllegalStateException if async processing has completed or is not supported  */ ;/**  * Mark the start of asynchronous request processing so that when the main  * processing thread exits, the response remains open for further processing  * in another thread.  * @throws IllegalStateException if async processing has completed or is not supported  */ void startAsync().
true;;0;1;/**  * Whether the request is in async mode following a call to {@link #startAsync()}.  * Returns "false" if asynchronous processing never started, has completed,  * or the request was dispatched for further processing.  */ ;/**  * Whether the request is in async mode following a call to {@link #startAsync()}.  * Returns "false" if asynchronous processing never started, has completed,  * or the request was dispatched for further processing.  */ boolean isAsyncStarted().
true;;0;1;/**  * Dispatch the request to the container in order to resume processing after  * concurrent execution in an application thread.  */ ;/**  * Dispatch the request to the container in order to resume processing after  * concurrent execution in an application thread.  */ void dispatch().
true;;0;1;/**  * Whether asynchronous processing has completed.  */ ;/**  * Whether asynchronous processing has completed.  */ boolean isAsyncComplete().
