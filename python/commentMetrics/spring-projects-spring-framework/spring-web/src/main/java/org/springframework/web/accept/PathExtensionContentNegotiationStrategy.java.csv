# id;timestamp;commentText;codeText;commentWords;codeWords
PathExtensionContentNegotiationStrategy -> public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1490285806;Whether to only use the registered mappings to look up file extensions, or also refer to_defaults._<p>By default this is set to {@code false}, meaning that defaults are used.;public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__	};whether,to,only,use,the,registered,mappings,to,look,up,file,extensions,or,also,refer,to,defaults,p,by,default,this,is,set,to,code,false,meaning,that,defaults,are,used;public,void,set,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only
PathExtensionContentNegotiationStrategy -> public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1495868221;Whether to only use the registered mappings to look up file extensions, or also refer to_defaults._<p>By default this is set to {@code false}, meaning that defaults are used.;public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__	};whether,to,only,use,the,registered,mappings,to,look,up,file,extensions,or,also,refer,to,defaults,p,by,default,this,is,set,to,code,false,meaning,that,defaults,are,used;public,void,set,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only
PathExtensionContentNegotiationStrategy -> public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1496837955;Whether to only use the registered mappings to look up file extensions, or also refer to_defaults._<p>By default this is set to {@code false}, meaning that defaults are used.;public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__	};whether,to,only,use,the,registered,mappings,to,look,up,file,extensions,or,also,refer,to,defaults,p,by,default,this,is,set,to,code,false,meaning,that,defaults,are,used;public,void,set,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only
PathExtensionContentNegotiationStrategy -> public MediaType getMediaTypeForResource(Resource resource);1457125561;A public method exposing the knowledge of the path extension strategy to_resolve file extensions to a MediaType in this case for a given_{@link Resource}. The method first looks up any explicitly registered_file extensions first and then falls back on JAF if available._@param resource the resource to look up_@return the MediaType for the extension or {@code null}._@since 4.3;public MediaType getMediaTypeForResource(Resource resource) {_		Assert.notNull(resource)__		MediaType mediaType = null__		String filename = resource.getFilename()__		String extension = StringUtils.getFilenameExtension(filename)__		if (extension != null) {_			mediaType = lookupMediaType(extension)__		}_		if (mediaType == null && JAF_PRESENT) {_			mediaType = JafMediaTypeFactory.getMediaType(filename)__		}_		if (MediaType.APPLICATION_OCTET_STREAM.equals(mediaType)) {_			mediaType = null__		}_		return mediaType__	};a,public,method,exposing,the,knowledge,of,the,path,extension,strategy,to,resolve,file,extensions,to,a,media,type,in,this,case,for,a,given,link,resource,the,method,first,looks,up,any,explicitly,registered,file,extensions,first,and,then,falls,back,on,jaf,if,available,param,resource,the,resource,to,look,up,return,the,media,type,for,the,extension,or,code,null,since,4,3;public,media,type,get,media,type,for,resource,resource,resource,assert,not,null,resource,media,type,media,type,null,string,filename,resource,get,filename,string,extension,string,utils,get,filename,extension,filename,if,extension,null,media,type,lookup,media,type,extension,if,media,type,null,media,type,jaf,media,type,factory,get,media,type,filename,if,media,type,equals,media,type,media,type,null,return,media,type
PathExtensionContentNegotiationStrategy -> public MediaType getMediaTypeForResource(Resource resource);1464879764;A public method exposing the knowledge of the path extension strategy to_resolve file extensions to a MediaType in this case for a given_{@link Resource}. The method first looks up any explicitly registered_file extensions first and then falls back on JAF if available._@param resource the resource to look up_@return the MediaType for the extension or {@code null}._@since 4.3;public MediaType getMediaTypeForResource(Resource resource) {_		Assert.notNull(resource)__		MediaType mediaType = null__		String filename = resource.getFilename()__		String extension = StringUtils.getFilenameExtension(filename)__		if (extension != null) {_			mediaType = lookupMediaType(extension)__		}_		if (mediaType == null && JAF_PRESENT) {_			mediaType = JafMediaTypeFactory.getMediaType(filename)__		}_		if (MediaType.APPLICATION_OCTET_STREAM.equals(mediaType)) {_			mediaType = null__		}_		return mediaType__	};a,public,method,exposing,the,knowledge,of,the,path,extension,strategy,to,resolve,file,extensions,to,a,media,type,in,this,case,for,a,given,link,resource,the,method,first,looks,up,any,explicitly,registered,file,extensions,first,and,then,falls,back,on,jaf,if,available,param,resource,the,resource,to,look,up,return,the,media,type,for,the,extension,or,code,null,since,4,3;public,media,type,get,media,type,for,resource,resource,resource,assert,not,null,resource,media,type,media,type,null,string,filename,resource,get,filename,string,extension,string,utils,get,filename,extension,filename,if,extension,null,media,type,lookup,media,type,extension,if,media,type,null,media,type,jaf,media,type,factory,get,media,type,filename,if,media,type,equals,media,type,media,type,null,return,media,type
PathExtensionContentNegotiationStrategy -> public MediaType getMediaTypeForResource(Resource resource);1468415682;A public method exposing the knowledge of the path extension strategy to_resolve file extensions to a MediaType in this case for a given_{@link Resource}. The method first looks up any explicitly registered_file extensions first and then falls back on JAF if available._@param resource the resource to look up_@return the MediaType for the extension or {@code null}._@since 4.3;public MediaType getMediaTypeForResource(Resource resource) {_		Assert.notNull(resource)__		MediaType mediaType = null__		String filename = resource.getFilename()__		String extension = StringUtils.getFilenameExtension(filename)__		if (extension != null) {_			mediaType = lookupMediaType(extension)__		}_		if (mediaType == null && JAF_PRESENT) {_			mediaType = JafMediaTypeFactory.getMediaType(filename)__		}_		if (MediaType.APPLICATION_OCTET_STREAM.equals(mediaType)) {_			mediaType = null__		}_		return mediaType__	};a,public,method,exposing,the,knowledge,of,the,path,extension,strategy,to,resolve,file,extensions,to,a,media,type,in,this,case,for,a,given,link,resource,the,method,first,looks,up,any,explicitly,registered,file,extensions,first,and,then,falls,back,on,jaf,if,available,param,resource,the,resource,to,look,up,return,the,media,type,for,the,extension,or,code,null,since,4,3;public,media,type,get,media,type,for,resource,resource,resource,assert,not,null,resource,media,type,media,type,null,string,filename,resource,get,filename,string,extension,string,utils,get,filename,extension,filename,if,extension,null,media,type,lookup,media,type,extension,if,media,type,null,media,type,jaf,media,type,factory,get,media,type,filename,if,media,type,equals,media,type,media,type,null,return,media,type
PathExtensionContentNegotiationStrategy -> public MediaType getMediaTypeForResource(Resource resource);1468947211;A public method exposing the knowledge of the path extension strategy to_resolve file extensions to a MediaType in this case for a given_{@link Resource}. The method first looks up any explicitly registered_file extensions first and then falls back on JAF if available._@param resource the resource to look up_@return the MediaType for the extension or {@code null}._@since 4.3;public MediaType getMediaTypeForResource(Resource resource) {_		Assert.notNull(resource)__		MediaType mediaType = null__		String filename = resource.getFilename()__		String extension = StringUtils.getFilenameExtension(filename)__		if (extension != null) {_			mediaType = lookupMediaType(extension)__		}_		if (mediaType == null && JAF_PRESENT) {_			mediaType = MediaTypeFactory.getMediaType(filename)__		}_		if (MediaType.APPLICATION_OCTET_STREAM.equals(mediaType)) {_			mediaType = null__		}_		return mediaType__	};a,public,method,exposing,the,knowledge,of,the,path,extension,strategy,to,resolve,file,extensions,to,a,media,type,in,this,case,for,a,given,link,resource,the,method,first,looks,up,any,explicitly,registered,file,extensions,first,and,then,falls,back,on,jaf,if,available,param,resource,the,resource,to,look,up,return,the,media,type,for,the,extension,or,code,null,since,4,3;public,media,type,get,media,type,for,resource,resource,resource,assert,not,null,resource,media,type,media,type,null,string,filename,resource,get,filename,string,extension,string,utils,get,filename,extension,filename,if,extension,null,media,type,lookup,media,type,extension,if,media,type,null,media,type,media,type,factory,get,media,type,filename,if,media,type,equals,media,type,media,type,null,return,media,type
PathExtensionContentNegotiationStrategy -> public MediaType getMediaTypeForResource(Resource resource);1468963833;A public method exposing the knowledge of the path extension strategy to_resolve file extensions to a MediaType in this case for a given_{@link Resource}. The method first looks up any explicitly registered_file extensions first and then falls back on JAF if available._@param resource the resource to look up_@return the MediaType for the extension or {@code null}._@since 4.3;public MediaType getMediaTypeForResource(Resource resource) {_		Assert.notNull(resource)__		MediaType mediaType = null__		String filename = resource.getFilename()__		String extension = StringUtils.getFilenameExtension(filename)__		if (extension != null) {_			mediaType = lookupMediaType(extension)__		}_		if (mediaType == null && JAF_PRESENT) {_			mediaType = MediaTypeFactory.getMediaType(filename)__		}_		if (MediaType.APPLICATION_OCTET_STREAM.equals(mediaType)) {_			mediaType = null__		}_		return mediaType__	};a,public,method,exposing,the,knowledge,of,the,path,extension,strategy,to,resolve,file,extensions,to,a,media,type,in,this,case,for,a,given,link,resource,the,method,first,looks,up,any,explicitly,registered,file,extensions,first,and,then,falls,back,on,jaf,if,available,param,resource,the,resource,to,look,up,return,the,media,type,for,the,extension,or,code,null,since,4,3;public,media,type,get,media,type,for,resource,resource,resource,assert,not,null,resource,media,type,media,type,null,string,filename,resource,get,filename,string,extension,string,utils,get,filename,extension,filename,if,extension,null,media,type,lookup,media,type,extension,if,media,type,null,media,type,media,type,factory,get,media,type,filename,if,media,type,equals,media,type,media,type,null,return,media,type
PathExtensionContentNegotiationStrategy -> public MediaType getMediaTypeForResource(Resource resource);1485810955;A public method exposing the knowledge of the path extension strategy to_resolve file extensions to a {@link MediaType} in this case for a given_{@link Resource}. The method first looks up any explicitly registered_file extensions first and then falls back on JAF if available._@param resource the resource to look up_@return the MediaType for the extension, or {@code null} if none found_@since 4.3;public MediaType getMediaTypeForResource(Resource resource) {_		Assert.notNull(resource, "Resource must not be null")__		MediaType mediaType = null__		String filename = resource.getFilename()__		String extension = StringUtils.getFilenameExtension(filename)__		if (extension != null) {_			mediaType = lookupMediaType(extension)__		}_		if (mediaType == null && JAF_PRESENT) {_			mediaType = MediaTypeFactory.getMediaType(filename)__		}_		if (MediaType.APPLICATION_OCTET_STREAM.equals(mediaType)) {_			mediaType = null__		}_		return mediaType__	};a,public,method,exposing,the,knowledge,of,the,path,extension,strategy,to,resolve,file,extensions,to,a,link,media,type,in,this,case,for,a,given,link,resource,the,method,first,looks,up,any,explicitly,registered,file,extensions,first,and,then,falls,back,on,jaf,if,available,param,resource,the,resource,to,look,up,return,the,media,type,for,the,extension,or,code,null,if,none,found,since,4,3;public,media,type,get,media,type,for,resource,resource,resource,assert,not,null,resource,resource,must,not,be,null,media,type,media,type,null,string,filename,resource,get,filename,string,extension,string,utils,get,filename,extension,filename,if,extension,null,media,type,lookup,media,type,extension,if,media,type,null,media,type,media,type,factory,get,media,type,filename,if,media,type,equals,media,type,media,type,null,return,media,type
PathExtensionContentNegotiationStrategy -> public MediaType getMediaTypeForResource(Resource resource);1490104706;A public method exposing the knowledge of the path extension strategy to_resolve file extensions to a {@link MediaType} in this case for a given_{@link Resource}. The method first looks up any explicitly registered_file extensions first and then falls back on {@link MediaTypeFactory} if available._@param resource the resource to look up_@return the MediaType for the extension, or {@code null} if none found_@since 4.3;public MediaType getMediaTypeForResource(Resource resource) {_		Assert.notNull(resource, "Resource must not be null")__		MediaType mediaType = null__		String filename = resource.getFilename()__		String extension = StringUtils.getFilenameExtension(filename)__		if (extension != null) {_			mediaType = lookupMediaType(extension)__		}_		if (mediaType == null) {_			mediaType = MediaTypeFactory.getMediaType(filename)__		}_		return mediaType__	};a,public,method,exposing,the,knowledge,of,the,path,extension,strategy,to,resolve,file,extensions,to,a,link,media,type,in,this,case,for,a,given,link,resource,the,method,first,looks,up,any,explicitly,registered,file,extensions,first,and,then,falls,back,on,link,media,type,factory,if,available,param,resource,the,resource,to,look,up,return,the,media,type,for,the,extension,or,code,null,if,none,found,since,4,3;public,media,type,get,media,type,for,resource,resource,resource,assert,not,null,resource,resource,must,not,be,null,media,type,media,type,null,string,filename,resource,get,filename,string,extension,string,utils,get,filename,extension,filename,if,extension,null,media,type,lookup,media,type,extension,if,media,type,null,media,type,media,type,factory,get,media,type,filename,return,media,type
PathExtensionContentNegotiationStrategy -> public MediaType getMediaTypeForResource(Resource resource);1490260483;A public method exposing the knowledge of the path extension strategy to_resolve file extensions to a {@link MediaType} in this case for a given_{@link Resource}. The method first looks up any explicitly registered_file extensions first and then falls back on {@link MediaTypeFactory} if available._@param resource the resource to look up_@return the MediaType for the extension, or {@code null} if none found_@since 4.3;public MediaType getMediaTypeForResource(Resource resource) {_		Assert.notNull(resource, "Resource must not be null")__		MediaType mediaType = null__		String filename = resource.getFilename()__		String extension = StringUtils.getFilenameExtension(filename)__		if (extension != null) {_			mediaType = lookupMediaType(extension)__		}_		if (mediaType == null) {_			mediaType = MediaTypeFactory.getMediaType(filename).orElse(null)__		}_		return mediaType__	};a,public,method,exposing,the,knowledge,of,the,path,extension,strategy,to,resolve,file,extensions,to,a,link,media,type,in,this,case,for,a,given,link,resource,the,method,first,looks,up,any,explicitly,registered,file,extensions,first,and,then,falls,back,on,link,media,type,factory,if,available,param,resource,the,resource,to,look,up,return,the,media,type,for,the,extension,or,code,null,if,none,found,since,4,3;public,media,type,get,media,type,for,resource,resource,resource,assert,not,null,resource,resource,must,not,be,null,media,type,media,type,null,string,filename,resource,get,filename,string,extension,string,utils,get,filename,extension,filename,if,extension,null,media,type,lookup,media,type,extension,if,media,type,null,media,type,media,type,factory,get,media,type,filename,or,else,null,return,media,type
PathExtensionContentNegotiationStrategy -> public MediaType getMediaTypeForResource(Resource resource);1490285806;A public method exposing the knowledge of the path extension strategy to_resolve file extensions to a {@link MediaType} in this case for a given_{@link Resource}. The method first looks up any explicitly registered_file extensions first and then falls back on {@link MediaTypeFactory} if available._@param resource the resource to look up_@return the MediaType for the extension, or {@code null} if none found_@since 4.3;public MediaType getMediaTypeForResource(Resource resource) {_		Assert.notNull(resource, "Resource must not be null")__		MediaType mediaType = null__		String filename = resource.getFilename()__		String extension = StringUtils.getFilenameExtension(filename)__		if (extension != null) {_			mediaType = lookupMediaType(extension)__		}_		if (mediaType == null) {_			mediaType = MediaTypeFactory.getMediaType(filename).orElse(null)__		}_		return mediaType__	};a,public,method,exposing,the,knowledge,of,the,path,extension,strategy,to,resolve,file,extensions,to,a,link,media,type,in,this,case,for,a,given,link,resource,the,method,first,looks,up,any,explicitly,registered,file,extensions,first,and,then,falls,back,on,link,media,type,factory,if,available,param,resource,the,resource,to,look,up,return,the,media,type,for,the,extension,or,code,null,if,none,found,since,4,3;public,media,type,get,media,type,for,resource,resource,resource,assert,not,null,resource,resource,must,not,be,null,media,type,media,type,null,string,filename,resource,get,filename,string,extension,string,utils,get,filename,extension,filename,if,extension,null,media,type,lookup,media,type,extension,if,media,type,null,media,type,media,type,factory,get,media,type,filename,or,else,null,return,media,type
PathExtensionContentNegotiationStrategy -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1468415682;Configure a {@code UrlPathHelper} to use in {@link #getMediaTypeKey}_in order to derive the lookup path for a target request URL path._@since 4.2.8;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,media,type,key,in,order,to,derive,the,lookup,path,for,a,target,request,url,path,since,4,2,8;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathExtensionContentNegotiationStrategy -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1468947211;Configure a {@code UrlPathHelper} to use in {@link #getMediaTypeKey}_in order to derive the lookup path for a target request URL path._@since 4.2.8;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,media,type,key,in,order,to,derive,the,lookup,path,for,a,target,request,url,path,since,4,2,8;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathExtensionContentNegotiationStrategy -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1468963833;Configure a {@code UrlPathHelper} to use in {@link #getMediaTypeKey}_in order to derive the lookup path for a target request URL path._@since 4.2.8;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,media,type,key,in,order,to,derive,the,lookup,path,for,a,target,request,url,path,since,4,2,8;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathExtensionContentNegotiationStrategy -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1485810955;Configure a {@code UrlPathHelper} to use in {@link #getMediaTypeKey}_in order to derive the lookup path for a target request URL path._@since 4.2.8;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,media,type,key,in,order,to,derive,the,lookup,path,for,a,target,request,url,path,since,4,2,8;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathExtensionContentNegotiationStrategy -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1490104706;Configure a {@code UrlPathHelper} to use in {@link #getMediaTypeKey}_in order to derive the lookup path for a target request URL path._@since 4.2.8;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,media,type,key,in,order,to,derive,the,lookup,path,for,a,target,request,url,path,since,4,2,8;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathExtensionContentNegotiationStrategy -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1490260483;Configure a {@code UrlPathHelper} to use in {@link #getMediaTypeKey}_in order to derive the lookup path for a target request URL path._@since 4.2.8;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,media,type,key,in,order,to,derive,the,lookup,path,for,a,target,request,url,path,since,4,2,8;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathExtensionContentNegotiationStrategy -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1490285806;Configure a {@code UrlPathHelper} to use in {@link #getMediaTypeKey}_in order to derive the lookup path for a target request URL path._@since 4.2.8;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,media,type,key,in,order,to,derive,the,lookup,path,for,a,target,request,url,path,since,4,2,8;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathExtensionContentNegotiationStrategy -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1495868221;Configure a {@code UrlPathHelper} to use in {@link #getMediaTypeKey}_in order to derive the lookup path for a target request URL path._@since 4.2.8;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,media,type,key,in,order,to,derive,the,lookup,path,for,a,target,request,url,path,since,4,2,8;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathExtensionContentNegotiationStrategy -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1496837955;Configure a {@code UrlPathHelper} to use in {@link #getMediaTypeKey}_in order to derive the lookup path for a target request URL path._@since 4.2.8;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,media,type,key,in,order,to,derive,the,lookup,path,for,a,target,request,url,path,since,4,2,8;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathExtensionContentNegotiationStrategy -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1499788456;Configure a {@code UrlPathHelper} to use in {@link #getMediaTypeKey}_in order to derive the lookup path for a target request URL path._@since 4.2.8;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,media,type,key,in,order,to,derive,the,lookup,path,for,a,target,request,url,path,since,4,2,8;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathExtensionContentNegotiationStrategy -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1502974979;Configure a {@code UrlPathHelper} to use in {@link #getMediaTypeKey}_in order to derive the lookup path for a target request URL path._@since 4.2.8;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,media,type,key,in,order,to,derive,the,lookup,path,for,a,target,request,url,path,since,4,2,8;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathExtensionContentNegotiationStrategy -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1529361191;Configure a {@code UrlPathHelper} to use in {@link #getMediaTypeKey}_in order to derive the lookup path for a target request URL path._@since 4.2.8;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,media,type,key,in,order,to,derive,the,lookup,path,for,a,target,request,url,path,since,4,2,8;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathExtensionContentNegotiationStrategy -> public void setUrlPathHelper(UrlPathHelper urlPathHelper);1530174524;Configure a {@code UrlPathHelper} to use in {@link #getMediaTypeKey}_in order to derive the lookup path for a target request URL path._@since 4.2.8;public void setUrlPathHelper(UrlPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,media,type,key,in,order,to,derive,the,lookup,path,for,a,target,request,url,path,since,4,2,8;public,void,set,url,path,helper,url,path,helper,url,path,helper,this,url,path,helper,url,path,helper
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes);1496837955;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__		this.urlPathHelper.setUrlDecode(false)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,nullable,map,string,media,type,media,types,super,media,types,this,url,path,helper,set,url,decode,false
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes);1499788456;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__		setUseRegisteredExtensionsOnly(false)__		setIgnoreUnknownExtensions(true)__		this.urlPathHelper.setUrlDecode(false)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,nullable,map,string,media,type,media,types,super,media,types,set,use,registered,extensions,only,false,set,ignore,unknown,extensions,true,this,url,path,helper,set,url,decode,false
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes);1502974979;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__		setUseRegisteredExtensionsOnly(false)__		setIgnoreUnknownExtensions(true)__		this.urlPathHelper.setUrlDecode(false)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,nullable,map,string,media,type,media,types,super,media,types,set,use,registered,extensions,only,false,set,ignore,unknown,extensions,true,this,url,path,helper,set,url,decode,false
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes);1529361191;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__		setUseRegisteredExtensionsOnly(false)__		setIgnoreUnknownExtensions(true)__		this.urlPathHelper.setUrlDecode(false)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,nullable,map,string,media,type,media,types,super,media,types,set,use,registered,extensions,only,false,set,ignore,unknown,extensions,true,this,url,path,helper,set,url,decode,false
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes);1530174524;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(@Nullable Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__		setUseRegisteredExtensionsOnly(false)__		setIgnoreUnknownExtensions(true)__		this.urlPathHelper.setUrlDecode(false)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,nullable,map,string,media,type,media,types,super,media,types,set,use,registered,extensions,only,false,set,ignore,unknown,extensions,true,this,url,path,helper,set,url,decode,false
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1340380546;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through {@link ServletContext#getMimeType(String)}_or through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		super(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,link,servlet,context,get,mime,type,string,or,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,super,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1340652245;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through {@link ServletContext#getMimeType(String)}_or through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		super(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,link,servlet,context,get,mime,type,string,or,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,super,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1344035753;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through {@link ServletContext#getMimeType(String)}_or through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		super(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,link,servlet,context,get,mime,type,string,or,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,super,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1348666123;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		super(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,super,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1398960186;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		super(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,super,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1413848647;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		super(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,super,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1443560917;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		super(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,super,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1444898007;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		super(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,super,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1457125561;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		super(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,super,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1464879764;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		super(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,super,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1468415682;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		this(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,this,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1468947211;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		this(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,this,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1468963833;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		this(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,this,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1485810955;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		this(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,this,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1490104706;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		this(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,this,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1490260483;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		this(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,this,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1490285806;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		this(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,this,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1495868221;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		this(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,this,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1496837955;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		this(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,this,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1499788456;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		this(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,this,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1502974979;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		this(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,this,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1529361191;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		this(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,this,null
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy();1530174524;Create an instance without any mappings to start with. Mappings may be added_later on if any extensions are resolved through the Java Activation framework.;public PathExtensionContentNegotiationStrategy() {_		this(null)__	};create,an,instance,without,any,mappings,to,start,with,mappings,may,be,added,later,on,if,any,extensions,are,resolved,through,the,java,activation,framework;public,path,extension,content,negotiation,strategy,this,null
PathExtensionContentNegotiationStrategy -> public void setUseJaf(boolean useJaf);1340380546;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available).;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
PathExtensionContentNegotiationStrategy -> public void setUseJaf(boolean useJaf);1340652245;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available).;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
PathExtensionContentNegotiationStrategy -> public void setUseJaf(boolean useJaf);1344035753;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available).;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
PathExtensionContentNegotiationStrategy -> public void setUseJaf(boolean useJaf);1348666123;Indicate whether to use the Java Activation Framework to map from file extensions to media types._<p>Default is {@code true}, i.e. the Java Activation Framework is used (if available).;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
PathExtensionContentNegotiationStrategy -> public void setUseJaf(boolean useJaf);1398960186;Indicate whether to use the Java Activation Framework to map from file_extensions to media types.__<p>Default is {@code true}, i.e. the Java Activation Framework is used_(if available).;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
PathExtensionContentNegotiationStrategy -> public void setUseJaf(boolean useJaf);1413848647;Indicate whether to use the Java Activation Framework to map from file_extensions to media types.__<p>Default is {@code true}, i.e. the Java Activation Framework is used_(if available).;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};indicate,whether,to,use,the,java,activation,framework,to,map,from,file,extensions,to,media,types,p,default,is,code,true,i,e,the,java,activation,framework,is,used,if,available;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
PathExtensionContentNegotiationStrategy -> public void setUseJaf(boolean useJaf);1443560917;Whether to use the Java Activation Framework to look up file extensions._<p>By default if this property is not set JAF is present on the_classpath it will be used.;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};whether,to,use,the,java,activation,framework,to,look,up,file,extensions,p,by,default,if,this,property,is,not,set,jaf,is,present,on,the,classpath,it,will,be,used;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
PathExtensionContentNegotiationStrategy -> public void setUseJaf(boolean useJaf);1444898007;Whether to use the Java Activation Framework to look up file extensions._<p>By default this is set to "true" but depends on JAF being present.;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};whether,to,use,the,java,activation,framework,to,look,up,file,extensions,p,by,default,this,is,set,to,true,but,depends,on,jaf,being,present;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
PathExtensionContentNegotiationStrategy -> public void setUseJaf(boolean useJaf);1457125561;Whether to use the Java Activation Framework to look up file extensions._<p>By default this is set to "true" but depends on JAF being present.;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};whether,to,use,the,java,activation,framework,to,look,up,file,extensions,p,by,default,this,is,set,to,true,but,depends,on,jaf,being,present;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
PathExtensionContentNegotiationStrategy -> public void setUseJaf(boolean useJaf);1464879764;Whether to use the Java Activation Framework to look up file extensions._<p>By default this is set to "true" but depends on JAF being present.;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};whether,to,use,the,java,activation,framework,to,look,up,file,extensions,p,by,default,this,is,set,to,true,but,depends,on,jaf,being,present;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
PathExtensionContentNegotiationStrategy -> public void setUseJaf(boolean useJaf);1468415682;Whether to use the Java Activation Framework to look up file extensions._<p>By default this is set to "true" but depends on JAF being present.;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};whether,to,use,the,java,activation,framework,to,look,up,file,extensions,p,by,default,this,is,set,to,true,but,depends,on,jaf,being,present;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
PathExtensionContentNegotiationStrategy -> public void setUseJaf(boolean useJaf);1468947211;Whether to use the Java Activation Framework to look up file extensions._<p>By default this is set to "true" but depends on JAF being present.;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};whether,to,use,the,java,activation,framework,to,look,up,file,extensions,p,by,default,this,is,set,to,true,but,depends,on,jaf,being,present;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
PathExtensionContentNegotiationStrategy -> public void setUseJaf(boolean useJaf);1468963833;Whether to use the Java Activation Framework to look up file extensions._<p>By default this is set to "true" but depends on JAF being present.;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};whether,to,use,the,java,activation,framework,to,look,up,file,extensions,p,by,default,this,is,set,to,true,but,depends,on,jaf,being,present;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
PathExtensionContentNegotiationStrategy -> public void setUseJaf(boolean useJaf);1485810955;Whether to use the Java Activation Framework to look up file extensions._<p>By default this is set to "true" but depends on JAF being present.;public void setUseJaf(boolean useJaf) {_		this.useJaf = useJaf__	};whether,to,use,the,java,activation,framework,to,look,up,file,extensions,p,by,default,this,is,set,to,true,but,depends,on,jaf,being,present;public,void,set,use,jaf,boolean,use,jaf,this,use,jaf,use,jaf
PathExtensionContentNegotiationStrategy -> @Deprecated 	public void setUseJaf(boolean useJaf);1490104706;@deprecated as 5.0, in favor of {@link MediaTypeFactory}, which has no JAF dependency.;@Deprecated_	public void setUseJaf(boolean useJaf) {_	};deprecated,as,5,0,in,favor,of,link,media,type,factory,which,has,no,jaf,dependency;deprecated,public,void,set,use,jaf,boolean,use,jaf
PathExtensionContentNegotiationStrategy -> @Deprecated 	public void setUseJaf(boolean useJaf);1490260483;@deprecated as 5.0, in favor of {@link MediaTypeFactory}, which has no JAF dependency.;@Deprecated_	public void setUseJaf(boolean useJaf) {_	};deprecated,as,5,0,in,favor,of,link,media,type,factory,which,has,no,jaf,dependency;deprecated,public,void,set,use,jaf,boolean,use,jaf
PathExtensionContentNegotiationStrategy -> @Deprecated 	public void setUseJaf(boolean useJaf);1490285806;@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
PathExtensionContentNegotiationStrategy -> @Deprecated 	public void setUseJaf(boolean useJaf);1495868221;@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
PathExtensionContentNegotiationStrategy -> @Deprecated 	public void setUseJaf(boolean useJaf);1496837955;@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
PathExtensionContentNegotiationStrategy -> @Deprecated 	public void setUseJaf(boolean useJaf);1499788456;@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
PathExtensionContentNegotiationStrategy -> @Deprecated 	public void setUseJaf(boolean useJaf);1502974979;@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
PathExtensionContentNegotiationStrategy -> @Deprecated 	public void setUseJaf(boolean useJaf);1529361191;@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
PathExtensionContentNegotiationStrategy -> @Deprecated 	public void setUseJaf(boolean useJaf);1530174524;Indicate whether to use the Java Activation Framework as a fallback option_to map from file extensions to media types._@deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}.;@Deprecated_	public void setUseJaf(boolean useJaf) {_		setUseRegisteredExtensionsOnly(!useJaf)__	};indicate,whether,to,use,the,java,activation,framework,as,a,fallback,option,to,map,from,file,extensions,to,media,types,deprecated,as,of,5,0,in,favor,of,link,set,use,registered,extensions,only,boolean;deprecated,public,void,set,use,jaf,boolean,use,jaf,set,use,registered,extensions,only,use,jaf
PathExtensionContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1398960186;Whether to ignore requests that have a file extension that does not match_any mapped media types. Setting this to {@code false} will result in a_{@code HttpMediaTypeNotAcceptableException}.__<p>By default this is set to {@code true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,that,have,a,file,extension,that,does,not,match,any,mapped,media,types,setting,this,to,code,false,will,result,in,a,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
PathExtensionContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1413848647;Whether to ignore requests that have a file extension that does not match_any mapped media types. Setting this to {@code false} will result in a_{@code HttpMediaTypeNotAcceptableException}.__<p>By default this is set to {@code true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,that,have,a,file,extension,that,does,not,match,any,mapped,media,types,setting,this,to,code,false,will,result,in,a,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
PathExtensionContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1443560917;Whether to ignore requests with unknown file extension. Setting this to_{@code false} results in {@code HttpMediaTypeNotAcceptableException}._<p>By default this is set to {@code true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,with,unknown,file,extension,setting,this,to,code,false,results,in,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
PathExtensionContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1444898007;Whether to ignore requests with unknown file extension. Setting this to_{@code false} results in {@code HttpMediaTypeNotAcceptableException}._<p>By default this is set to {@code true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,with,unknown,file,extension,setting,this,to,code,false,results,in,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
PathExtensionContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1457125561;Whether to ignore requests with unknown file extension. Setting this to_{@code false} results in {@code HttpMediaTypeNotAcceptableException}._<p>By default this is set to {@code true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,with,unknown,file,extension,setting,this,to,code,false,results,in,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
PathExtensionContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1464879764;Whether to ignore requests with unknown file extension. Setting this to_{@code false} results in {@code HttpMediaTypeNotAcceptableException}._<p>By default this is set to {@code true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,with,unknown,file,extension,setting,this,to,code,false,results,in,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
PathExtensionContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1468415682;Whether to ignore requests with unknown file extension. Setting this to_{@code false} results in {@code HttpMediaTypeNotAcceptableException}._<p>By default this is set to {@code true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,with,unknown,file,extension,setting,this,to,code,false,results,in,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
PathExtensionContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1468947211;Whether to ignore requests with unknown file extension. Setting this to_{@code false} results in {@code HttpMediaTypeNotAcceptableException}._<p>By default this is set to {@code true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,with,unknown,file,extension,setting,this,to,code,false,results,in,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
PathExtensionContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1468963833;Whether to ignore requests with unknown file extension. Setting this to_{@code false} results in {@code HttpMediaTypeNotAcceptableException}._<p>By default this is set to {@code true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,with,unknown,file,extension,setting,this,to,code,false,results,in,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
PathExtensionContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1485810955;Whether to ignore requests with unknown file extension. Setting this to_{@code false} results in {@code HttpMediaTypeNotAcceptableException}._<p>By default this is set to {@code true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,with,unknown,file,extension,setting,this,to,code,false,results,in,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
PathExtensionContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1490104706;Whether to ignore requests with unknown file extension. Setting this to_{@code false} results in {@code HttpMediaTypeNotAcceptableException}._<p>By default this is set to {@code true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,with,unknown,file,extension,setting,this,to,code,false,results,in,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
PathExtensionContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1490260483;Whether to ignore requests with unknown file extension. Setting this to_{@code false} results in {@code HttpMediaTypeNotAcceptableException}._<p>By default this is set to {@code true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,with,unknown,file,extension,setting,this,to,code,false,results,in,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
PathExtensionContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1490285806;Whether to ignore requests with unknown file extension. Setting this to_{@code false} results in {@code HttpMediaTypeNotAcceptableException}._<p>By default this is set to {@code true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,with,unknown,file,extension,setting,this,to,code,false,results,in,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
PathExtensionContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1495868221;Whether to ignore requests with unknown file extension. Setting this to_{@code false} results in {@code HttpMediaTypeNotAcceptableException}._<p>By default this is set to {@code true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,with,unknown,file,extension,setting,this,to,code,false,results,in,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
PathExtensionContentNegotiationStrategy -> public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions);1496837955;Whether to ignore requests with unknown file extension. Setting this to_{@code false} results in {@code HttpMediaTypeNotAcceptableException}._<p>By default this is set to {@code true}.;public void setIgnoreUnknownExtensions(boolean ignoreUnknownExtensions) {_		this.ignoreUnknownExtensions = ignoreUnknownExtensions__	};whether,to,ignore,requests,with,unknown,file,extension,setting,this,to,code,false,results,in,code,http,media,type,not,acceptable,exception,p,by,default,this,is,set,to,code,true;public,void,set,ignore,unknown,extensions,boolean,ignore,unknown,extensions,this,ignore,unknown,extensions,ignore,unknown,extensions
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1340652245;Create an instance with the given extension-to-MediaType lookup._@throws IllegalArgumentException if a media type string cannot be parsed;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,extension,to,media,type,lookup,throws,illegal,argument,exception,if,a,media,type,string,cannot,be,parsed;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1344035753;Create an instance with the given extension-to-MediaType lookup._@throws IllegalArgumentException if a media type string cannot be parsed;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,extension,to,media,type,lookup,throws,illegal,argument,exception,if,a,media,type,string,cannot,be,parsed;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1348666123;Create an instance with the given extension-to-MediaType lookup._@throws IllegalArgumentException if a media type string cannot be parsed;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,extension,to,media,type,lookup,throws,illegal,argument,exception,if,a,media,type,string,cannot,be,parsed;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1398960186;Create an instance with the given extension-to-MediaType lookup._@throws IllegalArgumentException if a media type string cannot be parsed;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,extension,to,media,type,lookup,throws,illegal,argument,exception,if,a,media,type,string,cannot,be,parsed;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1413848647;Create an instance with the given extension-to-MediaType lookup._@throws IllegalArgumentException if a media type string cannot be parsed;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,extension,to,media,type,lookup,throws,illegal,argument,exception,if,a,media,type,string,cannot,be,parsed;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1443560917;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1444898007;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1457125561;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1464879764;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1468415682;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__		this.urlPathHelper.setUrlDecode(false)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types,this,url,path,helper,set,url,decode,false
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1468947211;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__		this.urlPathHelper.setUrlDecode(false)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types,this,url,path,helper,set,url,decode,false
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1468963833;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__		this.urlPathHelper.setUrlDecode(false)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types,this,url,path,helper,set,url,decode,false
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1485810955;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__		this.urlPathHelper.setUrlDecode(false)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types,this,url,path,helper,set,url,decode,false
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1490104706;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__		this.urlPathHelper.setUrlDecode(false)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types,this,url,path,helper,set,url,decode,false
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1490260483;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__		this.urlPathHelper.setUrlDecode(false)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types,this,url,path,helper,set,url,decode,false
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1490285806;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__		this.urlPathHelper.setUrlDecode(false)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types,this,url,path,helper,set,url,decode,false
PathExtensionContentNegotiationStrategy -> public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes);1495868221;Create an instance with the given map of file extensions and media types.;public PathExtensionContentNegotiationStrategy(Map<String, MediaType> mediaTypes) {_		super(mediaTypes)__		this.urlPathHelper.setUrlDecode(false)__	};create,an,instance,with,the,given,map,of,file,extensions,and,media,types;public,path,extension,content,negotiation,strategy,map,string,media,type,media,types,super,media,types,this,url,path,helper,set,url,decode,false
PathExtensionContentNegotiationStrategy -> @Nullable 	public MediaType getMediaTypeForResource(Resource resource);1495868221;A public method exposing the knowledge of the path extension strategy to_resolve file extensions to a {@link MediaType} in this case for a given_{@link Resource}. The method first looks up any explicitly registered_file extensions first and then falls back on {@link MediaTypeFactory} if available._@param resource the resource to look up_@return the MediaType for the extension, or {@code null} if none found_@since 4.3;@Nullable_	public MediaType getMediaTypeForResource(Resource resource) {_		Assert.notNull(resource, "Resource must not be null")__		MediaType mediaType = null__		String filename = resource.getFilename()__		String extension = StringUtils.getFilenameExtension(filename)__		if (extension != null) {_			mediaType = lookupMediaType(extension)__		}_		if (mediaType == null) {_			mediaType = MediaTypeFactory.getMediaType(filename).orElse(null)__		}_		return mediaType__	};a,public,method,exposing,the,knowledge,of,the,path,extension,strategy,to,resolve,file,extensions,to,a,link,media,type,in,this,case,for,a,given,link,resource,the,method,first,looks,up,any,explicitly,registered,file,extensions,first,and,then,falls,back,on,link,media,type,factory,if,available,param,resource,the,resource,to,look,up,return,the,media,type,for,the,extension,or,code,null,if,none,found,since,4,3;nullable,public,media,type,get,media,type,for,resource,resource,resource,assert,not,null,resource,resource,must,not,be,null,media,type,media,type,null,string,filename,resource,get,filename,string,extension,string,utils,get,filename,extension,filename,if,extension,null,media,type,lookup,media,type,extension,if,media,type,null,media,type,media,type,factory,get,media,type,filename,or,else,null,return,media,type
PathExtensionContentNegotiationStrategy -> @Nullable 	public MediaType getMediaTypeForResource(Resource resource);1496837955;A public method exposing the knowledge of the path extension strategy to_resolve file extensions to a {@link MediaType} in this case for a given_{@link Resource}. The method first looks up any explicitly registered_file extensions first and then falls back on {@link MediaTypeFactory} if available._@param resource the resource to look up_@return the MediaType for the extension, or {@code null} if none found_@since 4.3;@Nullable_	public MediaType getMediaTypeForResource(Resource resource) {_		Assert.notNull(resource, "Resource must not be null")__		MediaType mediaType = null__		String filename = resource.getFilename()__		String extension = StringUtils.getFilenameExtension(filename)__		if (extension != null) {_			mediaType = lookupMediaType(extension)__		}_		if (mediaType == null) {_			mediaType = MediaTypeFactory.getMediaType(filename).orElse(null)__		}_		return mediaType__	};a,public,method,exposing,the,knowledge,of,the,path,extension,strategy,to,resolve,file,extensions,to,a,link,media,type,in,this,case,for,a,given,link,resource,the,method,first,looks,up,any,explicitly,registered,file,extensions,first,and,then,falls,back,on,link,media,type,factory,if,available,param,resource,the,resource,to,look,up,return,the,media,type,for,the,extension,or,code,null,if,none,found,since,4,3;nullable,public,media,type,get,media,type,for,resource,resource,resource,assert,not,null,resource,resource,must,not,be,null,media,type,media,type,null,string,filename,resource,get,filename,string,extension,string,utils,get,filename,extension,filename,if,extension,null,media,type,lookup,media,type,extension,if,media,type,null,media,type,media,type,factory,get,media,type,filename,or,else,null,return,media,type
PathExtensionContentNegotiationStrategy -> @Nullable 	public MediaType getMediaTypeForResource(Resource resource);1499788456;A public method exposing the knowledge of the path extension strategy to_resolve file extensions to a {@link MediaType} in this case for a given_{@link Resource}. The method first looks up any explicitly registered_file extensions first and then falls back on {@link MediaTypeFactory} if available._@param resource the resource to look up_@return the MediaType for the extension, or {@code null} if none found_@since 4.3;@Nullable_	public MediaType getMediaTypeForResource(Resource resource) {_		Assert.notNull(resource, "Resource must not be null")__		MediaType mediaType = null__		String filename = resource.getFilename()__		String extension = StringUtils.getFilenameExtension(filename)__		if (extension != null) {_			mediaType = lookupMediaType(extension)__		}_		if (mediaType == null) {_			mediaType = MediaTypeFactory.getMediaType(filename).orElse(null)__		}_		return mediaType__	};a,public,method,exposing,the,knowledge,of,the,path,extension,strategy,to,resolve,file,extensions,to,a,link,media,type,in,this,case,for,a,given,link,resource,the,method,first,looks,up,any,explicitly,registered,file,extensions,first,and,then,falls,back,on,link,media,type,factory,if,available,param,resource,the,resource,to,look,up,return,the,media,type,for,the,extension,or,code,null,if,none,found,since,4,3;nullable,public,media,type,get,media,type,for,resource,resource,resource,assert,not,null,resource,resource,must,not,be,null,media,type,media,type,null,string,filename,resource,get,filename,string,extension,string,utils,get,filename,extension,filename,if,extension,null,media,type,lookup,media,type,extension,if,media,type,null,media,type,media,type,factory,get,media,type,filename,or,else,null,return,media,type
PathExtensionContentNegotiationStrategy -> @Nullable 	public MediaType getMediaTypeForResource(Resource resource);1502974979;A public method exposing the knowledge of the path extension strategy to_resolve file extensions to a {@link MediaType} in this case for a given_{@link Resource}. The method first looks up any explicitly registered_file extensions first and then falls back on {@link MediaTypeFactory} if available._@param resource the resource to look up_@return the MediaType for the extension, or {@code null} if none found_@since 4.3;@Nullable_	public MediaType getMediaTypeForResource(Resource resource) {_		Assert.notNull(resource, "Resource must not be null")__		MediaType mediaType = null__		String filename = resource.getFilename()__		String extension = StringUtils.getFilenameExtension(filename)__		if (extension != null) {_			mediaType = lookupMediaType(extension)__		}_		if (mediaType == null) {_			mediaType = MediaTypeFactory.getMediaType(filename).orElse(null)__		}_		return mediaType__	};a,public,method,exposing,the,knowledge,of,the,path,extension,strategy,to,resolve,file,extensions,to,a,link,media,type,in,this,case,for,a,given,link,resource,the,method,first,looks,up,any,explicitly,registered,file,extensions,first,and,then,falls,back,on,link,media,type,factory,if,available,param,resource,the,resource,to,look,up,return,the,media,type,for,the,extension,or,code,null,if,none,found,since,4,3;nullable,public,media,type,get,media,type,for,resource,resource,resource,assert,not,null,resource,resource,must,not,be,null,media,type,media,type,null,string,filename,resource,get,filename,string,extension,string,utils,get,filename,extension,filename,if,extension,null,media,type,lookup,media,type,extension,if,media,type,null,media,type,media,type,factory,get,media,type,filename,or,else,null,return,media,type
PathExtensionContentNegotiationStrategy -> @Nullable 	public MediaType getMediaTypeForResource(Resource resource);1529361191;A public method exposing the knowledge of the path extension strategy to_resolve file extensions to a {@link MediaType} in this case for a given_{@link Resource}. The method first looks up any explicitly registered_file extensions first and then falls back on {@link MediaTypeFactory} if available._@param resource the resource to look up_@return the MediaType for the extension, or {@code null} if none found_@since 4.3;@Nullable_	public MediaType getMediaTypeForResource(Resource resource) {_		Assert.notNull(resource, "Resource must not be null")__		MediaType mediaType = null__		String filename = resource.getFilename()__		String extension = StringUtils.getFilenameExtension(filename)__		if (extension != null) {_			mediaType = lookupMediaType(extension)__		}_		if (mediaType == null) {_			mediaType = MediaTypeFactory.getMediaType(filename).orElse(null)__		}_		return mediaType__	};a,public,method,exposing,the,knowledge,of,the,path,extension,strategy,to,resolve,file,extensions,to,a,link,media,type,in,this,case,for,a,given,link,resource,the,method,first,looks,up,any,explicitly,registered,file,extensions,first,and,then,falls,back,on,link,media,type,factory,if,available,param,resource,the,resource,to,look,up,return,the,media,type,for,the,extension,or,code,null,if,none,found,since,4,3;nullable,public,media,type,get,media,type,for,resource,resource,resource,assert,not,null,resource,resource,must,not,be,null,media,type,media,type,null,string,filename,resource,get,filename,string,extension,string,utils,get,filename,extension,filename,if,extension,null,media,type,lookup,media,type,extension,if,media,type,null,media,type,media,type,factory,get,media,type,filename,or,else,null,return,media,type
PathExtensionContentNegotiationStrategy -> @Nullable 	public MediaType getMediaTypeForResource(Resource resource);1530174524;A public method exposing the knowledge of the path extension strategy to_resolve file extensions to a {@link MediaType} in this case for a given_{@link Resource}. The method first looks up any explicitly registered_file extensions first and then falls back on {@link MediaTypeFactory} if available._@param resource the resource to look up_@return the MediaType for the extension, or {@code null} if none found_@since 4.3;@Nullable_	public MediaType getMediaTypeForResource(Resource resource) {_		Assert.notNull(resource, "Resource must not be null")__		MediaType mediaType = null__		String filename = resource.getFilename()__		String extension = StringUtils.getFilenameExtension(filename)__		if (extension != null) {_			mediaType = lookupMediaType(extension)__		}_		if (mediaType == null) {_			mediaType = MediaTypeFactory.getMediaType(filename).orElse(null)__		}_		return mediaType__	};a,public,method,exposing,the,knowledge,of,the,path,extension,strategy,to,resolve,file,extensions,to,a,link,media,type,in,this,case,for,a,given,link,resource,the,method,first,looks,up,any,explicitly,registered,file,extensions,first,and,then,falls,back,on,link,media,type,factory,if,available,param,resource,the,resource,to,look,up,return,the,media,type,for,the,extension,or,code,null,if,none,found,since,4,3;nullable,public,media,type,get,media,type,for,resource,resource,resource,assert,not,null,resource,resource,must,not,be,null,media,type,media,type,null,string,filename,resource,get,filename,string,extension,string,utils,get,filename,extension,filename,if,extension,null,media,type,lookup,media,type,extension,if,media,type,null,media,type,media,type,factory,get,media,type,filename,or,else,null,return,media,type
PathExtensionContentNegotiationStrategy -> JafMediaTypeFactory -> private static FileTypeMap initFileTypeMap();1340380546;Find extended mime.types from the spring-context-support module.;private static FileTypeMap initFileTypeMap() {_			Resource resource = new ClassPathResource("org/springframework/mail/javamail/mime.types")__			if (resource.exists()) {_				if (logger.isTraceEnabled()) {_					logger.trace("Loading Java Activation Framework FileTypeMap from " + resource)__				}_				InputStream inputStream = null__				try {_					inputStream = resource.getInputStream()__					return new MimetypesFileTypeMap(inputStream)__				}_				catch (IOException ex) {_					_				}_				finally {_					if (inputStream != null) {_						try {_							inputStream.close()__						}_						catch (IOException ex) {_							_						}_					}_				}_			}_			if (logger.isTraceEnabled()) {_				logger.trace("Loading default Java Activation Framework FileTypeMap")__			}_			return FileTypeMap.getDefaultFileTypeMap()__		};find,extended,mime,types,from,the,spring,context,support,module;private,static,file,type,map,init,file,type,map,resource,resource,new,class,path,resource,org,springframework,mail,javamail,mime,types,if,resource,exists,if,logger,is,trace,enabled,logger,trace,loading,java,activation,framework,file,type,map,from,resource,input,stream,input,stream,null,try,input,stream,resource,get,input,stream,return,new,mimetypes,file,type,map,input,stream,catch,ioexception,ex,finally,if,input,stream,null,try,input,stream,close,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,loading,default,java,activation,framework,file,type,map,return,file,type,map,get,default,file,type,map
PathExtensionContentNegotiationStrategy -> JafMediaTypeFactory -> private static FileTypeMap initFileTypeMap();1340652245;Find extended mime.types from the spring-context-support module.;private static FileTypeMap initFileTypeMap() {_			Resource resource = new ClassPathResource("org/springframework/mail/javamail/mime.types")__			if (resource.exists()) {_				if (logger.isTraceEnabled()) {_					logger.trace("Loading Java Activation Framework FileTypeMap from " + resource)__				}_				InputStream inputStream = null__				try {_					inputStream = resource.getInputStream()__					return new MimetypesFileTypeMap(inputStream)__				}_				catch (IOException ex) {_					_				}_				finally {_					if (inputStream != null) {_						try {_							inputStream.close()__						}_						catch (IOException ex) {_							_						}_					}_				}_			}_			if (logger.isTraceEnabled()) {_				logger.trace("Loading default Java Activation Framework FileTypeMap")__			}_			return FileTypeMap.getDefaultFileTypeMap()__		};find,extended,mime,types,from,the,spring,context,support,module;private,static,file,type,map,init,file,type,map,resource,resource,new,class,path,resource,org,springframework,mail,javamail,mime,types,if,resource,exists,if,logger,is,trace,enabled,logger,trace,loading,java,activation,framework,file,type,map,from,resource,input,stream,input,stream,null,try,input,stream,resource,get,input,stream,return,new,mimetypes,file,type,map,input,stream,catch,ioexception,ex,finally,if,input,stream,null,try,input,stream,close,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,loading,default,java,activation,framework,file,type,map,return,file,type,map,get,default,file,type,map
PathExtensionContentNegotiationStrategy -> JafMediaTypeFactory -> private static FileTypeMap initFileTypeMap();1344035753;Find extended mime.types from the spring-context-support module.;private static FileTypeMap initFileTypeMap() {_			Resource resource = new ClassPathResource("org/springframework/mail/javamail/mime.types")__			if (resource.exists()) {_				if (logger.isTraceEnabled()) {_					logger.trace("Loading Java Activation Framework FileTypeMap from " + resource)__				}_				InputStream inputStream = null__				try {_					inputStream = resource.getInputStream()__					return new MimetypesFileTypeMap(inputStream)__				}_				catch (IOException ex) {_					_				}_				finally {_					if (inputStream != null) {_						try {_							inputStream.close()__						}_						catch (IOException ex) {_							_						}_					}_				}_			}_			if (logger.isTraceEnabled()) {_				logger.trace("Loading default Java Activation Framework FileTypeMap")__			}_			return FileTypeMap.getDefaultFileTypeMap()__		};find,extended,mime,types,from,the,spring,context,support,module;private,static,file,type,map,init,file,type,map,resource,resource,new,class,path,resource,org,springframework,mail,javamail,mime,types,if,resource,exists,if,logger,is,trace,enabled,logger,trace,loading,java,activation,framework,file,type,map,from,resource,input,stream,input,stream,null,try,input,stream,resource,get,input,stream,return,new,mimetypes,file,type,map,input,stream,catch,ioexception,ex,finally,if,input,stream,null,try,input,stream,close,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,loading,default,java,activation,framework,file,type,map,return,file,type,map,get,default,file,type,map
PathExtensionContentNegotiationStrategy -> JafMediaTypeFactory -> private static FileTypeMap initFileTypeMap();1348666123;Find extended mime.types from the spring-context-support module.;private static FileTypeMap initFileTypeMap() {_			Resource resource = new ClassPathResource("org/springframework/mail/javamail/mime.types")__			if (resource.exists()) {_				if (logger.isTraceEnabled()) {_					logger.trace("Loading Java Activation Framework FileTypeMap from " + resource)__				}_				InputStream inputStream = null__				try {_					inputStream = resource.getInputStream()__					return new MimetypesFileTypeMap(inputStream)__				}_				catch (IOException ex) {_					_				}_				finally {_					if (inputStream != null) {_						try {_							inputStream.close()__						}_						catch (IOException ex) {_							_						}_					}_				}_			}_			if (logger.isTraceEnabled()) {_				logger.trace("Loading default Java Activation Framework FileTypeMap")__			}_			return FileTypeMap.getDefaultFileTypeMap()__		};find,extended,mime,types,from,the,spring,context,support,module;private,static,file,type,map,init,file,type,map,resource,resource,new,class,path,resource,org,springframework,mail,javamail,mime,types,if,resource,exists,if,logger,is,trace,enabled,logger,trace,loading,java,activation,framework,file,type,map,from,resource,input,stream,input,stream,null,try,input,stream,resource,get,input,stream,return,new,mimetypes,file,type,map,input,stream,catch,ioexception,ex,finally,if,input,stream,null,try,input,stream,close,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,loading,default,java,activation,framework,file,type,map,return,file,type,map,get,default,file,type,map
PathExtensionContentNegotiationStrategy -> JafMediaTypeFactory -> private static FileTypeMap initFileTypeMap();1398960186;Find extended mime.types from the spring-context-support module.;private static FileTypeMap initFileTypeMap() {_			Resource resource = new ClassPathResource("org/springframework/mail/javamail/mime.types")__			if (resource.exists()) {_				if (logger.isTraceEnabled()) {_					logger.trace("Loading Java Activation Framework FileTypeMap from " + resource)__				}_				InputStream inputStream = null__				try {_					inputStream = resource.getInputStream()__					return new MimetypesFileTypeMap(inputStream)__				}_				catch (IOException ex) {_					_				}_				finally {_					if (inputStream != null) {_						try {_							inputStream.close()__						}_						catch (IOException ex) {_							_						}_					}_				}_			}_			if (logger.isTraceEnabled()) {_				logger.trace("Loading default Java Activation Framework FileTypeMap")__			}_			return FileTypeMap.getDefaultFileTypeMap()__		};find,extended,mime,types,from,the,spring,context,support,module;private,static,file,type,map,init,file,type,map,resource,resource,new,class,path,resource,org,springframework,mail,javamail,mime,types,if,resource,exists,if,logger,is,trace,enabled,logger,trace,loading,java,activation,framework,file,type,map,from,resource,input,stream,input,stream,null,try,input,stream,resource,get,input,stream,return,new,mimetypes,file,type,map,input,stream,catch,ioexception,ex,finally,if,input,stream,null,try,input,stream,close,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,loading,default,java,activation,framework,file,type,map,return,file,type,map,get,default,file,type,map
PathExtensionContentNegotiationStrategy -> JafMediaTypeFactory -> private static FileTypeMap initFileTypeMap();1413848647;Find extended mime.types from the spring-context-support module.;private static FileTypeMap initFileTypeMap() {_			Resource resource = new ClassPathResource("org/springframework/mail/javamail/mime.types")__			if (resource.exists()) {_				if (logger.isTraceEnabled()) {_					logger.trace("Loading Java Activation Framework FileTypeMap from " + resource)__				}_				InputStream inputStream = null__				try {_					inputStream = resource.getInputStream()__					return new MimetypesFileTypeMap(inputStream)__				}_				catch (IOException ex) {_					_				}_				finally {_					if (inputStream != null) {_						try {_							inputStream.close()__						}_						catch (IOException ex) {_							_						}_					}_				}_			}_			if (logger.isTraceEnabled()) {_				logger.trace("Loading default Java Activation Framework FileTypeMap")__			}_			return FileTypeMap.getDefaultFileTypeMap()__		};find,extended,mime,types,from,the,spring,context,support,module;private,static,file,type,map,init,file,type,map,resource,resource,new,class,path,resource,org,springframework,mail,javamail,mime,types,if,resource,exists,if,logger,is,trace,enabled,logger,trace,loading,java,activation,framework,file,type,map,from,resource,input,stream,input,stream,null,try,input,stream,resource,get,input,stream,return,new,mimetypes,file,type,map,input,stream,catch,ioexception,ex,finally,if,input,stream,null,try,input,stream,close,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,loading,default,java,activation,framework,file,type,map,return,file,type,map,get,default,file,type,map
PathExtensionContentNegotiationStrategy -> JafMediaTypeFactory -> private static FileTypeMap initFileTypeMap();1443560917;Find extended mime.types from the spring-context-support module.;private static FileTypeMap initFileTypeMap() {_			Resource resource = new ClassPathResource("org/springframework/mail/javamail/mime.types")__			if (resource.exists()) {_				if (logger.isTraceEnabled()) {_					logger.trace("Loading JAF FileTypeMap from " + resource)__				}_				InputStream inputStream = null__				try {_					inputStream = resource.getInputStream()__					return new MimetypesFileTypeMap(inputStream)__				}_				catch (IOException ex) {_					_				}_				finally {_					if (inputStream != null) {_						try {_							inputStream.close()__						}_						catch (IOException ex) {_							_						}_					}_				}_			}_			if (logger.isTraceEnabled()) {_				logger.trace("Loading default Java Activation Framework FileTypeMap")__			}_			return FileTypeMap.getDefaultFileTypeMap()__		};find,extended,mime,types,from,the,spring,context,support,module;private,static,file,type,map,init,file,type,map,resource,resource,new,class,path,resource,org,springframework,mail,javamail,mime,types,if,resource,exists,if,logger,is,trace,enabled,logger,trace,loading,jaf,file,type,map,from,resource,input,stream,input,stream,null,try,input,stream,resource,get,input,stream,return,new,mimetypes,file,type,map,input,stream,catch,ioexception,ex,finally,if,input,stream,null,try,input,stream,close,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,loading,default,java,activation,framework,file,type,map,return,file,type,map,get,default,file,type,map
PathExtensionContentNegotiationStrategy -> JafMediaTypeFactory -> private static FileTypeMap initFileTypeMap();1444898007;Find extended mime.types from the spring-context-support module.;private static FileTypeMap initFileTypeMap() {_			Resource resource = new ClassPathResource("org/springframework/mail/javamail/mime.types")__			if (resource.exists()) {_				if (logger.isTraceEnabled()) {_					logger.trace("Loading JAF FileTypeMap from " + resource)__				}_				InputStream inputStream = null__				try {_					inputStream = resource.getInputStream()__					return new MimetypesFileTypeMap(inputStream)__				}_				catch (IOException ex) {_					_				}_				finally {_					if (inputStream != null) {_						try {_							inputStream.close()__						}_						catch (IOException ex) {_							_						}_					}_				}_			}_			if (logger.isTraceEnabled()) {_				logger.trace("Loading default Java Activation Framework FileTypeMap")__			}_			return FileTypeMap.getDefaultFileTypeMap()__		};find,extended,mime,types,from,the,spring,context,support,module;private,static,file,type,map,init,file,type,map,resource,resource,new,class,path,resource,org,springframework,mail,javamail,mime,types,if,resource,exists,if,logger,is,trace,enabled,logger,trace,loading,jaf,file,type,map,from,resource,input,stream,input,stream,null,try,input,stream,resource,get,input,stream,return,new,mimetypes,file,type,map,input,stream,catch,ioexception,ex,finally,if,input,stream,null,try,input,stream,close,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,loading,default,java,activation,framework,file,type,map,return,file,type,map,get,default,file,type,map
PathExtensionContentNegotiationStrategy -> JafMediaTypeFactory -> private static FileTypeMap initFileTypeMap();1457125561;Find extended mime.types from the spring-context-support module.;private static FileTypeMap initFileTypeMap() {_			Resource resource = new ClassPathResource("org/springframework/mail/javamail/mime.types")__			if (resource.exists()) {_				if (logger.isTraceEnabled()) {_					logger.trace("Loading JAF FileTypeMap from " + resource)__				}_				InputStream inputStream = null__				try {_					inputStream = resource.getInputStream()__					return new MimetypesFileTypeMap(inputStream)__				}_				catch (IOException ex) {_					_				}_				finally {_					if (inputStream != null) {_						try {_							inputStream.close()__						}_						catch (IOException ex) {_							_						}_					}_				}_			}_			if (logger.isTraceEnabled()) {_				logger.trace("Loading default Java Activation Framework FileTypeMap")__			}_			return FileTypeMap.getDefaultFileTypeMap()__		};find,extended,mime,types,from,the,spring,context,support,module;private,static,file,type,map,init,file,type,map,resource,resource,new,class,path,resource,org,springframework,mail,javamail,mime,types,if,resource,exists,if,logger,is,trace,enabled,logger,trace,loading,jaf,file,type,map,from,resource,input,stream,input,stream,null,try,input,stream,resource,get,input,stream,return,new,mimetypes,file,type,map,input,stream,catch,ioexception,ex,finally,if,input,stream,null,try,input,stream,close,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,loading,default,java,activation,framework,file,type,map,return,file,type,map,get,default,file,type,map
PathExtensionContentNegotiationStrategy -> JafMediaTypeFactory -> private static FileTypeMap initFileTypeMap();1464879764;Find extended mime.types from the spring-context-support module.;private static FileTypeMap initFileTypeMap() {_			Resource resource = new ClassPathResource("org/springframework/mail/javamail/mime.types")__			if (resource.exists()) {_				if (logger.isTraceEnabled()) {_					logger.trace("Loading JAF FileTypeMap from " + resource)__				}_				InputStream inputStream = null__				try {_					inputStream = resource.getInputStream()__					return new MimetypesFileTypeMap(inputStream)__				}_				catch (IOException ex) {_					_				}_				finally {_					if (inputStream != null) {_						try {_							inputStream.close()__						}_						catch (IOException ex) {_							_						}_					}_				}_			}_			if (logger.isTraceEnabled()) {_				logger.trace("Loading default Java Activation Framework FileTypeMap")__			}_			return FileTypeMap.getDefaultFileTypeMap()__		};find,extended,mime,types,from,the,spring,context,support,module;private,static,file,type,map,init,file,type,map,resource,resource,new,class,path,resource,org,springframework,mail,javamail,mime,types,if,resource,exists,if,logger,is,trace,enabled,logger,trace,loading,jaf,file,type,map,from,resource,input,stream,input,stream,null,try,input,stream,resource,get,input,stream,return,new,mimetypes,file,type,map,input,stream,catch,ioexception,ex,finally,if,input,stream,null,try,input,stream,close,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,loading,default,java,activation,framework,file,type,map,return,file,type,map,get,default,file,type,map
PathExtensionContentNegotiationStrategy -> JafMediaTypeFactory -> private static FileTypeMap initFileTypeMap();1468415682;Find extended mime.types from the spring-context-support module.;private static FileTypeMap initFileTypeMap() {_			Resource resource = new ClassPathResource("org/springframework/mail/javamail/mime.types")__			if (resource.exists()) {_				if (logger.isTraceEnabled()) {_					logger.trace("Loading JAF FileTypeMap from " + resource)__				}_				InputStream inputStream = null__				try {_					inputStream = resource.getInputStream()__					return new MimetypesFileTypeMap(inputStream)__				}_				catch (IOException ex) {_					_				}_				finally {_					if (inputStream != null) {_						try {_							inputStream.close()__						}_						catch (IOException ex) {_							_						}_					}_				}_			}_			if (logger.isTraceEnabled()) {_				logger.trace("Loading default Java Activation Framework FileTypeMap")__			}_			return FileTypeMap.getDefaultFileTypeMap()__		};find,extended,mime,types,from,the,spring,context,support,module;private,static,file,type,map,init,file,type,map,resource,resource,new,class,path,resource,org,springframework,mail,javamail,mime,types,if,resource,exists,if,logger,is,trace,enabled,logger,trace,loading,jaf,file,type,map,from,resource,input,stream,input,stream,null,try,input,stream,resource,get,input,stream,return,new,mimetypes,file,type,map,input,stream,catch,ioexception,ex,finally,if,input,stream,null,try,input,stream,close,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,loading,default,java,activation,framework,file,type,map,return,file,type,map,get,default,file,type,map
