commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Configure a {@code UrlPathHelper} to use in {@link #getMediaTypeKey}  * in order to derive the lookup path for a target request URL path.  * @since 4.2.8  */ ;/**  * Configure a {@code UrlPathHelper} to use in {@link #getMediaTypeKey}  * in order to derive the lookup path for a target request URL path.  * @since 4.2.8  */ public void setUrlPathHelper(UrlPathHelper urlPathHelper) {     this.urlPathHelper = urlPathHelper. }
true;public;1;4;/**  * Indicate whether to use the Java Activation Framework as a fallback option  * to map from file extensions to media types.  * @deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}.  */ ;/**  * Indicate whether to use the Java Activation Framework as a fallback option  * to map from file extensions to media types.  * @deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}.  */ @Deprecated public void setUseJaf(boolean useJaf) {     setUseRegisteredExtensionsOnly(!useJaf). }
false;protected;1;11;;@Override @Nullable protected String getMediaTypeKey(NativeWebRequest webRequest) {     HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class).     if (request == null) {         return null.     }     String path = this.urlPathHelper.getLookupPathForRequest(request).     String extension = UriUtils.extractFileExtension(path).     return (StringUtils.hasText(extension) ? extension.toLowerCase(Locale.ENGLISH) : null). }
true;public;1;14;/**  * A public method exposing the knowledge of the path extension strategy to  * resolve file extensions to a {@link MediaType} in this case for a given  * {@link Resource}. The method first looks up any explicitly registered  * file extensions first and then falls back on {@link MediaTypeFactory} if available.  * @param resource the resource to look up  * @return the MediaType for the extension, or {@code null} if none found  * @since 4.3  */ ;/**  * A public method exposing the knowledge of the path extension strategy to  * resolve file extensions to a {@link MediaType} in this case for a given  * {@link Resource}. The method first looks up any explicitly registered  * file extensions first and then falls back on {@link MediaTypeFactory} if available.  * @param resource the resource to look up  * @return the MediaType for the extension, or {@code null} if none found  * @since 4.3  */ @Nullable public MediaType getMediaTypeForResource(Resource resource) {     Assert.notNull(resource, "Resource must not be null").     MediaType mediaType = null.     String filename = resource.getFilename().     String extension = StringUtils.getFilenameExtension(filename).     if (extension != null) {         mediaType = lookupMediaType(extension).     }     if (mediaType == null) {         mediaType = MediaTypeFactory.getMediaType(filename).orElse(null).     }     return mediaType. }
